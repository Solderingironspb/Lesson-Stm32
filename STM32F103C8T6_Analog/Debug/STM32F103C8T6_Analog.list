
STM32F103C8T6_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008940  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08008a50  08008a50  00018a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dc8  08008dc8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008dc8  08008dc8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008dc8  08008dc8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001dc  08008fac  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08008fac  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab39  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f61  00000000  00000000  0002ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002cca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018891  00000000  00000000  0002ded8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008efc  00000000  00000000  00046769  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087d90  00000000  00000000  0004f665  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d73f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000d7470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a38 	.word	0x08008a38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008a38 	.word	0x08008a38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800117c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001184:	e000      	b.n	8001188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <_write>:
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/*============SWO============*/
int _write(int file, uint8_t *ptr, int len) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e009      	b.n	80011ce <_write+0x26>
		ITM_SendChar(*ptr++);
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	60ba      	str	r2, [r7, #8]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ffca 	bl	800115c <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dbf1      	blt.n	80011ba <_write+0x12>
	}
	return len;
 80011d6:	687b      	ldr	r3, [r7, #4]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_ADCEx_InjectedConvCpltCallback>:
/*============SWO============*/

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	adcValue = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1); // Значения АЦП с ноги A0
 80011e8:	2101      	movs	r1, #1
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 80011ec:	f001 fc7a 	bl	8002ae4 <HAL_ADCEx_InjectedGetValue>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
 80011f4:	601a      	str	r2, [r3, #0]
	adcValueVref = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2); // Значения АЦП с канала Vrefint
 80011f6:	2102      	movs	r1, #2
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 80011fa:	f001 fc73 	bl	8002ae4 <HAL_ADCEx_InjectedGetValue>
 80011fe:	4602      	mov	r2, r0
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 8001202:	601a      	str	r2, [r3, #0]

	get_value_flag = 1; // Флаг, сигнализирующий о поступлении данных с АЦП
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_ADCEx_InjectedConvCpltCallback+0x40>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000400 	.word	0x20000400
 8001218:	200001fc 	.word	0x200001fc
 800121c:	20000200 	.word	0x20000200
 8001220:	20000204 	.word	0x20000204

08001224 <median>:

/*================Медиана на 3 значения со своим буфером==============*/
float median(float newVal) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	static float buf[3];
	static uint8_t count = 0;
	buf[count] = newVal;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <median+0xcc>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4a30      	ldr	r2, [pc, #192]	; (80012f4 <median+0xd0>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (++count >= 3)
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <median+0xcc>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <median+0xcc>)
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <median+0xcc>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d902      	bls.n	8001254 <median+0x30>
		count = 0;
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <median+0xcc>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]

	float a = buf[0];
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <median+0xd0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	613b      	str	r3, [r7, #16]
	float b = buf[1];
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <median+0xd0>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	60fb      	str	r3, [r7, #12]
	float c = buf[2];
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <median+0xd0>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	60bb      	str	r3, [r7, #8]

	float middle;
	if ((a <= b) && (a <= c)) {
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	6938      	ldr	r0, [r7, #16]
 800126a:	f7ff ff33 	bl	80010d4 <__aeabi_fcmple>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d012      	beq.n	800129a <median+0x76>
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6938      	ldr	r0, [r7, #16]
 8001278:	f7ff ff2c 	bl	80010d4 <__aeabi_fcmple>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <median+0x76>
		middle = (b <= c) ? b : c;
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f7ff ff25 	bl	80010d4 <__aeabi_fcmple>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <median+0x70>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	e000      	b.n	8001296 <median+0x72>
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e024      	b.n	80012e4 <median+0xc0>
	} else {
		if ((b <= a) && (b <= c)) {
 800129a:	6939      	ldr	r1, [r7, #16]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff ff19 	bl	80010d4 <__aeabi_fcmple>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d012      	beq.n	80012ce <median+0xaa>
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff ff12 	bl	80010d4 <__aeabi_fcmple>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <median+0xaa>
			middle = (a <= c) ? a : c;
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	6938      	ldr	r0, [r7, #16]
 80012ba:	f7ff ff0b 	bl	80010d4 <__aeabi_fcmple>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <median+0xa4>
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	e000      	b.n	80012ca <median+0xa6>
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <median+0xc0>
		} else {
			middle = (a <= b) ? a : b;
 80012ce:	68f9      	ldr	r1, [r7, #12]
 80012d0:	6938      	ldr	r0, [r7, #16]
 80012d2:	f7ff feff 	bl	80010d4 <__aeabi_fcmple>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <median+0xbc>
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	e000      	b.n	80012e2 <median+0xbe>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	617b      	str	r3, [r7, #20]
		}
	}
	return middle;
 80012e4:	697b      	ldr	r3, [r7, #20]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200003d8 	.word	0x200003d8
 80012f4:	200003dc 	.word	0x200003dc

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f001 f809 	bl	8002314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f90f 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 f9fb 	bl	8001700 <MX_GPIO_Init>
  MX_ADC1_Init();
 800130a:	f000 f967 	bl	80015dc <MX_ADC1_Init>
  MX_SPI1_Init();
 800130e:	f000 f9c1 	bl	8001694 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f001 f860 	bl	80023d8 <HAL_Delay>
	max7219_Init();
 8001318:	f000 faba 	bl	8001890 <max7219_Init>
	HAL_ADCEx_Calibration_Start(&hadc1);
 800131c:	486d      	ldr	r0, [pc, #436]	; (80014d4 <main+0x1dc>)
 800131e:	f001 fab7 	bl	8002890 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001322:	486c      	ldr	r0, [pc, #432]	; (80014d4 <main+0x1dc>)
 8001324:	f001 fb50 	bl	80029c8 <HAL_ADCEx_InjectedStart_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (get_value_flag) {
 8001328:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <main+0x1e0>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d061      	beq.n	80013f6 <main+0xfe>
			get_value_flag = 0;
 8001332:	4b69      	ldr	r3, [pc, #420]	; (80014d8 <main+0x1e0>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

			float mkVcc = 1.205f / adcValueVref; // напряжение питания МК где берется из даташита 1.2 опорное напряжение для данного МК
 8001338:	4b68      	ldr	r3, [pc, #416]	; (80014dc <main+0x1e4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fcc9 	bl	8000cd4 <__aeabi_ui2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4619      	mov	r1, r3
 8001346:	4866      	ldr	r0, [pc, #408]	; (80014e0 <main+0x1e8>)
 8001348:	f7ff fdd0 	bl	8000eec <__aeabi_fdiv>
 800134c:	4603      	mov	r3, r0
 800134e:	607b      	str	r3, [r7, #4]
			volt = adcValue * mkVcc; //напряжение на входе АЦП в вольтах.
 8001350:	4b64      	ldr	r3, [pc, #400]	; (80014e4 <main+0x1ec>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fcbd 	bl	8000cd4 <__aeabi_ui2f>
 800135a:	4603      	mov	r3, r0
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fd10 	bl	8000d84 <__aeabi_fmul>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b5f      	ldr	r3, [pc, #380]	; (80014e8 <main+0x1f0>)
 800136a:	601a      	str	r2, [r3, #0]
			HAL_ADCEx_InjectedStart_IT(&hadc1);
 800136c:	4859      	ldr	r0, [pc, #356]	; (80014d4 <main+0x1dc>)
 800136e:	f001 fb2b 	bl	80029c8 <HAL_ADCEx_InjectedStart_IT>

			/*================Фильтрация значений. Среднее арифметическое значение==============*/
			if (index_buffer >= 0 && filtration_step == 0) {
 8001372:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <main+0x1f4>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d13d      	bne.n	80013f6 <main+0xfe>
				filter[index_buffer] = volt;
 800137a:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <main+0x1f8>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	4b59      	ldr	r3, [pc, #356]	; (80014e8 <main+0x1f0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a5b      	ldr	r2, [pc, #364]	; (80014f4 <main+0x1fc>)
 8001386:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

				if (index_buffer == 99) {
 800138a:	4b59      	ldr	r3, [pc, #356]	; (80014f0 <main+0x1f8>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b63      	cmp	r3, #99	; 0x63
 8001390:	d12b      	bne.n	80013ea <main+0xf2>
					for (int i = 0; i <= 99; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e010      	b.n	80013ba <main+0xc2>
						summ = summ + filter[i];
 8001398:	4a56      	ldr	r2, [pc, #344]	; (80014f4 <main+0x1fc>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013a0:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <main+0x200>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4610      	mov	r0, r2
 80013a8:	f7ff fbe4 	bl	8000b74 <__addsf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <main+0x200>)
 80013b2:	601a      	str	r2, [r3, #0]
					for (int i = 0; i <= 99; i++) {
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2b63      	cmp	r3, #99	; 0x63
 80013be:	ddeb      	ble.n	8001398 <main+0xa0>
					}
					filtered = summ / 100;
 80013c0:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <main+0x200>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	494d      	ldr	r1, [pc, #308]	; (80014fc <main+0x204>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fd90 	bl	8000eec <__aeabi_fdiv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <main+0x208>)
 80013d2:	601a      	str	r2, [r3, #0]
					filtration_step = 1;
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <main+0x1f4>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
					summ = 0;
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <main+0x200>)
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
					index_buffer = 0;
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <main+0x1f8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e005      	b.n	80013f6 <main+0xfe>
				} else {
					index_buffer++;
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <main+0x1f8>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <main+0x1f8>)
 80013f4:	701a      	strb	r2, [r3, #0]
			}
			/*================Фильтрация значений. Среднее арифметическое значение==============*/

		}

		if (filtration_step == 1) {
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <main+0x1f4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d194      	bne.n	8001328 <main+0x30>
			if (HAL_GetTick() - T >= 25) {
 80013fe:	f000 ffe1 	bl	80023c4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <main+0x20c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b18      	cmp	r3, #24
 800140c:	d98c      	bls.n	8001328 <main+0x30>
				T = HAL_GetTick();
 800140e:	f000 ffd9 	bl	80023c4 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <main+0x20c>)
 8001416:	601a      	str	r2, [r3, #0]
		        /*================Фильтрация значений. Медиана на 3 значения + среднее арифметическое значение==============*/
				if (index_buffer2 >= 0) {
					filter_2[index_buffer2] = median(filtered);
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <main+0x208>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <main+0x210>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461c      	mov	r4, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f7ff fefe 	bl	8001224 <median>
 8001428:	4602      	mov	r2, r0
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <main+0x214>)
 800142c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					if (index_buffer2 == 9) {
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <main+0x210>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b09      	cmp	r3, #9
 8001436:	d128      	bne.n	800148a <main+0x192>
						for (int i = 0; i <= 9; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	e010      	b.n	8001460 <main+0x168>
							summ2 = summ2 + filter_2[i];
 800143e:	4a33      	ldr	r2, [pc, #204]	; (800150c <main+0x214>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <main+0x218>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f7ff fb91 	bl	8000b74 <__addsf3>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <main+0x218>)
 8001458:	601a      	str	r2, [r3, #0]
						for (int i = 0; i <= 9; i++) {
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3301      	adds	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b09      	cmp	r3, #9
 8001464:	ddeb      	ble.n	800143e <main+0x146>
						}
						filtered2 = summ2 / 10;
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <main+0x218>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	492a      	ldr	r1, [pc, #168]	; (8001514 <main+0x21c>)
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fd3d 	bl	8000eec <__aeabi_fdiv>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <main+0x220>)
 8001478:	601a      	str	r2, [r3, #0]
						summ2 = 0;
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <main+0x218>)
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
						index_buffer2 = 0;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <main+0x210>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e005      	b.n	8001496 <main+0x19e>
					} else {
						index_buffer2++;
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <main+0x210>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <main+0x210>)
 8001494:	701a      	strb	r2, [r3, #0]
					}
				}
				/*================Фильтрация значений. Медиана на 3 значения + среднее арифметическое значение==============*/

				printf("adc_filtre3 = %.3f\r\n", filtered2 - 0.002f);
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <main+0x220>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4920      	ldr	r1, [pc, #128]	; (800151c <main+0x224>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fb67 	bl	8000b70 <__aeabi_fsub>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe ffbf 	bl	8000428 <__aeabi_f2d>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	461a      	mov	r2, r3
 80014b0:	4623      	mov	r3, r4
 80014b2:	481b      	ldr	r0, [pc, #108]	; (8001520 <main+0x228>)
 80014b4:	f003 ff12 	bl	80052dc <iprintf>
				max7219_Send_float(filtered2 - 0.002f);
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <main+0x220>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4917      	ldr	r1, [pc, #92]	; (800151c <main+0x224>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb56 	bl	8000b70 <__aeabi_fsub>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fb06 	bl	8001ad8 <max7219_Send_float>
				filtration_step = 0;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <main+0x1f4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
		if (get_value_flag) {
 80014d2:	e729      	b.n	8001328 <main+0x30>
 80014d4:	20000400 	.word	0x20000400
 80014d8:	20000204 	.word	0x20000204
 80014dc:	20000200 	.word	0x20000200
 80014e0:	3f9a3d71 	.word	0x3f9a3d71
 80014e4:	200001fc 	.word	0x200001fc
 80014e8:	20000208 	.word	0x20000208
 80014ec:	200001f8 	.word	0x200001f8
 80014f0:	200003cd 	.word	0x200003cd
 80014f4:	20000214 	.word	0x20000214
 80014f8:	200003d0 	.word	0x200003d0
 80014fc:	42c80000 	.word	0x42c80000
 8001500:	2000020c 	.word	0x2000020c
 8001504:	200003fc 	.word	0x200003fc
 8001508:	200003cc 	.word	0x200003cc
 800150c:	200003a4 	.word	0x200003a4
 8001510:	200003d4 	.word	0x200003d4
 8001514:	41200000 	.word	0x41200000
 8001518:	20000210 	.word	0x20000210
 800151c:	3b03126f 	.word	0x3b03126f
 8001520:	08008a50 	.word	0x08008a50

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	; 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152e:	2228      	movs	r2, #40	; 0x28
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f003 f89a 	bl	800466c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001554:	2301      	movs	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001562:	2301      	movs	r3, #1
 8001564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001570:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	4618      	mov	r0, r3
 800157c:	f001 ff68 	bl	8003450 <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001586:	f000 f905 	bl	8001794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2102      	movs	r1, #2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 f9d2 	bl	8003950 <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015b2:	f000 f8ef 	bl	8001794 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015b6:	2302      	movs	r3, #2
 80015b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fb4c 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015ce:	f000 f8e1 	bl	8001794 <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3750      	adds	r7, #80	; 0x50
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <MX_ADC1_Init+0xb0>)
 80015f6:	4a26      	ldr	r2, [pc, #152]	; (8001690 <MX_ADC1_Init+0xb4>)
 80015f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <MX_ADC1_Init+0xb0>)
 80015fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <MX_ADC1_Init+0xb0>)
 8001604:	2200      	movs	r2, #0
 8001606:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <MX_ADC1_Init+0xb0>)
 800160a:	2200      	movs	r2, #0
 800160c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_ADC1_Init+0xb0>)
 8001610:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001614:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_ADC1_Init+0xb0>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_ADC1_Init+0xb0>)
 800161e:	2201      	movs	r2, #1
 8001620:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001622:	481a      	ldr	r0, [pc, #104]	; (800168c <MX_ADC1_Init+0xb0>)
 8001624:	f000 fefa 	bl	800241c <HAL_ADC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 800162e:	f000 f8b1 	bl	8001794 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001636:	2301      	movs	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800163a:	2302      	movs	r3, #2
 800163c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800163e:	2307      	movs	r3, #7
 8001640:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001642:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001646:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <MX_ADC1_Init+0xb0>)
 800165a:	f001 fa6d 	bl	8002b38 <HAL_ADCEx_InjectedConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001664:	f000 f896 	bl	8001794 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 8001668:	2311      	movs	r3, #17
 800166a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800166c:	2302      	movs	r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_ADC1_Init+0xb0>)
 8001676:	f001 fa5f 	bl	8002b38 <HAL_ADCEx_InjectedConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001680:	f000 f888 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000400 	.word	0x20000400
 8001690:	40012400 	.word	0x40012400

08001694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_SPI1_Init+0x64>)
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <MX_SPI1_Init+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016c8:	2210      	movs	r2, #16
 80016ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016e0:	220a      	movs	r2, #10
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_SPI1_Init+0x64>)
 80016e6:	f002 fc2d 	bl	8003f44 <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016f0:	f000 f850 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000430 	.word	0x20000430
 80016fc:	40013000 	.word	0x40013000

08001700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_GPIO_Init+0x8c>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a1c      	ldr	r2, [pc, #112]	; (800178c <MX_GPIO_Init+0x8c>)
 800171a:	f043 0320 	orr.w	r3, r3, #32
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_GPIO_Init+0x8c>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_GPIO_Init+0x8c>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a16      	ldr	r2, [pc, #88]	; (800178c <MX_GPIO_Init+0x8c>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_GPIO_Init+0x8c>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_GPIO_Init+0x8c>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a10      	ldr	r2, [pc, #64]	; (800178c <MX_GPIO_Init+0x8c>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_GPIO_Init+0x8c>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2102      	movs	r1, #2
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <MX_GPIO_Init+0x90>)
 8001762:	f001 fe5d 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001766:	2302      	movs	r3, #2
 8001768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2302      	movs	r3, #2
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4619      	mov	r1, r3
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <MX_GPIO_Init+0x90>)
 800177e:	f001 fcf5 	bl	800316c <HAL_GPIO_Init>

}
 8001782:	bf00      	nop
 8001784:	3720      	adds	r7, #32
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800179a:	e7fe      	b.n	800179a <Error_Handler+0x6>

0800179c <max7219_Transmit>:
/*----------Общение с max7219 по spi-----------------*/
///Общение с max7219 по spi(выбор регистра и отправка данных).
///(См. Datasheet MAX7219/MAX7221. Cтр.7, табл. 2).
/// \param adress - адрес регистра, в который производится отправка данных;
/// \param data - данные.
void max7219_Transmit(uint8_t adress, uint8_t data) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	460a      	mov	r2, r1
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	4613      	mov	r3, r2
 80017aa:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[1] = { 0 };
 80017ac:	2300      	movs	r3, #0
 80017ae:	733b      	strb	r3, [r7, #12]
	cs_set();
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <max7219_Transmit+0x50>)
 80017b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b6:	611a      	str	r2, [r3, #16]
	tx_buffer[0] = adress;
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2201      	movs	r2, #1
 80017c2:	4619      	mov	r1, r3
 80017c4:	480a      	ldr	r0, [pc, #40]	; (80017f0 <max7219_Transmit+0x54>)
 80017c6:	f002 fc41 	bl	800404c <HAL_SPI_Transmit_IT>
	tx_buffer[0] = data;
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2201      	movs	r2, #1
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <max7219_Transmit+0x54>)
 80017d8:	f002 fc38 	bl	800404c <HAL_SPI_Transmit_IT>
	cs_reset();
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <max7219_Transmit+0x50>)
 80017de:	2202      	movs	r2, #2
 80017e0:	611a      	str	r2, [r3, #16]
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40010800 	.word	0x40010800
 80017f0:	20000430 	.word	0x20000430

080017f4 <max7219_Shutdown>:
/*----------Общение с max7219 по spi-----------------*/

/*--------------------Режим сна----------------------*/
///Режим сна.(См. Datasheet MAX7219/MAX7221. Стр.7, табл. 3).
/// \param data - данные. 0 - Режим сна. 1 - Нормальный режим.
void max7219_Shutdown(bool data){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0C, data);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4619      	mov	r1, r3
 8001802:	200c      	movs	r0, #12
 8001804:	f7ff ffca 	bl	800179c <max7219_Transmit>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <max7219_Display_Test>:
/*--------------------Режим сна----------------------*/

/*-------------------Тест дисплея--------------------*/
///Тест дисплея.(См. Datasheet MAX7219/MAX7221. Стр.10, табл. 10).
/// \param data - данные. 0 - Нормальный режим. 1 - Тест дисплея.
void max7219_Display_Test(bool data){
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0F, data);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4619      	mov	r1, r3
 800181e:	200f      	movs	r0, #15
 8001820:	f7ff ffbc 	bl	800179c <max7219_Transmit>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <max7219_Display_Clean>:
/*-------------------Тест дисплея--------------------*/

/*-----------------Очистка дисплея-------------------*/
///Очистка дисплея. (См. мой урок https://youtu.be/BonEEaQX8vg).
void max7219_Display_Clean(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	max7219_Transmit(0x01, 0x00);
 8001830:	2100      	movs	r1, #0
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff ffb2 	bl	800179c <max7219_Transmit>
	max7219_Transmit(0x02, 0x00);
 8001838:	2100      	movs	r1, #0
 800183a:	2002      	movs	r0, #2
 800183c:	f7ff ffae 	bl	800179c <max7219_Transmit>
	max7219_Transmit(0x03, 0x00);
 8001840:	2100      	movs	r1, #0
 8001842:	2003      	movs	r0, #3
 8001844:	f7ff ffaa 	bl	800179c <max7219_Transmit>
	max7219_Transmit(0x04, 0x00);
 8001848:	2100      	movs	r1, #0
 800184a:	2004      	movs	r0, #4
 800184c:	f7ff ffa6 	bl	800179c <max7219_Transmit>
	max7219_Transmit(0x05, 0x00);
 8001850:	2100      	movs	r1, #0
 8001852:	2005      	movs	r0, #5
 8001854:	f7ff ffa2 	bl	800179c <max7219_Transmit>
	max7219_Transmit(0x06, 0x00);
 8001858:	2100      	movs	r1, #0
 800185a:	2006      	movs	r0, #6
 800185c:	f7ff ff9e 	bl	800179c <max7219_Transmit>
	max7219_Transmit(0x07, 0x00);
 8001860:	2100      	movs	r1, #0
 8001862:	2007      	movs	r0, #7
 8001864:	f7ff ff9a 	bl	800179c <max7219_Transmit>
	max7219_Transmit(0x08, 0x00);
 8001868:	2100      	movs	r1, #0
 800186a:	2008      	movs	r0, #8
 800186c:	f7ff ff96 	bl	800179c <max7219_Transmit>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <max7219_Intensity>:
/*-----------------Очистка дисплея-------------------*/

/*-----------------Яркость дисплея-------------------*/
///Яркость дисплея.(См. Datasheet MAX7219/MAX7221. Стр.9, табл. 7).
/// \param data - данные. Значения от 0x00 до 0x0F.
void max7219_Intensity(uint8_t data){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
max7219_Transmit(0x0A, data);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4619      	mov	r1, r3
 8001882:	200a      	movs	r0, #10
 8001884:	f7ff ff8a 	bl	800179c <max7219_Transmit>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <max7219_Init>:
/*-----------------Яркость дисплея-------------------*/

/*--------------Инициализация дисплея----------------*/
///Инициализация дисплея.
void max7219_Init(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	max7219_Transmit(0x09, 0x00); //Работа без режима декодирование
 8001894:	2100      	movs	r1, #0
 8001896:	2009      	movs	r0, #9
 8001898:	f7ff ff80 	bl	800179c <max7219_Transmit>
	max7219_Transmit(0x0B, 0x07); //Количество используемых разрядов
 800189c:	2107      	movs	r1, #7
 800189e:	200b      	movs	r0, #11
 80018a0:	f7ff ff7c 	bl	800179c <max7219_Transmit>
	max7219_Intensity(0x0F); //Интенсивность свечения на максимум
 80018a4:	200f      	movs	r0, #15
 80018a6:	f7ff ffe5 	bl	8001874 <max7219_Intensity>
	max7219_Shutdown(1); //Вывести дисплей из сна в нормальный режим работы
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff ffa2 	bl	80017f4 <max7219_Shutdown>
	max7219_Display_Test(1); //Проверка дисплея
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff ffad 	bl	8001810 <max7219_Display_Test>
	HAL_Delay(2000); //Время на визуальный осмотр
 80018b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018ba:	f000 fd8d 	bl	80023d8 <HAL_Delay>
	max7219_Display_Test(0); //Перевод дисплея в нормальный режим работы
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff ffa6 	bl	8001810 <max7219_Display_Test>
	max7219_Display_Clean(); //Очистка дисплея
 80018c4:	f7ff ffb2 	bl	800182c <max7219_Display_Clean>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <max7219_send_symbol>:
/*--------------Инициализация дисплея----------------*/

/*-----------Отправка символов на дисплей------------*/
///Отправка символов на дисплей. Функция вспомогательная.
/// \param *tx_buffer - Массив с данными, которые будут выводиться на дисплей.
void max7219_send_symbol(uint8_t *tx_buffer) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	max7219_Transmit(8, tx_buffer[0]);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	2008      	movs	r0, #8
 80018dc:	f7ff ff5e 	bl	800179c <max7219_Transmit>
	max7219_Transmit(7, tx_buffer[1]);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3301      	adds	r3, #1
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	2007      	movs	r0, #7
 80018ea:	f7ff ff57 	bl	800179c <max7219_Transmit>
	max7219_Transmit(6, tx_buffer[2]);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3302      	adds	r3, #2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	2006      	movs	r0, #6
 80018f8:	f7ff ff50 	bl	800179c <max7219_Transmit>
	max7219_Transmit(5, tx_buffer[3]);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3303      	adds	r3, #3
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	2005      	movs	r0, #5
 8001906:	f7ff ff49 	bl	800179c <max7219_Transmit>
	max7219_Transmit(4, tx_buffer[4]);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3304      	adds	r3, #4
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	2004      	movs	r0, #4
 8001914:	f7ff ff42 	bl	800179c <max7219_Transmit>
	max7219_Transmit(3, tx_buffer[5]);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3305      	adds	r3, #5
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	2003      	movs	r0, #3
 8001922:	f7ff ff3b 	bl	800179c <max7219_Transmit>
	max7219_Transmit(2, tx_buffer[6]);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3306      	adds	r3, #6
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	2002      	movs	r0, #2
 8001930:	f7ff ff34 	bl	800179c <max7219_Transmit>
	max7219_Transmit(1, tx_buffer[7]);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3307      	adds	r3, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	2001      	movs	r0, #1
 800193e:	f7ff ff2d 	bl	800179c <max7219_Transmit>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <max7219_num>:
/*-----------Отправка символов на дисплей------------*/

/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/
///Подготовка данных к выводу на дисплей. Цифры, минус, пробел. Функция вспомогательная.
void max7219_num(uint8_t rg, uint32_t value) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b05      	cmp	r3, #5
 800195c:	d038      	beq.n	80019d0 <max7219_num+0x84>
 800195e:	2b05      	cmp	r3, #5
 8001960:	d80d      	bhi.n	800197e <max7219_num+0x32>
 8001962:	2b02      	cmp	r3, #2
 8001964:	d025      	beq.n	80019b2 <max7219_num+0x66>
 8001966:	2b02      	cmp	r3, #2
 8001968:	d804      	bhi.n	8001974 <max7219_num+0x28>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d017      	beq.n	800199e <max7219_num+0x52>
 800196e:	2b01      	cmp	r3, #1
 8001970:	d01a      	beq.n	80019a8 <max7219_num+0x5c>
		break;
	case 255:
		symbol[rg] = _255;
		break;
	}
}
 8001972:	e050      	b.n	8001a16 <max7219_num+0xca>
	switch (value) {
 8001974:	2b03      	cmp	r3, #3
 8001976:	d021      	beq.n	80019bc <max7219_num+0x70>
 8001978:	2b04      	cmp	r3, #4
 800197a:	d024      	beq.n	80019c6 <max7219_num+0x7a>
}
 800197c:	e04b      	b.n	8001a16 <max7219_num+0xca>
	switch (value) {
 800197e:	2b08      	cmp	r3, #8
 8001980:	d035      	beq.n	80019ee <max7219_num+0xa2>
 8001982:	2b08      	cmp	r3, #8
 8001984:	d804      	bhi.n	8001990 <max7219_num+0x44>
 8001986:	2b06      	cmp	r3, #6
 8001988:	d027      	beq.n	80019da <max7219_num+0x8e>
 800198a:	2b07      	cmp	r3, #7
 800198c:	d02a      	beq.n	80019e4 <max7219_num+0x98>
}
 800198e:	e042      	b.n	8001a16 <max7219_num+0xca>
	switch (value) {
 8001990:	2bfe      	cmp	r3, #254	; 0xfe
 8001992:	d036      	beq.n	8001a02 <max7219_num+0xb6>
 8001994:	2bff      	cmp	r3, #255	; 0xff
 8001996:	d039      	beq.n	8001a0c <max7219_num+0xc0>
 8001998:	2b09      	cmp	r3, #9
 800199a:	d02d      	beq.n	80019f8 <max7219_num+0xac>
}
 800199c:	e03b      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _0;
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <max7219_num+0xd4>)
 80019a2:	217e      	movs	r1, #126	; 0x7e
 80019a4:	54d1      	strb	r1, [r2, r3]
		break;
 80019a6:	e036      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _1;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <max7219_num+0xd4>)
 80019ac:	2130      	movs	r1, #48	; 0x30
 80019ae:	54d1      	strb	r1, [r2, r3]
		break;
 80019b0:	e031      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _2;
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <max7219_num+0xd4>)
 80019b6:	216d      	movs	r1, #109	; 0x6d
 80019b8:	54d1      	strb	r1, [r2, r3]
		break;
 80019ba:	e02c      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _3;
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <max7219_num+0xd4>)
 80019c0:	2179      	movs	r1, #121	; 0x79
 80019c2:	54d1      	strb	r1, [r2, r3]
		break;
 80019c4:	e027      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _4;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <max7219_num+0xd4>)
 80019ca:	2133      	movs	r1, #51	; 0x33
 80019cc:	54d1      	strb	r1, [r2, r3]
		break;
 80019ce:	e022      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _5;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <max7219_num+0xd4>)
 80019d4:	215b      	movs	r1, #91	; 0x5b
 80019d6:	54d1      	strb	r1, [r2, r3]
		break;
 80019d8:	e01d      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _6;
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <max7219_num+0xd4>)
 80019de:	215f      	movs	r1, #95	; 0x5f
 80019e0:	54d1      	strb	r1, [r2, r3]
		break;
 80019e2:	e018      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _7;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <max7219_num+0xd4>)
 80019e8:	2170      	movs	r1, #112	; 0x70
 80019ea:	54d1      	strb	r1, [r2, r3]
		break;
 80019ec:	e013      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _8;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <max7219_num+0xd4>)
 80019f2:	217f      	movs	r1, #127	; 0x7f
 80019f4:	54d1      	strb	r1, [r2, r3]
		break;
 80019f6:	e00e      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _9;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <max7219_num+0xd4>)
 80019fc:	217b      	movs	r1, #123	; 0x7b
 80019fe:	54d1      	strb	r1, [r2, r3]
		break;
 8001a00:	e009      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _254;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <max7219_num+0xd4>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	54d1      	strb	r1, [r2, r3]
		break;
 8001a0a:	e004      	b.n	8001a16 <max7219_num+0xca>
		symbol[rg] = _255;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <max7219_num+0xd4>)
 8001a10:	2100      	movs	r1, #0
 8001a12:	54d1      	strb	r1, [r2, r3]
		break;
 8001a14:	bf00      	nop
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	200003e8 	.word	0x200003e8

08001a24 <max7219_num_point>:
/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/

/*---Подготовка данных к выводу на дисплей. Цифры с точкой---*/
///Подготовка данных к выводу на дисплей. Цифры с точкой. Функция вспомогательная.
void max7219_num_point(uint8_t rg, uint32_t value) {
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b09      	cmp	r3, #9
 8001a34:	d848      	bhi.n	8001ac8 <max7219_num_point+0xa4>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <max7219_num_point+0x18>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a65 	.word	0x08001a65
 8001a40:	08001a6f 	.word	0x08001a6f
 8001a44:	08001a79 	.word	0x08001a79
 8001a48:	08001a83 	.word	0x08001a83
 8001a4c:	08001a8d 	.word	0x08001a8d
 8001a50:	08001a97 	.word	0x08001a97
 8001a54:	08001aa1 	.word	0x08001aa1
 8001a58:	08001aab 	.word	0x08001aab
 8001a5c:	08001ab5 	.word	0x08001ab5
 8001a60:	08001abf 	.word	0x08001abf
	case 0:
		symbol[rg] = _0_point;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <max7219_num_point+0xb0>)
 8001a68:	21fe      	movs	r1, #254	; 0xfe
 8001a6a:	54d1      	strb	r1, [r2, r3]
		break;
 8001a6c:	e02c      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 1:
		symbol[rg] = _1_point;
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <max7219_num_point+0xb0>)
 8001a72:	21b0      	movs	r1, #176	; 0xb0
 8001a74:	54d1      	strb	r1, [r2, r3]
		break;
 8001a76:	e027      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 2:
		symbol[rg] = _2_point;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <max7219_num_point+0xb0>)
 8001a7c:	21ed      	movs	r1, #237	; 0xed
 8001a7e:	54d1      	strb	r1, [r2, r3]
		break;
 8001a80:	e022      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 3:
		symbol[rg] = _3_point;
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <max7219_num_point+0xb0>)
 8001a86:	21f9      	movs	r1, #249	; 0xf9
 8001a88:	54d1      	strb	r1, [r2, r3]
		break;
 8001a8a:	e01d      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 4:
		symbol[rg] = _4_point;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <max7219_num_point+0xb0>)
 8001a90:	21b3      	movs	r1, #179	; 0xb3
 8001a92:	54d1      	strb	r1, [r2, r3]
		break;
 8001a94:	e018      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 5:
		symbol[rg] = _5_point;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <max7219_num_point+0xb0>)
 8001a9a:	21db      	movs	r1, #219	; 0xdb
 8001a9c:	54d1      	strb	r1, [r2, r3]
		break;
 8001a9e:	e013      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 6:
		symbol[rg] = _6_point;
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <max7219_num_point+0xb0>)
 8001aa4:	21df      	movs	r1, #223	; 0xdf
 8001aa6:	54d1      	strb	r1, [r2, r3]
		break;
 8001aa8:	e00e      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 7:
		symbol[rg] = _7_point;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <max7219_num_point+0xb0>)
 8001aae:	21f0      	movs	r1, #240	; 0xf0
 8001ab0:	54d1      	strb	r1, [r2, r3]
		break;
 8001ab2:	e009      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 8:
		symbol[rg] = _8_point;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <max7219_num_point+0xb0>)
 8001ab8:	21ff      	movs	r1, #255	; 0xff
 8001aba:	54d1      	strb	r1, [r2, r3]
		break;
 8001abc:	e004      	b.n	8001ac8 <max7219_num_point+0xa4>
	case 9:
		symbol[rg] = _9_point;
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <max7219_num_point+0xb0>)
 8001ac2:	21fb      	movs	r1, #251	; 0xfb
 8001ac4:	54d1      	strb	r1, [r2, r3]
		break;
 8001ac6:	bf00      	nop
	}
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200003e8 	.word	0x200003e8

08001ad8 <max7219_Send_float>:
///Отправка чисел с плавающей запятой на дисплей.
///Число должно быть в рамках от -9999.999 до 99999.999.
///В противном случае, на дисплее будет отображено "--------".
///Функция проверяет отправленное число на выход за рамки вывода дисплея, положительное оно или отрицательное,
///далее преобразует отправленное число в BCD код(двоично-десятичный код.) и уже после этого отправляет данные на дисплей.
void max7219_Send_float(float value) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	if (value > 99999.999f || value < -9999.999f) {
 8001ae0:	49b2      	ldr	r1, [pc, #712]	; (8001dac <max7219_Send_float+0x2d4>)
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fb0a 	bl	80010fc <__aeabi_fcmpgt>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <max7219_Send_float+0x24>
 8001aee:	49b0      	ldr	r1, [pc, #704]	; (8001db0 <max7219_Send_float+0x2d8>)
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff fae5 	bl	80010c0 <__aeabi_fcmplt>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d023      	beq.n	8001b44 <max7219_Send_float+0x6c>
		max7219_num(0, 254);
 8001afc:	21fe      	movs	r1, #254	; 0xfe
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff ff24 	bl	800194c <max7219_num>
		max7219_num(1, 254);
 8001b04:	21fe      	movs	r1, #254	; 0xfe
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff ff20 	bl	800194c <max7219_num>
		max7219_num(2, 254);
 8001b0c:	21fe      	movs	r1, #254	; 0xfe
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7ff ff1c 	bl	800194c <max7219_num>
		max7219_num(3, 254);
 8001b14:	21fe      	movs	r1, #254	; 0xfe
 8001b16:	2003      	movs	r0, #3
 8001b18:	f7ff ff18 	bl	800194c <max7219_num>
		max7219_num(4, 254);
 8001b1c:	21fe      	movs	r1, #254	; 0xfe
 8001b1e:	2004      	movs	r0, #4
 8001b20:	f7ff ff14 	bl	800194c <max7219_num>
		max7219_num(5, 254);
 8001b24:	21fe      	movs	r1, #254	; 0xfe
 8001b26:	2005      	movs	r0, #5
 8001b28:	f7ff ff10 	bl	800194c <max7219_num>
		max7219_num(6, 254);
 8001b2c:	21fe      	movs	r1, #254	; 0xfe
 8001b2e:	2006      	movs	r0, #6
 8001b30:	f7ff ff0c 	bl	800194c <max7219_num>
		max7219_num(7, 254);
 8001b34:	21fe      	movs	r1, #254	; 0xfe
 8001b36:	2007      	movs	r0, #7
 8001b38:	f7ff ff08 	bl	800194c <max7219_num>
		max7219_send_symbol(symbol);
 8001b3c:	489d      	ldr	r0, [pc, #628]	; (8001db4 <max7219_Send_float+0x2dc>)
 8001b3e:	f7ff fec5 	bl	80018cc <max7219_send_symbol>
			max7219_num(7, BCD_Arr[0]);
			max7219_send_symbol(symbol);
		}
	}

}
 8001b42:	e230      	b.n	8001fa6 <max7219_Send_float+0x4ce>
		int32_t value_conv = value * 1000;
 8001b44:	499c      	ldr	r1, [pc, #624]	; (8001db8 <max7219_Send_float+0x2e0>)
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff f91c 	bl	8000d84 <__aeabi_fmul>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fade 	bl	8001110 <__aeabi_f2iz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	61fb      	str	r3, [r7, #28]
		value = value * 1000;
 8001b58:	4997      	ldr	r1, [pc, #604]	; (8001db8 <max7219_Send_float+0x2e0>)
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff f912 	bl	8000d84 <__aeabi_fmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	607b      	str	r3, [r7, #4]
		if (value_conv < 0) {
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da05      	bge.n	8001b76 <max7219_Send_float+0x9e>
			positive_value = false;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	76fb      	strb	r3, [r7, #27]
			value_conv = value_conv * (-1);
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	425b      	negs	r3, r3
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	e001      	b.n	8001b7a <max7219_Send_float+0xa2>
			positive_value = true;
 8001b76:	2301      	movs	r3, #1
 8001b78:	76fb      	strb	r3, [r7, #27]
		uint8_t BCD_Arr[8] = { 0, };
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
		lenght = value_conv;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	617b      	str	r3, [r7, #20]
		while (value_conv >= 10000000) {
 8001b88:	e007      	b.n	8001b9a <max7219_Send_float+0xc2>
			value_conv -= 10000000;
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <max7219_Send_float+0x2e4>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	61fb      	str	r3, [r7, #28]
			BCD_Arr[7]++;
 8001b92:	7cfb      	ldrb	r3, [r7, #19]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	74fb      	strb	r3, [r7, #19]
		while (value_conv >= 10000000) {
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4a88      	ldr	r2, [pc, #544]	; (8001dc0 <max7219_Send_float+0x2e8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	dcf3      	bgt.n	8001b8a <max7219_Send_float+0xb2>
		while (value_conv >= 1000000) {
 8001ba2:	e009      	b.n	8001bb8 <max7219_Send_float+0xe0>
			value_conv -= 1000000;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8001baa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001bae:	61fb      	str	r3, [r7, #28]
			BCD_Arr[6]++;
 8001bb0:	7cbb      	ldrb	r3, [r7, #18]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	74bb      	strb	r3, [r7, #18]
		while (value_conv >= 1000000) {
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4a82      	ldr	r2, [pc, #520]	; (8001dc4 <max7219_Send_float+0x2ec>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	dcf1      	bgt.n	8001ba4 <max7219_Send_float+0xcc>
		while (value_conv >= 100000) {
 8001bc0:	e008      	b.n	8001bd4 <max7219_Send_float+0xfc>
			value_conv -= 100000;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8001bc8:	3ba0      	subs	r3, #160	; 0xa0
 8001bca:	61fb      	str	r3, [r7, #28]
			BCD_Arr[5]++;
 8001bcc:	7c7b      	ldrb	r3, [r7, #17]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	747b      	strb	r3, [r7, #17]
		while (value_conv >= 100000) {
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	4a7c      	ldr	r2, [pc, #496]	; (8001dc8 <max7219_Send_float+0x2f0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	dcf2      	bgt.n	8001bc2 <max7219_Send_float+0xea>
		while (value_conv >= 10000) {
 8001bdc:	e008      	b.n	8001bf0 <max7219_Send_float+0x118>
			value_conv -= 10000;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8001be4:	3b10      	subs	r3, #16
 8001be6:	61fb      	str	r3, [r7, #28]
			BCD_Arr[4]++;
 8001be8:	7c3b      	ldrb	r3, [r7, #16]
 8001bea:	3301      	adds	r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	743b      	strb	r3, [r7, #16]
		while (value_conv >= 10000) {
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	dcf1      	bgt.n	8001bde <max7219_Send_float+0x106>
		while (value_conv >= 1000) {
 8001bfa:	e007      	b.n	8001c0c <max7219_Send_float+0x134>
			value_conv -= 1000;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001c02:	61fb      	str	r3, [r7, #28]
			BCD_Arr[3]++;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73fb      	strb	r3, [r7, #15]
		while (value_conv >= 1000) {
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c12:	daf3      	bge.n	8001bfc <max7219_Send_float+0x124>
		while (value_conv >= 100) {
 8001c14:	e006      	b.n	8001c24 <max7219_Send_float+0x14c>
			value_conv -= 100;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b64      	subs	r3, #100	; 0x64
 8001c1a:	61fb      	str	r3, [r7, #28]
			BCD_Arr[2]++;
 8001c1c:	7bbb      	ldrb	r3, [r7, #14]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	73bb      	strb	r3, [r7, #14]
		while (value_conv >= 100) {
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b63      	cmp	r3, #99	; 0x63
 8001c28:	dcf5      	bgt.n	8001c16 <max7219_Send_float+0x13e>
		while (value_conv >= 10) {
 8001c2a:	e006      	b.n	8001c3a <max7219_Send_float+0x162>
			value_conv -= 10;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3b0a      	subs	r3, #10
 8001c30:	61fb      	str	r3, [r7, #28]
			BCD_Arr[1]++;
 8001c32:	7b7b      	ldrb	r3, [r7, #13]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	737b      	strb	r3, [r7, #13]
		while (value_conv >= 10) {
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	dcf5      	bgt.n	8001c2c <max7219_Send_float+0x154>
		BCD_Arr[0] = (uint8_t) (value_conv);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	733b      	strb	r3, [r7, #12]
		if (lenght < 10) {
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	dc2f      	bgt.n	8001cac <max7219_Send_float+0x1d4>
			max7219_num(0, 255);
 8001c4c:	21ff      	movs	r1, #255	; 0xff
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fe7c 	bl	800194c <max7219_num>
			max7219_num(1, 255);
 8001c54:	21ff      	movs	r1, #255	; 0xff
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff fe78 	bl	800194c <max7219_num>
			max7219_num(2, 255);
 8001c5c:	21ff      	movs	r1, #255	; 0xff
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f7ff fe74 	bl	800194c <max7219_num>
			if (positive_value == true) {
 8001c64:	7efb      	ldrb	r3, [r7, #27]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <max7219_Send_float+0x19c>
				max7219_num(3, 255);
 8001c6a:	21ff      	movs	r1, #255	; 0xff
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f7ff fe6d 	bl	800194c <max7219_num>
 8001c72:	e003      	b.n	8001c7c <max7219_Send_float+0x1a4>
				max7219_num(3, 254);
 8001c74:	21fe      	movs	r1, #254	; 0xfe
 8001c76:	2003      	movs	r0, #3
 8001c78:	f7ff fe68 	bl	800194c <max7219_num>
			max7219_num_point(4, BCD_Arr[4]);
 8001c7c:	7c3b      	ldrb	r3, [r7, #16]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	2004      	movs	r0, #4
 8001c82:	f7ff fecf 	bl	8001a24 <max7219_num_point>
			max7219_num(5, BCD_Arr[3]);
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	2005      	movs	r0, #5
 8001c8c:	f7ff fe5e 	bl	800194c <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001c90:	7b7b      	ldrb	r3, [r7, #13]
 8001c92:	4619      	mov	r1, r3
 8001c94:	2006      	movs	r0, #6
 8001c96:	f7ff fe59 	bl	800194c <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001c9a:	7b3b      	ldrb	r3, [r7, #12]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	2007      	movs	r0, #7
 8001ca0:	f7ff fe54 	bl	800194c <max7219_num>
			max7219_send_symbol(symbol);
 8001ca4:	4843      	ldr	r0, [pc, #268]	; (8001db4 <max7219_Send_float+0x2dc>)
 8001ca6:	f7ff fe11 	bl	80018cc <max7219_send_symbol>
}
 8001caa:	e17c      	b.n	8001fa6 <max7219_Send_float+0x4ce>
		} else if (lenght < 100) {
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b63      	cmp	r3, #99	; 0x63
 8001cb0:	dc2e      	bgt.n	8001d10 <max7219_Send_float+0x238>
			max7219_num(0, 255);
 8001cb2:	21ff      	movs	r1, #255	; 0xff
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fe49 	bl	800194c <max7219_num>
			max7219_num(1, 255);
 8001cba:	21ff      	movs	r1, #255	; 0xff
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff fe45 	bl	800194c <max7219_num>
			max7219_num(2, 255);
 8001cc2:	21ff      	movs	r1, #255	; 0xff
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f7ff fe41 	bl	800194c <max7219_num>
			if (positive_value == true) {
 8001cca:	7efb      	ldrb	r3, [r7, #27]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <max7219_Send_float+0x202>
				max7219_num(3, 255);
 8001cd0:	21ff      	movs	r1, #255	; 0xff
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f7ff fe3a 	bl	800194c <max7219_num>
 8001cd8:	e003      	b.n	8001ce2 <max7219_Send_float+0x20a>
				max7219_num(3, 254);
 8001cda:	21fe      	movs	r1, #254	; 0xfe
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f7ff fe35 	bl	800194c <max7219_num>
			max7219_num_point(4, 255);
 8001ce2:	21ff      	movs	r1, #255	; 0xff
 8001ce4:	2004      	movs	r0, #4
 8001ce6:	f7ff fe9d 	bl	8001a24 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001cea:	7bbb      	ldrb	r3, [r7, #14]
 8001cec:	4619      	mov	r1, r3
 8001cee:	2005      	movs	r0, #5
 8001cf0:	f7ff fe2c 	bl	800194c <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001cf4:	7b7b      	ldrb	r3, [r7, #13]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2006      	movs	r0, #6
 8001cfa:	f7ff fe27 	bl	800194c <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001cfe:	7b3b      	ldrb	r3, [r7, #12]
 8001d00:	4619      	mov	r1, r3
 8001d02:	2007      	movs	r0, #7
 8001d04:	f7ff fe22 	bl	800194c <max7219_num>
			max7219_send_symbol(symbol);
 8001d08:	482a      	ldr	r0, [pc, #168]	; (8001db4 <max7219_Send_float+0x2dc>)
 8001d0a:	f7ff fddf 	bl	80018cc <max7219_send_symbol>
}
 8001d0e:	e14a      	b.n	8001fa6 <max7219_Send_float+0x4ce>
		} else if (lenght < 1000) {
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d16:	da2f      	bge.n	8001d78 <max7219_Send_float+0x2a0>
			max7219_num(0, 255);
 8001d18:	21ff      	movs	r1, #255	; 0xff
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff fe16 	bl	800194c <max7219_num>
			max7219_num(1, 255);
 8001d20:	21ff      	movs	r1, #255	; 0xff
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff fe12 	bl	800194c <max7219_num>
			max7219_num(2, 255);
 8001d28:	21ff      	movs	r1, #255	; 0xff
 8001d2a:	2002      	movs	r0, #2
 8001d2c:	f7ff fe0e 	bl	800194c <max7219_num>
			if (positive_value == true) {
 8001d30:	7efb      	ldrb	r3, [r7, #27]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <max7219_Send_float+0x268>
				max7219_num(3, 255);
 8001d36:	21ff      	movs	r1, #255	; 0xff
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f7ff fe07 	bl	800194c <max7219_num>
 8001d3e:	e003      	b.n	8001d48 <max7219_Send_float+0x270>
				max7219_num(3, 254);
 8001d40:	21fe      	movs	r1, #254	; 0xfe
 8001d42:	2003      	movs	r0, #3
 8001d44:	f7ff fe02 	bl	800194c <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	2004      	movs	r0, #4
 8001d4e:	f7ff fe69 	bl	8001a24 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	4619      	mov	r1, r3
 8001d56:	2005      	movs	r0, #5
 8001d58:	f7ff fdf8 	bl	800194c <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001d5c:	7b7b      	ldrb	r3, [r7, #13]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2006      	movs	r0, #6
 8001d62:	f7ff fdf3 	bl	800194c <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2007      	movs	r0, #7
 8001d6c:	f7ff fdee 	bl	800194c <max7219_num>
			max7219_send_symbol(symbol);
 8001d70:	4810      	ldr	r0, [pc, #64]	; (8001db4 <max7219_Send_float+0x2dc>)
 8001d72:	f7ff fdab 	bl	80018cc <max7219_send_symbol>
}
 8001d76:	e116      	b.n	8001fa6 <max7219_Send_float+0x4ce>
		} else if (lenght < 10000) {
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	dc40      	bgt.n	8001e04 <max7219_Send_float+0x32c>
			max7219_num(0, 255);
 8001d82:	21ff      	movs	r1, #255	; 0xff
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fde1 	bl	800194c <max7219_num>
			max7219_num(1, 255);
 8001d8a:	21ff      	movs	r1, #255	; 0xff
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f7ff fddd 	bl	800194c <max7219_num>
			max7219_num(2, 255);
 8001d92:	21ff      	movs	r1, #255	; 0xff
 8001d94:	2002      	movs	r0, #2
 8001d96:	f7ff fdd9 	bl	800194c <max7219_num>
			if (positive_value == true) {
 8001d9a:	7efb      	ldrb	r3, [r7, #27]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d015      	beq.n	8001dcc <max7219_Send_float+0x2f4>
				max7219_num(3, 255);
 8001da0:	21ff      	movs	r1, #255	; 0xff
 8001da2:	2003      	movs	r0, #3
 8001da4:	f7ff fdd2 	bl	800194c <max7219_num>
 8001da8:	e014      	b.n	8001dd4 <max7219_Send_float+0x2fc>
 8001daa:	bf00      	nop
 8001dac:	47c35000 	.word	0x47c35000
 8001db0:	c61c3fff 	.word	0xc61c3fff
 8001db4:	200003e8 	.word	0x200003e8
 8001db8:	447a0000 	.word	0x447a0000
 8001dbc:	ff676980 	.word	0xff676980
 8001dc0:	0098967f 	.word	0x0098967f
 8001dc4:	000f423f 	.word	0x000f423f
 8001dc8:	0001869f 	.word	0x0001869f
				max7219_num(3, 254);
 8001dcc:	21fe      	movs	r1, #254	; 0xfe
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f7ff fdbc 	bl	800194c <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	2004      	movs	r0, #4
 8001dda:	f7ff fe23 	bl	8001a24 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	4619      	mov	r1, r3
 8001de2:	2005      	movs	r0, #5
 8001de4:	f7ff fdb2 	bl	800194c <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001de8:	7b7b      	ldrb	r3, [r7, #13]
 8001dea:	4619      	mov	r1, r3
 8001dec:	2006      	movs	r0, #6
 8001dee:	f7ff fdad 	bl	800194c <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001df2:	7b3b      	ldrb	r3, [r7, #12]
 8001df4:	4619      	mov	r1, r3
 8001df6:	2007      	movs	r0, #7
 8001df8:	f7ff fda8 	bl	800194c <max7219_num>
			max7219_send_symbol(symbol);
 8001dfc:	486c      	ldr	r0, [pc, #432]	; (8001fb0 <max7219_Send_float+0x4d8>)
 8001dfe:	f7ff fd65 	bl	80018cc <max7219_send_symbol>
}
 8001e02:	e0d0      	b.n	8001fa6 <max7219_Send_float+0x4ce>
		} else if (lenght < 100000) {
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4a6b      	ldr	r2, [pc, #428]	; (8001fb4 <max7219_Send_float+0x4dc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	dc30      	bgt.n	8001e6e <max7219_Send_float+0x396>
			max7219_num(0, 255);
 8001e0c:	21ff      	movs	r1, #255	; 0xff
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff fd9c 	bl	800194c <max7219_num>
			max7219_num(1, 255);
 8001e14:	21ff      	movs	r1, #255	; 0xff
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff fd98 	bl	800194c <max7219_num>
			if (positive_value == true) {
 8001e1c:	7efb      	ldrb	r3, [r7, #27]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d004      	beq.n	8001e2c <max7219_Send_float+0x354>
				max7219_num(2, 255);
 8001e22:	21ff      	movs	r1, #255	; 0xff
 8001e24:	2002      	movs	r0, #2
 8001e26:	f7ff fd91 	bl	800194c <max7219_num>
 8001e2a:	e003      	b.n	8001e34 <max7219_Send_float+0x35c>
				max7219_num(2, 254);
 8001e2c:	21fe      	movs	r1, #254	; 0xfe
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f7ff fd8c 	bl	800194c <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8001e34:	7c3b      	ldrb	r3, [r7, #16]
 8001e36:	4619      	mov	r1, r3
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f7ff fd87 	bl	800194c <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	4619      	mov	r1, r3
 8001e42:	2004      	movs	r0, #4
 8001e44:	f7ff fdee 	bl	8001a24 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	2005      	movs	r0, #5
 8001e4e:	f7ff fd7d 	bl	800194c <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001e52:	7b7b      	ldrb	r3, [r7, #13]
 8001e54:	4619      	mov	r1, r3
 8001e56:	2006      	movs	r0, #6
 8001e58:	f7ff fd78 	bl	800194c <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001e5c:	7b3b      	ldrb	r3, [r7, #12]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2007      	movs	r0, #7
 8001e62:	f7ff fd73 	bl	800194c <max7219_num>
			max7219_send_symbol(symbol);
 8001e66:	4852      	ldr	r0, [pc, #328]	; (8001fb0 <max7219_Send_float+0x4d8>)
 8001e68:	f7ff fd30 	bl	80018cc <max7219_send_symbol>
}
 8001e6c:	e09b      	b.n	8001fa6 <max7219_Send_float+0x4ce>
		} else if (lenght < 1000000) {
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	4a51      	ldr	r2, [pc, #324]	; (8001fb8 <max7219_Send_float+0x4e0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	dc31      	bgt.n	8001eda <max7219_Send_float+0x402>
			max7219_num(0, 255);
 8001e76:	21ff      	movs	r1, #255	; 0xff
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fd67 	bl	800194c <max7219_num>
			if (positive_value == true) {
 8001e7e:	7efb      	ldrb	r3, [r7, #27]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <max7219_Send_float+0x3b6>
				max7219_num(1, 255);
 8001e84:	21ff      	movs	r1, #255	; 0xff
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff fd60 	bl	800194c <max7219_num>
 8001e8c:	e003      	b.n	8001e96 <max7219_Send_float+0x3be>
				max7219_num(1, 254);
 8001e8e:	21fe      	movs	r1, #254	; 0xfe
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7ff fd5b 	bl	800194c <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8001e96:	7c7b      	ldrb	r3, [r7, #17]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f7ff fd56 	bl	800194c <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8001ea0:	7c3b      	ldrb	r3, [r7, #16]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f7ff fd51 	bl	800194c <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	4619      	mov	r1, r3
 8001eae:	2004      	movs	r0, #4
 8001eb0:	f7ff fdb8 	bl	8001a24 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2005      	movs	r0, #5
 8001eba:	f7ff fd47 	bl	800194c <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001ebe:	7b7b      	ldrb	r3, [r7, #13]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2006      	movs	r0, #6
 8001ec4:	f7ff fd42 	bl	800194c <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001ec8:	7b3b      	ldrb	r3, [r7, #12]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	2007      	movs	r0, #7
 8001ece:	f7ff fd3d 	bl	800194c <max7219_num>
			max7219_send_symbol(symbol);
 8001ed2:	4837      	ldr	r0, [pc, #220]	; (8001fb0 <max7219_Send_float+0x4d8>)
 8001ed4:	f7ff fcfa 	bl	80018cc <max7219_send_symbol>
}
 8001ed8:	e065      	b.n	8001fa6 <max7219_Send_float+0x4ce>
		} else if (lenght < 10000000) {
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	4a37      	ldr	r2, [pc, #220]	; (8001fbc <max7219_Send_float+0x4e4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	dc32      	bgt.n	8001f48 <max7219_Send_float+0x470>
			if (positive_value == true) {
 8001ee2:	7efb      	ldrb	r3, [r7, #27]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <max7219_Send_float+0x41a>
				max7219_num(0, 255);
 8001ee8:	21ff      	movs	r1, #255	; 0xff
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fd2e 	bl	800194c <max7219_num>
 8001ef0:	e003      	b.n	8001efa <max7219_Send_float+0x422>
				max7219_num(0, 254);
 8001ef2:	21fe      	movs	r1, #254	; 0xfe
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fd29 	bl	800194c <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 8001efa:	7cbb      	ldrb	r3, [r7, #18]
 8001efc:	4619      	mov	r1, r3
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff fd24 	bl	800194c <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8001f04:	7c7b      	ldrb	r3, [r7, #17]
 8001f06:	4619      	mov	r1, r3
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f7ff fd1f 	bl	800194c <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8001f0e:	7c3b      	ldrb	r3, [r7, #16]
 8001f10:	4619      	mov	r1, r3
 8001f12:	2003      	movs	r0, #3
 8001f14:	f7ff fd1a 	bl	800194c <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	2004      	movs	r0, #4
 8001f1e:	f7ff fd81 	bl	8001a24 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	4619      	mov	r1, r3
 8001f26:	2005      	movs	r0, #5
 8001f28:	f7ff fd10 	bl	800194c <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001f2c:	7b7b      	ldrb	r3, [r7, #13]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	2006      	movs	r0, #6
 8001f32:	f7ff fd0b 	bl	800194c <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001f36:	7b3b      	ldrb	r3, [r7, #12]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	2007      	movs	r0, #7
 8001f3c:	f7ff fd06 	bl	800194c <max7219_num>
			max7219_send_symbol(symbol);
 8001f40:	481b      	ldr	r0, [pc, #108]	; (8001fb0 <max7219_Send_float+0x4d8>)
 8001f42:	f7ff fcc3 	bl	80018cc <max7219_send_symbol>
}
 8001f46:	e02e      	b.n	8001fa6 <max7219_Send_float+0x4ce>
		} else if (lenght < 100000000) {
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <max7219_Send_float+0x4e8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	dc2a      	bgt.n	8001fa6 <max7219_Send_float+0x4ce>
			max7219_num(0, BCD_Arr[7]);
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	4619      	mov	r1, r3
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff fcf9 	bl	800194c <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 8001f5a:	7cbb      	ldrb	r3, [r7, #18]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7ff fcf4 	bl	800194c <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8001f64:	7c7b      	ldrb	r3, [r7, #17]
 8001f66:	4619      	mov	r1, r3
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f7ff fcef 	bl	800194c <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8001f6e:	7c3b      	ldrb	r3, [r7, #16]
 8001f70:	4619      	mov	r1, r3
 8001f72:	2003      	movs	r0, #3
 8001f74:	f7ff fcea 	bl	800194c <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	2004      	movs	r0, #4
 8001f7e:	f7ff fd51 	bl	8001a24 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001f82:	7bbb      	ldrb	r3, [r7, #14]
 8001f84:	4619      	mov	r1, r3
 8001f86:	2005      	movs	r0, #5
 8001f88:	f7ff fce0 	bl	800194c <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001f8c:	7b7b      	ldrb	r3, [r7, #13]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	2006      	movs	r0, #6
 8001f92:	f7ff fcdb 	bl	800194c <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001f96:	7b3b      	ldrb	r3, [r7, #12]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	2007      	movs	r0, #7
 8001f9c:	f7ff fcd6 	bl	800194c <max7219_num>
			max7219_send_symbol(symbol);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <max7219_Send_float+0x4d8>)
 8001fa2:	f7ff fc93 	bl	80018cc <max7219_send_symbol>
}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200003e8 	.word	0x200003e8
 8001fb4:	0001869f 	.word	0x0001869f
 8001fb8:	000f423f 	.word	0x000f423f
 8001fbc:	0098967f 	.word	0x0098967f
 8001fc0:	05f5e0ff 	.word	0x05f5e0ff

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_MspInit+0x5c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_MspInit+0x5c>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_MspInit+0x5c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_MspInit+0x5c>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_MspInit+0x60>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_MspInit+0x60>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000

08002028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <HAL_ADC_MspInit+0x7c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d129      	bne.n	800209c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_ADC_MspInit+0x80>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_ADC_MspInit+0x80>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_ADC_MspInit+0x80>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_ADC_MspInit+0x80>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <HAL_ADC_MspInit+0x80>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_ADC_MspInit+0x80>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002078:	2301      	movs	r3, #1
 800207a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207c:	2303      	movs	r3, #3
 800207e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4619      	mov	r1, r3
 8002086:	4809      	ldr	r0, [pc, #36]	; (80020ac <HAL_ADC_MspInit+0x84>)
 8002088:	f001 f870 	bl	800316c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	2012      	movs	r0, #18
 8002092:	f000 ffbe 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002096:	2012      	movs	r0, #18
 8002098:	f000 ffd7 	bl	800304a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800209c:	bf00      	nop
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40012400 	.word	0x40012400
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010800 	.word	0x40010800

080020b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_SPI_MspInit+0x80>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d12b      	bne.n	8002128 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_SPI_MspInit+0x84>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_SPI_MspInit+0x84>)
 80020d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_SPI_MspInit+0x84>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_SPI_MspInit+0x84>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a11      	ldr	r2, [pc, #68]	; (8002134 <HAL_SPI_MspInit+0x84>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_SPI_MspInit+0x84>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002100:	23a0      	movs	r3, #160	; 0xa0
 8002102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4619      	mov	r1, r3
 8002112:	4809      	ldr	r0, [pc, #36]	; (8002138 <HAL_SPI_MspInit+0x88>)
 8002114:	f001 f82a 	bl	800316c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	2023      	movs	r0, #35	; 0x23
 800211e:	f000 ff78 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002122:	2023      	movs	r0, #35	; 0x23
 8002124:	f000 ff91 	bl	800304a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40013000 	.word	0x40013000
 8002134:	40021000 	.word	0x40021000
 8002138:	40010800 	.word	0x40010800

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <NMI_Handler+0x4>

08002142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <MemManage_Handler+0x4>

0800214e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <UsageFault_Handler+0x4>

0800215a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002182:	f000 f90d 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <ADC1_2_IRQHandler+0x10>)
 8002192:	f000 fa1b 	bl	80025cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000400 	.word	0x20000400

080021a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <SPI1_IRQHandler+0x10>)
 80021a6:	f001 ffdb 	bl	8004160 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000430 	.word	0x20000430

080021b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e00a      	b.n	80021dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021c6:	f3af 8000 	nop.w
 80021ca:	4601      	mov	r1, r0
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	b2ca      	uxtb	r2, r1
 80021d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dbf0      	blt.n	80021c6 <_read+0x12>
	}

return len;
 80021e4:	687b      	ldr	r3, [r7, #4]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002214:	605a      	str	r2, [r3, #4]
	return 0;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <_isatty>:

int _isatty(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
	return 1;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
	return 0;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
	...

08002250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002280:	f002 f9ca 	bl	8004618 <__errno>
 8002284:	4602      	mov	r2, r0
 8002286:	230c      	movs	r3, #12
 8002288:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20005000 	.word	0x20005000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	200003f0 	.word	0x200003f0
 80022b8:	20000490 	.word	0x20000490

080022bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022ca:	e003      	b.n	80022d4 <LoopCopyDataInit>

080022cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022d2:	3104      	adds	r1, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022d4:	480a      	ldr	r0, [pc, #40]	; (8002300 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022dc:	d3f6      	bcc.n	80022cc <CopyDataInit>
  ldr r2, =_sbss
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022e0:	e002      	b.n	80022e8 <LoopFillZerobss>

080022e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022e4:	f842 3b04 	str.w	r3, [r2], #4

080022e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022ec:	d3f9      	bcc.n	80022e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ee:	f7ff ffe5 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f2:	f002 f997 	bl	8004624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022f6:	f7fe ffff 	bl	80012f8 <main>
  bx lr
 80022fa:	4770      	bx	lr
  ldr r3, =_sidata
 80022fc:	08008dd0 	.word	0x08008dd0
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002304:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002308:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800230c:	20000490 	.word	0x20000490

08002310 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002310:	e7fe      	b.n	8002310 <CAN1_RX1_IRQHandler>
	...

08002314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x28>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x28>)
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 fe69 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fe48 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fe81 	bl	8003066 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 fe49 	bl	8003012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000000 	.word	0x20000000
 8002398:	20000008 	.word	0x20000008
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_IncTick+0x1c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_IncTick+0x20>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_IncTick+0x20>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000008 	.word	0x20000008
 80023c0:	20000488 	.word	0x20000488

080023c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <HAL_GetTick+0x10>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000488 	.word	0x20000488

080023d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_GetTick>
 80023e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d005      	beq.n	80023fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_Delay+0x40>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fe:	bf00      	nop
 8002400:	f7ff ffe0 	bl	80023c4 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d8f7      	bhi.n	8002400 <HAL_Delay+0x28>
  {
  }
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000008 	.word	0x20000008

0800241c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0be      	b.n	80025bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fde4 	bl	8002028 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f9db 	bl	800281c <ADC_ConversionStop_Disable>
 8002466:	4603      	mov	r3, r0
 8002468:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8099 	bne.w	80025aa <HAL_ADC_Init+0x18e>
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 8095 	bne.w	80025aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002488:	f023 0302 	bic.w	r3, r3, #2
 800248c:	f043 0202 	orr.w	r2, r3, #2
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800249c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7b1b      	ldrb	r3, [r3, #12]
 80024a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b4:	d003      	beq.n	80024be <HAL_ADC_Init+0xa2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d102      	bne.n	80024c4 <HAL_ADC_Init+0xa8>
 80024be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024c2:	e000      	b.n	80024c6 <HAL_ADC_Init+0xaa>
 80024c4:	2300      	movs	r3, #0
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7d1b      	ldrb	r3, [r3, #20]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d119      	bne.n	8002508 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7b1b      	ldrb	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	035a      	lsls	r2, r3, #13
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	e00b      	b.n	8002508 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	430a      	orrs	r2, r1
 800251a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_ADC_Init+0x1a8>)
 8002524:	4013      	ands	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	430b      	orrs	r3, r1
 800252e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002538:	d003      	beq.n	8002542 <HAL_ADC_Init+0x126>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d104      	bne.n	800254c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	3b01      	subs	r3, #1
 8002548:	051b      	lsls	r3, r3, #20
 800254a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	430a      	orrs	r2, r1
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_ADC_Init+0x1ac>)
 8002568:	4013      	ands	r3, r2
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d10b      	bne.n	8002588 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002586:	e018      	b.n	80025ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f023 0312 	bic.w	r3, r3, #18
 8002590:	f043 0210 	orr.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025a8:	e007      	b.n	80025ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	ffe1f7fd 	.word	0xffe1f7fd
 80025c8:	ff1f0efe 	.word	0xff1f0efe

080025cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d140      	bne.n	8002664 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d139      	bne.n	8002664 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002612:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002616:	d11d      	bne.n	8002654 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800261c:	2b00      	cmp	r3, #0
 800261e:	d119      	bne.n	8002654 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0220 	bic.w	r2, r2, #32
 800262e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f87c 	bl	8002752 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f06f 0212 	mvn.w	r2, #18
 8002662:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d14f      	bne.n	8002712 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d148      	bne.n	8002712 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80026a2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80026a6:	d012      	beq.n	80026ce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d125      	bne.n	8002702 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026c4:	d11d      	bne.n	8002702 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d119      	bne.n	8002702 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026dc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fd6c 	bl	80011e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 020c 	mvn.w	r2, #12
 8002710:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d114      	bne.n	800274a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10d      	bne.n	800274a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f812 	bl	8002764 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0201 	mvn.w	r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
	...

08002778 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d039      	beq.n	800280a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <ADC_Enable+0x9c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <ADC_Enable+0xa0>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	0c9b      	lsrs	r3, r3, #18
 80027b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027b4:	e002      	b.n	80027bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027c2:	f7ff fdff 	bl	80023c4 <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027c8:	e018      	b.n	80027fc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027ca:	f7ff fdfb 	bl	80023c4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d911      	bls.n	80027fc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e007      	b.n	800280c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d1df      	bne.n	80027ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000000 	.word	0x20000000
 8002818:	431bde83 	.word	0x431bde83

0800281c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d127      	bne.n	8002886 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002846:	f7ff fdbd 	bl	80023c4 <HAL_GetTick>
 800284a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800284c:	e014      	b.n	8002878 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800284e:	f7ff fdb9 	bl	80023c4 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d90d      	bls.n	8002878 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	f043 0210 	orr.w	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	d0e3      	beq.n	800284e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADCEx_Calibration_Start+0x1e>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e086      	b.n	80029bc <HAL_ADCEx_Calibration_Start+0x12c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffb0 	bl	800281c <ADC_ConversionStop_Disable>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d175      	bne.n	80029b2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ce:	f023 0302 	bic.w	r3, r3, #2
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_ADCEx_Calibration_Start+0x134>)
 80028dc:	681c      	ldr	r4, [r3, #0]
 80028de:	2002      	movs	r0, #2
 80028e0:	f001 fa74 	bl	8003dcc <HAL_RCCEx_GetPeriphCLKFreq>
 80028e4:	4603      	mov	r3, r0
 80028e6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80028ea:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80028ec:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80028ee:	e002      	b.n	80028f6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f9      	bne.n	80028f0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff3b 	bl	8002778 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0208 	orr.w	r2, r2, #8
 8002910:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002912:	f7ff fd57 	bl	80023c4 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002918:	e014      	b.n	8002944 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800291a:	f7ff fd53 	bl	80023c4 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b0a      	cmp	r3, #10
 8002926:	d90d      	bls.n	8002944 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f023 0312 	bic.w	r3, r3, #18
 8002930:	f043 0210 	orr.w	r2, r3, #16
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e03b      	b.n	80029bc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e3      	bne.n	800291a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0204 	orr.w	r2, r2, #4
 8002960:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002962:	f7ff fd2f 	bl	80023c4 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002968:	e014      	b.n	8002994 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800296a:	f7ff fd2b 	bl	80023c4 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b0a      	cmp	r3, #10
 8002976:	d90d      	bls.n	8002994 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f023 0312 	bic.w	r3, r3, #18
 8002980:	f043 0210 	orr.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e013      	b.n	80029bc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e3      	bne.n	800296a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_ADCEx_InjectedStart_IT+0x1a>
 80029de:	2302      	movs	r3, #2
 80029e0:	e078      	b.n	8002ad4 <HAL_ADCEx_InjectedStart_IT+0x10c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fec4 	bl	8002778 <ADC_Enable>
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d167      	bne.n	8002aca <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a32      	ldr	r2, [pc, #200]	; (8002adc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d105      	bne.n	8002a24 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8002a18:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a30:	e005      	b.n	8002a3e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0204 	mvn.w	r2, #4
 8002a60:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a70:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d128      	bne.n	8002ad2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002a8a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002a8e:	d113      	bne.n	8002ab8 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002a94:	4a11      	ldr	r2, [pc, #68]	; (8002adc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d105      	bne.n	8002aa6 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d108      	bne.n	8002ab8 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	e00c      	b.n	8002ad2 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	e003      	b.n	8002ad2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40012800 	.word	0x40012800
 8002ae0:	40012400 	.word	0x40012400

08002ae4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d009      	beq.n	8002b0c <HAL_ADCEx_InjectedGetValue+0x28>
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d002      	beq.n	8002b02 <HAL_ADCEx_InjectedGetValue+0x1e>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d00a      	beq.n	8002b16 <HAL_ADCEx_InjectedGetValue+0x32>
 8002b00:	e00e      	b.n	8002b20 <HAL_ADCEx_InjectedGetValue+0x3c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b08:	60fb      	str	r3, [r7, #12]
      break;
 8002b0a:	e00e      	b.n	8002b2a <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	60fb      	str	r3, [r7, #12]
      break;
 8002b14:	e009      	b.n	8002b2a <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	60fb      	str	r3, [r7, #12]
      break;
 8002b1e:	e004      	b.n	8002b2a <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	60fb      	str	r3, [r7, #12]
      break;
 8002b28:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002b38:	b490      	push	{r4, r7}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e17a      	b.n	8002e4e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d119      	bne.n	8002b9c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10c      	bne.n	8002b8a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b76:	0d9b      	lsrs	r3, r3, #22
 8002b78:	059b      	lsls	r3, r3, #22
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	03d1      	lsls	r1, r2, #15
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6393      	str	r3, [r2, #56]	; 0x38
 8002b88:	e04f      	b.n	8002c2a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e046      	b.n	8002c2a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d82a      	bhi.n	8002bfe <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	330f      	adds	r3, #15
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4019      	ands	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	0518      	lsls	r0, r3, #20
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681c      	ldr	r4, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	1ad2      	subs	r2, r2, r3
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	330f      	adds	r3, #15
 8002bec:	fa04 f303 	lsl.w	r3, r4, r3
 8002bf0:	ea40 0203 	orr.w	r2, r0, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8002bfc:	e015      	b.n	8002c2a <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	1ad2      	subs	r2, r2, r3
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	330f      	adds	r3, #15
 8002c16:	221f      	movs	r2, #31
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002c20:	43da      	mvns	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	400a      	ands	r2, r1
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d00c      	beq.n	8002c52 <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6991      	ldr	r1, [r2, #24]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	7d5b      	ldrb	r3, [r3, #21]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d115      	bne.n	8002c86 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002c62:	d108      	bne.n	8002c76 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	e007      	b.n	8002c86 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	7d1b      	ldrb	r3, [r3, #20]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d114      	bne.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	7d5b      	ldrb	r3, [r3, #21]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d108      	bne.n	8002ca8 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	e007      	b.n	8002cb8 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d91c      	bls.n	8002cfa <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68d9      	ldr	r1, [r3, #12]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b1e      	subs	r3, #30
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	4019      	ands	r1, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6898      	ldr	r0, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b1e      	subs	r3, #30
 8002cec:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	e019      	b.n	8002d2e <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6919      	ldr	r1, [r3, #16]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4019      	ands	r1, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6898      	ldr	r0, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	fa00 f203 	lsl.w	r2, r0, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d003      	beq.n	8002d3e <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d3a:	2b11      	cmp	r3, #17
 8002d3c:	d107      	bne.n	8002d4e <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d4c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d011      	beq.n	8002d7a <HAL_ADCEx_InjectedConfigChannel+0x242>
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d01d      	beq.n	8002d96 <HAL_ADCEx_InjectedConfigChannel+0x25e>
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d129      	bne.n	8002db2 <HAL_ADCEx_InjectedConfigChannel+0x27a>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d68:	f023 030f 	bic.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	68d1      	ldr	r1, [r2, #12]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8002d78:	e029      	b.n	8002dce <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d84:	f023 030f 	bic.w	r3, r3, #15
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	68d1      	ldr	r1, [r2, #12]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8002d94:	e01b      	b.n	8002dce <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002da0:	f023 030f 	bic.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	68d1      	ldr	r1, [r2, #12]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8002db0:	e00d      	b.n	8002dce <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002dbc:	f023 030f 	bic.w	r3, r3, #15
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	68d1      	ldr	r1, [r2, #12]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8002dcc:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d003      	beq.n	8002dde <HAL_ADCEx_InjectedConfigChannel+0x2a6>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dda:	2b11      	cmp	r3, #17
 8002ddc:	d132      	bne.n	8002e44 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d125      	bne.n	8002e34 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d126      	bne.n	8002e44 <HAL_ADCEx_InjectedConfigChannel+0x30c>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e04:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d11a      	bne.n	8002e44 <HAL_ADCEx_InjectedConfigChannel+0x30c>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0e:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	0c9a      	lsrs	r2, r3, #18
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e24:	e002      	b.n	8002e2c <HAL_ADCEx_InjectedConfigChannel+0x2f4>
          {
            wait_loop_index--;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f9      	bne.n	8002e26 <HAL_ADCEx_InjectedConfigChannel+0x2ee>
 8002e32:	e007      	b.n	8002e44 <HAL_ADCEx_InjectedConfigChannel+0x30c>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc90      	pop	{r4, r7}
 8002e56:	4770      	bx	lr
 8002e58:	40012400 	.word	0x40012400
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	431bde83 	.word	0x431bde83

08002e64 <__NVIC_SetPriorityGrouping>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4906      	ldr	r1, [pc, #24]	; (8002efc <__NVIC_EnableIRQ+0x34>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db0a      	blt.n	8002f2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	490c      	ldr	r1, [pc, #48]	; (8002f4c <__NVIC_SetPriority+0x4c>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	440b      	add	r3, r1
 8002f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f28:	e00a      	b.n	8002f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4908      	ldr	r1, [pc, #32]	; (8002f50 <__NVIC_SetPriority+0x50>)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3b04      	subs	r3, #4
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <NVIC_EncodePriority>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	bf28      	it	cs
 8002f72:	2304      	movcs	r3, #4
 8002f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d902      	bls.n	8002f84 <NVIC_EncodePriority+0x30>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3b03      	subs	r3, #3
 8002f82:	e000      	b.n	8002f86 <NVIC_EncodePriority+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	4313      	orrs	r3, r2
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	; 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <SysTick_Config>:
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc8:	d301      	bcc.n	8002fce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <SysTick_Config+0x40>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f7ff ff90 	bl	8002f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <SysTick_Config+0x40>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <SysTick_Config+0x40>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff2d 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003024:	f7ff ff42 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8003028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f7ff ff90 	bl	8002f54 <NVIC_EncodePriority>
 8003034:	4602      	mov	r2, r0
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff5f 	bl	8002f00 <__NVIC_SetPriority>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff35 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ffa2 	bl	8002fb8 <SysTick_Config>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003092:	2b02      	cmp	r3, #2
 8003094:	d005      	beq.n	80030a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e051      	b.n	8003146 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 020e 	bic.w	r2, r2, #14
 80030b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a22      	ldr	r2, [pc, #136]	; (8003150 <HAL_DMA_Abort_IT+0xd0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d029      	beq.n	8003120 <HAL_DMA_Abort_IT+0xa0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_DMA_Abort_IT+0xd4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d022      	beq.n	800311c <HAL_DMA_Abort_IT+0x9c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <HAL_DMA_Abort_IT+0xd8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d01a      	beq.n	8003116 <HAL_DMA_Abort_IT+0x96>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_DMA_Abort_IT+0xdc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d012      	beq.n	8003110 <HAL_DMA_Abort_IT+0x90>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <HAL_DMA_Abort_IT+0xe0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00a      	beq.n	800310a <HAL_DMA_Abort_IT+0x8a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_DMA_Abort_IT+0xe4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d102      	bne.n	8003104 <HAL_DMA_Abort_IT+0x84>
 80030fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003102:	e00e      	b.n	8003122 <HAL_DMA_Abort_IT+0xa2>
 8003104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003108:	e00b      	b.n	8003122 <HAL_DMA_Abort_IT+0xa2>
 800310a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800310e:	e008      	b.n	8003122 <HAL_DMA_Abort_IT+0xa2>
 8003110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003114:	e005      	b.n	8003122 <HAL_DMA_Abort_IT+0xa2>
 8003116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311a:	e002      	b.n	8003122 <HAL_DMA_Abort_IT+0xa2>
 800311c:	2310      	movs	r3, #16
 800311e:	e000      	b.n	8003122 <HAL_DMA_Abort_IT+0xa2>
 8003120:	2301      	movs	r3, #1
 8003122:	4a11      	ldr	r2, [pc, #68]	; (8003168 <HAL_DMA_Abort_IT+0xe8>)
 8003124:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
    } 
  }
  return status;
 8003146:	7bfb      	ldrb	r3, [r7, #15]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40020008 	.word	0x40020008
 8003154:	4002001c 	.word	0x4002001c
 8003158:	40020030 	.word	0x40020030
 800315c:	40020044 	.word	0x40020044
 8003160:	40020058 	.word	0x40020058
 8003164:	4002006c 	.word	0x4002006c
 8003168:	40020000 	.word	0x40020000

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b480      	push	{r7}
 800316e:	b08b      	sub	sp, #44	; 0x2c
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317e:	e127      	b.n	80033d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003180:	2201      	movs	r2, #1
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	429a      	cmp	r2, r3
 800319a:	f040 8116 	bne.w	80033ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b12      	cmp	r3, #18
 80031a4:	d034      	beq.n	8003210 <HAL_GPIO_Init+0xa4>
 80031a6:	2b12      	cmp	r3, #18
 80031a8:	d80d      	bhi.n	80031c6 <HAL_GPIO_Init+0x5a>
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d02b      	beq.n	8003206 <HAL_GPIO_Init+0x9a>
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d804      	bhi.n	80031bc <HAL_GPIO_Init+0x50>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d031      	beq.n	800321a <HAL_GPIO_Init+0xae>
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d01c      	beq.n	80031f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ba:	e048      	b.n	800324e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d043      	beq.n	8003248 <HAL_GPIO_Init+0xdc>
 80031c0:	2b11      	cmp	r3, #17
 80031c2:	d01b      	beq.n	80031fc <HAL_GPIO_Init+0x90>
          break;
 80031c4:	e043      	b.n	800324e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031c6:	4a89      	ldr	r2, [pc, #548]	; (80033ec <HAL_GPIO_Init+0x280>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d026      	beq.n	800321a <HAL_GPIO_Init+0xae>
 80031cc:	4a87      	ldr	r2, [pc, #540]	; (80033ec <HAL_GPIO_Init+0x280>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d806      	bhi.n	80031e0 <HAL_GPIO_Init+0x74>
 80031d2:	4a87      	ldr	r2, [pc, #540]	; (80033f0 <HAL_GPIO_Init+0x284>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d020      	beq.n	800321a <HAL_GPIO_Init+0xae>
 80031d8:	4a86      	ldr	r2, [pc, #536]	; (80033f4 <HAL_GPIO_Init+0x288>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_GPIO_Init+0xae>
          break;
 80031de:	e036      	b.n	800324e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031e0:	4a85      	ldr	r2, [pc, #532]	; (80033f8 <HAL_GPIO_Init+0x28c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d019      	beq.n	800321a <HAL_GPIO_Init+0xae>
 80031e6:	4a85      	ldr	r2, [pc, #532]	; (80033fc <HAL_GPIO_Init+0x290>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d016      	beq.n	800321a <HAL_GPIO_Init+0xae>
 80031ec:	4a84      	ldr	r2, [pc, #528]	; (8003400 <HAL_GPIO_Init+0x294>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0xae>
          break;
 80031f2:	e02c      	b.n	800324e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	623b      	str	r3, [r7, #32]
          break;
 80031fa:	e028      	b.n	800324e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	3304      	adds	r3, #4
 8003202:	623b      	str	r3, [r7, #32]
          break;
 8003204:	e023      	b.n	800324e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	3308      	adds	r3, #8
 800320c:	623b      	str	r3, [r7, #32]
          break;
 800320e:	e01e      	b.n	800324e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	330c      	adds	r3, #12
 8003216:	623b      	str	r3, [r7, #32]
          break;
 8003218:	e019      	b.n	800324e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003222:	2304      	movs	r3, #4
 8003224:	623b      	str	r3, [r7, #32]
          break;
 8003226:	e012      	b.n	800324e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003230:	2308      	movs	r3, #8
 8003232:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	611a      	str	r2, [r3, #16]
          break;
 800323a:	e008      	b.n	800324e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800323c:	2308      	movs	r3, #8
 800323e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	615a      	str	r2, [r3, #20]
          break;
 8003246:	e002      	b.n	800324e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003248:	2300      	movs	r3, #0
 800324a:	623b      	str	r3, [r7, #32]
          break;
 800324c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2bff      	cmp	r3, #255	; 0xff
 8003252:	d801      	bhi.n	8003258 <HAL_GPIO_Init+0xec>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	e001      	b.n	800325c <HAL_GPIO_Init+0xf0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2bff      	cmp	r3, #255	; 0xff
 8003262:	d802      	bhi.n	800326a <HAL_GPIO_Init+0xfe>
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	e002      	b.n	8003270 <HAL_GPIO_Init+0x104>
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	3b08      	subs	r3, #8
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	210f      	movs	r1, #15
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	401a      	ands	r2, r3
 8003282:	6a39      	ldr	r1, [r7, #32]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	431a      	orrs	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8096 	beq.w	80033ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800329e:	4b59      	ldr	r3, [pc, #356]	; (8003404 <HAL_GPIO_Init+0x298>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	4a58      	ldr	r2, [pc, #352]	; (8003404 <HAL_GPIO_Init+0x298>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6193      	str	r3, [r2, #24]
 80032aa:	4b56      	ldr	r3, [pc, #344]	; (8003404 <HAL_GPIO_Init+0x298>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032b6:	4a54      	ldr	r2, [pc, #336]	; (8003408 <HAL_GPIO_Init+0x29c>)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	3302      	adds	r3, #2
 80032be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	220f      	movs	r2, #15
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4b      	ldr	r2, [pc, #300]	; (800340c <HAL_GPIO_Init+0x2a0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x19e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4a      	ldr	r2, [pc, #296]	; (8003410 <HAL_GPIO_Init+0x2a4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x19a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a49      	ldr	r2, [pc, #292]	; (8003414 <HAL_GPIO_Init+0x2a8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x196>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a48      	ldr	r2, [pc, #288]	; (8003418 <HAL_GPIO_Init+0x2ac>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x192>
 80032fa:	2303      	movs	r3, #3
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x1a0>
 80032fe:	2304      	movs	r3, #4
 8003300:	e004      	b.n	800330c <HAL_GPIO_Init+0x1a0>
 8003302:	2302      	movs	r3, #2
 8003304:	e002      	b.n	800330c <HAL_GPIO_Init+0x1a0>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_GPIO_Init+0x1a0>
 800330a:	2300      	movs	r3, #0
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	f002 0203 	and.w	r2, r2, #3
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	4093      	lsls	r3, r2
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800331c:	493a      	ldr	r1, [pc, #232]	; (8003408 <HAL_GPIO_Init+0x29c>)
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003336:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_GPIO_Init+0x2b0>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4938      	ldr	r1, [pc, #224]	; (800341c <HAL_GPIO_Init+0x2b0>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
 8003342:	e006      	b.n	8003352 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <HAL_GPIO_Init+0x2b0>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	43db      	mvns	r3, r3
 800334c:	4933      	ldr	r1, [pc, #204]	; (800341c <HAL_GPIO_Init+0x2b0>)
 800334e:	4013      	ands	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800335e:	4b2f      	ldr	r3, [pc, #188]	; (800341c <HAL_GPIO_Init+0x2b0>)
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	492e      	ldr	r1, [pc, #184]	; (800341c <HAL_GPIO_Init+0x2b0>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
 800336a:	e006      	b.n	800337a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800336c:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_GPIO_Init+0x2b0>)
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	43db      	mvns	r3, r3
 8003374:	4929      	ldr	r1, [pc, #164]	; (800341c <HAL_GPIO_Init+0x2b0>)
 8003376:	4013      	ands	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_GPIO_Init+0x2b0>)
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4924      	ldr	r1, [pc, #144]	; (800341c <HAL_GPIO_Init+0x2b0>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
 8003392:	e006      	b.n	80033a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_GPIO_Init+0x2b0>)
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	43db      	mvns	r3, r3
 800339c:	491f      	ldr	r1, [pc, #124]	; (800341c <HAL_GPIO_Init+0x2b0>)
 800339e:	4013      	ands	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_GPIO_Init+0x2b0>)
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	491a      	ldr	r1, [pc, #104]	; (800341c <HAL_GPIO_Init+0x2b0>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60cb      	str	r3, [r1, #12]
 80033ba:	e006      	b.n	80033ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_GPIO_Init+0x2b0>)
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	4915      	ldr	r1, [pc, #84]	; (800341c <HAL_GPIO_Init+0x2b0>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	3301      	adds	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f47f aed0 	bne.w	8003180 <HAL_GPIO_Init+0x14>
  }
}
 80033e0:	bf00      	nop
 80033e2:	372c      	adds	r7, #44	; 0x2c
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	10210000 	.word	0x10210000
 80033f0:	10110000 	.word	0x10110000
 80033f4:	10120000 	.word	0x10120000
 80033f8:	10310000 	.word	0x10310000
 80033fc:	10320000 	.word	0x10320000
 8003400:	10220000 	.word	0x10220000
 8003404:	40021000 	.word	0x40021000
 8003408:	40010000 	.word	0x40010000
 800340c:	40010800 	.word	0x40010800
 8003410:	40010c00 	.word	0x40010c00
 8003414:	40011000 	.word	0x40011000
 8003418:	40011400 	.word	0x40011400
 800341c:	40010400 	.word	0x40010400

08003420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
 800342c:	4613      	mov	r3, r2
 800342e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003430:	787b      	ldrb	r3, [r7, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800343c:	e003      	b.n	8003446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	041a      	lsls	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	611a      	str	r2, [r3, #16]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e26c      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8087 	beq.w	800357e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	4b92      	ldr	r3, [pc, #584]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b04      	cmp	r3, #4
 800347a:	d00c      	beq.n	8003496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800347c:	4b8f      	ldr	r3, [pc, #572]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d112      	bne.n	80034ae <HAL_RCC_OscConfig+0x5e>
 8003488:	4b8c      	ldr	r3, [pc, #560]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d10b      	bne.n	80034ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003496:	4b89      	ldr	r3, [pc, #548]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d06c      	beq.n	800357c <HAL_RCC_OscConfig+0x12c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d168      	bne.n	800357c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e246      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x76>
 80034b8:	4b80      	ldr	r3, [pc, #512]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a7f      	ldr	r2, [pc, #508]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e02e      	b.n	8003524 <HAL_RCC_OscConfig+0xd4>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x98>
 80034ce:	4b7b      	ldr	r3, [pc, #492]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7a      	ldr	r2, [pc, #488]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b78      	ldr	r3, [pc, #480]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a77      	ldr	r2, [pc, #476]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e01d      	b.n	8003524 <HAL_RCC_OscConfig+0xd4>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0xbc>
 80034f2:	4b72      	ldr	r3, [pc, #456]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a71      	ldr	r2, [pc, #452]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b6f      	ldr	r3, [pc, #444]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6e      	ldr	r2, [pc, #440]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xd4>
 800350c:	4b6b      	ldr	r3, [pc, #428]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6a      	ldr	r2, [pc, #424]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b68      	ldr	r3, [pc, #416]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a67      	ldr	r2, [pc, #412]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe ff4a 	bl	80023c4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe ff46 	bl	80023c4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1fa      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b5d      	ldr	r3, [pc, #372]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xe4>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe ff36 	bl	80023c4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe ff32 	bl	80023c4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1e6      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b53      	ldr	r3, [pc, #332]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x10c>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d063      	beq.n	8003652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800358a:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003596:	4b49      	ldr	r3, [pc, #292]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x18c>
 80035a2:	4b46      	ldr	r3, [pc, #280]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x176>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1ba      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4939      	ldr	r1, [pc, #228]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e03a      	b.n	8003652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <HAL_RCC_OscConfig+0x270>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fe feeb 	bl	80023c4 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fe fee7 	bl	80023c4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e19b      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4927      	ldr	r1, [pc, #156]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
 8003624:	e015      	b.n	8003652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <HAL_RCC_OscConfig+0x270>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe feca 	bl	80023c4 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003634:	f7fe fec6 	bl	80023c4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e17a      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d03a      	beq.n	80036d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d019      	beq.n	800369a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003666:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <HAL_RCC_OscConfig+0x274>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366c:	f7fe feaa 	bl	80023c4 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003674:	f7fe fea6 	bl	80023c4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e15a      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <HAL_RCC_OscConfig+0x26c>)
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003692:	2001      	movs	r0, #1
 8003694:	f000 fac6 	bl	8003c24 <RCC_Delay>
 8003698:	e01c      	b.n	80036d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_OscConfig+0x274>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe fe90 	bl	80023c4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a6:	e00f      	b.n	80036c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a8:	f7fe fe8c 	bl	80023c4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d908      	bls.n	80036c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e140      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	42420000 	.word	0x42420000
 80036c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	4b9e      	ldr	r3, [pc, #632]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e9      	bne.n	80036a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a6 	beq.w	800382e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e6:	4b97      	ldr	r3, [pc, #604]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	4b94      	ldr	r3, [pc, #592]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4a93      	ldr	r2, [pc, #588]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fc:	61d3      	str	r3, [r2, #28]
 80036fe:	4b91      	ldr	r3, [pc, #580]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b8e      	ldr	r3, [pc, #568]	; (8003948 <HAL_RCC_OscConfig+0x4f8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371a:	4b8b      	ldr	r3, [pc, #556]	; (8003948 <HAL_RCC_OscConfig+0x4f8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a8a      	ldr	r2, [pc, #552]	; (8003948 <HAL_RCC_OscConfig+0x4f8>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003726:	f7fe fe4d 	bl	80023c4 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372e:	f7fe fe49 	bl	80023c4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b64      	cmp	r3, #100	; 0x64
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e0fd      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	4b81      	ldr	r3, [pc, #516]	; (8003948 <HAL_RCC_OscConfig+0x4f8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x312>
 8003754:	4b7b      	ldr	r3, [pc, #492]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4a7a      	ldr	r2, [pc, #488]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6213      	str	r3, [r2, #32]
 8003760:	e02d      	b.n	80037be <HAL_RCC_OscConfig+0x36e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x334>
 800376a:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4a75      	ldr	r2, [pc, #468]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	6213      	str	r3, [r2, #32]
 8003776:	4b73      	ldr	r3, [pc, #460]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	4a72      	ldr	r2, [pc, #456]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	6213      	str	r3, [r2, #32]
 8003782:	e01c      	b.n	80037be <HAL_RCC_OscConfig+0x36e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b05      	cmp	r3, #5
 800378a:	d10c      	bne.n	80037a6 <HAL_RCC_OscConfig+0x356>
 800378c:	4b6d      	ldr	r3, [pc, #436]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	4a6c      	ldr	r2, [pc, #432]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003792:	f043 0304 	orr.w	r3, r3, #4
 8003796:	6213      	str	r3, [r2, #32]
 8003798:	4b6a      	ldr	r3, [pc, #424]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6213      	str	r3, [r2, #32]
 80037a4:	e00b      	b.n	80037be <HAL_RCC_OscConfig+0x36e>
 80037a6:	4b67      	ldr	r3, [pc, #412]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4a66      	ldr	r2, [pc, #408]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6213      	str	r3, [r2, #32]
 80037b2:	4b64      	ldr	r3, [pc, #400]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4a63      	ldr	r2, [pc, #396]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d015      	beq.n	80037f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7fe fdfd 	bl	80023c4 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fe fdf9 	bl	80023c4 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0ab      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	4b57      	ldr	r3, [pc, #348]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ee      	beq.n	80037ce <HAL_RCC_OscConfig+0x37e>
 80037f0:	e014      	b.n	800381c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f2:	f7fe fde7 	bl	80023c4 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7fe fde3 	bl	80023c4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e095      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003810:	4b4c      	ldr	r3, [pc, #304]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ee      	bne.n	80037fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003822:	4b48      	ldr	r3, [pc, #288]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4a47      	ldr	r2, [pc, #284]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8081 	beq.w	800393a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003838:	4b42      	ldr	r3, [pc, #264]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b08      	cmp	r3, #8
 8003842:	d061      	beq.n	8003908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d146      	bne.n	80038da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384c:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCC_OscConfig+0x4fc>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fdb7 	bl	80023c4 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe fdb3 	bl	80023c4 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e067      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386c:	4b35      	ldr	r3, [pc, #212]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d108      	bne.n	8003894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003882:	4b30      	ldr	r3, [pc, #192]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	492d      	ldr	r1, [pc, #180]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a19      	ldr	r1, [r3, #32]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	430b      	orrs	r3, r1
 80038a6:	4927      	ldr	r1, [pc, #156]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x4fc>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fe fd87 	bl	80023c4 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe fd83 	bl	80023c4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e037      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x46a>
 80038d8:	e02f      	b.n	800393a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	4b1c      	ldr	r3, [pc, #112]	; (800394c <HAL_RCC_OscConfig+0x4fc>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fe fd70 	bl	80023c4 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fe fd6c 	bl	80023c4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e020      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x498>
 8003906:	e018      	b.n	800393a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e013      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_OscConfig+0x4f4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	429a      	cmp	r2, r3
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
 800394c:	42420060 	.word	0x42420060

08003950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0d0      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b6a      	ldr	r3, [pc, #424]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d910      	bls.n	8003994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b67      	ldr	r3, [pc, #412]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4965      	ldr	r1, [pc, #404]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0b8      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ac:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c4:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d0:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	494d      	ldr	r1, [pc, #308]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d040      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d115      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e07f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e073      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06b      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f023 0203 	bic.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4936      	ldr	r1, [pc, #216]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a40:	f7fe fcc0 	bl	80023c4 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fe fcbc 	bl	80023c4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e053      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 020c 	and.w	r2, r3, #12
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1eb      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a70:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d210      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 0207 	bic.w	r2, r3, #7
 8003a86:	4922      	ldr	r1, [pc, #136]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e032      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4916      	ldr	r1, [pc, #88]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490e      	ldr	r1, [pc, #56]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ade:	f000 f821 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	fa21 f303 	lsr.w	r3, r1, r3
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1cc>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1d0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fc1e 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08008a90 	.word	0x08008a90
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	20000004 	.word	0x20000004

08003b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	b490      	push	{r4, r7}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b2c:	1d3c      	adds	r4, r7, #4
 8003b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b34:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d002      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x40>
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x46>
 8003b62:	e02d      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b66:	623b      	str	r3, [r7, #32]
      break;
 8003b68:	e02d      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	0c9b      	lsrs	r3, r3, #18
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b76:	4413      	add	r3, r2
 8003b78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c5b      	lsrs	r3, r3, #17
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b96:	4413      	add	r3, r2
 8003b98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	4a0f      	ldr	r2, [pc, #60]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ba2:	fb02 f203 	mul.w	r2, r2, r3
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	e004      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bb4:	fb02 f303 	mul.w	r3, r2, r3
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	623b      	str	r3, [r7, #32]
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bc2:	623b      	str	r3, [r7, #32]
      break;
 8003bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3728      	adds	r7, #40	; 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc90      	pop	{r4, r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	08008a68 	.word	0x08008a68
 8003bd8:	08008a78 	.word	0x08008a78
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	007a1200 	.word	0x007a1200
 8003be4:	003d0900 	.word	0x003d0900

08003be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	20000000 	.word	0x20000000

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c00:	f7ff fff2 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c04:	4601      	mov	r1, r0
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	0adb      	lsrs	r3, r3, #11
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4a03      	ldr	r2, [pc, #12]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	08008aa0 	.word	0x08008aa0

08003c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <RCC_Delay+0x34>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <RCC_Delay+0x38>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0a5b      	lsrs	r3, r3, #9
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c40:	bf00      	nop
  }
  while (Delay --);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1e5a      	subs	r2, r3, #1
 8003c46:	60fa      	str	r2, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f9      	bne.n	8003c40 <RCC_Delay+0x1c>
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	10624dd3 	.word	0x10624dd3

08003c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d07d      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c80:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	4b4c      	ldr	r3, [pc, #304]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	4a4b      	ldr	r2, [pc, #300]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c96:	61d3      	str	r3, [r2, #28]
 8003c98:	4b49      	ldr	r3, [pc, #292]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d118      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb4:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a42      	ldr	r2, [pc, #264]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fb80 	bl	80023c4 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	e008      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fe fb7c 	bl	80023c4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e06d      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b3a      	ldr	r3, [pc, #232]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ce6:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d02e      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d027      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d04:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d0e:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d14:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d1a:	4a29      	ldr	r2, [pc, #164]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d014      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fb4b 	bl	80023c4 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fe fb47 	bl	80023c4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e036      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ee      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4917      	ldr	r1, [pc, #92]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	490b      	ldr	r1, [pc, #44]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	4904      	ldr	r1, [pc, #16]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	42420440 	.word	0x42420440

08003dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003dcc:	b590      	push	{r4, r7, lr}
 8003dce:	b08d      	sub	sp, #52	; 0x34
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dd4:	4b55      	ldr	r3, [pc, #340]	; (8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003dd6:	f107 040c 	add.w	r4, r7, #12
 8003dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003de0:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	2300      	movs	r3, #0
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d07f      	beq.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d002      	beq.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d048      	beq.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e08:	e08b      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e10:	4b48      	ldr	r3, [pc, #288]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d07f      	beq.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	0c9b      	lsrs	r3, r3, #18
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e28:	4413      	add	r3, r2
 8003e2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e2e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d018      	beq.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	0c5b      	lsrs	r3, r3, #17
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003e48:	4413      	add	r3, r2
 8003e4a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e5a:	4a37      	ldr	r2, [pc, #220]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	4a33      	ldr	r2, [pc, #204]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e82:	d102      	bne.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e88:	e048      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e98:	e040      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003e9a:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eaa:	d108      	bne.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ebc:	e01f      	b.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec8:	d109      	bne.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003eca:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003ed6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003edc:	e00f      	b.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee8:	d11a      	bne.n	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d014      	beq.n	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003ef6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003efc:	e010      	b.n	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003efe:	e00f      	b.n	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f00:	f7ff fe7c 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	0b9b      	lsrs	r3, r3, #14
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	3301      	adds	r3, #1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003f20:	bf00      	nop
    }
  }
  return (frequency);
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3734      	adds	r7, #52	; 0x34
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}
 8003f2c:	08008a7c 	.word	0x08008a7c
 8003f30:	08008a8c 	.word	0x08008a8c
 8003f34:	40021000 	.word	0x40021000
 8003f38:	007a1200 	.word	0x007a1200
 8003f3c:	003d0900 	.word	0x003d0900
 8003f40:	aaaaaaab 	.word	0xaaaaaaab

08003f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e076      	b.n	8004044 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f66:	d009      	beq.n	8003f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
 8003f6e:	e005      	b.n	8003f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fe f88a 	bl	80020b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	ea42 0103 	orr.w	r1, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	0c1a      	lsrs	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f002 0204 	and.w	r2, r2, #4
 8004022:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004032:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_SPI_Transmit_IT+0x20>
 8004068:	2302      	movs	r3, #2
 800406a:	e06f      	b.n	800414c <HAL_SPI_Transmit_IT+0x100>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_SPI_Transmit_IT+0x34>
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004084:	e05d      	b.n	8004142 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d002      	beq.n	8004098 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004092:	2302      	movs	r3, #2
 8004094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004096:	e054      	b.n	8004142 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2203      	movs	r2, #3
 800409c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a1f      	ldr	r2, [pc, #124]	; (8004158 <HAL_SPI_Transmit_IT+0x10c>)
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
 80040de:	e002      	b.n	80040e6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a1e      	ldr	r2, [pc, #120]	; (800415c <HAL_SPI_Transmit_IT+0x110>)
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ee:	d10f      	bne.n	8004110 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800410e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800411e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d008      	beq.n	8004140 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e000      	b.n	8004142 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004140:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
}
 800414c:	4618      	mov	r0, r3
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	080043c3 	.word	0x080043c3
 800415c:	0800437d 	.word	0x0800437d

08004160 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10f      	bne.n	80041a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	099b      	lsrs	r3, r3, #6
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
    return;
 80041a2:	e0bf      	b.n	8004324 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_SPI_IRQHandler+0x66>
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	09db      	lsrs	r3, r3, #7
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
    return;
 80041c4:	e0ae      	b.n	8004324 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_SPI_IRQHandler+0x80>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a2 	beq.w	8004324 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 809b 	beq.w	8004324 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d023      	beq.n	8004242 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b03      	cmp	r3, #3
 8004204:	d011      	beq.n	800422a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f043 0204 	orr.w	r2, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	e00b      	b.n	8004242 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	693b      	ldr	r3, [r7, #16]
        return;
 8004240:	e070      	b.n	8004324 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d014      	beq.n	8004278 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	2b00      	cmp	r3, #0
 800427e:	d050      	beq.n	8004322 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800428e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <HAL_SPI_IRQHandler+0x14c>
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d034      	beq.n	8004316 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0203 	bic.w	r2, r2, #3
 80042ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d011      	beq.n	80042e8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_SPI_IRQHandler+0x1cc>)
 80042ca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fed5 	bl	8003080 <HAL_DMA_Abort_IT>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d016      	beq.n	800431e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f4:	4a0d      	ldr	r2, [pc, #52]	; (800432c <HAL_SPI_IRQHandler+0x1cc>)
 80042f6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe febf 	bl	8003080 <HAL_DMA_Abort_IT>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004314:	e003      	b.n	800431e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f813 	bl	8004342 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800431c:	e000      	b.n	8004320 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800431e:	bf00      	nop
    return;
 8004320:	bf00      	nop
 8004322:	bf00      	nop
  }
}
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	08004355 	.word	0x08004355

08004330 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ffe7 	bl	8004342 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8cd 	bl	8004554 <SPI_CloseTx_ISR>
  }
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8ab 	bl	8004554 <SPI_CloseTx_ISR>
  }
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004418:	f7fd ffd4 	bl	80023c4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	4413      	add	r3, r2
 8004426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004428:	f7fd ffcc 	bl	80023c4 <HAL_GetTick>
 800442c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800442e:	4b39      	ldr	r3, [pc, #228]	; (8004514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	015b      	lsls	r3, r3, #5
 8004434:	0d1b      	lsrs	r3, r3, #20
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443e:	e054      	b.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d050      	beq.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004448:	f7fd ffbc 	bl	80023c4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	429a      	cmp	r2, r3
 8004456:	d902      	bls.n	800445e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d13d      	bne.n	80044da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800446c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d111      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004480:	d004      	beq.n	800448c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448a:	d107      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d10f      	bne.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e017      	b.n	800450a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	429a      	cmp	r2, r3
 8004506:	d19b      	bne.n	8004440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000000 	.word	0x20000000

08004518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff ff6a 	bl	8004408 <SPI_WaitFlagStateUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e000      	b.n	800454c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800455c:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <SPI_CloseTx_ISR+0xbc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <SPI_CloseTx_ISR+0xc0>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0a5b      	lsrs	r3, r3, #9
 8004568:	2264      	movs	r2, #100	; 0x64
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004570:	f7fd ff28 	bl	80023c4 <HAL_GetTick>
 8004574:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004588:	e009      	b.n	800459e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3b01      	subs	r3, #1
 800458e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0eb      	beq.n	8004576 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045ac:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	2164      	movs	r1, #100	; 0x64
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ffb0 	bl	8004518 <SPI_EndRxTxTransaction>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff fea2 	bl	8004342 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80045fe:	e002      	b.n	8004606 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fe95 	bl	8004330 <HAL_SPI_TxCpltCallback>
}
 8004606:	bf00      	nop
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000000 	.word	0x20000000
 8004614:	057619f1 	.word	0x057619f1

08004618 <__errno>:
 8004618:	4b01      	ldr	r3, [pc, #4]	; (8004620 <__errno+0x8>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	2000000c 	.word	0x2000000c

08004624 <__libc_init_array>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	2500      	movs	r5, #0
 8004628:	4e0c      	ldr	r6, [pc, #48]	; (800465c <__libc_init_array+0x38>)
 800462a:	4c0d      	ldr	r4, [pc, #52]	; (8004660 <__libc_init_array+0x3c>)
 800462c:	1ba4      	subs	r4, r4, r6
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	42a5      	cmp	r5, r4
 8004632:	d109      	bne.n	8004648 <__libc_init_array+0x24>
 8004634:	f004 fa00 	bl	8008a38 <_init>
 8004638:	2500      	movs	r5, #0
 800463a:	4e0a      	ldr	r6, [pc, #40]	; (8004664 <__libc_init_array+0x40>)
 800463c:	4c0a      	ldr	r4, [pc, #40]	; (8004668 <__libc_init_array+0x44>)
 800463e:	1ba4      	subs	r4, r4, r6
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	42a5      	cmp	r5, r4
 8004644:	d105      	bne.n	8004652 <__libc_init_array+0x2e>
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800464c:	4798      	blx	r3
 800464e:	3501      	adds	r5, #1
 8004650:	e7ee      	b.n	8004630 <__libc_init_array+0xc>
 8004652:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004656:	4798      	blx	r3
 8004658:	3501      	adds	r5, #1
 800465a:	e7f2      	b.n	8004642 <__libc_init_array+0x1e>
 800465c:	08008dc8 	.word	0x08008dc8
 8004660:	08008dc8 	.word	0x08008dc8
 8004664:	08008dc8 	.word	0x08008dc8
 8004668:	08008dcc 	.word	0x08008dcc

0800466c <memset>:
 800466c:	4603      	mov	r3, r0
 800466e:	4402      	add	r2, r0
 8004670:	4293      	cmp	r3, r2
 8004672:	d100      	bne.n	8004676 <memset+0xa>
 8004674:	4770      	bx	lr
 8004676:	f803 1b01 	strb.w	r1, [r3], #1
 800467a:	e7f9      	b.n	8004670 <memset+0x4>

0800467c <__cvt>:
 800467c:	2b00      	cmp	r3, #0
 800467e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004682:	461e      	mov	r6, r3
 8004684:	bfbb      	ittet	lt
 8004686:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800468a:	461e      	movlt	r6, r3
 800468c:	2300      	movge	r3, #0
 800468e:	232d      	movlt	r3, #45	; 0x2d
 8004690:	b088      	sub	sp, #32
 8004692:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004694:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004698:	f027 0720 	bic.w	r7, r7, #32
 800469c:	2f46      	cmp	r7, #70	; 0x46
 800469e:	4614      	mov	r4, r2
 80046a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046a2:	700b      	strb	r3, [r1, #0]
 80046a4:	d004      	beq.n	80046b0 <__cvt+0x34>
 80046a6:	2f45      	cmp	r7, #69	; 0x45
 80046a8:	d100      	bne.n	80046ac <__cvt+0x30>
 80046aa:	3501      	adds	r5, #1
 80046ac:	2302      	movs	r3, #2
 80046ae:	e000      	b.n	80046b2 <__cvt+0x36>
 80046b0:	2303      	movs	r3, #3
 80046b2:	aa07      	add	r2, sp, #28
 80046b4:	9204      	str	r2, [sp, #16]
 80046b6:	aa06      	add	r2, sp, #24
 80046b8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80046bc:	e9cd 3500 	strd	r3, r5, [sp]
 80046c0:	4622      	mov	r2, r4
 80046c2:	4633      	mov	r3, r6
 80046c4:	f001 fd94 	bl	80061f0 <_dtoa_r>
 80046c8:	2f47      	cmp	r7, #71	; 0x47
 80046ca:	4680      	mov	r8, r0
 80046cc:	d102      	bne.n	80046d4 <__cvt+0x58>
 80046ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046d0:	07db      	lsls	r3, r3, #31
 80046d2:	d526      	bpl.n	8004722 <__cvt+0xa6>
 80046d4:	2f46      	cmp	r7, #70	; 0x46
 80046d6:	eb08 0905 	add.w	r9, r8, r5
 80046da:	d111      	bne.n	8004700 <__cvt+0x84>
 80046dc:	f898 3000 	ldrb.w	r3, [r8]
 80046e0:	2b30      	cmp	r3, #48	; 0x30
 80046e2:	d10a      	bne.n	80046fa <__cvt+0x7e>
 80046e4:	2200      	movs	r2, #0
 80046e6:	2300      	movs	r3, #0
 80046e8:	4620      	mov	r0, r4
 80046ea:	4631      	mov	r1, r6
 80046ec:	f7fc f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80046f0:	b918      	cbnz	r0, 80046fa <__cvt+0x7e>
 80046f2:	f1c5 0501 	rsb	r5, r5, #1
 80046f6:	f8ca 5000 	str.w	r5, [sl]
 80046fa:	f8da 3000 	ldr.w	r3, [sl]
 80046fe:	4499      	add	r9, r3
 8004700:	2200      	movs	r2, #0
 8004702:	2300      	movs	r3, #0
 8004704:	4620      	mov	r0, r4
 8004706:	4631      	mov	r1, r6
 8004708:	f7fc f94e 	bl	80009a8 <__aeabi_dcmpeq>
 800470c:	b938      	cbnz	r0, 800471e <__cvt+0xa2>
 800470e:	2230      	movs	r2, #48	; 0x30
 8004710:	9b07      	ldr	r3, [sp, #28]
 8004712:	454b      	cmp	r3, r9
 8004714:	d205      	bcs.n	8004722 <__cvt+0xa6>
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	9107      	str	r1, [sp, #28]
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e7f8      	b.n	8004710 <__cvt+0x94>
 800471e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004722:	4640      	mov	r0, r8
 8004724:	9b07      	ldr	r3, [sp, #28]
 8004726:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004728:	eba3 0308 	sub.w	r3, r3, r8
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	b008      	add	sp, #32
 8004730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004734 <__exponent>:
 8004734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004736:	2900      	cmp	r1, #0
 8004738:	bfb4      	ite	lt
 800473a:	232d      	movlt	r3, #45	; 0x2d
 800473c:	232b      	movge	r3, #43	; 0x2b
 800473e:	4604      	mov	r4, r0
 8004740:	bfb8      	it	lt
 8004742:	4249      	neglt	r1, r1
 8004744:	2909      	cmp	r1, #9
 8004746:	f804 2b02 	strb.w	r2, [r4], #2
 800474a:	7043      	strb	r3, [r0, #1]
 800474c:	dd21      	ble.n	8004792 <__exponent+0x5e>
 800474e:	f10d 0307 	add.w	r3, sp, #7
 8004752:	461f      	mov	r7, r3
 8004754:	260a      	movs	r6, #10
 8004756:	fb91 f5f6 	sdiv	r5, r1, r6
 800475a:	fb06 1115 	mls	r1, r6, r5, r1
 800475e:	2d09      	cmp	r5, #9
 8004760:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004764:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004768:	f103 32ff 	add.w	r2, r3, #4294967295
 800476c:	4629      	mov	r1, r5
 800476e:	dc09      	bgt.n	8004784 <__exponent+0x50>
 8004770:	3130      	adds	r1, #48	; 0x30
 8004772:	3b02      	subs	r3, #2
 8004774:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004778:	42bb      	cmp	r3, r7
 800477a:	4622      	mov	r2, r4
 800477c:	d304      	bcc.n	8004788 <__exponent+0x54>
 800477e:	1a10      	subs	r0, r2, r0
 8004780:	b003      	add	sp, #12
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004784:	4613      	mov	r3, r2
 8004786:	e7e6      	b.n	8004756 <__exponent+0x22>
 8004788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800478c:	f804 2b01 	strb.w	r2, [r4], #1
 8004790:	e7f2      	b.n	8004778 <__exponent+0x44>
 8004792:	2330      	movs	r3, #48	; 0x30
 8004794:	4419      	add	r1, r3
 8004796:	7083      	strb	r3, [r0, #2]
 8004798:	1d02      	adds	r2, r0, #4
 800479a:	70c1      	strb	r1, [r0, #3]
 800479c:	e7ef      	b.n	800477e <__exponent+0x4a>
	...

080047a0 <_printf_float>:
 80047a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a4:	b091      	sub	sp, #68	; 0x44
 80047a6:	460c      	mov	r4, r1
 80047a8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80047aa:	4693      	mov	fp, r2
 80047ac:	461e      	mov	r6, r3
 80047ae:	4605      	mov	r5, r0
 80047b0:	f002 feca 	bl	8007548 <_localeconv_r>
 80047b4:	6803      	ldr	r3, [r0, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ba:	f7fb fcc9 	bl	8000150 <strlen>
 80047be:	2300      	movs	r3, #0
 80047c0:	930e      	str	r3, [sp, #56]	; 0x38
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	900a      	str	r0, [sp, #40]	; 0x28
 80047c6:	3307      	adds	r3, #7
 80047c8:	f023 0307 	bic.w	r3, r3, #7
 80047cc:	f103 0208 	add.w	r2, r3, #8
 80047d0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80047d4:	f8d4 a000 	ldr.w	sl, [r4]
 80047d8:	603a      	str	r2, [r7, #0]
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047e2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80047e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295
 80047f0:	4ba6      	ldr	r3, [pc, #664]	; (8004a8c <_printf_float+0x2ec>)
 80047f2:	4638      	mov	r0, r7
 80047f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047f6:	f7fc f909 	bl	8000a0c <__aeabi_dcmpun>
 80047fa:	bb68      	cbnz	r0, 8004858 <_printf_float+0xb8>
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	4ba2      	ldr	r3, [pc, #648]	; (8004a8c <_printf_float+0x2ec>)
 8004802:	4638      	mov	r0, r7
 8004804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004806:	f7fc f8e3 	bl	80009d0 <__aeabi_dcmple>
 800480a:	bb28      	cbnz	r0, 8004858 <_printf_float+0xb8>
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	4638      	mov	r0, r7
 8004812:	4649      	mov	r1, r9
 8004814:	f7fc f8d2 	bl	80009bc <__aeabi_dcmplt>
 8004818:	b110      	cbz	r0, 8004820 <_printf_float+0x80>
 800481a:	232d      	movs	r3, #45	; 0x2d
 800481c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004820:	4f9b      	ldr	r7, [pc, #620]	; (8004a90 <_printf_float+0x2f0>)
 8004822:	4b9c      	ldr	r3, [pc, #624]	; (8004a94 <_printf_float+0x2f4>)
 8004824:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004828:	bf98      	it	ls
 800482a:	461f      	movls	r7, r3
 800482c:	2303      	movs	r3, #3
 800482e:	f04f 0900 	mov.w	r9, #0
 8004832:	6123      	str	r3, [r4, #16]
 8004834:	f02a 0304 	bic.w	r3, sl, #4
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	9600      	str	r6, [sp, #0]
 800483c:	465b      	mov	r3, fp
 800483e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004840:	4621      	mov	r1, r4
 8004842:	4628      	mov	r0, r5
 8004844:	f000 f9e2 	bl	8004c0c <_printf_common>
 8004848:	3001      	adds	r0, #1
 800484a:	f040 8090 	bne.w	800496e <_printf_float+0x1ce>
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	b011      	add	sp, #68	; 0x44
 8004854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004858:	463a      	mov	r2, r7
 800485a:	464b      	mov	r3, r9
 800485c:	4638      	mov	r0, r7
 800485e:	4649      	mov	r1, r9
 8004860:	f7fc f8d4 	bl	8000a0c <__aeabi_dcmpun>
 8004864:	b110      	cbz	r0, 800486c <_printf_float+0xcc>
 8004866:	4f8c      	ldr	r7, [pc, #560]	; (8004a98 <_printf_float+0x2f8>)
 8004868:	4b8c      	ldr	r3, [pc, #560]	; (8004a9c <_printf_float+0x2fc>)
 800486a:	e7db      	b.n	8004824 <_printf_float+0x84>
 800486c:	6863      	ldr	r3, [r4, #4]
 800486e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004872:	1c59      	adds	r1, r3, #1
 8004874:	a80d      	add	r0, sp, #52	; 0x34
 8004876:	a90e      	add	r1, sp, #56	; 0x38
 8004878:	d140      	bne.n	80048fc <_printf_float+0x15c>
 800487a:	2306      	movs	r3, #6
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	f04f 0c00 	mov.w	ip, #0
 8004882:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004886:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	463a      	mov	r2, r7
 8004896:	464b      	mov	r3, r9
 8004898:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800489c:	4628      	mov	r0, r5
 800489e:	f7ff feed 	bl	800467c <__cvt>
 80048a2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80048a6:	2b47      	cmp	r3, #71	; 0x47
 80048a8:	4607      	mov	r7, r0
 80048aa:	d109      	bne.n	80048c0 <_printf_float+0x120>
 80048ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ae:	1cd8      	adds	r0, r3, #3
 80048b0:	db02      	blt.n	80048b8 <_printf_float+0x118>
 80048b2:	6862      	ldr	r2, [r4, #4]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	dd47      	ble.n	8004948 <_printf_float+0x1a8>
 80048b8:	f1a8 0802 	sub.w	r8, r8, #2
 80048bc:	fa5f f888 	uxtb.w	r8, r8
 80048c0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80048c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048c6:	d824      	bhi.n	8004912 <_printf_float+0x172>
 80048c8:	3901      	subs	r1, #1
 80048ca:	4642      	mov	r2, r8
 80048cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048d0:	910d      	str	r1, [sp, #52]	; 0x34
 80048d2:	f7ff ff2f 	bl	8004734 <__exponent>
 80048d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048d8:	4681      	mov	r9, r0
 80048da:	1813      	adds	r3, r2, r0
 80048dc:	2a01      	cmp	r2, #1
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	dc02      	bgt.n	80048e8 <_printf_float+0x148>
 80048e2:	6822      	ldr	r2, [r4, #0]
 80048e4:	07d1      	lsls	r1, r2, #31
 80048e6:	d501      	bpl.n	80048ec <_printf_float+0x14c>
 80048e8:	3301      	adds	r3, #1
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0a2      	beq.n	800483a <_printf_float+0x9a>
 80048f4:	232d      	movs	r3, #45	; 0x2d
 80048f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048fa:	e79e      	b.n	800483a <_printf_float+0x9a>
 80048fc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004900:	f000 816e 	beq.w	8004be0 <_printf_float+0x440>
 8004904:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004908:	d1b9      	bne.n	800487e <_printf_float+0xde>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1b7      	bne.n	800487e <_printf_float+0xde>
 800490e:	2301      	movs	r3, #1
 8004910:	e7b4      	b.n	800487c <_printf_float+0xdc>
 8004912:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004916:	d119      	bne.n	800494c <_printf_float+0x1ac>
 8004918:	2900      	cmp	r1, #0
 800491a:	6863      	ldr	r3, [r4, #4]
 800491c:	dd0c      	ble.n	8004938 <_printf_float+0x198>
 800491e:	6121      	str	r1, [r4, #16]
 8004920:	b913      	cbnz	r3, 8004928 <_printf_float+0x188>
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	07d2      	lsls	r2, r2, #31
 8004926:	d502      	bpl.n	800492e <_printf_float+0x18e>
 8004928:	3301      	adds	r3, #1
 800492a:	440b      	add	r3, r1
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004930:	f04f 0900 	mov.w	r9, #0
 8004934:	65a3      	str	r3, [r4, #88]	; 0x58
 8004936:	e7d9      	b.n	80048ec <_printf_float+0x14c>
 8004938:	b913      	cbnz	r3, 8004940 <_printf_float+0x1a0>
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	07d0      	lsls	r0, r2, #31
 800493e:	d501      	bpl.n	8004944 <_printf_float+0x1a4>
 8004940:	3302      	adds	r3, #2
 8004942:	e7f3      	b.n	800492c <_printf_float+0x18c>
 8004944:	2301      	movs	r3, #1
 8004946:	e7f1      	b.n	800492c <_printf_float+0x18c>
 8004948:	f04f 0867 	mov.w	r8, #103	; 0x67
 800494c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004950:	4293      	cmp	r3, r2
 8004952:	db05      	blt.n	8004960 <_printf_float+0x1c0>
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	6123      	str	r3, [r4, #16]
 8004958:	07d1      	lsls	r1, r2, #31
 800495a:	d5e8      	bpl.n	800492e <_printf_float+0x18e>
 800495c:	3301      	adds	r3, #1
 800495e:	e7e5      	b.n	800492c <_printf_float+0x18c>
 8004960:	2b00      	cmp	r3, #0
 8004962:	bfcc      	ite	gt
 8004964:	2301      	movgt	r3, #1
 8004966:	f1c3 0302 	rsble	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	e7de      	b.n	800492c <_printf_float+0x18c>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	055a      	lsls	r2, r3, #21
 8004972:	d407      	bmi.n	8004984 <_printf_float+0x1e4>
 8004974:	6923      	ldr	r3, [r4, #16]
 8004976:	463a      	mov	r2, r7
 8004978:	4659      	mov	r1, fp
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	3001      	adds	r0, #1
 8004980:	d129      	bne.n	80049d6 <_printf_float+0x236>
 8004982:	e764      	b.n	800484e <_printf_float+0xae>
 8004984:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004988:	f240 80d7 	bls.w	8004b3a <_printf_float+0x39a>
 800498c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004990:	2200      	movs	r2, #0
 8004992:	2300      	movs	r3, #0
 8004994:	f7fc f808 	bl	80009a8 <__aeabi_dcmpeq>
 8004998:	b388      	cbz	r0, 80049fe <_printf_float+0x25e>
 800499a:	2301      	movs	r3, #1
 800499c:	4a40      	ldr	r2, [pc, #256]	; (8004aa0 <_printf_float+0x300>)
 800499e:	4659      	mov	r1, fp
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b0      	blx	r6
 80049a4:	3001      	adds	r0, #1
 80049a6:	f43f af52 	beq.w	800484e <_printf_float+0xae>
 80049aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049ae:	429a      	cmp	r2, r3
 80049b0:	db02      	blt.n	80049b8 <_printf_float+0x218>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	07d8      	lsls	r0, r3, #31
 80049b6:	d50e      	bpl.n	80049d6 <_printf_float+0x236>
 80049b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049bc:	4659      	mov	r1, fp
 80049be:	4628      	mov	r0, r5
 80049c0:	47b0      	blx	r6
 80049c2:	3001      	adds	r0, #1
 80049c4:	f43f af43 	beq.w	800484e <_printf_float+0xae>
 80049c8:	2700      	movs	r7, #0
 80049ca:	f104 081a 	add.w	r8, r4, #26
 80049ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049d0:	3b01      	subs	r3, #1
 80049d2:	42bb      	cmp	r3, r7
 80049d4:	dc09      	bgt.n	80049ea <_printf_float+0x24a>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	079f      	lsls	r7, r3, #30
 80049da:	f100 80fd 	bmi.w	8004bd8 <_printf_float+0x438>
 80049de:	68e0      	ldr	r0, [r4, #12]
 80049e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049e2:	4298      	cmp	r0, r3
 80049e4:	bfb8      	it	lt
 80049e6:	4618      	movlt	r0, r3
 80049e8:	e733      	b.n	8004852 <_printf_float+0xb2>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4642      	mov	r2, r8
 80049ee:	4659      	mov	r1, fp
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b0      	blx	r6
 80049f4:	3001      	adds	r0, #1
 80049f6:	f43f af2a 	beq.w	800484e <_printf_float+0xae>
 80049fa:	3701      	adds	r7, #1
 80049fc:	e7e7      	b.n	80049ce <_printf_float+0x22e>
 80049fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	dc2b      	bgt.n	8004a5c <_printf_float+0x2bc>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <_printf_float+0x300>)
 8004a08:	4659      	mov	r1, fp
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b0      	blx	r6
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f43f af1d 	beq.w	800484e <_printf_float+0xae>
 8004a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a16:	b923      	cbnz	r3, 8004a22 <_printf_float+0x282>
 8004a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a1a:	b913      	cbnz	r3, 8004a22 <_printf_float+0x282>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	07d9      	lsls	r1, r3, #31
 8004a20:	d5d9      	bpl.n	80049d6 <_printf_float+0x236>
 8004a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a26:	4659      	mov	r1, fp
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b0      	blx	r6
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f af0e 	beq.w	800484e <_printf_float+0xae>
 8004a32:	f04f 0800 	mov.w	r8, #0
 8004a36:	f104 091a 	add.w	r9, r4, #26
 8004a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a3c:	425b      	negs	r3, r3
 8004a3e:	4543      	cmp	r3, r8
 8004a40:	dc01      	bgt.n	8004a46 <_printf_float+0x2a6>
 8004a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a44:	e797      	b.n	8004976 <_printf_float+0x1d6>
 8004a46:	2301      	movs	r3, #1
 8004a48:	464a      	mov	r2, r9
 8004a4a:	4659      	mov	r1, fp
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b0      	blx	r6
 8004a50:	3001      	adds	r0, #1
 8004a52:	f43f aefc 	beq.w	800484e <_printf_float+0xae>
 8004a56:	f108 0801 	add.w	r8, r8, #1
 8004a5a:	e7ee      	b.n	8004a3a <_printf_float+0x29a>
 8004a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a60:	429a      	cmp	r2, r3
 8004a62:	bfa8      	it	ge
 8004a64:	461a      	movge	r2, r3
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	4690      	mov	r8, r2
 8004a6a:	dd07      	ble.n	8004a7c <_printf_float+0x2dc>
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	4659      	mov	r1, fp
 8004a70:	463a      	mov	r2, r7
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b0      	blx	r6
 8004a76:	3001      	adds	r0, #1
 8004a78:	f43f aee9 	beq.w	800484e <_printf_float+0xae>
 8004a7c:	f104 031a 	add.w	r3, r4, #26
 8004a80:	f04f 0a00 	mov.w	sl, #0
 8004a84:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a8a:	e015      	b.n	8004ab8 <_printf_float+0x318>
 8004a8c:	7fefffff 	.word	0x7fefffff
 8004a90:	08008ab0 	.word	0x08008ab0
 8004a94:	08008aac 	.word	0x08008aac
 8004a98:	08008ab8 	.word	0x08008ab8
 8004a9c:	08008ab4 	.word	0x08008ab4
 8004aa0:	08008abc 	.word	0x08008abc
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b0      	blx	r6
 8004aae:	3001      	adds	r0, #1
 8004ab0:	f43f aecd 	beq.w	800484e <_printf_float+0xae>
 8004ab4:	f10a 0a01 	add.w	sl, sl, #1
 8004ab8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004abc:	eba9 0308 	sub.w	r3, r9, r8
 8004ac0:	4553      	cmp	r3, sl
 8004ac2:	dcef      	bgt.n	8004aa4 <_printf_float+0x304>
 8004ac4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	444f      	add	r7, r9
 8004acc:	db14      	blt.n	8004af8 <_printf_float+0x358>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	07da      	lsls	r2, r3, #31
 8004ad2:	d411      	bmi.n	8004af8 <_printf_float+0x358>
 8004ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ad6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ad8:	eba3 0209 	sub.w	r2, r3, r9
 8004adc:	eba3 0901 	sub.w	r9, r3, r1
 8004ae0:	4591      	cmp	r9, r2
 8004ae2:	bfa8      	it	ge
 8004ae4:	4691      	movge	r9, r2
 8004ae6:	f1b9 0f00 	cmp.w	r9, #0
 8004aea:	dc0d      	bgt.n	8004b08 <_printf_float+0x368>
 8004aec:	2700      	movs	r7, #0
 8004aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004af2:	f104 081a 	add.w	r8, r4, #26
 8004af6:	e018      	b.n	8004b2a <_printf_float+0x38a>
 8004af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004afc:	4659      	mov	r1, fp
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b0      	blx	r6
 8004b02:	3001      	adds	r0, #1
 8004b04:	d1e6      	bne.n	8004ad4 <_printf_float+0x334>
 8004b06:	e6a2      	b.n	800484e <_printf_float+0xae>
 8004b08:	464b      	mov	r3, r9
 8004b0a:	463a      	mov	r2, r7
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	4628      	mov	r0, r5
 8004b10:	47b0      	blx	r6
 8004b12:	3001      	adds	r0, #1
 8004b14:	d1ea      	bne.n	8004aec <_printf_float+0x34c>
 8004b16:	e69a      	b.n	800484e <_printf_float+0xae>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b0      	blx	r6
 8004b22:	3001      	adds	r0, #1
 8004b24:	f43f ae93 	beq.w	800484e <_printf_float+0xae>
 8004b28:	3701      	adds	r7, #1
 8004b2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	eba3 0309 	sub.w	r3, r3, r9
 8004b34:	42bb      	cmp	r3, r7
 8004b36:	dcef      	bgt.n	8004b18 <_printf_float+0x378>
 8004b38:	e74d      	b.n	80049d6 <_printf_float+0x236>
 8004b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b3c:	2a01      	cmp	r2, #1
 8004b3e:	dc01      	bgt.n	8004b44 <_printf_float+0x3a4>
 8004b40:	07db      	lsls	r3, r3, #31
 8004b42:	d538      	bpl.n	8004bb6 <_printf_float+0x416>
 8004b44:	2301      	movs	r3, #1
 8004b46:	463a      	mov	r2, r7
 8004b48:	4659      	mov	r1, fp
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b0      	blx	r6
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f43f ae7d 	beq.w	800484e <_printf_float+0xae>
 8004b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b58:	4659      	mov	r1, fp
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	47b0      	blx	r6
 8004b5e:	3001      	adds	r0, #1
 8004b60:	f107 0701 	add.w	r7, r7, #1
 8004b64:	f43f ae73 	beq.w	800484e <_printf_float+0xae>
 8004b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f103 38ff 	add.w	r8, r3, #4294967295
 8004b74:	2300      	movs	r3, #0
 8004b76:	f7fb ff17 	bl	80009a8 <__aeabi_dcmpeq>
 8004b7a:	b9c0      	cbnz	r0, 8004bae <_printf_float+0x40e>
 8004b7c:	4643      	mov	r3, r8
 8004b7e:	463a      	mov	r2, r7
 8004b80:	4659      	mov	r1, fp
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b0      	blx	r6
 8004b86:	3001      	adds	r0, #1
 8004b88:	d10d      	bne.n	8004ba6 <_printf_float+0x406>
 8004b8a:	e660      	b.n	800484e <_printf_float+0xae>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4642      	mov	r2, r8
 8004b90:	4659      	mov	r1, fp
 8004b92:	4628      	mov	r0, r5
 8004b94:	47b0      	blx	r6
 8004b96:	3001      	adds	r0, #1
 8004b98:	f43f ae59 	beq.w	800484e <_printf_float+0xae>
 8004b9c:	3701      	adds	r7, #1
 8004b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	42bb      	cmp	r3, r7
 8004ba4:	dcf2      	bgt.n	8004b8c <_printf_float+0x3ec>
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bac:	e6e4      	b.n	8004978 <_printf_float+0x1d8>
 8004bae:	2700      	movs	r7, #0
 8004bb0:	f104 081a 	add.w	r8, r4, #26
 8004bb4:	e7f3      	b.n	8004b9e <_printf_float+0x3fe>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7e1      	b.n	8004b7e <_printf_float+0x3de>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	4659      	mov	r1, fp
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b0      	blx	r6
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f43f ae42 	beq.w	800484e <_printf_float+0xae>
 8004bca:	3701      	adds	r7, #1
 8004bcc:	68e3      	ldr	r3, [r4, #12]
 8004bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	42bb      	cmp	r3, r7
 8004bd4:	dcf1      	bgt.n	8004bba <_printf_float+0x41a>
 8004bd6:	e702      	b.n	80049de <_printf_float+0x23e>
 8004bd8:	2700      	movs	r7, #0
 8004bda:	f104 0819 	add.w	r8, r4, #25
 8004bde:	e7f5      	b.n	8004bcc <_printf_float+0x42c>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f43f ae94 	beq.w	800490e <_printf_float+0x16e>
 8004be6:	f04f 0c00 	mov.w	ip, #0
 8004bea:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004bee:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004bf2:	6022      	str	r2, [r4, #0]
 8004bf4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004bf8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	463a      	mov	r2, r7
 8004c00:	464b      	mov	r3, r9
 8004c02:	4628      	mov	r0, r5
 8004c04:	f7ff fd3a 	bl	800467c <__cvt>
 8004c08:	4607      	mov	r7, r0
 8004c0a:	e64f      	b.n	80048ac <_printf_float+0x10c>

08004c0c <_printf_common>:
 8004c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	4691      	mov	r9, r2
 8004c12:	461f      	mov	r7, r3
 8004c14:	688a      	ldr	r2, [r1, #8]
 8004c16:	690b      	ldr	r3, [r1, #16]
 8004c18:	4606      	mov	r6, r0
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	bfb8      	it	lt
 8004c1e:	4613      	movlt	r3, r2
 8004c20:	f8c9 3000 	str.w	r3, [r9]
 8004c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c28:	460c      	mov	r4, r1
 8004c2a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c2e:	b112      	cbz	r2, 8004c36 <_printf_common+0x2a>
 8004c30:	3301      	adds	r3, #1
 8004c32:	f8c9 3000 	str.w	r3, [r9]
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	0699      	lsls	r1, r3, #26
 8004c3a:	bf42      	ittt	mi
 8004c3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c40:	3302      	addmi	r3, #2
 8004c42:	f8c9 3000 	strmi.w	r3, [r9]
 8004c46:	6825      	ldr	r5, [r4, #0]
 8004c48:	f015 0506 	ands.w	r5, r5, #6
 8004c4c:	d107      	bne.n	8004c5e <_printf_common+0x52>
 8004c4e:	f104 0a19 	add.w	sl, r4, #25
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	f8d9 2000 	ldr.w	r2, [r9]
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	42ab      	cmp	r3, r5
 8004c5c:	dc29      	bgt.n	8004cb2 <_printf_common+0xa6>
 8004c5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	3300      	adds	r3, #0
 8004c66:	bf18      	it	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	0692      	lsls	r2, r2, #26
 8004c6c:	d42e      	bmi.n	8004ccc <_printf_common+0xc0>
 8004c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c72:	4639      	mov	r1, r7
 8004c74:	4630      	mov	r0, r6
 8004c76:	47c0      	blx	r8
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d021      	beq.n	8004cc0 <_printf_common+0xb4>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	68e5      	ldr	r5, [r4, #12]
 8004c80:	f003 0306 	and.w	r3, r3, #6
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	bf18      	it	ne
 8004c88:	2500      	movne	r5, #0
 8004c8a:	f8d9 2000 	ldr.w	r2, [r9]
 8004c8e:	f04f 0900 	mov.w	r9, #0
 8004c92:	bf08      	it	eq
 8004c94:	1aad      	subeq	r5, r5, r2
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	bf08      	it	eq
 8004c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	bfc4      	itt	gt
 8004ca4:	1a9b      	subgt	r3, r3, r2
 8004ca6:	18ed      	addgt	r5, r5, r3
 8004ca8:	341a      	adds	r4, #26
 8004caa:	454d      	cmp	r5, r9
 8004cac:	d11a      	bne.n	8004ce4 <_printf_common+0xd8>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e008      	b.n	8004cc4 <_printf_common+0xb8>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4652      	mov	r2, sl
 8004cb6:	4639      	mov	r1, r7
 8004cb8:	4630      	mov	r0, r6
 8004cba:	47c0      	blx	r8
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d103      	bne.n	8004cc8 <_printf_common+0xbc>
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc8:	3501      	adds	r5, #1
 8004cca:	e7c2      	b.n	8004c52 <_printf_common+0x46>
 8004ccc:	2030      	movs	r0, #48	; 0x30
 8004cce:	18e1      	adds	r1, r4, r3
 8004cd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cda:	4422      	add	r2, r4
 8004cdc:	3302      	adds	r3, #2
 8004cde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ce2:	e7c4      	b.n	8004c6e <_printf_common+0x62>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	4639      	mov	r1, r7
 8004cea:	4630      	mov	r0, r6
 8004cec:	47c0      	blx	r8
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d0e6      	beq.n	8004cc0 <_printf_common+0xb4>
 8004cf2:	f109 0901 	add.w	r9, r9, #1
 8004cf6:	e7d8      	b.n	8004caa <_printf_common+0x9e>

08004cf8 <_printf_i>:
 8004cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d00:	460c      	mov	r4, r1
 8004d02:	7e09      	ldrb	r1, [r1, #24]
 8004d04:	b085      	sub	sp, #20
 8004d06:	296e      	cmp	r1, #110	; 0x6e
 8004d08:	4617      	mov	r7, r2
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	4698      	mov	r8, r3
 8004d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d10:	f000 80b3 	beq.w	8004e7a <_printf_i+0x182>
 8004d14:	d822      	bhi.n	8004d5c <_printf_i+0x64>
 8004d16:	2963      	cmp	r1, #99	; 0x63
 8004d18:	d036      	beq.n	8004d88 <_printf_i+0x90>
 8004d1a:	d80a      	bhi.n	8004d32 <_printf_i+0x3a>
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	f000 80b9 	beq.w	8004e94 <_printf_i+0x19c>
 8004d22:	2958      	cmp	r1, #88	; 0x58
 8004d24:	f000 8083 	beq.w	8004e2e <_printf_i+0x136>
 8004d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d30:	e032      	b.n	8004d98 <_printf_i+0xa0>
 8004d32:	2964      	cmp	r1, #100	; 0x64
 8004d34:	d001      	beq.n	8004d3a <_printf_i+0x42>
 8004d36:	2969      	cmp	r1, #105	; 0x69
 8004d38:	d1f6      	bne.n	8004d28 <_printf_i+0x30>
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	6813      	ldr	r3, [r2, #0]
 8004d3e:	0605      	lsls	r5, r0, #24
 8004d40:	f103 0104 	add.w	r1, r3, #4
 8004d44:	d52a      	bpl.n	8004d9c <_printf_i+0xa4>
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6011      	str	r1, [r2, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da03      	bge.n	8004d56 <_printf_i+0x5e>
 8004d4e:	222d      	movs	r2, #45	; 0x2d
 8004d50:	425b      	negs	r3, r3
 8004d52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d56:	486f      	ldr	r0, [pc, #444]	; (8004f14 <_printf_i+0x21c>)
 8004d58:	220a      	movs	r2, #10
 8004d5a:	e039      	b.n	8004dd0 <_printf_i+0xd8>
 8004d5c:	2973      	cmp	r1, #115	; 0x73
 8004d5e:	f000 809d 	beq.w	8004e9c <_printf_i+0x1a4>
 8004d62:	d808      	bhi.n	8004d76 <_printf_i+0x7e>
 8004d64:	296f      	cmp	r1, #111	; 0x6f
 8004d66:	d020      	beq.n	8004daa <_printf_i+0xb2>
 8004d68:	2970      	cmp	r1, #112	; 0x70
 8004d6a:	d1dd      	bne.n	8004d28 <_printf_i+0x30>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	f043 0320 	orr.w	r3, r3, #32
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	e003      	b.n	8004d7e <_printf_i+0x86>
 8004d76:	2975      	cmp	r1, #117	; 0x75
 8004d78:	d017      	beq.n	8004daa <_printf_i+0xb2>
 8004d7a:	2978      	cmp	r1, #120	; 0x78
 8004d7c:	d1d4      	bne.n	8004d28 <_printf_i+0x30>
 8004d7e:	2378      	movs	r3, #120	; 0x78
 8004d80:	4865      	ldr	r0, [pc, #404]	; (8004f18 <_printf_i+0x220>)
 8004d82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d86:	e055      	b.n	8004e34 <_printf_i+0x13c>
 8004d88:	6813      	ldr	r3, [r2, #0]
 8004d8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d8e:	1d19      	adds	r1, r3, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6011      	str	r1, [r2, #0]
 8004d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e08c      	b.n	8004eb6 <_printf_i+0x1be>
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004da2:	6011      	str	r1, [r2, #0]
 8004da4:	bf18      	it	ne
 8004da6:	b21b      	sxthne	r3, r3
 8004da8:	e7cf      	b.n	8004d4a <_printf_i+0x52>
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	6825      	ldr	r5, [r4, #0]
 8004dae:	1d18      	adds	r0, r3, #4
 8004db0:	6010      	str	r0, [r2, #0]
 8004db2:	0628      	lsls	r0, r5, #24
 8004db4:	d501      	bpl.n	8004dba <_printf_i+0xc2>
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	e002      	b.n	8004dc0 <_printf_i+0xc8>
 8004dba:	0668      	lsls	r0, r5, #25
 8004dbc:	d5fb      	bpl.n	8004db6 <_printf_i+0xbe>
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	296f      	cmp	r1, #111	; 0x6f
 8004dc2:	bf14      	ite	ne
 8004dc4:	220a      	movne	r2, #10
 8004dc6:	2208      	moveq	r2, #8
 8004dc8:	4852      	ldr	r0, [pc, #328]	; (8004f14 <_printf_i+0x21c>)
 8004dca:	2100      	movs	r1, #0
 8004dcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dd0:	6865      	ldr	r5, [r4, #4]
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	60a5      	str	r5, [r4, #8]
 8004dd6:	f2c0 8095 	blt.w	8004f04 <_printf_i+0x20c>
 8004dda:	6821      	ldr	r1, [r4, #0]
 8004ddc:	f021 0104 	bic.w	r1, r1, #4
 8004de0:	6021      	str	r1, [r4, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d13d      	bne.n	8004e62 <_printf_i+0x16a>
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	f040 808e 	bne.w	8004f08 <_printf_i+0x210>
 8004dec:	4665      	mov	r5, ip
 8004dee:	2a08      	cmp	r2, #8
 8004df0:	d10b      	bne.n	8004e0a <_printf_i+0x112>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	07db      	lsls	r3, r3, #31
 8004df6:	d508      	bpl.n	8004e0a <_printf_i+0x112>
 8004df8:	6923      	ldr	r3, [r4, #16]
 8004dfa:	6862      	ldr	r2, [r4, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	bfde      	ittt	le
 8004e00:	2330      	movle	r3, #48	; 0x30
 8004e02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e0a:	ebac 0305 	sub.w	r3, ip, r5
 8004e0e:	6123      	str	r3, [r4, #16]
 8004e10:	f8cd 8000 	str.w	r8, [sp]
 8004e14:	463b      	mov	r3, r7
 8004e16:	aa03      	add	r2, sp, #12
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f7ff fef6 	bl	8004c0c <_printf_common>
 8004e20:	3001      	adds	r0, #1
 8004e22:	d14d      	bne.n	8004ec0 <_printf_i+0x1c8>
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
 8004e28:	b005      	add	sp, #20
 8004e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e2e:	4839      	ldr	r0, [pc, #228]	; (8004f14 <_printf_i+0x21c>)
 8004e30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e34:	6813      	ldr	r3, [r2, #0]
 8004e36:	6821      	ldr	r1, [r4, #0]
 8004e38:	1d1d      	adds	r5, r3, #4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6015      	str	r5, [r2, #0]
 8004e3e:	060a      	lsls	r2, r1, #24
 8004e40:	d50b      	bpl.n	8004e5a <_printf_i+0x162>
 8004e42:	07ca      	lsls	r2, r1, #31
 8004e44:	bf44      	itt	mi
 8004e46:	f041 0120 	orrmi.w	r1, r1, #32
 8004e4a:	6021      	strmi	r1, [r4, #0]
 8004e4c:	b91b      	cbnz	r3, 8004e56 <_printf_i+0x15e>
 8004e4e:	6822      	ldr	r2, [r4, #0]
 8004e50:	f022 0220 	bic.w	r2, r2, #32
 8004e54:	6022      	str	r2, [r4, #0]
 8004e56:	2210      	movs	r2, #16
 8004e58:	e7b7      	b.n	8004dca <_printf_i+0xd2>
 8004e5a:	064d      	lsls	r5, r1, #25
 8004e5c:	bf48      	it	mi
 8004e5e:	b29b      	uxthmi	r3, r3
 8004e60:	e7ef      	b.n	8004e42 <_printf_i+0x14a>
 8004e62:	4665      	mov	r5, ip
 8004e64:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e68:	fb02 3311 	mls	r3, r2, r1, r3
 8004e6c:	5cc3      	ldrb	r3, [r0, r3]
 8004e6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e72:	460b      	mov	r3, r1
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d1f5      	bne.n	8004e64 <_printf_i+0x16c>
 8004e78:	e7b9      	b.n	8004dee <_printf_i+0xf6>
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	6825      	ldr	r5, [r4, #0]
 8004e7e:	1d18      	adds	r0, r3, #4
 8004e80:	6961      	ldr	r1, [r4, #20]
 8004e82:	6010      	str	r0, [r2, #0]
 8004e84:	0628      	lsls	r0, r5, #24
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	d501      	bpl.n	8004e8e <_printf_i+0x196>
 8004e8a:	6019      	str	r1, [r3, #0]
 8004e8c:	e002      	b.n	8004e94 <_printf_i+0x19c>
 8004e8e:	066a      	lsls	r2, r5, #25
 8004e90:	d5fb      	bpl.n	8004e8a <_printf_i+0x192>
 8004e92:	8019      	strh	r1, [r3, #0]
 8004e94:	2300      	movs	r3, #0
 8004e96:	4665      	mov	r5, ip
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	e7b9      	b.n	8004e10 <_printf_i+0x118>
 8004e9c:	6813      	ldr	r3, [r2, #0]
 8004e9e:	1d19      	adds	r1, r3, #4
 8004ea0:	6011      	str	r1, [r2, #0]
 8004ea2:	681d      	ldr	r5, [r3, #0]
 8004ea4:	6862      	ldr	r2, [r4, #4]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f002 fb75 	bl	8007598 <memchr>
 8004eae:	b108      	cbz	r0, 8004eb4 <_printf_i+0x1bc>
 8004eb0:	1b40      	subs	r0, r0, r5
 8004eb2:	6060      	str	r0, [r4, #4]
 8004eb4:	6863      	ldr	r3, [r4, #4]
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ebe:	e7a7      	b.n	8004e10 <_printf_i+0x118>
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	4639      	mov	r1, r7
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	47c0      	blx	r8
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d0aa      	beq.n	8004e24 <_printf_i+0x12c>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	079b      	lsls	r3, r3, #30
 8004ed2:	d413      	bmi.n	8004efc <_printf_i+0x204>
 8004ed4:	68e0      	ldr	r0, [r4, #12]
 8004ed6:	9b03      	ldr	r3, [sp, #12]
 8004ed8:	4298      	cmp	r0, r3
 8004eda:	bfb8      	it	lt
 8004edc:	4618      	movlt	r0, r3
 8004ede:	e7a3      	b.n	8004e28 <_printf_i+0x130>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	464a      	mov	r2, r9
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	47c0      	blx	r8
 8004eea:	3001      	adds	r0, #1
 8004eec:	d09a      	beq.n	8004e24 <_printf_i+0x12c>
 8004eee:	3501      	adds	r5, #1
 8004ef0:	68e3      	ldr	r3, [r4, #12]
 8004ef2:	9a03      	ldr	r2, [sp, #12]
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	42ab      	cmp	r3, r5
 8004ef8:	dcf2      	bgt.n	8004ee0 <_printf_i+0x1e8>
 8004efa:	e7eb      	b.n	8004ed4 <_printf_i+0x1dc>
 8004efc:	2500      	movs	r5, #0
 8004efe:	f104 0919 	add.w	r9, r4, #25
 8004f02:	e7f5      	b.n	8004ef0 <_printf_i+0x1f8>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1ac      	bne.n	8004e62 <_printf_i+0x16a>
 8004f08:	7803      	ldrb	r3, [r0, #0]
 8004f0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f12:	e76c      	b.n	8004dee <_printf_i+0xf6>
 8004f14:	08008abe 	.word	0x08008abe
 8004f18:	08008acf 	.word	0x08008acf

08004f1c <_scanf_float>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	469a      	mov	sl, r3
 8004f22:	688b      	ldr	r3, [r1, #8]
 8004f24:	4616      	mov	r6, r2
 8004f26:	1e5a      	subs	r2, r3, #1
 8004f28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f2c:	bf88      	it	hi
 8004f2e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004f32:	b087      	sub	sp, #28
 8004f34:	bf85      	ittet	hi
 8004f36:	189b      	addhi	r3, r3, r2
 8004f38:	9301      	strhi	r3, [sp, #4]
 8004f3a:	2300      	movls	r3, #0
 8004f3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f40:	4688      	mov	r8, r1
 8004f42:	f04f 0b00 	mov.w	fp, #0
 8004f46:	bf8c      	ite	hi
 8004f48:	608b      	strhi	r3, [r1, #8]
 8004f4a:	9301      	strls	r3, [sp, #4]
 8004f4c:	680b      	ldr	r3, [r1, #0]
 8004f4e:	4607      	mov	r7, r0
 8004f50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004f54:	f848 3b1c 	str.w	r3, [r8], #28
 8004f58:	460c      	mov	r4, r1
 8004f5a:	4645      	mov	r5, r8
 8004f5c:	465a      	mov	r2, fp
 8004f5e:	46d9      	mov	r9, fp
 8004f60:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004f64:	f8cd b008 	str.w	fp, [sp, #8]
 8004f68:	68a1      	ldr	r1, [r4, #8]
 8004f6a:	b181      	cbz	r1, 8004f8e <_scanf_float+0x72>
 8004f6c:	6833      	ldr	r3, [r6, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b49      	cmp	r3, #73	; 0x49
 8004f72:	d071      	beq.n	8005058 <_scanf_float+0x13c>
 8004f74:	d84d      	bhi.n	8005012 <_scanf_float+0xf6>
 8004f76:	2b39      	cmp	r3, #57	; 0x39
 8004f78:	d840      	bhi.n	8004ffc <_scanf_float+0xe0>
 8004f7a:	2b31      	cmp	r3, #49	; 0x31
 8004f7c:	f080 8088 	bcs.w	8005090 <_scanf_float+0x174>
 8004f80:	2b2d      	cmp	r3, #45	; 0x2d
 8004f82:	f000 8090 	beq.w	80050a6 <_scanf_float+0x18a>
 8004f86:	d815      	bhi.n	8004fb4 <_scanf_float+0x98>
 8004f88:	2b2b      	cmp	r3, #43	; 0x2b
 8004f8a:	f000 808c 	beq.w	80050a6 <_scanf_float+0x18a>
 8004f8e:	f1b9 0f00 	cmp.w	r9, #0
 8004f92:	d003      	beq.n	8004f9c <_scanf_float+0x80>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	3a01      	subs	r2, #1
 8004f9e:	2a01      	cmp	r2, #1
 8004fa0:	f200 80ea 	bhi.w	8005178 <_scanf_float+0x25c>
 8004fa4:	4545      	cmp	r5, r8
 8004fa6:	f200 80dc 	bhi.w	8005162 <_scanf_float+0x246>
 8004faa:	2601      	movs	r6, #1
 8004fac:	4630      	mov	r0, r6
 8004fae:	b007      	add	sp, #28
 8004fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fb6:	f000 809f 	beq.w	80050f8 <_scanf_float+0x1dc>
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d1e7      	bne.n	8004f8e <_scanf_float+0x72>
 8004fbe:	6820      	ldr	r0, [r4, #0]
 8004fc0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004fc4:	d064      	beq.n	8005090 <_scanf_float+0x174>
 8004fc6:	9b01      	ldr	r3, [sp, #4]
 8004fc8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004fcc:	6020      	str	r0, [r4, #0]
 8004fce:	f109 0901 	add.w	r9, r9, #1
 8004fd2:	b11b      	cbz	r3, 8004fdc <_scanf_float+0xc0>
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	3101      	adds	r1, #1
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	60a1      	str	r1, [r4, #8]
 8004fdc:	68a3      	ldr	r3, [r4, #8]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	60a3      	str	r3, [r4, #8]
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	6123      	str	r3, [r4, #16]
 8004fe8:	6873      	ldr	r3, [r6, #4]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	6073      	str	r3, [r6, #4]
 8004ff0:	f340 80ac 	ble.w	800514c <_scanf_float+0x230>
 8004ff4:	6833      	ldr	r3, [r6, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	6033      	str	r3, [r6, #0]
 8004ffa:	e7b5      	b.n	8004f68 <_scanf_float+0x4c>
 8004ffc:	2b45      	cmp	r3, #69	; 0x45
 8004ffe:	f000 8085 	beq.w	800510c <_scanf_float+0x1f0>
 8005002:	2b46      	cmp	r3, #70	; 0x46
 8005004:	d06a      	beq.n	80050dc <_scanf_float+0x1c0>
 8005006:	2b41      	cmp	r3, #65	; 0x41
 8005008:	d1c1      	bne.n	8004f8e <_scanf_float+0x72>
 800500a:	2a01      	cmp	r2, #1
 800500c:	d1bf      	bne.n	8004f8e <_scanf_float+0x72>
 800500e:	2202      	movs	r2, #2
 8005010:	e046      	b.n	80050a0 <_scanf_float+0x184>
 8005012:	2b65      	cmp	r3, #101	; 0x65
 8005014:	d07a      	beq.n	800510c <_scanf_float+0x1f0>
 8005016:	d818      	bhi.n	800504a <_scanf_float+0x12e>
 8005018:	2b54      	cmp	r3, #84	; 0x54
 800501a:	d066      	beq.n	80050ea <_scanf_float+0x1ce>
 800501c:	d811      	bhi.n	8005042 <_scanf_float+0x126>
 800501e:	2b4e      	cmp	r3, #78	; 0x4e
 8005020:	d1b5      	bne.n	8004f8e <_scanf_float+0x72>
 8005022:	2a00      	cmp	r2, #0
 8005024:	d146      	bne.n	80050b4 <_scanf_float+0x198>
 8005026:	f1b9 0f00 	cmp.w	r9, #0
 800502a:	d145      	bne.n	80050b8 <_scanf_float+0x19c>
 800502c:	6821      	ldr	r1, [r4, #0]
 800502e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005032:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005036:	d13f      	bne.n	80050b8 <_scanf_float+0x19c>
 8005038:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800503c:	6021      	str	r1, [r4, #0]
 800503e:	2201      	movs	r2, #1
 8005040:	e02e      	b.n	80050a0 <_scanf_float+0x184>
 8005042:	2b59      	cmp	r3, #89	; 0x59
 8005044:	d01e      	beq.n	8005084 <_scanf_float+0x168>
 8005046:	2b61      	cmp	r3, #97	; 0x61
 8005048:	e7de      	b.n	8005008 <_scanf_float+0xec>
 800504a:	2b6e      	cmp	r3, #110	; 0x6e
 800504c:	d0e9      	beq.n	8005022 <_scanf_float+0x106>
 800504e:	d815      	bhi.n	800507c <_scanf_float+0x160>
 8005050:	2b66      	cmp	r3, #102	; 0x66
 8005052:	d043      	beq.n	80050dc <_scanf_float+0x1c0>
 8005054:	2b69      	cmp	r3, #105	; 0x69
 8005056:	d19a      	bne.n	8004f8e <_scanf_float+0x72>
 8005058:	f1bb 0f00 	cmp.w	fp, #0
 800505c:	d138      	bne.n	80050d0 <_scanf_float+0x1b4>
 800505e:	f1b9 0f00 	cmp.w	r9, #0
 8005062:	d197      	bne.n	8004f94 <_scanf_float+0x78>
 8005064:	6821      	ldr	r1, [r4, #0]
 8005066:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800506a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800506e:	d195      	bne.n	8004f9c <_scanf_float+0x80>
 8005070:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005074:	6021      	str	r1, [r4, #0]
 8005076:	f04f 0b01 	mov.w	fp, #1
 800507a:	e011      	b.n	80050a0 <_scanf_float+0x184>
 800507c:	2b74      	cmp	r3, #116	; 0x74
 800507e:	d034      	beq.n	80050ea <_scanf_float+0x1ce>
 8005080:	2b79      	cmp	r3, #121	; 0x79
 8005082:	d184      	bne.n	8004f8e <_scanf_float+0x72>
 8005084:	f1bb 0f07 	cmp.w	fp, #7
 8005088:	d181      	bne.n	8004f8e <_scanf_float+0x72>
 800508a:	f04f 0b08 	mov.w	fp, #8
 800508e:	e007      	b.n	80050a0 <_scanf_float+0x184>
 8005090:	eb12 0f0b 	cmn.w	r2, fp
 8005094:	f47f af7b 	bne.w	8004f8e <_scanf_float+0x72>
 8005098:	6821      	ldr	r1, [r4, #0]
 800509a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800509e:	6021      	str	r1, [r4, #0]
 80050a0:	702b      	strb	r3, [r5, #0]
 80050a2:	3501      	adds	r5, #1
 80050a4:	e79a      	b.n	8004fdc <_scanf_float+0xc0>
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	0608      	lsls	r0, r1, #24
 80050aa:	f57f af70 	bpl.w	8004f8e <_scanf_float+0x72>
 80050ae:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050b2:	e7f4      	b.n	800509e <_scanf_float+0x182>
 80050b4:	2a02      	cmp	r2, #2
 80050b6:	d047      	beq.n	8005148 <_scanf_float+0x22c>
 80050b8:	f1bb 0f01 	cmp.w	fp, #1
 80050bc:	d003      	beq.n	80050c6 <_scanf_float+0x1aa>
 80050be:	f1bb 0f04 	cmp.w	fp, #4
 80050c2:	f47f af64 	bne.w	8004f8e <_scanf_float+0x72>
 80050c6:	f10b 0b01 	add.w	fp, fp, #1
 80050ca:	fa5f fb8b 	uxtb.w	fp, fp
 80050ce:	e7e7      	b.n	80050a0 <_scanf_float+0x184>
 80050d0:	f1bb 0f03 	cmp.w	fp, #3
 80050d4:	d0f7      	beq.n	80050c6 <_scanf_float+0x1aa>
 80050d6:	f1bb 0f05 	cmp.w	fp, #5
 80050da:	e7f2      	b.n	80050c2 <_scanf_float+0x1a6>
 80050dc:	f1bb 0f02 	cmp.w	fp, #2
 80050e0:	f47f af55 	bne.w	8004f8e <_scanf_float+0x72>
 80050e4:	f04f 0b03 	mov.w	fp, #3
 80050e8:	e7da      	b.n	80050a0 <_scanf_float+0x184>
 80050ea:	f1bb 0f06 	cmp.w	fp, #6
 80050ee:	f47f af4e 	bne.w	8004f8e <_scanf_float+0x72>
 80050f2:	f04f 0b07 	mov.w	fp, #7
 80050f6:	e7d3      	b.n	80050a0 <_scanf_float+0x184>
 80050f8:	6821      	ldr	r1, [r4, #0]
 80050fa:	0588      	lsls	r0, r1, #22
 80050fc:	f57f af47 	bpl.w	8004f8e <_scanf_float+0x72>
 8005100:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005104:	6021      	str	r1, [r4, #0]
 8005106:	f8cd 9008 	str.w	r9, [sp, #8]
 800510a:	e7c9      	b.n	80050a0 <_scanf_float+0x184>
 800510c:	6821      	ldr	r1, [r4, #0]
 800510e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005112:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005116:	d006      	beq.n	8005126 <_scanf_float+0x20a>
 8005118:	0548      	lsls	r0, r1, #21
 800511a:	f57f af38 	bpl.w	8004f8e <_scanf_float+0x72>
 800511e:	f1b9 0f00 	cmp.w	r9, #0
 8005122:	f43f af3b 	beq.w	8004f9c <_scanf_float+0x80>
 8005126:	0588      	lsls	r0, r1, #22
 8005128:	bf58      	it	pl
 800512a:	9802      	ldrpl	r0, [sp, #8]
 800512c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005130:	bf58      	it	pl
 8005132:	eba9 0000 	subpl.w	r0, r9, r0
 8005136:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800513a:	bf58      	it	pl
 800513c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005140:	6021      	str	r1, [r4, #0]
 8005142:	f04f 0900 	mov.w	r9, #0
 8005146:	e7ab      	b.n	80050a0 <_scanf_float+0x184>
 8005148:	2203      	movs	r2, #3
 800514a:	e7a9      	b.n	80050a0 <_scanf_float+0x184>
 800514c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005150:	4631      	mov	r1, r6
 8005152:	4638      	mov	r0, r7
 8005154:	9205      	str	r2, [sp, #20]
 8005156:	4798      	blx	r3
 8005158:	9a05      	ldr	r2, [sp, #20]
 800515a:	2800      	cmp	r0, #0
 800515c:	f43f af04 	beq.w	8004f68 <_scanf_float+0x4c>
 8005160:	e715      	b.n	8004f8e <_scanf_float+0x72>
 8005162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005166:	4632      	mov	r2, r6
 8005168:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800516c:	4638      	mov	r0, r7
 800516e:	4798      	blx	r3
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	3b01      	subs	r3, #1
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	e715      	b.n	8004fa4 <_scanf_float+0x88>
 8005178:	f10b 33ff 	add.w	r3, fp, #4294967295
 800517c:	2b06      	cmp	r3, #6
 800517e:	d80a      	bhi.n	8005196 <_scanf_float+0x27a>
 8005180:	f1bb 0f02 	cmp.w	fp, #2
 8005184:	d967      	bls.n	8005256 <_scanf_float+0x33a>
 8005186:	f1ab 0b03 	sub.w	fp, fp, #3
 800518a:	fa5f fb8b 	uxtb.w	fp, fp
 800518e:	eba5 0b0b 	sub.w	fp, r5, fp
 8005192:	455d      	cmp	r5, fp
 8005194:	d14a      	bne.n	800522c <_scanf_float+0x310>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	05da      	lsls	r2, r3, #23
 800519a:	d51f      	bpl.n	80051dc <_scanf_float+0x2c0>
 800519c:	055b      	lsls	r3, r3, #21
 800519e:	d467      	bmi.n	8005270 <_scanf_float+0x354>
 80051a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	2965      	cmp	r1, #101	; 0x65
 80051a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80051ac:	f105 3bff 	add.w	fp, r5, #4294967295
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	d00d      	beq.n	80051d0 <_scanf_float+0x2b4>
 80051b4:	2945      	cmp	r1, #69	; 0x45
 80051b6:	d00b      	beq.n	80051d0 <_scanf_float+0x2b4>
 80051b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051bc:	4632      	mov	r2, r6
 80051be:	4638      	mov	r0, r7
 80051c0:	4798      	blx	r3
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	f1a5 0b02 	sub.w	fp, r5, #2
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051d4:	4632      	mov	r2, r6
 80051d6:	4638      	mov	r0, r7
 80051d8:	4798      	blx	r3
 80051da:	465d      	mov	r5, fp
 80051dc:	6826      	ldr	r6, [r4, #0]
 80051de:	f016 0610 	ands.w	r6, r6, #16
 80051e2:	d176      	bne.n	80052d2 <_scanf_float+0x3b6>
 80051e4:	702e      	strb	r6, [r5, #0]
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f0:	d141      	bne.n	8005276 <_scanf_float+0x35a>
 80051f2:	9b02      	ldr	r3, [sp, #8]
 80051f4:	eba9 0303 	sub.w	r3, r9, r3
 80051f8:	425a      	negs	r2, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d148      	bne.n	8005290 <_scanf_float+0x374>
 80051fe:	4641      	mov	r1, r8
 8005200:	2200      	movs	r2, #0
 8005202:	4638      	mov	r0, r7
 8005204:	f000 fec8 	bl	8005f98 <_strtod_r>
 8005208:	6825      	ldr	r5, [r4, #0]
 800520a:	4680      	mov	r8, r0
 800520c:	f015 0f02 	tst.w	r5, #2
 8005210:	4689      	mov	r9, r1
 8005212:	f8da 3000 	ldr.w	r3, [sl]
 8005216:	d046      	beq.n	80052a6 <_scanf_float+0x38a>
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	f8ca 2000 	str.w	r2, [sl]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	e9c3 8900 	strd	r8, r9, [r3]
 8005224:	68e3      	ldr	r3, [r4, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60e3      	str	r3, [r4, #12]
 800522a:	e6bf      	b.n	8004fac <_scanf_float+0x90>
 800522c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005230:	4632      	mov	r2, r6
 8005232:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005236:	4638      	mov	r0, r7
 8005238:	4798      	blx	r3
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	3b01      	subs	r3, #1
 800523e:	6123      	str	r3, [r4, #16]
 8005240:	e7a7      	b.n	8005192 <_scanf_float+0x276>
 8005242:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005246:	4632      	mov	r2, r6
 8005248:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800524c:	4638      	mov	r0, r7
 800524e:	4798      	blx	r3
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	3b01      	subs	r3, #1
 8005254:	6123      	str	r3, [r4, #16]
 8005256:	4545      	cmp	r5, r8
 8005258:	d8f3      	bhi.n	8005242 <_scanf_float+0x326>
 800525a:	e6a6      	b.n	8004faa <_scanf_float+0x8e>
 800525c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005260:	4632      	mov	r2, r6
 8005262:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005266:	4638      	mov	r0, r7
 8005268:	4798      	blx	r3
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	3b01      	subs	r3, #1
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	4545      	cmp	r5, r8
 8005272:	d8f3      	bhi.n	800525c <_scanf_float+0x340>
 8005274:	e699      	b.n	8004faa <_scanf_float+0x8e>
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0c0      	beq.n	80051fe <_scanf_float+0x2e2>
 800527c:	9904      	ldr	r1, [sp, #16]
 800527e:	230a      	movs	r3, #10
 8005280:	4632      	mov	r2, r6
 8005282:	3101      	adds	r1, #1
 8005284:	4638      	mov	r0, r7
 8005286:	f000 ff13 	bl	80060b0 <_strtol_r>
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	9d04      	ldr	r5, [sp, #16]
 800528e:	1ac2      	subs	r2, r0, r3
 8005290:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005294:	429d      	cmp	r5, r3
 8005296:	bf28      	it	cs
 8005298:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800529c:	490e      	ldr	r1, [pc, #56]	; (80052d8 <_scanf_float+0x3bc>)
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 f838 	bl	8005314 <siprintf>
 80052a4:	e7ab      	b.n	80051fe <_scanf_float+0x2e2>
 80052a6:	1d1f      	adds	r7, r3, #4
 80052a8:	f015 0504 	ands.w	r5, r5, #4
 80052ac:	f8ca 7000 	str.w	r7, [sl]
 80052b0:	d1b5      	bne.n	800521e <_scanf_float+0x302>
 80052b2:	681f      	ldr	r7, [r3, #0]
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	f7fb fba8 	bl	8000a0c <__aeabi_dcmpun>
 80052bc:	b120      	cbz	r0, 80052c8 <_scanf_float+0x3ac>
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f824 	bl	800530c <nanf>
 80052c4:	6038      	str	r0, [r7, #0]
 80052c6:	e7ad      	b.n	8005224 <_scanf_float+0x308>
 80052c8:	4640      	mov	r0, r8
 80052ca:	4649      	mov	r1, r9
 80052cc:	f7fb fbfc 	bl	8000ac8 <__aeabi_d2f>
 80052d0:	e7f8      	b.n	80052c4 <_scanf_float+0x3a8>
 80052d2:	2600      	movs	r6, #0
 80052d4:	e66a      	b.n	8004fac <_scanf_float+0x90>
 80052d6:	bf00      	nop
 80052d8:	08008ae0 	.word	0x08008ae0

080052dc <iprintf>:
 80052dc:	b40f      	push	{r0, r1, r2, r3}
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <iprintf+0x2c>)
 80052e0:	b513      	push	{r0, r1, r4, lr}
 80052e2:	681c      	ldr	r4, [r3, #0]
 80052e4:	b124      	cbz	r4, 80052f0 <iprintf+0x14>
 80052e6:	69a3      	ldr	r3, [r4, #24]
 80052e8:	b913      	cbnz	r3, 80052f0 <iprintf+0x14>
 80052ea:	4620      	mov	r0, r4
 80052ec:	f001 fd74 	bl	8006dd8 <__sinit>
 80052f0:	ab05      	add	r3, sp, #20
 80052f2:	9a04      	ldr	r2, [sp, #16]
 80052f4:	68a1      	ldr	r1, [r4, #8]
 80052f6:	4620      	mov	r0, r4
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	f002 ff8d 	bl	8008218 <_vfiprintf_r>
 80052fe:	b002      	add	sp, #8
 8005300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr
 8005308:	2000000c 	.word	0x2000000c

0800530c <nanf>:
 800530c:	4800      	ldr	r0, [pc, #0]	; (8005310 <nanf+0x4>)
 800530e:	4770      	bx	lr
 8005310:	7fc00000 	.word	0x7fc00000

08005314 <siprintf>:
 8005314:	b40e      	push	{r1, r2, r3}
 8005316:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800531a:	b500      	push	{lr}
 800531c:	b09c      	sub	sp, #112	; 0x70
 800531e:	ab1d      	add	r3, sp, #116	; 0x74
 8005320:	9002      	str	r0, [sp, #8]
 8005322:	9006      	str	r0, [sp, #24]
 8005324:	9107      	str	r1, [sp, #28]
 8005326:	9104      	str	r1, [sp, #16]
 8005328:	4808      	ldr	r0, [pc, #32]	; (800534c <siprintf+0x38>)
 800532a:	4909      	ldr	r1, [pc, #36]	; (8005350 <siprintf+0x3c>)
 800532c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005330:	9105      	str	r1, [sp, #20]
 8005332:	6800      	ldr	r0, [r0, #0]
 8005334:	a902      	add	r1, sp, #8
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	f002 fe4e 	bl	8007fd8 <_svfiprintf_r>
 800533c:	2200      	movs	r2, #0
 800533e:	9b02      	ldr	r3, [sp, #8]
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	b01c      	add	sp, #112	; 0x70
 8005344:	f85d eb04 	ldr.w	lr, [sp], #4
 8005348:	b003      	add	sp, #12
 800534a:	4770      	bx	lr
 800534c:	2000000c 	.word	0x2000000c
 8005350:	ffff0208 	.word	0xffff0208

08005354 <sulp>:
 8005354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	460f      	mov	r7, r1
 800535a:	4690      	mov	r8, r2
 800535c:	f002 fc00 	bl	8007b60 <__ulp>
 8005360:	4604      	mov	r4, r0
 8005362:	460d      	mov	r5, r1
 8005364:	f1b8 0f00 	cmp.w	r8, #0
 8005368:	d011      	beq.n	800538e <sulp+0x3a>
 800536a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800536e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005372:	2b00      	cmp	r3, #0
 8005374:	dd0b      	ble.n	800538e <sulp+0x3a>
 8005376:	2400      	movs	r4, #0
 8005378:	051b      	lsls	r3, r3, #20
 800537a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800537e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005382:	4622      	mov	r2, r4
 8005384:	462b      	mov	r3, r5
 8005386:	f7fb f8a7 	bl	80004d8 <__aeabi_dmul>
 800538a:	4604      	mov	r4, r0
 800538c:	460d      	mov	r5, r1
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005398 <_strtod_l>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	461f      	mov	r7, r3
 800539e:	2300      	movs	r3, #0
 80053a0:	b0a1      	sub	sp, #132	; 0x84
 80053a2:	4683      	mov	fp, r0
 80053a4:	4638      	mov	r0, r7
 80053a6:	460e      	mov	r6, r1
 80053a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80053aa:	931c      	str	r3, [sp, #112]	; 0x70
 80053ac:	f002 f8c9 	bl	8007542 <__localeconv_l>
 80053b0:	4680      	mov	r8, r0
 80053b2:	6800      	ldr	r0, [r0, #0]
 80053b4:	f7fa fecc 	bl	8000150 <strlen>
 80053b8:	f04f 0900 	mov.w	r9, #0
 80053bc:	4604      	mov	r4, r0
 80053be:	f04f 0a00 	mov.w	sl, #0
 80053c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80053c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	2a0d      	cmp	r2, #13
 80053ca:	d832      	bhi.n	8005432 <_strtod_l+0x9a>
 80053cc:	2a09      	cmp	r2, #9
 80053ce:	d236      	bcs.n	800543e <_strtod_l+0xa6>
 80053d0:	2a00      	cmp	r2, #0
 80053d2:	d03e      	beq.n	8005452 <_strtod_l+0xba>
 80053d4:	2300      	movs	r3, #0
 80053d6:	930d      	str	r3, [sp, #52]	; 0x34
 80053d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80053da:	782b      	ldrb	r3, [r5, #0]
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	f040 80ac 	bne.w	800553a <_strtod_l+0x1a2>
 80053e2:	786b      	ldrb	r3, [r5, #1]
 80053e4:	2b58      	cmp	r3, #88	; 0x58
 80053e6:	d001      	beq.n	80053ec <_strtod_l+0x54>
 80053e8:	2b78      	cmp	r3, #120	; 0x78
 80053ea:	d167      	bne.n	80054bc <_strtod_l+0x124>
 80053ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ee:	9702      	str	r7, [sp, #8]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	ab1c      	add	r3, sp, #112	; 0x70
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	4a89      	ldr	r2, [pc, #548]	; (800561c <_strtod_l+0x284>)
 80053f8:	ab1d      	add	r3, sp, #116	; 0x74
 80053fa:	a91b      	add	r1, sp, #108	; 0x6c
 80053fc:	4658      	mov	r0, fp
 80053fe:	f001 fdc5 	bl	8006f8c <__gethex>
 8005402:	f010 0407 	ands.w	r4, r0, #7
 8005406:	4606      	mov	r6, r0
 8005408:	d005      	beq.n	8005416 <_strtod_l+0x7e>
 800540a:	2c06      	cmp	r4, #6
 800540c:	d12b      	bne.n	8005466 <_strtod_l+0xce>
 800540e:	2300      	movs	r3, #0
 8005410:	3501      	adds	r5, #1
 8005412:	951b      	str	r5, [sp, #108]	; 0x6c
 8005414:	930d      	str	r3, [sp, #52]	; 0x34
 8005416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005418:	2b00      	cmp	r3, #0
 800541a:	f040 85a6 	bne.w	8005f6a <_strtod_l+0xbd2>
 800541e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005420:	b1e3      	cbz	r3, 800545c <_strtod_l+0xc4>
 8005422:	464a      	mov	r2, r9
 8005424:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	b021      	add	sp, #132	; 0x84
 800542e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005432:	2a2b      	cmp	r2, #43	; 0x2b
 8005434:	d015      	beq.n	8005462 <_strtod_l+0xca>
 8005436:	2a2d      	cmp	r2, #45	; 0x2d
 8005438:	d004      	beq.n	8005444 <_strtod_l+0xac>
 800543a:	2a20      	cmp	r2, #32
 800543c:	d1ca      	bne.n	80053d4 <_strtod_l+0x3c>
 800543e:	3301      	adds	r3, #1
 8005440:	931b      	str	r3, [sp, #108]	; 0x6c
 8005442:	e7bf      	b.n	80053c4 <_strtod_l+0x2c>
 8005444:	2201      	movs	r2, #1
 8005446:	920d      	str	r2, [sp, #52]	; 0x34
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	921b      	str	r2, [sp, #108]	; 0x6c
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1c2      	bne.n	80053d8 <_strtod_l+0x40>
 8005452:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005454:	961b      	str	r6, [sp, #108]	; 0x6c
 8005456:	2b00      	cmp	r3, #0
 8005458:	f040 8585 	bne.w	8005f66 <_strtod_l+0xbce>
 800545c:	464a      	mov	r2, r9
 800545e:	4653      	mov	r3, sl
 8005460:	e7e2      	b.n	8005428 <_strtod_l+0x90>
 8005462:	2200      	movs	r2, #0
 8005464:	e7ef      	b.n	8005446 <_strtod_l+0xae>
 8005466:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005468:	b13a      	cbz	r2, 800547a <_strtod_l+0xe2>
 800546a:	2135      	movs	r1, #53	; 0x35
 800546c:	a81e      	add	r0, sp, #120	; 0x78
 800546e:	f002 fc6a 	bl	8007d46 <__copybits>
 8005472:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005474:	4658      	mov	r0, fp
 8005476:	f002 f8dc 	bl	8007632 <_Bfree>
 800547a:	3c01      	subs	r4, #1
 800547c:	2c04      	cmp	r4, #4
 800547e:	d806      	bhi.n	800548e <_strtod_l+0xf6>
 8005480:	e8df f004 	tbb	[pc, r4]
 8005484:	1714030a 	.word	0x1714030a
 8005488:	0a          	.byte	0x0a
 8005489:	00          	.byte	0x00
 800548a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800548e:	0731      	lsls	r1, r6, #28
 8005490:	d5c1      	bpl.n	8005416 <_strtod_l+0x7e>
 8005492:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005496:	e7be      	b.n	8005416 <_strtod_l+0x7e>
 8005498:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800549a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800549e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80054a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054a6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80054aa:	e7f0      	b.n	800548e <_strtod_l+0xf6>
 80054ac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005620 <_strtod_l+0x288>
 80054b0:	e7ed      	b.n	800548e <_strtod_l+0xf6>
 80054b2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80054b6:	f04f 39ff 	mov.w	r9, #4294967295
 80054ba:	e7e8      	b.n	800548e <_strtod_l+0xf6>
 80054bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d0f9      	beq.n	80054bc <_strtod_l+0x124>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0a4      	beq.n	8005416 <_strtod_l+0x7e>
 80054cc:	2301      	movs	r3, #1
 80054ce:	2500      	movs	r5, #0
 80054d0:	220a      	movs	r2, #10
 80054d2:	9307      	str	r3, [sp, #28]
 80054d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054d6:	9506      	str	r5, [sp, #24]
 80054d8:	9308      	str	r3, [sp, #32]
 80054da:	9504      	str	r5, [sp, #16]
 80054dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80054de:	7807      	ldrb	r7, [r0, #0]
 80054e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80054e4:	b2d9      	uxtb	r1, r3
 80054e6:	2909      	cmp	r1, #9
 80054e8:	d929      	bls.n	800553e <_strtod_l+0x1a6>
 80054ea:	4622      	mov	r2, r4
 80054ec:	f8d8 1000 	ldr.w	r1, [r8]
 80054f0:	f002 fffb 	bl	80084ea <strncmp>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d031      	beq.n	800555c <_strtod_l+0x1c4>
 80054f8:	2000      	movs	r0, #0
 80054fa:	463b      	mov	r3, r7
 80054fc:	4602      	mov	r2, r0
 80054fe:	9c04      	ldr	r4, [sp, #16]
 8005500:	9005      	str	r0, [sp, #20]
 8005502:	2b65      	cmp	r3, #101	; 0x65
 8005504:	d001      	beq.n	800550a <_strtod_l+0x172>
 8005506:	2b45      	cmp	r3, #69	; 0x45
 8005508:	d114      	bne.n	8005534 <_strtod_l+0x19c>
 800550a:	b924      	cbnz	r4, 8005516 <_strtod_l+0x17e>
 800550c:	b910      	cbnz	r0, 8005514 <_strtod_l+0x17c>
 800550e:	9b07      	ldr	r3, [sp, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d09e      	beq.n	8005452 <_strtod_l+0xba>
 8005514:	2400      	movs	r4, #0
 8005516:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005518:	1c73      	adds	r3, r6, #1
 800551a:	931b      	str	r3, [sp, #108]	; 0x6c
 800551c:	7873      	ldrb	r3, [r6, #1]
 800551e:	2b2b      	cmp	r3, #43	; 0x2b
 8005520:	d078      	beq.n	8005614 <_strtod_l+0x27c>
 8005522:	2b2d      	cmp	r3, #45	; 0x2d
 8005524:	d070      	beq.n	8005608 <_strtod_l+0x270>
 8005526:	f04f 0c00 	mov.w	ip, #0
 800552a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800552e:	2f09      	cmp	r7, #9
 8005530:	d97c      	bls.n	800562c <_strtod_l+0x294>
 8005532:	961b      	str	r6, [sp, #108]	; 0x6c
 8005534:	f04f 0e00 	mov.w	lr, #0
 8005538:	e09a      	b.n	8005670 <_strtod_l+0x2d8>
 800553a:	2300      	movs	r3, #0
 800553c:	e7c7      	b.n	80054ce <_strtod_l+0x136>
 800553e:	9904      	ldr	r1, [sp, #16]
 8005540:	3001      	adds	r0, #1
 8005542:	2908      	cmp	r1, #8
 8005544:	bfd7      	itett	le
 8005546:	9906      	ldrle	r1, [sp, #24]
 8005548:	fb02 3505 	mlagt	r5, r2, r5, r3
 800554c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005550:	9306      	strle	r3, [sp, #24]
 8005552:	9b04      	ldr	r3, [sp, #16]
 8005554:	901b      	str	r0, [sp, #108]	; 0x6c
 8005556:	3301      	adds	r3, #1
 8005558:	9304      	str	r3, [sp, #16]
 800555a:	e7bf      	b.n	80054dc <_strtod_l+0x144>
 800555c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800555e:	191a      	adds	r2, r3, r4
 8005560:	921b      	str	r2, [sp, #108]	; 0x6c
 8005562:	9a04      	ldr	r2, [sp, #16]
 8005564:	5d1b      	ldrb	r3, [r3, r4]
 8005566:	2a00      	cmp	r2, #0
 8005568:	d037      	beq.n	80055da <_strtod_l+0x242>
 800556a:	4602      	mov	r2, r0
 800556c:	9c04      	ldr	r4, [sp, #16]
 800556e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005572:	2909      	cmp	r1, #9
 8005574:	d913      	bls.n	800559e <_strtod_l+0x206>
 8005576:	2101      	movs	r1, #1
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	e7c2      	b.n	8005502 <_strtod_l+0x16a>
 800557c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800557e:	3001      	adds	r0, #1
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	921b      	str	r2, [sp, #108]	; 0x6c
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b30      	cmp	r3, #48	; 0x30
 8005588:	d0f8      	beq.n	800557c <_strtod_l+0x1e4>
 800558a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800558e:	2a08      	cmp	r2, #8
 8005590:	f200 84f0 	bhi.w	8005f74 <_strtod_l+0xbdc>
 8005594:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005596:	9208      	str	r2, [sp, #32]
 8005598:	4602      	mov	r2, r0
 800559a:	2000      	movs	r0, #0
 800559c:	4604      	mov	r4, r0
 800559e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80055a2:	f100 0101 	add.w	r1, r0, #1
 80055a6:	d012      	beq.n	80055ce <_strtod_l+0x236>
 80055a8:	440a      	add	r2, r1
 80055aa:	270a      	movs	r7, #10
 80055ac:	4621      	mov	r1, r4
 80055ae:	eb00 0c04 	add.w	ip, r0, r4
 80055b2:	458c      	cmp	ip, r1
 80055b4:	d113      	bne.n	80055de <_strtod_l+0x246>
 80055b6:	1821      	adds	r1, r4, r0
 80055b8:	2908      	cmp	r1, #8
 80055ba:	f104 0401 	add.w	r4, r4, #1
 80055be:	4404      	add	r4, r0
 80055c0:	dc19      	bgt.n	80055f6 <_strtod_l+0x25e>
 80055c2:	210a      	movs	r1, #10
 80055c4:	9b06      	ldr	r3, [sp, #24]
 80055c6:	fb01 e303 	mla	r3, r1, r3, lr
 80055ca:	9306      	str	r3, [sp, #24]
 80055cc:	2100      	movs	r1, #0
 80055ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055d0:	1c58      	adds	r0, r3, #1
 80055d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	4608      	mov	r0, r1
 80055d8:	e7c9      	b.n	800556e <_strtod_l+0x1d6>
 80055da:	9804      	ldr	r0, [sp, #16]
 80055dc:	e7d3      	b.n	8005586 <_strtod_l+0x1ee>
 80055de:	2908      	cmp	r1, #8
 80055e0:	f101 0101 	add.w	r1, r1, #1
 80055e4:	dc03      	bgt.n	80055ee <_strtod_l+0x256>
 80055e6:	9b06      	ldr	r3, [sp, #24]
 80055e8:	437b      	muls	r3, r7
 80055ea:	9306      	str	r3, [sp, #24]
 80055ec:	e7e1      	b.n	80055b2 <_strtod_l+0x21a>
 80055ee:	2910      	cmp	r1, #16
 80055f0:	bfd8      	it	le
 80055f2:	437d      	mulle	r5, r7
 80055f4:	e7dd      	b.n	80055b2 <_strtod_l+0x21a>
 80055f6:	2c10      	cmp	r4, #16
 80055f8:	bfdc      	itt	le
 80055fa:	210a      	movle	r1, #10
 80055fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8005600:	e7e4      	b.n	80055cc <_strtod_l+0x234>
 8005602:	2301      	movs	r3, #1
 8005604:	9305      	str	r3, [sp, #20]
 8005606:	e781      	b.n	800550c <_strtod_l+0x174>
 8005608:	f04f 0c01 	mov.w	ip, #1
 800560c:	1cb3      	adds	r3, r6, #2
 800560e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005610:	78b3      	ldrb	r3, [r6, #2]
 8005612:	e78a      	b.n	800552a <_strtod_l+0x192>
 8005614:	f04f 0c00 	mov.w	ip, #0
 8005618:	e7f8      	b.n	800560c <_strtod_l+0x274>
 800561a:	bf00      	nop
 800561c:	08008ae8 	.word	0x08008ae8
 8005620:	7ff00000 	.word	0x7ff00000
 8005624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005626:	1c5f      	adds	r7, r3, #1
 8005628:	971b      	str	r7, [sp, #108]	; 0x6c
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d0f9      	beq.n	8005624 <_strtod_l+0x28c>
 8005630:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005634:	2f08      	cmp	r7, #8
 8005636:	f63f af7d 	bhi.w	8005534 <_strtod_l+0x19c>
 800563a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800563e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005640:	9309      	str	r3, [sp, #36]	; 0x24
 8005642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005644:	1c5f      	adds	r7, r3, #1
 8005646:	971b      	str	r7, [sp, #108]	; 0x6c
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800564e:	f1b8 0f09 	cmp.w	r8, #9
 8005652:	d937      	bls.n	80056c4 <_strtod_l+0x32c>
 8005654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005656:	1a7f      	subs	r7, r7, r1
 8005658:	2f08      	cmp	r7, #8
 800565a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800565e:	dc37      	bgt.n	80056d0 <_strtod_l+0x338>
 8005660:	45be      	cmp	lr, r7
 8005662:	bfa8      	it	ge
 8005664:	46be      	movge	lr, r7
 8005666:	f1bc 0f00 	cmp.w	ip, #0
 800566a:	d001      	beq.n	8005670 <_strtod_l+0x2d8>
 800566c:	f1ce 0e00 	rsb	lr, lr, #0
 8005670:	2c00      	cmp	r4, #0
 8005672:	d151      	bne.n	8005718 <_strtod_l+0x380>
 8005674:	2800      	cmp	r0, #0
 8005676:	f47f aece 	bne.w	8005416 <_strtod_l+0x7e>
 800567a:	9a07      	ldr	r2, [sp, #28]
 800567c:	2a00      	cmp	r2, #0
 800567e:	f47f aeca 	bne.w	8005416 <_strtod_l+0x7e>
 8005682:	9a05      	ldr	r2, [sp, #20]
 8005684:	2a00      	cmp	r2, #0
 8005686:	f47f aee4 	bne.w	8005452 <_strtod_l+0xba>
 800568a:	2b4e      	cmp	r3, #78	; 0x4e
 800568c:	d027      	beq.n	80056de <_strtod_l+0x346>
 800568e:	dc21      	bgt.n	80056d4 <_strtod_l+0x33c>
 8005690:	2b49      	cmp	r3, #73	; 0x49
 8005692:	f47f aede 	bne.w	8005452 <_strtod_l+0xba>
 8005696:	49a4      	ldr	r1, [pc, #656]	; (8005928 <_strtod_l+0x590>)
 8005698:	a81b      	add	r0, sp, #108	; 0x6c
 800569a:	f001 feab 	bl	80073f4 <__match>
 800569e:	2800      	cmp	r0, #0
 80056a0:	f43f aed7 	beq.w	8005452 <_strtod_l+0xba>
 80056a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056a6:	49a1      	ldr	r1, [pc, #644]	; (800592c <_strtod_l+0x594>)
 80056a8:	3b01      	subs	r3, #1
 80056aa:	a81b      	add	r0, sp, #108	; 0x6c
 80056ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80056ae:	f001 fea1 	bl	80073f4 <__match>
 80056b2:	b910      	cbnz	r0, 80056ba <_strtod_l+0x322>
 80056b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056b6:	3301      	adds	r3, #1
 80056b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80056ba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005940 <_strtod_l+0x5a8>
 80056be:	f04f 0900 	mov.w	r9, #0
 80056c2:	e6a8      	b.n	8005416 <_strtod_l+0x7e>
 80056c4:	210a      	movs	r1, #10
 80056c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80056ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80056ce:	e7b8      	b.n	8005642 <_strtod_l+0x2aa>
 80056d0:	46be      	mov	lr, r7
 80056d2:	e7c8      	b.n	8005666 <_strtod_l+0x2ce>
 80056d4:	2b69      	cmp	r3, #105	; 0x69
 80056d6:	d0de      	beq.n	8005696 <_strtod_l+0x2fe>
 80056d8:	2b6e      	cmp	r3, #110	; 0x6e
 80056da:	f47f aeba 	bne.w	8005452 <_strtod_l+0xba>
 80056de:	4994      	ldr	r1, [pc, #592]	; (8005930 <_strtod_l+0x598>)
 80056e0:	a81b      	add	r0, sp, #108	; 0x6c
 80056e2:	f001 fe87 	bl	80073f4 <__match>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f43f aeb3 	beq.w	8005452 <_strtod_l+0xba>
 80056ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b28      	cmp	r3, #40	; 0x28
 80056f2:	d10e      	bne.n	8005712 <_strtod_l+0x37a>
 80056f4:	aa1e      	add	r2, sp, #120	; 0x78
 80056f6:	498f      	ldr	r1, [pc, #572]	; (8005934 <_strtod_l+0x59c>)
 80056f8:	a81b      	add	r0, sp, #108	; 0x6c
 80056fa:	f001 fe8f 	bl	800741c <__hexnan>
 80056fe:	2805      	cmp	r0, #5
 8005700:	d107      	bne.n	8005712 <_strtod_l+0x37a>
 8005702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005704:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005708:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800570c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005710:	e681      	b.n	8005416 <_strtod_l+0x7e>
 8005712:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005948 <_strtod_l+0x5b0>
 8005716:	e7d2      	b.n	80056be <_strtod_l+0x326>
 8005718:	ebae 0302 	sub.w	r3, lr, r2
 800571c:	9307      	str	r3, [sp, #28]
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	9806      	ldr	r0, [sp, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf08      	it	eq
 8005726:	4623      	moveq	r3, r4
 8005728:	2c10      	cmp	r4, #16
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	46a0      	mov	r8, r4
 800572e:	bfa8      	it	ge
 8005730:	f04f 0810 	movge.w	r8, #16
 8005734:	f7fa fe56 	bl	80003e4 <__aeabi_ui2d>
 8005738:	2c09      	cmp	r4, #9
 800573a:	4681      	mov	r9, r0
 800573c:	468a      	mov	sl, r1
 800573e:	dc13      	bgt.n	8005768 <_strtod_l+0x3d0>
 8005740:	9b07      	ldr	r3, [sp, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f43f ae67 	beq.w	8005416 <_strtod_l+0x7e>
 8005748:	9b07      	ldr	r3, [sp, #28]
 800574a:	dd7e      	ble.n	800584a <_strtod_l+0x4b2>
 800574c:	2b16      	cmp	r3, #22
 800574e:	dc65      	bgt.n	800581c <_strtod_l+0x484>
 8005750:	4a79      	ldr	r2, [pc, #484]	; (8005938 <_strtod_l+0x5a0>)
 8005752:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005756:	464a      	mov	r2, r9
 8005758:	e9de 0100 	ldrd	r0, r1, [lr]
 800575c:	4653      	mov	r3, sl
 800575e:	f7fa febb 	bl	80004d8 <__aeabi_dmul>
 8005762:	4681      	mov	r9, r0
 8005764:	468a      	mov	sl, r1
 8005766:	e656      	b.n	8005416 <_strtod_l+0x7e>
 8005768:	4b73      	ldr	r3, [pc, #460]	; (8005938 <_strtod_l+0x5a0>)
 800576a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800576e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005772:	f7fa feb1 	bl	80004d8 <__aeabi_dmul>
 8005776:	4606      	mov	r6, r0
 8005778:	4628      	mov	r0, r5
 800577a:	460f      	mov	r7, r1
 800577c:	f7fa fe32 	bl	80003e4 <__aeabi_ui2d>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	f7fa fcf0 	bl	800016c <__adddf3>
 800578c:	2c0f      	cmp	r4, #15
 800578e:	4681      	mov	r9, r0
 8005790:	468a      	mov	sl, r1
 8005792:	ddd5      	ble.n	8005740 <_strtod_l+0x3a8>
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	eba4 0808 	sub.w	r8, r4, r8
 800579a:	4498      	add	r8, r3
 800579c:	f1b8 0f00 	cmp.w	r8, #0
 80057a0:	f340 809a 	ble.w	80058d8 <_strtod_l+0x540>
 80057a4:	f018 030f 	ands.w	r3, r8, #15
 80057a8:	d00a      	beq.n	80057c0 <_strtod_l+0x428>
 80057aa:	4963      	ldr	r1, [pc, #396]	; (8005938 <_strtod_l+0x5a0>)
 80057ac:	464a      	mov	r2, r9
 80057ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80057b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057b6:	4653      	mov	r3, sl
 80057b8:	f7fa fe8e 	bl	80004d8 <__aeabi_dmul>
 80057bc:	4681      	mov	r9, r0
 80057be:	468a      	mov	sl, r1
 80057c0:	f038 080f 	bics.w	r8, r8, #15
 80057c4:	d077      	beq.n	80058b6 <_strtod_l+0x51e>
 80057c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80057ca:	dd4b      	ble.n	8005864 <_strtod_l+0x4cc>
 80057cc:	f04f 0800 	mov.w	r8, #0
 80057d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80057d4:	f8cd 8020 	str.w	r8, [sp, #32]
 80057d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80057dc:	2322      	movs	r3, #34	; 0x22
 80057de:	f04f 0900 	mov.w	r9, #0
 80057e2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005940 <_strtod_l+0x5a8>
 80057e6:	f8cb 3000 	str.w	r3, [fp]
 80057ea:	9b08      	ldr	r3, [sp, #32]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f43f ae12 	beq.w	8005416 <_strtod_l+0x7e>
 80057f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057f4:	4658      	mov	r0, fp
 80057f6:	f001 ff1c 	bl	8007632 <_Bfree>
 80057fa:	9906      	ldr	r1, [sp, #24]
 80057fc:	4658      	mov	r0, fp
 80057fe:	f001 ff18 	bl	8007632 <_Bfree>
 8005802:	9904      	ldr	r1, [sp, #16]
 8005804:	4658      	mov	r0, fp
 8005806:	f001 ff14 	bl	8007632 <_Bfree>
 800580a:	9908      	ldr	r1, [sp, #32]
 800580c:	4658      	mov	r0, fp
 800580e:	f001 ff10 	bl	8007632 <_Bfree>
 8005812:	4641      	mov	r1, r8
 8005814:	4658      	mov	r0, fp
 8005816:	f001 ff0c 	bl	8007632 <_Bfree>
 800581a:	e5fc      	b.n	8005416 <_strtod_l+0x7e>
 800581c:	9a07      	ldr	r2, [sp, #28]
 800581e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005822:	4293      	cmp	r3, r2
 8005824:	dbb6      	blt.n	8005794 <_strtod_l+0x3fc>
 8005826:	4d44      	ldr	r5, [pc, #272]	; (8005938 <_strtod_l+0x5a0>)
 8005828:	f1c4 040f 	rsb	r4, r4, #15
 800582c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005830:	464a      	mov	r2, r9
 8005832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005836:	4653      	mov	r3, sl
 8005838:	f7fa fe4e 	bl	80004d8 <__aeabi_dmul>
 800583c:	9b07      	ldr	r3, [sp, #28]
 800583e:	1b1c      	subs	r4, r3, r4
 8005840:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005848:	e789      	b.n	800575e <_strtod_l+0x3c6>
 800584a:	f113 0f16 	cmn.w	r3, #22
 800584e:	dba1      	blt.n	8005794 <_strtod_l+0x3fc>
 8005850:	4a39      	ldr	r2, [pc, #228]	; (8005938 <_strtod_l+0x5a0>)
 8005852:	4648      	mov	r0, r9
 8005854:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005858:	e9d2 2300 	ldrd	r2, r3, [r2]
 800585c:	4651      	mov	r1, sl
 800585e:	f7fa ff65 	bl	800072c <__aeabi_ddiv>
 8005862:	e77e      	b.n	8005762 <_strtod_l+0x3ca>
 8005864:	2300      	movs	r3, #0
 8005866:	4648      	mov	r0, r9
 8005868:	4651      	mov	r1, sl
 800586a:	461d      	mov	r5, r3
 800586c:	4e33      	ldr	r6, [pc, #204]	; (800593c <_strtod_l+0x5a4>)
 800586e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005872:	f1b8 0f01 	cmp.w	r8, #1
 8005876:	dc21      	bgt.n	80058bc <_strtod_l+0x524>
 8005878:	b10b      	cbz	r3, 800587e <_strtod_l+0x4e6>
 800587a:	4681      	mov	r9, r0
 800587c:	468a      	mov	sl, r1
 800587e:	4b2f      	ldr	r3, [pc, #188]	; (800593c <_strtod_l+0x5a4>)
 8005880:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005884:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005888:	464a      	mov	r2, r9
 800588a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800588e:	4653      	mov	r3, sl
 8005890:	f7fa fe22 	bl	80004d8 <__aeabi_dmul>
 8005894:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <_strtod_l+0x5a8>)
 8005896:	460a      	mov	r2, r1
 8005898:	400b      	ands	r3, r1
 800589a:	492a      	ldr	r1, [pc, #168]	; (8005944 <_strtod_l+0x5ac>)
 800589c:	4681      	mov	r9, r0
 800589e:	428b      	cmp	r3, r1
 80058a0:	d894      	bhi.n	80057cc <_strtod_l+0x434>
 80058a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80058a6:	428b      	cmp	r3, r1
 80058a8:	bf86      	itte	hi
 80058aa:	f04f 39ff 	movhi.w	r9, #4294967295
 80058ae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800594c <_strtod_l+0x5b4>
 80058b2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80058b6:	2300      	movs	r3, #0
 80058b8:	9305      	str	r3, [sp, #20]
 80058ba:	e07b      	b.n	80059b4 <_strtod_l+0x61c>
 80058bc:	f018 0f01 	tst.w	r8, #1
 80058c0:	d006      	beq.n	80058d0 <_strtod_l+0x538>
 80058c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa fe05 	bl	80004d8 <__aeabi_dmul>
 80058ce:	2301      	movs	r3, #1
 80058d0:	3501      	adds	r5, #1
 80058d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058d6:	e7cc      	b.n	8005872 <_strtod_l+0x4da>
 80058d8:	d0ed      	beq.n	80058b6 <_strtod_l+0x51e>
 80058da:	f1c8 0800 	rsb	r8, r8, #0
 80058de:	f018 020f 	ands.w	r2, r8, #15
 80058e2:	d00a      	beq.n	80058fa <_strtod_l+0x562>
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <_strtod_l+0x5a0>)
 80058e6:	4648      	mov	r0, r9
 80058e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ec:	4651      	mov	r1, sl
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f7fa ff1b 	bl	800072c <__aeabi_ddiv>
 80058f6:	4681      	mov	r9, r0
 80058f8:	468a      	mov	sl, r1
 80058fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80058fe:	d0da      	beq.n	80058b6 <_strtod_l+0x51e>
 8005900:	f1b8 0f1f 	cmp.w	r8, #31
 8005904:	dd24      	ble.n	8005950 <_strtod_l+0x5b8>
 8005906:	f04f 0800 	mov.w	r8, #0
 800590a:	f8cd 8010 	str.w	r8, [sp, #16]
 800590e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005912:	f8cd 8018 	str.w	r8, [sp, #24]
 8005916:	2322      	movs	r3, #34	; 0x22
 8005918:	f04f 0900 	mov.w	r9, #0
 800591c:	f04f 0a00 	mov.w	sl, #0
 8005920:	f8cb 3000 	str.w	r3, [fp]
 8005924:	e761      	b.n	80057ea <_strtod_l+0x452>
 8005926:	bf00      	nop
 8005928:	08008ab1 	.word	0x08008ab1
 800592c:	08008b3b 	.word	0x08008b3b
 8005930:	08008ab9 	.word	0x08008ab9
 8005934:	08008afc 	.word	0x08008afc
 8005938:	08008be0 	.word	0x08008be0
 800593c:	08008bb8 	.word	0x08008bb8
 8005940:	7ff00000 	.word	0x7ff00000
 8005944:	7ca00000 	.word	0x7ca00000
 8005948:	fff80000 	.word	0xfff80000
 800594c:	7fefffff 	.word	0x7fefffff
 8005950:	f018 0310 	ands.w	r3, r8, #16
 8005954:	bf18      	it	ne
 8005956:	236a      	movne	r3, #106	; 0x6a
 8005958:	4648      	mov	r0, r9
 800595a:	9305      	str	r3, [sp, #20]
 800595c:	4651      	mov	r1, sl
 800595e:	2300      	movs	r3, #0
 8005960:	4da1      	ldr	r5, [pc, #644]	; (8005be8 <_strtod_l+0x850>)
 8005962:	f1b8 0f00 	cmp.w	r8, #0
 8005966:	f300 8113 	bgt.w	8005b90 <_strtod_l+0x7f8>
 800596a:	b10b      	cbz	r3, 8005970 <_strtod_l+0x5d8>
 800596c:	4681      	mov	r9, r0
 800596e:	468a      	mov	sl, r1
 8005970:	9b05      	ldr	r3, [sp, #20]
 8005972:	b1bb      	cbz	r3, 80059a4 <_strtod_l+0x60c>
 8005974:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005978:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800597c:	2b00      	cmp	r3, #0
 800597e:	4651      	mov	r1, sl
 8005980:	dd10      	ble.n	80059a4 <_strtod_l+0x60c>
 8005982:	2b1f      	cmp	r3, #31
 8005984:	f340 8110 	ble.w	8005ba8 <_strtod_l+0x810>
 8005988:	2b34      	cmp	r3, #52	; 0x34
 800598a:	bfd8      	it	le
 800598c:	f04f 32ff 	movle.w	r2, #4294967295
 8005990:	f04f 0900 	mov.w	r9, #0
 8005994:	bfcf      	iteee	gt
 8005996:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800599a:	3b20      	suble	r3, #32
 800599c:	fa02 f303 	lslle.w	r3, r2, r3
 80059a0:	ea03 0a01 	andle.w	sl, r3, r1
 80059a4:	2200      	movs	r2, #0
 80059a6:	2300      	movs	r3, #0
 80059a8:	4648      	mov	r0, r9
 80059aa:	4651      	mov	r1, sl
 80059ac:	f7fa fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d1a8      	bne.n	8005906 <_strtod_l+0x56e>
 80059b4:	9b06      	ldr	r3, [sp, #24]
 80059b6:	9a04      	ldr	r2, [sp, #16]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	9908      	ldr	r1, [sp, #32]
 80059bc:	4623      	mov	r3, r4
 80059be:	4658      	mov	r0, fp
 80059c0:	f001 fe89 	bl	80076d6 <__s2b>
 80059c4:	9008      	str	r0, [sp, #32]
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f43f af00 	beq.w	80057cc <_strtod_l+0x434>
 80059cc:	9a07      	ldr	r2, [sp, #28]
 80059ce:	9b07      	ldr	r3, [sp, #28]
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	f1c3 0300 	rsb	r3, r3, #0
 80059d6:	bfa8      	it	ge
 80059d8:	2300      	movge	r3, #0
 80059da:	f04f 0800 	mov.w	r8, #0
 80059de:	930e      	str	r3, [sp, #56]	; 0x38
 80059e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80059e4:	9316      	str	r3, [sp, #88]	; 0x58
 80059e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80059ea:	9b08      	ldr	r3, [sp, #32]
 80059ec:	4658      	mov	r0, fp
 80059ee:	6859      	ldr	r1, [r3, #4]
 80059f0:	f001 fdeb 	bl	80075ca <_Balloc>
 80059f4:	9006      	str	r0, [sp, #24]
 80059f6:	2800      	cmp	r0, #0
 80059f8:	f43f aef0 	beq.w	80057dc <_strtod_l+0x444>
 80059fc:	9b08      	ldr	r3, [sp, #32]
 80059fe:	300c      	adds	r0, #12
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	f103 010c 	add.w	r1, r3, #12
 8005a06:	3202      	adds	r2, #2
 8005a08:	0092      	lsls	r2, r2, #2
 8005a0a:	f001 fdd3 	bl	80075b4 <memcpy>
 8005a0e:	ab1e      	add	r3, sp, #120	; 0x78
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	ab1d      	add	r3, sp, #116	; 0x74
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	464a      	mov	r2, r9
 8005a18:	4653      	mov	r3, sl
 8005a1a:	4658      	mov	r0, fp
 8005a1c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005a20:	f002 f914 	bl	8007c4c <__d2b>
 8005a24:	901c      	str	r0, [sp, #112]	; 0x70
 8005a26:	2800      	cmp	r0, #0
 8005a28:	f43f aed8 	beq.w	80057dc <_strtod_l+0x444>
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4658      	mov	r0, fp
 8005a30:	f001 fedd 	bl	80077ee <__i2b>
 8005a34:	9004      	str	r0, [sp, #16]
 8005a36:	4603      	mov	r3, r0
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f43f aecf 	beq.w	80057dc <_strtod_l+0x444>
 8005a3e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005a40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	bfab      	itete	ge
 8005a46:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005a48:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005a4a:	18ee      	addge	r6, r5, r3
 8005a4c:	1b5c      	sublt	r4, r3, r5
 8005a4e:	9b05      	ldr	r3, [sp, #20]
 8005a50:	bfa8      	it	ge
 8005a52:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005a54:	eba5 0503 	sub.w	r5, r5, r3
 8005a58:	4415      	add	r5, r2
 8005a5a:	4b64      	ldr	r3, [pc, #400]	; (8005bec <_strtod_l+0x854>)
 8005a5c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005a60:	bfb8      	it	lt
 8005a62:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005a64:	429d      	cmp	r5, r3
 8005a66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005a6a:	f280 80af 	bge.w	8005bcc <_strtod_l+0x834>
 8005a6e:	1b5b      	subs	r3, r3, r5
 8005a70:	2b1f      	cmp	r3, #31
 8005a72:	eba2 0203 	sub.w	r2, r2, r3
 8005a76:	f04f 0701 	mov.w	r7, #1
 8005a7a:	f300 809c 	bgt.w	8005bb6 <_strtod_l+0x81e>
 8005a7e:	2500      	movs	r5, #0
 8005a80:	fa07 f303 	lsl.w	r3, r7, r3
 8005a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a86:	18b7      	adds	r7, r6, r2
 8005a88:	9b05      	ldr	r3, [sp, #20]
 8005a8a:	42be      	cmp	r6, r7
 8005a8c:	4414      	add	r4, r2
 8005a8e:	441c      	add	r4, r3
 8005a90:	4633      	mov	r3, r6
 8005a92:	bfa8      	it	ge
 8005a94:	463b      	movge	r3, r7
 8005a96:	42a3      	cmp	r3, r4
 8005a98:	bfa8      	it	ge
 8005a9a:	4623      	movge	r3, r4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bfc2      	ittt	gt
 8005aa0:	1aff      	subgt	r7, r7, r3
 8005aa2:	1ae4      	subgt	r4, r4, r3
 8005aa4:	1af6      	subgt	r6, r6, r3
 8005aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa8:	b1bb      	cbz	r3, 8005ada <_strtod_l+0x742>
 8005aaa:	461a      	mov	r2, r3
 8005aac:	9904      	ldr	r1, [sp, #16]
 8005aae:	4658      	mov	r0, fp
 8005ab0:	f001 ff3c 	bl	800792c <__pow5mult>
 8005ab4:	9004      	str	r0, [sp, #16]
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f43f ae90 	beq.w	80057dc <_strtod_l+0x444>
 8005abc:	4601      	mov	r1, r0
 8005abe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ac0:	4658      	mov	r0, fp
 8005ac2:	f001 fe9d 	bl	8007800 <__multiply>
 8005ac6:	9009      	str	r0, [sp, #36]	; 0x24
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f43f ae87 	beq.w	80057dc <_strtod_l+0x444>
 8005ace:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ad0:	4658      	mov	r0, fp
 8005ad2:	f001 fdae 	bl	8007632 <_Bfree>
 8005ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad8:	931c      	str	r3, [sp, #112]	; 0x70
 8005ada:	2f00      	cmp	r7, #0
 8005adc:	dc7a      	bgt.n	8005bd4 <_strtod_l+0x83c>
 8005ade:	9b07      	ldr	r3, [sp, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dd08      	ble.n	8005af6 <_strtod_l+0x75e>
 8005ae4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ae6:	9906      	ldr	r1, [sp, #24]
 8005ae8:	4658      	mov	r0, fp
 8005aea:	f001 ff1f 	bl	800792c <__pow5mult>
 8005aee:	9006      	str	r0, [sp, #24]
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f43f ae73 	beq.w	80057dc <_strtod_l+0x444>
 8005af6:	2c00      	cmp	r4, #0
 8005af8:	dd08      	ble.n	8005b0c <_strtod_l+0x774>
 8005afa:	4622      	mov	r2, r4
 8005afc:	9906      	ldr	r1, [sp, #24]
 8005afe:	4658      	mov	r0, fp
 8005b00:	f001 ff62 	bl	80079c8 <__lshift>
 8005b04:	9006      	str	r0, [sp, #24]
 8005b06:	2800      	cmp	r0, #0
 8005b08:	f43f ae68 	beq.w	80057dc <_strtod_l+0x444>
 8005b0c:	2e00      	cmp	r6, #0
 8005b0e:	dd08      	ble.n	8005b22 <_strtod_l+0x78a>
 8005b10:	4632      	mov	r2, r6
 8005b12:	9904      	ldr	r1, [sp, #16]
 8005b14:	4658      	mov	r0, fp
 8005b16:	f001 ff57 	bl	80079c8 <__lshift>
 8005b1a:	9004      	str	r0, [sp, #16]
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	f43f ae5d 	beq.w	80057dc <_strtod_l+0x444>
 8005b22:	9a06      	ldr	r2, [sp, #24]
 8005b24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b26:	4658      	mov	r0, fp
 8005b28:	f001 ffbc 	bl	8007aa4 <__mdiff>
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	f43f ae54 	beq.w	80057dc <_strtod_l+0x444>
 8005b34:	2400      	movs	r4, #0
 8005b36:	68c3      	ldr	r3, [r0, #12]
 8005b38:	9904      	ldr	r1, [sp, #16]
 8005b3a:	60c4      	str	r4, [r0, #12]
 8005b3c:	930c      	str	r3, [sp, #48]	; 0x30
 8005b3e:	f001 ff97 	bl	8007a70 <__mcmp>
 8005b42:	42a0      	cmp	r0, r4
 8005b44:	da54      	bge.n	8005bf0 <_strtod_l+0x858>
 8005b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b48:	b9f3      	cbnz	r3, 8005b88 <_strtod_l+0x7f0>
 8005b4a:	f1b9 0f00 	cmp.w	r9, #0
 8005b4e:	d11b      	bne.n	8005b88 <_strtod_l+0x7f0>
 8005b50:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005b54:	b9c3      	cbnz	r3, 8005b88 <_strtod_l+0x7f0>
 8005b56:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005b5a:	0d1b      	lsrs	r3, r3, #20
 8005b5c:	051b      	lsls	r3, r3, #20
 8005b5e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b62:	d911      	bls.n	8005b88 <_strtod_l+0x7f0>
 8005b64:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005b68:	b91b      	cbnz	r3, 8005b72 <_strtod_l+0x7da>
 8005b6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	dd0a      	ble.n	8005b88 <_strtod_l+0x7f0>
 8005b72:	4641      	mov	r1, r8
 8005b74:	2201      	movs	r2, #1
 8005b76:	4658      	mov	r0, fp
 8005b78:	f001 ff26 	bl	80079c8 <__lshift>
 8005b7c:	9904      	ldr	r1, [sp, #16]
 8005b7e:	4680      	mov	r8, r0
 8005b80:	f001 ff76 	bl	8007a70 <__mcmp>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	dc68      	bgt.n	8005c5a <_strtod_l+0x8c2>
 8005b88:	9b05      	ldr	r3, [sp, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d172      	bne.n	8005c74 <_strtod_l+0x8dc>
 8005b8e:	e630      	b.n	80057f2 <_strtod_l+0x45a>
 8005b90:	f018 0f01 	tst.w	r8, #1
 8005b94:	d004      	beq.n	8005ba0 <_strtod_l+0x808>
 8005b96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b9a:	f7fa fc9d 	bl	80004d8 <__aeabi_dmul>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ba4:	3508      	adds	r5, #8
 8005ba6:	e6dc      	b.n	8005962 <_strtod_l+0x5ca>
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	ea03 0909 	and.w	r9, r3, r9
 8005bb4:	e6f6      	b.n	80059a4 <_strtod_l+0x60c>
 8005bb6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005bba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005bbe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005bc2:	35e2      	adds	r5, #226	; 0xe2
 8005bc4:	fa07 f505 	lsl.w	r5, r7, r5
 8005bc8:	970f      	str	r7, [sp, #60]	; 0x3c
 8005bca:	e75c      	b.n	8005a86 <_strtod_l+0x6ee>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	2500      	movs	r5, #0
 8005bd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bd2:	e758      	b.n	8005a86 <_strtod_l+0x6ee>
 8005bd4:	463a      	mov	r2, r7
 8005bd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005bd8:	4658      	mov	r0, fp
 8005bda:	f001 fef5 	bl	80079c8 <__lshift>
 8005bde:	901c      	str	r0, [sp, #112]	; 0x70
 8005be0:	2800      	cmp	r0, #0
 8005be2:	f47f af7c 	bne.w	8005ade <_strtod_l+0x746>
 8005be6:	e5f9      	b.n	80057dc <_strtod_l+0x444>
 8005be8:	08008b10 	.word	0x08008b10
 8005bec:	fffffc02 	.word	0xfffffc02
 8005bf0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005bf4:	f040 8089 	bne.w	8005d0a <_strtod_l+0x972>
 8005bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bfa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005bfe:	b342      	cbz	r2, 8005c52 <_strtod_l+0x8ba>
 8005c00:	4aaf      	ldr	r2, [pc, #700]	; (8005ec0 <_strtod_l+0xb28>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d156      	bne.n	8005cb4 <_strtod_l+0x91c>
 8005c06:	9b05      	ldr	r3, [sp, #20]
 8005c08:	4648      	mov	r0, r9
 8005c0a:	b1eb      	cbz	r3, 8005c48 <_strtod_l+0x8b0>
 8005c0c:	4653      	mov	r3, sl
 8005c0e:	4aad      	ldr	r2, [pc, #692]	; (8005ec4 <_strtod_l+0xb2c>)
 8005c10:	f04f 31ff 	mov.w	r1, #4294967295
 8005c14:	401a      	ands	r2, r3
 8005c16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005c1a:	d818      	bhi.n	8005c4e <_strtod_l+0x8b6>
 8005c1c:	0d12      	lsrs	r2, r2, #20
 8005c1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	4298      	cmp	r0, r3
 8005c28:	d144      	bne.n	8005cb4 <_strtod_l+0x91c>
 8005c2a:	4ba7      	ldr	r3, [pc, #668]	; (8005ec8 <_strtod_l+0xb30>)
 8005c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d102      	bne.n	8005c38 <_strtod_l+0x8a0>
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f add2 	beq.w	80057dc <_strtod_l+0x444>
 8005c38:	4ba2      	ldr	r3, [pc, #648]	; (8005ec4 <_strtod_l+0xb2c>)
 8005c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c3c:	f04f 0900 	mov.w	r9, #0
 8005c40:	401a      	ands	r2, r3
 8005c42:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005c46:	e79f      	b.n	8005b88 <_strtod_l+0x7f0>
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4c:	e7eb      	b.n	8005c26 <_strtod_l+0x88e>
 8005c4e:	460b      	mov	r3, r1
 8005c50:	e7e9      	b.n	8005c26 <_strtod_l+0x88e>
 8005c52:	bb7b      	cbnz	r3, 8005cb4 <_strtod_l+0x91c>
 8005c54:	f1b9 0f00 	cmp.w	r9, #0
 8005c58:	d12c      	bne.n	8005cb4 <_strtod_l+0x91c>
 8005c5a:	9905      	ldr	r1, [sp, #20]
 8005c5c:	4653      	mov	r3, sl
 8005c5e:	4a99      	ldr	r2, [pc, #612]	; (8005ec4 <_strtod_l+0xb2c>)
 8005c60:	b1f1      	cbz	r1, 8005ca0 <_strtod_l+0x908>
 8005c62:	ea02 010a 	and.w	r1, r2, sl
 8005c66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c6a:	dc19      	bgt.n	8005ca0 <_strtod_l+0x908>
 8005c6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c70:	f77f ae51 	ble.w	8005916 <_strtod_l+0x57e>
 8005c74:	2300      	movs	r3, #0
 8005c76:	4a95      	ldr	r2, [pc, #596]	; (8005ecc <_strtod_l+0xb34>)
 8005c78:	4648      	mov	r0, r9
 8005c7a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005c7e:	4651      	mov	r1, sl
 8005c80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c84:	f7fa fc28 	bl	80004d8 <__aeabi_dmul>
 8005c88:	4681      	mov	r9, r0
 8005c8a:	468a      	mov	sl, r1
 8005c8c:	2900      	cmp	r1, #0
 8005c8e:	f47f adb0 	bne.w	80057f2 <_strtod_l+0x45a>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f47f adad 	bne.w	80057f2 <_strtod_l+0x45a>
 8005c98:	2322      	movs	r3, #34	; 0x22
 8005c9a:	f8cb 3000 	str.w	r3, [fp]
 8005c9e:	e5a8      	b.n	80057f2 <_strtod_l+0x45a>
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005ca6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005caa:	f04f 39ff 	mov.w	r9, #4294967295
 8005cae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005cb2:	e769      	b.n	8005b88 <_strtod_l+0x7f0>
 8005cb4:	b19d      	cbz	r5, 8005cde <_strtod_l+0x946>
 8005cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb8:	421d      	tst	r5, r3
 8005cba:	f43f af65 	beq.w	8005b88 <_strtod_l+0x7f0>
 8005cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cc0:	9a05      	ldr	r2, [sp, #20]
 8005cc2:	4648      	mov	r0, r9
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	b173      	cbz	r3, 8005ce6 <_strtod_l+0x94e>
 8005cc8:	f7ff fb44 	bl	8005354 <sulp>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cd4:	f7fa fa4a 	bl	800016c <__adddf3>
 8005cd8:	4681      	mov	r9, r0
 8005cda:	468a      	mov	sl, r1
 8005cdc:	e754      	b.n	8005b88 <_strtod_l+0x7f0>
 8005cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ce0:	ea13 0f09 	tst.w	r3, r9
 8005ce4:	e7e9      	b.n	8005cba <_strtod_l+0x922>
 8005ce6:	f7ff fb35 	bl	8005354 <sulp>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cf2:	f7fa fa39 	bl	8000168 <__aeabi_dsub>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4681      	mov	r9, r0
 8005cfc:	468a      	mov	sl, r1
 8005cfe:	f7fa fe53 	bl	80009a8 <__aeabi_dcmpeq>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	f47f ae07 	bne.w	8005916 <_strtod_l+0x57e>
 8005d08:	e73e      	b.n	8005b88 <_strtod_l+0x7f0>
 8005d0a:	9904      	ldr	r1, [sp, #16]
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	f001 ffec 	bl	8007cea <__ratio>
 8005d12:	2200      	movs	r2, #0
 8005d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d18:	4606      	mov	r6, r0
 8005d1a:	460f      	mov	r7, r1
 8005d1c:	f7fa fe58 	bl	80009d0 <__aeabi_dcmple>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d075      	beq.n	8005e10 <_strtod_l+0xa78>
 8005d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d047      	beq.n	8005dba <_strtod_l+0xa22>
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	4f68      	ldr	r7, [pc, #416]	; (8005ed0 <_strtod_l+0xb38>)
 8005d2e:	4d68      	ldr	r5, [pc, #416]	; (8005ed0 <_strtod_l+0xb38>)
 8005d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d36:	0d1b      	lsrs	r3, r3, #20
 8005d38:	051b      	lsls	r3, r3, #20
 8005d3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d3e:	4b65      	ldr	r3, [pc, #404]	; (8005ed4 <_strtod_l+0xb3c>)
 8005d40:	429a      	cmp	r2, r3
 8005d42:	f040 80cf 	bne.w	8005ee4 <_strtod_l+0xb4c>
 8005d46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d4a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d50:	4648      	mov	r0, r9
 8005d52:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005d56:	4651      	mov	r1, sl
 8005d58:	f001 ff02 	bl	8007b60 <__ulp>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4630      	mov	r0, r6
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa fbb8 	bl	80004d8 <__aeabi_dmul>
 8005d68:	464a      	mov	r2, r9
 8005d6a:	4653      	mov	r3, sl
 8005d6c:	f7fa f9fe 	bl	800016c <__adddf3>
 8005d70:	460b      	mov	r3, r1
 8005d72:	4954      	ldr	r1, [pc, #336]	; (8005ec4 <_strtod_l+0xb2c>)
 8005d74:	4a58      	ldr	r2, [pc, #352]	; (8005ed8 <_strtod_l+0xb40>)
 8005d76:	4019      	ands	r1, r3
 8005d78:	4291      	cmp	r1, r2
 8005d7a:	4681      	mov	r9, r0
 8005d7c:	d95e      	bls.n	8005e3c <_strtod_l+0xaa4>
 8005d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d103      	bne.n	8005d90 <_strtod_l+0x9f8>
 8005d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	f43f ad26 	beq.w	80057dc <_strtod_l+0x444>
 8005d90:	f04f 39ff 	mov.w	r9, #4294967295
 8005d94:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005ec8 <_strtod_l+0xb30>
 8005d98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d9a:	4658      	mov	r0, fp
 8005d9c:	f001 fc49 	bl	8007632 <_Bfree>
 8005da0:	9906      	ldr	r1, [sp, #24]
 8005da2:	4658      	mov	r0, fp
 8005da4:	f001 fc45 	bl	8007632 <_Bfree>
 8005da8:	9904      	ldr	r1, [sp, #16]
 8005daa:	4658      	mov	r0, fp
 8005dac:	f001 fc41 	bl	8007632 <_Bfree>
 8005db0:	4641      	mov	r1, r8
 8005db2:	4658      	mov	r0, fp
 8005db4:	f001 fc3d 	bl	8007632 <_Bfree>
 8005db8:	e617      	b.n	80059ea <_strtod_l+0x652>
 8005dba:	f1b9 0f00 	cmp.w	r9, #0
 8005dbe:	d119      	bne.n	8005df4 <_strtod_l+0xa5c>
 8005dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc6:	b9e3      	cbnz	r3, 8005e02 <_strtod_l+0xa6a>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <_strtod_l+0xb38>)
 8005dcc:	4630      	mov	r0, r6
 8005dce:	4639      	mov	r1, r7
 8005dd0:	f7fa fdf4 	bl	80009bc <__aeabi_dcmplt>
 8005dd4:	b9c8      	cbnz	r0, 8005e0a <_strtod_l+0xa72>
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4b40      	ldr	r3, [pc, #256]	; (8005edc <_strtod_l+0xb44>)
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4639      	mov	r1, r7
 8005dde:	f7fa fb7b 	bl	80004d8 <__aeabi_dmul>
 8005de2:	4604      	mov	r4, r0
 8005de4:	460d      	mov	r5, r1
 8005de6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005dea:	9418      	str	r4, [sp, #96]	; 0x60
 8005dec:	9319      	str	r3, [sp, #100]	; 0x64
 8005dee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005df2:	e79d      	b.n	8005d30 <_strtod_l+0x998>
 8005df4:	f1b9 0f01 	cmp.w	r9, #1
 8005df8:	d103      	bne.n	8005e02 <_strtod_l+0xa6a>
 8005dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f43f ad8a 	beq.w	8005916 <_strtod_l+0x57e>
 8005e02:	2600      	movs	r6, #0
 8005e04:	4f36      	ldr	r7, [pc, #216]	; (8005ee0 <_strtod_l+0xb48>)
 8005e06:	2400      	movs	r4, #0
 8005e08:	e791      	b.n	8005d2e <_strtod_l+0x996>
 8005e0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005e0c:	4d33      	ldr	r5, [pc, #204]	; (8005edc <_strtod_l+0xb44>)
 8005e0e:	e7ea      	b.n	8005de6 <_strtod_l+0xa4e>
 8005e10:	4b32      	ldr	r3, [pc, #200]	; (8005edc <_strtod_l+0xb44>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	4630      	mov	r0, r6
 8005e16:	4639      	mov	r1, r7
 8005e18:	f7fa fb5e 	bl	80004d8 <__aeabi_dmul>
 8005e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e1e:	4604      	mov	r4, r0
 8005e20:	460d      	mov	r5, r1
 8005e22:	b933      	cbnz	r3, 8005e32 <_strtod_l+0xa9a>
 8005e24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e28:	9010      	str	r0, [sp, #64]	; 0x40
 8005e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8005e2c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e30:	e77e      	b.n	8005d30 <_strtod_l+0x998>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005e3a:	e7f7      	b.n	8005e2c <_strtod_l+0xa94>
 8005e3c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005e40:	9b05      	ldr	r3, [sp, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1a8      	bne.n	8005d98 <_strtod_l+0xa00>
 8005e46:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005e4a:	0d1b      	lsrs	r3, r3, #20
 8005e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e4e:	051b      	lsls	r3, r3, #20
 8005e50:	429a      	cmp	r2, r3
 8005e52:	4656      	mov	r6, sl
 8005e54:	d1a0      	bne.n	8005d98 <_strtod_l+0xa00>
 8005e56:	4629      	mov	r1, r5
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7fa fded 	bl	8000a38 <__aeabi_d2iz>
 8005e5e:	f7fa fad1 	bl	8000404 <__aeabi_i2d>
 8005e62:	460b      	mov	r3, r1
 8005e64:	4602      	mov	r2, r0
 8005e66:	4629      	mov	r1, r5
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7fa f97d 	bl	8000168 <__aeabi_dsub>
 8005e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e70:	4604      	mov	r4, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	b933      	cbnz	r3, 8005e84 <_strtod_l+0xaec>
 8005e76:	f1b9 0f00 	cmp.w	r9, #0
 8005e7a:	d103      	bne.n	8005e84 <_strtod_l+0xaec>
 8005e7c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005e80:	2e00      	cmp	r6, #0
 8005e82:	d06a      	beq.n	8005f5a <_strtod_l+0xbc2>
 8005e84:	a30a      	add	r3, pc, #40	; (adr r3, 8005eb0 <_strtod_l+0xb18>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa fd95 	bl	80009bc <__aeabi_dcmplt>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f47f acad 	bne.w	80057f2 <_strtod_l+0x45a>
 8005e98:	a307      	add	r3, pc, #28	; (adr r3, 8005eb8 <_strtod_l+0xb20>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	f7fa fda9 	bl	80009f8 <__aeabi_dcmpgt>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f43f af76 	beq.w	8005d98 <_strtod_l+0xa00>
 8005eac:	e4a1      	b.n	80057f2 <_strtod_l+0x45a>
 8005eae:	bf00      	nop
 8005eb0:	94a03595 	.word	0x94a03595
 8005eb4:	3fdfffff 	.word	0x3fdfffff
 8005eb8:	35afe535 	.word	0x35afe535
 8005ebc:	3fe00000 	.word	0x3fe00000
 8005ec0:	000fffff 	.word	0x000fffff
 8005ec4:	7ff00000 	.word	0x7ff00000
 8005ec8:	7fefffff 	.word	0x7fefffff
 8005ecc:	39500000 	.word	0x39500000
 8005ed0:	3ff00000 	.word	0x3ff00000
 8005ed4:	7fe00000 	.word	0x7fe00000
 8005ed8:	7c9fffff 	.word	0x7c9fffff
 8005edc:	3fe00000 	.word	0x3fe00000
 8005ee0:	bff00000 	.word	0xbff00000
 8005ee4:	9b05      	ldr	r3, [sp, #20]
 8005ee6:	b313      	cbz	r3, 8005f2e <_strtod_l+0xb96>
 8005ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005eee:	d81e      	bhi.n	8005f2e <_strtod_l+0xb96>
 8005ef0:	a325      	add	r3, pc, #148	; (adr r3, 8005f88 <_strtod_l+0xbf0>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	4629      	mov	r1, r5
 8005efa:	f7fa fd69 	bl	80009d0 <__aeabi_dcmple>
 8005efe:	b190      	cbz	r0, 8005f26 <_strtod_l+0xb8e>
 8005f00:	4629      	mov	r1, r5
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7fa fdc0 	bl	8000a88 <__aeabi_d2uiz>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	bf08      	it	eq
 8005f0c:	2001      	moveq	r0, #1
 8005f0e:	f7fa fa69 	bl	80003e4 <__aeabi_ui2d>
 8005f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f14:	4604      	mov	r4, r0
 8005f16:	460d      	mov	r5, r1
 8005f18:	b9d3      	cbnz	r3, 8005f50 <_strtod_l+0xbb8>
 8005f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f1e:	9012      	str	r0, [sp, #72]	; 0x48
 8005f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f22:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005f26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f28:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005f2c:	1a9f      	subs	r7, r3, r2
 8005f2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f32:	f001 fe15 	bl	8007b60 <__ulp>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	f7fa facb 	bl	80004d8 <__aeabi_dmul>
 8005f42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f46:	f7fa f911 	bl	800016c <__adddf3>
 8005f4a:	4681      	mov	r9, r0
 8005f4c:	468a      	mov	sl, r1
 8005f4e:	e777      	b.n	8005e40 <_strtod_l+0xaa8>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005f58:	e7e3      	b.n	8005f22 <_strtod_l+0xb8a>
 8005f5a:	a30d      	add	r3, pc, #52	; (adr r3, 8005f90 <_strtod_l+0xbf8>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa fd2c 	bl	80009bc <__aeabi_dcmplt>
 8005f64:	e79f      	b.n	8005ea6 <_strtod_l+0xb0e>
 8005f66:	2300      	movs	r3, #0
 8005f68:	930d      	str	r3, [sp, #52]	; 0x34
 8005f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	f7ff ba55 	b.w	800541e <_strtod_l+0x86>
 8005f74:	2b65      	cmp	r3, #101	; 0x65
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f43f ab42 	beq.w	8005602 <_strtod_l+0x26a>
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4614      	mov	r4, r2
 8005f82:	9105      	str	r1, [sp, #20]
 8005f84:	f7ff babf 	b.w	8005506 <_strtod_l+0x16e>
 8005f88:	ffc00000 	.word	0xffc00000
 8005f8c:	41dfffff 	.word	0x41dfffff
 8005f90:	94a03595 	.word	0x94a03595
 8005f94:	3fcfffff 	.word	0x3fcfffff

08005f98 <_strtod_r>:
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <_strtod_r+0x18>)
 8005f9a:	b410      	push	{r4}
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4c05      	ldr	r4, [pc, #20]	; (8005fb4 <_strtod_r+0x1c>)
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf08      	it	eq
 8005fa6:	4623      	moveq	r3, r4
 8005fa8:	bc10      	pop	{r4}
 8005faa:	f7ff b9f5 	b.w	8005398 <_strtod_l>
 8005fae:	bf00      	nop
 8005fb0:	2000000c 	.word	0x2000000c
 8005fb4:	20000070 	.word	0x20000070

08005fb8 <_strtol_l.isra.0>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	4692      	mov	sl, r2
 8005fc2:	461e      	mov	r6, r3
 8005fc4:	460f      	mov	r7, r1
 8005fc6:	463d      	mov	r5, r7
 8005fc8:	9808      	ldr	r0, [sp, #32]
 8005fca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fce:	f001 fab5 	bl	800753c <__locale_ctype_ptr_l>
 8005fd2:	4420      	add	r0, r4
 8005fd4:	7843      	ldrb	r3, [r0, #1]
 8005fd6:	f013 0308 	ands.w	r3, r3, #8
 8005fda:	d132      	bne.n	8006042 <_strtol_l.isra.0+0x8a>
 8005fdc:	2c2d      	cmp	r4, #45	; 0x2d
 8005fde:	d132      	bne.n	8006046 <_strtol_l.isra.0+0x8e>
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	787c      	ldrb	r4, [r7, #1]
 8005fe4:	1cbd      	adds	r5, r7, #2
 8005fe6:	2e00      	cmp	r6, #0
 8005fe8:	d05d      	beq.n	80060a6 <_strtol_l.isra.0+0xee>
 8005fea:	2e10      	cmp	r6, #16
 8005fec:	d109      	bne.n	8006002 <_strtol_l.isra.0+0x4a>
 8005fee:	2c30      	cmp	r4, #48	; 0x30
 8005ff0:	d107      	bne.n	8006002 <_strtol_l.isra.0+0x4a>
 8005ff2:	782b      	ldrb	r3, [r5, #0]
 8005ff4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ff8:	2b58      	cmp	r3, #88	; 0x58
 8005ffa:	d14f      	bne.n	800609c <_strtol_l.isra.0+0xe4>
 8005ffc:	2610      	movs	r6, #16
 8005ffe:	786c      	ldrb	r4, [r5, #1]
 8006000:	3502      	adds	r5, #2
 8006002:	2a00      	cmp	r2, #0
 8006004:	bf14      	ite	ne
 8006006:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800600a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800600e:	2700      	movs	r7, #0
 8006010:	fbb1 fcf6 	udiv	ip, r1, r6
 8006014:	4638      	mov	r0, r7
 8006016:	fb06 1e1c 	mls	lr, r6, ip, r1
 800601a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800601e:	2b09      	cmp	r3, #9
 8006020:	d817      	bhi.n	8006052 <_strtol_l.isra.0+0x9a>
 8006022:	461c      	mov	r4, r3
 8006024:	42a6      	cmp	r6, r4
 8006026:	dd23      	ble.n	8006070 <_strtol_l.isra.0+0xb8>
 8006028:	1c7b      	adds	r3, r7, #1
 800602a:	d007      	beq.n	800603c <_strtol_l.isra.0+0x84>
 800602c:	4584      	cmp	ip, r0
 800602e:	d31c      	bcc.n	800606a <_strtol_l.isra.0+0xb2>
 8006030:	d101      	bne.n	8006036 <_strtol_l.isra.0+0x7e>
 8006032:	45a6      	cmp	lr, r4
 8006034:	db19      	blt.n	800606a <_strtol_l.isra.0+0xb2>
 8006036:	2701      	movs	r7, #1
 8006038:	fb00 4006 	mla	r0, r0, r6, r4
 800603c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006040:	e7eb      	b.n	800601a <_strtol_l.isra.0+0x62>
 8006042:	462f      	mov	r7, r5
 8006044:	e7bf      	b.n	8005fc6 <_strtol_l.isra.0+0xe>
 8006046:	2c2b      	cmp	r4, #43	; 0x2b
 8006048:	bf04      	itt	eq
 800604a:	1cbd      	addeq	r5, r7, #2
 800604c:	787c      	ldrbeq	r4, [r7, #1]
 800604e:	461a      	mov	r2, r3
 8006050:	e7c9      	b.n	8005fe6 <_strtol_l.isra.0+0x2e>
 8006052:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006056:	2b19      	cmp	r3, #25
 8006058:	d801      	bhi.n	800605e <_strtol_l.isra.0+0xa6>
 800605a:	3c37      	subs	r4, #55	; 0x37
 800605c:	e7e2      	b.n	8006024 <_strtol_l.isra.0+0x6c>
 800605e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006062:	2b19      	cmp	r3, #25
 8006064:	d804      	bhi.n	8006070 <_strtol_l.isra.0+0xb8>
 8006066:	3c57      	subs	r4, #87	; 0x57
 8006068:	e7dc      	b.n	8006024 <_strtol_l.isra.0+0x6c>
 800606a:	f04f 37ff 	mov.w	r7, #4294967295
 800606e:	e7e5      	b.n	800603c <_strtol_l.isra.0+0x84>
 8006070:	1c7b      	adds	r3, r7, #1
 8006072:	d108      	bne.n	8006086 <_strtol_l.isra.0+0xce>
 8006074:	2322      	movs	r3, #34	; 0x22
 8006076:	4608      	mov	r0, r1
 8006078:	f8c8 3000 	str.w	r3, [r8]
 800607c:	f1ba 0f00 	cmp.w	sl, #0
 8006080:	d107      	bne.n	8006092 <_strtol_l.isra.0+0xda>
 8006082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006086:	b102      	cbz	r2, 800608a <_strtol_l.isra.0+0xd2>
 8006088:	4240      	negs	r0, r0
 800608a:	f1ba 0f00 	cmp.w	sl, #0
 800608e:	d0f8      	beq.n	8006082 <_strtol_l.isra.0+0xca>
 8006090:	b10f      	cbz	r7, 8006096 <_strtol_l.isra.0+0xde>
 8006092:	f105 39ff 	add.w	r9, r5, #4294967295
 8006096:	f8ca 9000 	str.w	r9, [sl]
 800609a:	e7f2      	b.n	8006082 <_strtol_l.isra.0+0xca>
 800609c:	2430      	movs	r4, #48	; 0x30
 800609e:	2e00      	cmp	r6, #0
 80060a0:	d1af      	bne.n	8006002 <_strtol_l.isra.0+0x4a>
 80060a2:	2608      	movs	r6, #8
 80060a4:	e7ad      	b.n	8006002 <_strtol_l.isra.0+0x4a>
 80060a6:	2c30      	cmp	r4, #48	; 0x30
 80060a8:	d0a3      	beq.n	8005ff2 <_strtol_l.isra.0+0x3a>
 80060aa:	260a      	movs	r6, #10
 80060ac:	e7a9      	b.n	8006002 <_strtol_l.isra.0+0x4a>
	...

080060b0 <_strtol_r>:
 80060b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060b2:	4c06      	ldr	r4, [pc, #24]	; (80060cc <_strtol_r+0x1c>)
 80060b4:	4d06      	ldr	r5, [pc, #24]	; (80060d0 <_strtol_r+0x20>)
 80060b6:	6824      	ldr	r4, [r4, #0]
 80060b8:	6a24      	ldr	r4, [r4, #32]
 80060ba:	2c00      	cmp	r4, #0
 80060bc:	bf08      	it	eq
 80060be:	462c      	moveq	r4, r5
 80060c0:	9400      	str	r4, [sp, #0]
 80060c2:	f7ff ff79 	bl	8005fb8 <_strtol_l.isra.0>
 80060c6:	b003      	add	sp, #12
 80060c8:	bd30      	pop	{r4, r5, pc}
 80060ca:	bf00      	nop
 80060cc:	2000000c 	.word	0x2000000c
 80060d0:	20000070 	.word	0x20000070

080060d4 <quorem>:
 80060d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	6903      	ldr	r3, [r0, #16]
 80060da:	690c      	ldr	r4, [r1, #16]
 80060dc:	4680      	mov	r8, r0
 80060de:	42a3      	cmp	r3, r4
 80060e0:	f2c0 8084 	blt.w	80061ec <quorem+0x118>
 80060e4:	3c01      	subs	r4, #1
 80060e6:	f101 0714 	add.w	r7, r1, #20
 80060ea:	f100 0614 	add.w	r6, r0, #20
 80060ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80060f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060f6:	3501      	adds	r5, #1
 80060f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80060fc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006100:	eb06 030c 	add.w	r3, r6, ip
 8006104:	eb07 090c 	add.w	r9, r7, ip
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	b39d      	cbz	r5, 8006174 <quorem+0xa0>
 800610c:	f04f 0a00 	mov.w	sl, #0
 8006110:	4638      	mov	r0, r7
 8006112:	46b6      	mov	lr, r6
 8006114:	46d3      	mov	fp, sl
 8006116:	f850 2b04 	ldr.w	r2, [r0], #4
 800611a:	b293      	uxth	r3, r2
 800611c:	fb05 a303 	mla	r3, r5, r3, sl
 8006120:	0c12      	lsrs	r2, r2, #16
 8006122:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006126:	fb05 a202 	mla	r2, r5, r2, sl
 800612a:	b29b      	uxth	r3, r3
 800612c:	ebab 0303 	sub.w	r3, fp, r3
 8006130:	f8de b000 	ldr.w	fp, [lr]
 8006134:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006138:	fa1f fb8b 	uxth.w	fp, fp
 800613c:	445b      	add	r3, fp
 800613e:	fa1f fb82 	uxth.w	fp, r2
 8006142:	f8de 2000 	ldr.w	r2, [lr]
 8006146:	4581      	cmp	r9, r0
 8006148:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800614c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006150:	b29b      	uxth	r3, r3
 8006152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006156:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800615a:	f84e 3b04 	str.w	r3, [lr], #4
 800615e:	d2da      	bcs.n	8006116 <quorem+0x42>
 8006160:	f856 300c 	ldr.w	r3, [r6, ip]
 8006164:	b933      	cbnz	r3, 8006174 <quorem+0xa0>
 8006166:	9b01      	ldr	r3, [sp, #4]
 8006168:	3b04      	subs	r3, #4
 800616a:	429e      	cmp	r6, r3
 800616c:	461a      	mov	r2, r3
 800616e:	d331      	bcc.n	80061d4 <quorem+0x100>
 8006170:	f8c8 4010 	str.w	r4, [r8, #16]
 8006174:	4640      	mov	r0, r8
 8006176:	f001 fc7b 	bl	8007a70 <__mcmp>
 800617a:	2800      	cmp	r0, #0
 800617c:	db26      	blt.n	80061cc <quorem+0xf8>
 800617e:	4630      	mov	r0, r6
 8006180:	f04f 0c00 	mov.w	ip, #0
 8006184:	3501      	adds	r5, #1
 8006186:	f857 1b04 	ldr.w	r1, [r7], #4
 800618a:	f8d0 e000 	ldr.w	lr, [r0]
 800618e:	b28b      	uxth	r3, r1
 8006190:	ebac 0303 	sub.w	r3, ip, r3
 8006194:	fa1f f28e 	uxth.w	r2, lr
 8006198:	4413      	add	r3, r2
 800619a:	0c0a      	lsrs	r2, r1, #16
 800619c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061aa:	45b9      	cmp	r9, r7
 80061ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061b0:	f840 3b04 	str.w	r3, [r0], #4
 80061b4:	d2e7      	bcs.n	8006186 <quorem+0xb2>
 80061b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80061ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80061be:	b92a      	cbnz	r2, 80061cc <quorem+0xf8>
 80061c0:	3b04      	subs	r3, #4
 80061c2:	429e      	cmp	r6, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	d30b      	bcc.n	80061e0 <quorem+0x10c>
 80061c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80061cc:	4628      	mov	r0, r5
 80061ce:	b003      	add	sp, #12
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	3b04      	subs	r3, #4
 80061d8:	2a00      	cmp	r2, #0
 80061da:	d1c9      	bne.n	8006170 <quorem+0x9c>
 80061dc:	3c01      	subs	r4, #1
 80061de:	e7c4      	b.n	800616a <quorem+0x96>
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	3b04      	subs	r3, #4
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	d1ef      	bne.n	80061c8 <quorem+0xf4>
 80061e8:	3c01      	subs	r4, #1
 80061ea:	e7ea      	b.n	80061c2 <quorem+0xee>
 80061ec:	2000      	movs	r0, #0
 80061ee:	e7ee      	b.n	80061ce <quorem+0xfa>

080061f0 <_dtoa_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	4616      	mov	r6, r2
 80061f6:	461f      	mov	r7, r3
 80061f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061fa:	b095      	sub	sp, #84	; 0x54
 80061fc:	4604      	mov	r4, r0
 80061fe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006202:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006206:	b93d      	cbnz	r5, 8006218 <_dtoa_r+0x28>
 8006208:	2010      	movs	r0, #16
 800620a:	f001 f9ab 	bl	8007564 <malloc>
 800620e:	6260      	str	r0, [r4, #36]	; 0x24
 8006210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006214:	6005      	str	r5, [r0, #0]
 8006216:	60c5      	str	r5, [r0, #12]
 8006218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800621a:	6819      	ldr	r1, [r3, #0]
 800621c:	b151      	cbz	r1, 8006234 <_dtoa_r+0x44>
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	2301      	movs	r3, #1
 8006222:	4093      	lsls	r3, r2
 8006224:	604a      	str	r2, [r1, #4]
 8006226:	608b      	str	r3, [r1, #8]
 8006228:	4620      	mov	r0, r4
 800622a:	f001 fa02 	bl	8007632 <_Bfree>
 800622e:	2200      	movs	r2, #0
 8006230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	1e3b      	subs	r3, r7, #0
 8006236:	bfaf      	iteee	ge
 8006238:	2300      	movge	r3, #0
 800623a:	2201      	movlt	r2, #1
 800623c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006240:	9303      	strlt	r3, [sp, #12]
 8006242:	bfac      	ite	ge
 8006244:	f8c8 3000 	strge.w	r3, [r8]
 8006248:	f8c8 2000 	strlt.w	r2, [r8]
 800624c:	4bae      	ldr	r3, [pc, #696]	; (8006508 <_dtoa_r+0x318>)
 800624e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006252:	ea33 0308 	bics.w	r3, r3, r8
 8006256:	d11b      	bne.n	8006290 <_dtoa_r+0xa0>
 8006258:	f242 730f 	movw	r3, #9999	; 0x270f
 800625c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	b923      	cbnz	r3, 800626e <_dtoa_r+0x7e>
 8006264:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006268:	2800      	cmp	r0, #0
 800626a:	f000 8545 	beq.w	8006cf8 <_dtoa_r+0xb08>
 800626e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006270:	b953      	cbnz	r3, 8006288 <_dtoa_r+0x98>
 8006272:	4ba6      	ldr	r3, [pc, #664]	; (800650c <_dtoa_r+0x31c>)
 8006274:	e021      	b.n	80062ba <_dtoa_r+0xca>
 8006276:	4ba6      	ldr	r3, [pc, #664]	; (8006510 <_dtoa_r+0x320>)
 8006278:	9306      	str	r3, [sp, #24]
 800627a:	3308      	adds	r3, #8
 800627c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	9806      	ldr	r0, [sp, #24]
 8006282:	b015      	add	sp, #84	; 0x54
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	4ba0      	ldr	r3, [pc, #640]	; (800650c <_dtoa_r+0x31c>)
 800628a:	9306      	str	r3, [sp, #24]
 800628c:	3303      	adds	r3, #3
 800628e:	e7f5      	b.n	800627c <_dtoa_r+0x8c>
 8006290:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006294:	2200      	movs	r2, #0
 8006296:	2300      	movs	r3, #0
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80062a0:	4682      	mov	sl, r0
 80062a2:	b160      	cbz	r0, 80062be <_dtoa_r+0xce>
 80062a4:	2301      	movs	r3, #1
 80062a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8520 	beq.w	8006cf2 <_dtoa_r+0xb02>
 80062b2:	4b98      	ldr	r3, [pc, #608]	; (8006514 <_dtoa_r+0x324>)
 80062b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	9306      	str	r3, [sp, #24]
 80062bc:	e7e0      	b.n	8006280 <_dtoa_r+0x90>
 80062be:	ab12      	add	r3, sp, #72	; 0x48
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	ab13      	add	r3, sp, #76	; 0x4c
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	4632      	mov	r2, r6
 80062c8:	463b      	mov	r3, r7
 80062ca:	4620      	mov	r0, r4
 80062cc:	f001 fcbe 	bl	8007c4c <__d2b>
 80062d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80062d4:	4683      	mov	fp, r0
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	d07d      	beq.n	80063d6 <_dtoa_r+0x1e6>
 80062da:	46b0      	mov	r8, r6
 80062dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062e0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80062e4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80062e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80062f0:	2200      	movs	r2, #0
 80062f2:	4b89      	ldr	r3, [pc, #548]	; (8006518 <_dtoa_r+0x328>)
 80062f4:	4640      	mov	r0, r8
 80062f6:	4649      	mov	r1, r9
 80062f8:	f7f9 ff36 	bl	8000168 <__aeabi_dsub>
 80062fc:	a37c      	add	r3, pc, #496	; (adr r3, 80064f0 <_dtoa_r+0x300>)
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f7fa f8e9 	bl	80004d8 <__aeabi_dmul>
 8006306:	a37c      	add	r3, pc, #496	; (adr r3, 80064f8 <_dtoa_r+0x308>)
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f7f9 ff2e 	bl	800016c <__adddf3>
 8006310:	4606      	mov	r6, r0
 8006312:	4628      	mov	r0, r5
 8006314:	460f      	mov	r7, r1
 8006316:	f7fa f875 	bl	8000404 <__aeabi_i2d>
 800631a:	a379      	add	r3, pc, #484	; (adr r3, 8006500 <_dtoa_r+0x310>)
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7fa f8da 	bl	80004d8 <__aeabi_dmul>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7f9 ff1e 	bl	800016c <__adddf3>
 8006330:	4606      	mov	r6, r0
 8006332:	460f      	mov	r7, r1
 8006334:	f7fa fb80 	bl	8000a38 <__aeabi_d2iz>
 8006338:	2200      	movs	r2, #0
 800633a:	4682      	mov	sl, r0
 800633c:	2300      	movs	r3, #0
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa fb3b 	bl	80009bc <__aeabi_dcmplt>
 8006346:	b148      	cbz	r0, 800635c <_dtoa_r+0x16c>
 8006348:	4650      	mov	r0, sl
 800634a:	f7fa f85b 	bl	8000404 <__aeabi_i2d>
 800634e:	4632      	mov	r2, r6
 8006350:	463b      	mov	r3, r7
 8006352:	f7fa fb29 	bl	80009a8 <__aeabi_dcmpeq>
 8006356:	b908      	cbnz	r0, 800635c <_dtoa_r+0x16c>
 8006358:	f10a 3aff 	add.w	sl, sl, #4294967295
 800635c:	f1ba 0f16 	cmp.w	sl, #22
 8006360:	d85a      	bhi.n	8006418 <_dtoa_r+0x228>
 8006362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006366:	496d      	ldr	r1, [pc, #436]	; (800651c <_dtoa_r+0x32c>)
 8006368:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800636c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006370:	f7fa fb42 	bl	80009f8 <__aeabi_dcmpgt>
 8006374:	2800      	cmp	r0, #0
 8006376:	d051      	beq.n	800641c <_dtoa_r+0x22c>
 8006378:	2300      	movs	r3, #0
 800637a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800637e:	930d      	str	r3, [sp, #52]	; 0x34
 8006380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006382:	1b5d      	subs	r5, r3, r5
 8006384:	1e6b      	subs	r3, r5, #1
 8006386:	9307      	str	r3, [sp, #28]
 8006388:	bf43      	ittte	mi
 800638a:	2300      	movmi	r3, #0
 800638c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006390:	9307      	strmi	r3, [sp, #28]
 8006392:	f04f 0900 	movpl.w	r9, #0
 8006396:	f1ba 0f00 	cmp.w	sl, #0
 800639a:	db41      	blt.n	8006420 <_dtoa_r+0x230>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80063a2:	4453      	add	r3, sl
 80063a4:	9307      	str	r3, [sp, #28]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9308      	str	r3, [sp, #32]
 80063aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063ac:	2b09      	cmp	r3, #9
 80063ae:	f200 808f 	bhi.w	80064d0 <_dtoa_r+0x2e0>
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	bfc4      	itt	gt
 80063b6:	3b04      	subgt	r3, #4
 80063b8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80063ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063bc:	bfc8      	it	gt
 80063be:	2500      	movgt	r5, #0
 80063c0:	f1a3 0302 	sub.w	r3, r3, #2
 80063c4:	bfd8      	it	le
 80063c6:	2501      	movle	r5, #1
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	f200 808d 	bhi.w	80064e8 <_dtoa_r+0x2f8>
 80063ce:	e8df f003 	tbb	[pc, r3]
 80063d2:	7d7b      	.short	0x7d7b
 80063d4:	6f2f      	.short	0x6f2f
 80063d6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80063da:	441d      	add	r5, r3
 80063dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80063e0:	2820      	cmp	r0, #32
 80063e2:	dd13      	ble.n	800640c <_dtoa_r+0x21c>
 80063e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	fa08 f800 	lsl.w	r8, r8, r0
 80063ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063f2:	fa23 f000 	lsr.w	r0, r3, r0
 80063f6:	ea48 0000 	orr.w	r0, r8, r0
 80063fa:	f7f9 fff3 	bl	80003e4 <__aeabi_ui2d>
 80063fe:	2301      	movs	r3, #1
 8006400:	4680      	mov	r8, r0
 8006402:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006406:	3d01      	subs	r5, #1
 8006408:	9310      	str	r3, [sp, #64]	; 0x40
 800640a:	e771      	b.n	80062f0 <_dtoa_r+0x100>
 800640c:	9b02      	ldr	r3, [sp, #8]
 800640e:	f1c0 0020 	rsb	r0, r0, #32
 8006412:	fa03 f000 	lsl.w	r0, r3, r0
 8006416:	e7f0      	b.n	80063fa <_dtoa_r+0x20a>
 8006418:	2301      	movs	r3, #1
 800641a:	e7b0      	b.n	800637e <_dtoa_r+0x18e>
 800641c:	900d      	str	r0, [sp, #52]	; 0x34
 800641e:	e7af      	b.n	8006380 <_dtoa_r+0x190>
 8006420:	f1ca 0300 	rsb	r3, sl, #0
 8006424:	9308      	str	r3, [sp, #32]
 8006426:	2300      	movs	r3, #0
 8006428:	eba9 090a 	sub.w	r9, r9, sl
 800642c:	930c      	str	r3, [sp, #48]	; 0x30
 800642e:	e7bc      	b.n	80063aa <_dtoa_r+0x1ba>
 8006430:	2301      	movs	r3, #1
 8006432:	9309      	str	r3, [sp, #36]	; 0x24
 8006434:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006436:	2b00      	cmp	r3, #0
 8006438:	dd74      	ble.n	8006524 <_dtoa_r+0x334>
 800643a:	4698      	mov	r8, r3
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	2200      	movs	r2, #0
 8006440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006442:	6072      	str	r2, [r6, #4]
 8006444:	2204      	movs	r2, #4
 8006446:	f102 0014 	add.w	r0, r2, #20
 800644a:	4298      	cmp	r0, r3
 800644c:	6871      	ldr	r1, [r6, #4]
 800644e:	d96e      	bls.n	800652e <_dtoa_r+0x33e>
 8006450:	4620      	mov	r0, r4
 8006452:	f001 f8ba 	bl	80075ca <_Balloc>
 8006456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006458:	6030      	str	r0, [r6, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b8 0f0e 	cmp.w	r8, #14
 8006460:	9306      	str	r3, [sp, #24]
 8006462:	f200 80ed 	bhi.w	8006640 <_dtoa_r+0x450>
 8006466:	2d00      	cmp	r5, #0
 8006468:	f000 80ea 	beq.w	8006640 <_dtoa_r+0x450>
 800646c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006470:	f1ba 0f00 	cmp.w	sl, #0
 8006474:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006478:	dd77      	ble.n	800656a <_dtoa_r+0x37a>
 800647a:	4a28      	ldr	r2, [pc, #160]	; (800651c <_dtoa_r+0x32c>)
 800647c:	f00a 030f 	and.w	r3, sl, #15
 8006480:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006484:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006488:	06f0      	lsls	r0, r6, #27
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006492:	d568      	bpl.n	8006566 <_dtoa_r+0x376>
 8006494:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <_dtoa_r+0x330>)
 800649a:	2503      	movs	r5, #3
 800649c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a0:	f7fa f944 	bl	800072c <__aeabi_ddiv>
 80064a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a8:	f006 060f 	and.w	r6, r6, #15
 80064ac:	4f1c      	ldr	r7, [pc, #112]	; (8006520 <_dtoa_r+0x330>)
 80064ae:	e04f      	b.n	8006550 <_dtoa_r+0x360>
 80064b0:	2301      	movs	r3, #1
 80064b2:	9309      	str	r3, [sp, #36]	; 0x24
 80064b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064b6:	4453      	add	r3, sl
 80064b8:	f103 0801 	add.w	r8, r3, #1
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	4643      	mov	r3, r8
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	bfb8      	it	lt
 80064c4:	2301      	movlt	r3, #1
 80064c6:	e7ba      	b.n	800643e <_dtoa_r+0x24e>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e7b2      	b.n	8006432 <_dtoa_r+0x242>
 80064cc:	2300      	movs	r3, #0
 80064ce:	e7f0      	b.n	80064b2 <_dtoa_r+0x2c2>
 80064d0:	2501      	movs	r5, #1
 80064d2:	2300      	movs	r3, #0
 80064d4:	9509      	str	r5, [sp, #36]	; 0x24
 80064d6:	931e      	str	r3, [sp, #120]	; 0x78
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	2200      	movs	r2, #0
 80064de:	9304      	str	r3, [sp, #16]
 80064e0:	4698      	mov	r8, r3
 80064e2:	2312      	movs	r3, #18
 80064e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80064e6:	e7aa      	b.n	800643e <_dtoa_r+0x24e>
 80064e8:	2301      	movs	r3, #1
 80064ea:	9309      	str	r3, [sp, #36]	; 0x24
 80064ec:	e7f4      	b.n	80064d8 <_dtoa_r+0x2e8>
 80064ee:	bf00      	nop
 80064f0:	636f4361 	.word	0x636f4361
 80064f4:	3fd287a7 	.word	0x3fd287a7
 80064f8:	8b60c8b3 	.word	0x8b60c8b3
 80064fc:	3fc68a28 	.word	0x3fc68a28
 8006500:	509f79fb 	.word	0x509f79fb
 8006504:	3fd34413 	.word	0x3fd34413
 8006508:	7ff00000 	.word	0x7ff00000
 800650c:	08008b41 	.word	0x08008b41
 8006510:	08008b38 	.word	0x08008b38
 8006514:	08008abd 	.word	0x08008abd
 8006518:	3ff80000 	.word	0x3ff80000
 800651c:	08008be0 	.word	0x08008be0
 8006520:	08008bb8 	.word	0x08008bb8
 8006524:	2301      	movs	r3, #1
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	4698      	mov	r8, r3
 800652a:	461a      	mov	r2, r3
 800652c:	e7da      	b.n	80064e4 <_dtoa_r+0x2f4>
 800652e:	3101      	adds	r1, #1
 8006530:	6071      	str	r1, [r6, #4]
 8006532:	0052      	lsls	r2, r2, #1
 8006534:	e787      	b.n	8006446 <_dtoa_r+0x256>
 8006536:	07f1      	lsls	r1, r6, #31
 8006538:	d508      	bpl.n	800654c <_dtoa_r+0x35c>
 800653a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800653e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006542:	f7f9 ffc9 	bl	80004d8 <__aeabi_dmul>
 8006546:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800654a:	3501      	adds	r5, #1
 800654c:	1076      	asrs	r6, r6, #1
 800654e:	3708      	adds	r7, #8
 8006550:	2e00      	cmp	r6, #0
 8006552:	d1f0      	bne.n	8006536 <_dtoa_r+0x346>
 8006554:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800655c:	f7fa f8e6 	bl	800072c <__aeabi_ddiv>
 8006560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006564:	e01b      	b.n	800659e <_dtoa_r+0x3ae>
 8006566:	2502      	movs	r5, #2
 8006568:	e7a0      	b.n	80064ac <_dtoa_r+0x2bc>
 800656a:	f000 80a4 	beq.w	80066b6 <_dtoa_r+0x4c6>
 800656e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006572:	f1ca 0600 	rsb	r6, sl, #0
 8006576:	4ba0      	ldr	r3, [pc, #640]	; (80067f8 <_dtoa_r+0x608>)
 8006578:	f006 020f 	and.w	r2, r6, #15
 800657c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f7f9 ffa8 	bl	80004d8 <__aeabi_dmul>
 8006588:	2502      	movs	r5, #2
 800658a:	2300      	movs	r3, #0
 800658c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006590:	4f9a      	ldr	r7, [pc, #616]	; (80067fc <_dtoa_r+0x60c>)
 8006592:	1136      	asrs	r6, r6, #4
 8006594:	2e00      	cmp	r6, #0
 8006596:	f040 8083 	bne.w	80066a0 <_dtoa_r+0x4b0>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e0      	bne.n	8006560 <_dtoa_r+0x370>
 800659e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 808a 	beq.w	80066ba <_dtoa_r+0x4ca>
 80065a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065b2:	2200      	movs	r2, #0
 80065b4:	4b92      	ldr	r3, [pc, #584]	; (8006800 <_dtoa_r+0x610>)
 80065b6:	f7fa fa01 	bl	80009bc <__aeabi_dcmplt>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d07d      	beq.n	80066ba <_dtoa_r+0x4ca>
 80065be:	f1b8 0f00 	cmp.w	r8, #0
 80065c2:	d07a      	beq.n	80066ba <_dtoa_r+0x4ca>
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	dd36      	ble.n	8006638 <_dtoa_r+0x448>
 80065ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065ce:	2200      	movs	r2, #0
 80065d0:	4b8c      	ldr	r3, [pc, #560]	; (8006804 <_dtoa_r+0x614>)
 80065d2:	f7f9 ff81 	bl	80004d8 <__aeabi_dmul>
 80065d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065da:	9e04      	ldr	r6, [sp, #16]
 80065dc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80065e0:	3501      	adds	r5, #1
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7f9 ff0e 	bl	8000404 <__aeabi_i2d>
 80065e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ec:	f7f9 ff74 	bl	80004d8 <__aeabi_dmul>
 80065f0:	2200      	movs	r2, #0
 80065f2:	4b85      	ldr	r3, [pc, #532]	; (8006808 <_dtoa_r+0x618>)
 80065f4:	f7f9 fdba 	bl	800016c <__adddf3>
 80065f8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80065fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006600:	950b      	str	r5, [sp, #44]	; 0x2c
 8006602:	2e00      	cmp	r6, #0
 8006604:	d15c      	bne.n	80066c0 <_dtoa_r+0x4d0>
 8006606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	4b7f      	ldr	r3, [pc, #508]	; (800680c <_dtoa_r+0x61c>)
 800660e:	f7f9 fdab 	bl	8000168 <__aeabi_dsub>
 8006612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006614:	462b      	mov	r3, r5
 8006616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800661a:	f7fa f9ed 	bl	80009f8 <__aeabi_dcmpgt>
 800661e:	2800      	cmp	r0, #0
 8006620:	f040 8281 	bne.w	8006b26 <_dtoa_r+0x936>
 8006624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800662e:	f7fa f9c5 	bl	80009bc <__aeabi_dcmplt>
 8006632:	2800      	cmp	r0, #0
 8006634:	f040 8275 	bne.w	8006b22 <_dtoa_r+0x932>
 8006638:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800663c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006642:	2b00      	cmp	r3, #0
 8006644:	f2c0 814b 	blt.w	80068de <_dtoa_r+0x6ee>
 8006648:	f1ba 0f0e 	cmp.w	sl, #14
 800664c:	f300 8147 	bgt.w	80068de <_dtoa_r+0x6ee>
 8006650:	4b69      	ldr	r3, [pc, #420]	; (80067f8 <_dtoa_r+0x608>)
 8006652:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800665e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006660:	2b00      	cmp	r3, #0
 8006662:	f280 80d7 	bge.w	8006814 <_dtoa_r+0x624>
 8006666:	f1b8 0f00 	cmp.w	r8, #0
 800666a:	f300 80d3 	bgt.w	8006814 <_dtoa_r+0x624>
 800666e:	f040 8257 	bne.w	8006b20 <_dtoa_r+0x930>
 8006672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006676:	2200      	movs	r2, #0
 8006678:	4b64      	ldr	r3, [pc, #400]	; (800680c <_dtoa_r+0x61c>)
 800667a:	f7f9 ff2d 	bl	80004d8 <__aeabi_dmul>
 800667e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006682:	f7fa f9af 	bl	80009e4 <__aeabi_dcmpge>
 8006686:	4646      	mov	r6, r8
 8006688:	4647      	mov	r7, r8
 800668a:	2800      	cmp	r0, #0
 800668c:	f040 822d 	bne.w	8006aea <_dtoa_r+0x8fa>
 8006690:	9b06      	ldr	r3, [sp, #24]
 8006692:	9a06      	ldr	r2, [sp, #24]
 8006694:	1c5d      	adds	r5, r3, #1
 8006696:	2331      	movs	r3, #49	; 0x31
 8006698:	f10a 0a01 	add.w	sl, sl, #1
 800669c:	7013      	strb	r3, [r2, #0]
 800669e:	e228      	b.n	8006af2 <_dtoa_r+0x902>
 80066a0:	07f2      	lsls	r2, r6, #31
 80066a2:	d505      	bpl.n	80066b0 <_dtoa_r+0x4c0>
 80066a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a8:	f7f9 ff16 	bl	80004d8 <__aeabi_dmul>
 80066ac:	2301      	movs	r3, #1
 80066ae:	3501      	adds	r5, #1
 80066b0:	1076      	asrs	r6, r6, #1
 80066b2:	3708      	adds	r7, #8
 80066b4:	e76e      	b.n	8006594 <_dtoa_r+0x3a4>
 80066b6:	2502      	movs	r5, #2
 80066b8:	e771      	b.n	800659e <_dtoa_r+0x3ae>
 80066ba:	4657      	mov	r7, sl
 80066bc:	4646      	mov	r6, r8
 80066be:	e790      	b.n	80065e2 <_dtoa_r+0x3f2>
 80066c0:	4b4d      	ldr	r3, [pc, #308]	; (80067f8 <_dtoa_r+0x608>)
 80066c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80066ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d048      	beq.n	8006762 <_dtoa_r+0x572>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	2000      	movs	r0, #0
 80066d6:	494e      	ldr	r1, [pc, #312]	; (8006810 <_dtoa_r+0x620>)
 80066d8:	f7fa f828 	bl	800072c <__aeabi_ddiv>
 80066dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066e0:	f7f9 fd42 	bl	8000168 <__aeabi_dsub>
 80066e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066e8:	9d06      	ldr	r5, [sp, #24]
 80066ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ee:	f7fa f9a3 	bl	8000a38 <__aeabi_d2iz>
 80066f2:	9011      	str	r0, [sp, #68]	; 0x44
 80066f4:	f7f9 fe86 	bl	8000404 <__aeabi_i2d>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006700:	f7f9 fd32 	bl	8000168 <__aeabi_dsub>
 8006704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670a:	3330      	adds	r3, #48	; 0x30
 800670c:	f805 3b01 	strb.w	r3, [r5], #1
 8006710:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006714:	f7fa f952 	bl	80009bc <__aeabi_dcmplt>
 8006718:	2800      	cmp	r0, #0
 800671a:	d163      	bne.n	80067e4 <_dtoa_r+0x5f4>
 800671c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006720:	2000      	movs	r0, #0
 8006722:	4937      	ldr	r1, [pc, #220]	; (8006800 <_dtoa_r+0x610>)
 8006724:	f7f9 fd20 	bl	8000168 <__aeabi_dsub>
 8006728:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800672c:	f7fa f946 	bl	80009bc <__aeabi_dcmplt>
 8006730:	2800      	cmp	r0, #0
 8006732:	f040 80b5 	bne.w	80068a0 <_dtoa_r+0x6b0>
 8006736:	9b06      	ldr	r3, [sp, #24]
 8006738:	1aeb      	subs	r3, r5, r3
 800673a:	429e      	cmp	r6, r3
 800673c:	f77f af7c 	ble.w	8006638 <_dtoa_r+0x448>
 8006740:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006744:	2200      	movs	r2, #0
 8006746:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <_dtoa_r+0x614>)
 8006748:	f7f9 fec6 	bl	80004d8 <__aeabi_dmul>
 800674c:	2200      	movs	r2, #0
 800674e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006756:	4b2b      	ldr	r3, [pc, #172]	; (8006804 <_dtoa_r+0x614>)
 8006758:	f7f9 febe 	bl	80004d8 <__aeabi_dmul>
 800675c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006760:	e7c3      	b.n	80066ea <_dtoa_r+0x4fa>
 8006762:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006766:	f7f9 feb7 	bl	80004d8 <__aeabi_dmul>
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006770:	199d      	adds	r5, r3, r6
 8006772:	461e      	mov	r6, r3
 8006774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006778:	f7fa f95e 	bl	8000a38 <__aeabi_d2iz>
 800677c:	9011      	str	r0, [sp, #68]	; 0x44
 800677e:	f7f9 fe41 	bl	8000404 <__aeabi_i2d>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800678a:	f7f9 fced 	bl	8000168 <__aeabi_dsub>
 800678e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006794:	3330      	adds	r3, #48	; 0x30
 8006796:	f806 3b01 	strb.w	r3, [r6], #1
 800679a:	42ae      	cmp	r6, r5
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	d124      	bne.n	80067ec <_dtoa_r+0x5fc>
 80067a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <_dtoa_r+0x620>)
 80067a8:	f7f9 fce0 	bl	800016c <__adddf3>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b4:	f7fa f920 	bl	80009f8 <__aeabi_dcmpgt>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d171      	bne.n	80068a0 <_dtoa_r+0x6b0>
 80067bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80067c0:	2000      	movs	r0, #0
 80067c2:	4913      	ldr	r1, [pc, #76]	; (8006810 <_dtoa_r+0x620>)
 80067c4:	f7f9 fcd0 	bl	8000168 <__aeabi_dsub>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d0:	f7fa f8f4 	bl	80009bc <__aeabi_dcmplt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f43f af2f 	beq.w	8006638 <_dtoa_r+0x448>
 80067da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067de:	1e6a      	subs	r2, r5, #1
 80067e0:	2b30      	cmp	r3, #48	; 0x30
 80067e2:	d001      	beq.n	80067e8 <_dtoa_r+0x5f8>
 80067e4:	46ba      	mov	sl, r7
 80067e6:	e04a      	b.n	800687e <_dtoa_r+0x68e>
 80067e8:	4615      	mov	r5, r2
 80067ea:	e7f6      	b.n	80067da <_dtoa_r+0x5ea>
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <_dtoa_r+0x614>)
 80067ee:	f7f9 fe73 	bl	80004d8 <__aeabi_dmul>
 80067f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f6:	e7bd      	b.n	8006774 <_dtoa_r+0x584>
 80067f8:	08008be0 	.word	0x08008be0
 80067fc:	08008bb8 	.word	0x08008bb8
 8006800:	3ff00000 	.word	0x3ff00000
 8006804:	40240000 	.word	0x40240000
 8006808:	401c0000 	.word	0x401c0000
 800680c:	40140000 	.word	0x40140000
 8006810:	3fe00000 	.word	0x3fe00000
 8006814:	9d06      	ldr	r5, [sp, #24]
 8006816:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800681a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7f9 ff83 	bl	800072c <__aeabi_ddiv>
 8006826:	f7fa f907 	bl	8000a38 <__aeabi_d2iz>
 800682a:	4681      	mov	r9, r0
 800682c:	f7f9 fdea 	bl	8000404 <__aeabi_i2d>
 8006830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006834:	f7f9 fe50 	bl	80004d8 <__aeabi_dmul>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7f9 fc92 	bl	8000168 <__aeabi_dsub>
 8006844:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006848:	f805 6b01 	strb.w	r6, [r5], #1
 800684c:	9e06      	ldr	r6, [sp, #24]
 800684e:	4602      	mov	r2, r0
 8006850:	1bae      	subs	r6, r5, r6
 8006852:	45b0      	cmp	r8, r6
 8006854:	460b      	mov	r3, r1
 8006856:	d135      	bne.n	80068c4 <_dtoa_r+0x6d4>
 8006858:	f7f9 fc88 	bl	800016c <__adddf3>
 800685c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006860:	4606      	mov	r6, r0
 8006862:	460f      	mov	r7, r1
 8006864:	f7fa f8c8 	bl	80009f8 <__aeabi_dcmpgt>
 8006868:	b9c8      	cbnz	r0, 800689e <_dtoa_r+0x6ae>
 800686a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	f7fa f899 	bl	80009a8 <__aeabi_dcmpeq>
 8006876:	b110      	cbz	r0, 800687e <_dtoa_r+0x68e>
 8006878:	f019 0f01 	tst.w	r9, #1
 800687c:	d10f      	bne.n	800689e <_dtoa_r+0x6ae>
 800687e:	4659      	mov	r1, fp
 8006880:	4620      	mov	r0, r4
 8006882:	f000 fed6 	bl	8007632 <_Bfree>
 8006886:	2300      	movs	r3, #0
 8006888:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800688a:	702b      	strb	r3, [r5, #0]
 800688c:	f10a 0301 	add.w	r3, sl, #1
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006894:	2b00      	cmp	r3, #0
 8006896:	f43f acf3 	beq.w	8006280 <_dtoa_r+0x90>
 800689a:	601d      	str	r5, [r3, #0]
 800689c:	e4f0      	b.n	8006280 <_dtoa_r+0x90>
 800689e:	4657      	mov	r7, sl
 80068a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80068a4:	1e6b      	subs	r3, r5, #1
 80068a6:	2a39      	cmp	r2, #57	; 0x39
 80068a8:	d106      	bne.n	80068b8 <_dtoa_r+0x6c8>
 80068aa:	9a06      	ldr	r2, [sp, #24]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d107      	bne.n	80068c0 <_dtoa_r+0x6d0>
 80068b0:	2330      	movs	r3, #48	; 0x30
 80068b2:	7013      	strb	r3, [r2, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	3701      	adds	r7, #1
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	3201      	adds	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e791      	b.n	80067e4 <_dtoa_r+0x5f4>
 80068c0:	461d      	mov	r5, r3
 80068c2:	e7ed      	b.n	80068a0 <_dtoa_r+0x6b0>
 80068c4:	2200      	movs	r2, #0
 80068c6:	4b99      	ldr	r3, [pc, #612]	; (8006b2c <_dtoa_r+0x93c>)
 80068c8:	f7f9 fe06 	bl	80004d8 <__aeabi_dmul>
 80068cc:	2200      	movs	r2, #0
 80068ce:	2300      	movs	r3, #0
 80068d0:	4606      	mov	r6, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	f7fa f868 	bl	80009a8 <__aeabi_dcmpeq>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d09e      	beq.n	800681a <_dtoa_r+0x62a>
 80068dc:	e7cf      	b.n	800687e <_dtoa_r+0x68e>
 80068de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	f000 8088 	beq.w	80069f6 <_dtoa_r+0x806>
 80068e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068e8:	2a01      	cmp	r2, #1
 80068ea:	dc6d      	bgt.n	80069c8 <_dtoa_r+0x7d8>
 80068ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	d066      	beq.n	80069c0 <_dtoa_r+0x7d0>
 80068f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068f6:	464d      	mov	r5, r9
 80068f8:	9e08      	ldr	r6, [sp, #32]
 80068fa:	9a07      	ldr	r2, [sp, #28]
 80068fc:	2101      	movs	r1, #1
 80068fe:	441a      	add	r2, r3
 8006900:	4620      	mov	r0, r4
 8006902:	4499      	add	r9, r3
 8006904:	9207      	str	r2, [sp, #28]
 8006906:	f000 ff72 	bl	80077ee <__i2b>
 800690a:	4607      	mov	r7, r0
 800690c:	2d00      	cmp	r5, #0
 800690e:	dd0b      	ble.n	8006928 <_dtoa_r+0x738>
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	2b00      	cmp	r3, #0
 8006914:	dd08      	ble.n	8006928 <_dtoa_r+0x738>
 8006916:	42ab      	cmp	r3, r5
 8006918:	bfa8      	it	ge
 800691a:	462b      	movge	r3, r5
 800691c:	9a07      	ldr	r2, [sp, #28]
 800691e:	eba9 0903 	sub.w	r9, r9, r3
 8006922:	1aed      	subs	r5, r5, r3
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	9307      	str	r3, [sp, #28]
 8006928:	9b08      	ldr	r3, [sp, #32]
 800692a:	b1eb      	cbz	r3, 8006968 <_dtoa_r+0x778>
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d065      	beq.n	80069fe <_dtoa_r+0x80e>
 8006932:	b18e      	cbz	r6, 8006958 <_dtoa_r+0x768>
 8006934:	4639      	mov	r1, r7
 8006936:	4632      	mov	r2, r6
 8006938:	4620      	mov	r0, r4
 800693a:	f000 fff7 	bl	800792c <__pow5mult>
 800693e:	465a      	mov	r2, fp
 8006940:	4601      	mov	r1, r0
 8006942:	4607      	mov	r7, r0
 8006944:	4620      	mov	r0, r4
 8006946:	f000 ff5b 	bl	8007800 <__multiply>
 800694a:	4659      	mov	r1, fp
 800694c:	900a      	str	r0, [sp, #40]	; 0x28
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fe6f 	bl	8007632 <_Bfree>
 8006954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006956:	469b      	mov	fp, r3
 8006958:	9b08      	ldr	r3, [sp, #32]
 800695a:	1b9a      	subs	r2, r3, r6
 800695c:	d004      	beq.n	8006968 <_dtoa_r+0x778>
 800695e:	4659      	mov	r1, fp
 8006960:	4620      	mov	r0, r4
 8006962:	f000 ffe3 	bl	800792c <__pow5mult>
 8006966:	4683      	mov	fp, r0
 8006968:	2101      	movs	r1, #1
 800696a:	4620      	mov	r0, r4
 800696c:	f000 ff3f 	bl	80077ee <__i2b>
 8006970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006972:	4606      	mov	r6, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 81c6 	beq.w	8006d06 <_dtoa_r+0xb16>
 800697a:	461a      	mov	r2, r3
 800697c:	4601      	mov	r1, r0
 800697e:	4620      	mov	r0, r4
 8006980:	f000 ffd4 	bl	800792c <__pow5mult>
 8006984:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006986:	4606      	mov	r6, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	dc3e      	bgt.n	8006a0a <_dtoa_r+0x81a>
 800698c:	9b02      	ldr	r3, [sp, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d137      	bne.n	8006a02 <_dtoa_r+0x812>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	2b00      	cmp	r3, #0
 800699a:	d134      	bne.n	8006a06 <_dtoa_r+0x816>
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a2:	0d1b      	lsrs	r3, r3, #20
 80069a4:	051b      	lsls	r3, r3, #20
 80069a6:	b12b      	cbz	r3, 80069b4 <_dtoa_r+0x7c4>
 80069a8:	9b07      	ldr	r3, [sp, #28]
 80069aa:	f109 0901 	add.w	r9, r9, #1
 80069ae:	3301      	adds	r3, #1
 80069b0:	9307      	str	r3, [sp, #28]
 80069b2:	2301      	movs	r3, #1
 80069b4:	9308      	str	r3, [sp, #32]
 80069b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d128      	bne.n	8006a0e <_dtoa_r+0x81e>
 80069bc:	2001      	movs	r0, #1
 80069be:	e02e      	b.n	8006a1e <_dtoa_r+0x82e>
 80069c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069c6:	e796      	b.n	80068f6 <_dtoa_r+0x706>
 80069c8:	9b08      	ldr	r3, [sp, #32]
 80069ca:	f108 36ff 	add.w	r6, r8, #4294967295
 80069ce:	42b3      	cmp	r3, r6
 80069d0:	bfb7      	itett	lt
 80069d2:	9b08      	ldrlt	r3, [sp, #32]
 80069d4:	1b9e      	subge	r6, r3, r6
 80069d6:	1af2      	sublt	r2, r6, r3
 80069d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80069da:	bfbf      	itttt	lt
 80069dc:	9608      	strlt	r6, [sp, #32]
 80069de:	189b      	addlt	r3, r3, r2
 80069e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80069e2:	2600      	movlt	r6, #0
 80069e4:	f1b8 0f00 	cmp.w	r8, #0
 80069e8:	bfb9      	ittee	lt
 80069ea:	eba9 0508 	sublt.w	r5, r9, r8
 80069ee:	2300      	movlt	r3, #0
 80069f0:	464d      	movge	r5, r9
 80069f2:	4643      	movge	r3, r8
 80069f4:	e781      	b.n	80068fa <_dtoa_r+0x70a>
 80069f6:	9e08      	ldr	r6, [sp, #32]
 80069f8:	464d      	mov	r5, r9
 80069fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069fc:	e786      	b.n	800690c <_dtoa_r+0x71c>
 80069fe:	9a08      	ldr	r2, [sp, #32]
 8006a00:	e7ad      	b.n	800695e <_dtoa_r+0x76e>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e7d6      	b.n	80069b4 <_dtoa_r+0x7c4>
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	e7d4      	b.n	80069b4 <_dtoa_r+0x7c4>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9308      	str	r3, [sp, #32]
 8006a0e:	6933      	ldr	r3, [r6, #16]
 8006a10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a14:	6918      	ldr	r0, [r3, #16]
 8006a16:	f000 fe9c 	bl	8007752 <__hi0bits>
 8006a1a:	f1c0 0020 	rsb	r0, r0, #32
 8006a1e:	9b07      	ldr	r3, [sp, #28]
 8006a20:	4418      	add	r0, r3
 8006a22:	f010 001f 	ands.w	r0, r0, #31
 8006a26:	d047      	beq.n	8006ab8 <_dtoa_r+0x8c8>
 8006a28:	f1c0 0320 	rsb	r3, r0, #32
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	dd3b      	ble.n	8006aa8 <_dtoa_r+0x8b8>
 8006a30:	9b07      	ldr	r3, [sp, #28]
 8006a32:	f1c0 001c 	rsb	r0, r0, #28
 8006a36:	4481      	add	r9, r0
 8006a38:	4405      	add	r5, r0
 8006a3a:	4403      	add	r3, r0
 8006a3c:	9307      	str	r3, [sp, #28]
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	dd05      	ble.n	8006a50 <_dtoa_r+0x860>
 8006a44:	4659      	mov	r1, fp
 8006a46:	464a      	mov	r2, r9
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 ffbd 	bl	80079c8 <__lshift>
 8006a4e:	4683      	mov	fp, r0
 8006a50:	9b07      	ldr	r3, [sp, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dd05      	ble.n	8006a62 <_dtoa_r+0x872>
 8006a56:	4631      	mov	r1, r6
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 ffb4 	bl	80079c8 <__lshift>
 8006a60:	4606      	mov	r6, r0
 8006a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a64:	b353      	cbz	r3, 8006abc <_dtoa_r+0x8cc>
 8006a66:	4631      	mov	r1, r6
 8006a68:	4658      	mov	r0, fp
 8006a6a:	f001 f801 	bl	8007a70 <__mcmp>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	da24      	bge.n	8006abc <_dtoa_r+0x8cc>
 8006a72:	2300      	movs	r3, #0
 8006a74:	4659      	mov	r1, fp
 8006a76:	220a      	movs	r2, #10
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 fdf1 	bl	8007660 <__multadd>
 8006a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a84:	4683      	mov	fp, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8144 	beq.w	8006d14 <_dtoa_r+0xb24>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4639      	mov	r1, r7
 8006a90:	220a      	movs	r2, #10
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 fde4 	bl	8007660 <__multadd>
 8006a98:	9b04      	ldr	r3, [sp, #16]
 8006a9a:	4607      	mov	r7, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dc4d      	bgt.n	8006b3c <_dtoa_r+0x94c>
 8006aa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd4a      	ble.n	8006b3c <_dtoa_r+0x94c>
 8006aa6:	e011      	b.n	8006acc <_dtoa_r+0x8dc>
 8006aa8:	d0c9      	beq.n	8006a3e <_dtoa_r+0x84e>
 8006aaa:	9a07      	ldr	r2, [sp, #28]
 8006aac:	331c      	adds	r3, #28
 8006aae:	441a      	add	r2, r3
 8006ab0:	4499      	add	r9, r3
 8006ab2:	441d      	add	r5, r3
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	e7c1      	b.n	8006a3c <_dtoa_r+0x84c>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	e7f6      	b.n	8006aaa <_dtoa_r+0x8ba>
 8006abc:	f1b8 0f00 	cmp.w	r8, #0
 8006ac0:	dc36      	bgt.n	8006b30 <_dtoa_r+0x940>
 8006ac2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	dd33      	ble.n	8006b30 <_dtoa_r+0x940>
 8006ac8:	f8cd 8010 	str.w	r8, [sp, #16]
 8006acc:	9b04      	ldr	r3, [sp, #16]
 8006ace:	b963      	cbnz	r3, 8006aea <_dtoa_r+0x8fa>
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	2205      	movs	r2, #5
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 fdc3 	bl	8007660 <__multadd>
 8006ada:	4601      	mov	r1, r0
 8006adc:	4606      	mov	r6, r0
 8006ade:	4658      	mov	r0, fp
 8006ae0:	f000 ffc6 	bl	8007a70 <__mcmp>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f73f add3 	bgt.w	8006690 <_dtoa_r+0x4a0>
 8006aea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006aec:	9d06      	ldr	r5, [sp, #24]
 8006aee:	ea6f 0a03 	mvn.w	sl, r3
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	4631      	mov	r1, r6
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fd9a 	bl	8007632 <_Bfree>
 8006afe:	2f00      	cmp	r7, #0
 8006b00:	f43f aebd 	beq.w	800687e <_dtoa_r+0x68e>
 8006b04:	f1b9 0f00 	cmp.w	r9, #0
 8006b08:	d005      	beq.n	8006b16 <_dtoa_r+0x926>
 8006b0a:	45b9      	cmp	r9, r7
 8006b0c:	d003      	beq.n	8006b16 <_dtoa_r+0x926>
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fd8e 	bl	8007632 <_Bfree>
 8006b16:	4639      	mov	r1, r7
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 fd8a 	bl	8007632 <_Bfree>
 8006b1e:	e6ae      	b.n	800687e <_dtoa_r+0x68e>
 8006b20:	2600      	movs	r6, #0
 8006b22:	4637      	mov	r7, r6
 8006b24:	e7e1      	b.n	8006aea <_dtoa_r+0x8fa>
 8006b26:	46ba      	mov	sl, r7
 8006b28:	4637      	mov	r7, r6
 8006b2a:	e5b1      	b.n	8006690 <_dtoa_r+0x4a0>
 8006b2c:	40240000 	.word	0x40240000
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	f8cd 8010 	str.w	r8, [sp, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80f3 	beq.w	8006d22 <_dtoa_r+0xb32>
 8006b3c:	2d00      	cmp	r5, #0
 8006b3e:	dd05      	ble.n	8006b4c <_dtoa_r+0x95c>
 8006b40:	4639      	mov	r1, r7
 8006b42:	462a      	mov	r2, r5
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 ff3f 	bl	80079c8 <__lshift>
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	9b08      	ldr	r3, [sp, #32]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d04c      	beq.n	8006bec <_dtoa_r+0x9fc>
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fd38 	bl	80075ca <_Balloc>
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	f107 010c 	add.w	r1, r7, #12
 8006b62:	3202      	adds	r2, #2
 8006b64:	0092      	lsls	r2, r2, #2
 8006b66:	300c      	adds	r0, #12
 8006b68:	f000 fd24 	bl	80075b4 <memcpy>
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 ff29 	bl	80079c8 <__lshift>
 8006b76:	46b9      	mov	r9, r7
 8006b78:	4607      	mov	r7, r0
 8006b7a:	9b06      	ldr	r3, [sp, #24]
 8006b7c:	9307      	str	r3, [sp, #28]
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	4631      	mov	r1, r6
 8006b88:	4658      	mov	r0, fp
 8006b8a:	f7ff faa3 	bl	80060d4 <quorem>
 8006b8e:	4649      	mov	r1, r9
 8006b90:	4605      	mov	r5, r0
 8006b92:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b96:	4658      	mov	r0, fp
 8006b98:	f000 ff6a 	bl	8007a70 <__mcmp>
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	9002      	str	r0, [sp, #8]
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 ff7e 	bl	8007aa4 <__mdiff>
 8006ba8:	68c3      	ldr	r3, [r0, #12]
 8006baa:	4602      	mov	r2, r0
 8006bac:	bb03      	cbnz	r3, 8006bf0 <_dtoa_r+0xa00>
 8006bae:	4601      	mov	r1, r0
 8006bb0:	9009      	str	r0, [sp, #36]	; 0x24
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 ff5c 	bl	8007a70 <__mcmp>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc2:	f000 fd36 	bl	8007632 <_Bfree>
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	b9a3      	cbnz	r3, 8006bf4 <_dtoa_r+0xa04>
 8006bca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bcc:	b992      	cbnz	r2, 8006bf4 <_dtoa_r+0xa04>
 8006bce:	9a08      	ldr	r2, [sp, #32]
 8006bd0:	b982      	cbnz	r2, 8006bf4 <_dtoa_r+0xa04>
 8006bd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bd6:	d029      	beq.n	8006c2c <_dtoa_r+0xa3c>
 8006bd8:	9b02      	ldr	r3, [sp, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd01      	ble.n	8006be2 <_dtoa_r+0x9f2>
 8006bde:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006be2:	9b07      	ldr	r3, [sp, #28]
 8006be4:	1c5d      	adds	r5, r3, #1
 8006be6:	f883 8000 	strb.w	r8, [r3]
 8006bea:	e784      	b.n	8006af6 <_dtoa_r+0x906>
 8006bec:	4638      	mov	r0, r7
 8006bee:	e7c2      	b.n	8006b76 <_dtoa_r+0x986>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e7e3      	b.n	8006bbc <_dtoa_r+0x9cc>
 8006bf4:	9a02      	ldr	r2, [sp, #8]
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	db04      	blt.n	8006c04 <_dtoa_r+0xa14>
 8006bfa:	d123      	bne.n	8006c44 <_dtoa_r+0xa54>
 8006bfc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bfe:	bb0a      	cbnz	r2, 8006c44 <_dtoa_r+0xa54>
 8006c00:	9a08      	ldr	r2, [sp, #32]
 8006c02:	b9fa      	cbnz	r2, 8006c44 <_dtoa_r+0xa54>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	ddec      	ble.n	8006be2 <_dtoa_r+0x9f2>
 8006c08:	4659      	mov	r1, fp
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fedb 	bl	80079c8 <__lshift>
 8006c12:	4631      	mov	r1, r6
 8006c14:	4683      	mov	fp, r0
 8006c16:	f000 ff2b 	bl	8007a70 <__mcmp>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	dc03      	bgt.n	8006c26 <_dtoa_r+0xa36>
 8006c1e:	d1e0      	bne.n	8006be2 <_dtoa_r+0x9f2>
 8006c20:	f018 0f01 	tst.w	r8, #1
 8006c24:	d0dd      	beq.n	8006be2 <_dtoa_r+0x9f2>
 8006c26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c2a:	d1d8      	bne.n	8006bde <_dtoa_r+0x9ee>
 8006c2c:	9b07      	ldr	r3, [sp, #28]
 8006c2e:	9a07      	ldr	r2, [sp, #28]
 8006c30:	1c5d      	adds	r5, r3, #1
 8006c32:	2339      	movs	r3, #57	; 0x39
 8006c34:	7013      	strb	r3, [r2, #0]
 8006c36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c3a:	1e6a      	subs	r2, r5, #1
 8006c3c:	2b39      	cmp	r3, #57	; 0x39
 8006c3e:	d04d      	beq.n	8006cdc <_dtoa_r+0xaec>
 8006c40:	3301      	adds	r3, #1
 8006c42:	e052      	b.n	8006cea <_dtoa_r+0xafa>
 8006c44:	9a07      	ldr	r2, [sp, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f102 0501 	add.w	r5, r2, #1
 8006c4c:	dd06      	ble.n	8006c5c <_dtoa_r+0xa6c>
 8006c4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c52:	d0eb      	beq.n	8006c2c <_dtoa_r+0xa3c>
 8006c54:	f108 0801 	add.w	r8, r8, #1
 8006c58:	9b07      	ldr	r3, [sp, #28]
 8006c5a:	e7c4      	b.n	8006be6 <_dtoa_r+0x9f6>
 8006c5c:	9b06      	ldr	r3, [sp, #24]
 8006c5e:	9a04      	ldr	r2, [sp, #16]
 8006c60:	1aeb      	subs	r3, r5, r3
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006c68:	d021      	beq.n	8006cae <_dtoa_r+0xabe>
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	220a      	movs	r2, #10
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fcf5 	bl	8007660 <__multadd>
 8006c76:	45b9      	cmp	r9, r7
 8006c78:	4683      	mov	fp, r0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	f04f 020a 	mov.w	r2, #10
 8006c82:	4649      	mov	r1, r9
 8006c84:	4620      	mov	r0, r4
 8006c86:	d105      	bne.n	8006c94 <_dtoa_r+0xaa4>
 8006c88:	f000 fcea 	bl	8007660 <__multadd>
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	4607      	mov	r7, r0
 8006c90:	9507      	str	r5, [sp, #28]
 8006c92:	e778      	b.n	8006b86 <_dtoa_r+0x996>
 8006c94:	f000 fce4 	bl	8007660 <__multadd>
 8006c98:	4639      	mov	r1, r7
 8006c9a:	4681      	mov	r9, r0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	220a      	movs	r2, #10
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 fcdd 	bl	8007660 <__multadd>
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	e7f2      	b.n	8006c90 <_dtoa_r+0xaa0>
 8006caa:	f04f 0900 	mov.w	r9, #0
 8006cae:	4659      	mov	r1, fp
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fe88 	bl	80079c8 <__lshift>
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4683      	mov	fp, r0
 8006cbc:	f000 fed8 	bl	8007a70 <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	dcb8      	bgt.n	8006c36 <_dtoa_r+0xa46>
 8006cc4:	d102      	bne.n	8006ccc <_dtoa_r+0xadc>
 8006cc6:	f018 0f01 	tst.w	r8, #1
 8006cca:	d1b4      	bne.n	8006c36 <_dtoa_r+0xa46>
 8006ccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cd0:	1e6a      	subs	r2, r5, #1
 8006cd2:	2b30      	cmp	r3, #48	; 0x30
 8006cd4:	f47f af0f 	bne.w	8006af6 <_dtoa_r+0x906>
 8006cd8:	4615      	mov	r5, r2
 8006cda:	e7f7      	b.n	8006ccc <_dtoa_r+0xadc>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d105      	bne.n	8006cee <_dtoa_r+0xafe>
 8006ce2:	2331      	movs	r3, #49	; 0x31
 8006ce4:	9a06      	ldr	r2, [sp, #24]
 8006ce6:	f10a 0a01 	add.w	sl, sl, #1
 8006cea:	7013      	strb	r3, [r2, #0]
 8006cec:	e703      	b.n	8006af6 <_dtoa_r+0x906>
 8006cee:	4615      	mov	r5, r2
 8006cf0:	e7a1      	b.n	8006c36 <_dtoa_r+0xa46>
 8006cf2:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <_dtoa_r+0xb60>)
 8006cf4:	f7ff bae1 	b.w	80062ba <_dtoa_r+0xca>
 8006cf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f47f aabb 	bne.w	8006276 <_dtoa_r+0x86>
 8006d00:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <_dtoa_r+0xb64>)
 8006d02:	f7ff bada 	b.w	80062ba <_dtoa_r+0xca>
 8006d06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	f77f ae3f 	ble.w	800698c <_dtoa_r+0x79c>
 8006d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d10:	9308      	str	r3, [sp, #32]
 8006d12:	e653      	b.n	80069bc <_dtoa_r+0x7cc>
 8006d14:	9b04      	ldr	r3, [sp, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dc03      	bgt.n	8006d22 <_dtoa_r+0xb32>
 8006d1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	f73f aed5 	bgt.w	8006acc <_dtoa_r+0x8dc>
 8006d22:	9d06      	ldr	r5, [sp, #24]
 8006d24:	4631      	mov	r1, r6
 8006d26:	4658      	mov	r0, fp
 8006d28:	f7ff f9d4 	bl	80060d4 <quorem>
 8006d2c:	9b06      	ldr	r3, [sp, #24]
 8006d2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d32:	f805 8b01 	strb.w	r8, [r5], #1
 8006d36:	9a04      	ldr	r2, [sp, #16]
 8006d38:	1aeb      	subs	r3, r5, r3
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	ddb5      	ble.n	8006caa <_dtoa_r+0xaba>
 8006d3e:	4659      	mov	r1, fp
 8006d40:	2300      	movs	r3, #0
 8006d42:	220a      	movs	r2, #10
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fc8b 	bl	8007660 <__multadd>
 8006d4a:	4683      	mov	fp, r0
 8006d4c:	e7ea      	b.n	8006d24 <_dtoa_r+0xb34>
 8006d4e:	bf00      	nop
 8006d50:	08008abc 	.word	0x08008abc
 8006d54:	08008b38 	.word	0x08008b38

08006d58 <std>:
 8006d58:	2300      	movs	r3, #0
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d62:	6083      	str	r3, [r0, #8]
 8006d64:	8181      	strh	r1, [r0, #12]
 8006d66:	6643      	str	r3, [r0, #100]	; 0x64
 8006d68:	81c2      	strh	r2, [r0, #14]
 8006d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d6e:	6183      	str	r3, [r0, #24]
 8006d70:	4619      	mov	r1, r3
 8006d72:	2208      	movs	r2, #8
 8006d74:	305c      	adds	r0, #92	; 0x5c
 8006d76:	f7fd fc79 	bl	800466c <memset>
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <std+0x38>)
 8006d7c:	6224      	str	r4, [r4, #32]
 8006d7e:	6263      	str	r3, [r4, #36]	; 0x24
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <std+0x3c>)
 8006d82:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d84:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <std+0x40>)
 8006d86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d88:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <std+0x44>)
 8006d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	bf00      	nop
 8006d90:	08008465 	.word	0x08008465
 8006d94:	08008487 	.word	0x08008487
 8006d98:	080084bf 	.word	0x080084bf
 8006d9c:	080084e3 	.word	0x080084e3

08006da0 <_cleanup_r>:
 8006da0:	4901      	ldr	r1, [pc, #4]	; (8006da8 <_cleanup_r+0x8>)
 8006da2:	f000 b885 	b.w	8006eb0 <_fwalk_reent>
 8006da6:	bf00      	nop
 8006da8:	080087fd 	.word	0x080087fd

08006dac <__sfmoreglue>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	2568      	movs	r5, #104	; 0x68
 8006db0:	1e4a      	subs	r2, r1, #1
 8006db2:	4355      	muls	r5, r2
 8006db4:	460e      	mov	r6, r1
 8006db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dba:	f001 f859 	bl	8007e70 <_malloc_r>
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	b140      	cbz	r0, 8006dd4 <__sfmoreglue+0x28>
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8006dc8:	300c      	adds	r0, #12
 8006dca:	60a0      	str	r0, [r4, #8]
 8006dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dd0:	f7fd fc4c 	bl	800466c <memset>
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}

08006dd8 <__sinit>:
 8006dd8:	6983      	ldr	r3, [r0, #24]
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	4604      	mov	r4, r0
 8006dde:	bb33      	cbnz	r3, 8006e2e <__sinit+0x56>
 8006de0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006de4:	6503      	str	r3, [r0, #80]	; 0x50
 8006de6:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <__sinit+0x58>)
 8006de8:	4a12      	ldr	r2, [pc, #72]	; (8006e34 <__sinit+0x5c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6282      	str	r2, [r0, #40]	; 0x28
 8006dee:	4298      	cmp	r0, r3
 8006df0:	bf04      	itt	eq
 8006df2:	2301      	moveq	r3, #1
 8006df4:	6183      	streq	r3, [r0, #24]
 8006df6:	f000 f81f 	bl	8006e38 <__sfp>
 8006dfa:	6060      	str	r0, [r4, #4]
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 f81b 	bl	8006e38 <__sfp>
 8006e02:	60a0      	str	r0, [r4, #8]
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 f817 	bl	8006e38 <__sfp>
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	60e0      	str	r0, [r4, #12]
 8006e0e:	2104      	movs	r1, #4
 8006e10:	6860      	ldr	r0, [r4, #4]
 8006e12:	f7ff ffa1 	bl	8006d58 <std>
 8006e16:	2201      	movs	r2, #1
 8006e18:	2109      	movs	r1, #9
 8006e1a:	68a0      	ldr	r0, [r4, #8]
 8006e1c:	f7ff ff9c 	bl	8006d58 <std>
 8006e20:	2202      	movs	r2, #2
 8006e22:	2112      	movs	r1, #18
 8006e24:	68e0      	ldr	r0, [r4, #12]
 8006e26:	f7ff ff97 	bl	8006d58 <std>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	61a3      	str	r3, [r4, #24]
 8006e2e:	bd10      	pop	{r4, pc}
 8006e30:	08008aa8 	.word	0x08008aa8
 8006e34:	08006da1 	.word	0x08006da1

08006e38 <__sfp>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <__sfp+0x70>)
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	681e      	ldr	r6, [r3, #0]
 8006e40:	69b3      	ldr	r3, [r6, #24]
 8006e42:	b913      	cbnz	r3, 8006e4a <__sfp+0x12>
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7ff ffc7 	bl	8006dd8 <__sinit>
 8006e4a:	3648      	adds	r6, #72	; 0x48
 8006e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	d503      	bpl.n	8006e5c <__sfp+0x24>
 8006e54:	6833      	ldr	r3, [r6, #0]
 8006e56:	b133      	cbz	r3, 8006e66 <__sfp+0x2e>
 8006e58:	6836      	ldr	r6, [r6, #0]
 8006e5a:	e7f7      	b.n	8006e4c <__sfp+0x14>
 8006e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e60:	b16d      	cbz	r5, 8006e7e <__sfp+0x46>
 8006e62:	3468      	adds	r4, #104	; 0x68
 8006e64:	e7f4      	b.n	8006e50 <__sfp+0x18>
 8006e66:	2104      	movs	r1, #4
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f7ff ff9f 	bl	8006dac <__sfmoreglue>
 8006e6e:	6030      	str	r0, [r6, #0]
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d1f1      	bne.n	8006e58 <__sfp+0x20>
 8006e74:	230c      	movs	r3, #12
 8006e76:	4604      	mov	r4, r0
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7e:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <__sfp+0x74>)
 8006e80:	6665      	str	r5, [r4, #100]	; 0x64
 8006e82:	e9c4 5500 	strd	r5, r5, [r4]
 8006e86:	60a5      	str	r5, [r4, #8]
 8006e88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006e8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006e90:	2208      	movs	r2, #8
 8006e92:	4629      	mov	r1, r5
 8006e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e98:	f7fd fbe8 	bl	800466c <memset>
 8006e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ea4:	e7e9      	b.n	8006e7a <__sfp+0x42>
 8006ea6:	bf00      	nop
 8006ea8:	08008aa8 	.word	0x08008aa8
 8006eac:	ffff0001 	.word	0xffff0001

08006eb0 <_fwalk_reent>:
 8006eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	2600      	movs	r6, #0
 8006eba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ebe:	b914      	cbnz	r4, 8006ec6 <_fwalk_reent+0x16>
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006eca:	3f01      	subs	r7, #1
 8006ecc:	d501      	bpl.n	8006ed2 <_fwalk_reent+0x22>
 8006ece:	6824      	ldr	r4, [r4, #0]
 8006ed0:	e7f5      	b.n	8006ebe <_fwalk_reent+0xe>
 8006ed2:	89ab      	ldrh	r3, [r5, #12]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d907      	bls.n	8006ee8 <_fwalk_reent+0x38>
 8006ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006edc:	3301      	adds	r3, #1
 8006ede:	d003      	beq.n	8006ee8 <_fwalk_reent+0x38>
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	47c8      	blx	r9
 8006ee6:	4306      	orrs	r6, r0
 8006ee8:	3568      	adds	r5, #104	; 0x68
 8006eea:	e7ee      	b.n	8006eca <_fwalk_reent+0x1a>

08006eec <rshift>:
 8006eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eee:	6906      	ldr	r6, [r0, #16]
 8006ef0:	114b      	asrs	r3, r1, #5
 8006ef2:	429e      	cmp	r6, r3
 8006ef4:	f100 0414 	add.w	r4, r0, #20
 8006ef8:	dd31      	ble.n	8006f5e <rshift+0x72>
 8006efa:	f011 011f 	ands.w	r1, r1, #31
 8006efe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006f02:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006f06:	d108      	bne.n	8006f1a <rshift+0x2e>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	42b2      	cmp	r2, r6
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	d211      	bcs.n	8006f34 <rshift+0x48>
 8006f10:	f852 3b04 	ldr.w	r3, [r2], #4
 8006f14:	f841 3b04 	str.w	r3, [r1], #4
 8006f18:	e7f7      	b.n	8006f0a <rshift+0x1e>
 8006f1a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006f1e:	4623      	mov	r3, r4
 8006f20:	f1c1 0c20 	rsb	ip, r1, #32
 8006f24:	40cd      	lsrs	r5, r1
 8006f26:	3204      	adds	r2, #4
 8006f28:	42b2      	cmp	r2, r6
 8006f2a:	4617      	mov	r7, r2
 8006f2c:	d30d      	bcc.n	8006f4a <rshift+0x5e>
 8006f2e:	601d      	str	r5, [r3, #0]
 8006f30:	b105      	cbz	r5, 8006f34 <rshift+0x48>
 8006f32:	3304      	adds	r3, #4
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	eba3 0204 	sub.w	r2, r3, r4
 8006f3a:	bf08      	it	eq
 8006f3c:	2300      	moveq	r3, #0
 8006f3e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006f42:	6102      	str	r2, [r0, #16]
 8006f44:	bf08      	it	eq
 8006f46:	6143      	streq	r3, [r0, #20]
 8006f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4a:	683f      	ldr	r7, [r7, #0]
 8006f4c:	fa07 f70c 	lsl.w	r7, r7, ip
 8006f50:	433d      	orrs	r5, r7
 8006f52:	f843 5b04 	str.w	r5, [r3], #4
 8006f56:	f852 5b04 	ldr.w	r5, [r2], #4
 8006f5a:	40cd      	lsrs	r5, r1
 8006f5c:	e7e4      	b.n	8006f28 <rshift+0x3c>
 8006f5e:	4623      	mov	r3, r4
 8006f60:	e7e8      	b.n	8006f34 <rshift+0x48>

08006f62 <__hexdig_fun>:
 8006f62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006f66:	2b09      	cmp	r3, #9
 8006f68:	d802      	bhi.n	8006f70 <__hexdig_fun+0xe>
 8006f6a:	3820      	subs	r0, #32
 8006f6c:	b2c0      	uxtb	r0, r0
 8006f6e:	4770      	bx	lr
 8006f70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006f74:	2b05      	cmp	r3, #5
 8006f76:	d801      	bhi.n	8006f7c <__hexdig_fun+0x1a>
 8006f78:	3847      	subs	r0, #71	; 0x47
 8006f7a:	e7f7      	b.n	8006f6c <__hexdig_fun+0xa>
 8006f7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	d801      	bhi.n	8006f88 <__hexdig_fun+0x26>
 8006f84:	3827      	subs	r0, #39	; 0x27
 8006f86:	e7f1      	b.n	8006f6c <__hexdig_fun+0xa>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	4770      	bx	lr

08006f8c <__gethex>:
 8006f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f90:	b08b      	sub	sp, #44	; 0x2c
 8006f92:	9002      	str	r0, [sp, #8]
 8006f94:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006f96:	468a      	mov	sl, r1
 8006f98:	4690      	mov	r8, r2
 8006f9a:	9306      	str	r3, [sp, #24]
 8006f9c:	f000 fad1 	bl	8007542 <__localeconv_l>
 8006fa0:	6803      	ldr	r3, [r0, #0]
 8006fa2:	f04f 0b00 	mov.w	fp, #0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	f7f9 f8d1 	bl	8000150 <strlen>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	9001      	str	r0, [sp, #4]
 8006fb2:	4403      	add	r3, r0
 8006fb4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006fb8:	9307      	str	r3, [sp, #28]
 8006fba:	f8da 3000 	ldr.w	r3, [sl]
 8006fbe:	3302      	adds	r3, #2
 8006fc0:	461f      	mov	r7, r3
 8006fc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006fc6:	2830      	cmp	r0, #48	; 0x30
 8006fc8:	d06c      	beq.n	80070a4 <__gethex+0x118>
 8006fca:	f7ff ffca 	bl	8006f62 <__hexdig_fun>
 8006fce:	4604      	mov	r4, r0
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d16a      	bne.n	80070aa <__gethex+0x11e>
 8006fd4:	9a01      	ldr	r2, [sp, #4]
 8006fd6:	9903      	ldr	r1, [sp, #12]
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f001 fa86 	bl	80084ea <strncmp>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d166      	bne.n	80070b0 <__gethex+0x124>
 8006fe2:	9b01      	ldr	r3, [sp, #4]
 8006fe4:	5cf8      	ldrb	r0, [r7, r3]
 8006fe6:	18fe      	adds	r6, r7, r3
 8006fe8:	f7ff ffbb 	bl	8006f62 <__hexdig_fun>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d062      	beq.n	80070b6 <__gethex+0x12a>
 8006ff0:	4633      	mov	r3, r6
 8006ff2:	7818      	ldrb	r0, [r3, #0]
 8006ff4:	461f      	mov	r7, r3
 8006ff6:	2830      	cmp	r0, #48	; 0x30
 8006ff8:	f103 0301 	add.w	r3, r3, #1
 8006ffc:	d0f9      	beq.n	8006ff2 <__gethex+0x66>
 8006ffe:	f7ff ffb0 	bl	8006f62 <__hexdig_fun>
 8007002:	fab0 f580 	clz	r5, r0
 8007006:	4634      	mov	r4, r6
 8007008:	f04f 0b01 	mov.w	fp, #1
 800700c:	096d      	lsrs	r5, r5, #5
 800700e:	463a      	mov	r2, r7
 8007010:	4616      	mov	r6, r2
 8007012:	7830      	ldrb	r0, [r6, #0]
 8007014:	3201      	adds	r2, #1
 8007016:	f7ff ffa4 	bl	8006f62 <__hexdig_fun>
 800701a:	2800      	cmp	r0, #0
 800701c:	d1f8      	bne.n	8007010 <__gethex+0x84>
 800701e:	9a01      	ldr	r2, [sp, #4]
 8007020:	9903      	ldr	r1, [sp, #12]
 8007022:	4630      	mov	r0, r6
 8007024:	f001 fa61 	bl	80084ea <strncmp>
 8007028:	b950      	cbnz	r0, 8007040 <__gethex+0xb4>
 800702a:	b954      	cbnz	r4, 8007042 <__gethex+0xb6>
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	18f4      	adds	r4, r6, r3
 8007030:	4622      	mov	r2, r4
 8007032:	4616      	mov	r6, r2
 8007034:	7830      	ldrb	r0, [r6, #0]
 8007036:	3201      	adds	r2, #1
 8007038:	f7ff ff93 	bl	8006f62 <__hexdig_fun>
 800703c:	2800      	cmp	r0, #0
 800703e:	d1f8      	bne.n	8007032 <__gethex+0xa6>
 8007040:	b10c      	cbz	r4, 8007046 <__gethex+0xba>
 8007042:	1ba4      	subs	r4, r4, r6
 8007044:	00a4      	lsls	r4, r4, #2
 8007046:	7833      	ldrb	r3, [r6, #0]
 8007048:	2b50      	cmp	r3, #80	; 0x50
 800704a:	d001      	beq.n	8007050 <__gethex+0xc4>
 800704c:	2b70      	cmp	r3, #112	; 0x70
 800704e:	d140      	bne.n	80070d2 <__gethex+0x146>
 8007050:	7873      	ldrb	r3, [r6, #1]
 8007052:	2b2b      	cmp	r3, #43	; 0x2b
 8007054:	d031      	beq.n	80070ba <__gethex+0x12e>
 8007056:	2b2d      	cmp	r3, #45	; 0x2d
 8007058:	d033      	beq.n	80070c2 <__gethex+0x136>
 800705a:	f04f 0900 	mov.w	r9, #0
 800705e:	1c71      	adds	r1, r6, #1
 8007060:	7808      	ldrb	r0, [r1, #0]
 8007062:	f7ff ff7e 	bl	8006f62 <__hexdig_fun>
 8007066:	1e43      	subs	r3, r0, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b18      	cmp	r3, #24
 800706c:	d831      	bhi.n	80070d2 <__gethex+0x146>
 800706e:	f1a0 0210 	sub.w	r2, r0, #16
 8007072:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007076:	f7ff ff74 	bl	8006f62 <__hexdig_fun>
 800707a:	1e43      	subs	r3, r0, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b18      	cmp	r3, #24
 8007080:	d922      	bls.n	80070c8 <__gethex+0x13c>
 8007082:	f1b9 0f00 	cmp.w	r9, #0
 8007086:	d000      	beq.n	800708a <__gethex+0xfe>
 8007088:	4252      	negs	r2, r2
 800708a:	4414      	add	r4, r2
 800708c:	f8ca 1000 	str.w	r1, [sl]
 8007090:	b30d      	cbz	r5, 80070d6 <__gethex+0x14a>
 8007092:	f1bb 0f00 	cmp.w	fp, #0
 8007096:	bf0c      	ite	eq
 8007098:	2706      	moveq	r7, #6
 800709a:	2700      	movne	r7, #0
 800709c:	4638      	mov	r0, r7
 800709e:	b00b      	add	sp, #44	; 0x2c
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a4:	f10b 0b01 	add.w	fp, fp, #1
 80070a8:	e78a      	b.n	8006fc0 <__gethex+0x34>
 80070aa:	2500      	movs	r5, #0
 80070ac:	462c      	mov	r4, r5
 80070ae:	e7ae      	b.n	800700e <__gethex+0x82>
 80070b0:	463e      	mov	r6, r7
 80070b2:	2501      	movs	r5, #1
 80070b4:	e7c7      	b.n	8007046 <__gethex+0xba>
 80070b6:	4604      	mov	r4, r0
 80070b8:	e7fb      	b.n	80070b2 <__gethex+0x126>
 80070ba:	f04f 0900 	mov.w	r9, #0
 80070be:	1cb1      	adds	r1, r6, #2
 80070c0:	e7ce      	b.n	8007060 <__gethex+0xd4>
 80070c2:	f04f 0901 	mov.w	r9, #1
 80070c6:	e7fa      	b.n	80070be <__gethex+0x132>
 80070c8:	230a      	movs	r3, #10
 80070ca:	fb03 0202 	mla	r2, r3, r2, r0
 80070ce:	3a10      	subs	r2, #16
 80070d0:	e7cf      	b.n	8007072 <__gethex+0xe6>
 80070d2:	4631      	mov	r1, r6
 80070d4:	e7da      	b.n	800708c <__gethex+0x100>
 80070d6:	4629      	mov	r1, r5
 80070d8:	1bf3      	subs	r3, r6, r7
 80070da:	3b01      	subs	r3, #1
 80070dc:	2b07      	cmp	r3, #7
 80070de:	dc49      	bgt.n	8007174 <__gethex+0x1e8>
 80070e0:	9802      	ldr	r0, [sp, #8]
 80070e2:	f000 fa72 	bl	80075ca <_Balloc>
 80070e6:	f04f 0b00 	mov.w	fp, #0
 80070ea:	4605      	mov	r5, r0
 80070ec:	46da      	mov	sl, fp
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	f100 0914 	add.w	r9, r0, #20
 80070f4:	f1c3 0301 	rsb	r3, r3, #1
 80070f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80070fc:	9308      	str	r3, [sp, #32]
 80070fe:	42b7      	cmp	r7, r6
 8007100:	d33b      	bcc.n	800717a <__gethex+0x1ee>
 8007102:	9804      	ldr	r0, [sp, #16]
 8007104:	f840 ab04 	str.w	sl, [r0], #4
 8007108:	eba0 0009 	sub.w	r0, r0, r9
 800710c:	1080      	asrs	r0, r0, #2
 800710e:	6128      	str	r0, [r5, #16]
 8007110:	0147      	lsls	r7, r0, #5
 8007112:	4650      	mov	r0, sl
 8007114:	f000 fb1d 	bl	8007752 <__hi0bits>
 8007118:	f8d8 6000 	ldr.w	r6, [r8]
 800711c:	1a3f      	subs	r7, r7, r0
 800711e:	42b7      	cmp	r7, r6
 8007120:	dd64      	ble.n	80071ec <__gethex+0x260>
 8007122:	1bbf      	subs	r7, r7, r6
 8007124:	4639      	mov	r1, r7
 8007126:	4628      	mov	r0, r5
 8007128:	f000 fe27 	bl	8007d7a <__any_on>
 800712c:	4682      	mov	sl, r0
 800712e:	b178      	cbz	r0, 8007150 <__gethex+0x1c4>
 8007130:	f04f 0a01 	mov.w	sl, #1
 8007134:	1e7b      	subs	r3, r7, #1
 8007136:	1159      	asrs	r1, r3, #5
 8007138:	f003 021f 	and.w	r2, r3, #31
 800713c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007140:	fa0a f202 	lsl.w	r2, sl, r2
 8007144:	420a      	tst	r2, r1
 8007146:	d003      	beq.n	8007150 <__gethex+0x1c4>
 8007148:	4553      	cmp	r3, sl
 800714a:	dc46      	bgt.n	80071da <__gethex+0x24e>
 800714c:	f04f 0a02 	mov.w	sl, #2
 8007150:	4639      	mov	r1, r7
 8007152:	4628      	mov	r0, r5
 8007154:	f7ff feca 	bl	8006eec <rshift>
 8007158:	443c      	add	r4, r7
 800715a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800715e:	42a3      	cmp	r3, r4
 8007160:	da52      	bge.n	8007208 <__gethex+0x27c>
 8007162:	4629      	mov	r1, r5
 8007164:	9802      	ldr	r0, [sp, #8]
 8007166:	f000 fa64 	bl	8007632 <_Bfree>
 800716a:	2300      	movs	r3, #0
 800716c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800716e:	27a3      	movs	r7, #163	; 0xa3
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e793      	b.n	800709c <__gethex+0x110>
 8007174:	3101      	adds	r1, #1
 8007176:	105b      	asrs	r3, r3, #1
 8007178:	e7b0      	b.n	80070dc <__gethex+0x150>
 800717a:	1e73      	subs	r3, r6, #1
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	9a07      	ldr	r2, [sp, #28]
 8007180:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007184:	4293      	cmp	r3, r2
 8007186:	d018      	beq.n	80071ba <__gethex+0x22e>
 8007188:	f1bb 0f20 	cmp.w	fp, #32
 800718c:	d107      	bne.n	800719e <__gethex+0x212>
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	f8c3 a000 	str.w	sl, [r3]
 8007194:	f04f 0a00 	mov.w	sl, #0
 8007198:	46d3      	mov	fp, sl
 800719a:	3304      	adds	r3, #4
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80071a2:	f7ff fede 	bl	8006f62 <__hexdig_fun>
 80071a6:	f000 000f 	and.w	r0, r0, #15
 80071aa:	fa00 f00b 	lsl.w	r0, r0, fp
 80071ae:	ea4a 0a00 	orr.w	sl, sl, r0
 80071b2:	f10b 0b04 	add.w	fp, fp, #4
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	e00d      	b.n	80071d6 <__gethex+0x24a>
 80071ba:	9b05      	ldr	r3, [sp, #20]
 80071bc:	9a08      	ldr	r2, [sp, #32]
 80071be:	4413      	add	r3, r2
 80071c0:	42bb      	cmp	r3, r7
 80071c2:	d3e1      	bcc.n	8007188 <__gethex+0x1fc>
 80071c4:	4618      	mov	r0, r3
 80071c6:	9a01      	ldr	r2, [sp, #4]
 80071c8:	9903      	ldr	r1, [sp, #12]
 80071ca:	9309      	str	r3, [sp, #36]	; 0x24
 80071cc:	f001 f98d 	bl	80084ea <strncmp>
 80071d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d1d8      	bne.n	8007188 <__gethex+0x1fc>
 80071d6:	461e      	mov	r6, r3
 80071d8:	e791      	b.n	80070fe <__gethex+0x172>
 80071da:	1eb9      	subs	r1, r7, #2
 80071dc:	4628      	mov	r0, r5
 80071de:	f000 fdcc 	bl	8007d7a <__any_on>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d0b2      	beq.n	800714c <__gethex+0x1c0>
 80071e6:	f04f 0a03 	mov.w	sl, #3
 80071ea:	e7b1      	b.n	8007150 <__gethex+0x1c4>
 80071ec:	da09      	bge.n	8007202 <__gethex+0x276>
 80071ee:	1bf7      	subs	r7, r6, r7
 80071f0:	4629      	mov	r1, r5
 80071f2:	463a      	mov	r2, r7
 80071f4:	9802      	ldr	r0, [sp, #8]
 80071f6:	f000 fbe7 	bl	80079c8 <__lshift>
 80071fa:	4605      	mov	r5, r0
 80071fc:	1be4      	subs	r4, r4, r7
 80071fe:	f100 0914 	add.w	r9, r0, #20
 8007202:	f04f 0a00 	mov.w	sl, #0
 8007206:	e7a8      	b.n	800715a <__gethex+0x1ce>
 8007208:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800720c:	42a0      	cmp	r0, r4
 800720e:	dd6b      	ble.n	80072e8 <__gethex+0x35c>
 8007210:	1b04      	subs	r4, r0, r4
 8007212:	42a6      	cmp	r6, r4
 8007214:	dc2e      	bgt.n	8007274 <__gethex+0x2e8>
 8007216:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d022      	beq.n	8007264 <__gethex+0x2d8>
 800721e:	2b03      	cmp	r3, #3
 8007220:	d024      	beq.n	800726c <__gethex+0x2e0>
 8007222:	2b01      	cmp	r3, #1
 8007224:	d115      	bne.n	8007252 <__gethex+0x2c6>
 8007226:	42a6      	cmp	r6, r4
 8007228:	d113      	bne.n	8007252 <__gethex+0x2c6>
 800722a:	2e01      	cmp	r6, #1
 800722c:	dc0b      	bgt.n	8007246 <__gethex+0x2ba>
 800722e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007232:	9a06      	ldr	r2, [sp, #24]
 8007234:	2762      	movs	r7, #98	; 0x62
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	2301      	movs	r3, #1
 800723a:	612b      	str	r3, [r5, #16]
 800723c:	f8c9 3000 	str.w	r3, [r9]
 8007240:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007242:	601d      	str	r5, [r3, #0]
 8007244:	e72a      	b.n	800709c <__gethex+0x110>
 8007246:	1e71      	subs	r1, r6, #1
 8007248:	4628      	mov	r0, r5
 800724a:	f000 fd96 	bl	8007d7a <__any_on>
 800724e:	2800      	cmp	r0, #0
 8007250:	d1ed      	bne.n	800722e <__gethex+0x2a2>
 8007252:	4629      	mov	r1, r5
 8007254:	9802      	ldr	r0, [sp, #8]
 8007256:	f000 f9ec 	bl	8007632 <_Bfree>
 800725a:	2300      	movs	r3, #0
 800725c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800725e:	2750      	movs	r7, #80	; 0x50
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	e71b      	b.n	800709c <__gethex+0x110>
 8007264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0e1      	beq.n	800722e <__gethex+0x2a2>
 800726a:	e7f2      	b.n	8007252 <__gethex+0x2c6>
 800726c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1dd      	bne.n	800722e <__gethex+0x2a2>
 8007272:	e7ee      	b.n	8007252 <__gethex+0x2c6>
 8007274:	1e67      	subs	r7, r4, #1
 8007276:	f1ba 0f00 	cmp.w	sl, #0
 800727a:	d132      	bne.n	80072e2 <__gethex+0x356>
 800727c:	b127      	cbz	r7, 8007288 <__gethex+0x2fc>
 800727e:	4639      	mov	r1, r7
 8007280:	4628      	mov	r0, r5
 8007282:	f000 fd7a 	bl	8007d7a <__any_on>
 8007286:	4682      	mov	sl, r0
 8007288:	2301      	movs	r3, #1
 800728a:	117a      	asrs	r2, r7, #5
 800728c:	f007 071f 	and.w	r7, r7, #31
 8007290:	fa03 f707 	lsl.w	r7, r3, r7
 8007294:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007298:	4621      	mov	r1, r4
 800729a:	421f      	tst	r7, r3
 800729c:	f04f 0702 	mov.w	r7, #2
 80072a0:	4628      	mov	r0, r5
 80072a2:	bf18      	it	ne
 80072a4:	f04a 0a02 	orrne.w	sl, sl, #2
 80072a8:	1b36      	subs	r6, r6, r4
 80072aa:	f7ff fe1f 	bl	8006eec <rshift>
 80072ae:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80072b2:	f1ba 0f00 	cmp.w	sl, #0
 80072b6:	d048      	beq.n	800734a <__gethex+0x3be>
 80072b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d015      	beq.n	80072ec <__gethex+0x360>
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d017      	beq.n	80072f4 <__gethex+0x368>
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d109      	bne.n	80072dc <__gethex+0x350>
 80072c8:	f01a 0f02 	tst.w	sl, #2
 80072cc:	d006      	beq.n	80072dc <__gethex+0x350>
 80072ce:	f8d9 3000 	ldr.w	r3, [r9]
 80072d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80072d6:	f01a 0f01 	tst.w	sl, #1
 80072da:	d10e      	bne.n	80072fa <__gethex+0x36e>
 80072dc:	f047 0710 	orr.w	r7, r7, #16
 80072e0:	e033      	b.n	800734a <__gethex+0x3be>
 80072e2:	f04f 0a01 	mov.w	sl, #1
 80072e6:	e7cf      	b.n	8007288 <__gethex+0x2fc>
 80072e8:	2701      	movs	r7, #1
 80072ea:	e7e2      	b.n	80072b2 <__gethex+0x326>
 80072ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072ee:	f1c3 0301 	rsb	r3, r3, #1
 80072f2:	9315      	str	r3, [sp, #84]	; 0x54
 80072f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f0      	beq.n	80072dc <__gethex+0x350>
 80072fa:	f04f 0c00 	mov.w	ip, #0
 80072fe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007302:	f105 0314 	add.w	r3, r5, #20
 8007306:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800730a:	eb03 010a 	add.w	r1, r3, sl
 800730e:	4618      	mov	r0, r3
 8007310:	f853 2b04 	ldr.w	r2, [r3], #4
 8007314:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007318:	d01c      	beq.n	8007354 <__gethex+0x3c8>
 800731a:	3201      	adds	r2, #1
 800731c:	6002      	str	r2, [r0, #0]
 800731e:	2f02      	cmp	r7, #2
 8007320:	f105 0314 	add.w	r3, r5, #20
 8007324:	d138      	bne.n	8007398 <__gethex+0x40c>
 8007326:	f8d8 2000 	ldr.w	r2, [r8]
 800732a:	3a01      	subs	r2, #1
 800732c:	42b2      	cmp	r2, r6
 800732e:	d10a      	bne.n	8007346 <__gethex+0x3ba>
 8007330:	2201      	movs	r2, #1
 8007332:	1171      	asrs	r1, r6, #5
 8007334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007338:	f006 061f 	and.w	r6, r6, #31
 800733c:	fa02 f606 	lsl.w	r6, r2, r6
 8007340:	421e      	tst	r6, r3
 8007342:	bf18      	it	ne
 8007344:	4617      	movne	r7, r2
 8007346:	f047 0720 	orr.w	r7, r7, #32
 800734a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800734c:	601d      	str	r5, [r3, #0]
 800734e:	9b06      	ldr	r3, [sp, #24]
 8007350:	601c      	str	r4, [r3, #0]
 8007352:	e6a3      	b.n	800709c <__gethex+0x110>
 8007354:	4299      	cmp	r1, r3
 8007356:	f843 cc04 	str.w	ip, [r3, #-4]
 800735a:	d8d8      	bhi.n	800730e <__gethex+0x382>
 800735c:	68ab      	ldr	r3, [r5, #8]
 800735e:	4599      	cmp	r9, r3
 8007360:	db12      	blt.n	8007388 <__gethex+0x3fc>
 8007362:	6869      	ldr	r1, [r5, #4]
 8007364:	9802      	ldr	r0, [sp, #8]
 8007366:	3101      	adds	r1, #1
 8007368:	f000 f92f 	bl	80075ca <_Balloc>
 800736c:	4683      	mov	fp, r0
 800736e:	692a      	ldr	r2, [r5, #16]
 8007370:	f105 010c 	add.w	r1, r5, #12
 8007374:	3202      	adds	r2, #2
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	300c      	adds	r0, #12
 800737a:	f000 f91b 	bl	80075b4 <memcpy>
 800737e:	4629      	mov	r1, r5
 8007380:	9802      	ldr	r0, [sp, #8]
 8007382:	f000 f956 	bl	8007632 <_Bfree>
 8007386:	465d      	mov	r5, fp
 8007388:	692b      	ldr	r3, [r5, #16]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	612a      	str	r2, [r5, #16]
 800738e:	2201      	movs	r2, #1
 8007390:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007394:	615a      	str	r2, [r3, #20]
 8007396:	e7c2      	b.n	800731e <__gethex+0x392>
 8007398:	692a      	ldr	r2, [r5, #16]
 800739a:	454a      	cmp	r2, r9
 800739c:	dd0b      	ble.n	80073b6 <__gethex+0x42a>
 800739e:	2101      	movs	r1, #1
 80073a0:	4628      	mov	r0, r5
 80073a2:	f7ff fda3 	bl	8006eec <rshift>
 80073a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073aa:	3401      	adds	r4, #1
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	f6ff aed8 	blt.w	8007162 <__gethex+0x1d6>
 80073b2:	2701      	movs	r7, #1
 80073b4:	e7c7      	b.n	8007346 <__gethex+0x3ba>
 80073b6:	f016 061f 	ands.w	r6, r6, #31
 80073ba:	d0fa      	beq.n	80073b2 <__gethex+0x426>
 80073bc:	449a      	add	sl, r3
 80073be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80073c2:	f000 f9c6 	bl	8007752 <__hi0bits>
 80073c6:	f1c6 0620 	rsb	r6, r6, #32
 80073ca:	42b0      	cmp	r0, r6
 80073cc:	dbe7      	blt.n	800739e <__gethex+0x412>
 80073ce:	e7f0      	b.n	80073b2 <__gethex+0x426>

080073d0 <L_shift>:
 80073d0:	f1c2 0208 	rsb	r2, r2, #8
 80073d4:	0092      	lsls	r2, r2, #2
 80073d6:	b570      	push	{r4, r5, r6, lr}
 80073d8:	f1c2 0620 	rsb	r6, r2, #32
 80073dc:	6843      	ldr	r3, [r0, #4]
 80073de:	6804      	ldr	r4, [r0, #0]
 80073e0:	fa03 f506 	lsl.w	r5, r3, r6
 80073e4:	432c      	orrs	r4, r5
 80073e6:	40d3      	lsrs	r3, r2
 80073e8:	6004      	str	r4, [r0, #0]
 80073ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80073ee:	4288      	cmp	r0, r1
 80073f0:	d3f4      	bcc.n	80073dc <L_shift+0xc>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}

080073f4 <__match>:
 80073f4:	b530      	push	{r4, r5, lr}
 80073f6:	6803      	ldr	r3, [r0, #0]
 80073f8:	3301      	adds	r3, #1
 80073fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073fe:	b914      	cbnz	r4, 8007406 <__match+0x12>
 8007400:	6003      	str	r3, [r0, #0]
 8007402:	2001      	movs	r0, #1
 8007404:	bd30      	pop	{r4, r5, pc}
 8007406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800740a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800740e:	2d19      	cmp	r5, #25
 8007410:	bf98      	it	ls
 8007412:	3220      	addls	r2, #32
 8007414:	42a2      	cmp	r2, r4
 8007416:	d0f0      	beq.n	80073fa <__match+0x6>
 8007418:	2000      	movs	r0, #0
 800741a:	e7f3      	b.n	8007404 <__match+0x10>

0800741c <__hexnan>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	2500      	movs	r5, #0
 8007422:	680b      	ldr	r3, [r1, #0]
 8007424:	4682      	mov	sl, r0
 8007426:	115f      	asrs	r7, r3, #5
 8007428:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800742c:	f013 031f 	ands.w	r3, r3, #31
 8007430:	bf18      	it	ne
 8007432:	3704      	addne	r7, #4
 8007434:	1f3e      	subs	r6, r7, #4
 8007436:	4690      	mov	r8, r2
 8007438:	46b1      	mov	r9, r6
 800743a:	4634      	mov	r4, r6
 800743c:	46ab      	mov	fp, r5
 800743e:	b087      	sub	sp, #28
 8007440:	6801      	ldr	r1, [r0, #0]
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	f847 5c04 	str.w	r5, [r7, #-4]
 8007448:	9502      	str	r5, [sp, #8]
 800744a:	784a      	ldrb	r2, [r1, #1]
 800744c:	1c4b      	adds	r3, r1, #1
 800744e:	9303      	str	r3, [sp, #12]
 8007450:	b342      	cbz	r2, 80074a4 <__hexnan+0x88>
 8007452:	4610      	mov	r0, r2
 8007454:	9105      	str	r1, [sp, #20]
 8007456:	9204      	str	r2, [sp, #16]
 8007458:	f7ff fd83 	bl	8006f62 <__hexdig_fun>
 800745c:	2800      	cmp	r0, #0
 800745e:	d143      	bne.n	80074e8 <__hexnan+0xcc>
 8007460:	9a04      	ldr	r2, [sp, #16]
 8007462:	9905      	ldr	r1, [sp, #20]
 8007464:	2a20      	cmp	r2, #32
 8007466:	d818      	bhi.n	800749a <__hexnan+0x7e>
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	459b      	cmp	fp, r3
 800746c:	dd13      	ble.n	8007496 <__hexnan+0x7a>
 800746e:	454c      	cmp	r4, r9
 8007470:	d206      	bcs.n	8007480 <__hexnan+0x64>
 8007472:	2d07      	cmp	r5, #7
 8007474:	dc04      	bgt.n	8007480 <__hexnan+0x64>
 8007476:	462a      	mov	r2, r5
 8007478:	4649      	mov	r1, r9
 800747a:	4620      	mov	r0, r4
 800747c:	f7ff ffa8 	bl	80073d0 <L_shift>
 8007480:	4544      	cmp	r4, r8
 8007482:	d944      	bls.n	800750e <__hexnan+0xf2>
 8007484:	2300      	movs	r3, #0
 8007486:	f1a4 0904 	sub.w	r9, r4, #4
 800748a:	f844 3c04 	str.w	r3, [r4, #-4]
 800748e:	461d      	mov	r5, r3
 8007490:	464c      	mov	r4, r9
 8007492:	f8cd b008 	str.w	fp, [sp, #8]
 8007496:	9903      	ldr	r1, [sp, #12]
 8007498:	e7d7      	b.n	800744a <__hexnan+0x2e>
 800749a:	2a29      	cmp	r2, #41	; 0x29
 800749c:	d14a      	bne.n	8007534 <__hexnan+0x118>
 800749e:	3102      	adds	r1, #2
 80074a0:	f8ca 1000 	str.w	r1, [sl]
 80074a4:	f1bb 0f00 	cmp.w	fp, #0
 80074a8:	d044      	beq.n	8007534 <__hexnan+0x118>
 80074aa:	454c      	cmp	r4, r9
 80074ac:	d206      	bcs.n	80074bc <__hexnan+0xa0>
 80074ae:	2d07      	cmp	r5, #7
 80074b0:	dc04      	bgt.n	80074bc <__hexnan+0xa0>
 80074b2:	462a      	mov	r2, r5
 80074b4:	4649      	mov	r1, r9
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7ff ff8a 	bl	80073d0 <L_shift>
 80074bc:	4544      	cmp	r4, r8
 80074be:	d928      	bls.n	8007512 <__hexnan+0xf6>
 80074c0:	4643      	mov	r3, r8
 80074c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80074c6:	42a6      	cmp	r6, r4
 80074c8:	f843 2b04 	str.w	r2, [r3], #4
 80074cc:	d2f9      	bcs.n	80074c2 <__hexnan+0xa6>
 80074ce:	2200      	movs	r2, #0
 80074d0:	f843 2b04 	str.w	r2, [r3], #4
 80074d4:	429e      	cmp	r6, r3
 80074d6:	d2fb      	bcs.n	80074d0 <__hexnan+0xb4>
 80074d8:	6833      	ldr	r3, [r6, #0]
 80074da:	b91b      	cbnz	r3, 80074e4 <__hexnan+0xc8>
 80074dc:	4546      	cmp	r6, r8
 80074de:	d127      	bne.n	8007530 <__hexnan+0x114>
 80074e0:	2301      	movs	r3, #1
 80074e2:	6033      	str	r3, [r6, #0]
 80074e4:	2005      	movs	r0, #5
 80074e6:	e026      	b.n	8007536 <__hexnan+0x11a>
 80074e8:	3501      	adds	r5, #1
 80074ea:	2d08      	cmp	r5, #8
 80074ec:	f10b 0b01 	add.w	fp, fp, #1
 80074f0:	dd06      	ble.n	8007500 <__hexnan+0xe4>
 80074f2:	4544      	cmp	r4, r8
 80074f4:	d9cf      	bls.n	8007496 <__hexnan+0x7a>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2501      	movs	r5, #1
 80074fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80074fe:	3c04      	subs	r4, #4
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	f000 000f 	and.w	r0, r0, #15
 8007506:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	e7c3      	b.n	8007496 <__hexnan+0x7a>
 800750e:	2508      	movs	r5, #8
 8007510:	e7c1      	b.n	8007496 <__hexnan+0x7a>
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0df      	beq.n	80074d8 <__hexnan+0xbc>
 8007518:	f04f 32ff 	mov.w	r2, #4294967295
 800751c:	f1c3 0320 	rsb	r3, r3, #32
 8007520:	fa22 f303 	lsr.w	r3, r2, r3
 8007524:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007528:	401a      	ands	r2, r3
 800752a:	f847 2c04 	str.w	r2, [r7, #-4]
 800752e:	e7d3      	b.n	80074d8 <__hexnan+0xbc>
 8007530:	3e04      	subs	r6, #4
 8007532:	e7d1      	b.n	80074d8 <__hexnan+0xbc>
 8007534:	2004      	movs	r0, #4
 8007536:	b007      	add	sp, #28
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800753c <__locale_ctype_ptr_l>:
 800753c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007540:	4770      	bx	lr

08007542 <__localeconv_l>:
 8007542:	30f0      	adds	r0, #240	; 0xf0
 8007544:	4770      	bx	lr
	...

08007548 <_localeconv_r>:
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <_localeconv_r+0x14>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a18      	ldr	r0, [r3, #32]
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <_localeconv_r+0x18>)
 8007550:	2800      	cmp	r0, #0
 8007552:	bf08      	it	eq
 8007554:	4618      	moveq	r0, r3
 8007556:	30f0      	adds	r0, #240	; 0xf0
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	2000000c 	.word	0x2000000c
 8007560:	20000070 	.word	0x20000070

08007564 <malloc>:
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <malloc+0xc>)
 8007566:	4601      	mov	r1, r0
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	f000 bc81 	b.w	8007e70 <_malloc_r>
 800756e:	bf00      	nop
 8007570:	2000000c 	.word	0x2000000c

08007574 <__ascii_mbtowc>:
 8007574:	b082      	sub	sp, #8
 8007576:	b901      	cbnz	r1, 800757a <__ascii_mbtowc+0x6>
 8007578:	a901      	add	r1, sp, #4
 800757a:	b142      	cbz	r2, 800758e <__ascii_mbtowc+0x1a>
 800757c:	b14b      	cbz	r3, 8007592 <__ascii_mbtowc+0x1e>
 800757e:	7813      	ldrb	r3, [r2, #0]
 8007580:	600b      	str	r3, [r1, #0]
 8007582:	7812      	ldrb	r2, [r2, #0]
 8007584:	1c10      	adds	r0, r2, #0
 8007586:	bf18      	it	ne
 8007588:	2001      	movne	r0, #1
 800758a:	b002      	add	sp, #8
 800758c:	4770      	bx	lr
 800758e:	4610      	mov	r0, r2
 8007590:	e7fb      	b.n	800758a <__ascii_mbtowc+0x16>
 8007592:	f06f 0001 	mvn.w	r0, #1
 8007596:	e7f8      	b.n	800758a <__ascii_mbtowc+0x16>

08007598 <memchr>:
 8007598:	b510      	push	{r4, lr}
 800759a:	b2c9      	uxtb	r1, r1
 800759c:	4402      	add	r2, r0
 800759e:	4290      	cmp	r0, r2
 80075a0:	4603      	mov	r3, r0
 80075a2:	d101      	bne.n	80075a8 <memchr+0x10>
 80075a4:	2300      	movs	r3, #0
 80075a6:	e003      	b.n	80075b0 <memchr+0x18>
 80075a8:	781c      	ldrb	r4, [r3, #0]
 80075aa:	3001      	adds	r0, #1
 80075ac:	428c      	cmp	r4, r1
 80075ae:	d1f6      	bne.n	800759e <memchr+0x6>
 80075b0:	4618      	mov	r0, r3
 80075b2:	bd10      	pop	{r4, pc}

080075b4 <memcpy>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	1e43      	subs	r3, r0, #1
 80075b8:	440a      	add	r2, r1
 80075ba:	4291      	cmp	r1, r2
 80075bc:	d100      	bne.n	80075c0 <memcpy+0xc>
 80075be:	bd10      	pop	{r4, pc}
 80075c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075c8:	e7f7      	b.n	80075ba <memcpy+0x6>

080075ca <_Balloc>:
 80075ca:	b570      	push	{r4, r5, r6, lr}
 80075cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075ce:	4604      	mov	r4, r0
 80075d0:	460e      	mov	r6, r1
 80075d2:	b93d      	cbnz	r5, 80075e4 <_Balloc+0x1a>
 80075d4:	2010      	movs	r0, #16
 80075d6:	f7ff ffc5 	bl	8007564 <malloc>
 80075da:	6260      	str	r0, [r4, #36]	; 0x24
 80075dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075e0:	6005      	str	r5, [r0, #0]
 80075e2:	60c5      	str	r5, [r0, #12]
 80075e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80075e6:	68eb      	ldr	r3, [r5, #12]
 80075e8:	b183      	cbz	r3, 800760c <_Balloc+0x42>
 80075ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80075f2:	b9b8      	cbnz	r0, 8007624 <_Balloc+0x5a>
 80075f4:	2101      	movs	r1, #1
 80075f6:	fa01 f506 	lsl.w	r5, r1, r6
 80075fa:	1d6a      	adds	r2, r5, #5
 80075fc:	0092      	lsls	r2, r2, #2
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 fbdc 	bl	8007dbc <_calloc_r>
 8007604:	b160      	cbz	r0, 8007620 <_Balloc+0x56>
 8007606:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800760a:	e00e      	b.n	800762a <_Balloc+0x60>
 800760c:	2221      	movs	r2, #33	; 0x21
 800760e:	2104      	movs	r1, #4
 8007610:	4620      	mov	r0, r4
 8007612:	f000 fbd3 	bl	8007dbc <_calloc_r>
 8007616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007618:	60e8      	str	r0, [r5, #12]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e4      	bne.n	80075ea <_Balloc+0x20>
 8007620:	2000      	movs	r0, #0
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	6802      	ldr	r2, [r0, #0]
 8007626:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800762a:	2300      	movs	r3, #0
 800762c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007630:	e7f7      	b.n	8007622 <_Balloc+0x58>

08007632 <_Bfree>:
 8007632:	b570      	push	{r4, r5, r6, lr}
 8007634:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007636:	4606      	mov	r6, r0
 8007638:	460d      	mov	r5, r1
 800763a:	b93c      	cbnz	r4, 800764c <_Bfree+0x1a>
 800763c:	2010      	movs	r0, #16
 800763e:	f7ff ff91 	bl	8007564 <malloc>
 8007642:	6270      	str	r0, [r6, #36]	; 0x24
 8007644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007648:	6004      	str	r4, [r0, #0]
 800764a:	60c4      	str	r4, [r0, #12]
 800764c:	b13d      	cbz	r5, 800765e <_Bfree+0x2c>
 800764e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007650:	686a      	ldr	r2, [r5, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007658:	6029      	str	r1, [r5, #0]
 800765a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800765e:	bd70      	pop	{r4, r5, r6, pc}

08007660 <__multadd>:
 8007660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007664:	461f      	mov	r7, r3
 8007666:	4606      	mov	r6, r0
 8007668:	460c      	mov	r4, r1
 800766a:	2300      	movs	r3, #0
 800766c:	690d      	ldr	r5, [r1, #16]
 800766e:	f101 0c14 	add.w	ip, r1, #20
 8007672:	f8dc 0000 	ldr.w	r0, [ip]
 8007676:	3301      	adds	r3, #1
 8007678:	b281      	uxth	r1, r0
 800767a:	fb02 7101 	mla	r1, r2, r1, r7
 800767e:	0c00      	lsrs	r0, r0, #16
 8007680:	0c0f      	lsrs	r7, r1, #16
 8007682:	fb02 7000 	mla	r0, r2, r0, r7
 8007686:	b289      	uxth	r1, r1
 8007688:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800768c:	429d      	cmp	r5, r3
 800768e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007692:	f84c 1b04 	str.w	r1, [ip], #4
 8007696:	dcec      	bgt.n	8007672 <__multadd+0x12>
 8007698:	b1d7      	cbz	r7, 80076d0 <__multadd+0x70>
 800769a:	68a3      	ldr	r3, [r4, #8]
 800769c:	42ab      	cmp	r3, r5
 800769e:	dc12      	bgt.n	80076c6 <__multadd+0x66>
 80076a0:	6861      	ldr	r1, [r4, #4]
 80076a2:	4630      	mov	r0, r6
 80076a4:	3101      	adds	r1, #1
 80076a6:	f7ff ff90 	bl	80075ca <_Balloc>
 80076aa:	4680      	mov	r8, r0
 80076ac:	6922      	ldr	r2, [r4, #16]
 80076ae:	f104 010c 	add.w	r1, r4, #12
 80076b2:	3202      	adds	r2, #2
 80076b4:	0092      	lsls	r2, r2, #2
 80076b6:	300c      	adds	r0, #12
 80076b8:	f7ff ff7c 	bl	80075b4 <memcpy>
 80076bc:	4621      	mov	r1, r4
 80076be:	4630      	mov	r0, r6
 80076c0:	f7ff ffb7 	bl	8007632 <_Bfree>
 80076c4:	4644      	mov	r4, r8
 80076c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076ca:	3501      	adds	r5, #1
 80076cc:	615f      	str	r7, [r3, #20]
 80076ce:	6125      	str	r5, [r4, #16]
 80076d0:	4620      	mov	r0, r4
 80076d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076d6 <__s2b>:
 80076d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076da:	4615      	mov	r5, r2
 80076dc:	2209      	movs	r2, #9
 80076de:	461f      	mov	r7, r3
 80076e0:	3308      	adds	r3, #8
 80076e2:	460c      	mov	r4, r1
 80076e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80076e8:	4606      	mov	r6, r0
 80076ea:	2201      	movs	r2, #1
 80076ec:	2100      	movs	r1, #0
 80076ee:	429a      	cmp	r2, r3
 80076f0:	db20      	blt.n	8007734 <__s2b+0x5e>
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff ff69 	bl	80075ca <_Balloc>
 80076f8:	9b08      	ldr	r3, [sp, #32]
 80076fa:	2d09      	cmp	r5, #9
 80076fc:	6143      	str	r3, [r0, #20]
 80076fe:	f04f 0301 	mov.w	r3, #1
 8007702:	6103      	str	r3, [r0, #16]
 8007704:	dd19      	ble.n	800773a <__s2b+0x64>
 8007706:	f104 0809 	add.w	r8, r4, #9
 800770a:	46c1      	mov	r9, r8
 800770c:	442c      	add	r4, r5
 800770e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007712:	4601      	mov	r1, r0
 8007714:	3b30      	subs	r3, #48	; 0x30
 8007716:	220a      	movs	r2, #10
 8007718:	4630      	mov	r0, r6
 800771a:	f7ff ffa1 	bl	8007660 <__multadd>
 800771e:	45a1      	cmp	r9, r4
 8007720:	d1f5      	bne.n	800770e <__s2b+0x38>
 8007722:	eb08 0405 	add.w	r4, r8, r5
 8007726:	3c08      	subs	r4, #8
 8007728:	1b2d      	subs	r5, r5, r4
 800772a:	1963      	adds	r3, r4, r5
 800772c:	42bb      	cmp	r3, r7
 800772e:	db07      	blt.n	8007740 <__s2b+0x6a>
 8007730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007734:	0052      	lsls	r2, r2, #1
 8007736:	3101      	adds	r1, #1
 8007738:	e7d9      	b.n	80076ee <__s2b+0x18>
 800773a:	340a      	adds	r4, #10
 800773c:	2509      	movs	r5, #9
 800773e:	e7f3      	b.n	8007728 <__s2b+0x52>
 8007740:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007744:	4601      	mov	r1, r0
 8007746:	3b30      	subs	r3, #48	; 0x30
 8007748:	220a      	movs	r2, #10
 800774a:	4630      	mov	r0, r6
 800774c:	f7ff ff88 	bl	8007660 <__multadd>
 8007750:	e7eb      	b.n	800772a <__s2b+0x54>

08007752 <__hi0bits>:
 8007752:	0c02      	lsrs	r2, r0, #16
 8007754:	0412      	lsls	r2, r2, #16
 8007756:	4603      	mov	r3, r0
 8007758:	b9b2      	cbnz	r2, 8007788 <__hi0bits+0x36>
 800775a:	0403      	lsls	r3, r0, #16
 800775c:	2010      	movs	r0, #16
 800775e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007762:	bf04      	itt	eq
 8007764:	021b      	lsleq	r3, r3, #8
 8007766:	3008      	addeq	r0, #8
 8007768:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800776c:	bf04      	itt	eq
 800776e:	011b      	lsleq	r3, r3, #4
 8007770:	3004      	addeq	r0, #4
 8007772:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007776:	bf04      	itt	eq
 8007778:	009b      	lsleq	r3, r3, #2
 800777a:	3002      	addeq	r0, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	db06      	blt.n	800778e <__hi0bits+0x3c>
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	d503      	bpl.n	800778c <__hi0bits+0x3a>
 8007784:	3001      	adds	r0, #1
 8007786:	4770      	bx	lr
 8007788:	2000      	movs	r0, #0
 800778a:	e7e8      	b.n	800775e <__hi0bits+0xc>
 800778c:	2020      	movs	r0, #32
 800778e:	4770      	bx	lr

08007790 <__lo0bits>:
 8007790:	6803      	ldr	r3, [r0, #0]
 8007792:	4601      	mov	r1, r0
 8007794:	f013 0207 	ands.w	r2, r3, #7
 8007798:	d00b      	beq.n	80077b2 <__lo0bits+0x22>
 800779a:	07da      	lsls	r2, r3, #31
 800779c:	d423      	bmi.n	80077e6 <__lo0bits+0x56>
 800779e:	0798      	lsls	r0, r3, #30
 80077a0:	bf49      	itett	mi
 80077a2:	085b      	lsrmi	r3, r3, #1
 80077a4:	089b      	lsrpl	r3, r3, #2
 80077a6:	2001      	movmi	r0, #1
 80077a8:	600b      	strmi	r3, [r1, #0]
 80077aa:	bf5c      	itt	pl
 80077ac:	600b      	strpl	r3, [r1, #0]
 80077ae:	2002      	movpl	r0, #2
 80077b0:	4770      	bx	lr
 80077b2:	b298      	uxth	r0, r3
 80077b4:	b9a8      	cbnz	r0, 80077e2 <__lo0bits+0x52>
 80077b6:	2010      	movs	r0, #16
 80077b8:	0c1b      	lsrs	r3, r3, #16
 80077ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077be:	bf04      	itt	eq
 80077c0:	0a1b      	lsreq	r3, r3, #8
 80077c2:	3008      	addeq	r0, #8
 80077c4:	071a      	lsls	r2, r3, #28
 80077c6:	bf04      	itt	eq
 80077c8:	091b      	lsreq	r3, r3, #4
 80077ca:	3004      	addeq	r0, #4
 80077cc:	079a      	lsls	r2, r3, #30
 80077ce:	bf04      	itt	eq
 80077d0:	089b      	lsreq	r3, r3, #2
 80077d2:	3002      	addeq	r0, #2
 80077d4:	07da      	lsls	r2, r3, #31
 80077d6:	d402      	bmi.n	80077de <__lo0bits+0x4e>
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	d006      	beq.n	80077ea <__lo0bits+0x5a>
 80077dc:	3001      	adds	r0, #1
 80077de:	600b      	str	r3, [r1, #0]
 80077e0:	4770      	bx	lr
 80077e2:	4610      	mov	r0, r2
 80077e4:	e7e9      	b.n	80077ba <__lo0bits+0x2a>
 80077e6:	2000      	movs	r0, #0
 80077e8:	4770      	bx	lr
 80077ea:	2020      	movs	r0, #32
 80077ec:	4770      	bx	lr

080077ee <__i2b>:
 80077ee:	b510      	push	{r4, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	2101      	movs	r1, #1
 80077f4:	f7ff fee9 	bl	80075ca <_Balloc>
 80077f8:	2201      	movs	r2, #1
 80077fa:	6144      	str	r4, [r0, #20]
 80077fc:	6102      	str	r2, [r0, #16]
 80077fe:	bd10      	pop	{r4, pc}

08007800 <__multiply>:
 8007800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	4614      	mov	r4, r2
 8007806:	690a      	ldr	r2, [r1, #16]
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	4688      	mov	r8, r1
 800780c:	429a      	cmp	r2, r3
 800780e:	bfbe      	ittt	lt
 8007810:	460b      	movlt	r3, r1
 8007812:	46a0      	movlt	r8, r4
 8007814:	461c      	movlt	r4, r3
 8007816:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800781a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800781e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007822:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007826:	eb07 0609 	add.w	r6, r7, r9
 800782a:	42b3      	cmp	r3, r6
 800782c:	bfb8      	it	lt
 800782e:	3101      	addlt	r1, #1
 8007830:	f7ff fecb 	bl	80075ca <_Balloc>
 8007834:	f100 0514 	add.w	r5, r0, #20
 8007838:	462b      	mov	r3, r5
 800783a:	2200      	movs	r2, #0
 800783c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007840:	4573      	cmp	r3, lr
 8007842:	d316      	bcc.n	8007872 <__multiply+0x72>
 8007844:	f104 0214 	add.w	r2, r4, #20
 8007848:	f108 0114 	add.w	r1, r8, #20
 800784c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007850:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	9b00      	ldr	r3, [sp, #0]
 8007858:	9201      	str	r2, [sp, #4]
 800785a:	4293      	cmp	r3, r2
 800785c:	d80c      	bhi.n	8007878 <__multiply+0x78>
 800785e:	2e00      	cmp	r6, #0
 8007860:	dd03      	ble.n	800786a <__multiply+0x6a>
 8007862:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007866:	2b00      	cmp	r3, #0
 8007868:	d05d      	beq.n	8007926 <__multiply+0x126>
 800786a:	6106      	str	r6, [r0, #16]
 800786c:	b003      	add	sp, #12
 800786e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007872:	f843 2b04 	str.w	r2, [r3], #4
 8007876:	e7e3      	b.n	8007840 <__multiply+0x40>
 8007878:	f8b2 b000 	ldrh.w	fp, [r2]
 800787c:	f1bb 0f00 	cmp.w	fp, #0
 8007880:	d023      	beq.n	80078ca <__multiply+0xca>
 8007882:	4689      	mov	r9, r1
 8007884:	46ac      	mov	ip, r5
 8007886:	f04f 0800 	mov.w	r8, #0
 800788a:	f859 4b04 	ldr.w	r4, [r9], #4
 800788e:	f8dc a000 	ldr.w	sl, [ip]
 8007892:	b2a3      	uxth	r3, r4
 8007894:	fa1f fa8a 	uxth.w	sl, sl
 8007898:	fb0b a303 	mla	r3, fp, r3, sl
 800789c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078a0:	f8dc 4000 	ldr.w	r4, [ip]
 80078a4:	4443      	add	r3, r8
 80078a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80078ae:	46e2      	mov	sl, ip
 80078b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078ba:	454f      	cmp	r7, r9
 80078bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078c0:	f84a 3b04 	str.w	r3, [sl], #4
 80078c4:	d82b      	bhi.n	800791e <__multiply+0x11e>
 80078c6:	f8cc 8004 	str.w	r8, [ip, #4]
 80078ca:	9b01      	ldr	r3, [sp, #4]
 80078cc:	3204      	adds	r2, #4
 80078ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80078d2:	f1ba 0f00 	cmp.w	sl, #0
 80078d6:	d020      	beq.n	800791a <__multiply+0x11a>
 80078d8:	4689      	mov	r9, r1
 80078da:	46a8      	mov	r8, r5
 80078dc:	f04f 0b00 	mov.w	fp, #0
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	f8b9 c000 	ldrh.w	ip, [r9]
 80078e6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80078f0:	46c4      	mov	ip, r8
 80078f2:	445c      	add	r4, fp
 80078f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078f8:	f84c 3b04 	str.w	r3, [ip], #4
 80078fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007900:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007904:	0c1b      	lsrs	r3, r3, #16
 8007906:	fb0a b303 	mla	r3, sl, r3, fp
 800790a:	454f      	cmp	r7, r9
 800790c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007910:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007914:	d805      	bhi.n	8007922 <__multiply+0x122>
 8007916:	f8c8 3004 	str.w	r3, [r8, #4]
 800791a:	3504      	adds	r5, #4
 800791c:	e79b      	b.n	8007856 <__multiply+0x56>
 800791e:	46d4      	mov	ip, sl
 8007920:	e7b3      	b.n	800788a <__multiply+0x8a>
 8007922:	46e0      	mov	r8, ip
 8007924:	e7dd      	b.n	80078e2 <__multiply+0xe2>
 8007926:	3e01      	subs	r6, #1
 8007928:	e799      	b.n	800785e <__multiply+0x5e>
	...

0800792c <__pow5mult>:
 800792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007930:	4615      	mov	r5, r2
 8007932:	f012 0203 	ands.w	r2, r2, #3
 8007936:	4606      	mov	r6, r0
 8007938:	460f      	mov	r7, r1
 800793a:	d007      	beq.n	800794c <__pow5mult+0x20>
 800793c:	4c21      	ldr	r4, [pc, #132]	; (80079c4 <__pow5mult+0x98>)
 800793e:	3a01      	subs	r2, #1
 8007940:	2300      	movs	r3, #0
 8007942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007946:	f7ff fe8b 	bl	8007660 <__multadd>
 800794a:	4607      	mov	r7, r0
 800794c:	10ad      	asrs	r5, r5, #2
 800794e:	d035      	beq.n	80079bc <__pow5mult+0x90>
 8007950:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007952:	b93c      	cbnz	r4, 8007964 <__pow5mult+0x38>
 8007954:	2010      	movs	r0, #16
 8007956:	f7ff fe05 	bl	8007564 <malloc>
 800795a:	6270      	str	r0, [r6, #36]	; 0x24
 800795c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007960:	6004      	str	r4, [r0, #0]
 8007962:	60c4      	str	r4, [r0, #12]
 8007964:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800796c:	b94c      	cbnz	r4, 8007982 <__pow5mult+0x56>
 800796e:	f240 2171 	movw	r1, #625	; 0x271
 8007972:	4630      	mov	r0, r6
 8007974:	f7ff ff3b 	bl	80077ee <__i2b>
 8007978:	2300      	movs	r3, #0
 800797a:	4604      	mov	r4, r0
 800797c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007980:	6003      	str	r3, [r0, #0]
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	07eb      	lsls	r3, r5, #31
 8007988:	d50a      	bpl.n	80079a0 <__pow5mult+0x74>
 800798a:	4639      	mov	r1, r7
 800798c:	4622      	mov	r2, r4
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff ff36 	bl	8007800 <__multiply>
 8007994:	4681      	mov	r9, r0
 8007996:	4639      	mov	r1, r7
 8007998:	4630      	mov	r0, r6
 800799a:	f7ff fe4a 	bl	8007632 <_Bfree>
 800799e:	464f      	mov	r7, r9
 80079a0:	106d      	asrs	r5, r5, #1
 80079a2:	d00b      	beq.n	80079bc <__pow5mult+0x90>
 80079a4:	6820      	ldr	r0, [r4, #0]
 80079a6:	b938      	cbnz	r0, 80079b8 <__pow5mult+0x8c>
 80079a8:	4622      	mov	r2, r4
 80079aa:	4621      	mov	r1, r4
 80079ac:	4630      	mov	r0, r6
 80079ae:	f7ff ff27 	bl	8007800 <__multiply>
 80079b2:	6020      	str	r0, [r4, #0]
 80079b4:	f8c0 8000 	str.w	r8, [r0]
 80079b8:	4604      	mov	r4, r0
 80079ba:	e7e4      	b.n	8007986 <__pow5mult+0x5a>
 80079bc:	4638      	mov	r0, r7
 80079be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c2:	bf00      	nop
 80079c4:	08008ca8 	.word	0x08008ca8

080079c8 <__lshift>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	460c      	mov	r4, r1
 80079ce:	4607      	mov	r7, r0
 80079d0:	4616      	mov	r6, r2
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079d8:	eb0a 0903 	add.w	r9, sl, r3
 80079dc:	6849      	ldr	r1, [r1, #4]
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	f109 0501 	add.w	r5, r9, #1
 80079e4:	42ab      	cmp	r3, r5
 80079e6:	db32      	blt.n	8007a4e <__lshift+0x86>
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff fdee 	bl	80075ca <_Balloc>
 80079ee:	2300      	movs	r3, #0
 80079f0:	4680      	mov	r8, r0
 80079f2:	461a      	mov	r2, r3
 80079f4:	f100 0114 	add.w	r1, r0, #20
 80079f8:	4553      	cmp	r3, sl
 80079fa:	db2b      	blt.n	8007a54 <__lshift+0x8c>
 80079fc:	6920      	ldr	r0, [r4, #16]
 80079fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a02:	f104 0314 	add.w	r3, r4, #20
 8007a06:	f016 021f 	ands.w	r2, r6, #31
 8007a0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a12:	d025      	beq.n	8007a60 <__lshift+0x98>
 8007a14:	2000      	movs	r0, #0
 8007a16:	f1c2 0e20 	rsb	lr, r2, #32
 8007a1a:	468a      	mov	sl, r1
 8007a1c:	681e      	ldr	r6, [r3, #0]
 8007a1e:	4096      	lsls	r6, r2
 8007a20:	4330      	orrs	r0, r6
 8007a22:	f84a 0b04 	str.w	r0, [sl], #4
 8007a26:	f853 0b04 	ldr.w	r0, [r3], #4
 8007a2a:	459c      	cmp	ip, r3
 8007a2c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007a30:	d814      	bhi.n	8007a5c <__lshift+0x94>
 8007a32:	6048      	str	r0, [r1, #4]
 8007a34:	b108      	cbz	r0, 8007a3a <__lshift+0x72>
 8007a36:	f109 0502 	add.w	r5, r9, #2
 8007a3a:	3d01      	subs	r5, #1
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007a42:	4621      	mov	r1, r4
 8007a44:	f7ff fdf5 	bl	8007632 <_Bfree>
 8007a48:	4640      	mov	r0, r8
 8007a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4e:	3101      	adds	r1, #1
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	e7c7      	b.n	80079e4 <__lshift+0x1c>
 8007a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	e7cd      	b.n	80079f8 <__lshift+0x30>
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	e7dc      	b.n	8007a1a <__lshift+0x52>
 8007a60:	3904      	subs	r1, #4
 8007a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a66:	459c      	cmp	ip, r3
 8007a68:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a6c:	d8f9      	bhi.n	8007a62 <__lshift+0x9a>
 8007a6e:	e7e4      	b.n	8007a3a <__lshift+0x72>

08007a70 <__mcmp>:
 8007a70:	6903      	ldr	r3, [r0, #16]
 8007a72:	690a      	ldr	r2, [r1, #16]
 8007a74:	b530      	push	{r4, r5, lr}
 8007a76:	1a9b      	subs	r3, r3, r2
 8007a78:	d10c      	bne.n	8007a94 <__mcmp+0x24>
 8007a7a:	0092      	lsls	r2, r2, #2
 8007a7c:	3014      	adds	r0, #20
 8007a7e:	3114      	adds	r1, #20
 8007a80:	1884      	adds	r4, r0, r2
 8007a82:	4411      	add	r1, r2
 8007a84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a8c:	4295      	cmp	r5, r2
 8007a8e:	d003      	beq.n	8007a98 <__mcmp+0x28>
 8007a90:	d305      	bcc.n	8007a9e <__mcmp+0x2e>
 8007a92:	2301      	movs	r3, #1
 8007a94:	4618      	mov	r0, r3
 8007a96:	bd30      	pop	{r4, r5, pc}
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	d3f3      	bcc.n	8007a84 <__mcmp+0x14>
 8007a9c:	e7fa      	b.n	8007a94 <__mcmp+0x24>
 8007a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa2:	e7f7      	b.n	8007a94 <__mcmp+0x24>

08007aa4 <__mdiff>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	460d      	mov	r5, r1
 8007aaa:	4607      	mov	r7, r0
 8007aac:	4611      	mov	r1, r2
 8007aae:	4628      	mov	r0, r5
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	f7ff ffdd 	bl	8007a70 <__mcmp>
 8007ab6:	1e06      	subs	r6, r0, #0
 8007ab8:	d108      	bne.n	8007acc <__mdiff+0x28>
 8007aba:	4631      	mov	r1, r6
 8007abc:	4638      	mov	r0, r7
 8007abe:	f7ff fd84 	bl	80075ca <_Balloc>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007acc:	bfa4      	itt	ge
 8007ace:	4623      	movge	r3, r4
 8007ad0:	462c      	movge	r4, r5
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	6861      	ldr	r1, [r4, #4]
 8007ad6:	bfa6      	itte	ge
 8007ad8:	461d      	movge	r5, r3
 8007ada:	2600      	movge	r6, #0
 8007adc:	2601      	movlt	r6, #1
 8007ade:	f7ff fd74 	bl	80075ca <_Balloc>
 8007ae2:	f04f 0e00 	mov.w	lr, #0
 8007ae6:	60c6      	str	r6, [r0, #12]
 8007ae8:	692b      	ldr	r3, [r5, #16]
 8007aea:	6926      	ldr	r6, [r4, #16]
 8007aec:	f104 0214 	add.w	r2, r4, #20
 8007af0:	f105 0914 	add.w	r9, r5, #20
 8007af4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007af8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007afc:	f100 0114 	add.w	r1, r0, #20
 8007b00:	f852 ab04 	ldr.w	sl, [r2], #4
 8007b04:	f859 5b04 	ldr.w	r5, [r9], #4
 8007b08:	fa1f f38a 	uxth.w	r3, sl
 8007b0c:	4473      	add	r3, lr
 8007b0e:	b2ac      	uxth	r4, r5
 8007b10:	1b1b      	subs	r3, r3, r4
 8007b12:	0c2c      	lsrs	r4, r5, #16
 8007b14:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007b18:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007b22:	45c8      	cmp	r8, r9
 8007b24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007b28:	4694      	mov	ip, r2
 8007b2a:	f841 4b04 	str.w	r4, [r1], #4
 8007b2e:	d8e7      	bhi.n	8007b00 <__mdiff+0x5c>
 8007b30:	45bc      	cmp	ip, r7
 8007b32:	d304      	bcc.n	8007b3e <__mdiff+0x9a>
 8007b34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b38:	b183      	cbz	r3, 8007b5c <__mdiff+0xb8>
 8007b3a:	6106      	str	r6, [r0, #16]
 8007b3c:	e7c4      	b.n	8007ac8 <__mdiff+0x24>
 8007b3e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007b42:	b2a2      	uxth	r2, r4
 8007b44:	4472      	add	r2, lr
 8007b46:	1413      	asrs	r3, r2, #16
 8007b48:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007b4c:	b292      	uxth	r2, r2
 8007b4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b52:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007b56:	f841 2b04 	str.w	r2, [r1], #4
 8007b5a:	e7e9      	b.n	8007b30 <__mdiff+0x8c>
 8007b5c:	3e01      	subs	r6, #1
 8007b5e:	e7e9      	b.n	8007b34 <__mdiff+0x90>

08007b60 <__ulp>:
 8007b60:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <__ulp+0x44>)
 8007b62:	400b      	ands	r3, r1
 8007b64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	dd02      	ble.n	8007b72 <__ulp+0x12>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4770      	bx	lr
 8007b72:	425b      	negs	r3, r3
 8007b74:	151b      	asrs	r3, r3, #20
 8007b76:	2b13      	cmp	r3, #19
 8007b78:	f04f 0000 	mov.w	r0, #0
 8007b7c:	f04f 0100 	mov.w	r1, #0
 8007b80:	dc04      	bgt.n	8007b8c <__ulp+0x2c>
 8007b82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b86:	fa42 f103 	asr.w	r1, r2, r3
 8007b8a:	4770      	bx	lr
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	3b14      	subs	r3, #20
 8007b90:	2b1e      	cmp	r3, #30
 8007b92:	bfce      	itee	gt
 8007b94:	4613      	movgt	r3, r2
 8007b96:	f1c3 031f 	rsble	r3, r3, #31
 8007b9a:	fa02 f303 	lslle.w	r3, r2, r3
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	7ff00000 	.word	0x7ff00000

08007ba8 <__b2d>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	6907      	ldr	r7, [r0, #16]
 8007bae:	f100 0914 	add.w	r9, r0, #20
 8007bb2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007bb6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007bba:	f1a7 0804 	sub.w	r8, r7, #4
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff fdc7 	bl	8007752 <__hi0bits>
 8007bc4:	f1c0 0320 	rsb	r3, r0, #32
 8007bc8:	280a      	cmp	r0, #10
 8007bca:	600b      	str	r3, [r1, #0]
 8007bcc:	491e      	ldr	r1, [pc, #120]	; (8007c48 <__b2d+0xa0>)
 8007bce:	dc17      	bgt.n	8007c00 <__b2d+0x58>
 8007bd0:	45c1      	cmp	r9, r8
 8007bd2:	bf28      	it	cs
 8007bd4:	2200      	movcs	r2, #0
 8007bd6:	f1c0 0c0b 	rsb	ip, r0, #11
 8007bda:	fa26 f30c 	lsr.w	r3, r6, ip
 8007bde:	bf38      	it	cc
 8007be0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007be4:	ea43 0501 	orr.w	r5, r3, r1
 8007be8:	f100 0315 	add.w	r3, r0, #21
 8007bec:	fa06 f303 	lsl.w	r3, r6, r3
 8007bf0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007bf4:	ea43 0402 	orr.w	r4, r3, r2
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c00:	45c1      	cmp	r9, r8
 8007c02:	bf3a      	itte	cc
 8007c04:	f1a7 0808 	subcc.w	r8, r7, #8
 8007c08:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c0c:	2200      	movcs	r2, #0
 8007c0e:	f1b0 030b 	subs.w	r3, r0, #11
 8007c12:	d015      	beq.n	8007c40 <__b2d+0x98>
 8007c14:	409e      	lsls	r6, r3
 8007c16:	f1c3 0720 	rsb	r7, r3, #32
 8007c1a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007c1e:	fa22 f107 	lsr.w	r1, r2, r7
 8007c22:	45c8      	cmp	r8, r9
 8007c24:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007c28:	ea46 0501 	orr.w	r5, r6, r1
 8007c2c:	bf94      	ite	ls
 8007c2e:	2100      	movls	r1, #0
 8007c30:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007c34:	fa02 f003 	lsl.w	r0, r2, r3
 8007c38:	40f9      	lsrs	r1, r7
 8007c3a:	ea40 0401 	orr.w	r4, r0, r1
 8007c3e:	e7db      	b.n	8007bf8 <__b2d+0x50>
 8007c40:	ea46 0501 	orr.w	r5, r6, r1
 8007c44:	4614      	mov	r4, r2
 8007c46:	e7d7      	b.n	8007bf8 <__b2d+0x50>
 8007c48:	3ff00000 	.word	0x3ff00000

08007c4c <__d2b>:
 8007c4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007c50:	461c      	mov	r4, r3
 8007c52:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007c56:	2101      	movs	r1, #1
 8007c58:	4690      	mov	r8, r2
 8007c5a:	f7ff fcb6 	bl	80075ca <_Balloc>
 8007c5e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007c62:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007c66:	4607      	mov	r7, r0
 8007c68:	bb34      	cbnz	r4, 8007cb8 <__d2b+0x6c>
 8007c6a:	9201      	str	r2, [sp, #4]
 8007c6c:	f1b8 0200 	subs.w	r2, r8, #0
 8007c70:	d027      	beq.n	8007cc2 <__d2b+0x76>
 8007c72:	a802      	add	r0, sp, #8
 8007c74:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007c78:	f7ff fd8a 	bl	8007790 <__lo0bits>
 8007c7c:	9900      	ldr	r1, [sp, #0]
 8007c7e:	b1f0      	cbz	r0, 8007cbe <__d2b+0x72>
 8007c80:	9a01      	ldr	r2, [sp, #4]
 8007c82:	f1c0 0320 	rsb	r3, r0, #32
 8007c86:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	40c2      	lsrs	r2, r0
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	9201      	str	r2, [sp, #4]
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	bf14      	ite	ne
 8007c98:	2102      	movne	r1, #2
 8007c9a:	2101      	moveq	r1, #1
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	6139      	str	r1, [r7, #16]
 8007ca0:	b1c4      	cbz	r4, 8007cd4 <__d2b+0x88>
 8007ca2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ca6:	4404      	add	r4, r0
 8007ca8:	6034      	str	r4, [r6, #0]
 8007caa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cae:	6028      	str	r0, [r5, #0]
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	b002      	add	sp, #8
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007cbc:	e7d5      	b.n	8007c6a <__d2b+0x1e>
 8007cbe:	6179      	str	r1, [r7, #20]
 8007cc0:	e7e7      	b.n	8007c92 <__d2b+0x46>
 8007cc2:	a801      	add	r0, sp, #4
 8007cc4:	f7ff fd64 	bl	8007790 <__lo0bits>
 8007cc8:	2101      	movs	r1, #1
 8007cca:	9b01      	ldr	r3, [sp, #4]
 8007ccc:	6139      	str	r1, [r7, #16]
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	3020      	adds	r0, #32
 8007cd2:	e7e5      	b.n	8007ca0 <__d2b+0x54>
 8007cd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007cd8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007cdc:	6030      	str	r0, [r6, #0]
 8007cde:	6918      	ldr	r0, [r3, #16]
 8007ce0:	f7ff fd37 	bl	8007752 <__hi0bits>
 8007ce4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007ce8:	e7e1      	b.n	8007cae <__d2b+0x62>

08007cea <__ratio>:
 8007cea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cee:	4688      	mov	r8, r1
 8007cf0:	4669      	mov	r1, sp
 8007cf2:	4681      	mov	r9, r0
 8007cf4:	f7ff ff58 	bl	8007ba8 <__b2d>
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	4640      	mov	r0, r8
 8007d00:	a901      	add	r1, sp, #4
 8007d02:	f7ff ff51 	bl	8007ba8 <__b2d>
 8007d06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d0e:	460d      	mov	r5, r1
 8007d10:	eba3 0c02 	sub.w	ip, r3, r2
 8007d14:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d18:	1a9b      	subs	r3, r3, r2
 8007d1a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bfd5      	itete	le
 8007d22:	460a      	movle	r2, r1
 8007d24:	463a      	movgt	r2, r7
 8007d26:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d2a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007d2e:	bfd8      	it	le
 8007d30:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007d34:	462b      	mov	r3, r5
 8007d36:	4602      	mov	r2, r0
 8007d38:	4659      	mov	r1, fp
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7f8 fcf6 	bl	800072c <__aeabi_ddiv>
 8007d40:	b003      	add	sp, #12
 8007d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d46 <__copybits>:
 8007d46:	3901      	subs	r1, #1
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	1149      	asrs	r1, r1, #5
 8007d4c:	6914      	ldr	r4, [r2, #16]
 8007d4e:	3101      	adds	r1, #1
 8007d50:	f102 0314 	add.w	r3, r2, #20
 8007d54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	4602      	mov	r2, r0
 8007d60:	d303      	bcc.n	8007d6a <__copybits+0x24>
 8007d62:	2300      	movs	r3, #0
 8007d64:	428a      	cmp	r2, r1
 8007d66:	d305      	bcc.n	8007d74 <__copybits+0x2e>
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6e:	f840 2b04 	str.w	r2, [r0], #4
 8007d72:	e7f3      	b.n	8007d5c <__copybits+0x16>
 8007d74:	f842 3b04 	str.w	r3, [r2], #4
 8007d78:	e7f4      	b.n	8007d64 <__copybits+0x1e>

08007d7a <__any_on>:
 8007d7a:	f100 0214 	add.w	r2, r0, #20
 8007d7e:	6900      	ldr	r0, [r0, #16]
 8007d80:	114b      	asrs	r3, r1, #5
 8007d82:	4298      	cmp	r0, r3
 8007d84:	b510      	push	{r4, lr}
 8007d86:	db11      	blt.n	8007dac <__any_on+0x32>
 8007d88:	dd0a      	ble.n	8007da0 <__any_on+0x26>
 8007d8a:	f011 011f 	ands.w	r1, r1, #31
 8007d8e:	d007      	beq.n	8007da0 <__any_on+0x26>
 8007d90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d94:	fa24 f001 	lsr.w	r0, r4, r1
 8007d98:	fa00 f101 	lsl.w	r1, r0, r1
 8007d9c:	428c      	cmp	r4, r1
 8007d9e:	d10b      	bne.n	8007db8 <__any_on+0x3e>
 8007da0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d803      	bhi.n	8007db0 <__any_on+0x36>
 8007da8:	2000      	movs	r0, #0
 8007daa:	bd10      	pop	{r4, pc}
 8007dac:	4603      	mov	r3, r0
 8007dae:	e7f7      	b.n	8007da0 <__any_on+0x26>
 8007db0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007db4:	2900      	cmp	r1, #0
 8007db6:	d0f5      	beq.n	8007da4 <__any_on+0x2a>
 8007db8:	2001      	movs	r0, #1
 8007dba:	e7f6      	b.n	8007daa <__any_on+0x30>

08007dbc <_calloc_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	fb02 f401 	mul.w	r4, r2, r1
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	f000 f854 	bl	8007e70 <_malloc_r>
 8007dc8:	4605      	mov	r5, r0
 8007dca:	b118      	cbz	r0, 8007dd4 <_calloc_r+0x18>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f7fc fc4c 	bl	800466c <memset>
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}

08007dd8 <_free_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4605      	mov	r5, r0
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	d043      	beq.n	8007e68 <_free_r+0x90>
 8007de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de4:	1f0c      	subs	r4, r1, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfb8      	it	lt
 8007dea:	18e4      	addlt	r4, r4, r3
 8007dec:	f000 fdbf 	bl	800896e <__malloc_lock>
 8007df0:	4a1e      	ldr	r2, [pc, #120]	; (8007e6c <_free_r+0x94>)
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	4610      	mov	r0, r2
 8007df6:	b933      	cbnz	r3, 8007e06 <_free_r+0x2e>
 8007df8:	6063      	str	r3, [r4, #4]
 8007dfa:	6014      	str	r4, [r2, #0]
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e02:	f000 bdb5 	b.w	8008970 <__malloc_unlock>
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	d90b      	bls.n	8007e22 <_free_r+0x4a>
 8007e0a:	6821      	ldr	r1, [r4, #0]
 8007e0c:	1862      	adds	r2, r4, r1
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	bf01      	itttt	eq
 8007e12:	681a      	ldreq	r2, [r3, #0]
 8007e14:	685b      	ldreq	r3, [r3, #4]
 8007e16:	1852      	addeq	r2, r2, r1
 8007e18:	6022      	streq	r2, [r4, #0]
 8007e1a:	6063      	str	r3, [r4, #4]
 8007e1c:	6004      	str	r4, [r0, #0]
 8007e1e:	e7ed      	b.n	8007dfc <_free_r+0x24>
 8007e20:	4613      	mov	r3, r2
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	b10a      	cbz	r2, 8007e2a <_free_r+0x52>
 8007e26:	42a2      	cmp	r2, r4
 8007e28:	d9fa      	bls.n	8007e20 <_free_r+0x48>
 8007e2a:	6819      	ldr	r1, [r3, #0]
 8007e2c:	1858      	adds	r0, r3, r1
 8007e2e:	42a0      	cmp	r0, r4
 8007e30:	d10b      	bne.n	8007e4a <_free_r+0x72>
 8007e32:	6820      	ldr	r0, [r4, #0]
 8007e34:	4401      	add	r1, r0
 8007e36:	1858      	adds	r0, r3, r1
 8007e38:	4282      	cmp	r2, r0
 8007e3a:	6019      	str	r1, [r3, #0]
 8007e3c:	d1de      	bne.n	8007dfc <_free_r+0x24>
 8007e3e:	6810      	ldr	r0, [r2, #0]
 8007e40:	6852      	ldr	r2, [r2, #4]
 8007e42:	4401      	add	r1, r0
 8007e44:	6019      	str	r1, [r3, #0]
 8007e46:	605a      	str	r2, [r3, #4]
 8007e48:	e7d8      	b.n	8007dfc <_free_r+0x24>
 8007e4a:	d902      	bls.n	8007e52 <_free_r+0x7a>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	e7d4      	b.n	8007dfc <_free_r+0x24>
 8007e52:	6820      	ldr	r0, [r4, #0]
 8007e54:	1821      	adds	r1, r4, r0
 8007e56:	428a      	cmp	r2, r1
 8007e58:	bf01      	itttt	eq
 8007e5a:	6811      	ldreq	r1, [r2, #0]
 8007e5c:	6852      	ldreq	r2, [r2, #4]
 8007e5e:	1809      	addeq	r1, r1, r0
 8007e60:	6021      	streq	r1, [r4, #0]
 8007e62:	6062      	str	r2, [r4, #4]
 8007e64:	605c      	str	r4, [r3, #4]
 8007e66:	e7c9      	b.n	8007dfc <_free_r+0x24>
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	bf00      	nop
 8007e6c:	200003f4 	.word	0x200003f4

08007e70 <_malloc_r>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	1ccd      	adds	r5, r1, #3
 8007e74:	f025 0503 	bic.w	r5, r5, #3
 8007e78:	3508      	adds	r5, #8
 8007e7a:	2d0c      	cmp	r5, #12
 8007e7c:	bf38      	it	cc
 8007e7e:	250c      	movcc	r5, #12
 8007e80:	2d00      	cmp	r5, #0
 8007e82:	4606      	mov	r6, r0
 8007e84:	db01      	blt.n	8007e8a <_malloc_r+0x1a>
 8007e86:	42a9      	cmp	r1, r5
 8007e88:	d903      	bls.n	8007e92 <_malloc_r+0x22>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	2000      	movs	r0, #0
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	f000 fd6c 	bl	800896e <__malloc_lock>
 8007e96:	4a21      	ldr	r2, [pc, #132]	; (8007f1c <_malloc_r+0xac>)
 8007e98:	6814      	ldr	r4, [r2, #0]
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	b991      	cbnz	r1, 8007ec4 <_malloc_r+0x54>
 8007e9e:	4c20      	ldr	r4, [pc, #128]	; (8007f20 <_malloc_r+0xb0>)
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	b91b      	cbnz	r3, 8007eac <_malloc_r+0x3c>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f000 facd 	bl	8008444 <_sbrk_r>
 8007eaa:	6020      	str	r0, [r4, #0]
 8007eac:	4629      	mov	r1, r5
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 fac8 	bl	8008444 <_sbrk_r>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d124      	bne.n	8007f02 <_malloc_r+0x92>
 8007eb8:	230c      	movs	r3, #12
 8007eba:	4630      	mov	r0, r6
 8007ebc:	6033      	str	r3, [r6, #0]
 8007ebe:	f000 fd57 	bl	8008970 <__malloc_unlock>
 8007ec2:	e7e4      	b.n	8007e8e <_malloc_r+0x1e>
 8007ec4:	680b      	ldr	r3, [r1, #0]
 8007ec6:	1b5b      	subs	r3, r3, r5
 8007ec8:	d418      	bmi.n	8007efc <_malloc_r+0x8c>
 8007eca:	2b0b      	cmp	r3, #11
 8007ecc:	d90f      	bls.n	8007eee <_malloc_r+0x7e>
 8007ece:	600b      	str	r3, [r1, #0]
 8007ed0:	18cc      	adds	r4, r1, r3
 8007ed2:	50cd      	str	r5, [r1, r3]
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f000 fd4b 	bl	8008970 <__malloc_unlock>
 8007eda:	f104 000b 	add.w	r0, r4, #11
 8007ede:	1d23      	adds	r3, r4, #4
 8007ee0:	f020 0007 	bic.w	r0, r0, #7
 8007ee4:	1ac3      	subs	r3, r0, r3
 8007ee6:	d0d3      	beq.n	8007e90 <_malloc_r+0x20>
 8007ee8:	425a      	negs	r2, r3
 8007eea:	50e2      	str	r2, [r4, r3]
 8007eec:	e7d0      	b.n	8007e90 <_malloc_r+0x20>
 8007eee:	684b      	ldr	r3, [r1, #4]
 8007ef0:	428c      	cmp	r4, r1
 8007ef2:	bf16      	itet	ne
 8007ef4:	6063      	strne	r3, [r4, #4]
 8007ef6:	6013      	streq	r3, [r2, #0]
 8007ef8:	460c      	movne	r4, r1
 8007efa:	e7eb      	b.n	8007ed4 <_malloc_r+0x64>
 8007efc:	460c      	mov	r4, r1
 8007efe:	6849      	ldr	r1, [r1, #4]
 8007f00:	e7cc      	b.n	8007e9c <_malloc_r+0x2c>
 8007f02:	1cc4      	adds	r4, r0, #3
 8007f04:	f024 0403 	bic.w	r4, r4, #3
 8007f08:	42a0      	cmp	r0, r4
 8007f0a:	d005      	beq.n	8007f18 <_malloc_r+0xa8>
 8007f0c:	1a21      	subs	r1, r4, r0
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f000 fa98 	bl	8008444 <_sbrk_r>
 8007f14:	3001      	adds	r0, #1
 8007f16:	d0cf      	beq.n	8007eb8 <_malloc_r+0x48>
 8007f18:	6025      	str	r5, [r4, #0]
 8007f1a:	e7db      	b.n	8007ed4 <_malloc_r+0x64>
 8007f1c:	200003f4 	.word	0x200003f4
 8007f20:	200003f8 	.word	0x200003f8

08007f24 <__ssputs_r>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	688e      	ldr	r6, [r1, #8]
 8007f2a:	4682      	mov	sl, r0
 8007f2c:	429e      	cmp	r6, r3
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4690      	mov	r8, r2
 8007f32:	4699      	mov	r9, r3
 8007f34:	d837      	bhi.n	8007fa6 <__ssputs_r+0x82>
 8007f36:	898a      	ldrh	r2, [r1, #12]
 8007f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f3c:	d031      	beq.n	8007fa2 <__ssputs_r+0x7e>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	6825      	ldr	r5, [r4, #0]
 8007f42:	6909      	ldr	r1, [r1, #16]
 8007f44:	1a6f      	subs	r7, r5, r1
 8007f46:	6965      	ldr	r5, [r4, #20]
 8007f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f50:	f109 0301 	add.w	r3, r9, #1
 8007f54:	443b      	add	r3, r7
 8007f56:	429d      	cmp	r5, r3
 8007f58:	bf38      	it	cc
 8007f5a:	461d      	movcc	r5, r3
 8007f5c:	0553      	lsls	r3, r2, #21
 8007f5e:	d530      	bpl.n	8007fc2 <__ssputs_r+0x9e>
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7ff ff85 	bl	8007e70 <_malloc_r>
 8007f66:	4606      	mov	r6, r0
 8007f68:	b950      	cbnz	r0, 8007f80 <__ssputs_r+0x5c>
 8007f6a:	230c      	movs	r3, #12
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	f8ca 3000 	str.w	r3, [sl]
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f80:	463a      	mov	r2, r7
 8007f82:	6921      	ldr	r1, [r4, #16]
 8007f84:	f7ff fb16 	bl	80075b4 <memcpy>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	6126      	str	r6, [r4, #16]
 8007f96:	443e      	add	r6, r7
 8007f98:	6026      	str	r6, [r4, #0]
 8007f9a:	464e      	mov	r6, r9
 8007f9c:	6165      	str	r5, [r4, #20]
 8007f9e:	1bed      	subs	r5, r5, r7
 8007fa0:	60a5      	str	r5, [r4, #8]
 8007fa2:	454e      	cmp	r6, r9
 8007fa4:	d900      	bls.n	8007fa8 <__ssputs_r+0x84>
 8007fa6:	464e      	mov	r6, r9
 8007fa8:	4632      	mov	r2, r6
 8007faa:	4641      	mov	r1, r8
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	f000 fcc5 	bl	800893c <memmove>
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	1b9b      	subs	r3, r3, r6
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	441e      	add	r6, r3
 8007fbe:	6026      	str	r6, [r4, #0]
 8007fc0:	e7dc      	b.n	8007f7c <__ssputs_r+0x58>
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	f000 fcd5 	bl	8008972 <_realloc_r>
 8007fc8:	4606      	mov	r6, r0
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1e2      	bne.n	8007f94 <__ssputs_r+0x70>
 8007fce:	6921      	ldr	r1, [r4, #16]
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	f7ff ff01 	bl	8007dd8 <_free_r>
 8007fd6:	e7c8      	b.n	8007f6a <__ssputs_r+0x46>

08007fd8 <_svfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	461d      	mov	r5, r3
 8007fde:	898b      	ldrh	r3, [r1, #12]
 8007fe0:	b09d      	sub	sp, #116	; 0x74
 8007fe2:	061f      	lsls	r7, r3, #24
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	4616      	mov	r6, r2
 8007fea:	d50f      	bpl.n	800800c <_svfiprintf_r+0x34>
 8007fec:	690b      	ldr	r3, [r1, #16]
 8007fee:	b96b      	cbnz	r3, 800800c <_svfiprintf_r+0x34>
 8007ff0:	2140      	movs	r1, #64	; 0x40
 8007ff2:	f7ff ff3d 	bl	8007e70 <_malloc_r>
 8007ff6:	6020      	str	r0, [r4, #0]
 8007ff8:	6120      	str	r0, [r4, #16]
 8007ffa:	b928      	cbnz	r0, 8008008 <_svfiprintf_r+0x30>
 8007ffc:	230c      	movs	r3, #12
 8007ffe:	f8c8 3000 	str.w	r3, [r8]
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	e0c8      	b.n	800819a <_svfiprintf_r+0x1c2>
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	6163      	str	r3, [r4, #20]
 800800c:	2300      	movs	r3, #0
 800800e:	9309      	str	r3, [sp, #36]	; 0x24
 8008010:	2320      	movs	r3, #32
 8008012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008016:	2330      	movs	r3, #48	; 0x30
 8008018:	f04f 0b01 	mov.w	fp, #1
 800801c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008020:	9503      	str	r5, [sp, #12]
 8008022:	4637      	mov	r7, r6
 8008024:	463d      	mov	r5, r7
 8008026:	f815 3b01 	ldrb.w	r3, [r5], #1
 800802a:	b10b      	cbz	r3, 8008030 <_svfiprintf_r+0x58>
 800802c:	2b25      	cmp	r3, #37	; 0x25
 800802e:	d13e      	bne.n	80080ae <_svfiprintf_r+0xd6>
 8008030:	ebb7 0a06 	subs.w	sl, r7, r6
 8008034:	d00b      	beq.n	800804e <_svfiprintf_r+0x76>
 8008036:	4653      	mov	r3, sl
 8008038:	4632      	mov	r2, r6
 800803a:	4621      	mov	r1, r4
 800803c:	4640      	mov	r0, r8
 800803e:	f7ff ff71 	bl	8007f24 <__ssputs_r>
 8008042:	3001      	adds	r0, #1
 8008044:	f000 80a4 	beq.w	8008190 <_svfiprintf_r+0x1b8>
 8008048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804a:	4453      	add	r3, sl
 800804c:	9309      	str	r3, [sp, #36]	; 0x24
 800804e:	783b      	ldrb	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 809d 	beq.w	8008190 <_svfiprintf_r+0x1b8>
 8008056:	2300      	movs	r3, #0
 8008058:	f04f 32ff 	mov.w	r2, #4294967295
 800805c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	9307      	str	r3, [sp, #28]
 8008064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008068:	931a      	str	r3, [sp, #104]	; 0x68
 800806a:	462f      	mov	r7, r5
 800806c:	2205      	movs	r2, #5
 800806e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008072:	4850      	ldr	r0, [pc, #320]	; (80081b4 <_svfiprintf_r+0x1dc>)
 8008074:	f7ff fa90 	bl	8007598 <memchr>
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	b9d0      	cbnz	r0, 80080b2 <_svfiprintf_r+0xda>
 800807c:	06d9      	lsls	r1, r3, #27
 800807e:	bf44      	itt	mi
 8008080:	2220      	movmi	r2, #32
 8008082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008086:	071a      	lsls	r2, r3, #28
 8008088:	bf44      	itt	mi
 800808a:	222b      	movmi	r2, #43	; 0x2b
 800808c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008090:	782a      	ldrb	r2, [r5, #0]
 8008092:	2a2a      	cmp	r2, #42	; 0x2a
 8008094:	d015      	beq.n	80080c2 <_svfiprintf_r+0xea>
 8008096:	462f      	mov	r7, r5
 8008098:	2000      	movs	r0, #0
 800809a:	250a      	movs	r5, #10
 800809c:	9a07      	ldr	r2, [sp, #28]
 800809e:	4639      	mov	r1, r7
 80080a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a4:	3b30      	subs	r3, #48	; 0x30
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d94d      	bls.n	8008146 <_svfiprintf_r+0x16e>
 80080aa:	b1b8      	cbz	r0, 80080dc <_svfiprintf_r+0x104>
 80080ac:	e00f      	b.n	80080ce <_svfiprintf_r+0xf6>
 80080ae:	462f      	mov	r7, r5
 80080b0:	e7b8      	b.n	8008024 <_svfiprintf_r+0x4c>
 80080b2:	4a40      	ldr	r2, [pc, #256]	; (80081b4 <_svfiprintf_r+0x1dc>)
 80080b4:	463d      	mov	r5, r7
 80080b6:	1a80      	subs	r0, r0, r2
 80080b8:	fa0b f000 	lsl.w	r0, fp, r0
 80080bc:	4318      	orrs	r0, r3
 80080be:	9004      	str	r0, [sp, #16]
 80080c0:	e7d3      	b.n	800806a <_svfiprintf_r+0x92>
 80080c2:	9a03      	ldr	r2, [sp, #12]
 80080c4:	1d11      	adds	r1, r2, #4
 80080c6:	6812      	ldr	r2, [r2, #0]
 80080c8:	9103      	str	r1, [sp, #12]
 80080ca:	2a00      	cmp	r2, #0
 80080cc:	db01      	blt.n	80080d2 <_svfiprintf_r+0xfa>
 80080ce:	9207      	str	r2, [sp, #28]
 80080d0:	e004      	b.n	80080dc <_svfiprintf_r+0x104>
 80080d2:	4252      	negs	r2, r2
 80080d4:	f043 0302 	orr.w	r3, r3, #2
 80080d8:	9207      	str	r2, [sp, #28]
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	783b      	ldrb	r3, [r7, #0]
 80080de:	2b2e      	cmp	r3, #46	; 0x2e
 80080e0:	d10c      	bne.n	80080fc <_svfiprintf_r+0x124>
 80080e2:	787b      	ldrb	r3, [r7, #1]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d133      	bne.n	8008150 <_svfiprintf_r+0x178>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	3702      	adds	r7, #2
 80080ec:	1d1a      	adds	r2, r3, #4
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	9203      	str	r2, [sp, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bfb8      	it	lt
 80080f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80080fa:	9305      	str	r3, [sp, #20]
 80080fc:	4d2e      	ldr	r5, [pc, #184]	; (80081b8 <_svfiprintf_r+0x1e0>)
 80080fe:	2203      	movs	r2, #3
 8008100:	7839      	ldrb	r1, [r7, #0]
 8008102:	4628      	mov	r0, r5
 8008104:	f7ff fa48 	bl	8007598 <memchr>
 8008108:	b138      	cbz	r0, 800811a <_svfiprintf_r+0x142>
 800810a:	2340      	movs	r3, #64	; 0x40
 800810c:	1b40      	subs	r0, r0, r5
 800810e:	fa03 f000 	lsl.w	r0, r3, r0
 8008112:	9b04      	ldr	r3, [sp, #16]
 8008114:	3701      	adds	r7, #1
 8008116:	4303      	orrs	r3, r0
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	7839      	ldrb	r1, [r7, #0]
 800811c:	2206      	movs	r2, #6
 800811e:	4827      	ldr	r0, [pc, #156]	; (80081bc <_svfiprintf_r+0x1e4>)
 8008120:	1c7e      	adds	r6, r7, #1
 8008122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008126:	f7ff fa37 	bl	8007598 <memchr>
 800812a:	2800      	cmp	r0, #0
 800812c:	d038      	beq.n	80081a0 <_svfiprintf_r+0x1c8>
 800812e:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <_svfiprintf_r+0x1e8>)
 8008130:	bb13      	cbnz	r3, 8008178 <_svfiprintf_r+0x1a0>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	3307      	adds	r3, #7
 8008136:	f023 0307 	bic.w	r3, r3, #7
 800813a:	3308      	adds	r3, #8
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	444b      	add	r3, r9
 8008142:	9309      	str	r3, [sp, #36]	; 0x24
 8008144:	e76d      	b.n	8008022 <_svfiprintf_r+0x4a>
 8008146:	fb05 3202 	mla	r2, r5, r2, r3
 800814a:	2001      	movs	r0, #1
 800814c:	460f      	mov	r7, r1
 800814e:	e7a6      	b.n	800809e <_svfiprintf_r+0xc6>
 8008150:	2300      	movs	r3, #0
 8008152:	250a      	movs	r5, #10
 8008154:	4619      	mov	r1, r3
 8008156:	3701      	adds	r7, #1
 8008158:	9305      	str	r3, [sp, #20]
 800815a:	4638      	mov	r0, r7
 800815c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008160:	3a30      	subs	r2, #48	; 0x30
 8008162:	2a09      	cmp	r2, #9
 8008164:	d903      	bls.n	800816e <_svfiprintf_r+0x196>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0c8      	beq.n	80080fc <_svfiprintf_r+0x124>
 800816a:	9105      	str	r1, [sp, #20]
 800816c:	e7c6      	b.n	80080fc <_svfiprintf_r+0x124>
 800816e:	fb05 2101 	mla	r1, r5, r1, r2
 8008172:	2301      	movs	r3, #1
 8008174:	4607      	mov	r7, r0
 8008176:	e7f0      	b.n	800815a <_svfiprintf_r+0x182>
 8008178:	ab03      	add	r3, sp, #12
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4622      	mov	r2, r4
 800817e:	4b11      	ldr	r3, [pc, #68]	; (80081c4 <_svfiprintf_r+0x1ec>)
 8008180:	a904      	add	r1, sp, #16
 8008182:	4640      	mov	r0, r8
 8008184:	f7fc fb0c 	bl	80047a0 <_printf_float>
 8008188:	f1b0 3fff 	cmp.w	r0, #4294967295
 800818c:	4681      	mov	r9, r0
 800818e:	d1d6      	bne.n	800813e <_svfiprintf_r+0x166>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	065b      	lsls	r3, r3, #25
 8008194:	f53f af35 	bmi.w	8008002 <_svfiprintf_r+0x2a>
 8008198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800819a:	b01d      	add	sp, #116	; 0x74
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	ab03      	add	r3, sp, #12
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	4622      	mov	r2, r4
 80081a6:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <_svfiprintf_r+0x1ec>)
 80081a8:	a904      	add	r1, sp, #16
 80081aa:	4640      	mov	r0, r8
 80081ac:	f7fc fda4 	bl	8004cf8 <_printf_i>
 80081b0:	e7ea      	b.n	8008188 <_svfiprintf_r+0x1b0>
 80081b2:	bf00      	nop
 80081b4:	08008cb4 	.word	0x08008cb4
 80081b8:	08008cba 	.word	0x08008cba
 80081bc:	08008cbe 	.word	0x08008cbe
 80081c0:	080047a1 	.word	0x080047a1
 80081c4:	08007f25 	.word	0x08007f25

080081c8 <__sfputc_r>:
 80081c8:	6893      	ldr	r3, [r2, #8]
 80081ca:	b410      	push	{r4}
 80081cc:	3b01      	subs	r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	6093      	str	r3, [r2, #8]
 80081d2:	da07      	bge.n	80081e4 <__sfputc_r+0x1c>
 80081d4:	6994      	ldr	r4, [r2, #24]
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	db01      	blt.n	80081de <__sfputc_r+0x16>
 80081da:	290a      	cmp	r1, #10
 80081dc:	d102      	bne.n	80081e4 <__sfputc_r+0x1c>
 80081de:	bc10      	pop	{r4}
 80081e0:	f000 b996 	b.w	8008510 <__swbuf_r>
 80081e4:	6813      	ldr	r3, [r2, #0]
 80081e6:	1c58      	adds	r0, r3, #1
 80081e8:	6010      	str	r0, [r2, #0]
 80081ea:	7019      	strb	r1, [r3, #0]
 80081ec:	4608      	mov	r0, r1
 80081ee:	bc10      	pop	{r4}
 80081f0:	4770      	bx	lr

080081f2 <__sfputs_r>:
 80081f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f4:	4606      	mov	r6, r0
 80081f6:	460f      	mov	r7, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	18d5      	adds	r5, r2, r3
 80081fc:	42ac      	cmp	r4, r5
 80081fe:	d101      	bne.n	8008204 <__sfputs_r+0x12>
 8008200:	2000      	movs	r0, #0
 8008202:	e007      	b.n	8008214 <__sfputs_r+0x22>
 8008204:	463a      	mov	r2, r7
 8008206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820a:	4630      	mov	r0, r6
 800820c:	f7ff ffdc 	bl	80081c8 <__sfputc_r>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d1f3      	bne.n	80081fc <__sfputs_r+0xa>
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008218 <_vfiprintf_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	460c      	mov	r4, r1
 800821e:	b09d      	sub	sp, #116	; 0x74
 8008220:	4617      	mov	r7, r2
 8008222:	461d      	mov	r5, r3
 8008224:	4606      	mov	r6, r0
 8008226:	b118      	cbz	r0, 8008230 <_vfiprintf_r+0x18>
 8008228:	6983      	ldr	r3, [r0, #24]
 800822a:	b90b      	cbnz	r3, 8008230 <_vfiprintf_r+0x18>
 800822c:	f7fe fdd4 	bl	8006dd8 <__sinit>
 8008230:	4b7c      	ldr	r3, [pc, #496]	; (8008424 <_vfiprintf_r+0x20c>)
 8008232:	429c      	cmp	r4, r3
 8008234:	d158      	bne.n	80082e8 <_vfiprintf_r+0xd0>
 8008236:	6874      	ldr	r4, [r6, #4]
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	0718      	lsls	r0, r3, #28
 800823c:	d55e      	bpl.n	80082fc <_vfiprintf_r+0xe4>
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d05b      	beq.n	80082fc <_vfiprintf_r+0xe4>
 8008244:	2300      	movs	r3, #0
 8008246:	9309      	str	r3, [sp, #36]	; 0x24
 8008248:	2320      	movs	r3, #32
 800824a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800824e:	2330      	movs	r3, #48	; 0x30
 8008250:	f04f 0b01 	mov.w	fp, #1
 8008254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008258:	9503      	str	r5, [sp, #12]
 800825a:	46b8      	mov	r8, r7
 800825c:	4645      	mov	r5, r8
 800825e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008262:	b10b      	cbz	r3, 8008268 <_vfiprintf_r+0x50>
 8008264:	2b25      	cmp	r3, #37	; 0x25
 8008266:	d154      	bne.n	8008312 <_vfiprintf_r+0xfa>
 8008268:	ebb8 0a07 	subs.w	sl, r8, r7
 800826c:	d00b      	beq.n	8008286 <_vfiprintf_r+0x6e>
 800826e:	4653      	mov	r3, sl
 8008270:	463a      	mov	r2, r7
 8008272:	4621      	mov	r1, r4
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff ffbc 	bl	80081f2 <__sfputs_r>
 800827a:	3001      	adds	r0, #1
 800827c:	f000 80c2 	beq.w	8008404 <_vfiprintf_r+0x1ec>
 8008280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008282:	4453      	add	r3, sl
 8008284:	9309      	str	r3, [sp, #36]	; 0x24
 8008286:	f898 3000 	ldrb.w	r3, [r8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 80ba 	beq.w	8008404 <_vfiprintf_r+0x1ec>
 8008290:	2300      	movs	r3, #0
 8008292:	f04f 32ff 	mov.w	r2, #4294967295
 8008296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	9307      	str	r3, [sp, #28]
 800829e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082a2:	931a      	str	r3, [sp, #104]	; 0x68
 80082a4:	46a8      	mov	r8, r5
 80082a6:	2205      	movs	r2, #5
 80082a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80082ac:	485e      	ldr	r0, [pc, #376]	; (8008428 <_vfiprintf_r+0x210>)
 80082ae:	f7ff f973 	bl	8007598 <memchr>
 80082b2:	9b04      	ldr	r3, [sp, #16]
 80082b4:	bb78      	cbnz	r0, 8008316 <_vfiprintf_r+0xfe>
 80082b6:	06d9      	lsls	r1, r3, #27
 80082b8:	bf44      	itt	mi
 80082ba:	2220      	movmi	r2, #32
 80082bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082c0:	071a      	lsls	r2, r3, #28
 80082c2:	bf44      	itt	mi
 80082c4:	222b      	movmi	r2, #43	; 0x2b
 80082c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082ca:	782a      	ldrb	r2, [r5, #0]
 80082cc:	2a2a      	cmp	r2, #42	; 0x2a
 80082ce:	d02a      	beq.n	8008326 <_vfiprintf_r+0x10e>
 80082d0:	46a8      	mov	r8, r5
 80082d2:	2000      	movs	r0, #0
 80082d4:	250a      	movs	r5, #10
 80082d6:	9a07      	ldr	r2, [sp, #28]
 80082d8:	4641      	mov	r1, r8
 80082da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082de:	3b30      	subs	r3, #48	; 0x30
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d969      	bls.n	80083b8 <_vfiprintf_r+0x1a0>
 80082e4:	b360      	cbz	r0, 8008340 <_vfiprintf_r+0x128>
 80082e6:	e024      	b.n	8008332 <_vfiprintf_r+0x11a>
 80082e8:	4b50      	ldr	r3, [pc, #320]	; (800842c <_vfiprintf_r+0x214>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <_vfiprintf_r+0xda>
 80082ee:	68b4      	ldr	r4, [r6, #8]
 80082f0:	e7a2      	b.n	8008238 <_vfiprintf_r+0x20>
 80082f2:	4b4f      	ldr	r3, [pc, #316]	; (8008430 <_vfiprintf_r+0x218>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68f4      	ldreq	r4, [r6, #12]
 80082fa:	e79d      	b.n	8008238 <_vfiprintf_r+0x20>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4630      	mov	r0, r6
 8008300:	f000 f978 	bl	80085f4 <__swsetup_r>
 8008304:	2800      	cmp	r0, #0
 8008306:	d09d      	beq.n	8008244 <_vfiprintf_r+0x2c>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	b01d      	add	sp, #116	; 0x74
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	46a8      	mov	r8, r5
 8008314:	e7a2      	b.n	800825c <_vfiprintf_r+0x44>
 8008316:	4a44      	ldr	r2, [pc, #272]	; (8008428 <_vfiprintf_r+0x210>)
 8008318:	4645      	mov	r5, r8
 800831a:	1a80      	subs	r0, r0, r2
 800831c:	fa0b f000 	lsl.w	r0, fp, r0
 8008320:	4318      	orrs	r0, r3
 8008322:	9004      	str	r0, [sp, #16]
 8008324:	e7be      	b.n	80082a4 <_vfiprintf_r+0x8c>
 8008326:	9a03      	ldr	r2, [sp, #12]
 8008328:	1d11      	adds	r1, r2, #4
 800832a:	6812      	ldr	r2, [r2, #0]
 800832c:	9103      	str	r1, [sp, #12]
 800832e:	2a00      	cmp	r2, #0
 8008330:	db01      	blt.n	8008336 <_vfiprintf_r+0x11e>
 8008332:	9207      	str	r2, [sp, #28]
 8008334:	e004      	b.n	8008340 <_vfiprintf_r+0x128>
 8008336:	4252      	negs	r2, r2
 8008338:	f043 0302 	orr.w	r3, r3, #2
 800833c:	9207      	str	r2, [sp, #28]
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	f898 3000 	ldrb.w	r3, [r8]
 8008344:	2b2e      	cmp	r3, #46	; 0x2e
 8008346:	d10e      	bne.n	8008366 <_vfiprintf_r+0x14e>
 8008348:	f898 3001 	ldrb.w	r3, [r8, #1]
 800834c:	2b2a      	cmp	r3, #42	; 0x2a
 800834e:	d138      	bne.n	80083c2 <_vfiprintf_r+0x1aa>
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	f108 0802 	add.w	r8, r8, #2
 8008356:	1d1a      	adds	r2, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	9203      	str	r2, [sp, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfb8      	it	lt
 8008360:	f04f 33ff 	movlt.w	r3, #4294967295
 8008364:	9305      	str	r3, [sp, #20]
 8008366:	4d33      	ldr	r5, [pc, #204]	; (8008434 <_vfiprintf_r+0x21c>)
 8008368:	2203      	movs	r2, #3
 800836a:	f898 1000 	ldrb.w	r1, [r8]
 800836e:	4628      	mov	r0, r5
 8008370:	f7ff f912 	bl	8007598 <memchr>
 8008374:	b140      	cbz	r0, 8008388 <_vfiprintf_r+0x170>
 8008376:	2340      	movs	r3, #64	; 0x40
 8008378:	1b40      	subs	r0, r0, r5
 800837a:	fa03 f000 	lsl.w	r0, r3, r0
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	f108 0801 	add.w	r8, r8, #1
 8008384:	4303      	orrs	r3, r0
 8008386:	9304      	str	r3, [sp, #16]
 8008388:	f898 1000 	ldrb.w	r1, [r8]
 800838c:	2206      	movs	r2, #6
 800838e:	482a      	ldr	r0, [pc, #168]	; (8008438 <_vfiprintf_r+0x220>)
 8008390:	f108 0701 	add.w	r7, r8, #1
 8008394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008398:	f7ff f8fe 	bl	8007598 <memchr>
 800839c:	2800      	cmp	r0, #0
 800839e:	d037      	beq.n	8008410 <_vfiprintf_r+0x1f8>
 80083a0:	4b26      	ldr	r3, [pc, #152]	; (800843c <_vfiprintf_r+0x224>)
 80083a2:	bb1b      	cbnz	r3, 80083ec <_vfiprintf_r+0x1d4>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	3307      	adds	r3, #7
 80083a8:	f023 0307 	bic.w	r3, r3, #7
 80083ac:	3308      	adds	r3, #8
 80083ae:	9303      	str	r3, [sp, #12]
 80083b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b2:	444b      	add	r3, r9
 80083b4:	9309      	str	r3, [sp, #36]	; 0x24
 80083b6:	e750      	b.n	800825a <_vfiprintf_r+0x42>
 80083b8:	fb05 3202 	mla	r2, r5, r2, r3
 80083bc:	2001      	movs	r0, #1
 80083be:	4688      	mov	r8, r1
 80083c0:	e78a      	b.n	80082d8 <_vfiprintf_r+0xc0>
 80083c2:	2300      	movs	r3, #0
 80083c4:	250a      	movs	r5, #10
 80083c6:	4619      	mov	r1, r3
 80083c8:	f108 0801 	add.w	r8, r8, #1
 80083cc:	9305      	str	r3, [sp, #20]
 80083ce:	4640      	mov	r0, r8
 80083d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083d4:	3a30      	subs	r2, #48	; 0x30
 80083d6:	2a09      	cmp	r2, #9
 80083d8:	d903      	bls.n	80083e2 <_vfiprintf_r+0x1ca>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0c3      	beq.n	8008366 <_vfiprintf_r+0x14e>
 80083de:	9105      	str	r1, [sp, #20]
 80083e0:	e7c1      	b.n	8008366 <_vfiprintf_r+0x14e>
 80083e2:	fb05 2101 	mla	r1, r5, r1, r2
 80083e6:	2301      	movs	r3, #1
 80083e8:	4680      	mov	r8, r0
 80083ea:	e7f0      	b.n	80083ce <_vfiprintf_r+0x1b6>
 80083ec:	ab03      	add	r3, sp, #12
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4622      	mov	r2, r4
 80083f2:	4b13      	ldr	r3, [pc, #76]	; (8008440 <_vfiprintf_r+0x228>)
 80083f4:	a904      	add	r1, sp, #16
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7fc f9d2 	bl	80047a0 <_printf_float>
 80083fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008400:	4681      	mov	r9, r0
 8008402:	d1d5      	bne.n	80083b0 <_vfiprintf_r+0x198>
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	065b      	lsls	r3, r3, #25
 8008408:	f53f af7e 	bmi.w	8008308 <_vfiprintf_r+0xf0>
 800840c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800840e:	e77d      	b.n	800830c <_vfiprintf_r+0xf4>
 8008410:	ab03      	add	r3, sp, #12
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	4622      	mov	r2, r4
 8008416:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <_vfiprintf_r+0x228>)
 8008418:	a904      	add	r1, sp, #16
 800841a:	4630      	mov	r0, r6
 800841c:	f7fc fc6c 	bl	8004cf8 <_printf_i>
 8008420:	e7ec      	b.n	80083fc <_vfiprintf_r+0x1e4>
 8008422:	bf00      	nop
 8008424:	08008b68 	.word	0x08008b68
 8008428:	08008cb4 	.word	0x08008cb4
 800842c:	08008b88 	.word	0x08008b88
 8008430:	08008b48 	.word	0x08008b48
 8008434:	08008cba 	.word	0x08008cba
 8008438:	08008cbe 	.word	0x08008cbe
 800843c:	080047a1 	.word	0x080047a1
 8008440:	080081f3 	.word	0x080081f3

08008444 <_sbrk_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	2300      	movs	r3, #0
 8008448:	4c05      	ldr	r4, [pc, #20]	; (8008460 <_sbrk_r+0x1c>)
 800844a:	4605      	mov	r5, r0
 800844c:	4608      	mov	r0, r1
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	f7f9 fefe 	bl	8002250 <_sbrk>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_sbrk_r+0x1a>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	b103      	cbz	r3, 800845e <_sbrk_r+0x1a>
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	2000048c 	.word	0x2000048c

08008464 <__sread>:
 8008464:	b510      	push	{r4, lr}
 8008466:	460c      	mov	r4, r1
 8008468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846c:	f000 faa8 	bl	80089c0 <_read_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	bfab      	itete	ge
 8008474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008476:	89a3      	ldrhlt	r3, [r4, #12]
 8008478:	181b      	addge	r3, r3, r0
 800847a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800847e:	bfac      	ite	ge
 8008480:	6563      	strge	r3, [r4, #84]	; 0x54
 8008482:	81a3      	strhlt	r3, [r4, #12]
 8008484:	bd10      	pop	{r4, pc}

08008486 <__swrite>:
 8008486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848a:	461f      	mov	r7, r3
 800848c:	898b      	ldrh	r3, [r1, #12]
 800848e:	4605      	mov	r5, r0
 8008490:	05db      	lsls	r3, r3, #23
 8008492:	460c      	mov	r4, r1
 8008494:	4616      	mov	r6, r2
 8008496:	d505      	bpl.n	80084a4 <__swrite+0x1e>
 8008498:	2302      	movs	r3, #2
 800849a:	2200      	movs	r2, #0
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	f000 f9d6 	bl	8008850 <_lseek_r>
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	4632      	mov	r2, r6
 80084a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b2:	463b      	mov	r3, r7
 80084b4:	4628      	mov	r0, r5
 80084b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ba:	f000 b889 	b.w	80085d0 <_write_r>

080084be <__sseek>:
 80084be:	b510      	push	{r4, lr}
 80084c0:	460c      	mov	r4, r1
 80084c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c6:	f000 f9c3 	bl	8008850 <_lseek_r>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	bf15      	itete	ne
 80084d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80084d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084da:	81a3      	strheq	r3, [r4, #12]
 80084dc:	bf18      	it	ne
 80084de:	81a3      	strhne	r3, [r4, #12]
 80084e0:	bd10      	pop	{r4, pc}

080084e2 <__sclose>:
 80084e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e6:	f000 b8f3 	b.w	80086d0 <_close_r>

080084ea <strncmp>:
 80084ea:	b510      	push	{r4, lr}
 80084ec:	b16a      	cbz	r2, 800850a <strncmp+0x20>
 80084ee:	3901      	subs	r1, #1
 80084f0:	1884      	adds	r4, r0, r2
 80084f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80084f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d103      	bne.n	8008506 <strncmp+0x1c>
 80084fe:	42a0      	cmp	r0, r4
 8008500:	d001      	beq.n	8008506 <strncmp+0x1c>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f5      	bne.n	80084f2 <strncmp+0x8>
 8008506:	1a98      	subs	r0, r3, r2
 8008508:	bd10      	pop	{r4, pc}
 800850a:	4610      	mov	r0, r2
 800850c:	e7fc      	b.n	8008508 <strncmp+0x1e>
	...

08008510 <__swbuf_r>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	460e      	mov	r6, r1
 8008514:	4614      	mov	r4, r2
 8008516:	4605      	mov	r5, r0
 8008518:	b118      	cbz	r0, 8008522 <__swbuf_r+0x12>
 800851a:	6983      	ldr	r3, [r0, #24]
 800851c:	b90b      	cbnz	r3, 8008522 <__swbuf_r+0x12>
 800851e:	f7fe fc5b 	bl	8006dd8 <__sinit>
 8008522:	4b21      	ldr	r3, [pc, #132]	; (80085a8 <__swbuf_r+0x98>)
 8008524:	429c      	cmp	r4, r3
 8008526:	d12a      	bne.n	800857e <__swbuf_r+0x6e>
 8008528:	686c      	ldr	r4, [r5, #4]
 800852a:	69a3      	ldr	r3, [r4, #24]
 800852c:	60a3      	str	r3, [r4, #8]
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	071a      	lsls	r2, r3, #28
 8008532:	d52e      	bpl.n	8008592 <__swbuf_r+0x82>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	b363      	cbz	r3, 8008592 <__swbuf_r+0x82>
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	6820      	ldr	r0, [r4, #0]
 800853c:	b2f6      	uxtb	r6, r6
 800853e:	1ac0      	subs	r0, r0, r3
 8008540:	6963      	ldr	r3, [r4, #20]
 8008542:	4637      	mov	r7, r6
 8008544:	4283      	cmp	r3, r0
 8008546:	dc04      	bgt.n	8008552 <__swbuf_r+0x42>
 8008548:	4621      	mov	r1, r4
 800854a:	4628      	mov	r0, r5
 800854c:	f000 f956 	bl	80087fc <_fflush_r>
 8008550:	bb28      	cbnz	r0, 800859e <__swbuf_r+0x8e>
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	3001      	adds	r0, #1
 8008556:	3b01      	subs	r3, #1
 8008558:	60a3      	str	r3, [r4, #8]
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	6022      	str	r2, [r4, #0]
 8008560:	701e      	strb	r6, [r3, #0]
 8008562:	6963      	ldr	r3, [r4, #20]
 8008564:	4283      	cmp	r3, r0
 8008566:	d004      	beq.n	8008572 <__swbuf_r+0x62>
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	07db      	lsls	r3, r3, #31
 800856c:	d519      	bpl.n	80085a2 <__swbuf_r+0x92>
 800856e:	2e0a      	cmp	r6, #10
 8008570:	d117      	bne.n	80085a2 <__swbuf_r+0x92>
 8008572:	4621      	mov	r1, r4
 8008574:	4628      	mov	r0, r5
 8008576:	f000 f941 	bl	80087fc <_fflush_r>
 800857a:	b190      	cbz	r0, 80085a2 <__swbuf_r+0x92>
 800857c:	e00f      	b.n	800859e <__swbuf_r+0x8e>
 800857e:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <__swbuf_r+0x9c>)
 8008580:	429c      	cmp	r4, r3
 8008582:	d101      	bne.n	8008588 <__swbuf_r+0x78>
 8008584:	68ac      	ldr	r4, [r5, #8]
 8008586:	e7d0      	b.n	800852a <__swbuf_r+0x1a>
 8008588:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <__swbuf_r+0xa0>)
 800858a:	429c      	cmp	r4, r3
 800858c:	bf08      	it	eq
 800858e:	68ec      	ldreq	r4, [r5, #12]
 8008590:	e7cb      	b.n	800852a <__swbuf_r+0x1a>
 8008592:	4621      	mov	r1, r4
 8008594:	4628      	mov	r0, r5
 8008596:	f000 f82d 	bl	80085f4 <__swsetup_r>
 800859a:	2800      	cmp	r0, #0
 800859c:	d0cc      	beq.n	8008538 <__swbuf_r+0x28>
 800859e:	f04f 37ff 	mov.w	r7, #4294967295
 80085a2:	4638      	mov	r0, r7
 80085a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a6:	bf00      	nop
 80085a8:	08008b68 	.word	0x08008b68
 80085ac:	08008b88 	.word	0x08008b88
 80085b0:	08008b48 	.word	0x08008b48

080085b4 <__ascii_wctomb>:
 80085b4:	b149      	cbz	r1, 80085ca <__ascii_wctomb+0x16>
 80085b6:	2aff      	cmp	r2, #255	; 0xff
 80085b8:	bf8b      	itete	hi
 80085ba:	238a      	movhi	r3, #138	; 0x8a
 80085bc:	700a      	strbls	r2, [r1, #0]
 80085be:	6003      	strhi	r3, [r0, #0]
 80085c0:	2001      	movls	r0, #1
 80085c2:	bf88      	it	hi
 80085c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80085c8:	4770      	bx	lr
 80085ca:	4608      	mov	r0, r1
 80085cc:	4770      	bx	lr
	...

080085d0 <_write_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4605      	mov	r5, r0
 80085d4:	4608      	mov	r0, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	2200      	movs	r2, #0
 80085da:	4c05      	ldr	r4, [pc, #20]	; (80085f0 <_write_r+0x20>)
 80085dc:	6022      	str	r2, [r4, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	f7f8 fde2 	bl	80011a8 <_write>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_write_r+0x1e>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_write_r+0x1e>
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	2000048c 	.word	0x2000048c

080085f4 <__swsetup_r>:
 80085f4:	4b32      	ldr	r3, [pc, #200]	; (80086c0 <__swsetup_r+0xcc>)
 80085f6:	b570      	push	{r4, r5, r6, lr}
 80085f8:	681d      	ldr	r5, [r3, #0]
 80085fa:	4606      	mov	r6, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	b125      	cbz	r5, 800860a <__swsetup_r+0x16>
 8008600:	69ab      	ldr	r3, [r5, #24]
 8008602:	b913      	cbnz	r3, 800860a <__swsetup_r+0x16>
 8008604:	4628      	mov	r0, r5
 8008606:	f7fe fbe7 	bl	8006dd8 <__sinit>
 800860a:	4b2e      	ldr	r3, [pc, #184]	; (80086c4 <__swsetup_r+0xd0>)
 800860c:	429c      	cmp	r4, r3
 800860e:	d10f      	bne.n	8008630 <__swsetup_r+0x3c>
 8008610:	686c      	ldr	r4, [r5, #4]
 8008612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008616:	b29a      	uxth	r2, r3
 8008618:	0715      	lsls	r5, r2, #28
 800861a:	d42c      	bmi.n	8008676 <__swsetup_r+0x82>
 800861c:	06d0      	lsls	r0, r2, #27
 800861e:	d411      	bmi.n	8008644 <__swsetup_r+0x50>
 8008620:	2209      	movs	r2, #9
 8008622:	6032      	str	r2, [r6, #0]
 8008624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	e03e      	b.n	80086ae <__swsetup_r+0xba>
 8008630:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <__swsetup_r+0xd4>)
 8008632:	429c      	cmp	r4, r3
 8008634:	d101      	bne.n	800863a <__swsetup_r+0x46>
 8008636:	68ac      	ldr	r4, [r5, #8]
 8008638:	e7eb      	b.n	8008612 <__swsetup_r+0x1e>
 800863a:	4b24      	ldr	r3, [pc, #144]	; (80086cc <__swsetup_r+0xd8>)
 800863c:	429c      	cmp	r4, r3
 800863e:	bf08      	it	eq
 8008640:	68ec      	ldreq	r4, [r5, #12]
 8008642:	e7e6      	b.n	8008612 <__swsetup_r+0x1e>
 8008644:	0751      	lsls	r1, r2, #29
 8008646:	d512      	bpl.n	800866e <__swsetup_r+0x7a>
 8008648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800864a:	b141      	cbz	r1, 800865e <__swsetup_r+0x6a>
 800864c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008650:	4299      	cmp	r1, r3
 8008652:	d002      	beq.n	800865a <__swsetup_r+0x66>
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff fbbf 	bl	8007dd8 <_free_r>
 800865a:	2300      	movs	r3, #0
 800865c:	6363      	str	r3, [r4, #52]	; 0x34
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	2300      	movs	r3, #0
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f043 0308 	orr.w	r3, r3, #8
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	b94b      	cbnz	r3, 800868e <__swsetup_r+0x9a>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008684:	d003      	beq.n	800868e <__swsetup_r+0x9a>
 8008686:	4621      	mov	r1, r4
 8008688:	4630      	mov	r0, r6
 800868a:	f000 f917 	bl	80088bc <__smakebuf_r>
 800868e:	89a2      	ldrh	r2, [r4, #12]
 8008690:	f012 0301 	ands.w	r3, r2, #1
 8008694:	d00c      	beq.n	80086b0 <__swsetup_r+0xbc>
 8008696:	2300      	movs	r3, #0
 8008698:	60a3      	str	r3, [r4, #8]
 800869a:	6963      	ldr	r3, [r4, #20]
 800869c:	425b      	negs	r3, r3
 800869e:	61a3      	str	r3, [r4, #24]
 80086a0:	6923      	ldr	r3, [r4, #16]
 80086a2:	b953      	cbnz	r3, 80086ba <__swsetup_r+0xc6>
 80086a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80086ac:	d1ba      	bne.n	8008624 <__swsetup_r+0x30>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	0792      	lsls	r2, r2, #30
 80086b2:	bf58      	it	pl
 80086b4:	6963      	ldrpl	r3, [r4, #20]
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	e7f2      	b.n	80086a0 <__swsetup_r+0xac>
 80086ba:	2000      	movs	r0, #0
 80086bc:	e7f7      	b.n	80086ae <__swsetup_r+0xba>
 80086be:	bf00      	nop
 80086c0:	2000000c 	.word	0x2000000c
 80086c4:	08008b68 	.word	0x08008b68
 80086c8:	08008b88 	.word	0x08008b88
 80086cc:	08008b48 	.word	0x08008b48

080086d0 <_close_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	2300      	movs	r3, #0
 80086d4:	4c05      	ldr	r4, [pc, #20]	; (80086ec <_close_r+0x1c>)
 80086d6:	4605      	mov	r5, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	6023      	str	r3, [r4, #0]
 80086dc:	f7f9 fd87 	bl	80021ee <_close>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_close_r+0x1a>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_close_r+0x1a>
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	2000048c 	.word	0x2000048c

080086f0 <__sflush_r>:
 80086f0:	898a      	ldrh	r2, [r1, #12]
 80086f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	4605      	mov	r5, r0
 80086f8:	0710      	lsls	r0, r2, #28
 80086fa:	460c      	mov	r4, r1
 80086fc:	d458      	bmi.n	80087b0 <__sflush_r+0xc0>
 80086fe:	684b      	ldr	r3, [r1, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc05      	bgt.n	8008710 <__sflush_r+0x20>
 8008704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	dc02      	bgt.n	8008710 <__sflush_r+0x20>
 800870a:	2000      	movs	r0, #0
 800870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008712:	2e00      	cmp	r6, #0
 8008714:	d0f9      	beq.n	800870a <__sflush_r+0x1a>
 8008716:	2300      	movs	r3, #0
 8008718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800871c:	682f      	ldr	r7, [r5, #0]
 800871e:	6a21      	ldr	r1, [r4, #32]
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	d032      	beq.n	800878a <__sflush_r+0x9a>
 8008724:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	075a      	lsls	r2, r3, #29
 800872a:	d505      	bpl.n	8008738 <__sflush_r+0x48>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	1ac0      	subs	r0, r0, r3
 8008730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008732:	b10b      	cbz	r3, 8008738 <__sflush_r+0x48>
 8008734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008736:	1ac0      	subs	r0, r0, r3
 8008738:	2300      	movs	r3, #0
 800873a:	4602      	mov	r2, r0
 800873c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800873e:	6a21      	ldr	r1, [r4, #32]
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	d106      	bne.n	8008758 <__sflush_r+0x68>
 800874a:	6829      	ldr	r1, [r5, #0]
 800874c:	291d      	cmp	r1, #29
 800874e:	d848      	bhi.n	80087e2 <__sflush_r+0xf2>
 8008750:	4a29      	ldr	r2, [pc, #164]	; (80087f8 <__sflush_r+0x108>)
 8008752:	40ca      	lsrs	r2, r1
 8008754:	07d6      	lsls	r6, r2, #31
 8008756:	d544      	bpl.n	80087e2 <__sflush_r+0xf2>
 8008758:	2200      	movs	r2, #0
 800875a:	6062      	str	r2, [r4, #4]
 800875c:	6922      	ldr	r2, [r4, #16]
 800875e:	04d9      	lsls	r1, r3, #19
 8008760:	6022      	str	r2, [r4, #0]
 8008762:	d504      	bpl.n	800876e <__sflush_r+0x7e>
 8008764:	1c42      	adds	r2, r0, #1
 8008766:	d101      	bne.n	800876c <__sflush_r+0x7c>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b903      	cbnz	r3, 800876e <__sflush_r+0x7e>
 800876c:	6560      	str	r0, [r4, #84]	; 0x54
 800876e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008770:	602f      	str	r7, [r5, #0]
 8008772:	2900      	cmp	r1, #0
 8008774:	d0c9      	beq.n	800870a <__sflush_r+0x1a>
 8008776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800877a:	4299      	cmp	r1, r3
 800877c:	d002      	beq.n	8008784 <__sflush_r+0x94>
 800877e:	4628      	mov	r0, r5
 8008780:	f7ff fb2a 	bl	8007dd8 <_free_r>
 8008784:	2000      	movs	r0, #0
 8008786:	6360      	str	r0, [r4, #52]	; 0x34
 8008788:	e7c0      	b.n	800870c <__sflush_r+0x1c>
 800878a:	2301      	movs	r3, #1
 800878c:	4628      	mov	r0, r5
 800878e:	47b0      	blx	r6
 8008790:	1c41      	adds	r1, r0, #1
 8008792:	d1c8      	bne.n	8008726 <__sflush_r+0x36>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0c5      	beq.n	8008726 <__sflush_r+0x36>
 800879a:	2b1d      	cmp	r3, #29
 800879c:	d001      	beq.n	80087a2 <__sflush_r+0xb2>
 800879e:	2b16      	cmp	r3, #22
 80087a0:	d101      	bne.n	80087a6 <__sflush_r+0xb6>
 80087a2:	602f      	str	r7, [r5, #0]
 80087a4:	e7b1      	b.n	800870a <__sflush_r+0x1a>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	e7ad      	b.n	800870c <__sflush_r+0x1c>
 80087b0:	690f      	ldr	r7, [r1, #16]
 80087b2:	2f00      	cmp	r7, #0
 80087b4:	d0a9      	beq.n	800870a <__sflush_r+0x1a>
 80087b6:	0793      	lsls	r3, r2, #30
 80087b8:	bf18      	it	ne
 80087ba:	2300      	movne	r3, #0
 80087bc:	680e      	ldr	r6, [r1, #0]
 80087be:	bf08      	it	eq
 80087c0:	694b      	ldreq	r3, [r1, #20]
 80087c2:	eba6 0807 	sub.w	r8, r6, r7
 80087c6:	600f      	str	r7, [r1, #0]
 80087c8:	608b      	str	r3, [r1, #8]
 80087ca:	f1b8 0f00 	cmp.w	r8, #0
 80087ce:	dd9c      	ble.n	800870a <__sflush_r+0x1a>
 80087d0:	4643      	mov	r3, r8
 80087d2:	463a      	mov	r2, r7
 80087d4:	6a21      	ldr	r1, [r4, #32]
 80087d6:	4628      	mov	r0, r5
 80087d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087da:	47b0      	blx	r6
 80087dc:	2800      	cmp	r0, #0
 80087de:	dc06      	bgt.n	80087ee <__sflush_r+0xfe>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e78e      	b.n	800870c <__sflush_r+0x1c>
 80087ee:	4407      	add	r7, r0
 80087f0:	eba8 0800 	sub.w	r8, r8, r0
 80087f4:	e7e9      	b.n	80087ca <__sflush_r+0xda>
 80087f6:	bf00      	nop
 80087f8:	20400001 	.word	0x20400001

080087fc <_fflush_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	4605      	mov	r5, r0
 8008802:	460c      	mov	r4, r1
 8008804:	b1db      	cbz	r3, 800883e <_fflush_r+0x42>
 8008806:	b118      	cbz	r0, 8008810 <_fflush_r+0x14>
 8008808:	6983      	ldr	r3, [r0, #24]
 800880a:	b90b      	cbnz	r3, 8008810 <_fflush_r+0x14>
 800880c:	f7fe fae4 	bl	8006dd8 <__sinit>
 8008810:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <_fflush_r+0x48>)
 8008812:	429c      	cmp	r4, r3
 8008814:	d109      	bne.n	800882a <_fflush_r+0x2e>
 8008816:	686c      	ldr	r4, [r5, #4]
 8008818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881c:	b17b      	cbz	r3, 800883e <_fflush_r+0x42>
 800881e:	4621      	mov	r1, r4
 8008820:	4628      	mov	r0, r5
 8008822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008826:	f7ff bf63 	b.w	80086f0 <__sflush_r>
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <_fflush_r+0x4c>)
 800882c:	429c      	cmp	r4, r3
 800882e:	d101      	bne.n	8008834 <_fflush_r+0x38>
 8008830:	68ac      	ldr	r4, [r5, #8]
 8008832:	e7f1      	b.n	8008818 <_fflush_r+0x1c>
 8008834:	4b05      	ldr	r3, [pc, #20]	; (800884c <_fflush_r+0x50>)
 8008836:	429c      	cmp	r4, r3
 8008838:	bf08      	it	eq
 800883a:	68ec      	ldreq	r4, [r5, #12]
 800883c:	e7ec      	b.n	8008818 <_fflush_r+0x1c>
 800883e:	2000      	movs	r0, #0
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	bf00      	nop
 8008844:	08008b68 	.word	0x08008b68
 8008848:	08008b88 	.word	0x08008b88
 800884c:	08008b48 	.word	0x08008b48

08008850 <_lseek_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4605      	mov	r5, r0
 8008854:	4608      	mov	r0, r1
 8008856:	4611      	mov	r1, r2
 8008858:	2200      	movs	r2, #0
 800885a:	4c05      	ldr	r4, [pc, #20]	; (8008870 <_lseek_r+0x20>)
 800885c:	6022      	str	r2, [r4, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	f7f9 fce9 	bl	8002236 <_lseek>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_lseek_r+0x1e>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	b103      	cbz	r3, 800886e <_lseek_r+0x1e>
 800886c:	602b      	str	r3, [r5, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	2000048c 	.word	0x2000048c

08008874 <__swhatbuf_r>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	460e      	mov	r6, r1
 8008878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887c:	b096      	sub	sp, #88	; 0x58
 800887e:	2900      	cmp	r1, #0
 8008880:	4614      	mov	r4, r2
 8008882:	461d      	mov	r5, r3
 8008884:	da07      	bge.n	8008896 <__swhatbuf_r+0x22>
 8008886:	2300      	movs	r3, #0
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	89b3      	ldrh	r3, [r6, #12]
 800888c:	061a      	lsls	r2, r3, #24
 800888e:	d410      	bmi.n	80088b2 <__swhatbuf_r+0x3e>
 8008890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008894:	e00e      	b.n	80088b4 <__swhatbuf_r+0x40>
 8008896:	466a      	mov	r2, sp
 8008898:	f000 f8a4 	bl	80089e4 <_fstat_r>
 800889c:	2800      	cmp	r0, #0
 800889e:	dbf2      	blt.n	8008886 <__swhatbuf_r+0x12>
 80088a0:	9a01      	ldr	r2, [sp, #4]
 80088a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088aa:	425a      	negs	r2, r3
 80088ac:	415a      	adcs	r2, r3
 80088ae:	602a      	str	r2, [r5, #0]
 80088b0:	e7ee      	b.n	8008890 <__swhatbuf_r+0x1c>
 80088b2:	2340      	movs	r3, #64	; 0x40
 80088b4:	2000      	movs	r0, #0
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	b016      	add	sp, #88	; 0x58
 80088ba:	bd70      	pop	{r4, r5, r6, pc}

080088bc <__smakebuf_r>:
 80088bc:	898b      	ldrh	r3, [r1, #12]
 80088be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088c0:	079d      	lsls	r5, r3, #30
 80088c2:	4606      	mov	r6, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	d507      	bpl.n	80088d8 <__smakebuf_r+0x1c>
 80088c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	2301      	movs	r3, #1
 80088d2:	6163      	str	r3, [r4, #20]
 80088d4:	b002      	add	sp, #8
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	ab01      	add	r3, sp, #4
 80088da:	466a      	mov	r2, sp
 80088dc:	f7ff ffca 	bl	8008874 <__swhatbuf_r>
 80088e0:	9900      	ldr	r1, [sp, #0]
 80088e2:	4605      	mov	r5, r0
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff fac3 	bl	8007e70 <_malloc_r>
 80088ea:	b948      	cbnz	r0, 8008900 <__smakebuf_r+0x44>
 80088ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f0:	059a      	lsls	r2, r3, #22
 80088f2:	d4ef      	bmi.n	80088d4 <__smakebuf_r+0x18>
 80088f4:	f023 0303 	bic.w	r3, r3, #3
 80088f8:	f043 0302 	orr.w	r3, r3, #2
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	e7e3      	b.n	80088c8 <__smakebuf_r+0xc>
 8008900:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <__smakebuf_r+0x7c>)
 8008902:	62b3      	str	r3, [r6, #40]	; 0x28
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	6020      	str	r0, [r4, #0]
 8008908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	9b00      	ldr	r3, [sp, #0]
 8008910:	6120      	str	r0, [r4, #16]
 8008912:	6163      	str	r3, [r4, #20]
 8008914:	9b01      	ldr	r3, [sp, #4]
 8008916:	b15b      	cbz	r3, 8008930 <__smakebuf_r+0x74>
 8008918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800891c:	4630      	mov	r0, r6
 800891e:	f000 f873 	bl	8008a08 <_isatty_r>
 8008922:	b128      	cbz	r0, 8008930 <__smakebuf_r+0x74>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f023 0303 	bic.w	r3, r3, #3
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	431d      	orrs	r5, r3
 8008934:	81a5      	strh	r5, [r4, #12]
 8008936:	e7cd      	b.n	80088d4 <__smakebuf_r+0x18>
 8008938:	08006da1 	.word	0x08006da1

0800893c <memmove>:
 800893c:	4288      	cmp	r0, r1
 800893e:	b510      	push	{r4, lr}
 8008940:	eb01 0302 	add.w	r3, r1, r2
 8008944:	d807      	bhi.n	8008956 <memmove+0x1a>
 8008946:	1e42      	subs	r2, r0, #1
 8008948:	4299      	cmp	r1, r3
 800894a:	d00a      	beq.n	8008962 <memmove+0x26>
 800894c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008950:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008954:	e7f8      	b.n	8008948 <memmove+0xc>
 8008956:	4283      	cmp	r3, r0
 8008958:	d9f5      	bls.n	8008946 <memmove+0xa>
 800895a:	1881      	adds	r1, r0, r2
 800895c:	1ad2      	subs	r2, r2, r3
 800895e:	42d3      	cmn	r3, r2
 8008960:	d100      	bne.n	8008964 <memmove+0x28>
 8008962:	bd10      	pop	{r4, pc}
 8008964:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008968:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800896c:	e7f7      	b.n	800895e <memmove+0x22>

0800896e <__malloc_lock>:
 800896e:	4770      	bx	lr

08008970 <__malloc_unlock>:
 8008970:	4770      	bx	lr

08008972 <_realloc_r>:
 8008972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008974:	4607      	mov	r7, r0
 8008976:	4614      	mov	r4, r2
 8008978:	460e      	mov	r6, r1
 800897a:	b921      	cbnz	r1, 8008986 <_realloc_r+0x14>
 800897c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008980:	4611      	mov	r1, r2
 8008982:	f7ff ba75 	b.w	8007e70 <_malloc_r>
 8008986:	b922      	cbnz	r2, 8008992 <_realloc_r+0x20>
 8008988:	f7ff fa26 	bl	8007dd8 <_free_r>
 800898c:	4625      	mov	r5, r4
 800898e:	4628      	mov	r0, r5
 8008990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008992:	f000 f849 	bl	8008a28 <_malloc_usable_size_r>
 8008996:	42a0      	cmp	r0, r4
 8008998:	d20f      	bcs.n	80089ba <_realloc_r+0x48>
 800899a:	4621      	mov	r1, r4
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff fa67 	bl	8007e70 <_malloc_r>
 80089a2:	4605      	mov	r5, r0
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d0f2      	beq.n	800898e <_realloc_r+0x1c>
 80089a8:	4631      	mov	r1, r6
 80089aa:	4622      	mov	r2, r4
 80089ac:	f7fe fe02 	bl	80075b4 <memcpy>
 80089b0:	4631      	mov	r1, r6
 80089b2:	4638      	mov	r0, r7
 80089b4:	f7ff fa10 	bl	8007dd8 <_free_r>
 80089b8:	e7e9      	b.n	800898e <_realloc_r+0x1c>
 80089ba:	4635      	mov	r5, r6
 80089bc:	e7e7      	b.n	800898e <_realloc_r+0x1c>
	...

080089c0 <_read_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4605      	mov	r5, r0
 80089c4:	4608      	mov	r0, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	2200      	movs	r2, #0
 80089ca:	4c05      	ldr	r4, [pc, #20]	; (80089e0 <_read_r+0x20>)
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f7f9 fbf0 	bl	80021b4 <_read>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_read_r+0x1e>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	b103      	cbz	r3, 80089de <_read_r+0x1e>
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	2000048c 	.word	0x2000048c

080089e4 <_fstat_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	2300      	movs	r3, #0
 80089e8:	4c06      	ldr	r4, [pc, #24]	; (8008a04 <_fstat_r+0x20>)
 80089ea:	4605      	mov	r5, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	4611      	mov	r1, r2
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	f7f9 fc07 	bl	8002204 <_fstat>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d102      	bne.n	8008a00 <_fstat_r+0x1c>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	b103      	cbz	r3, 8008a00 <_fstat_r+0x1c>
 80089fe:	602b      	str	r3, [r5, #0]
 8008a00:	bd38      	pop	{r3, r4, r5, pc}
 8008a02:	bf00      	nop
 8008a04:	2000048c 	.word	0x2000048c

08008a08 <_isatty_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4c05      	ldr	r4, [pc, #20]	; (8008a24 <_isatty_r+0x1c>)
 8008a0e:	4605      	mov	r5, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	f7f9 fc05 	bl	8002222 <_isatty>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_isatty_r+0x1a>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_isatty_r+0x1a>
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	2000048c 	.word	0x2000048c

08008a28 <_malloc_usable_size_r>:
 8008a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2c:	1f18      	subs	r0, r3, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bfbc      	itt	lt
 8008a32:	580b      	ldrlt	r3, [r1, r0]
 8008a34:	18c0      	addlt	r0, r0, r3
 8008a36:	4770      	bx	lr

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
