
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000284c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a1c  08002a1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a1c  08002a1c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a1c  08002a1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002a94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002a94  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ddf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000187b  00000000  00000000  00029e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002c108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181c8  00000000  00000000  0002ca50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f16  00000000  00000000  00044c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088c76  00000000  00000000  0004cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d57a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed8  00000000  00000000  000d5820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002940 	.word	0x08002940

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002940 	.word	0x08002940

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fdf2 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d101      	bne.n	8000736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e26c      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	2b00      	cmp	r3, #0
 8000740:	f000 8087 	beq.w	8000852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000744:	4b92      	ldr	r3, [pc, #584]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	f003 030c 	and.w	r3, r3, #12
 800074c:	2b04      	cmp	r3, #4
 800074e:	d00c      	beq.n	800076a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000750:	4b8f      	ldr	r3, [pc, #572]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f003 030c 	and.w	r3, r3, #12
 8000758:	2b08      	cmp	r3, #8
 800075a:	d112      	bne.n	8000782 <HAL_RCC_OscConfig+0x5e>
 800075c:	4b8c      	ldr	r3, [pc, #560]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000768:	d10b      	bne.n	8000782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800076a:	4b89      	ldr	r3, [pc, #548]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d06c      	beq.n	8000850 <HAL_RCC_OscConfig+0x12c>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d168      	bne.n	8000850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e246      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800078a:	d106      	bne.n	800079a <HAL_RCC_OscConfig+0x76>
 800078c:	4b80      	ldr	r3, [pc, #512]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a7f      	ldr	r2, [pc, #508]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 8000792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e02e      	b.n	80007f8 <HAL_RCC_OscConfig+0xd4>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10c      	bne.n	80007bc <HAL_RCC_OscConfig+0x98>
 80007a2:	4b7b      	ldr	r3, [pc, #492]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a7a      	ldr	r2, [pc, #488]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	4b78      	ldr	r3, [pc, #480]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a77      	ldr	r2, [pc, #476]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e01d      	b.n	80007f8 <HAL_RCC_OscConfig+0xd4>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007c4:	d10c      	bne.n	80007e0 <HAL_RCC_OscConfig+0xbc>
 80007c6:	4b72      	ldr	r3, [pc, #456]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a71      	ldr	r2, [pc, #452]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	4b6f      	ldr	r3, [pc, #444]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a6e      	ldr	r2, [pc, #440]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	e00b      	b.n	80007f8 <HAL_RCC_OscConfig+0xd4>
 80007e0:	4b6b      	ldr	r3, [pc, #428]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a6a      	ldr	r2, [pc, #424]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b68      	ldr	r3, [pc, #416]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a67      	ldr	r2, [pc, #412]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80007f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d013      	beq.n	8000828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000800:	f7ff fcfc 	bl	80001fc <HAL_GetTick>
 8000804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000806:	e008      	b.n	800081a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000808:	f7ff fcf8 	bl	80001fc <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	2b64      	cmp	r3, #100	; 0x64
 8000814:	d901      	bls.n	800081a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000816:	2303      	movs	r3, #3
 8000818:	e1fa      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800081a:	4b5d      	ldr	r3, [pc, #372]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f0      	beq.n	8000808 <HAL_RCC_OscConfig+0xe4>
 8000826:	e014      	b.n	8000852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000828:	f7ff fce8 	bl	80001fc <HAL_GetTick>
 800082c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800082e:	e008      	b.n	8000842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000830:	f7ff fce4 	bl	80001fc <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b64      	cmp	r3, #100	; 0x64
 800083c:	d901      	bls.n	8000842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800083e:	2303      	movs	r3, #3
 8000840:	e1e6      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000842:	4b53      	ldr	r3, [pc, #332]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1f0      	bne.n	8000830 <HAL_RCC_OscConfig+0x10c>
 800084e:	e000      	b.n	8000852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d063      	beq.n	8000926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800085e:	4b4c      	ldr	r3, [pc, #304]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f003 030c 	and.w	r3, r3, #12
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00b      	beq.n	8000882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800086a:	4b49      	ldr	r3, [pc, #292]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 030c 	and.w	r3, r3, #12
 8000872:	2b08      	cmp	r3, #8
 8000874:	d11c      	bne.n	80008b0 <HAL_RCC_OscConfig+0x18c>
 8000876:	4b46      	ldr	r3, [pc, #280]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d116      	bne.n	80008b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000882:	4b43      	ldr	r3, [pc, #268]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	2b00      	cmp	r3, #0
 800088c:	d005      	beq.n	800089a <HAL_RCC_OscConfig+0x176>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d001      	beq.n	800089a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e1ba      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800089a:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	4939      	ldr	r1, [pc, #228]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80008aa:	4313      	orrs	r3, r2
 80008ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ae:	e03a      	b.n	8000926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d020      	beq.n	80008fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <HAL_RCC_OscConfig+0x270>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008be:	f7ff fc9d 	bl	80001fc <HAL_GetTick>
 80008c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c4:	e008      	b.n	80008d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008c6:	f7ff fc99 	bl	80001fc <HAL_GetTick>
 80008ca:	4602      	mov	r2, r0
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d901      	bls.n	80008d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008d4:	2303      	movs	r3, #3
 80008d6:	e19b      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d8:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f0      	beq.n	80008c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e4:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	4927      	ldr	r1, [pc, #156]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 80008f4:	4313      	orrs	r3, r2
 80008f6:	600b      	str	r3, [r1, #0]
 80008f8:	e015      	b.n	8000926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <HAL_RCC_OscConfig+0x270>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000900:	f7ff fc7c 	bl	80001fc <HAL_GetTick>
 8000904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000906:	e008      	b.n	800091a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000908:	f7ff fc78 	bl	80001fc <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	2b02      	cmp	r3, #2
 8000914:	d901      	bls.n	800091a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000916:	2303      	movs	r3, #3
 8000918:	e17a      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1f0      	bne.n	8000908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	2b00      	cmp	r3, #0
 8000930:	d03a      	beq.n	80009a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d019      	beq.n	800096e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_RCC_OscConfig+0x274>)
 800093c:	2201      	movs	r2, #1
 800093e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000940:	f7ff fc5c 	bl	80001fc <HAL_GetTick>
 8000944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000946:	e008      	b.n	800095a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000948:	f7ff fc58 	bl	80001fc <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	2b02      	cmp	r3, #2
 8000954:	d901      	bls.n	800095a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000956:	2303      	movs	r3, #3
 8000958:	e15a      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_RCC_OscConfig+0x26c>)
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f0      	beq.n	8000948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000966:	2001      	movs	r0, #1
 8000968:	f000 faa8 	bl	8000ebc <RCC_Delay>
 800096c:	e01c      	b.n	80009a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_RCC_OscConfig+0x274>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000974:	f7ff fc42 	bl	80001fc <HAL_GetTick>
 8000978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800097a:	e00f      	b.n	800099c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800097c:	f7ff fc3e 	bl	80001fc <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d908      	bls.n	800099c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	e140      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	42420000 	.word	0x42420000
 8000998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800099c:	4b9e      	ldr	r3, [pc, #632]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e9      	bne.n	800097c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80a6 	beq.w	8000b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ba:	4b97      	ldr	r3, [pc, #604]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10d      	bne.n	80009e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b94      	ldr	r3, [pc, #592]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a93      	ldr	r2, [pc, #588]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b91      	ldr	r3, [pc, #580]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009de:	2301      	movs	r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e2:	4b8e      	ldr	r3, [pc, #568]	; (8000c1c <HAL_RCC_OscConfig+0x4f8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d118      	bne.n	8000a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009ee:	4b8b      	ldr	r3, [pc, #556]	; (8000c1c <HAL_RCC_OscConfig+0x4f8>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a8a      	ldr	r2, [pc, #552]	; (8000c1c <HAL_RCC_OscConfig+0x4f8>)
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009fa:	f7ff fbff 	bl	80001fc <HAL_GetTick>
 80009fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a00:	e008      	b.n	8000a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a02:	f7ff fbfb 	bl	80001fc <HAL_GetTick>
 8000a06:	4602      	mov	r2, r0
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b64      	cmp	r3, #100	; 0x64
 8000a0e:	d901      	bls.n	8000a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a10:	2303      	movs	r3, #3
 8000a12:	e0fd      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a14:	4b81      	ldr	r3, [pc, #516]	; (8000c1c <HAL_RCC_OscConfig+0x4f8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0f0      	beq.n	8000a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d106      	bne.n	8000a36 <HAL_RCC_OscConfig+0x312>
 8000a28:	4b7b      	ldr	r3, [pc, #492]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	4a7a      	ldr	r2, [pc, #488]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6213      	str	r3, [r2, #32]
 8000a34:	e02d      	b.n	8000a92 <HAL_RCC_OscConfig+0x36e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10c      	bne.n	8000a58 <HAL_RCC_OscConfig+0x334>
 8000a3e:	4b76      	ldr	r3, [pc, #472]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a40:	6a1b      	ldr	r3, [r3, #32]
 8000a42:	4a75      	ldr	r2, [pc, #468]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a44:	f023 0301 	bic.w	r3, r3, #1
 8000a48:	6213      	str	r3, [r2, #32]
 8000a4a:	4b73      	ldr	r3, [pc, #460]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a4c:	6a1b      	ldr	r3, [r3, #32]
 8000a4e:	4a72      	ldr	r2, [pc, #456]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a50:	f023 0304 	bic.w	r3, r3, #4
 8000a54:	6213      	str	r3, [r2, #32]
 8000a56:	e01c      	b.n	8000a92 <HAL_RCC_OscConfig+0x36e>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	d10c      	bne.n	8000a7a <HAL_RCC_OscConfig+0x356>
 8000a60:	4b6d      	ldr	r3, [pc, #436]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a62:	6a1b      	ldr	r3, [r3, #32]
 8000a64:	4a6c      	ldr	r2, [pc, #432]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6213      	str	r3, [r2, #32]
 8000a6c:	4b6a      	ldr	r3, [pc, #424]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a6e:	6a1b      	ldr	r3, [r3, #32]
 8000a70:	4a69      	ldr	r2, [pc, #420]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6213      	str	r3, [r2, #32]
 8000a78:	e00b      	b.n	8000a92 <HAL_RCC_OscConfig+0x36e>
 8000a7a:	4b67      	ldr	r3, [pc, #412]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	4a66      	ldr	r2, [pc, #408]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a80:	f023 0301 	bic.w	r3, r3, #1
 8000a84:	6213      	str	r3, [r2, #32]
 8000a86:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	4a63      	ldr	r2, [pc, #396]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000a8c:	f023 0304 	bic.w	r3, r3, #4
 8000a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d015      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a9a:	f7ff fbaf 	bl	80001fc <HAL_GetTick>
 8000a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa0:	e00a      	b.n	8000ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aa2:	f7ff fbab 	bl	80001fc <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d901      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e0ab      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab8:	4b57      	ldr	r3, [pc, #348]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000aba:	6a1b      	ldr	r3, [r3, #32]
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0ee      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x37e>
 8000ac4:	e014      	b.n	8000af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac6:	f7ff fb99 	bl	80001fc <HAL_GetTick>
 8000aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000acc:	e00a      	b.n	8000ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ace:	f7ff fb95 	bl	80001fc <HAL_GetTick>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d901      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e095      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae4:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1ee      	bne.n	8000ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d105      	bne.n	8000b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000af6:	4b48      	ldr	r3, [pc, #288]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4a47      	ldr	r2, [pc, #284]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 8081 	beq.w	8000c0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b0c:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 030c 	and.w	r3, r3, #12
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	d061      	beq.n	8000bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d146      	bne.n	8000bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b20:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <HAL_RCC_OscConfig+0x4fc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b26:	f7ff fb69 	bl	80001fc <HAL_GetTick>
 8000b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b2c:	e008      	b.n	8000b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b2e:	f7ff fb65 	bl	80001fc <HAL_GetTick>
 8000b32:	4602      	mov	r2, r0
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d901      	bls.n	8000b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e067      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1f0      	bne.n	8000b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b54:	d108      	bne.n	8000b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b56:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	492d      	ldr	r1, [pc, #180]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000b64:	4313      	orrs	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a19      	ldr	r1, [r3, #32]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	4927      	ldr	r1, [pc, #156]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_RCC_OscConfig+0x4fc>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b86:	f7ff fb39 	bl	80001fc <HAL_GetTick>
 8000b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b8c:	e008      	b.n	8000ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d901      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e037      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f0      	beq.n	8000b8e <HAL_RCC_OscConfig+0x46a>
 8000bac:	e02f      	b.n	8000c0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_RCC_OscConfig+0x4fc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fb22 	bl	80001fc <HAL_GetTick>
 8000bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bba:	e008      	b.n	8000bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bbc:	f7ff fb1e 	bl	80001fc <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d901      	bls.n	8000bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e020      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f0      	bne.n	8000bbc <HAL_RCC_OscConfig+0x498>
 8000bda:	e018      	b.n	8000c0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e013      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_RCC_OscConfig+0x4f4>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a1b      	ldr	r3, [r3, #32]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d106      	bne.n	8000c0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d001      	beq.n	8000c0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40007000 	.word	0x40007000
 8000c20:	42420060 	.word	0x42420060

08000c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e0d0      	b.n	8000dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c38:	4b6a      	ldr	r3, [pc, #424]	; (8000de4 <HAL_RCC_ClockConfig+0x1c0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d910      	bls.n	8000c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c46:	4b67      	ldr	r3, [pc, #412]	; (8000de4 <HAL_RCC_ClockConfig+0x1c0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f023 0207 	bic.w	r2, r3, #7
 8000c4e:	4965      	ldr	r1, [pc, #404]	; (8000de4 <HAL_RCC_ClockConfig+0x1c0>)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c56:	4b63      	ldr	r3, [pc, #396]	; (8000de4 <HAL_RCC_ClockConfig+0x1c0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d001      	beq.n	8000c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e0b8      	b.n	8000dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d020      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c80:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a58      	ldr	r2, [pc, #352]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000c86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c98:	4b53      	ldr	r3, [pc, #332]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a52      	ldr	r2, [pc, #328]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ca4:	4b50      	ldr	r3, [pc, #320]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	494d      	ldr	r1, [pc, #308]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d040      	beq.n	8000d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d107      	bne.n	8000cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cca:	4b47      	ldr	r3, [pc, #284]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d115      	bne.n	8000d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e07f      	b.n	8000dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d107      	bne.n	8000cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d109      	bne.n	8000d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e073      	b.n	8000dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e06b      	b.n	8000dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f023 0203 	bic.w	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4936      	ldr	r1, [pc, #216]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d14:	f7ff fa72 	bl	80001fc <HAL_GetTick>
 8000d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d1a:	e00a      	b.n	8000d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1c:	f7ff fa6e 	bl	80001fc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e053      	b.n	8000dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 020c 	and.w	r2, r3, #12
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d1eb      	bne.n	8000d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d210      	bcs.n	8000d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 0207 	bic.w	r2, r3, #7
 8000d5a:	4922      	ldr	r1, [pc, #136]	; (8000de4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d001      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e032      	b.n	8000dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d008      	beq.n	8000d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4916      	ldr	r1, [pc, #88]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	490e      	ldr	r1, [pc, #56]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000db2:	f000 f821 	bl	8000df8 <HAL_RCC_GetSysClockFreq>
 8000db6:	4601      	mov	r1, r0
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_RCC_ClockConfig+0x1c8>)
 8000dc4:	5cd3      	ldrb	r3, [r2, r3]
 8000dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_RCC_ClockConfig+0x1cc>)
 8000dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_RCC_ClockConfig+0x1d0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff f9d0 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40022000 	.word	0x40022000
 8000de8:	40021000 	.word	0x40021000
 8000dec:	080029a8 	.word	0x080029a8
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000000 	.word	0x20000000

08000df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e00:	1d3c      	adds	r4, r7, #4
 8000e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d002      	beq.n	8000e38 <HAL_RCC_GetSysClockFreq+0x40>
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d003      	beq.n	8000e3e <HAL_RCC_GetSysClockFreq+0x46>
 8000e36:	e02d      	b.n	8000e94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e3a:	623b      	str	r3, [r7, #32]
      break;
 8000e3c:	e02d      	b.n	8000e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	0c9b      	lsrs	r3, r3, #18
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e4a:	4413      	add	r3, r2
 8000e4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d013      	beq.n	8000e84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	0c5b      	lsrs	r3, r3, #17
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e76:	fb02 f203 	mul.w	r2, r2, r3
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
 8000e82:	e004      	b.n	8000e8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	623b      	str	r3, [r7, #32]
      break;
 8000e92:	e002      	b.n	8000e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e96:	623b      	str	r3, [r7, #32]
      break;
 8000e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc90      	pop	{r4, r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	08002958 	.word	0x08002958
 8000eac:	08002968 	.word	0x08002968
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	007a1200 	.word	0x007a1200
 8000eb8:	003d0900 	.word	0x003d0900

08000ebc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <RCC_Delay+0x34>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <RCC_Delay+0x38>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	0a5b      	lsrs	r3, r3, #9
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ed8:	bf00      	nop
  }
  while (Delay --);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	60fa      	str	r2, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f9      	bne.n	8000ed8 <RCC_Delay+0x1c>
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	10624dd3 	.word	0x10624dd3

08000ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e041      	b.n	8000f8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d106      	bne.n	8000f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 ff48 	bl	8001db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2202      	movs	r2, #2
 8000f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3304      	adds	r3, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4610      	mov	r0, r2
 8000f38:	f000 fb0a 	bl	8001550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d109      	bne.n	8000fbc <HAL_TIM_PWM_Start_IT+0x24>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	e022      	b.n	8001002 <HAL_TIM_PWM_Start_IT+0x6a>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d109      	bne.n	8000fd6 <HAL_TIM_PWM_Start_IT+0x3e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	e015      	b.n	8001002 <HAL_TIM_PWM_Start_IT+0x6a>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d109      	bne.n	8000ff0 <HAL_TIM_PWM_Start_IT+0x58>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	bf14      	ite	ne
 8000fe8:	2301      	movne	r3, #1
 8000fea:	2300      	moveq	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	e008      	b.n	8001002 <HAL_TIM_PWM_Start_IT+0x6a>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	bf14      	ite	ne
 8000ffc:	2301      	movne	r3, #1
 8000ffe:	2300      	moveq	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0a4      	b.n	8001154 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d104      	bne.n	800101a <HAL_TIM_PWM_Start_IT+0x82>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2202      	movs	r2, #2
 8001014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001018:	e013      	b.n	8001042 <HAL_TIM_PWM_Start_IT+0xaa>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d104      	bne.n	800102a <HAL_TIM_PWM_Start_IT+0x92>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001028:	e00b      	b.n	8001042 <HAL_TIM_PWM_Start_IT+0xaa>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2b08      	cmp	r3, #8
 800102e:	d104      	bne.n	800103a <HAL_TIM_PWM_Start_IT+0xa2>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2202      	movs	r2, #2
 8001034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001038:	e003      	b.n	8001042 <HAL_TIM_PWM_Start_IT+0xaa>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2202      	movs	r2, #2
 800103e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b0c      	cmp	r3, #12
 8001046:	d841      	bhi.n	80010cc <HAL_TIM_PWM_Start_IT+0x134>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <HAL_TIM_PWM_Start_IT+0xb8>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001085 	.word	0x08001085
 8001054:	080010cd 	.word	0x080010cd
 8001058:	080010cd 	.word	0x080010cd
 800105c:	080010cd 	.word	0x080010cd
 8001060:	08001097 	.word	0x08001097
 8001064:	080010cd 	.word	0x080010cd
 8001068:	080010cd 	.word	0x080010cd
 800106c:	080010cd 	.word	0x080010cd
 8001070:	080010a9 	.word	0x080010a9
 8001074:	080010cd 	.word	0x080010cd
 8001078:	080010cd 	.word	0x080010cd
 800107c:	080010cd 	.word	0x080010cd
 8001080:	080010bb 	.word	0x080010bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0202 	orr.w	r2, r2, #2
 8001092:	60da      	str	r2, [r3, #12]
      break;
 8001094:	e01b      	b.n	80010ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0204 	orr.w	r2, r2, #4
 80010a4:	60da      	str	r2, [r3, #12]
      break;
 80010a6:	e012      	b.n	80010ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0208 	orr.w	r2, r2, #8
 80010b6:	60da      	str	r2, [r3, #12]
      break;
 80010b8:	e009      	b.n	80010ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0210 	orr.w	r2, r2, #16
 80010c8:	60da      	str	r2, [r3, #12]
      break;
 80010ca:	e000      	b.n	80010ce <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80010cc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2201      	movs	r2, #1
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fc24 	bl	8001924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <HAL_TIM_PWM_Start_IT+0x1c4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d107      	bne.n	80010f6 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <HAL_TIM_PWM_Start_IT+0x1c4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d00e      	beq.n	800111e <HAL_TIM_PWM_Start_IT+0x186>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001108:	d009      	beq.n	800111e <HAL_TIM_PWM_Start_IT+0x186>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d004      	beq.n	800111e <HAL_TIM_PWM_Start_IT+0x186>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_TIM_PWM_Start_IT+0x1cc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d111      	bne.n	8001142 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b06      	cmp	r3, #6
 800112e:	d010      	beq.n	8001152 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001140:	e007      	b.n	8001152 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40012c00 	.word	0x40012c00
 8001160:	40000400 	.word	0x40000400
 8001164:	40000800 	.word	0x40000800

08001168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b02      	cmp	r3, #2
 800117c:	d122      	bne.n	80011c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b02      	cmp	r3, #2
 800118a:	d11b      	bne.n	80011c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f06f 0202 	mvn.w	r2, #2
 8001194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f9b4 	bl	8001518 <HAL_TIM_IC_CaptureCallback>
 80011b0:	e005      	b.n	80011be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f9a7 	bl	8001506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f9b6 	bl	800152a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d122      	bne.n	8001218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d11b      	bne.n	8001218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f06f 0204 	mvn.w	r2, #4
 80011e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2202      	movs	r2, #2
 80011ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f98a 	bl	8001518 <HAL_TIM_IC_CaptureCallback>
 8001204:	e005      	b.n	8001212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f97d 	bl	8001506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f98c 	bl	800152a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b08      	cmp	r3, #8
 8001224:	d122      	bne.n	800126c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b08      	cmp	r3, #8
 8001232:	d11b      	bne.n	800126c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f06f 0208 	mvn.w	r2, #8
 800123c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2204      	movs	r2, #4
 8001242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f960 	bl	8001518 <HAL_TIM_IC_CaptureCallback>
 8001258:	e005      	b.n	8001266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f953 	bl	8001506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f962 	bl	800152a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b10      	cmp	r3, #16
 8001278:	d122      	bne.n	80012c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b10      	cmp	r3, #16
 8001286:	d11b      	bne.n	80012c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0210 	mvn.w	r2, #16
 8001290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2208      	movs	r2, #8
 8001296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f936 	bl	8001518 <HAL_TIM_IC_CaptureCallback>
 80012ac:	e005      	b.n	80012ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f929 	bl	8001506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f938 	bl	800152a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10e      	bne.n	80012ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f06f 0201 	mvn.w	r2, #1
 80012e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f904 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f6:	2b80      	cmp	r3, #128	; 0x80
 80012f8:	d10e      	bne.n	8001318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001304:	2b80      	cmp	r3, #128	; 0x80
 8001306:	d107      	bne.n	8001318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fb91 	bl	8001a3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001322:	2b40      	cmp	r3, #64	; 0x40
 8001324:	d10e      	bne.n	8001344 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001330:	2b40      	cmp	r3, #64	; 0x40
 8001332:	d107      	bne.n	8001344 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800133c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f8fc 	bl	800153c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	2b20      	cmp	r3, #32
 8001350:	d10e      	bne.n	8001370 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f003 0320 	and.w	r3, r3, #32
 800135c:	2b20      	cmp	r3, #32
 800135e:	d107      	bne.n	8001370 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f06f 0220 	mvn.w	r2, #32
 8001368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fb5c 	bl	8001a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800138e:	2302      	movs	r3, #2
 8001390:	e0ac      	b.n	80014ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	f200 809f 	bhi.w	80014e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	080013dd 	.word	0x080013dd
 80013ac:	080014e1 	.word	0x080014e1
 80013b0:	080014e1 	.word	0x080014e1
 80013b4:	080014e1 	.word	0x080014e1
 80013b8:	0800141d 	.word	0x0800141d
 80013bc:	080014e1 	.word	0x080014e1
 80013c0:	080014e1 	.word	0x080014e1
 80013c4:	080014e1 	.word	0x080014e1
 80013c8:	0800145f 	.word	0x0800145f
 80013cc:	080014e1 	.word	0x080014e1
 80013d0:	080014e1 	.word	0x080014e1
 80013d4:	080014e1 	.word	0x080014e1
 80013d8:	0800149f 	.word	0x0800149f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f916 	bl	8001614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0208 	orr.w	r2, r2, #8
 80013f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0204 	bic.w	r2, r2, #4
 8001406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6999      	ldr	r1, [r3, #24]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	619a      	str	r2, [r3, #24]
      break;
 800141a:	e062      	b.n	80014e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f95c 	bl	80016e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699a      	ldr	r2, [r3, #24]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6999      	ldr	r1, [r3, #24]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	021a      	lsls	r2, r3, #8
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	619a      	str	r2, [r3, #24]
      break;
 800145c:	e041      	b.n	80014e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f9a5 	bl	80017b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69da      	ldr	r2, [r3, #28]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0208 	orr.w	r2, r2, #8
 8001478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	69da      	ldr	r2, [r3, #28]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0204 	bic.w	r2, r2, #4
 8001488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69d9      	ldr	r1, [r3, #28]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	61da      	str	r2, [r3, #28]
      break;
 800149c:	e021      	b.n	80014e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f9ef 	bl	8001888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	69da      	ldr	r2, [r3, #28]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	69da      	ldr	r2, [r3, #28]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	69d9      	ldr	r1, [r3, #28]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	021a      	lsls	r2, r3, #8
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	61da      	str	r2, [r3, #28]
      break;
 80014de:	e000      	b.n	80014e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80014e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a29      	ldr	r2, [pc, #164]	; (8001608 <TIM_Base_SetConfig+0xb8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00b      	beq.n	8001580 <TIM_Base_SetConfig+0x30>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156e:	d007      	beq.n	8001580 <TIM_Base_SetConfig+0x30>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a26      	ldr	r2, [pc, #152]	; (800160c <TIM_Base_SetConfig+0xbc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d003      	beq.n	8001580 <TIM_Base_SetConfig+0x30>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a25      	ldr	r2, [pc, #148]	; (8001610 <TIM_Base_SetConfig+0xc0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d108      	bne.n	8001592 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <TIM_Base_SetConfig+0xb8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00b      	beq.n	80015b2 <TIM_Base_SetConfig+0x62>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a0:	d007      	beq.n	80015b2 <TIM_Base_SetConfig+0x62>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <TIM_Base_SetConfig+0xbc>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d003      	beq.n	80015b2 <TIM_Base_SetConfig+0x62>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <TIM_Base_SetConfig+0xc0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d108      	bne.n	80015c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <TIM_Base_SetConfig+0xb8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d103      	bne.n	80015f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	615a      	str	r2, [r3, #20]
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40012c00 	.word	0x40012c00
 800160c:	40000400 	.word	0x40000400
 8001610:	40000800 	.word	0x40000800

08001614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	f023 0201 	bic.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 0303 	bic.w	r3, r3, #3
 800164a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f023 0302 	bic.w	r3, r3, #2
 800165c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4313      	orrs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <TIM_OC1_SetConfig+0xc8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d10c      	bne.n	800168a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f023 0308 	bic.w	r3, r3, #8
 8001676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <TIM_OC1_SetConfig+0xc8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d111      	bne.n	80016b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	621a      	str	r2, [r3, #32]
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40012c00 	.word	0x40012c00

080016e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	f023 0210 	bic.w	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800170e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f023 0320 	bic.w	r3, r3, #32
 800172a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <TIM_OC2_SetConfig+0xd0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d10d      	bne.n	800175c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800175a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <TIM_OC2_SetConfig+0xd0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d113      	bne.n	800178c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800176a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	621a      	str	r2, [r3, #32]
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	40012c00 	.word	0x40012c00

080017b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <TIM_OC3_SetConfig+0xd0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10d      	bne.n	800182e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800182c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <TIM_OC3_SetConfig+0xd0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d113      	bne.n	800185e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800183c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	621a      	str	r2, [r3, #32]
}
 8001878:	bf00      	nop
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40012c00 	.word	0x40012c00

08001888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	031b      	lsls	r3, r3, #12
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <TIM_OC4_SetConfig+0x98>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d109      	bne.n	80018fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	621a      	str	r2, [r3, #32]
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40012c00 	.word	0x40012c00

08001924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	2201      	movs	r2, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a1a      	ldr	r2, [r3, #32]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	621a      	str	r2, [r3, #32]
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001980:	2302      	movs	r3, #2
 8001982:	e046      	b.n	8001a12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00e      	beq.n	80019e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d0:	d009      	beq.n	80019e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d004      	beq.n	80019e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10c      	bne.n	8001a00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	40000400 	.word	0x40000400
 8001a24:	40000800 	.word	0x40000800

08001a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a74:	e000      	b.n	8001a78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f9      	beq.n	8001a76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*---------------------отладка в SWO-----------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e009      	b.n	8001abe <_write+0x26>
		ITM_SendChar(*ptr++);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60ba      	str	r2, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ffca 	bl	8001a4c <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3301      	adds	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbf1      	blt.n	8001aaa <_write+0x12>
	}
	return len;
 8001ac6:	687b      	ldr	r3, [r7, #4]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <servo_deg>:
/*---------------------отладка в SWO-----------------------------------------*/

void servo_deg(uint8_t deg) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	deg >= 180 ? deg = 180 : deg;
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2bb3      	cmp	r3, #179	; 0xb3
 8001ade:	d901      	bls.n	8001ae4 <servo_deg+0x14>
 8001ae0:	23b4      	movs	r3, #180	; 0xb4
 8001ae2:	71fb      	strb	r3, [r7, #7]
	deg == 0 ? deg = 0 : deg;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <servo_deg+0x1e>
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR2 = 7500 - (deg * 35);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8001afc:	330c      	adds	r3, #12
 8001afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b02:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b14:	f7fe fb1a 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b18:	f000 f848 	bl	8001bac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b1c:	f000 f8e4 	bl	8001ce8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001b20:	f000 f88a 	bl	8001c38 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8001b24:	2104      	movs	r1, #4
 8001b26:	481b      	ldr	r0, [pc, #108]	; (8001b94 <main+0x84>)
 8001b28:	f7ff fa36 	bl	8000f98 <HAL_TIM_PWM_Start_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		servo_deg(0);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ffcf 	bl	8001ad0 <servo_deg>
		printf("deg = 0\r\n");
 8001b32:	4819      	ldr	r0, [pc, #100]	; (8001b98 <main+0x88>)
 8001b34:	f000 fafa 	bl	800212c <puts>
		HAL_Delay(1000);
 8001b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3c:	f7fe fb68 	bl	8000210 <HAL_Delay>
		servo_deg(45);
 8001b40:	202d      	movs	r0, #45	; 0x2d
 8001b42:	f7ff ffc5 	bl	8001ad0 <servo_deg>
		printf("deg = 45\r\n");
 8001b46:	4815      	ldr	r0, [pc, #84]	; (8001b9c <main+0x8c>)
 8001b48:	f000 faf0 	bl	800212c <puts>
		HAL_Delay(1000);
 8001b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b50:	f7fe fb5e 	bl	8000210 <HAL_Delay>
		servo_deg(90);
 8001b54:	205a      	movs	r0, #90	; 0x5a
 8001b56:	f7ff ffbb 	bl	8001ad0 <servo_deg>
		printf("deg = 90\r\n");
 8001b5a:	4811      	ldr	r0, [pc, #68]	; (8001ba0 <main+0x90>)
 8001b5c:	f000 fae6 	bl	800212c <puts>
		HAL_Delay(1000);
 8001b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b64:	f7fe fb54 	bl	8000210 <HAL_Delay>
		servo_deg(135);
 8001b68:	2087      	movs	r0, #135	; 0x87
 8001b6a:	f7ff ffb1 	bl	8001ad0 <servo_deg>
		printf("deg = 135\r\n");
 8001b6e:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <main+0x94>)
 8001b70:	f000 fadc 	bl	800212c <puts>
		HAL_Delay(1000);
 8001b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b78:	f7fe fb4a 	bl	8000210 <HAL_Delay>
		servo_deg(180);
 8001b7c:	20b4      	movs	r0, #180	; 0xb4
 8001b7e:	f7ff ffa7 	bl	8001ad0 <servo_deg>
		printf("deg = 180\r\n");
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <main+0x98>)
 8001b84:	f000 fad2 	bl	800212c <puts>
		HAL_Delay(1000);
 8001b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b8c:	f7fe fb40 	bl	8000210 <HAL_Delay>
		servo_deg(0);
 8001b90:	e7cc      	b.n	8001b2c <main+0x1c>
 8001b92:	bf00      	nop
 8001b94:	2000009c 	.word	0x2000009c
 8001b98:	0800296c 	.word	0x0800296c
 8001b9c:	08002978 	.word	0x08002978
 8001ba0:	08002984 	.word	0x08002984
 8001ba4:	08002990 	.word	0x08002990
 8001ba8:	0800299c 	.word	0x0800299c

08001bac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b090      	sub	sp, #64	; 0x40
 8001bb0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	2228      	movs	r2, #40	; 0x28
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fa52 	bl	8002064 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be0:	2302      	movs	r3, #2
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fd95 	bl	8000724 <HAL_RCC_OscConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <SystemClock_Config+0x58>
		Error_Handler();
 8001c00:	f000 f8a0 	bl	8001d44 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c04:	230f      	movs	r3, #15
 8001c06:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f800 	bl	8000c24 <HAL_RCC_ClockConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0x82>
		Error_Handler();
 8001c2a:	f000 f88b 	bl	8001d44 <Error_Handler>
	}
}
 8001c2e:	bf00      	nop
 8001c30:	3740      	adds	r7, #64	; 0x40
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c3e:	f107 0320 	add.w	r3, r7, #32
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c60:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 21;
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001c64:	2215      	movs	r2, #21
 8001c66:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65450;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001c70:	f64f 72aa 	movw	r2, #65450	; 0xffaa
 8001c74:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001c82:	4818      	ldr	r0, [pc, #96]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001c84:	f7ff f938 	bl	8000ef8 <HAL_TIM_PWM_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8001c8e:	f000 f859 	bl	8001d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4810      	ldr	r0, [pc, #64]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001ca2:	f7ff fe63 	bl	800196c <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001cac:	f000 f84a 	bl	8001d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb0:	2360      	movs	r3, #96	; 0x60
 8001cb2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001cc8:	f7ff fb56 	bl	8001378 <HAL_TIM_PWM_ConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001cd2:	f000 f837 	bl	8001d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001cd6:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <MX_TIM2_Init+0xac>)
 8001cd8:	f000 f890 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000009c 	.word	0x2000009c

08001ce8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001cf4:	f043 0320 	orr.w	r3, r3, #32
 8001cf8:	6193      	str	r3, [r2, #24]
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6193      	str	r3, [r2, #24]
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	6193      	str	r3, [r2, #24]
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <MX_GPIO_Init+0x58>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]

}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000

08001d44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_MspInit+0x5c>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_MspInit+0x5c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6193      	str	r3, [r2, #24]
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_MspInit+0x5c>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_MspInit+0x5c>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_MspInit+0x5c>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_MspInit+0x5c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_MspInit+0x60>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_MspInit+0x60>)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010000 	.word	0x40010000

08001db4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc4:	d113      	bne.n	8001dee <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_TIM_PWM_MspInit+0x44>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <HAL_TIM_PWM_MspInit+0x44>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_TIM_PWM_MspInit+0x44>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	201c      	movs	r0, #28
 8001de4:	f7fe fb0d 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de8:	201c      	movs	r0, #28
 8001dea:	f7fe fb26 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1a:	d117      	bne.n	8001e4c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_TIM_MspPostInit+0x58>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_TIM_MspPostInit+0x58>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_TIM_MspPostInit+0x58>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	4804      	ldr	r0, [pc, #16]	; (8001e58 <HAL_TIM_MspPostInit+0x5c>)
 8001e48:	f7fe fb12 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010800 	.word	0x40010800

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <HardFault_Handler+0x4>

08001e6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <MemManage_Handler+0x4>

08001e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <BusFault_Handler+0x4>

08001e7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <UsageFault_Handler+0x4>

08001e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f7fe f996 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <TIM2_IRQHandler+0x10>)
 8001eb6:	f7ff f957 	bl	8001168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000009c 	.word	0x2000009c

08001ec4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e00a      	b.n	8001eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ed6:	f3af 8000 	nop.w
 8001eda:	4601      	mov	r1, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf0      	blt.n	8001ed6 <_read+0x12>
	}

return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_close>:
	}
	return len;
}

int _close(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f24:	605a      	str	r2, [r3, #4]
	return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <_isatty>:

int _isatty(int file)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	return 1;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
	return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
	...

08001f60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x50>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_sbrk+0x16>
		heap_end = &end;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <_sbrk+0x50>)
 8001f72:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <_sbrk+0x54>)
 8001f74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <_sbrk+0x50>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <_sbrk+0x50>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	466a      	mov	r2, sp
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d907      	bls.n	8001f9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f8a:	f000 f841 	bl	8002010 <__errno>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	230c      	movs	r3, #12
 8001f92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	e006      	b.n	8001fa8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <_sbrk+0x50>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <_sbrk+0x50>)
 8001fa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000008c 	.word	0x2000008c
 8001fb4:	200000e8 	.word	0x200000e8

08001fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fc6:	e003      	b.n	8001fd0 <LoopCopyDataInit>

08001fc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001fca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fcc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fce:	3104      	adds	r1, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fd0:	480a      	ldr	r0, [pc, #40]	; (8001ffc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001fd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fd8:	d3f6      	bcc.n	8001fc8 <CopyDataInit>
  ldr r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001fdc:	e002      	b.n	8001fe4 <LoopFillZerobss>

08001fde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fe0:	f842 3b04 	str.w	r3, [r2], #4

08001fe4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fe6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fe8:	d3f9      	bcc.n	8001fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fea:	f7ff ffe5 	bl	8001fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fee:	f000 f815 	bl	800201c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff2:	f7ff fd8d 	bl	8001b10 <main>
  bx lr
 8001ff6:	4770      	bx	lr
  ldr r3, =_sidata
 8001ff8:	08002a24 	.word	0x08002a24
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002000:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002004:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002008:	200000e8 	.word	0x200000e8

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>
	...

08002010 <__errno>:
 8002010:	4b01      	ldr	r3, [pc, #4]	; (8002018 <__errno+0x8>)
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	2000000c 	.word	0x2000000c

0800201c <__libc_init_array>:
 800201c:	b570      	push	{r4, r5, r6, lr}
 800201e:	2500      	movs	r5, #0
 8002020:	4e0c      	ldr	r6, [pc, #48]	; (8002054 <__libc_init_array+0x38>)
 8002022:	4c0d      	ldr	r4, [pc, #52]	; (8002058 <__libc_init_array+0x3c>)
 8002024:	1ba4      	subs	r4, r4, r6
 8002026:	10a4      	asrs	r4, r4, #2
 8002028:	42a5      	cmp	r5, r4
 800202a:	d109      	bne.n	8002040 <__libc_init_array+0x24>
 800202c:	f000 fc88 	bl	8002940 <_init>
 8002030:	2500      	movs	r5, #0
 8002032:	4e0a      	ldr	r6, [pc, #40]	; (800205c <__libc_init_array+0x40>)
 8002034:	4c0a      	ldr	r4, [pc, #40]	; (8002060 <__libc_init_array+0x44>)
 8002036:	1ba4      	subs	r4, r4, r6
 8002038:	10a4      	asrs	r4, r4, #2
 800203a:	42a5      	cmp	r5, r4
 800203c:	d105      	bne.n	800204a <__libc_init_array+0x2e>
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002044:	4798      	blx	r3
 8002046:	3501      	adds	r5, #1
 8002048:	e7ee      	b.n	8002028 <__libc_init_array+0xc>
 800204a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800204e:	4798      	blx	r3
 8002050:	3501      	adds	r5, #1
 8002052:	e7f2      	b.n	800203a <__libc_init_array+0x1e>
 8002054:	08002a1c 	.word	0x08002a1c
 8002058:	08002a1c 	.word	0x08002a1c
 800205c:	08002a1c 	.word	0x08002a1c
 8002060:	08002a20 	.word	0x08002a20

08002064 <memset>:
 8002064:	4603      	mov	r3, r0
 8002066:	4402      	add	r2, r0
 8002068:	4293      	cmp	r3, r2
 800206a:	d100      	bne.n	800206e <memset+0xa>
 800206c:	4770      	bx	lr
 800206e:	f803 1b01 	strb.w	r1, [r3], #1
 8002072:	e7f9      	b.n	8002068 <memset+0x4>

08002074 <_puts_r>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	460e      	mov	r6, r1
 8002078:	4605      	mov	r5, r0
 800207a:	b118      	cbz	r0, 8002084 <_puts_r+0x10>
 800207c:	6983      	ldr	r3, [r0, #24]
 800207e:	b90b      	cbnz	r3, 8002084 <_puts_r+0x10>
 8002080:	f000 fa0c 	bl	800249c <__sinit>
 8002084:	69ab      	ldr	r3, [r5, #24]
 8002086:	68ac      	ldr	r4, [r5, #8]
 8002088:	b913      	cbnz	r3, 8002090 <_puts_r+0x1c>
 800208a:	4628      	mov	r0, r5
 800208c:	f000 fa06 	bl	800249c <__sinit>
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <_puts_r+0xac>)
 8002092:	429c      	cmp	r4, r3
 8002094:	d117      	bne.n	80020c6 <_puts_r+0x52>
 8002096:	686c      	ldr	r4, [r5, #4]
 8002098:	89a3      	ldrh	r3, [r4, #12]
 800209a:	071b      	lsls	r3, r3, #28
 800209c:	d51d      	bpl.n	80020da <_puts_r+0x66>
 800209e:	6923      	ldr	r3, [r4, #16]
 80020a0:	b1db      	cbz	r3, 80020da <_puts_r+0x66>
 80020a2:	3e01      	subs	r6, #1
 80020a4:	68a3      	ldr	r3, [r4, #8]
 80020a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020aa:	3b01      	subs	r3, #1
 80020ac:	60a3      	str	r3, [r4, #8]
 80020ae:	b9e9      	cbnz	r1, 80020ec <_puts_r+0x78>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da2e      	bge.n	8002112 <_puts_r+0x9e>
 80020b4:	4622      	mov	r2, r4
 80020b6:	210a      	movs	r1, #10
 80020b8:	4628      	mov	r0, r5
 80020ba:	f000 f83f 	bl	800213c <__swbuf_r>
 80020be:	3001      	adds	r0, #1
 80020c0:	d011      	beq.n	80020e6 <_puts_r+0x72>
 80020c2:	200a      	movs	r0, #10
 80020c4:	e011      	b.n	80020ea <_puts_r+0x76>
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <_puts_r+0xb0>)
 80020c8:	429c      	cmp	r4, r3
 80020ca:	d101      	bne.n	80020d0 <_puts_r+0x5c>
 80020cc:	68ac      	ldr	r4, [r5, #8]
 80020ce:	e7e3      	b.n	8002098 <_puts_r+0x24>
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <_puts_r+0xb4>)
 80020d2:	429c      	cmp	r4, r3
 80020d4:	bf08      	it	eq
 80020d6:	68ec      	ldreq	r4, [r5, #12]
 80020d8:	e7de      	b.n	8002098 <_puts_r+0x24>
 80020da:	4621      	mov	r1, r4
 80020dc:	4628      	mov	r0, r5
 80020de:	f000 f87f 	bl	80021e0 <__swsetup_r>
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d0dd      	beq.n	80020a2 <_puts_r+0x2e>
 80020e6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da04      	bge.n	80020fa <_puts_r+0x86>
 80020f0:	69a2      	ldr	r2, [r4, #24]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dc06      	bgt.n	8002104 <_puts_r+0x90>
 80020f6:	290a      	cmp	r1, #10
 80020f8:	d004      	beq.n	8002104 <_puts_r+0x90>
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	6022      	str	r2, [r4, #0]
 8002100:	7019      	strb	r1, [r3, #0]
 8002102:	e7cf      	b.n	80020a4 <_puts_r+0x30>
 8002104:	4622      	mov	r2, r4
 8002106:	4628      	mov	r0, r5
 8002108:	f000 f818 	bl	800213c <__swbuf_r>
 800210c:	3001      	adds	r0, #1
 800210e:	d1c9      	bne.n	80020a4 <_puts_r+0x30>
 8002110:	e7e9      	b.n	80020e6 <_puts_r+0x72>
 8002112:	200a      	movs	r0, #10
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	6022      	str	r2, [r4, #0]
 800211a:	7018      	strb	r0, [r3, #0]
 800211c:	e7e5      	b.n	80020ea <_puts_r+0x76>
 800211e:	bf00      	nop
 8002120:	080029dc 	.word	0x080029dc
 8002124:	080029fc 	.word	0x080029fc
 8002128:	080029bc 	.word	0x080029bc

0800212c <puts>:
 800212c:	4b02      	ldr	r3, [pc, #8]	; (8002138 <puts+0xc>)
 800212e:	4601      	mov	r1, r0
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	f7ff bf9f 	b.w	8002074 <_puts_r>
 8002136:	bf00      	nop
 8002138:	2000000c 	.word	0x2000000c

0800213c <__swbuf_r>:
 800213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213e:	460e      	mov	r6, r1
 8002140:	4614      	mov	r4, r2
 8002142:	4605      	mov	r5, r0
 8002144:	b118      	cbz	r0, 800214e <__swbuf_r+0x12>
 8002146:	6983      	ldr	r3, [r0, #24]
 8002148:	b90b      	cbnz	r3, 800214e <__swbuf_r+0x12>
 800214a:	f000 f9a7 	bl	800249c <__sinit>
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <__swbuf_r+0x98>)
 8002150:	429c      	cmp	r4, r3
 8002152:	d12a      	bne.n	80021aa <__swbuf_r+0x6e>
 8002154:	686c      	ldr	r4, [r5, #4]
 8002156:	69a3      	ldr	r3, [r4, #24]
 8002158:	60a3      	str	r3, [r4, #8]
 800215a:	89a3      	ldrh	r3, [r4, #12]
 800215c:	071a      	lsls	r2, r3, #28
 800215e:	d52e      	bpl.n	80021be <__swbuf_r+0x82>
 8002160:	6923      	ldr	r3, [r4, #16]
 8002162:	b363      	cbz	r3, 80021be <__swbuf_r+0x82>
 8002164:	6923      	ldr	r3, [r4, #16]
 8002166:	6820      	ldr	r0, [r4, #0]
 8002168:	b2f6      	uxtb	r6, r6
 800216a:	1ac0      	subs	r0, r0, r3
 800216c:	6963      	ldr	r3, [r4, #20]
 800216e:	4637      	mov	r7, r6
 8002170:	4283      	cmp	r3, r0
 8002172:	dc04      	bgt.n	800217e <__swbuf_r+0x42>
 8002174:	4621      	mov	r1, r4
 8002176:	4628      	mov	r0, r5
 8002178:	f000 f926 	bl	80023c8 <_fflush_r>
 800217c:	bb28      	cbnz	r0, 80021ca <__swbuf_r+0x8e>
 800217e:	68a3      	ldr	r3, [r4, #8]
 8002180:	3001      	adds	r0, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	60a3      	str	r3, [r4, #8]
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	6022      	str	r2, [r4, #0]
 800218c:	701e      	strb	r6, [r3, #0]
 800218e:	6963      	ldr	r3, [r4, #20]
 8002190:	4283      	cmp	r3, r0
 8002192:	d004      	beq.n	800219e <__swbuf_r+0x62>
 8002194:	89a3      	ldrh	r3, [r4, #12]
 8002196:	07db      	lsls	r3, r3, #31
 8002198:	d519      	bpl.n	80021ce <__swbuf_r+0x92>
 800219a:	2e0a      	cmp	r6, #10
 800219c:	d117      	bne.n	80021ce <__swbuf_r+0x92>
 800219e:	4621      	mov	r1, r4
 80021a0:	4628      	mov	r0, r5
 80021a2:	f000 f911 	bl	80023c8 <_fflush_r>
 80021a6:	b190      	cbz	r0, 80021ce <__swbuf_r+0x92>
 80021a8:	e00f      	b.n	80021ca <__swbuf_r+0x8e>
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <__swbuf_r+0x9c>)
 80021ac:	429c      	cmp	r4, r3
 80021ae:	d101      	bne.n	80021b4 <__swbuf_r+0x78>
 80021b0:	68ac      	ldr	r4, [r5, #8]
 80021b2:	e7d0      	b.n	8002156 <__swbuf_r+0x1a>
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <__swbuf_r+0xa0>)
 80021b6:	429c      	cmp	r4, r3
 80021b8:	bf08      	it	eq
 80021ba:	68ec      	ldreq	r4, [r5, #12]
 80021bc:	e7cb      	b.n	8002156 <__swbuf_r+0x1a>
 80021be:	4621      	mov	r1, r4
 80021c0:	4628      	mov	r0, r5
 80021c2:	f000 f80d 	bl	80021e0 <__swsetup_r>
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d0cc      	beq.n	8002164 <__swbuf_r+0x28>
 80021ca:	f04f 37ff 	mov.w	r7, #4294967295
 80021ce:	4638      	mov	r0, r7
 80021d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	080029dc 	.word	0x080029dc
 80021d8:	080029fc 	.word	0x080029fc
 80021dc:	080029bc 	.word	0x080029bc

080021e0 <__swsetup_r>:
 80021e0:	4b32      	ldr	r3, [pc, #200]	; (80022ac <__swsetup_r+0xcc>)
 80021e2:	b570      	push	{r4, r5, r6, lr}
 80021e4:	681d      	ldr	r5, [r3, #0]
 80021e6:	4606      	mov	r6, r0
 80021e8:	460c      	mov	r4, r1
 80021ea:	b125      	cbz	r5, 80021f6 <__swsetup_r+0x16>
 80021ec:	69ab      	ldr	r3, [r5, #24]
 80021ee:	b913      	cbnz	r3, 80021f6 <__swsetup_r+0x16>
 80021f0:	4628      	mov	r0, r5
 80021f2:	f000 f953 	bl	800249c <__sinit>
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <__swsetup_r+0xd0>)
 80021f8:	429c      	cmp	r4, r3
 80021fa:	d10f      	bne.n	800221c <__swsetup_r+0x3c>
 80021fc:	686c      	ldr	r4, [r5, #4]
 80021fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002202:	b29a      	uxth	r2, r3
 8002204:	0715      	lsls	r5, r2, #28
 8002206:	d42c      	bmi.n	8002262 <__swsetup_r+0x82>
 8002208:	06d0      	lsls	r0, r2, #27
 800220a:	d411      	bmi.n	8002230 <__swsetup_r+0x50>
 800220c:	2209      	movs	r2, #9
 800220e:	6032      	str	r2, [r6, #0]
 8002210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002214:	81a3      	strh	r3, [r4, #12]
 8002216:	f04f 30ff 	mov.w	r0, #4294967295
 800221a:	e03e      	b.n	800229a <__swsetup_r+0xba>
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <__swsetup_r+0xd4>)
 800221e:	429c      	cmp	r4, r3
 8002220:	d101      	bne.n	8002226 <__swsetup_r+0x46>
 8002222:	68ac      	ldr	r4, [r5, #8]
 8002224:	e7eb      	b.n	80021fe <__swsetup_r+0x1e>
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <__swsetup_r+0xd8>)
 8002228:	429c      	cmp	r4, r3
 800222a:	bf08      	it	eq
 800222c:	68ec      	ldreq	r4, [r5, #12]
 800222e:	e7e6      	b.n	80021fe <__swsetup_r+0x1e>
 8002230:	0751      	lsls	r1, r2, #29
 8002232:	d512      	bpl.n	800225a <__swsetup_r+0x7a>
 8002234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002236:	b141      	cbz	r1, 800224a <__swsetup_r+0x6a>
 8002238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800223c:	4299      	cmp	r1, r3
 800223e:	d002      	beq.n	8002246 <__swsetup_r+0x66>
 8002240:	4630      	mov	r0, r6
 8002242:	f000 fa19 	bl	8002678 <_free_r>
 8002246:	2300      	movs	r3, #0
 8002248:	6363      	str	r3, [r4, #52]	; 0x34
 800224a:	89a3      	ldrh	r3, [r4, #12]
 800224c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002250:	81a3      	strh	r3, [r4, #12]
 8002252:	2300      	movs	r3, #0
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	6923      	ldr	r3, [r4, #16]
 8002258:	6023      	str	r3, [r4, #0]
 800225a:	89a3      	ldrh	r3, [r4, #12]
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	81a3      	strh	r3, [r4, #12]
 8002262:	6923      	ldr	r3, [r4, #16]
 8002264:	b94b      	cbnz	r3, 800227a <__swsetup_r+0x9a>
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d003      	beq.n	800227a <__swsetup_r+0x9a>
 8002272:	4621      	mov	r1, r4
 8002274:	4630      	mov	r0, r6
 8002276:	f000 f9bf 	bl	80025f8 <__smakebuf_r>
 800227a:	89a2      	ldrh	r2, [r4, #12]
 800227c:	f012 0301 	ands.w	r3, r2, #1
 8002280:	d00c      	beq.n	800229c <__swsetup_r+0xbc>
 8002282:	2300      	movs	r3, #0
 8002284:	60a3      	str	r3, [r4, #8]
 8002286:	6963      	ldr	r3, [r4, #20]
 8002288:	425b      	negs	r3, r3
 800228a:	61a3      	str	r3, [r4, #24]
 800228c:	6923      	ldr	r3, [r4, #16]
 800228e:	b953      	cbnz	r3, 80022a6 <__swsetup_r+0xc6>
 8002290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002294:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002298:	d1ba      	bne.n	8002210 <__swsetup_r+0x30>
 800229a:	bd70      	pop	{r4, r5, r6, pc}
 800229c:	0792      	lsls	r2, r2, #30
 800229e:	bf58      	it	pl
 80022a0:	6963      	ldrpl	r3, [r4, #20]
 80022a2:	60a3      	str	r3, [r4, #8]
 80022a4:	e7f2      	b.n	800228c <__swsetup_r+0xac>
 80022a6:	2000      	movs	r0, #0
 80022a8:	e7f7      	b.n	800229a <__swsetup_r+0xba>
 80022aa:	bf00      	nop
 80022ac:	2000000c 	.word	0x2000000c
 80022b0:	080029dc 	.word	0x080029dc
 80022b4:	080029fc 	.word	0x080029fc
 80022b8:	080029bc 	.word	0x080029bc

080022bc <__sflush_r>:
 80022bc:	898a      	ldrh	r2, [r1, #12]
 80022be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c2:	4605      	mov	r5, r0
 80022c4:	0710      	lsls	r0, r2, #28
 80022c6:	460c      	mov	r4, r1
 80022c8:	d458      	bmi.n	800237c <__sflush_r+0xc0>
 80022ca:	684b      	ldr	r3, [r1, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	dc05      	bgt.n	80022dc <__sflush_r+0x20>
 80022d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	dc02      	bgt.n	80022dc <__sflush_r+0x20>
 80022d6:	2000      	movs	r0, #0
 80022d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022de:	2e00      	cmp	r6, #0
 80022e0:	d0f9      	beq.n	80022d6 <__sflush_r+0x1a>
 80022e2:	2300      	movs	r3, #0
 80022e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022e8:	682f      	ldr	r7, [r5, #0]
 80022ea:	6a21      	ldr	r1, [r4, #32]
 80022ec:	602b      	str	r3, [r5, #0]
 80022ee:	d032      	beq.n	8002356 <__sflush_r+0x9a>
 80022f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022f2:	89a3      	ldrh	r3, [r4, #12]
 80022f4:	075a      	lsls	r2, r3, #29
 80022f6:	d505      	bpl.n	8002304 <__sflush_r+0x48>
 80022f8:	6863      	ldr	r3, [r4, #4]
 80022fa:	1ac0      	subs	r0, r0, r3
 80022fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022fe:	b10b      	cbz	r3, 8002304 <__sflush_r+0x48>
 8002300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002302:	1ac0      	subs	r0, r0, r3
 8002304:	2300      	movs	r3, #0
 8002306:	4602      	mov	r2, r0
 8002308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800230a:	6a21      	ldr	r1, [r4, #32]
 800230c:	4628      	mov	r0, r5
 800230e:	47b0      	blx	r6
 8002310:	1c43      	adds	r3, r0, #1
 8002312:	89a3      	ldrh	r3, [r4, #12]
 8002314:	d106      	bne.n	8002324 <__sflush_r+0x68>
 8002316:	6829      	ldr	r1, [r5, #0]
 8002318:	291d      	cmp	r1, #29
 800231a:	d848      	bhi.n	80023ae <__sflush_r+0xf2>
 800231c:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <__sflush_r+0x108>)
 800231e:	40ca      	lsrs	r2, r1
 8002320:	07d6      	lsls	r6, r2, #31
 8002322:	d544      	bpl.n	80023ae <__sflush_r+0xf2>
 8002324:	2200      	movs	r2, #0
 8002326:	6062      	str	r2, [r4, #4]
 8002328:	6922      	ldr	r2, [r4, #16]
 800232a:	04d9      	lsls	r1, r3, #19
 800232c:	6022      	str	r2, [r4, #0]
 800232e:	d504      	bpl.n	800233a <__sflush_r+0x7e>
 8002330:	1c42      	adds	r2, r0, #1
 8002332:	d101      	bne.n	8002338 <__sflush_r+0x7c>
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	b903      	cbnz	r3, 800233a <__sflush_r+0x7e>
 8002338:	6560      	str	r0, [r4, #84]	; 0x54
 800233a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800233c:	602f      	str	r7, [r5, #0]
 800233e:	2900      	cmp	r1, #0
 8002340:	d0c9      	beq.n	80022d6 <__sflush_r+0x1a>
 8002342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002346:	4299      	cmp	r1, r3
 8002348:	d002      	beq.n	8002350 <__sflush_r+0x94>
 800234a:	4628      	mov	r0, r5
 800234c:	f000 f994 	bl	8002678 <_free_r>
 8002350:	2000      	movs	r0, #0
 8002352:	6360      	str	r0, [r4, #52]	; 0x34
 8002354:	e7c0      	b.n	80022d8 <__sflush_r+0x1c>
 8002356:	2301      	movs	r3, #1
 8002358:	4628      	mov	r0, r5
 800235a:	47b0      	blx	r6
 800235c:	1c41      	adds	r1, r0, #1
 800235e:	d1c8      	bne.n	80022f2 <__sflush_r+0x36>
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0c5      	beq.n	80022f2 <__sflush_r+0x36>
 8002366:	2b1d      	cmp	r3, #29
 8002368:	d001      	beq.n	800236e <__sflush_r+0xb2>
 800236a:	2b16      	cmp	r3, #22
 800236c:	d101      	bne.n	8002372 <__sflush_r+0xb6>
 800236e:	602f      	str	r7, [r5, #0]
 8002370:	e7b1      	b.n	80022d6 <__sflush_r+0x1a>
 8002372:	89a3      	ldrh	r3, [r4, #12]
 8002374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002378:	81a3      	strh	r3, [r4, #12]
 800237a:	e7ad      	b.n	80022d8 <__sflush_r+0x1c>
 800237c:	690f      	ldr	r7, [r1, #16]
 800237e:	2f00      	cmp	r7, #0
 8002380:	d0a9      	beq.n	80022d6 <__sflush_r+0x1a>
 8002382:	0793      	lsls	r3, r2, #30
 8002384:	bf18      	it	ne
 8002386:	2300      	movne	r3, #0
 8002388:	680e      	ldr	r6, [r1, #0]
 800238a:	bf08      	it	eq
 800238c:	694b      	ldreq	r3, [r1, #20]
 800238e:	eba6 0807 	sub.w	r8, r6, r7
 8002392:	600f      	str	r7, [r1, #0]
 8002394:	608b      	str	r3, [r1, #8]
 8002396:	f1b8 0f00 	cmp.w	r8, #0
 800239a:	dd9c      	ble.n	80022d6 <__sflush_r+0x1a>
 800239c:	4643      	mov	r3, r8
 800239e:	463a      	mov	r2, r7
 80023a0:	6a21      	ldr	r1, [r4, #32]
 80023a2:	4628      	mov	r0, r5
 80023a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80023a6:	47b0      	blx	r6
 80023a8:	2800      	cmp	r0, #0
 80023aa:	dc06      	bgt.n	80023ba <__sflush_r+0xfe>
 80023ac:	89a3      	ldrh	r3, [r4, #12]
 80023ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b2:	81a3      	strh	r3, [r4, #12]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	e78e      	b.n	80022d8 <__sflush_r+0x1c>
 80023ba:	4407      	add	r7, r0
 80023bc:	eba8 0800 	sub.w	r8, r8, r0
 80023c0:	e7e9      	b.n	8002396 <__sflush_r+0xda>
 80023c2:	bf00      	nop
 80023c4:	20400001 	.word	0x20400001

080023c8 <_fflush_r>:
 80023c8:	b538      	push	{r3, r4, r5, lr}
 80023ca:	690b      	ldr	r3, [r1, #16]
 80023cc:	4605      	mov	r5, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	b1db      	cbz	r3, 800240a <_fflush_r+0x42>
 80023d2:	b118      	cbz	r0, 80023dc <_fflush_r+0x14>
 80023d4:	6983      	ldr	r3, [r0, #24]
 80023d6:	b90b      	cbnz	r3, 80023dc <_fflush_r+0x14>
 80023d8:	f000 f860 	bl	800249c <__sinit>
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <_fflush_r+0x48>)
 80023de:	429c      	cmp	r4, r3
 80023e0:	d109      	bne.n	80023f6 <_fflush_r+0x2e>
 80023e2:	686c      	ldr	r4, [r5, #4]
 80023e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e8:	b17b      	cbz	r3, 800240a <_fflush_r+0x42>
 80023ea:	4621      	mov	r1, r4
 80023ec:	4628      	mov	r0, r5
 80023ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023f2:	f7ff bf63 	b.w	80022bc <__sflush_r>
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <_fflush_r+0x4c>)
 80023f8:	429c      	cmp	r4, r3
 80023fa:	d101      	bne.n	8002400 <_fflush_r+0x38>
 80023fc:	68ac      	ldr	r4, [r5, #8]
 80023fe:	e7f1      	b.n	80023e4 <_fflush_r+0x1c>
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <_fflush_r+0x50>)
 8002402:	429c      	cmp	r4, r3
 8002404:	bf08      	it	eq
 8002406:	68ec      	ldreq	r4, [r5, #12]
 8002408:	e7ec      	b.n	80023e4 <_fflush_r+0x1c>
 800240a:	2000      	movs	r0, #0
 800240c:	bd38      	pop	{r3, r4, r5, pc}
 800240e:	bf00      	nop
 8002410:	080029dc 	.word	0x080029dc
 8002414:	080029fc 	.word	0x080029fc
 8002418:	080029bc 	.word	0x080029bc

0800241c <std>:
 800241c:	2300      	movs	r3, #0
 800241e:	b510      	push	{r4, lr}
 8002420:	4604      	mov	r4, r0
 8002422:	e9c0 3300 	strd	r3, r3, [r0]
 8002426:	6083      	str	r3, [r0, #8]
 8002428:	8181      	strh	r1, [r0, #12]
 800242a:	6643      	str	r3, [r0, #100]	; 0x64
 800242c:	81c2      	strh	r2, [r0, #14]
 800242e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002432:	6183      	str	r3, [r0, #24]
 8002434:	4619      	mov	r1, r3
 8002436:	2208      	movs	r2, #8
 8002438:	305c      	adds	r0, #92	; 0x5c
 800243a:	f7ff fe13 	bl	8002064 <memset>
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <std+0x38>)
 8002440:	6224      	str	r4, [r4, #32]
 8002442:	6263      	str	r3, [r4, #36]	; 0x24
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <std+0x3c>)
 8002446:	62a3      	str	r3, [r4, #40]	; 0x28
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <std+0x40>)
 800244a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <std+0x44>)
 800244e:	6323      	str	r3, [r4, #48]	; 0x30
 8002450:	bd10      	pop	{r4, pc}
 8002452:	bf00      	nop
 8002454:	080027e5 	.word	0x080027e5
 8002458:	08002807 	.word	0x08002807
 800245c:	0800283f 	.word	0x0800283f
 8002460:	08002863 	.word	0x08002863

08002464 <_cleanup_r>:
 8002464:	4901      	ldr	r1, [pc, #4]	; (800246c <_cleanup_r+0x8>)
 8002466:	f000 b885 	b.w	8002574 <_fwalk_reent>
 800246a:	bf00      	nop
 800246c:	080023c9 	.word	0x080023c9

08002470 <__sfmoreglue>:
 8002470:	b570      	push	{r4, r5, r6, lr}
 8002472:	2568      	movs	r5, #104	; 0x68
 8002474:	1e4a      	subs	r2, r1, #1
 8002476:	4355      	muls	r5, r2
 8002478:	460e      	mov	r6, r1
 800247a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800247e:	f000 f947 	bl	8002710 <_malloc_r>
 8002482:	4604      	mov	r4, r0
 8002484:	b140      	cbz	r0, 8002498 <__sfmoreglue+0x28>
 8002486:	2100      	movs	r1, #0
 8002488:	e9c0 1600 	strd	r1, r6, [r0]
 800248c:	300c      	adds	r0, #12
 800248e:	60a0      	str	r0, [r4, #8]
 8002490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002494:	f7ff fde6 	bl	8002064 <memset>
 8002498:	4620      	mov	r0, r4
 800249a:	bd70      	pop	{r4, r5, r6, pc}

0800249c <__sinit>:
 800249c:	6983      	ldr	r3, [r0, #24]
 800249e:	b510      	push	{r4, lr}
 80024a0:	4604      	mov	r4, r0
 80024a2:	bb33      	cbnz	r3, 80024f2 <__sinit+0x56>
 80024a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80024a8:	6503      	str	r3, [r0, #80]	; 0x50
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <__sinit+0x58>)
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <__sinit+0x5c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6282      	str	r2, [r0, #40]	; 0x28
 80024b2:	4298      	cmp	r0, r3
 80024b4:	bf04      	itt	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	6183      	streq	r3, [r0, #24]
 80024ba:	f000 f81f 	bl	80024fc <__sfp>
 80024be:	6060      	str	r0, [r4, #4]
 80024c0:	4620      	mov	r0, r4
 80024c2:	f000 f81b 	bl	80024fc <__sfp>
 80024c6:	60a0      	str	r0, [r4, #8]
 80024c8:	4620      	mov	r0, r4
 80024ca:	f000 f817 	bl	80024fc <__sfp>
 80024ce:	2200      	movs	r2, #0
 80024d0:	60e0      	str	r0, [r4, #12]
 80024d2:	2104      	movs	r1, #4
 80024d4:	6860      	ldr	r0, [r4, #4]
 80024d6:	f7ff ffa1 	bl	800241c <std>
 80024da:	2201      	movs	r2, #1
 80024dc:	2109      	movs	r1, #9
 80024de:	68a0      	ldr	r0, [r4, #8]
 80024e0:	f7ff ff9c 	bl	800241c <std>
 80024e4:	2202      	movs	r2, #2
 80024e6:	2112      	movs	r1, #18
 80024e8:	68e0      	ldr	r0, [r4, #12]
 80024ea:	f7ff ff97 	bl	800241c <std>
 80024ee:	2301      	movs	r3, #1
 80024f0:	61a3      	str	r3, [r4, #24]
 80024f2:	bd10      	pop	{r4, pc}
 80024f4:	080029b8 	.word	0x080029b8
 80024f8:	08002465 	.word	0x08002465

080024fc <__sfp>:
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <__sfp+0x70>)
 8002500:	4607      	mov	r7, r0
 8002502:	681e      	ldr	r6, [r3, #0]
 8002504:	69b3      	ldr	r3, [r6, #24]
 8002506:	b913      	cbnz	r3, 800250e <__sfp+0x12>
 8002508:	4630      	mov	r0, r6
 800250a:	f7ff ffc7 	bl	800249c <__sinit>
 800250e:	3648      	adds	r6, #72	; 0x48
 8002510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002514:	3b01      	subs	r3, #1
 8002516:	d503      	bpl.n	8002520 <__sfp+0x24>
 8002518:	6833      	ldr	r3, [r6, #0]
 800251a:	b133      	cbz	r3, 800252a <__sfp+0x2e>
 800251c:	6836      	ldr	r6, [r6, #0]
 800251e:	e7f7      	b.n	8002510 <__sfp+0x14>
 8002520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002524:	b16d      	cbz	r5, 8002542 <__sfp+0x46>
 8002526:	3468      	adds	r4, #104	; 0x68
 8002528:	e7f4      	b.n	8002514 <__sfp+0x18>
 800252a:	2104      	movs	r1, #4
 800252c:	4638      	mov	r0, r7
 800252e:	f7ff ff9f 	bl	8002470 <__sfmoreglue>
 8002532:	6030      	str	r0, [r6, #0]
 8002534:	2800      	cmp	r0, #0
 8002536:	d1f1      	bne.n	800251c <__sfp+0x20>
 8002538:	230c      	movs	r3, #12
 800253a:	4604      	mov	r4, r0
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4620      	mov	r0, r4
 8002540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <__sfp+0x74>)
 8002544:	6665      	str	r5, [r4, #100]	; 0x64
 8002546:	e9c4 5500 	strd	r5, r5, [r4]
 800254a:	60a5      	str	r5, [r4, #8]
 800254c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002550:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002554:	2208      	movs	r2, #8
 8002556:	4629      	mov	r1, r5
 8002558:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800255c:	f7ff fd82 	bl	8002064 <memset>
 8002560:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002564:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002568:	e7e9      	b.n	800253e <__sfp+0x42>
 800256a:	bf00      	nop
 800256c:	080029b8 	.word	0x080029b8
 8002570:	ffff0001 	.word	0xffff0001

08002574 <_fwalk_reent>:
 8002574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002578:	4680      	mov	r8, r0
 800257a:	4689      	mov	r9, r1
 800257c:	2600      	movs	r6, #0
 800257e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002582:	b914      	cbnz	r4, 800258a <_fwalk_reent+0x16>
 8002584:	4630      	mov	r0, r6
 8002586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800258a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800258e:	3f01      	subs	r7, #1
 8002590:	d501      	bpl.n	8002596 <_fwalk_reent+0x22>
 8002592:	6824      	ldr	r4, [r4, #0]
 8002594:	e7f5      	b.n	8002582 <_fwalk_reent+0xe>
 8002596:	89ab      	ldrh	r3, [r5, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d907      	bls.n	80025ac <_fwalk_reent+0x38>
 800259c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025a0:	3301      	adds	r3, #1
 80025a2:	d003      	beq.n	80025ac <_fwalk_reent+0x38>
 80025a4:	4629      	mov	r1, r5
 80025a6:	4640      	mov	r0, r8
 80025a8:	47c8      	blx	r9
 80025aa:	4306      	orrs	r6, r0
 80025ac:	3568      	adds	r5, #104	; 0x68
 80025ae:	e7ee      	b.n	800258e <_fwalk_reent+0x1a>

080025b0 <__swhatbuf_r>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	460e      	mov	r6, r1
 80025b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b8:	b096      	sub	sp, #88	; 0x58
 80025ba:	2900      	cmp	r1, #0
 80025bc:	4614      	mov	r4, r2
 80025be:	461d      	mov	r5, r3
 80025c0:	da07      	bge.n	80025d2 <__swhatbuf_r+0x22>
 80025c2:	2300      	movs	r3, #0
 80025c4:	602b      	str	r3, [r5, #0]
 80025c6:	89b3      	ldrh	r3, [r6, #12]
 80025c8:	061a      	lsls	r2, r3, #24
 80025ca:	d410      	bmi.n	80025ee <__swhatbuf_r+0x3e>
 80025cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d0:	e00e      	b.n	80025f0 <__swhatbuf_r+0x40>
 80025d2:	466a      	mov	r2, sp
 80025d4:	f000 f96c 	bl	80028b0 <_fstat_r>
 80025d8:	2800      	cmp	r0, #0
 80025da:	dbf2      	blt.n	80025c2 <__swhatbuf_r+0x12>
 80025dc:	9a01      	ldr	r2, [sp, #4]
 80025de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80025e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80025e6:	425a      	negs	r2, r3
 80025e8:	415a      	adcs	r2, r3
 80025ea:	602a      	str	r2, [r5, #0]
 80025ec:	e7ee      	b.n	80025cc <__swhatbuf_r+0x1c>
 80025ee:	2340      	movs	r3, #64	; 0x40
 80025f0:	2000      	movs	r0, #0
 80025f2:	6023      	str	r3, [r4, #0]
 80025f4:	b016      	add	sp, #88	; 0x58
 80025f6:	bd70      	pop	{r4, r5, r6, pc}

080025f8 <__smakebuf_r>:
 80025f8:	898b      	ldrh	r3, [r1, #12]
 80025fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025fc:	079d      	lsls	r5, r3, #30
 80025fe:	4606      	mov	r6, r0
 8002600:	460c      	mov	r4, r1
 8002602:	d507      	bpl.n	8002614 <__smakebuf_r+0x1c>
 8002604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	6123      	str	r3, [r4, #16]
 800260c:	2301      	movs	r3, #1
 800260e:	6163      	str	r3, [r4, #20]
 8002610:	b002      	add	sp, #8
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	ab01      	add	r3, sp, #4
 8002616:	466a      	mov	r2, sp
 8002618:	f7ff ffca 	bl	80025b0 <__swhatbuf_r>
 800261c:	9900      	ldr	r1, [sp, #0]
 800261e:	4605      	mov	r5, r0
 8002620:	4630      	mov	r0, r6
 8002622:	f000 f875 	bl	8002710 <_malloc_r>
 8002626:	b948      	cbnz	r0, 800263c <__smakebuf_r+0x44>
 8002628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800262c:	059a      	lsls	r2, r3, #22
 800262e:	d4ef      	bmi.n	8002610 <__smakebuf_r+0x18>
 8002630:	f023 0303 	bic.w	r3, r3, #3
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	81a3      	strh	r3, [r4, #12]
 800263a:	e7e3      	b.n	8002604 <__smakebuf_r+0xc>
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <__smakebuf_r+0x7c>)
 800263e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002640:	89a3      	ldrh	r3, [r4, #12]
 8002642:	6020      	str	r0, [r4, #0]
 8002644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002648:	81a3      	strh	r3, [r4, #12]
 800264a:	9b00      	ldr	r3, [sp, #0]
 800264c:	6120      	str	r0, [r4, #16]
 800264e:	6163      	str	r3, [r4, #20]
 8002650:	9b01      	ldr	r3, [sp, #4]
 8002652:	b15b      	cbz	r3, 800266c <__smakebuf_r+0x74>
 8002654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002658:	4630      	mov	r0, r6
 800265a:	f000 f93b 	bl	80028d4 <_isatty_r>
 800265e:	b128      	cbz	r0, 800266c <__smakebuf_r+0x74>
 8002660:	89a3      	ldrh	r3, [r4, #12]
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	81a3      	strh	r3, [r4, #12]
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	431d      	orrs	r5, r3
 8002670:	81a5      	strh	r5, [r4, #12]
 8002672:	e7cd      	b.n	8002610 <__smakebuf_r+0x18>
 8002674:	08002465 	.word	0x08002465

08002678 <_free_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4605      	mov	r5, r0
 800267c:	2900      	cmp	r1, #0
 800267e:	d043      	beq.n	8002708 <_free_r+0x90>
 8002680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002684:	1f0c      	subs	r4, r1, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	bfb8      	it	lt
 800268a:	18e4      	addlt	r4, r4, r3
 800268c:	f000 f944 	bl	8002918 <__malloc_lock>
 8002690:	4a1e      	ldr	r2, [pc, #120]	; (800270c <_free_r+0x94>)
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	4610      	mov	r0, r2
 8002696:	b933      	cbnz	r3, 80026a6 <_free_r+0x2e>
 8002698:	6063      	str	r3, [r4, #4]
 800269a:	6014      	str	r4, [r2, #0]
 800269c:	4628      	mov	r0, r5
 800269e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026a2:	f000 b93a 	b.w	800291a <__malloc_unlock>
 80026a6:	42a3      	cmp	r3, r4
 80026a8:	d90b      	bls.n	80026c2 <_free_r+0x4a>
 80026aa:	6821      	ldr	r1, [r4, #0]
 80026ac:	1862      	adds	r2, r4, r1
 80026ae:	4293      	cmp	r3, r2
 80026b0:	bf01      	itttt	eq
 80026b2:	681a      	ldreq	r2, [r3, #0]
 80026b4:	685b      	ldreq	r3, [r3, #4]
 80026b6:	1852      	addeq	r2, r2, r1
 80026b8:	6022      	streq	r2, [r4, #0]
 80026ba:	6063      	str	r3, [r4, #4]
 80026bc:	6004      	str	r4, [r0, #0]
 80026be:	e7ed      	b.n	800269c <_free_r+0x24>
 80026c0:	4613      	mov	r3, r2
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	b10a      	cbz	r2, 80026ca <_free_r+0x52>
 80026c6:	42a2      	cmp	r2, r4
 80026c8:	d9fa      	bls.n	80026c0 <_free_r+0x48>
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	1858      	adds	r0, r3, r1
 80026ce:	42a0      	cmp	r0, r4
 80026d0:	d10b      	bne.n	80026ea <_free_r+0x72>
 80026d2:	6820      	ldr	r0, [r4, #0]
 80026d4:	4401      	add	r1, r0
 80026d6:	1858      	adds	r0, r3, r1
 80026d8:	4282      	cmp	r2, r0
 80026da:	6019      	str	r1, [r3, #0]
 80026dc:	d1de      	bne.n	800269c <_free_r+0x24>
 80026de:	6810      	ldr	r0, [r2, #0]
 80026e0:	6852      	ldr	r2, [r2, #4]
 80026e2:	4401      	add	r1, r0
 80026e4:	6019      	str	r1, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	e7d8      	b.n	800269c <_free_r+0x24>
 80026ea:	d902      	bls.n	80026f2 <_free_r+0x7a>
 80026ec:	230c      	movs	r3, #12
 80026ee:	602b      	str	r3, [r5, #0]
 80026f0:	e7d4      	b.n	800269c <_free_r+0x24>
 80026f2:	6820      	ldr	r0, [r4, #0]
 80026f4:	1821      	adds	r1, r4, r0
 80026f6:	428a      	cmp	r2, r1
 80026f8:	bf01      	itttt	eq
 80026fa:	6811      	ldreq	r1, [r2, #0]
 80026fc:	6852      	ldreq	r2, [r2, #4]
 80026fe:	1809      	addeq	r1, r1, r0
 8002700:	6021      	streq	r1, [r4, #0]
 8002702:	6062      	str	r2, [r4, #4]
 8002704:	605c      	str	r4, [r3, #4]
 8002706:	e7c9      	b.n	800269c <_free_r+0x24>
 8002708:	bd38      	pop	{r3, r4, r5, pc}
 800270a:	bf00      	nop
 800270c:	20000090 	.word	0x20000090

08002710 <_malloc_r>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	1ccd      	adds	r5, r1, #3
 8002714:	f025 0503 	bic.w	r5, r5, #3
 8002718:	3508      	adds	r5, #8
 800271a:	2d0c      	cmp	r5, #12
 800271c:	bf38      	it	cc
 800271e:	250c      	movcc	r5, #12
 8002720:	2d00      	cmp	r5, #0
 8002722:	4606      	mov	r6, r0
 8002724:	db01      	blt.n	800272a <_malloc_r+0x1a>
 8002726:	42a9      	cmp	r1, r5
 8002728:	d903      	bls.n	8002732 <_malloc_r+0x22>
 800272a:	230c      	movs	r3, #12
 800272c:	6033      	str	r3, [r6, #0]
 800272e:	2000      	movs	r0, #0
 8002730:	bd70      	pop	{r4, r5, r6, pc}
 8002732:	f000 f8f1 	bl	8002918 <__malloc_lock>
 8002736:	4a21      	ldr	r2, [pc, #132]	; (80027bc <_malloc_r+0xac>)
 8002738:	6814      	ldr	r4, [r2, #0]
 800273a:	4621      	mov	r1, r4
 800273c:	b991      	cbnz	r1, 8002764 <_malloc_r+0x54>
 800273e:	4c20      	ldr	r4, [pc, #128]	; (80027c0 <_malloc_r+0xb0>)
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	b91b      	cbnz	r3, 800274c <_malloc_r+0x3c>
 8002744:	4630      	mov	r0, r6
 8002746:	f000 f83d 	bl	80027c4 <_sbrk_r>
 800274a:	6020      	str	r0, [r4, #0]
 800274c:	4629      	mov	r1, r5
 800274e:	4630      	mov	r0, r6
 8002750:	f000 f838 	bl	80027c4 <_sbrk_r>
 8002754:	1c43      	adds	r3, r0, #1
 8002756:	d124      	bne.n	80027a2 <_malloc_r+0x92>
 8002758:	230c      	movs	r3, #12
 800275a:	4630      	mov	r0, r6
 800275c:	6033      	str	r3, [r6, #0]
 800275e:	f000 f8dc 	bl	800291a <__malloc_unlock>
 8002762:	e7e4      	b.n	800272e <_malloc_r+0x1e>
 8002764:	680b      	ldr	r3, [r1, #0]
 8002766:	1b5b      	subs	r3, r3, r5
 8002768:	d418      	bmi.n	800279c <_malloc_r+0x8c>
 800276a:	2b0b      	cmp	r3, #11
 800276c:	d90f      	bls.n	800278e <_malloc_r+0x7e>
 800276e:	600b      	str	r3, [r1, #0]
 8002770:	18cc      	adds	r4, r1, r3
 8002772:	50cd      	str	r5, [r1, r3]
 8002774:	4630      	mov	r0, r6
 8002776:	f000 f8d0 	bl	800291a <__malloc_unlock>
 800277a:	f104 000b 	add.w	r0, r4, #11
 800277e:	1d23      	adds	r3, r4, #4
 8002780:	f020 0007 	bic.w	r0, r0, #7
 8002784:	1ac3      	subs	r3, r0, r3
 8002786:	d0d3      	beq.n	8002730 <_malloc_r+0x20>
 8002788:	425a      	negs	r2, r3
 800278a:	50e2      	str	r2, [r4, r3]
 800278c:	e7d0      	b.n	8002730 <_malloc_r+0x20>
 800278e:	684b      	ldr	r3, [r1, #4]
 8002790:	428c      	cmp	r4, r1
 8002792:	bf16      	itet	ne
 8002794:	6063      	strne	r3, [r4, #4]
 8002796:	6013      	streq	r3, [r2, #0]
 8002798:	460c      	movne	r4, r1
 800279a:	e7eb      	b.n	8002774 <_malloc_r+0x64>
 800279c:	460c      	mov	r4, r1
 800279e:	6849      	ldr	r1, [r1, #4]
 80027a0:	e7cc      	b.n	800273c <_malloc_r+0x2c>
 80027a2:	1cc4      	adds	r4, r0, #3
 80027a4:	f024 0403 	bic.w	r4, r4, #3
 80027a8:	42a0      	cmp	r0, r4
 80027aa:	d005      	beq.n	80027b8 <_malloc_r+0xa8>
 80027ac:	1a21      	subs	r1, r4, r0
 80027ae:	4630      	mov	r0, r6
 80027b0:	f000 f808 	bl	80027c4 <_sbrk_r>
 80027b4:	3001      	adds	r0, #1
 80027b6:	d0cf      	beq.n	8002758 <_malloc_r+0x48>
 80027b8:	6025      	str	r5, [r4, #0]
 80027ba:	e7db      	b.n	8002774 <_malloc_r+0x64>
 80027bc:	20000090 	.word	0x20000090
 80027c0:	20000094 	.word	0x20000094

080027c4 <_sbrk_r>:
 80027c4:	b538      	push	{r3, r4, r5, lr}
 80027c6:	2300      	movs	r3, #0
 80027c8:	4c05      	ldr	r4, [pc, #20]	; (80027e0 <_sbrk_r+0x1c>)
 80027ca:	4605      	mov	r5, r0
 80027cc:	4608      	mov	r0, r1
 80027ce:	6023      	str	r3, [r4, #0]
 80027d0:	f7ff fbc6 	bl	8001f60 <_sbrk>
 80027d4:	1c43      	adds	r3, r0, #1
 80027d6:	d102      	bne.n	80027de <_sbrk_r+0x1a>
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	b103      	cbz	r3, 80027de <_sbrk_r+0x1a>
 80027dc:	602b      	str	r3, [r5, #0]
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	200000e4 	.word	0x200000e4

080027e4 <__sread>:
 80027e4:	b510      	push	{r4, lr}
 80027e6:	460c      	mov	r4, r1
 80027e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ec:	f000 f896 	bl	800291c <_read_r>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	bfab      	itete	ge
 80027f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027f6:	89a3      	ldrhlt	r3, [r4, #12]
 80027f8:	181b      	addge	r3, r3, r0
 80027fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027fe:	bfac      	ite	ge
 8002800:	6563      	strge	r3, [r4, #84]	; 0x54
 8002802:	81a3      	strhlt	r3, [r4, #12]
 8002804:	bd10      	pop	{r4, pc}

08002806 <__swrite>:
 8002806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800280a:	461f      	mov	r7, r3
 800280c:	898b      	ldrh	r3, [r1, #12]
 800280e:	4605      	mov	r5, r0
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	460c      	mov	r4, r1
 8002814:	4616      	mov	r6, r2
 8002816:	d505      	bpl.n	8002824 <__swrite+0x1e>
 8002818:	2302      	movs	r3, #2
 800281a:	2200      	movs	r2, #0
 800281c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002820:	f000 f868 	bl	80028f4 <_lseek_r>
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	4632      	mov	r2, r6
 8002828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800282c:	81a3      	strh	r3, [r4, #12]
 800282e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002832:	463b      	mov	r3, r7
 8002834:	4628      	mov	r0, r5
 8002836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800283a:	f000 b817 	b.w	800286c <_write_r>

0800283e <__sseek>:
 800283e:	b510      	push	{r4, lr}
 8002840:	460c      	mov	r4, r1
 8002842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002846:	f000 f855 	bl	80028f4 <_lseek_r>
 800284a:	1c43      	adds	r3, r0, #1
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	bf15      	itete	ne
 8002850:	6560      	strne	r0, [r4, #84]	; 0x54
 8002852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800285a:	81a3      	strheq	r3, [r4, #12]
 800285c:	bf18      	it	ne
 800285e:	81a3      	strhne	r3, [r4, #12]
 8002860:	bd10      	pop	{r4, pc}

08002862 <__sclose>:
 8002862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002866:	f000 b813 	b.w	8002890 <_close_r>
	...

0800286c <_write_r>:
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	4605      	mov	r5, r0
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	2200      	movs	r2, #0
 8002876:	4c05      	ldr	r4, [pc, #20]	; (800288c <_write_r+0x20>)
 8002878:	6022      	str	r2, [r4, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	f7ff f90c 	bl	8001a98 <_write>
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d102      	bne.n	800288a <_write_r+0x1e>
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	b103      	cbz	r3, 800288a <_write_r+0x1e>
 8002888:	602b      	str	r3, [r5, #0]
 800288a:	bd38      	pop	{r3, r4, r5, pc}
 800288c:	200000e4 	.word	0x200000e4

08002890 <_close_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	2300      	movs	r3, #0
 8002894:	4c05      	ldr	r4, [pc, #20]	; (80028ac <_close_r+0x1c>)
 8002896:	4605      	mov	r5, r0
 8002898:	4608      	mov	r0, r1
 800289a:	6023      	str	r3, [r4, #0]
 800289c:	f7ff fb2f 	bl	8001efe <_close>
 80028a0:	1c43      	adds	r3, r0, #1
 80028a2:	d102      	bne.n	80028aa <_close_r+0x1a>
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	b103      	cbz	r3, 80028aa <_close_r+0x1a>
 80028a8:	602b      	str	r3, [r5, #0]
 80028aa:	bd38      	pop	{r3, r4, r5, pc}
 80028ac:	200000e4 	.word	0x200000e4

080028b0 <_fstat_r>:
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	2300      	movs	r3, #0
 80028b4:	4c06      	ldr	r4, [pc, #24]	; (80028d0 <_fstat_r+0x20>)
 80028b6:	4605      	mov	r5, r0
 80028b8:	4608      	mov	r0, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	6023      	str	r3, [r4, #0]
 80028be:	f7ff fb29 	bl	8001f14 <_fstat>
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	d102      	bne.n	80028cc <_fstat_r+0x1c>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	b103      	cbz	r3, 80028cc <_fstat_r+0x1c>
 80028ca:	602b      	str	r3, [r5, #0]
 80028cc:	bd38      	pop	{r3, r4, r5, pc}
 80028ce:	bf00      	nop
 80028d0:	200000e4 	.word	0x200000e4

080028d4 <_isatty_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	2300      	movs	r3, #0
 80028d8:	4c05      	ldr	r4, [pc, #20]	; (80028f0 <_isatty_r+0x1c>)
 80028da:	4605      	mov	r5, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	6023      	str	r3, [r4, #0]
 80028e0:	f7ff fb27 	bl	8001f32 <_isatty>
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d102      	bne.n	80028ee <_isatty_r+0x1a>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	b103      	cbz	r3, 80028ee <_isatty_r+0x1a>
 80028ec:	602b      	str	r3, [r5, #0]
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	200000e4 	.word	0x200000e4

080028f4 <_lseek_r>:
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4605      	mov	r5, r0
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	2200      	movs	r2, #0
 80028fe:	4c05      	ldr	r4, [pc, #20]	; (8002914 <_lseek_r+0x20>)
 8002900:	6022      	str	r2, [r4, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	f7ff fb1f 	bl	8001f46 <_lseek>
 8002908:	1c43      	adds	r3, r0, #1
 800290a:	d102      	bne.n	8002912 <_lseek_r+0x1e>
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	b103      	cbz	r3, 8002912 <_lseek_r+0x1e>
 8002910:	602b      	str	r3, [r5, #0]
 8002912:	bd38      	pop	{r3, r4, r5, pc}
 8002914:	200000e4 	.word	0x200000e4

08002918 <__malloc_lock>:
 8002918:	4770      	bx	lr

0800291a <__malloc_unlock>:
 800291a:	4770      	bx	lr

0800291c <_read_r>:
 800291c:	b538      	push	{r3, r4, r5, lr}
 800291e:	4605      	mov	r5, r0
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	2200      	movs	r2, #0
 8002926:	4c05      	ldr	r4, [pc, #20]	; (800293c <_read_r+0x20>)
 8002928:	6022      	str	r2, [r4, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f7ff faca 	bl	8001ec4 <_read>
 8002930:	1c43      	adds	r3, r0, #1
 8002932:	d102      	bne.n	800293a <_read_r+0x1e>
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	b103      	cbz	r3, 800293a <_read_r+0x1e>
 8002938:	602b      	str	r3, [r5, #0]
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	200000e4 	.word	0x200000e4

08002940 <_init>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr

0800294c <_fini>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr
