
Lesson9_IDLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002d7c  08002d7c  00012d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e7c  08002e7c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e7c  08002e7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08002ef4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002ef4  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079aa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001817  00000000  00000000  00027a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000728  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000660  00000000  00000000  00029988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014643  00000000  00000000  00029fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006304  00000000  00000000  0003e62b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b573  00000000  00000000  0004492f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000afea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002288  00000000  00000000  000aff20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d64 	.word	0x08002d64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d64 	.word	0x08002d64

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fd4e 	bl	8001c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000d8 	.word	0x200000d8

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000d8 	.word	0x200000d8

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800043e:	2b02      	cmp	r3, #2
 8000440:	d005      	beq.n	800044e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2204      	movs	r2, #4
 8000446:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e051      	b.n	80004f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f022 020e 	bic.w	r2, r2, #14
 800045c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f022 0201 	bic.w	r2, r2, #1
 800046c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a22      	ldr	r2, [pc, #136]	; (80004fc <HAL_DMA_Abort_IT+0xd0>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d029      	beq.n	80004cc <HAL_DMA_Abort_IT+0xa0>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a20      	ldr	r2, [pc, #128]	; (8000500 <HAL_DMA_Abort_IT+0xd4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d022      	beq.n	80004c8 <HAL_DMA_Abort_IT+0x9c>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <HAL_DMA_Abort_IT+0xd8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d01a      	beq.n	80004c2 <HAL_DMA_Abort_IT+0x96>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1d      	ldr	r2, [pc, #116]	; (8000508 <HAL_DMA_Abort_IT+0xdc>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d012      	beq.n	80004bc <HAL_DMA_Abort_IT+0x90>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <HAL_DMA_Abort_IT+0xe0>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d00a      	beq.n	80004b6 <HAL_DMA_Abort_IT+0x8a>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <HAL_DMA_Abort_IT+0xe4>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d102      	bne.n	80004b0 <HAL_DMA_Abort_IT+0x84>
 80004aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ae:	e00e      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004b4:	e00b      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ba:	e008      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c0:	e005      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004c6:	e002      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004c8:	2310      	movs	r3, #16
 80004ca:	e000      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004cc:	2301      	movs	r3, #1
 80004ce:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_DMA_Abort_IT+0xe8>)
 80004d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d003      	beq.n	80004f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	4798      	blx	r3
    } 
  }
  return status;
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020008 	.word	0x40020008
 8000500:	4002001c 	.word	0x4002001c
 8000504:	40020030 	.word	0x40020030
 8000508:	40020044 	.word	0x40020044
 800050c:	40020058 	.word	0x40020058
 8000510:	4002006c 	.word	0x4002006c
 8000514:	40020000 	.word	0x40020000

08000518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000518:	b480      	push	{r7}
 800051a:	b08b      	sub	sp, #44	; 0x2c
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800052a:	e127      	b.n	800077c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800052c:	2201      	movs	r2, #1
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	4013      	ands	r3, r2
 800053e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000540:	69ba      	ldr	r2, [r7, #24]
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	429a      	cmp	r2, r3
 8000546:	f040 8116 	bne.w	8000776 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2b12      	cmp	r3, #18
 8000550:	d034      	beq.n	80005bc <HAL_GPIO_Init+0xa4>
 8000552:	2b12      	cmp	r3, #18
 8000554:	d80d      	bhi.n	8000572 <HAL_GPIO_Init+0x5a>
 8000556:	2b02      	cmp	r3, #2
 8000558:	d02b      	beq.n	80005b2 <HAL_GPIO_Init+0x9a>
 800055a:	2b02      	cmp	r3, #2
 800055c:	d804      	bhi.n	8000568 <HAL_GPIO_Init+0x50>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d031      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000562:	2b01      	cmp	r3, #1
 8000564:	d01c      	beq.n	80005a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000566:	e048      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000568:	2b03      	cmp	r3, #3
 800056a:	d043      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
 800056c:	2b11      	cmp	r3, #17
 800056e:	d01b      	beq.n	80005a8 <HAL_GPIO_Init+0x90>
          break;
 8000570:	e043      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000572:	4a89      	ldr	r2, [pc, #548]	; (8000798 <HAL_GPIO_Init+0x280>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d026      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000578:	4a87      	ldr	r2, [pc, #540]	; (8000798 <HAL_GPIO_Init+0x280>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d806      	bhi.n	800058c <HAL_GPIO_Init+0x74>
 800057e:	4a87      	ldr	r2, [pc, #540]	; (800079c <HAL_GPIO_Init+0x284>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d020      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000584:	4a86      	ldr	r2, [pc, #536]	; (80007a0 <HAL_GPIO_Init+0x288>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d01d      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
          break;
 800058a:	e036      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800058c:	4a85      	ldr	r2, [pc, #532]	; (80007a4 <HAL_GPIO_Init+0x28c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d019      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000592:	4a85      	ldr	r2, [pc, #532]	; (80007a8 <HAL_GPIO_Init+0x290>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d016      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000598:	4a84      	ldr	r2, [pc, #528]	; (80007ac <HAL_GPIO_Init+0x294>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d013      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
          break;
 800059e:	e02c      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	623b      	str	r3, [r7, #32]
          break;
 80005a6:	e028      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	3304      	adds	r3, #4
 80005ae:	623b      	str	r3, [r7, #32]
          break;
 80005b0:	e023      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	3308      	adds	r3, #8
 80005b8:	623b      	str	r3, [r7, #32]
          break;
 80005ba:	e01e      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	330c      	adds	r3, #12
 80005c2:	623b      	str	r3, [r7, #32]
          break;
 80005c4:	e019      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005ce:	2304      	movs	r3, #4
 80005d0:	623b      	str	r3, [r7, #32]
          break;
 80005d2:	e012      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d105      	bne.n	80005e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005dc:	2308      	movs	r3, #8
 80005de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	611a      	str	r2, [r3, #16]
          break;
 80005e6:	e008      	b.n	80005fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005e8:	2308      	movs	r3, #8
 80005ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	69fa      	ldr	r2, [r7, #28]
 80005f0:	615a      	str	r2, [r3, #20]
          break;
 80005f2:	e002      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
          break;
 80005f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	2bff      	cmp	r3, #255	; 0xff
 80005fe:	d801      	bhi.n	8000604 <HAL_GPIO_Init+0xec>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	e001      	b.n	8000608 <HAL_GPIO_Init+0xf0>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3304      	adds	r3, #4
 8000608:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d802      	bhi.n	8000616 <HAL_GPIO_Init+0xfe>
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	e002      	b.n	800061c <HAL_GPIO_Init+0x104>
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	3b08      	subs	r3, #8
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	210f      	movs	r1, #15
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	401a      	ands	r2, r3
 800062e:	6a39      	ldr	r1, [r7, #32]
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	431a      	orrs	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	2b00      	cmp	r3, #0
 8000646:	f000 8096 	beq.w	8000776 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b59      	ldr	r3, [pc, #356]	; (80007b0 <HAL_GPIO_Init+0x298>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a58      	ldr	r2, [pc, #352]	; (80007b0 <HAL_GPIO_Init+0x298>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <HAL_GPIO_Init+0x298>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000662:	4a54      	ldr	r2, [pc, #336]	; (80007b4 <HAL_GPIO_Init+0x29c>)
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	089b      	lsrs	r3, r3, #2
 8000668:	3302      	adds	r3, #2
 800066a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000672:	f003 0303 	and.w	r3, r3, #3
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	220f      	movs	r2, #15
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	4013      	ands	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4b      	ldr	r2, [pc, #300]	; (80007b8 <HAL_GPIO_Init+0x2a0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d013      	beq.n	80006b6 <HAL_GPIO_Init+0x19e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <HAL_GPIO_Init+0x2a4>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d00d      	beq.n	80006b2 <HAL_GPIO_Init+0x19a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <HAL_GPIO_Init+0x2a8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d007      	beq.n	80006ae <HAL_GPIO_Init+0x196>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a48      	ldr	r2, [pc, #288]	; (80007c4 <HAL_GPIO_Init+0x2ac>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <HAL_GPIO_Init+0x192>
 80006a6:	2303      	movs	r3, #3
 80006a8:	e006      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006aa:	2304      	movs	r3, #4
 80006ac:	e004      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006ae:	2302      	movs	r3, #2
 80006b0:	e002      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006b6:	2300      	movs	r3, #0
 80006b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ba:	f002 0203 	and.w	r2, r2, #3
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	4093      	lsls	r3, r2
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80006c8:	493a      	ldr	r1, [pc, #232]	; (80007b4 <HAL_GPIO_Init+0x29c>)
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	3302      	adds	r3, #2
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006e2:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4938      	ldr	r1, [pc, #224]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
 80006ee:	e006      	b.n	80006fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006f0:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4933      	ldr	r1, [pc, #204]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d006      	beq.n	8000718 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	492e      	ldr	r1, [pc, #184]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	4313      	orrs	r3, r2
 8000714:	604b      	str	r3, [r1, #4]
 8000716:	e006      	b.n	8000726 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800071a:	685a      	ldr	r2, [r3, #4]
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	43db      	mvns	r3, r3
 8000720:	4929      	ldr	r1, [pc, #164]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000722:	4013      	ands	r3, r2
 8000724:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d006      	beq.n	8000740 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	4924      	ldr	r1, [pc, #144]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	4313      	orrs	r3, r2
 800073c:	608b      	str	r3, [r1, #8]
 800073e:	e006      	b.n	800074e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	43db      	mvns	r3, r3
 8000748:	491f      	ldr	r1, [pc, #124]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800074a:	4013      	ands	r3, r2
 800074c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	491a      	ldr	r1, [pc, #104]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	4313      	orrs	r3, r2
 8000764:	60cb      	str	r3, [r1, #12]
 8000766:	e006      	b.n	8000776 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800076a:	68da      	ldr	r2, [r3, #12]
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	43db      	mvns	r3, r3
 8000770:	4915      	ldr	r1, [pc, #84]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000772:	4013      	ands	r3, r2
 8000774:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	fa22 f303 	lsr.w	r3, r2, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	f47f aed0 	bne.w	800052c <HAL_GPIO_Init+0x14>
  }
}
 800078c:	bf00      	nop
 800078e:	372c      	adds	r7, #44	; 0x2c
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	10210000 	.word	0x10210000
 800079c:	10110000 	.word	0x10110000
 80007a0:	10120000 	.word	0x10120000
 80007a4:	10310000 	.word	0x10310000
 80007a8:	10320000 	.word	0x10320000
 80007ac:	10220000 	.word	0x10220000
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40011000 	.word	0x40011000
 80007c4:	40011400 	.word	0x40011400
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e26c      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f000 8087 	beq.w	80008fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007ec:	4b92      	ldr	r3, [pc, #584]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f003 030c 	and.w	r3, r3, #12
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d00c      	beq.n	8000812 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007f8:	4b8f      	ldr	r3, [pc, #572]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 030c 	and.w	r3, r3, #12
 8000800:	2b08      	cmp	r3, #8
 8000802:	d112      	bne.n	800082a <HAL_RCC_OscConfig+0x5e>
 8000804:	4b8c      	ldr	r3, [pc, #560]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800080c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000810:	d10b      	bne.n	800082a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000812:	4b89      	ldr	r3, [pc, #548]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d06c      	beq.n	80008f8 <HAL_RCC_OscConfig+0x12c>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d168      	bne.n	80008f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e246      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000832:	d106      	bne.n	8000842 <HAL_RCC_OscConfig+0x76>
 8000834:	4b80      	ldr	r3, [pc, #512]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a7f      	ldr	r2, [pc, #508]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800083a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	e02e      	b.n	80008a0 <HAL_RCC_OscConfig+0xd4>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10c      	bne.n	8000864 <HAL_RCC_OscConfig+0x98>
 800084a:	4b7b      	ldr	r3, [pc, #492]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a7a      	ldr	r2, [pc, #488]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b78      	ldr	r3, [pc, #480]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a77      	ldr	r2, [pc, #476]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800085c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	e01d      	b.n	80008a0 <HAL_RCC_OscConfig+0xd4>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800086c:	d10c      	bne.n	8000888 <HAL_RCC_OscConfig+0xbc>
 800086e:	4b72      	ldr	r3, [pc, #456]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a71      	ldr	r2, [pc, #452]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a6e      	ldr	r2, [pc, #440]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e00b      	b.n	80008a0 <HAL_RCC_OscConfig+0xd4>
 8000888:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a6a      	ldr	r2, [pc, #424]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800088e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b68      	ldr	r3, [pc, #416]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a67      	ldr	r2, [pc, #412]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800089a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800089e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d013      	beq.n	80008d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a8:	f7ff fca8 	bl	80001fc <HAL_GetTick>
 80008ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ae:	e008      	b.n	80008c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008b0:	f7ff fca4 	bl	80001fc <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	2b64      	cmp	r3, #100	; 0x64
 80008bc:	d901      	bls.n	80008c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008be:	2303      	movs	r3, #3
 80008c0:	e1fa      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c2:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f0      	beq.n	80008b0 <HAL_RCC_OscConfig+0xe4>
 80008ce:	e014      	b.n	80008fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d0:	f7ff fc94 	bl	80001fc <HAL_GetTick>
 80008d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d6:	e008      	b.n	80008ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008d8:	f7ff fc90 	bl	80001fc <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	2b64      	cmp	r3, #100	; 0x64
 80008e4:	d901      	bls.n	80008ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008e6:	2303      	movs	r3, #3
 80008e8:	e1e6      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ea:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f0      	bne.n	80008d8 <HAL_RCC_OscConfig+0x10c>
 80008f6:	e000      	b.n	80008fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d063      	beq.n	80009ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000906:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 030c 	and.w	r3, r3, #12
 800090e:	2b00      	cmp	r3, #0
 8000910:	d00b      	beq.n	800092a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000912:	4b49      	ldr	r3, [pc, #292]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 030c 	and.w	r3, r3, #12
 800091a:	2b08      	cmp	r3, #8
 800091c:	d11c      	bne.n	8000958 <HAL_RCC_OscConfig+0x18c>
 800091e:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d116      	bne.n	8000958 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800092a:	4b43      	ldr	r3, [pc, #268]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	2b00      	cmp	r3, #0
 8000934:	d005      	beq.n	8000942 <HAL_RCC_OscConfig+0x176>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d001      	beq.n	8000942 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e1ba      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000942:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4939      	ldr	r1, [pc, #228]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000952:	4313      	orrs	r3, r2
 8000954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000956:	e03a      	b.n	80009ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d020      	beq.n	80009a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000960:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <HAL_RCC_OscConfig+0x270>)
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000966:	f7ff fc49 	bl	80001fc <HAL_GetTick>
 800096a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800096c:	e008      	b.n	8000980 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800096e:	f7ff fc45 	bl	80001fc <HAL_GetTick>
 8000972:	4602      	mov	r2, r0
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2b02      	cmp	r3, #2
 800097a:	d901      	bls.n	8000980 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800097c:	2303      	movs	r3, #3
 800097e:	e19b      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000980:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f0      	beq.n	800096e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4927      	ldr	r1, [pc, #156]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 800099c:	4313      	orrs	r3, r2
 800099e:	600b      	str	r3, [r1, #0]
 80009a0:	e015      	b.n	80009ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <HAL_RCC_OscConfig+0x270>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a8:	f7ff fc28 	bl	80001fc <HAL_GetTick>
 80009ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ae:	e008      	b.n	80009c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009b0:	f7ff fc24 	bl	80001fc <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d901      	bls.n	80009c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e17a      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1f0      	bne.n	80009b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d03a      	beq.n	8000a50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d019      	beq.n	8000a16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009e8:	f7ff fc08 	bl	80001fc <HAL_GetTick>
 80009ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ee:	e008      	b.n	8000a02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009f0:	f7ff fc04 	bl	80001fc <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d901      	bls.n	8000a02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009fe:	2303      	movs	r3, #3
 8000a00:	e15a      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_RCC_OscConfig+0x26c>)
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f0      	beq.n	80009f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f000 fada 	bl	8000fc8 <RCC_Delay>
 8000a14:	e01c      	b.n	8000a50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a1c:	f7ff fbee 	bl	80001fc <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a22:	e00f      	b.n	8000a44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a24:	f7ff fbea 	bl	80001fc <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d908      	bls.n	8000a44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e140      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	42420000 	.word	0x42420000
 8000a40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a44:	4b9e      	ldr	r3, [pc, #632]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1e9      	bne.n	8000a24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f000 80a6 	beq.w	8000baa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a62:	4b97      	ldr	r3, [pc, #604]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10d      	bne.n	8000a8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b94      	ldr	r3, [pc, #592]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a93      	ldr	r2, [pc, #588]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b91      	ldr	r3, [pc, #580]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a86:	2301      	movs	r3, #1
 8000a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8a:	4b8e      	ldr	r3, [pc, #568]	; (8000cc4 <HAL_RCC_OscConfig+0x4f8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d118      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a96:	4b8b      	ldr	r3, [pc, #556]	; (8000cc4 <HAL_RCC_OscConfig+0x4f8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a8a      	ldr	r2, [pc, #552]	; (8000cc4 <HAL_RCC_OscConfig+0x4f8>)
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000aa2:	f7ff fbab 	bl	80001fc <HAL_GetTick>
 8000aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa8:	e008      	b.n	8000abc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aaa:	f7ff fba7 	bl	80001fc <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b64      	cmp	r3, #100	; 0x64
 8000ab6:	d901      	bls.n	8000abc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e0fd      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000abc:	4b81      	ldr	r3, [pc, #516]	; (8000cc4 <HAL_RCC_OscConfig+0x4f8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f0      	beq.n	8000aaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d106      	bne.n	8000ade <HAL_RCC_OscConfig+0x312>
 8000ad0:	4b7b      	ldr	r3, [pc, #492]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4a7a      	ldr	r2, [pc, #488]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6213      	str	r3, [r2, #32]
 8000adc:	e02d      	b.n	8000b3a <HAL_RCC_OscConfig+0x36e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d10c      	bne.n	8000b00 <HAL_RCC_OscConfig+0x334>
 8000ae6:	4b76      	ldr	r3, [pc, #472]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a75      	ldr	r2, [pc, #468]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	6213      	str	r3, [r2, #32]
 8000af2:	4b73      	ldr	r3, [pc, #460]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	4a72      	ldr	r2, [pc, #456]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000af8:	f023 0304 	bic.w	r3, r3, #4
 8000afc:	6213      	str	r3, [r2, #32]
 8000afe:	e01c      	b.n	8000b3a <HAL_RCC_OscConfig+0x36e>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2b05      	cmp	r3, #5
 8000b06:	d10c      	bne.n	8000b22 <HAL_RCC_OscConfig+0x356>
 8000b08:	4b6d      	ldr	r3, [pc, #436]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4a6c      	ldr	r2, [pc, #432]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	6213      	str	r3, [r2, #32]
 8000b14:	4b6a      	ldr	r3, [pc, #424]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6213      	str	r3, [r2, #32]
 8000b20:	e00b      	b.n	8000b3a <HAL_RCC_OscConfig+0x36e>
 8000b22:	4b67      	ldr	r3, [pc, #412]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b24:	6a1b      	ldr	r3, [r3, #32]
 8000b26:	4a66      	ldr	r2, [pc, #408]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	6213      	str	r3, [r2, #32]
 8000b2e:	4b64      	ldr	r3, [pc, #400]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	4a63      	ldr	r2, [pc, #396]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b34:	f023 0304 	bic.w	r3, r3, #4
 8000b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d015      	beq.n	8000b6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b42:	f7ff fb5b 	bl	80001fc <HAL_GetTick>
 8000b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b48:	e00a      	b.n	8000b60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fb57 	bl	80001fc <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d901      	bls.n	8000b60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e0ab      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b60:	4b57      	ldr	r3, [pc, #348]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b62:	6a1b      	ldr	r3, [r3, #32]
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0ee      	beq.n	8000b4a <HAL_RCC_OscConfig+0x37e>
 8000b6c:	e014      	b.n	8000b98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b6e:	f7ff fb45 	bl	80001fc <HAL_GetTick>
 8000b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b74:	e00a      	b.n	8000b8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b76:	f7ff fb41 	bl	80001fc <HAL_GetTick>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d901      	bls.n	8000b8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e095      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b8c:	4b4c      	ldr	r3, [pc, #304]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b8e:	6a1b      	ldr	r3, [r3, #32]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1ee      	bne.n	8000b76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d105      	bne.n	8000baa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b9e:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4a47      	ldr	r2, [pc, #284]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8081 	beq.w	8000cb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bb4:	4b42      	ldr	r3, [pc, #264]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d061      	beq.n	8000c84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d146      	bne.n	8000c56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <HAL_RCC_OscConfig+0x4fc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bce:	f7ff fb15 	bl	80001fc <HAL_GetTick>
 8000bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd4:	e008      	b.n	8000be8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bd6:	f7ff fb11 	bl	80001fc <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d901      	bls.n	8000be8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e067      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be8:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f0      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a1b      	ldr	r3, [r3, #32]
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d108      	bne.n	8000c10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	492d      	ldr	r1, [pc, #180]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c10:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a19      	ldr	r1, [r3, #32]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c20:	430b      	orrs	r3, r1
 8000c22:	4927      	ldr	r1, [pc, #156]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c24:	4313      	orrs	r3, r2
 8000c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <HAL_RCC_OscConfig+0x4fc>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fae5 	bl	80001fc <HAL_GetTick>
 8000c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c34:	e008      	b.n	8000c48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c36:	f7ff fae1 	bl	80001fc <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d901      	bls.n	8000c48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e037      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0f0      	beq.n	8000c36 <HAL_RCC_OscConfig+0x46a>
 8000c54:	e02f      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_RCC_OscConfig+0x4fc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff face 	bl	80001fc <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c64:	f7ff faca 	bl	80001fc <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e020      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0x498>
 8000c82:	e018      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d101      	bne.n	8000c90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e013      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d106      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d001      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40007000 	.word	0x40007000
 8000cc8:	42420060 	.word	0x42420060

08000ccc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e0d0      	b.n	8000e82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ce0:	4b6a      	ldr	r3, [pc, #424]	; (8000e8c <HAL_RCC_ClockConfig+0x1c0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d910      	bls.n	8000d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cee:	4b67      	ldr	r3, [pc, #412]	; (8000e8c <HAL_RCC_ClockConfig+0x1c0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 0207 	bic.w	r2, r3, #7
 8000cf6:	4965      	ldr	r1, [pc, #404]	; (8000e8c <HAL_RCC_ClockConfig+0x1c0>)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cfe:	4b63      	ldr	r3, [pc, #396]	; (8000e8c <HAL_RCC_ClockConfig+0x1c0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d001      	beq.n	8000d10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e0b8      	b.n	8000e82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d020      	beq.n	8000d5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d005      	beq.n	8000d34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d28:	4b59      	ldr	r3, [pc, #356]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4a58      	ldr	r2, [pc, #352]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d40:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a52      	ldr	r2, [pc, #328]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d4c:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	494d      	ldr	r1, [pc, #308]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d040      	beq.n	8000dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d107      	bne.n	8000d82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d115      	bne.n	8000daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e07f      	b.n	8000e82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d107      	bne.n	8000d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d109      	bne.n	8000daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e073      	b.n	8000e82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e06b      	b.n	8000e82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f023 0203 	bic.w	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4936      	ldr	r1, [pc, #216]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dbc:	f7ff fa1e 	bl	80001fc <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dc2:	e00a      	b.n	8000dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc4:	f7ff fa1a 	bl	80001fc <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e053      	b.n	8000e82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 020c 	and.w	r2, r3, #12
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d1eb      	bne.n	8000dc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_RCC_ClockConfig+0x1c0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d210      	bcs.n	8000e1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_RCC_ClockConfig+0x1c0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 0207 	bic.w	r2, r3, #7
 8000e02:	4922      	ldr	r1, [pc, #136]	; (8000e8c <HAL_RCC_ClockConfig+0x1c0>)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_RCC_ClockConfig+0x1c0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d001      	beq.n	8000e1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e032      	b.n	8000e82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d008      	beq.n	8000e3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	4916      	ldr	r1, [pc, #88]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d009      	beq.n	8000e5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	490e      	ldr	r1, [pc, #56]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e5a:	f000 f821 	bl	8000ea0 <HAL_RCC_GetSysClockFreq>
 8000e5e:	4601      	mov	r1, r0
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_RCC_ClockConfig+0x1c8>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_RCC_ClockConfig+0x1cc>)
 8000e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_RCC_ClockConfig+0x1d0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f97c 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	08002dcc 	.word	0x08002dcc
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ea0:	b490      	push	{r4, r7}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ea8:	1d3c      	adds	r4, r7, #4
 8000eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d002      	beq.n	8000ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d003      	beq.n	8000ee6 <HAL_RCC_GetSysClockFreq+0x46>
 8000ede:	e02d      	b.n	8000f3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ee2:	623b      	str	r3, [r7, #32]
      break;
 8000ee4:	e02d      	b.n	8000f42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	0c9b      	lsrs	r3, r3, #18
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000ef8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d013      	beq.n	8000f2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	0c5b      	lsrs	r3, r3, #17
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f12:	4413      	add	r3, r2
 8000f14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f1e:	fb02 f203 	mul.w	r2, r2, r3
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2a:	e004      	b.n	8000f36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f30:	fb02 f303 	mul.w	r3, r2, r3
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	623b      	str	r3, [r7, #32]
      break;
 8000f3a:	e002      	b.n	8000f42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f3e:	623b      	str	r3, [r7, #32]
      break;
 8000f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f42:	6a3b      	ldr	r3, [r7, #32]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc90      	pop	{r4, r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	08002d7c 	.word	0x08002d7c
 8000f54:	08002d8c 	.word	0x08002d8c
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	007a1200 	.word	0x007a1200
 8000f60:	003d0900 	.word	0x003d0900

08000f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f7c:	f7ff fff2 	bl	8000f64 <HAL_RCC_GetHCLKFreq>
 8000f80:	4601      	mov	r1, r0
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f8e:	5cd3      	ldrb	r3, [r2, r3]
 8000f90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	08002ddc 	.word	0x08002ddc

08000fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_RCC_GetHCLKFreq>
 8000fa8:	4601      	mov	r1, r0
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	0adb      	lsrs	r3, r3, #11
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	08002ddc 	.word	0x08002ddc

08000fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <RCC_Delay+0x34>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <RCC_Delay+0x38>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0a5b      	lsrs	r3, r3, #9
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fe4:	bf00      	nop
  }
  while (Delay --);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	60fa      	str	r2, [r7, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f9      	bne.n	8000fe4 <RCC_Delay+0x1c>
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	10624dd3 	.word	0x10624dd3

08001004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e03f      	b.n	8001096 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d106      	bne.n	8001030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fe1e 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2224      	movs	r2, #36	; 0x24
 8001034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 fb73 	bl	8001734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800105c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800106c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800107c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2220      	movs	r2, #32
 8001088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2220      	movs	r2, #32
 8001090:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	4613      	mov	r3, r2
 80010aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	d130      	bne.n	800111a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_UART_Transmit_IT+0x26>
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e029      	b.n	800111c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_UART_Transmit_IT+0x38>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e022      	b.n	800111c <HAL_UART_Transmit_IT+0x7e>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	88fa      	ldrh	r2, [r7, #6]
 80010ee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2221      	movs	r2, #33	; 0x21
 80010fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001114:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800111a:	2302      	movs	r3, #2
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	4613      	mov	r3, r2
 8001132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b20      	cmp	r3, #32
 800113e:	d140      	bne.n	80011c2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_UART_Receive_IT+0x26>
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e039      	b.n	80011c4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001156:	2b01      	cmp	r3, #1
 8001158:	d101      	bne.n	800115e <HAL_UART_Receive_IT+0x38>
 800115a:	2302      	movs	r3, #2
 800115c:	e032      	b.n	80011c4 <HAL_UART_Receive_IT+0x9e>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	88fa      	ldrh	r2, [r7, #6]
 8001176:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2222      	movs	r2, #34	; 0x22
 8001182:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800119c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0220 	orr.w	r2, r2, #32
 80011bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80011c2:	2302      	movs	r3, #2
  }
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80011e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d02a      	beq.n	800125c <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695a      	ldr	r2, [r3, #20]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001214:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121a:	2b00      	cmp	r3, #0
 800121c:	d013      	beq.n	8001246 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <HAL_UART_AbortReceive_IT+0xac>)
 8001224:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f8fe 	bl	800042c <HAL_DMA_Abort_IT>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01c      	beq.n	8001270 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001240:	4610      	mov	r0, r2
 8001242:	4798      	blx	r3
 8001244:	e014      	b.n	8001270 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2220      	movs	r2, #32
 8001250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f92f 	bl	80014b8 <HAL_UART_AbortReceiveCpltCallback>
 800125a:	e009      	b.n	8001270 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2220      	movs	r2, #32
 8001266:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f924 	bl	80014b8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	0800152d 	.word	0x0800152d

08001280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_UART_IRQHandler+0x52>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f9b0 	bl	8001630 <UART_Receive_IT>
      return;
 80012d0:	e0db      	b.n	800148a <HAL_UART_IRQHandler+0x20a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80ac 	beq.w	8001432 <HAL_UART_IRQHandler+0x1b2>
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d105      	bne.n	80012f0 <HAL_UART_IRQHandler+0x70>
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80a1 	beq.w	8001432 <HAL_UART_IRQHandler+0x1b2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00a      	beq.n	8001310 <HAL_UART_IRQHandler+0x90>
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	f043 0201 	orr.w	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <HAL_UART_IRQHandler+0xb0>
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001328:	f043 0202 	orr.w	r2, r3, #2
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00a      	beq.n	8001350 <HAL_UART_IRQHandler+0xd0>
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001348:	f043 0204 	orr.w	r2, r3, #4
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00a      	beq.n	8001370 <HAL_UART_IRQHandler+0xf0>
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001368:	f043 0208 	orr.w	r2, r3, #8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 8087 	beq.w	8001488 <HAL_UART_IRQHandler+0x208>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <HAL_UART_IRQHandler+0x114>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HAL_UART_IRQHandler+0x114>
      {
        UART_Receive_IT(huart);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f94e 	bl	8001630 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <HAL_UART_IRQHandler+0x13c>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d031      	beq.n	8001420 <HAL_UART_IRQHandler+0x1a0>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f884 	bl	80014ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d023      	beq.n	8001418 <HAL_UART_IRQHandler+0x198>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_UART_IRQHandler+0x190>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	4a28      	ldr	r2, [pc, #160]	; (8001490 <HAL_UART_IRQHandler+0x210>)
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f819 	bl	800042c <HAL_DMA_Abort_IT>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d016      	beq.n	800142e <HAL_UART_IRQHandler+0x1ae>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800140a:	4610      	mov	r0, r2
 800140c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800140e:	e00e      	b.n	800142e <HAL_UART_IRQHandler+0x1ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f848 	bl	80014a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001416:	e00a      	b.n	800142e <HAL_UART_IRQHandler+0x1ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f844 	bl	80014a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800141e:	e006      	b.n	800142e <HAL_UART_IRQHandler+0x1ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f840 	bl	80014a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800142c:	e02c      	b.n	8001488 <HAL_UART_IRQHandler+0x208>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800142e:	bf00      	nop
    return;
 8001430:	e02a      	b.n	8001488 <HAL_UART_IRQHandler+0x208>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_UART_IRQHandler+0x1ce>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_UART_IRQHandler+0x1ce>
  {
    UART_Transmit_IT(huart);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f885 	bl	8001556 <UART_Transmit_IT>
    return;
 800144c:	e01d      	b.n	800148a <HAL_UART_IRQHandler+0x20a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_UART_IRQHandler+0x1ea>
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f8cc 	bl	8001600 <UART_EndTransmit_IT>
    return;
 8001468:	e00f      	b.n	800148a <HAL_UART_IRQHandler+0x20a>
  }

  /* UART IDLE interrupt end --------------------------------------------*/
    if (((isrflags & USART_SR_IDLE) != RESET) && ((cr1its & USART_CR1_IDLEIE) != RESET))
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00a      	beq.n	800148a <HAL_UART_IRQHandler+0x20a>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_UART_IRQHandler+0x20a>
    {
    	HAL_UART_IDLE_Callback(huart);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fa74 	bl	800196c <HAL_UART_IDLE_Callback>
      return;
 8001484:	bf00      	nop
 8001486:	e000      	b.n	800148a <HAL_UART_IRQHandler+0x20a>
    return;
 8001488:	bf00      	nop
    }
}
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	08001505 	.word	0x08001505

08001494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80014e0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0201 	bic.w	r2, r2, #1
 80014f0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2220      	movs	r2, #32
 80014f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff ffc1 	bl	80014a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2220      	movs	r2, #32
 8001544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ffb5 	bl	80014b8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b21      	cmp	r3, #33	; 0x21
 8001568:	d144      	bne.n	80015f4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001572:	d11a      	bne.n	80015aa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001588:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	1c9a      	adds	r2, r3, #2
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	621a      	str	r2, [r3, #32]
 800159c:	e00e      	b.n	80015bc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	621a      	str	r2, [r3, #32]
 80015a8:	e008      	b.n	80015bc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	1c59      	adds	r1, r3, #1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6211      	str	r1, [r2, #32]
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4619      	mov	r1, r3
 80015ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10f      	bne.n	80015f0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e000      	b.n	80015f6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80015f4:	2302      	movs	r3, #2
  }
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001616:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff37 	bl	8001494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b22      	cmp	r3, #34	; 0x22
 8001642:	d171      	bne.n	8001728 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164c:	d123      	bne.n	8001696 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10e      	bne.n	800167a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	b29b      	uxth	r3, r3
 8001664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	1c9a      	adds	r2, r3, #2
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
 8001678:	e029      	b.n	80016ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	b29b      	uxth	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
 8001694:	e01b      	b.n	80016ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10a      	bne.n	80016b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6858      	ldr	r0, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	1c59      	adds	r1, r3, #1
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6291      	str	r1, [r2, #40]	; 0x28
 80016ae:	b2c2      	uxtb	r2, r0
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e00c      	b.n	80016ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	1c58      	adds	r0, r3, #1
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	6288      	str	r0, [r1, #40]	; 0x28
 80016c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4619      	mov	r1, r3
 80016dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d120      	bne.n	8001724 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0220 	bic.w	r2, r2, #32
 80016f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001700:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2220      	movs	r2, #32
 8001716:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f976 	bl	8001a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	e002      	b.n	800172a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	e000      	b.n	800172a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001728:	2302      	movs	r3, #2
  }
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800176e:	f023 030c 	bic.w	r3, r3, #12
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	68f9      	ldr	r1, [r7, #12]
 8001778:	430b      	orrs	r3, r1
 800177a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <UART_SetConfig+0x1ac>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d14e      	bne.n	800183a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800179c:	f7ff fc00 	bl	8000fa0 <HAL_RCC_GetPCLK2Freq>
 80017a0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009a      	lsls	r2, r3, #2
 80017ac:	441a      	add	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	4a4a      	ldr	r2, [pc, #296]	; (80018e4 <UART_SetConfig+0x1b0>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	0119      	lsls	r1, r3, #4
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009a      	lsls	r2, r3, #2
 80017cc:	441a      	add	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <UART_SetConfig+0x1b0>)
 80017da:	fba3 0302 	umull	r0, r3, r3, r2
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2064      	movs	r0, #100	; 0x64
 80017e2:	fb00 f303 	mul.w	r3, r0, r3
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	3332      	adds	r3, #50	; 0x32
 80017ec:	4a3d      	ldr	r2, [pc, #244]	; (80018e4 <UART_SetConfig+0x1b0>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f8:	4419      	add	r1, r3
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009a      	lsls	r2, r3, #2
 8001804:	441a      	add	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001810:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <UART_SetConfig+0x1b0>)
 8001812:	fba3 0302 	umull	r0, r3, r3, r2
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2064      	movs	r0, #100	; 0x64
 800181a:	fb00 f303 	mul.w	r3, r0, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	3332      	adds	r3, #50	; 0x32
 8001824:	4a2f      	ldr	r2, [pc, #188]	; (80018e4 <UART_SetConfig+0x1b0>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	f003 020f 	and.w	r2, r3, #15
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	440a      	add	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001838:	e04d      	b.n	80018d6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800183a:	f7ff fb9d 	bl	8000f78 <HAL_RCC_GetPCLK1Freq>
 800183e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	441a      	add	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <UART_SetConfig+0x1b0>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	095b      	lsrs	r3, r3, #5
 800185e:	0119      	lsls	r1, r3, #4
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009a      	lsls	r2, r3, #2
 800186a:	441a      	add	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	fbb2 f2f3 	udiv	r2, r2, r3
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <UART_SetConfig+0x1b0>)
 8001878:	fba3 0302 	umull	r0, r3, r3, r2
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	2064      	movs	r0, #100	; 0x64
 8001880:	fb00 f303 	mul.w	r3, r0, r3
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	3332      	adds	r3, #50	; 0x32
 800188a:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <UART_SetConfig+0x1b0>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001896:	4419      	add	r1, r3
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	009a      	lsls	r2, r3, #2
 80018a2:	441a      	add	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <UART_SetConfig+0x1b0>)
 80018b0:	fba3 0302 	umull	r0, r3, r3, r2
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	2064      	movs	r0, #100	; 0x64
 80018b8:	fb00 f303 	mul.w	r3, r0, r3
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	3332      	adds	r3, #50	; 0x32
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <UART_SetConfig+0x1b0>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	095b      	lsrs	r3, r3, #5
 80018ca:	f003 020f 	and.w	r2, r3, #15
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	440a      	add	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40013800 	.word	0x40013800
 80018e4:	51eb851f 	.word	0x51eb851f

080018e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001900:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001904:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001908:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001910:	e000      	b.n	8001914 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001912:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001914:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f9      	beq.n	8001912 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800191e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <_write>:
/* USER CODE BEGIN 0 */

/*#############################################################################*/

/*----------------------ITM_SendChar-------------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e009      	b.n	800195a <_write+0x26>
		ITM_SendChar(*ptr++);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	60ba      	str	r2, [r7, #8]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ffca 	bl	80018e8 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	dbf1      	blt.n	8001946 <_write+0x12>
	}
	return len;
 8001962:	687b      	ldr	r3, [r7, #4]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_UART_IDLE_Callback>:
/*----------------------ITM_SendChar-------------------------------------------*/

/*------------------------IDLE_Callback---------------------------------------*/
void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { //проверка, из нужного ли uart пришли данные
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d13a      	bne.n	80019f2 <HAL_UART_IDLE_Callback+0x86>
		printf("IDLE = OK\n\r");
 800197c:	4820      	ldr	r0, [pc, #128]	; (8001a00 <HAL_UART_IDLE_Callback+0x94>)
 800197e:	f000 fb03 	bl	8001f88 <iprintf>
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0210 	bic.w	r2, r2, #16
 8001990:	60da      	str	r2, [r3, #12]
		rx_buffer_len = rx_buffer_size - huart->RxXferCount;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001996:	b29b      	uxth	r3, r3
 8001998:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_UART_IDLE_Callback+0x98>)
 80019a0:	801a      	strh	r2, [r3, #0]

		/*----------основные действия с входящими данными-----------*/
		if (huart1.gState != HAL_UART_STATE_BUSY_TX) {
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 80019a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b21      	cmp	r3, #33	; 0x21
 80019ac:	d006      	beq.n	80019bc <HAL_UART_IDLE_Callback+0x50>
			HAL_UART_Transmit_IT(&huart1, rx_buffer, rx_buffer_len);
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_UART_IDLE_Callback+0x98>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4914      	ldr	r1, [pc, #80]	; (8001a08 <HAL_UART_IDLE_Callback+0x9c>)
 80019b6:	4811      	ldr	r0, [pc, #68]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 80019b8:	f7ff fb71 	bl	800109e <HAL_UART_Transmit_IT>
		}
		/*----------основные действия с входящими данными-----------*/

		HAL_UART_AbortReceive_IT(&huart1);
 80019bc:	480f      	ldr	r0, [pc, #60]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 80019be:	f7ff fc07 	bl	80011d0 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0210 	orr.w	r2, r2, #16
 80019e6:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart1, rx_buffer, rx_buffer_size);
 80019e8:	2240      	movs	r2, #64	; 0x40
 80019ea:	4907      	ldr	r1, [pc, #28]	; (8001a08 <HAL_UART_IDLE_Callback+0x9c>)
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <HAL_UART_IDLE_Callback+0x90>)
 80019ee:	f7ff fb9a 	bl	8001126 <HAL_UART_Receive_IT>
	}
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000dc 	.word	0x200000dc
 8001a00:	08002d90 	.word	0x08002d90
 8001a04:	2000011c 	.word	0x2000011c
 8001a08:	2000008c 	.word	0x2000008c

08001a0c <HAL_UART_RxCpltCallback>:
/*------------------------IDLE_Callback---------------------------------------*/

/*------------------------RxCpltCallback---------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { //проверка, из нужного ли uart пришли данные
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d128      	bne.n	8001a6e <HAL_UART_RxCpltCallback+0x62>
		printf("RxCpltCallback = OK\n\r");
 8001a1c:	4817      	ldr	r0, [pc, #92]	; (8001a7c <HAL_UART_RxCpltCallback+0x70>)
 8001a1e:	f000 fab3 	bl	8001f88 <iprintf>
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0210 	bic.w	r2, r2, #16
 8001a30:	60da      	str	r2, [r3, #12]

		printf("rx_buffer is overflow\n\r");
 8001a32:	4813      	ldr	r0, [pc, #76]	; (8001a80 <HAL_UART_RxCpltCallback+0x74>)
 8001a34:	f000 faa8 	bl	8001f88 <iprintf>

		HAL_UART_AbortReceive_IT(&huart1);
 8001a38:	480f      	ldr	r0, [pc, #60]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a3a:	f7ff fbc9 	bl	80011d0 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0210 	orr.w	r2, r2, #16
 8001a62:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart1, rx_buffer, rx_buffer_size);
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	4907      	ldr	r1, [pc, #28]	; (8001a84 <HAL_UART_RxCpltCallback+0x78>)
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a6a:	f7ff fb5c 	bl	8001126 <HAL_UART_Receive_IT>

	}
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200000dc 	.word	0x200000dc
 8001a7c:	08002d9c 	.word	0x08002d9c
 8001a80:	08002db4 	.word	0x08002db4
 8001a84:	2000008c 	.word	0x2000008c

08001a88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a8c:	f7fe fb5e 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a90:	f000 f816 	bl	8001ac0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a94:	f000 f884 	bl	8001ba0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001a98:	f000 f858 	bl	8001b4c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <main+0x30>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <main+0x30>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0210 	orr.w	r2, r2, #16
 8001aaa:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart1, rx_buffer, rx_buffer_size);
 8001aac:	2240      	movs	r2, #64	; 0x40
 8001aae:	4903      	ldr	r1, [pc, #12]	; (8001abc <main+0x34>)
 8001ab0:	4801      	ldr	r0, [pc, #4]	; (8001ab8 <main+0x30>)
 8001ab2:	f7ff fb38 	bl	8001126 <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001ab6:	e7fe      	b.n	8001ab6 <main+0x2e>
 8001ab8:	200000dc 	.word	0x200000dc
 8001abc:	2000008c 	.word	0x2000008c

08001ac0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b090      	sub	sp, #64	; 0x40
 8001ac4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ac6:	f107 0318 	add.w	r3, r7, #24
 8001aca:	2228      	movs	r2, #40	; 0x28
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fa52 	bl	8001f78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af4:	2302      	movs	r3, #2
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001afe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fe5f 	bl	80007cc <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x58>
		Error_Handler();
 8001b14:	f000 f872 	bl	8001bfc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b28:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2102      	movs	r1, #2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8ca 	bl	8000ccc <HAL_RCC_ClockConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x82>
		Error_Handler();
 8001b3e:	f000 f85d 	bl	8001bfc <Error_Handler>
	}
}
 8001b42:	bf00      	nop
 8001b44:	3740      	adds	r7, #64	; 0x40
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <MX_USART1_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b84:	f7ff fa3e 	bl	8001004 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001b8e:	f000 f835 	bl	8001bfc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200000dc 	.word	0x200000dc
 8001b9c:	40013800 	.word	0x40013800

08001ba0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001bac:	f043 0320 	orr.w	r3, r3, #32
 8001bb0:	6193      	str	r3, [r2, #24]
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6193      	str	r3, [r2, #24]
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <MX_GPIO_Init+0x58>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000

08001bfc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_MspInit+0x60>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_MspInit+0x60>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010000 	.word	0x40010000

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a20      	ldr	r2, [pc, #128]	; (8001d08 <HAL_UART_MspInit+0x9c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d139      	bne.n	8001d00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_UART_MspInit+0xa0>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <HAL_UART_MspInit+0xa0>)
 8001c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <HAL_UART_MspInit+0xa0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_UART_MspInit+0xa0>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <HAL_UART_MspInit+0xa0>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_UART_MspInit+0xa0>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0310 	add.w	r3, r7, #16
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <HAL_UART_MspInit+0xa4>)
 8001cd2:	f7fe fc21 	bl	8000518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4809      	ldr	r0, [pc, #36]	; (8001d10 <HAL_UART_MspInit+0xa4>)
 8001cec:	f7fe fc14 	bl	8000518 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2025      	movs	r0, #37	; 0x25
 8001cf6:	f7fe fb62 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cfa:	2025      	movs	r0, #37	; 0x25
 8001cfc:	f7fe fb7b 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <HardFault_Handler+0x4>

08001d26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <MemManage_Handler+0x4>

08001d2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <BusFault_Handler+0x4>

08001d32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <UsageFault_Handler+0x4>

08001d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d60:	f7fe fa3a 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <USART1_IRQHandler+0x10>)
 8001d6e:	f7ff fa87 	bl	8001280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200000dc 	.word	0x200000dc

08001d7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e00a      	b.n	8001da4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d8e:	f3af 8000 	nop.w
 8001d92:	4601      	mov	r1, r0
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	60ba      	str	r2, [r7, #8]
 8001d9a:	b2ca      	uxtb	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	dbf0      	blt.n	8001d8e <_read+0x12>
	}

return len;
 8001dac:	687b      	ldr	r3, [r7, #4]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ddc:	605a      	str	r2, [r3, #4]
	return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <_isatty>:

int _isatty(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
	return 1;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
	return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_sbrk+0x50>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x16>
		heap_end = &end;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <_sbrk+0x50>)
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <_sbrk+0x54>)
 8001e2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <_sbrk+0x50>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <_sbrk+0x50>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	466a      	mov	r2, sp
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d907      	bls.n	8001e52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e42:	f000 f86f 	bl	8001f24 <__errno>
 8001e46:	4602      	mov	r2, r0
 8001e48:	230c      	movs	r3, #12
 8001e4a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	e006      	b.n	8001e60 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <_sbrk+0x50>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <_sbrk+0x50>)
 8001e5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200000cc 	.word	0x200000cc
 8001e6c:	20000128 	.word	0x20000128

08001e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <SystemInit+0x5c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <SystemInit+0x5c>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <SystemInit+0x5c>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4911      	ldr	r1, [pc, #68]	; (8001ecc <SystemInit+0x5c>)
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <SystemInit+0x60>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <SystemInit+0x5c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <SystemInit+0x5c>)
 8001e92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <SystemInit+0x5c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SystemInit+0x5c>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <SystemInit+0x5c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <SystemInit+0x5c>)
 8001eae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001eb2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SystemInit+0x5c>)
 8001eb6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001eba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SystemInit+0x64>)
 8001ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ec2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	f8ff0000 	.word	0xf8ff0000
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ed8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001eda:	e003      	b.n	8001ee4 <LoopCopyDataInit>

08001edc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ede:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ee0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ee2:	3104      	adds	r1, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ee4:	480a      	ldr	r0, [pc, #40]	; (8001f10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ee8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001eea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001eec:	d3f6      	bcc.n	8001edc <CopyDataInit>
  ldr r2, =_sbss
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ef0:	e002      	b.n	8001ef8 <LoopFillZerobss>

08001ef2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ef4:	f842 3b04 	str.w	r3, [r2], #4

08001ef8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001efa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001efc:	d3f9      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001efe:	f7ff ffb7 	bl	8001e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f02:	f000 f815 	bl	8001f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f06:	f7ff fdbf 	bl	8001a88 <main>
  bx lr
 8001f0a:	4770      	bx	lr
  ldr r3, =_sidata
 8001f0c:	08002e84 	.word	0x08002e84
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f14:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001f18:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001f1c:	20000124 	.word	0x20000124

08001f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC1_2_IRQHandler>
	...

08001f24 <__errno>:
 8001f24:	4b01      	ldr	r3, [pc, #4]	; (8001f2c <__errno+0x8>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	2000000c 	.word	0x2000000c

08001f30 <__libc_init_array>:
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	2500      	movs	r5, #0
 8001f34:	4e0c      	ldr	r6, [pc, #48]	; (8001f68 <__libc_init_array+0x38>)
 8001f36:	4c0d      	ldr	r4, [pc, #52]	; (8001f6c <__libc_init_array+0x3c>)
 8001f38:	1ba4      	subs	r4, r4, r6
 8001f3a:	10a4      	asrs	r4, r4, #2
 8001f3c:	42a5      	cmp	r5, r4
 8001f3e:	d109      	bne.n	8001f54 <__libc_init_array+0x24>
 8001f40:	f000 ff10 	bl	8002d64 <_init>
 8001f44:	2500      	movs	r5, #0
 8001f46:	4e0a      	ldr	r6, [pc, #40]	; (8001f70 <__libc_init_array+0x40>)
 8001f48:	4c0a      	ldr	r4, [pc, #40]	; (8001f74 <__libc_init_array+0x44>)
 8001f4a:	1ba4      	subs	r4, r4, r6
 8001f4c:	10a4      	asrs	r4, r4, #2
 8001f4e:	42a5      	cmp	r5, r4
 8001f50:	d105      	bne.n	8001f5e <__libc_init_array+0x2e>
 8001f52:	bd70      	pop	{r4, r5, r6, pc}
 8001f54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f58:	4798      	blx	r3
 8001f5a:	3501      	adds	r5, #1
 8001f5c:	e7ee      	b.n	8001f3c <__libc_init_array+0xc>
 8001f5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f62:	4798      	blx	r3
 8001f64:	3501      	adds	r5, #1
 8001f66:	e7f2      	b.n	8001f4e <__libc_init_array+0x1e>
 8001f68:	08002e7c 	.word	0x08002e7c
 8001f6c:	08002e7c 	.word	0x08002e7c
 8001f70:	08002e7c 	.word	0x08002e7c
 8001f74:	08002e80 	.word	0x08002e80

08001f78 <memset>:
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4402      	add	r2, r0
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <memset+0xa>
 8001f80:	4770      	bx	lr
 8001f82:	f803 1b01 	strb.w	r1, [r3], #1
 8001f86:	e7f9      	b.n	8001f7c <memset+0x4>

08001f88 <iprintf>:
 8001f88:	b40f      	push	{r0, r1, r2, r3}
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <iprintf+0x2c>)
 8001f8c:	b513      	push	{r0, r1, r4, lr}
 8001f8e:	681c      	ldr	r4, [r3, #0]
 8001f90:	b124      	cbz	r4, 8001f9c <iprintf+0x14>
 8001f92:	69a3      	ldr	r3, [r4, #24]
 8001f94:	b913      	cbnz	r3, 8001f9c <iprintf+0x14>
 8001f96:	4620      	mov	r0, r4
 8001f98:	f000 f84e 	bl	8002038 <__sinit>
 8001f9c:	ab05      	add	r3, sp, #20
 8001f9e:	9a04      	ldr	r2, [sp, #16]
 8001fa0:	68a1      	ldr	r1, [r4, #8]
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	f000 f953 	bl	8002250 <_vfiprintf_r>
 8001faa:	b002      	add	sp, #8
 8001fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fb0:	b004      	add	sp, #16
 8001fb2:	4770      	bx	lr
 8001fb4:	2000000c 	.word	0x2000000c

08001fb8 <std>:
 8001fb8:	2300      	movs	r3, #0
 8001fba:	b510      	push	{r4, lr}
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8001fc2:	6083      	str	r3, [r0, #8]
 8001fc4:	8181      	strh	r1, [r0, #12]
 8001fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8001fc8:	81c2      	strh	r2, [r0, #14]
 8001fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001fce:	6183      	str	r3, [r0, #24]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	305c      	adds	r0, #92	; 0x5c
 8001fd6:	f7ff ffcf 	bl	8001f78 <memset>
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <std+0x38>)
 8001fdc:	6224      	str	r4, [r4, #32]
 8001fde:	6263      	str	r3, [r4, #36]	; 0x24
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <std+0x3c>)
 8001fe2:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <std+0x40>)
 8001fe6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <std+0x44>)
 8001fea:	6323      	str	r3, [r4, #48]	; 0x30
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	bf00      	nop
 8001ff0:	080027ad 	.word	0x080027ad
 8001ff4:	080027cf 	.word	0x080027cf
 8001ff8:	08002807 	.word	0x08002807
 8001ffc:	0800282b 	.word	0x0800282b

08002000 <_cleanup_r>:
 8002000:	4901      	ldr	r1, [pc, #4]	; (8002008 <_cleanup_r+0x8>)
 8002002:	f000 b885 	b.w	8002110 <_fwalk_reent>
 8002006:	bf00      	nop
 8002008:	08002b05 	.word	0x08002b05

0800200c <__sfmoreglue>:
 800200c:	b570      	push	{r4, r5, r6, lr}
 800200e:	2568      	movs	r5, #104	; 0x68
 8002010:	1e4a      	subs	r2, r1, #1
 8002012:	4355      	muls	r5, r2
 8002014:	460e      	mov	r6, r1
 8002016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800201a:	f000 f897 	bl	800214c <_malloc_r>
 800201e:	4604      	mov	r4, r0
 8002020:	b140      	cbz	r0, 8002034 <__sfmoreglue+0x28>
 8002022:	2100      	movs	r1, #0
 8002024:	e9c0 1600 	strd	r1, r6, [r0]
 8002028:	300c      	adds	r0, #12
 800202a:	60a0      	str	r0, [r4, #8]
 800202c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002030:	f7ff ffa2 	bl	8001f78 <memset>
 8002034:	4620      	mov	r0, r4
 8002036:	bd70      	pop	{r4, r5, r6, pc}

08002038 <__sinit>:
 8002038:	6983      	ldr	r3, [r0, #24]
 800203a:	b510      	push	{r4, lr}
 800203c:	4604      	mov	r4, r0
 800203e:	bb33      	cbnz	r3, 800208e <__sinit+0x56>
 8002040:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002044:	6503      	str	r3, [r0, #80]	; 0x50
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <__sinit+0x58>)
 8002048:	4a12      	ldr	r2, [pc, #72]	; (8002094 <__sinit+0x5c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6282      	str	r2, [r0, #40]	; 0x28
 800204e:	4298      	cmp	r0, r3
 8002050:	bf04      	itt	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	6183      	streq	r3, [r0, #24]
 8002056:	f000 f81f 	bl	8002098 <__sfp>
 800205a:	6060      	str	r0, [r4, #4]
 800205c:	4620      	mov	r0, r4
 800205e:	f000 f81b 	bl	8002098 <__sfp>
 8002062:	60a0      	str	r0, [r4, #8]
 8002064:	4620      	mov	r0, r4
 8002066:	f000 f817 	bl	8002098 <__sfp>
 800206a:	2200      	movs	r2, #0
 800206c:	60e0      	str	r0, [r4, #12]
 800206e:	2104      	movs	r1, #4
 8002070:	6860      	ldr	r0, [r4, #4]
 8002072:	f7ff ffa1 	bl	8001fb8 <std>
 8002076:	2201      	movs	r2, #1
 8002078:	2109      	movs	r1, #9
 800207a:	68a0      	ldr	r0, [r4, #8]
 800207c:	f7ff ff9c 	bl	8001fb8 <std>
 8002080:	2202      	movs	r2, #2
 8002082:	2112      	movs	r1, #18
 8002084:	68e0      	ldr	r0, [r4, #12]
 8002086:	f7ff ff97 	bl	8001fb8 <std>
 800208a:	2301      	movs	r3, #1
 800208c:	61a3      	str	r3, [r4, #24]
 800208e:	bd10      	pop	{r4, pc}
 8002090:	08002de4 	.word	0x08002de4
 8002094:	08002001 	.word	0x08002001

08002098 <__sfp>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <__sfp+0x70>)
 800209c:	4607      	mov	r7, r0
 800209e:	681e      	ldr	r6, [r3, #0]
 80020a0:	69b3      	ldr	r3, [r6, #24]
 80020a2:	b913      	cbnz	r3, 80020aa <__sfp+0x12>
 80020a4:	4630      	mov	r0, r6
 80020a6:	f7ff ffc7 	bl	8002038 <__sinit>
 80020aa:	3648      	adds	r6, #72	; 0x48
 80020ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	d503      	bpl.n	80020bc <__sfp+0x24>
 80020b4:	6833      	ldr	r3, [r6, #0]
 80020b6:	b133      	cbz	r3, 80020c6 <__sfp+0x2e>
 80020b8:	6836      	ldr	r6, [r6, #0]
 80020ba:	e7f7      	b.n	80020ac <__sfp+0x14>
 80020bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020c0:	b16d      	cbz	r5, 80020de <__sfp+0x46>
 80020c2:	3468      	adds	r4, #104	; 0x68
 80020c4:	e7f4      	b.n	80020b0 <__sfp+0x18>
 80020c6:	2104      	movs	r1, #4
 80020c8:	4638      	mov	r0, r7
 80020ca:	f7ff ff9f 	bl	800200c <__sfmoreglue>
 80020ce:	6030      	str	r0, [r6, #0]
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d1f1      	bne.n	80020b8 <__sfp+0x20>
 80020d4:	230c      	movs	r3, #12
 80020d6:	4604      	mov	r4, r0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4620      	mov	r0, r4
 80020dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <__sfp+0x74>)
 80020e0:	6665      	str	r5, [r4, #100]	; 0x64
 80020e2:	e9c4 5500 	strd	r5, r5, [r4]
 80020e6:	60a5      	str	r5, [r4, #8]
 80020e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80020ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80020f0:	2208      	movs	r2, #8
 80020f2:	4629      	mov	r1, r5
 80020f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020f8:	f7ff ff3e 	bl	8001f78 <memset>
 80020fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002104:	e7e9      	b.n	80020da <__sfp+0x42>
 8002106:	bf00      	nop
 8002108:	08002de4 	.word	0x08002de4
 800210c:	ffff0001 	.word	0xffff0001

08002110 <_fwalk_reent>:
 8002110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002114:	4680      	mov	r8, r0
 8002116:	4689      	mov	r9, r1
 8002118:	2600      	movs	r6, #0
 800211a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800211e:	b914      	cbnz	r4, 8002126 <_fwalk_reent+0x16>
 8002120:	4630      	mov	r0, r6
 8002122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002126:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800212a:	3f01      	subs	r7, #1
 800212c:	d501      	bpl.n	8002132 <_fwalk_reent+0x22>
 800212e:	6824      	ldr	r4, [r4, #0]
 8002130:	e7f5      	b.n	800211e <_fwalk_reent+0xe>
 8002132:	89ab      	ldrh	r3, [r5, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d907      	bls.n	8002148 <_fwalk_reent+0x38>
 8002138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800213c:	3301      	adds	r3, #1
 800213e:	d003      	beq.n	8002148 <_fwalk_reent+0x38>
 8002140:	4629      	mov	r1, r5
 8002142:	4640      	mov	r0, r8
 8002144:	47c8      	blx	r9
 8002146:	4306      	orrs	r6, r0
 8002148:	3568      	adds	r5, #104	; 0x68
 800214a:	e7ee      	b.n	800212a <_fwalk_reent+0x1a>

0800214c <_malloc_r>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	1ccd      	adds	r5, r1, #3
 8002150:	f025 0503 	bic.w	r5, r5, #3
 8002154:	3508      	adds	r5, #8
 8002156:	2d0c      	cmp	r5, #12
 8002158:	bf38      	it	cc
 800215a:	250c      	movcc	r5, #12
 800215c:	2d00      	cmp	r5, #0
 800215e:	4606      	mov	r6, r0
 8002160:	db01      	blt.n	8002166 <_malloc_r+0x1a>
 8002162:	42a9      	cmp	r1, r5
 8002164:	d903      	bls.n	800216e <_malloc_r+0x22>
 8002166:	230c      	movs	r3, #12
 8002168:	6033      	str	r3, [r6, #0]
 800216a:	2000      	movs	r0, #0
 800216c:	bd70      	pop	{r4, r5, r6, pc}
 800216e:	f000 fd77 	bl	8002c60 <__malloc_lock>
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <_malloc_r+0xac>)
 8002174:	6814      	ldr	r4, [r2, #0]
 8002176:	4621      	mov	r1, r4
 8002178:	b991      	cbnz	r1, 80021a0 <_malloc_r+0x54>
 800217a:	4c20      	ldr	r4, [pc, #128]	; (80021fc <_malloc_r+0xb0>)
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	b91b      	cbnz	r3, 8002188 <_malloc_r+0x3c>
 8002180:	4630      	mov	r0, r6
 8002182:	f000 fb03 	bl	800278c <_sbrk_r>
 8002186:	6020      	str	r0, [r4, #0]
 8002188:	4629      	mov	r1, r5
 800218a:	4630      	mov	r0, r6
 800218c:	f000 fafe 	bl	800278c <_sbrk_r>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d124      	bne.n	80021de <_malloc_r+0x92>
 8002194:	230c      	movs	r3, #12
 8002196:	4630      	mov	r0, r6
 8002198:	6033      	str	r3, [r6, #0]
 800219a:	f000 fd62 	bl	8002c62 <__malloc_unlock>
 800219e:	e7e4      	b.n	800216a <_malloc_r+0x1e>
 80021a0:	680b      	ldr	r3, [r1, #0]
 80021a2:	1b5b      	subs	r3, r3, r5
 80021a4:	d418      	bmi.n	80021d8 <_malloc_r+0x8c>
 80021a6:	2b0b      	cmp	r3, #11
 80021a8:	d90f      	bls.n	80021ca <_malloc_r+0x7e>
 80021aa:	600b      	str	r3, [r1, #0]
 80021ac:	18cc      	adds	r4, r1, r3
 80021ae:	50cd      	str	r5, [r1, r3]
 80021b0:	4630      	mov	r0, r6
 80021b2:	f000 fd56 	bl	8002c62 <__malloc_unlock>
 80021b6:	f104 000b 	add.w	r0, r4, #11
 80021ba:	1d23      	adds	r3, r4, #4
 80021bc:	f020 0007 	bic.w	r0, r0, #7
 80021c0:	1ac3      	subs	r3, r0, r3
 80021c2:	d0d3      	beq.n	800216c <_malloc_r+0x20>
 80021c4:	425a      	negs	r2, r3
 80021c6:	50e2      	str	r2, [r4, r3]
 80021c8:	e7d0      	b.n	800216c <_malloc_r+0x20>
 80021ca:	684b      	ldr	r3, [r1, #4]
 80021cc:	428c      	cmp	r4, r1
 80021ce:	bf16      	itet	ne
 80021d0:	6063      	strne	r3, [r4, #4]
 80021d2:	6013      	streq	r3, [r2, #0]
 80021d4:	460c      	movne	r4, r1
 80021d6:	e7eb      	b.n	80021b0 <_malloc_r+0x64>
 80021d8:	460c      	mov	r4, r1
 80021da:	6849      	ldr	r1, [r1, #4]
 80021dc:	e7cc      	b.n	8002178 <_malloc_r+0x2c>
 80021de:	1cc4      	adds	r4, r0, #3
 80021e0:	f024 0403 	bic.w	r4, r4, #3
 80021e4:	42a0      	cmp	r0, r4
 80021e6:	d005      	beq.n	80021f4 <_malloc_r+0xa8>
 80021e8:	1a21      	subs	r1, r4, r0
 80021ea:	4630      	mov	r0, r6
 80021ec:	f000 face 	bl	800278c <_sbrk_r>
 80021f0:	3001      	adds	r0, #1
 80021f2:	d0cf      	beq.n	8002194 <_malloc_r+0x48>
 80021f4:	6025      	str	r5, [r4, #0]
 80021f6:	e7db      	b.n	80021b0 <_malloc_r+0x64>
 80021f8:	200000d0 	.word	0x200000d0
 80021fc:	200000d4 	.word	0x200000d4

08002200 <__sfputc_r>:
 8002200:	6893      	ldr	r3, [r2, #8]
 8002202:	b410      	push	{r4}
 8002204:	3b01      	subs	r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	6093      	str	r3, [r2, #8]
 800220a:	da07      	bge.n	800221c <__sfputc_r+0x1c>
 800220c:	6994      	ldr	r4, [r2, #24]
 800220e:	42a3      	cmp	r3, r4
 8002210:	db01      	blt.n	8002216 <__sfputc_r+0x16>
 8002212:	290a      	cmp	r1, #10
 8002214:	d102      	bne.n	800221c <__sfputc_r+0x1c>
 8002216:	bc10      	pop	{r4}
 8002218:	f000 bb0c 	b.w	8002834 <__swbuf_r>
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	1c58      	adds	r0, r3, #1
 8002220:	6010      	str	r0, [r2, #0]
 8002222:	7019      	strb	r1, [r3, #0]
 8002224:	4608      	mov	r0, r1
 8002226:	bc10      	pop	{r4}
 8002228:	4770      	bx	lr

0800222a <__sfputs_r>:
 800222a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222c:	4606      	mov	r6, r0
 800222e:	460f      	mov	r7, r1
 8002230:	4614      	mov	r4, r2
 8002232:	18d5      	adds	r5, r2, r3
 8002234:	42ac      	cmp	r4, r5
 8002236:	d101      	bne.n	800223c <__sfputs_r+0x12>
 8002238:	2000      	movs	r0, #0
 800223a:	e007      	b.n	800224c <__sfputs_r+0x22>
 800223c:	463a      	mov	r2, r7
 800223e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002242:	4630      	mov	r0, r6
 8002244:	f7ff ffdc 	bl	8002200 <__sfputc_r>
 8002248:	1c43      	adds	r3, r0, #1
 800224a:	d1f3      	bne.n	8002234 <__sfputs_r+0xa>
 800224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002250 <_vfiprintf_r>:
 8002250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002254:	460c      	mov	r4, r1
 8002256:	b09d      	sub	sp, #116	; 0x74
 8002258:	4617      	mov	r7, r2
 800225a:	461d      	mov	r5, r3
 800225c:	4606      	mov	r6, r0
 800225e:	b118      	cbz	r0, 8002268 <_vfiprintf_r+0x18>
 8002260:	6983      	ldr	r3, [r0, #24]
 8002262:	b90b      	cbnz	r3, 8002268 <_vfiprintf_r+0x18>
 8002264:	f7ff fee8 	bl	8002038 <__sinit>
 8002268:	4b7c      	ldr	r3, [pc, #496]	; (800245c <_vfiprintf_r+0x20c>)
 800226a:	429c      	cmp	r4, r3
 800226c:	d158      	bne.n	8002320 <_vfiprintf_r+0xd0>
 800226e:	6874      	ldr	r4, [r6, #4]
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	0718      	lsls	r0, r3, #28
 8002274:	d55e      	bpl.n	8002334 <_vfiprintf_r+0xe4>
 8002276:	6923      	ldr	r3, [r4, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d05b      	beq.n	8002334 <_vfiprintf_r+0xe4>
 800227c:	2300      	movs	r3, #0
 800227e:	9309      	str	r3, [sp, #36]	; 0x24
 8002280:	2320      	movs	r3, #32
 8002282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002286:	2330      	movs	r3, #48	; 0x30
 8002288:	f04f 0b01 	mov.w	fp, #1
 800228c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002290:	9503      	str	r5, [sp, #12]
 8002292:	46b8      	mov	r8, r7
 8002294:	4645      	mov	r5, r8
 8002296:	f815 3b01 	ldrb.w	r3, [r5], #1
 800229a:	b10b      	cbz	r3, 80022a0 <_vfiprintf_r+0x50>
 800229c:	2b25      	cmp	r3, #37	; 0x25
 800229e:	d154      	bne.n	800234a <_vfiprintf_r+0xfa>
 80022a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80022a4:	d00b      	beq.n	80022be <_vfiprintf_r+0x6e>
 80022a6:	4653      	mov	r3, sl
 80022a8:	463a      	mov	r2, r7
 80022aa:	4621      	mov	r1, r4
 80022ac:	4630      	mov	r0, r6
 80022ae:	f7ff ffbc 	bl	800222a <__sfputs_r>
 80022b2:	3001      	adds	r0, #1
 80022b4:	f000 80c2 	beq.w	800243c <_vfiprintf_r+0x1ec>
 80022b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022ba:	4453      	add	r3, sl
 80022bc:	9309      	str	r3, [sp, #36]	; 0x24
 80022be:	f898 3000 	ldrb.w	r3, [r8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80ba 	beq.w	800243c <_vfiprintf_r+0x1ec>
 80022c8:	2300      	movs	r3, #0
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295
 80022ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022d2:	9304      	str	r3, [sp, #16]
 80022d4:	9307      	str	r3, [sp, #28]
 80022d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022da:	931a      	str	r3, [sp, #104]	; 0x68
 80022dc:	46a8      	mov	r8, r5
 80022de:	2205      	movs	r2, #5
 80022e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80022e4:	485e      	ldr	r0, [pc, #376]	; (8002460 <_vfiprintf_r+0x210>)
 80022e6:	f000 fcad 	bl	8002c44 <memchr>
 80022ea:	9b04      	ldr	r3, [sp, #16]
 80022ec:	bb78      	cbnz	r0, 800234e <_vfiprintf_r+0xfe>
 80022ee:	06d9      	lsls	r1, r3, #27
 80022f0:	bf44      	itt	mi
 80022f2:	2220      	movmi	r2, #32
 80022f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022f8:	071a      	lsls	r2, r3, #28
 80022fa:	bf44      	itt	mi
 80022fc:	222b      	movmi	r2, #43	; 0x2b
 80022fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002302:	782a      	ldrb	r2, [r5, #0]
 8002304:	2a2a      	cmp	r2, #42	; 0x2a
 8002306:	d02a      	beq.n	800235e <_vfiprintf_r+0x10e>
 8002308:	46a8      	mov	r8, r5
 800230a:	2000      	movs	r0, #0
 800230c:	250a      	movs	r5, #10
 800230e:	9a07      	ldr	r2, [sp, #28]
 8002310:	4641      	mov	r1, r8
 8002312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002316:	3b30      	subs	r3, #48	; 0x30
 8002318:	2b09      	cmp	r3, #9
 800231a:	d969      	bls.n	80023f0 <_vfiprintf_r+0x1a0>
 800231c:	b360      	cbz	r0, 8002378 <_vfiprintf_r+0x128>
 800231e:	e024      	b.n	800236a <_vfiprintf_r+0x11a>
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <_vfiprintf_r+0x214>)
 8002322:	429c      	cmp	r4, r3
 8002324:	d101      	bne.n	800232a <_vfiprintf_r+0xda>
 8002326:	68b4      	ldr	r4, [r6, #8]
 8002328:	e7a2      	b.n	8002270 <_vfiprintf_r+0x20>
 800232a:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <_vfiprintf_r+0x218>)
 800232c:	429c      	cmp	r4, r3
 800232e:	bf08      	it	eq
 8002330:	68f4      	ldreq	r4, [r6, #12]
 8002332:	e79d      	b.n	8002270 <_vfiprintf_r+0x20>
 8002334:	4621      	mov	r1, r4
 8002336:	4630      	mov	r0, r6
 8002338:	f000 fae0 	bl	80028fc <__swsetup_r>
 800233c:	2800      	cmp	r0, #0
 800233e:	d09d      	beq.n	800227c <_vfiprintf_r+0x2c>
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	b01d      	add	sp, #116	; 0x74
 8002346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800234a:	46a8      	mov	r8, r5
 800234c:	e7a2      	b.n	8002294 <_vfiprintf_r+0x44>
 800234e:	4a44      	ldr	r2, [pc, #272]	; (8002460 <_vfiprintf_r+0x210>)
 8002350:	4645      	mov	r5, r8
 8002352:	1a80      	subs	r0, r0, r2
 8002354:	fa0b f000 	lsl.w	r0, fp, r0
 8002358:	4318      	orrs	r0, r3
 800235a:	9004      	str	r0, [sp, #16]
 800235c:	e7be      	b.n	80022dc <_vfiprintf_r+0x8c>
 800235e:	9a03      	ldr	r2, [sp, #12]
 8002360:	1d11      	adds	r1, r2, #4
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	9103      	str	r1, [sp, #12]
 8002366:	2a00      	cmp	r2, #0
 8002368:	db01      	blt.n	800236e <_vfiprintf_r+0x11e>
 800236a:	9207      	str	r2, [sp, #28]
 800236c:	e004      	b.n	8002378 <_vfiprintf_r+0x128>
 800236e:	4252      	negs	r2, r2
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	9207      	str	r2, [sp, #28]
 8002376:	9304      	str	r3, [sp, #16]
 8002378:	f898 3000 	ldrb.w	r3, [r8]
 800237c:	2b2e      	cmp	r3, #46	; 0x2e
 800237e:	d10e      	bne.n	800239e <_vfiprintf_r+0x14e>
 8002380:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002384:	2b2a      	cmp	r3, #42	; 0x2a
 8002386:	d138      	bne.n	80023fa <_vfiprintf_r+0x1aa>
 8002388:	9b03      	ldr	r3, [sp, #12]
 800238a:	f108 0802 	add.w	r8, r8, #2
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	9203      	str	r2, [sp, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	bfb8      	it	lt
 8002398:	f04f 33ff 	movlt.w	r3, #4294967295
 800239c:	9305      	str	r3, [sp, #20]
 800239e:	4d33      	ldr	r5, [pc, #204]	; (800246c <_vfiprintf_r+0x21c>)
 80023a0:	2203      	movs	r2, #3
 80023a2:	f898 1000 	ldrb.w	r1, [r8]
 80023a6:	4628      	mov	r0, r5
 80023a8:	f000 fc4c 	bl	8002c44 <memchr>
 80023ac:	b140      	cbz	r0, 80023c0 <_vfiprintf_r+0x170>
 80023ae:	2340      	movs	r3, #64	; 0x40
 80023b0:	1b40      	subs	r0, r0, r5
 80023b2:	fa03 f000 	lsl.w	r0, r3, r0
 80023b6:	9b04      	ldr	r3, [sp, #16]
 80023b8:	f108 0801 	add.w	r8, r8, #1
 80023bc:	4303      	orrs	r3, r0
 80023be:	9304      	str	r3, [sp, #16]
 80023c0:	f898 1000 	ldrb.w	r1, [r8]
 80023c4:	2206      	movs	r2, #6
 80023c6:	482a      	ldr	r0, [pc, #168]	; (8002470 <_vfiprintf_r+0x220>)
 80023c8:	f108 0701 	add.w	r7, r8, #1
 80023cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023d0:	f000 fc38 	bl	8002c44 <memchr>
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d037      	beq.n	8002448 <_vfiprintf_r+0x1f8>
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <_vfiprintf_r+0x224>)
 80023da:	bb1b      	cbnz	r3, 8002424 <_vfiprintf_r+0x1d4>
 80023dc:	9b03      	ldr	r3, [sp, #12]
 80023de:	3307      	adds	r3, #7
 80023e0:	f023 0307 	bic.w	r3, r3, #7
 80023e4:	3308      	adds	r3, #8
 80023e6:	9303      	str	r3, [sp, #12]
 80023e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023ea:	444b      	add	r3, r9
 80023ec:	9309      	str	r3, [sp, #36]	; 0x24
 80023ee:	e750      	b.n	8002292 <_vfiprintf_r+0x42>
 80023f0:	fb05 3202 	mla	r2, r5, r2, r3
 80023f4:	2001      	movs	r0, #1
 80023f6:	4688      	mov	r8, r1
 80023f8:	e78a      	b.n	8002310 <_vfiprintf_r+0xc0>
 80023fa:	2300      	movs	r3, #0
 80023fc:	250a      	movs	r5, #10
 80023fe:	4619      	mov	r1, r3
 8002400:	f108 0801 	add.w	r8, r8, #1
 8002404:	9305      	str	r3, [sp, #20]
 8002406:	4640      	mov	r0, r8
 8002408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800240c:	3a30      	subs	r2, #48	; 0x30
 800240e:	2a09      	cmp	r2, #9
 8002410:	d903      	bls.n	800241a <_vfiprintf_r+0x1ca>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0c3      	beq.n	800239e <_vfiprintf_r+0x14e>
 8002416:	9105      	str	r1, [sp, #20]
 8002418:	e7c1      	b.n	800239e <_vfiprintf_r+0x14e>
 800241a:	fb05 2101 	mla	r1, r5, r1, r2
 800241e:	2301      	movs	r3, #1
 8002420:	4680      	mov	r8, r0
 8002422:	e7f0      	b.n	8002406 <_vfiprintf_r+0x1b6>
 8002424:	ab03      	add	r3, sp, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4622      	mov	r2, r4
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <_vfiprintf_r+0x228>)
 800242c:	a904      	add	r1, sp, #16
 800242e:	4630      	mov	r0, r6
 8002430:	f3af 8000 	nop.w
 8002434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002438:	4681      	mov	r9, r0
 800243a:	d1d5      	bne.n	80023e8 <_vfiprintf_r+0x198>
 800243c:	89a3      	ldrh	r3, [r4, #12]
 800243e:	065b      	lsls	r3, r3, #25
 8002440:	f53f af7e 	bmi.w	8002340 <_vfiprintf_r+0xf0>
 8002444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002446:	e77d      	b.n	8002344 <_vfiprintf_r+0xf4>
 8002448:	ab03      	add	r3, sp, #12
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	4622      	mov	r2, r4
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <_vfiprintf_r+0x228>)
 8002450:	a904      	add	r1, sp, #16
 8002452:	4630      	mov	r0, r6
 8002454:	f000 f888 	bl	8002568 <_printf_i>
 8002458:	e7ec      	b.n	8002434 <_vfiprintf_r+0x1e4>
 800245a:	bf00      	nop
 800245c:	08002e08 	.word	0x08002e08
 8002460:	08002e48 	.word	0x08002e48
 8002464:	08002e28 	.word	0x08002e28
 8002468:	08002de8 	.word	0x08002de8
 800246c:	08002e4e 	.word	0x08002e4e
 8002470:	08002e52 	.word	0x08002e52
 8002474:	00000000 	.word	0x00000000
 8002478:	0800222b 	.word	0x0800222b

0800247c <_printf_common>:
 800247c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002480:	4691      	mov	r9, r2
 8002482:	461f      	mov	r7, r3
 8002484:	688a      	ldr	r2, [r1, #8]
 8002486:	690b      	ldr	r3, [r1, #16]
 8002488:	4606      	mov	r6, r0
 800248a:	4293      	cmp	r3, r2
 800248c:	bfb8      	it	lt
 800248e:	4613      	movlt	r3, r2
 8002490:	f8c9 3000 	str.w	r3, [r9]
 8002494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002498:	460c      	mov	r4, r1
 800249a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800249e:	b112      	cbz	r2, 80024a6 <_printf_common+0x2a>
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c9 3000 	str.w	r3, [r9]
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	0699      	lsls	r1, r3, #26
 80024aa:	bf42      	ittt	mi
 80024ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80024b0:	3302      	addmi	r3, #2
 80024b2:	f8c9 3000 	strmi.w	r3, [r9]
 80024b6:	6825      	ldr	r5, [r4, #0]
 80024b8:	f015 0506 	ands.w	r5, r5, #6
 80024bc:	d107      	bne.n	80024ce <_printf_common+0x52>
 80024be:	f104 0a19 	add.w	sl, r4, #25
 80024c2:	68e3      	ldr	r3, [r4, #12]
 80024c4:	f8d9 2000 	ldr.w	r2, [r9]
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	42ab      	cmp	r3, r5
 80024cc:	dc29      	bgt.n	8002522 <_printf_common+0xa6>
 80024ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80024d2:	6822      	ldr	r2, [r4, #0]
 80024d4:	3300      	adds	r3, #0
 80024d6:	bf18      	it	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	0692      	lsls	r2, r2, #26
 80024dc:	d42e      	bmi.n	800253c <_printf_common+0xc0>
 80024de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024e2:	4639      	mov	r1, r7
 80024e4:	4630      	mov	r0, r6
 80024e6:	47c0      	blx	r8
 80024e8:	3001      	adds	r0, #1
 80024ea:	d021      	beq.n	8002530 <_printf_common+0xb4>
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	68e5      	ldr	r5, [r4, #12]
 80024f0:	f003 0306 	and.w	r3, r3, #6
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	bf18      	it	ne
 80024f8:	2500      	movne	r5, #0
 80024fa:	f8d9 2000 	ldr.w	r2, [r9]
 80024fe:	f04f 0900 	mov.w	r9, #0
 8002502:	bf08      	it	eq
 8002504:	1aad      	subeq	r5, r5, r2
 8002506:	68a3      	ldr	r3, [r4, #8]
 8002508:	6922      	ldr	r2, [r4, #16]
 800250a:	bf08      	it	eq
 800250c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002510:	4293      	cmp	r3, r2
 8002512:	bfc4      	itt	gt
 8002514:	1a9b      	subgt	r3, r3, r2
 8002516:	18ed      	addgt	r5, r5, r3
 8002518:	341a      	adds	r4, #26
 800251a:	454d      	cmp	r5, r9
 800251c:	d11a      	bne.n	8002554 <_printf_common+0xd8>
 800251e:	2000      	movs	r0, #0
 8002520:	e008      	b.n	8002534 <_printf_common+0xb8>
 8002522:	2301      	movs	r3, #1
 8002524:	4652      	mov	r2, sl
 8002526:	4639      	mov	r1, r7
 8002528:	4630      	mov	r0, r6
 800252a:	47c0      	blx	r8
 800252c:	3001      	adds	r0, #1
 800252e:	d103      	bne.n	8002538 <_printf_common+0xbc>
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002538:	3501      	adds	r5, #1
 800253a:	e7c2      	b.n	80024c2 <_printf_common+0x46>
 800253c:	2030      	movs	r0, #48	; 0x30
 800253e:	18e1      	adds	r1, r4, r3
 8002540:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800254a:	4422      	add	r2, r4
 800254c:	3302      	adds	r3, #2
 800254e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002552:	e7c4      	b.n	80024de <_printf_common+0x62>
 8002554:	2301      	movs	r3, #1
 8002556:	4622      	mov	r2, r4
 8002558:	4639      	mov	r1, r7
 800255a:	4630      	mov	r0, r6
 800255c:	47c0      	blx	r8
 800255e:	3001      	adds	r0, #1
 8002560:	d0e6      	beq.n	8002530 <_printf_common+0xb4>
 8002562:	f109 0901 	add.w	r9, r9, #1
 8002566:	e7d8      	b.n	800251a <_printf_common+0x9e>

08002568 <_printf_i>:
 8002568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800256c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002570:	460c      	mov	r4, r1
 8002572:	7e09      	ldrb	r1, [r1, #24]
 8002574:	b085      	sub	sp, #20
 8002576:	296e      	cmp	r1, #110	; 0x6e
 8002578:	4617      	mov	r7, r2
 800257a:	4606      	mov	r6, r0
 800257c:	4698      	mov	r8, r3
 800257e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002580:	f000 80b3 	beq.w	80026ea <_printf_i+0x182>
 8002584:	d822      	bhi.n	80025cc <_printf_i+0x64>
 8002586:	2963      	cmp	r1, #99	; 0x63
 8002588:	d036      	beq.n	80025f8 <_printf_i+0x90>
 800258a:	d80a      	bhi.n	80025a2 <_printf_i+0x3a>
 800258c:	2900      	cmp	r1, #0
 800258e:	f000 80b9 	beq.w	8002704 <_printf_i+0x19c>
 8002592:	2958      	cmp	r1, #88	; 0x58
 8002594:	f000 8083 	beq.w	800269e <_printf_i+0x136>
 8002598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800259c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80025a0:	e032      	b.n	8002608 <_printf_i+0xa0>
 80025a2:	2964      	cmp	r1, #100	; 0x64
 80025a4:	d001      	beq.n	80025aa <_printf_i+0x42>
 80025a6:	2969      	cmp	r1, #105	; 0x69
 80025a8:	d1f6      	bne.n	8002598 <_printf_i+0x30>
 80025aa:	6820      	ldr	r0, [r4, #0]
 80025ac:	6813      	ldr	r3, [r2, #0]
 80025ae:	0605      	lsls	r5, r0, #24
 80025b0:	f103 0104 	add.w	r1, r3, #4
 80025b4:	d52a      	bpl.n	800260c <_printf_i+0xa4>
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6011      	str	r1, [r2, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	da03      	bge.n	80025c6 <_printf_i+0x5e>
 80025be:	222d      	movs	r2, #45	; 0x2d
 80025c0:	425b      	negs	r3, r3
 80025c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80025c6:	486f      	ldr	r0, [pc, #444]	; (8002784 <_printf_i+0x21c>)
 80025c8:	220a      	movs	r2, #10
 80025ca:	e039      	b.n	8002640 <_printf_i+0xd8>
 80025cc:	2973      	cmp	r1, #115	; 0x73
 80025ce:	f000 809d 	beq.w	800270c <_printf_i+0x1a4>
 80025d2:	d808      	bhi.n	80025e6 <_printf_i+0x7e>
 80025d4:	296f      	cmp	r1, #111	; 0x6f
 80025d6:	d020      	beq.n	800261a <_printf_i+0xb2>
 80025d8:	2970      	cmp	r1, #112	; 0x70
 80025da:	d1dd      	bne.n	8002598 <_printf_i+0x30>
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	f043 0320 	orr.w	r3, r3, #32
 80025e2:	6023      	str	r3, [r4, #0]
 80025e4:	e003      	b.n	80025ee <_printf_i+0x86>
 80025e6:	2975      	cmp	r1, #117	; 0x75
 80025e8:	d017      	beq.n	800261a <_printf_i+0xb2>
 80025ea:	2978      	cmp	r1, #120	; 0x78
 80025ec:	d1d4      	bne.n	8002598 <_printf_i+0x30>
 80025ee:	2378      	movs	r3, #120	; 0x78
 80025f0:	4865      	ldr	r0, [pc, #404]	; (8002788 <_printf_i+0x220>)
 80025f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025f6:	e055      	b.n	80026a4 <_printf_i+0x13c>
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025fe:	1d19      	adds	r1, r3, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6011      	str	r1, [r2, #0]
 8002604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002608:	2301      	movs	r3, #1
 800260a:	e08c      	b.n	8002726 <_printf_i+0x1be>
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002612:	6011      	str	r1, [r2, #0]
 8002614:	bf18      	it	ne
 8002616:	b21b      	sxthne	r3, r3
 8002618:	e7cf      	b.n	80025ba <_printf_i+0x52>
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	6825      	ldr	r5, [r4, #0]
 800261e:	1d18      	adds	r0, r3, #4
 8002620:	6010      	str	r0, [r2, #0]
 8002622:	0628      	lsls	r0, r5, #24
 8002624:	d501      	bpl.n	800262a <_printf_i+0xc2>
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	e002      	b.n	8002630 <_printf_i+0xc8>
 800262a:	0668      	lsls	r0, r5, #25
 800262c:	d5fb      	bpl.n	8002626 <_printf_i+0xbe>
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	296f      	cmp	r1, #111	; 0x6f
 8002632:	bf14      	ite	ne
 8002634:	220a      	movne	r2, #10
 8002636:	2208      	moveq	r2, #8
 8002638:	4852      	ldr	r0, [pc, #328]	; (8002784 <_printf_i+0x21c>)
 800263a:	2100      	movs	r1, #0
 800263c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002640:	6865      	ldr	r5, [r4, #4]
 8002642:	2d00      	cmp	r5, #0
 8002644:	60a5      	str	r5, [r4, #8]
 8002646:	f2c0 8095 	blt.w	8002774 <_printf_i+0x20c>
 800264a:	6821      	ldr	r1, [r4, #0]
 800264c:	f021 0104 	bic.w	r1, r1, #4
 8002650:	6021      	str	r1, [r4, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d13d      	bne.n	80026d2 <_printf_i+0x16a>
 8002656:	2d00      	cmp	r5, #0
 8002658:	f040 808e 	bne.w	8002778 <_printf_i+0x210>
 800265c:	4665      	mov	r5, ip
 800265e:	2a08      	cmp	r2, #8
 8002660:	d10b      	bne.n	800267a <_printf_i+0x112>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	07db      	lsls	r3, r3, #31
 8002666:	d508      	bpl.n	800267a <_printf_i+0x112>
 8002668:	6923      	ldr	r3, [r4, #16]
 800266a:	6862      	ldr	r2, [r4, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	bfde      	ittt	le
 8002670:	2330      	movle	r3, #48	; 0x30
 8002672:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002676:	f105 35ff 	addle.w	r5, r5, #4294967295
 800267a:	ebac 0305 	sub.w	r3, ip, r5
 800267e:	6123      	str	r3, [r4, #16]
 8002680:	f8cd 8000 	str.w	r8, [sp]
 8002684:	463b      	mov	r3, r7
 8002686:	aa03      	add	r2, sp, #12
 8002688:	4621      	mov	r1, r4
 800268a:	4630      	mov	r0, r6
 800268c:	f7ff fef6 	bl	800247c <_printf_common>
 8002690:	3001      	adds	r0, #1
 8002692:	d14d      	bne.n	8002730 <_printf_i+0x1c8>
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	b005      	add	sp, #20
 800269a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800269e:	4839      	ldr	r0, [pc, #228]	; (8002784 <_printf_i+0x21c>)
 80026a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	6821      	ldr	r1, [r4, #0]
 80026a8:	1d1d      	adds	r5, r3, #4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6015      	str	r5, [r2, #0]
 80026ae:	060a      	lsls	r2, r1, #24
 80026b0:	d50b      	bpl.n	80026ca <_printf_i+0x162>
 80026b2:	07ca      	lsls	r2, r1, #31
 80026b4:	bf44      	itt	mi
 80026b6:	f041 0120 	orrmi.w	r1, r1, #32
 80026ba:	6021      	strmi	r1, [r4, #0]
 80026bc:	b91b      	cbnz	r3, 80026c6 <_printf_i+0x15e>
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	f022 0220 	bic.w	r2, r2, #32
 80026c4:	6022      	str	r2, [r4, #0]
 80026c6:	2210      	movs	r2, #16
 80026c8:	e7b7      	b.n	800263a <_printf_i+0xd2>
 80026ca:	064d      	lsls	r5, r1, #25
 80026cc:	bf48      	it	mi
 80026ce:	b29b      	uxthmi	r3, r3
 80026d0:	e7ef      	b.n	80026b2 <_printf_i+0x14a>
 80026d2:	4665      	mov	r5, ip
 80026d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80026d8:	fb02 3311 	mls	r3, r2, r1, r3
 80026dc:	5cc3      	ldrb	r3, [r0, r3]
 80026de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80026e2:	460b      	mov	r3, r1
 80026e4:	2900      	cmp	r1, #0
 80026e6:	d1f5      	bne.n	80026d4 <_printf_i+0x16c>
 80026e8:	e7b9      	b.n	800265e <_printf_i+0xf6>
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	6825      	ldr	r5, [r4, #0]
 80026ee:	1d18      	adds	r0, r3, #4
 80026f0:	6961      	ldr	r1, [r4, #20]
 80026f2:	6010      	str	r0, [r2, #0]
 80026f4:	0628      	lsls	r0, r5, #24
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	d501      	bpl.n	80026fe <_printf_i+0x196>
 80026fa:	6019      	str	r1, [r3, #0]
 80026fc:	e002      	b.n	8002704 <_printf_i+0x19c>
 80026fe:	066a      	lsls	r2, r5, #25
 8002700:	d5fb      	bpl.n	80026fa <_printf_i+0x192>
 8002702:	8019      	strh	r1, [r3, #0]
 8002704:	2300      	movs	r3, #0
 8002706:	4665      	mov	r5, ip
 8002708:	6123      	str	r3, [r4, #16]
 800270a:	e7b9      	b.n	8002680 <_printf_i+0x118>
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	1d19      	adds	r1, r3, #4
 8002710:	6011      	str	r1, [r2, #0]
 8002712:	681d      	ldr	r5, [r3, #0]
 8002714:	6862      	ldr	r2, [r4, #4]
 8002716:	2100      	movs	r1, #0
 8002718:	4628      	mov	r0, r5
 800271a:	f000 fa93 	bl	8002c44 <memchr>
 800271e:	b108      	cbz	r0, 8002724 <_printf_i+0x1bc>
 8002720:	1b40      	subs	r0, r0, r5
 8002722:	6060      	str	r0, [r4, #4]
 8002724:	6863      	ldr	r3, [r4, #4]
 8002726:	6123      	str	r3, [r4, #16]
 8002728:	2300      	movs	r3, #0
 800272a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800272e:	e7a7      	b.n	8002680 <_printf_i+0x118>
 8002730:	6923      	ldr	r3, [r4, #16]
 8002732:	462a      	mov	r2, r5
 8002734:	4639      	mov	r1, r7
 8002736:	4630      	mov	r0, r6
 8002738:	47c0      	blx	r8
 800273a:	3001      	adds	r0, #1
 800273c:	d0aa      	beq.n	8002694 <_printf_i+0x12c>
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	079b      	lsls	r3, r3, #30
 8002742:	d413      	bmi.n	800276c <_printf_i+0x204>
 8002744:	68e0      	ldr	r0, [r4, #12]
 8002746:	9b03      	ldr	r3, [sp, #12]
 8002748:	4298      	cmp	r0, r3
 800274a:	bfb8      	it	lt
 800274c:	4618      	movlt	r0, r3
 800274e:	e7a3      	b.n	8002698 <_printf_i+0x130>
 8002750:	2301      	movs	r3, #1
 8002752:	464a      	mov	r2, r9
 8002754:	4639      	mov	r1, r7
 8002756:	4630      	mov	r0, r6
 8002758:	47c0      	blx	r8
 800275a:	3001      	adds	r0, #1
 800275c:	d09a      	beq.n	8002694 <_printf_i+0x12c>
 800275e:	3501      	adds	r5, #1
 8002760:	68e3      	ldr	r3, [r4, #12]
 8002762:	9a03      	ldr	r2, [sp, #12]
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	42ab      	cmp	r3, r5
 8002768:	dcf2      	bgt.n	8002750 <_printf_i+0x1e8>
 800276a:	e7eb      	b.n	8002744 <_printf_i+0x1dc>
 800276c:	2500      	movs	r5, #0
 800276e:	f104 0919 	add.w	r9, r4, #25
 8002772:	e7f5      	b.n	8002760 <_printf_i+0x1f8>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ac      	bne.n	80026d2 <_printf_i+0x16a>
 8002778:	7803      	ldrb	r3, [r0, #0]
 800277a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800277e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002782:	e76c      	b.n	800265e <_printf_i+0xf6>
 8002784:	08002e59 	.word	0x08002e59
 8002788:	08002e6a 	.word	0x08002e6a

0800278c <_sbrk_r>:
 800278c:	b538      	push	{r3, r4, r5, lr}
 800278e:	2300      	movs	r3, #0
 8002790:	4c05      	ldr	r4, [pc, #20]	; (80027a8 <_sbrk_r+0x1c>)
 8002792:	4605      	mov	r5, r0
 8002794:	4608      	mov	r0, r1
 8002796:	6023      	str	r3, [r4, #0]
 8002798:	f7ff fb3e 	bl	8001e18 <_sbrk>
 800279c:	1c43      	adds	r3, r0, #1
 800279e:	d102      	bne.n	80027a6 <_sbrk_r+0x1a>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	b103      	cbz	r3, 80027a6 <_sbrk_r+0x1a>
 80027a4:	602b      	str	r3, [r5, #0]
 80027a6:	bd38      	pop	{r3, r4, r5, pc}
 80027a8:	20000120 	.word	0x20000120

080027ac <__sread>:
 80027ac:	b510      	push	{r4, lr}
 80027ae:	460c      	mov	r4, r1
 80027b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027b4:	f000 faa2 	bl	8002cfc <_read_r>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	bfab      	itete	ge
 80027bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027be:	89a3      	ldrhlt	r3, [r4, #12]
 80027c0:	181b      	addge	r3, r3, r0
 80027c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027c6:	bfac      	ite	ge
 80027c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80027ca:	81a3      	strhlt	r3, [r4, #12]
 80027cc:	bd10      	pop	{r4, pc}

080027ce <__swrite>:
 80027ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d2:	461f      	mov	r7, r3
 80027d4:	898b      	ldrh	r3, [r1, #12]
 80027d6:	4605      	mov	r5, r0
 80027d8:	05db      	lsls	r3, r3, #23
 80027da:	460c      	mov	r4, r1
 80027dc:	4616      	mov	r6, r2
 80027de:	d505      	bpl.n	80027ec <__swrite+0x1e>
 80027e0:	2302      	movs	r3, #2
 80027e2:	2200      	movs	r2, #0
 80027e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e8:	f000 f9b6 	bl	8002b58 <_lseek_r>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	4632      	mov	r2, r6
 80027f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027f4:	81a3      	strh	r3, [r4, #12]
 80027f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027fa:	463b      	mov	r3, r7
 80027fc:	4628      	mov	r0, r5
 80027fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002802:	f000 b869 	b.w	80028d8 <_write_r>

08002806 <__sseek>:
 8002806:	b510      	push	{r4, lr}
 8002808:	460c      	mov	r4, r1
 800280a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800280e:	f000 f9a3 	bl	8002b58 <_lseek_r>
 8002812:	1c43      	adds	r3, r0, #1
 8002814:	89a3      	ldrh	r3, [r4, #12]
 8002816:	bf15      	itete	ne
 8002818:	6560      	strne	r0, [r4, #84]	; 0x54
 800281a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800281e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002822:	81a3      	strheq	r3, [r4, #12]
 8002824:	bf18      	it	ne
 8002826:	81a3      	strhne	r3, [r4, #12]
 8002828:	bd10      	pop	{r4, pc}

0800282a <__sclose>:
 800282a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800282e:	f000 b8d3 	b.w	80029d8 <_close_r>
	...

08002834 <__swbuf_r>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	460e      	mov	r6, r1
 8002838:	4614      	mov	r4, r2
 800283a:	4605      	mov	r5, r0
 800283c:	b118      	cbz	r0, 8002846 <__swbuf_r+0x12>
 800283e:	6983      	ldr	r3, [r0, #24]
 8002840:	b90b      	cbnz	r3, 8002846 <__swbuf_r+0x12>
 8002842:	f7ff fbf9 	bl	8002038 <__sinit>
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <__swbuf_r+0x98>)
 8002848:	429c      	cmp	r4, r3
 800284a:	d12a      	bne.n	80028a2 <__swbuf_r+0x6e>
 800284c:	686c      	ldr	r4, [r5, #4]
 800284e:	69a3      	ldr	r3, [r4, #24]
 8002850:	60a3      	str	r3, [r4, #8]
 8002852:	89a3      	ldrh	r3, [r4, #12]
 8002854:	071a      	lsls	r2, r3, #28
 8002856:	d52e      	bpl.n	80028b6 <__swbuf_r+0x82>
 8002858:	6923      	ldr	r3, [r4, #16]
 800285a:	b363      	cbz	r3, 80028b6 <__swbuf_r+0x82>
 800285c:	6923      	ldr	r3, [r4, #16]
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	b2f6      	uxtb	r6, r6
 8002862:	1ac0      	subs	r0, r0, r3
 8002864:	6963      	ldr	r3, [r4, #20]
 8002866:	4637      	mov	r7, r6
 8002868:	4283      	cmp	r3, r0
 800286a:	dc04      	bgt.n	8002876 <__swbuf_r+0x42>
 800286c:	4621      	mov	r1, r4
 800286e:	4628      	mov	r0, r5
 8002870:	f000 f948 	bl	8002b04 <_fflush_r>
 8002874:	bb28      	cbnz	r0, 80028c2 <__swbuf_r+0x8e>
 8002876:	68a3      	ldr	r3, [r4, #8]
 8002878:	3001      	adds	r0, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	60a3      	str	r3, [r4, #8]
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	6022      	str	r2, [r4, #0]
 8002884:	701e      	strb	r6, [r3, #0]
 8002886:	6963      	ldr	r3, [r4, #20]
 8002888:	4283      	cmp	r3, r0
 800288a:	d004      	beq.n	8002896 <__swbuf_r+0x62>
 800288c:	89a3      	ldrh	r3, [r4, #12]
 800288e:	07db      	lsls	r3, r3, #31
 8002890:	d519      	bpl.n	80028c6 <__swbuf_r+0x92>
 8002892:	2e0a      	cmp	r6, #10
 8002894:	d117      	bne.n	80028c6 <__swbuf_r+0x92>
 8002896:	4621      	mov	r1, r4
 8002898:	4628      	mov	r0, r5
 800289a:	f000 f933 	bl	8002b04 <_fflush_r>
 800289e:	b190      	cbz	r0, 80028c6 <__swbuf_r+0x92>
 80028a0:	e00f      	b.n	80028c2 <__swbuf_r+0x8e>
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <__swbuf_r+0x9c>)
 80028a4:	429c      	cmp	r4, r3
 80028a6:	d101      	bne.n	80028ac <__swbuf_r+0x78>
 80028a8:	68ac      	ldr	r4, [r5, #8]
 80028aa:	e7d0      	b.n	800284e <__swbuf_r+0x1a>
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <__swbuf_r+0xa0>)
 80028ae:	429c      	cmp	r4, r3
 80028b0:	bf08      	it	eq
 80028b2:	68ec      	ldreq	r4, [r5, #12]
 80028b4:	e7cb      	b.n	800284e <__swbuf_r+0x1a>
 80028b6:	4621      	mov	r1, r4
 80028b8:	4628      	mov	r0, r5
 80028ba:	f000 f81f 	bl	80028fc <__swsetup_r>
 80028be:	2800      	cmp	r0, #0
 80028c0:	d0cc      	beq.n	800285c <__swbuf_r+0x28>
 80028c2:	f04f 37ff 	mov.w	r7, #4294967295
 80028c6:	4638      	mov	r0, r7
 80028c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ca:	bf00      	nop
 80028cc:	08002e08 	.word	0x08002e08
 80028d0:	08002e28 	.word	0x08002e28
 80028d4:	08002de8 	.word	0x08002de8

080028d8 <_write_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	4605      	mov	r5, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	2200      	movs	r2, #0
 80028e2:	4c05      	ldr	r4, [pc, #20]	; (80028f8 <_write_r+0x20>)
 80028e4:	6022      	str	r2, [r4, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f7ff f824 	bl	8001934 <_write>
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	d102      	bne.n	80028f6 <_write_r+0x1e>
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	b103      	cbz	r3, 80028f6 <_write_r+0x1e>
 80028f4:	602b      	str	r3, [r5, #0]
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
 80028f8:	20000120 	.word	0x20000120

080028fc <__swsetup_r>:
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <__swsetup_r+0xcc>)
 80028fe:	b570      	push	{r4, r5, r6, lr}
 8002900:	681d      	ldr	r5, [r3, #0]
 8002902:	4606      	mov	r6, r0
 8002904:	460c      	mov	r4, r1
 8002906:	b125      	cbz	r5, 8002912 <__swsetup_r+0x16>
 8002908:	69ab      	ldr	r3, [r5, #24]
 800290a:	b913      	cbnz	r3, 8002912 <__swsetup_r+0x16>
 800290c:	4628      	mov	r0, r5
 800290e:	f7ff fb93 	bl	8002038 <__sinit>
 8002912:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <__swsetup_r+0xd0>)
 8002914:	429c      	cmp	r4, r3
 8002916:	d10f      	bne.n	8002938 <__swsetup_r+0x3c>
 8002918:	686c      	ldr	r4, [r5, #4]
 800291a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800291e:	b29a      	uxth	r2, r3
 8002920:	0715      	lsls	r5, r2, #28
 8002922:	d42c      	bmi.n	800297e <__swsetup_r+0x82>
 8002924:	06d0      	lsls	r0, r2, #27
 8002926:	d411      	bmi.n	800294c <__swsetup_r+0x50>
 8002928:	2209      	movs	r2, #9
 800292a:	6032      	str	r2, [r6, #0]
 800292c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002930:	81a3      	strh	r3, [r4, #12]
 8002932:	f04f 30ff 	mov.w	r0, #4294967295
 8002936:	e03e      	b.n	80029b6 <__swsetup_r+0xba>
 8002938:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <__swsetup_r+0xd4>)
 800293a:	429c      	cmp	r4, r3
 800293c:	d101      	bne.n	8002942 <__swsetup_r+0x46>
 800293e:	68ac      	ldr	r4, [r5, #8]
 8002940:	e7eb      	b.n	800291a <__swsetup_r+0x1e>
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <__swsetup_r+0xd8>)
 8002944:	429c      	cmp	r4, r3
 8002946:	bf08      	it	eq
 8002948:	68ec      	ldreq	r4, [r5, #12]
 800294a:	e7e6      	b.n	800291a <__swsetup_r+0x1e>
 800294c:	0751      	lsls	r1, r2, #29
 800294e:	d512      	bpl.n	8002976 <__swsetup_r+0x7a>
 8002950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002952:	b141      	cbz	r1, 8002966 <__swsetup_r+0x6a>
 8002954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002958:	4299      	cmp	r1, r3
 800295a:	d002      	beq.n	8002962 <__swsetup_r+0x66>
 800295c:	4630      	mov	r0, r6
 800295e:	f000 f981 	bl	8002c64 <_free_r>
 8002962:	2300      	movs	r3, #0
 8002964:	6363      	str	r3, [r4, #52]	; 0x34
 8002966:	89a3      	ldrh	r3, [r4, #12]
 8002968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800296c:	81a3      	strh	r3, [r4, #12]
 800296e:	2300      	movs	r3, #0
 8002970:	6063      	str	r3, [r4, #4]
 8002972:	6923      	ldr	r3, [r4, #16]
 8002974:	6023      	str	r3, [r4, #0]
 8002976:	89a3      	ldrh	r3, [r4, #12]
 8002978:	f043 0308 	orr.w	r3, r3, #8
 800297c:	81a3      	strh	r3, [r4, #12]
 800297e:	6923      	ldr	r3, [r4, #16]
 8002980:	b94b      	cbnz	r3, 8002996 <__swsetup_r+0x9a>
 8002982:	89a3      	ldrh	r3, [r4, #12]
 8002984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298c:	d003      	beq.n	8002996 <__swsetup_r+0x9a>
 800298e:	4621      	mov	r1, r4
 8002990:	4630      	mov	r0, r6
 8002992:	f000 f917 	bl	8002bc4 <__smakebuf_r>
 8002996:	89a2      	ldrh	r2, [r4, #12]
 8002998:	f012 0301 	ands.w	r3, r2, #1
 800299c:	d00c      	beq.n	80029b8 <__swsetup_r+0xbc>
 800299e:	2300      	movs	r3, #0
 80029a0:	60a3      	str	r3, [r4, #8]
 80029a2:	6963      	ldr	r3, [r4, #20]
 80029a4:	425b      	negs	r3, r3
 80029a6:	61a3      	str	r3, [r4, #24]
 80029a8:	6923      	ldr	r3, [r4, #16]
 80029aa:	b953      	cbnz	r3, 80029c2 <__swsetup_r+0xc6>
 80029ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80029b4:	d1ba      	bne.n	800292c <__swsetup_r+0x30>
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	0792      	lsls	r2, r2, #30
 80029ba:	bf58      	it	pl
 80029bc:	6963      	ldrpl	r3, [r4, #20]
 80029be:	60a3      	str	r3, [r4, #8]
 80029c0:	e7f2      	b.n	80029a8 <__swsetup_r+0xac>
 80029c2:	2000      	movs	r0, #0
 80029c4:	e7f7      	b.n	80029b6 <__swsetup_r+0xba>
 80029c6:	bf00      	nop
 80029c8:	2000000c 	.word	0x2000000c
 80029cc:	08002e08 	.word	0x08002e08
 80029d0:	08002e28 	.word	0x08002e28
 80029d4:	08002de8 	.word	0x08002de8

080029d8 <_close_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	2300      	movs	r3, #0
 80029dc:	4c05      	ldr	r4, [pc, #20]	; (80029f4 <_close_r+0x1c>)
 80029de:	4605      	mov	r5, r0
 80029e0:	4608      	mov	r0, r1
 80029e2:	6023      	str	r3, [r4, #0]
 80029e4:	f7ff f9e7 	bl	8001db6 <_close>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_close_r+0x1a>
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_close_r+0x1a>
 80029f0:	602b      	str	r3, [r5, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	20000120 	.word	0x20000120

080029f8 <__sflush_r>:
 80029f8:	898a      	ldrh	r2, [r1, #12]
 80029fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029fe:	4605      	mov	r5, r0
 8002a00:	0710      	lsls	r0, r2, #28
 8002a02:	460c      	mov	r4, r1
 8002a04:	d458      	bmi.n	8002ab8 <__sflush_r+0xc0>
 8002a06:	684b      	ldr	r3, [r1, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	dc05      	bgt.n	8002a18 <__sflush_r+0x20>
 8002a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	dc02      	bgt.n	8002a18 <__sflush_r+0x20>
 8002a12:	2000      	movs	r0, #0
 8002a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a1a:	2e00      	cmp	r6, #0
 8002a1c:	d0f9      	beq.n	8002a12 <__sflush_r+0x1a>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a24:	682f      	ldr	r7, [r5, #0]
 8002a26:	6a21      	ldr	r1, [r4, #32]
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	d032      	beq.n	8002a92 <__sflush_r+0x9a>
 8002a2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a2e:	89a3      	ldrh	r3, [r4, #12]
 8002a30:	075a      	lsls	r2, r3, #29
 8002a32:	d505      	bpl.n	8002a40 <__sflush_r+0x48>
 8002a34:	6863      	ldr	r3, [r4, #4]
 8002a36:	1ac0      	subs	r0, r0, r3
 8002a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a3a:	b10b      	cbz	r3, 8002a40 <__sflush_r+0x48>
 8002a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a3e:	1ac0      	subs	r0, r0, r3
 8002a40:	2300      	movs	r3, #0
 8002a42:	4602      	mov	r2, r0
 8002a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a46:	6a21      	ldr	r1, [r4, #32]
 8002a48:	4628      	mov	r0, r5
 8002a4a:	47b0      	blx	r6
 8002a4c:	1c43      	adds	r3, r0, #1
 8002a4e:	89a3      	ldrh	r3, [r4, #12]
 8002a50:	d106      	bne.n	8002a60 <__sflush_r+0x68>
 8002a52:	6829      	ldr	r1, [r5, #0]
 8002a54:	291d      	cmp	r1, #29
 8002a56:	d848      	bhi.n	8002aea <__sflush_r+0xf2>
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <__sflush_r+0x108>)
 8002a5a:	40ca      	lsrs	r2, r1
 8002a5c:	07d6      	lsls	r6, r2, #31
 8002a5e:	d544      	bpl.n	8002aea <__sflush_r+0xf2>
 8002a60:	2200      	movs	r2, #0
 8002a62:	6062      	str	r2, [r4, #4]
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	04d9      	lsls	r1, r3, #19
 8002a68:	6022      	str	r2, [r4, #0]
 8002a6a:	d504      	bpl.n	8002a76 <__sflush_r+0x7e>
 8002a6c:	1c42      	adds	r2, r0, #1
 8002a6e:	d101      	bne.n	8002a74 <__sflush_r+0x7c>
 8002a70:	682b      	ldr	r3, [r5, #0]
 8002a72:	b903      	cbnz	r3, 8002a76 <__sflush_r+0x7e>
 8002a74:	6560      	str	r0, [r4, #84]	; 0x54
 8002a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a78:	602f      	str	r7, [r5, #0]
 8002a7a:	2900      	cmp	r1, #0
 8002a7c:	d0c9      	beq.n	8002a12 <__sflush_r+0x1a>
 8002a7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a82:	4299      	cmp	r1, r3
 8002a84:	d002      	beq.n	8002a8c <__sflush_r+0x94>
 8002a86:	4628      	mov	r0, r5
 8002a88:	f000 f8ec 	bl	8002c64 <_free_r>
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	6360      	str	r0, [r4, #52]	; 0x34
 8002a90:	e7c0      	b.n	8002a14 <__sflush_r+0x1c>
 8002a92:	2301      	movs	r3, #1
 8002a94:	4628      	mov	r0, r5
 8002a96:	47b0      	blx	r6
 8002a98:	1c41      	adds	r1, r0, #1
 8002a9a:	d1c8      	bne.n	8002a2e <__sflush_r+0x36>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0c5      	beq.n	8002a2e <__sflush_r+0x36>
 8002aa2:	2b1d      	cmp	r3, #29
 8002aa4:	d001      	beq.n	8002aaa <__sflush_r+0xb2>
 8002aa6:	2b16      	cmp	r3, #22
 8002aa8:	d101      	bne.n	8002aae <__sflush_r+0xb6>
 8002aaa:	602f      	str	r7, [r5, #0]
 8002aac:	e7b1      	b.n	8002a12 <__sflush_r+0x1a>
 8002aae:	89a3      	ldrh	r3, [r4, #12]
 8002ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab4:	81a3      	strh	r3, [r4, #12]
 8002ab6:	e7ad      	b.n	8002a14 <__sflush_r+0x1c>
 8002ab8:	690f      	ldr	r7, [r1, #16]
 8002aba:	2f00      	cmp	r7, #0
 8002abc:	d0a9      	beq.n	8002a12 <__sflush_r+0x1a>
 8002abe:	0793      	lsls	r3, r2, #30
 8002ac0:	bf18      	it	ne
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	680e      	ldr	r6, [r1, #0]
 8002ac6:	bf08      	it	eq
 8002ac8:	694b      	ldreq	r3, [r1, #20]
 8002aca:	eba6 0807 	sub.w	r8, r6, r7
 8002ace:	600f      	str	r7, [r1, #0]
 8002ad0:	608b      	str	r3, [r1, #8]
 8002ad2:	f1b8 0f00 	cmp.w	r8, #0
 8002ad6:	dd9c      	ble.n	8002a12 <__sflush_r+0x1a>
 8002ad8:	4643      	mov	r3, r8
 8002ada:	463a      	mov	r2, r7
 8002adc:	6a21      	ldr	r1, [r4, #32]
 8002ade:	4628      	mov	r0, r5
 8002ae0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ae2:	47b0      	blx	r6
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	dc06      	bgt.n	8002af6 <__sflush_r+0xfe>
 8002ae8:	89a3      	ldrh	r3, [r4, #12]
 8002aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aee:	81a3      	strh	r3, [r4, #12]
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	e78e      	b.n	8002a14 <__sflush_r+0x1c>
 8002af6:	4407      	add	r7, r0
 8002af8:	eba8 0800 	sub.w	r8, r8, r0
 8002afc:	e7e9      	b.n	8002ad2 <__sflush_r+0xda>
 8002afe:	bf00      	nop
 8002b00:	20400001 	.word	0x20400001

08002b04 <_fflush_r>:
 8002b04:	b538      	push	{r3, r4, r5, lr}
 8002b06:	690b      	ldr	r3, [r1, #16]
 8002b08:	4605      	mov	r5, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	b1db      	cbz	r3, 8002b46 <_fflush_r+0x42>
 8002b0e:	b118      	cbz	r0, 8002b18 <_fflush_r+0x14>
 8002b10:	6983      	ldr	r3, [r0, #24]
 8002b12:	b90b      	cbnz	r3, 8002b18 <_fflush_r+0x14>
 8002b14:	f7ff fa90 	bl	8002038 <__sinit>
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <_fflush_r+0x48>)
 8002b1a:	429c      	cmp	r4, r3
 8002b1c:	d109      	bne.n	8002b32 <_fflush_r+0x2e>
 8002b1e:	686c      	ldr	r4, [r5, #4]
 8002b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b24:	b17b      	cbz	r3, 8002b46 <_fflush_r+0x42>
 8002b26:	4621      	mov	r1, r4
 8002b28:	4628      	mov	r0, r5
 8002b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b2e:	f7ff bf63 	b.w	80029f8 <__sflush_r>
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <_fflush_r+0x4c>)
 8002b34:	429c      	cmp	r4, r3
 8002b36:	d101      	bne.n	8002b3c <_fflush_r+0x38>
 8002b38:	68ac      	ldr	r4, [r5, #8]
 8002b3a:	e7f1      	b.n	8002b20 <_fflush_r+0x1c>
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <_fflush_r+0x50>)
 8002b3e:	429c      	cmp	r4, r3
 8002b40:	bf08      	it	eq
 8002b42:	68ec      	ldreq	r4, [r5, #12]
 8002b44:	e7ec      	b.n	8002b20 <_fflush_r+0x1c>
 8002b46:	2000      	movs	r0, #0
 8002b48:	bd38      	pop	{r3, r4, r5, pc}
 8002b4a:	bf00      	nop
 8002b4c:	08002e08 	.word	0x08002e08
 8002b50:	08002e28 	.word	0x08002e28
 8002b54:	08002de8 	.word	0x08002de8

08002b58 <_lseek_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	4605      	mov	r5, r0
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	2200      	movs	r2, #0
 8002b62:	4c05      	ldr	r4, [pc, #20]	; (8002b78 <_lseek_r+0x20>)
 8002b64:	6022      	str	r2, [r4, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	f7ff f949 	bl	8001dfe <_lseek>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d102      	bne.n	8002b76 <_lseek_r+0x1e>
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	b103      	cbz	r3, 8002b76 <_lseek_r+0x1e>
 8002b74:	602b      	str	r3, [r5, #0]
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	20000120 	.word	0x20000120

08002b7c <__swhatbuf_r>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	460e      	mov	r6, r1
 8002b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b84:	b096      	sub	sp, #88	; 0x58
 8002b86:	2900      	cmp	r1, #0
 8002b88:	4614      	mov	r4, r2
 8002b8a:	461d      	mov	r5, r3
 8002b8c:	da07      	bge.n	8002b9e <__swhatbuf_r+0x22>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	602b      	str	r3, [r5, #0]
 8002b92:	89b3      	ldrh	r3, [r6, #12]
 8002b94:	061a      	lsls	r2, r3, #24
 8002b96:	d410      	bmi.n	8002bba <__swhatbuf_r+0x3e>
 8002b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9c:	e00e      	b.n	8002bbc <__swhatbuf_r+0x40>
 8002b9e:	466a      	mov	r2, sp
 8002ba0:	f000 f8be 	bl	8002d20 <_fstat_r>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	dbf2      	blt.n	8002b8e <__swhatbuf_r+0x12>
 8002ba8:	9a01      	ldr	r2, [sp, #4]
 8002baa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bb2:	425a      	negs	r2, r3
 8002bb4:	415a      	adcs	r2, r3
 8002bb6:	602a      	str	r2, [r5, #0]
 8002bb8:	e7ee      	b.n	8002b98 <__swhatbuf_r+0x1c>
 8002bba:	2340      	movs	r3, #64	; 0x40
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	6023      	str	r3, [r4, #0]
 8002bc0:	b016      	add	sp, #88	; 0x58
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}

08002bc4 <__smakebuf_r>:
 8002bc4:	898b      	ldrh	r3, [r1, #12]
 8002bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bc8:	079d      	lsls	r5, r3, #30
 8002bca:	4606      	mov	r6, r0
 8002bcc:	460c      	mov	r4, r1
 8002bce:	d507      	bpl.n	8002be0 <__smakebuf_r+0x1c>
 8002bd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	6123      	str	r3, [r4, #16]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	6163      	str	r3, [r4, #20]
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	ab01      	add	r3, sp, #4
 8002be2:	466a      	mov	r2, sp
 8002be4:	f7ff ffca 	bl	8002b7c <__swhatbuf_r>
 8002be8:	9900      	ldr	r1, [sp, #0]
 8002bea:	4605      	mov	r5, r0
 8002bec:	4630      	mov	r0, r6
 8002bee:	f7ff faad 	bl	800214c <_malloc_r>
 8002bf2:	b948      	cbnz	r0, 8002c08 <__smakebuf_r+0x44>
 8002bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bf8:	059a      	lsls	r2, r3, #22
 8002bfa:	d4ef      	bmi.n	8002bdc <__smakebuf_r+0x18>
 8002bfc:	f023 0303 	bic.w	r3, r3, #3
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	81a3      	strh	r3, [r4, #12]
 8002c06:	e7e3      	b.n	8002bd0 <__smakebuf_r+0xc>
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <__smakebuf_r+0x7c>)
 8002c0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	6020      	str	r0, [r4, #0]
 8002c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c14:	81a3      	strh	r3, [r4, #12]
 8002c16:	9b00      	ldr	r3, [sp, #0]
 8002c18:	6120      	str	r0, [r4, #16]
 8002c1a:	6163      	str	r3, [r4, #20]
 8002c1c:	9b01      	ldr	r3, [sp, #4]
 8002c1e:	b15b      	cbz	r3, 8002c38 <__smakebuf_r+0x74>
 8002c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c24:	4630      	mov	r0, r6
 8002c26:	f000 f88d 	bl	8002d44 <_isatty_r>
 8002c2a:	b128      	cbz	r0, 8002c38 <__smakebuf_r+0x74>
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	431d      	orrs	r5, r3
 8002c3c:	81a5      	strh	r5, [r4, #12]
 8002c3e:	e7cd      	b.n	8002bdc <__smakebuf_r+0x18>
 8002c40:	08002001 	.word	0x08002001

08002c44 <memchr>:
 8002c44:	b510      	push	{r4, lr}
 8002c46:	b2c9      	uxtb	r1, r1
 8002c48:	4402      	add	r2, r0
 8002c4a:	4290      	cmp	r0, r2
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	d101      	bne.n	8002c54 <memchr+0x10>
 8002c50:	2300      	movs	r3, #0
 8002c52:	e003      	b.n	8002c5c <memchr+0x18>
 8002c54:	781c      	ldrb	r4, [r3, #0]
 8002c56:	3001      	adds	r0, #1
 8002c58:	428c      	cmp	r4, r1
 8002c5a:	d1f6      	bne.n	8002c4a <memchr+0x6>
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd10      	pop	{r4, pc}

08002c60 <__malloc_lock>:
 8002c60:	4770      	bx	lr

08002c62 <__malloc_unlock>:
 8002c62:	4770      	bx	lr

08002c64 <_free_r>:
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	4605      	mov	r5, r0
 8002c68:	2900      	cmp	r1, #0
 8002c6a:	d043      	beq.n	8002cf4 <_free_r+0x90>
 8002c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c70:	1f0c      	subs	r4, r1, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bfb8      	it	lt
 8002c76:	18e4      	addlt	r4, r4, r3
 8002c78:	f7ff fff2 	bl	8002c60 <__malloc_lock>
 8002c7c:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <_free_r+0x94>)
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	4610      	mov	r0, r2
 8002c82:	b933      	cbnz	r3, 8002c92 <_free_r+0x2e>
 8002c84:	6063      	str	r3, [r4, #4]
 8002c86:	6014      	str	r4, [r2, #0]
 8002c88:	4628      	mov	r0, r5
 8002c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c8e:	f7ff bfe8 	b.w	8002c62 <__malloc_unlock>
 8002c92:	42a3      	cmp	r3, r4
 8002c94:	d90b      	bls.n	8002cae <_free_r+0x4a>
 8002c96:	6821      	ldr	r1, [r4, #0]
 8002c98:	1862      	adds	r2, r4, r1
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	bf01      	itttt	eq
 8002c9e:	681a      	ldreq	r2, [r3, #0]
 8002ca0:	685b      	ldreq	r3, [r3, #4]
 8002ca2:	1852      	addeq	r2, r2, r1
 8002ca4:	6022      	streq	r2, [r4, #0]
 8002ca6:	6063      	str	r3, [r4, #4]
 8002ca8:	6004      	str	r4, [r0, #0]
 8002caa:	e7ed      	b.n	8002c88 <_free_r+0x24>
 8002cac:	4613      	mov	r3, r2
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	b10a      	cbz	r2, 8002cb6 <_free_r+0x52>
 8002cb2:	42a2      	cmp	r2, r4
 8002cb4:	d9fa      	bls.n	8002cac <_free_r+0x48>
 8002cb6:	6819      	ldr	r1, [r3, #0]
 8002cb8:	1858      	adds	r0, r3, r1
 8002cba:	42a0      	cmp	r0, r4
 8002cbc:	d10b      	bne.n	8002cd6 <_free_r+0x72>
 8002cbe:	6820      	ldr	r0, [r4, #0]
 8002cc0:	4401      	add	r1, r0
 8002cc2:	1858      	adds	r0, r3, r1
 8002cc4:	4282      	cmp	r2, r0
 8002cc6:	6019      	str	r1, [r3, #0]
 8002cc8:	d1de      	bne.n	8002c88 <_free_r+0x24>
 8002cca:	6810      	ldr	r0, [r2, #0]
 8002ccc:	6852      	ldr	r2, [r2, #4]
 8002cce:	4401      	add	r1, r0
 8002cd0:	6019      	str	r1, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	e7d8      	b.n	8002c88 <_free_r+0x24>
 8002cd6:	d902      	bls.n	8002cde <_free_r+0x7a>
 8002cd8:	230c      	movs	r3, #12
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	e7d4      	b.n	8002c88 <_free_r+0x24>
 8002cde:	6820      	ldr	r0, [r4, #0]
 8002ce0:	1821      	adds	r1, r4, r0
 8002ce2:	428a      	cmp	r2, r1
 8002ce4:	bf01      	itttt	eq
 8002ce6:	6811      	ldreq	r1, [r2, #0]
 8002ce8:	6852      	ldreq	r2, [r2, #4]
 8002cea:	1809      	addeq	r1, r1, r0
 8002cec:	6021      	streq	r1, [r4, #0]
 8002cee:	6062      	str	r2, [r4, #4]
 8002cf0:	605c      	str	r4, [r3, #4]
 8002cf2:	e7c9      	b.n	8002c88 <_free_r+0x24>
 8002cf4:	bd38      	pop	{r3, r4, r5, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200000d0 	.word	0x200000d0

08002cfc <_read_r>:
 8002cfc:	b538      	push	{r3, r4, r5, lr}
 8002cfe:	4605      	mov	r5, r0
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	4c05      	ldr	r4, [pc, #20]	; (8002d1c <_read_r+0x20>)
 8002d08:	6022      	str	r2, [r4, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f7ff f836 	bl	8001d7c <_read>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d102      	bne.n	8002d1a <_read_r+0x1e>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	b103      	cbz	r3, 8002d1a <_read_r+0x1e>
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	20000120 	.word	0x20000120

08002d20 <_fstat_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	2300      	movs	r3, #0
 8002d24:	4c06      	ldr	r4, [pc, #24]	; (8002d40 <_fstat_r+0x20>)
 8002d26:	4605      	mov	r5, r0
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	6023      	str	r3, [r4, #0]
 8002d2e:	f7ff f84d 	bl	8001dcc <_fstat>
 8002d32:	1c43      	adds	r3, r0, #1
 8002d34:	d102      	bne.n	8002d3c <_fstat_r+0x1c>
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	b103      	cbz	r3, 8002d3c <_fstat_r+0x1c>
 8002d3a:	602b      	str	r3, [r5, #0]
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000120 	.word	0x20000120

08002d44 <_isatty_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	2300      	movs	r3, #0
 8002d48:	4c05      	ldr	r4, [pc, #20]	; (8002d60 <_isatty_r+0x1c>)
 8002d4a:	4605      	mov	r5, r0
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	6023      	str	r3, [r4, #0]
 8002d50:	f7ff f84b 	bl	8001dea <_isatty>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d102      	bne.n	8002d5e <_isatty_r+0x1a>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	b103      	cbz	r3, 8002d5e <_isatty_r+0x1a>
 8002d5c:	602b      	str	r3, [r5, #0]
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	20000120 	.word	0x20000120

08002d64 <_init>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr

08002d70 <_fini>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr
