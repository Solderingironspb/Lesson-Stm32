
My timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08007e98  08007e98  00017e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008230  08008230  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008230  08008230  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008230  08008230  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001e8  08008420  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08008420  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4f5  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af5  00000000  00000000  0002d706  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  0002feb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d5c  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0ca  00000000  00000000  0004881c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a81b  00000000  00000000  000528e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004424  00000000  00000000  000dd17c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e7c 	.word	0x08007e7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007e7c 	.word	0x08007e7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af02      	add	r7, sp, #8
 8001116:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <lcd1602_Send_init_Data+0x80>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e006      	b.n	800113e <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f023 0308 	bic.w	r3, r3, #8
 8001138:	b2da      	uxtb	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	b2da      	uxtb	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	214e      	movs	r1, #78	; 0x4e
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <lcd1602_Send_init_Data+0x84>)
 8001158:	f001 fc96 	bl	8002a88 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800115c:	2005      	movs	r0, #5
 800115e:	f001 f8b9 	bl	80022d4 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f023 0304 	bic.w	r3, r3, #4
 800116a:	b2da      	uxtb	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8001170:	230a      	movs	r3, #10
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	214e      	movs	r1, #78	; 0x4e
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <lcd1602_Send_init_Data+0x84>)
 800117c:	f001 fc84 	bl	8002a88 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001180:	2005      	movs	r0, #5
 8001182:	f001 f8a7 	bl	80022d4 <HAL_Delay>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000000 	.word	0x20000000
 8001194:	200002a0 	.word	0x200002a0

08001198 <lcd1602_Write_byte>:
/*-------------Функция для отправки данных при инициализации дисплея-------------*/

/*--------------------Функция отправки байта информации на дисплей---------------*/
/// Функция отправки байта информации на дисплей
/// \param Data - Байт данныйх
static void lcd1602_Write_byte(uint8_t Data) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, &Data, 1, 10);
 80011a2:	1dfa      	adds	r2, r7, #7
 80011a4:	230a      	movs	r3, #10
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	214e      	movs	r1, #78	; 0x4e
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <lcd1602_Write_byte+0x24>)
 80011ae:	f001 fc6b 	bl	8002a88 <HAL_I2C_Master_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200002a0 	.word	0x200002a0

080011c0 <lcd1602_Send_cmd>:
/*--------------------Функция отправки байта информации на дисплей---------------*/

/*----------------------Функция отправки пол байта информации--------------------*/
/// Функция отправки пол байта информации
/// \*param Data - байт данных
static void lcd1602_Send_cmd(uint8_t Data) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	Data <<= 4;
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	71fb      	strb	r3, [r7, #7]
	lcd1602_Write_byte(global_buffer |= 0x04); // Устанавливаем стробирующий сигнал E в 1
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <lcd1602_Send_cmd+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <lcd1602_Send_cmd+0x58>)
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <lcd1602_Send_cmd+0x58>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffd8 	bl	8001198 <lcd1602_Write_byte>
	lcd1602_Write_byte(global_buffer | Data); // Отправляем в дисплей полученный и сдвинутый байт
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <lcd1602_Send_cmd+0x58>)
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffd0 	bl	8001198 <lcd1602_Write_byte>
	lcd1602_Write_byte(global_buffer &= ~0x04);	// Устанавливаем стробирующий сигнал E в 0.
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <lcd1602_Send_cmd+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	f023 0304 	bic.w	r3, r3, #4
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <lcd1602_Send_cmd+0x58>)
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <lcd1602_Send_cmd+0x58>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffc4 	bl	8001198 <lcd1602_Write_byte>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000022c 	.word	0x2000022c

0800121c <lcd1602_Send_data_symbol>:

/*----------------------Функция отправки байта данных----------------------------*/
/// Функция отправки байта данных на дисплей
/// \param Data - байт данных
/// \param mode - отправка команды. 1 - RW = 1(отправка данных). 0 - RW = 0(отправка команды).
static void lcd1602_Send_data_symbol(uint8_t Data, uint8_t mode) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
	if (mode == 0) {
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10c      	bne.n	800124c <lcd1602_Send_data_symbol+0x30>
		lcd1602_Write_byte(global_buffer &= ~0x01); // RS = 0
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <lcd1602_Send_data_symbol+0x6c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <lcd1602_Send_data_symbol+0x6c>)
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <lcd1602_Send_data_symbol+0x6c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ffa7 	bl	8001198 <lcd1602_Write_byte>
 800124a:	e00b      	b.n	8001264 <lcd1602_Send_data_symbol+0x48>
	} else {
		lcd1602_Write_byte(global_buffer |= 0x01); // RS = 1
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <lcd1602_Send_data_symbol+0x6c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <lcd1602_Send_data_symbol+0x6c>)
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <lcd1602_Send_data_symbol+0x6c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff9a 	bl	8001198 <lcd1602_Write_byte>
	}
	uint8_t MSB_Data = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
	MSB_Data = Data >> 4; // Сдвигаем полученный байт на 4 позичии и записываем в переменную
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_cmd(MSB_Data);	// Отправляем первые 4 бита полученного байта
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffa5 	bl	80011c0 <lcd1602_Send_cmd>
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffa1 	bl	80011c0 <lcd1602_Send_cmd>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000022c 	.word	0x2000022c

0800128c <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <lcd1602_Send_data+0x74>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e006      	b.n	80012ba <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	f023 0308 	bic.w	r3, r3, #8
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 80012c8:	230a      	movs	r3, #10
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	214e      	movs	r1, #78	; 0x4e
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <lcd1602_Send_data+0x78>)
 80012d4:	f001 fbd8 	bl	8002a88 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 80012e6:	230a      	movs	r3, #10
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	214e      	movs	r1, #78	; 0x4e
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <lcd1602_Send_data+0x78>)
 80012f2:	f001 fbc9 	bl	8002a88 <HAL_I2C_Master_Transmit>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000
 8001304:	200002a0 	.word	0x200002a0

08001308 <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 800130e:	2330      	movs	r3, #48	; 0x30
 8001310:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8001312:	200f      	movs	r0, #15
 8001314:	f000 ffde 	bl	80022d4 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fef8 	bl	8001110 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8001320:	2005      	movs	r0, #5
 8001322:	f000 ffd7 	bl	80022d4 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fef1 	bl	8001110 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f000 ffd0 	bl	80022d4 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff feea 	bl	8001110 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 800133c:	2320      	movs	r3, #32
 800133e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fee4 	bl	8001110 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8001348:	2320      	movs	r3, #32
 800134a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fede 	bl	8001110 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fed8 	bl	8001110 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fed2 	bl	8001110 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fecc 	bl	8001110 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 8001378:	2300      	movs	r3, #0
 800137a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fec6 	bl	8001110 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8001384:	2310      	movs	r3, #16
 8001386:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fec0 	bl	8001110 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8001390:	2300      	movs	r3, #0
 8001392:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff feba 	bl	8001110 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 800139c:	2330      	movs	r3, #48	; 0x30
 800139e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff feb4 	bl	8001110 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 80013a8:	2300      	movs	r3, #0
 80013aa:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff feae 	bl	8001110 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 80013b4:	23c0      	movs	r3, #192	; 0xc0
 80013b6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fea8 	bl	8001110 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	f023 030f 	bic.w	r3, r3, #15
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	f043 0309 	orr.w	r3, r3, #9
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 80013e6:	f107 030f 	add.w	r3, r7, #15
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff4e 	bl	800128c <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	f043 0309 	orr.w	r3, r3, #9
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001400:	f107 030f 	add.w	r3, r7, #15
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff41 	bl	800128c <lcd1602_Send_data>
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e009      	b.n	8001434 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ffcd 	bl	80013c8 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3301      	adds	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7fe fe8b 	bl	8000150 <strlen>
 800143a:	4602      	mov	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	429a      	cmp	r2, r3
 8001440:	d8ee      	bhi.n	8001420 <lcd1602_Print_text+0xe>
	}
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	460a      	mov	r2, r1
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	4613      	mov	r3, r2
 8001458:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d901      	bls.n	8001464 <lcd1602_SetCursor+0x1a>
		y = 3;
 8001460:	2303      	movs	r3, #3
 8001462:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b27      	cmp	r3, #39	; 0x27
 8001468:	d901      	bls.n	800146e <lcd1602_SetCursor+0x24>
		x = 39;
 800146a:	2327      	movs	r3, #39	; 0x27
 800146c:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <lcd1602_SetCursor+0x2e>
		adr = x;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d102      	bne.n	8001484 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	3340      	adds	r3, #64	; 0x40
 8001482:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d102      	bne.n	8001490 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	3314      	adds	r3, #20
 800148e:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d102      	bne.n	800149c <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	3354      	adds	r3, #84	; 0x54
 800149a:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 80014b0:	f107 030e 	add.w	r3, r7, #14
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fee9 	bl	800128c <lcd1602_Send_data>

	command = (adr << 4);
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 80014c2:	f107 030e 	add.w	r3, r7, #14
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fee0 	bl	800128c <lcd1602_Send_data>

}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <lcd1602_Create_symbol>:

/*---------------------Функция создания своего символа-------------------------- */
/// Функция создания своего собственного символа и запись его в память.
/// \param *my_Symbol - массив с символом
/// \param memory_adress - номер ячейки: от 1 до 8. Всего 8 ячеек.
void lcd1602_Create_symbol(uint8_t *my_Symbol, uint8_t memory_adress) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
	lcd1602_Send_data_symbol(((memory_adress * 8) | 0x40), 0);
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fe92 	bl	800121c <lcd1602_Send_data_symbol>
	for (uint8_t i = 0; i < 8; i++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e00a      	b.n	8001514 <lcd1602_Create_symbol+0x40>
		lcd1602_Send_data_symbol(my_Symbol[i], 1); // Записываем данные побайтово в память
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2101      	movs	r1, #1
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe87 	bl	800121c <lcd1602_Send_data_symbol>
	for (uint8_t i = 0; i < 8; i++) {
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	3301      	adds	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	2b07      	cmp	r3, #7
 8001518:	d9f1      	bls.n	80014fe <lcd1602_Create_symbol+0x2a>
	}
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800152a:	f000 fe71 	bl	8002210 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800152e:	f000 f9e3 	bl	80018f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001532:	f000 fbdb 	bl	8001cec <MX_GPIO_Init>
	MX_I2C1_Init();
 8001536:	f000 fa2b 	bl	8001990 <MX_I2C1_Init>
	MX_TIM2_Init();
 800153a:	f000 fac5 	bl	8001ac8 <MX_TIM2_Init>
	MX_TIM3_Init();
 800153e:	f000 fb2d 	bl	8001b9c <MX_TIM3_Init>
	MX_TIM1_Init();
 8001542:	f000 fa53 	bl	80019ec <MX_TIM1_Init>
	MX_TIM4_Init();
 8001546:	f000 fb81 	bl	8001c4c <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(100);
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f000 fec2 	bl	80022d4 <HAL_Delay>
	lcd1602_Init();
 8001550:	f7ff feda 	bl	8001308 <lcd1602_Init>
	lcd1602_Create_symbol(mu, 1);
 8001554:	2101      	movs	r1, #1
 8001556:	48a6      	ldr	r0, [pc, #664]	; (80017f0 <main+0x2cc>)
 8001558:	f7ff ffbc 	bl	80014d4 <lcd1602_Create_symbol>
//что нужно сделать прерывание. Таким образом получается, что первое прерывание от таймера произойдёт не через указанный
//нами период, а сразу после старта системы. В каких-то случаях, как простое мигание светодиодом, это не критично,
//а в каких-то это может оказаться неприемлемым.

//исправить эту ситуацию очень просто, надо всего лишь очистить флаг перед запуском таймера:
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 800155c:	4ba5      	ldr	r3, [pc, #660]	; (80017f4 <main+0x2d0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f06f 0201 	mvn.w	r2, #1
 8001564:	611a      	str	r2, [r3, #16]
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8001566:	4ba4      	ldr	r3, [pc, #656]	; (80017f8 <main+0x2d4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f06f 0201 	mvn.w	r2, #1
 800156e:	611a      	str	r2, [r3, #16]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 8001570:	4ba2      	ldr	r3, [pc, #648]	; (80017fc <main+0x2d8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f06f 0201 	mvn.w	r2, #1
 8001578:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim1);
 800157a:	489e      	ldr	r0, [pc, #632]	; (80017f4 <main+0x2d0>)
 800157c:	f002 fa1a 	bl	80039b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001580:	489d      	ldr	r0, [pc, #628]	; (80017f8 <main+0x2d4>)
 8001582:	f002 fa17 	bl	80039b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001586:	489d      	ldr	r0, [pc, #628]	; (80017fc <main+0x2d8>)
 8001588:	f002 fa14 	bl	80039b4 <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (flag) {
 800158c:	4b9c      	ldr	r3, [pc, #624]	; (8001800 <main+0x2dc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0fb      	beq.n	800158c <main+0x68>
			flag = 0;
 8001594:	4b9a      	ldr	r3, [pc, #616]	; (8001800 <main+0x2dc>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
			period = 1000000 / (float) freq;
 800159a:	4b9a      	ldr	r3, [pc, #616]	; (8001804 <main+0x2e0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb98 	bl	8000cd4 <__aeabi_ui2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4897      	ldr	r0, [pc, #604]	; (8001808 <main+0x2e4>)
 80015aa:	f7ff fc9f 	bl	8000eec <__aeabi_fdiv>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b96      	ldr	r3, [pc, #600]	; (800180c <main+0x2e8>)
 80015b4:	601a      	str	r2, [r3, #0]

			if (period <= 1) {
 80015b6:	4b95      	ldr	r3, [pc, #596]	; (800180c <main+0x2e8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fd88 	bl	80010d4 <__aeabi_fcmple>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d019      	beq.n	80015fe <main+0xda>
				sprintf(lcd1602_tx_buffer, "period:%10.3f ns", period * 1000);
 80015ca:	4b90      	ldr	r3, [pc, #576]	; (800180c <main+0x2e8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4990      	ldr	r1, [pc, #576]	; (8001810 <main+0x2ec>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fbd7 	bl	8000d84 <__aeabi_fmul>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff25 	bl	8000428 <__aeabi_f2d>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	461a      	mov	r2, r3
 80015e4:	4623      	mov	r3, r4
 80015e6:	498b      	ldr	r1, [pc, #556]	; (8001814 <main+0x2f0>)
 80015e8:	488b      	ldr	r0, [pc, #556]	; (8001818 <main+0x2f4>)
 80015ea:	f003 fd3f 	bl	800506c <siprintf>
				lcd1602_SetCursor(0, 0);
 80015ee:	2100      	movs	r1, #0
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff2a 	bl	800144a <lcd1602_SetCursor>
				lcd1602_Print_text(lcd1602_tx_buffer);
 80015f6:	4888      	ldr	r0, [pc, #544]	; (8001818 <main+0x2f4>)
 80015f8:	f7ff ff0b 	bl	8001412 <lcd1602_Print_text>
 80015fc:	e01f      	b.n	800163e <main+0x11a>
			} else if (period >= 1) {
 80015fe:	4b83      	ldr	r3, [pc, #524]	; (800180c <main+0x2e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd6e 	bl	80010e8 <__aeabi_fcmpge>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d015      	beq.n	800163e <main+0x11a>
				sprintf(lcd1602_tx_buffer, "period:%10.3f %cs", period, 0x01);
 8001612:	4b7e      	ldr	r3, [pc, #504]	; (800180c <main+0x2e8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff06 	bl	8000428 <__aeabi_f2d>
 800161c:	460a      	mov	r2, r1
 800161e:	4601      	mov	r1, r0
 8001620:	2301      	movs	r3, #1
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4613      	mov	r3, r2
 8001626:	460a      	mov	r2, r1
 8001628:	497c      	ldr	r1, [pc, #496]	; (800181c <main+0x2f8>)
 800162a:	487b      	ldr	r0, [pc, #492]	; (8001818 <main+0x2f4>)
 800162c:	f003 fd1e 	bl	800506c <siprintf>
				lcd1602_SetCursor(0, 0);
 8001630:	2100      	movs	r1, #0
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff ff09 	bl	800144a <lcd1602_SetCursor>
				lcd1602_Print_text(lcd1602_tx_buffer);
 8001638:	4877      	ldr	r0, [pc, #476]	; (8001818 <main+0x2f4>)
 800163a:	f7ff feea 	bl	8001412 <lcd1602_Print_text>
			}

			if (freq <= 1000) {
 800163e:	4b71      	ldr	r3, [pc, #452]	; (8001804 <main+0x2e0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001646:	d818      	bhi.n	800167a <main+0x156>
				sprintf(lcd1602_tx_buffer, "freq:%12.3f Hz", (float) freq);
 8001648:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <main+0x2e0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fb41 	bl	8000cd4 <__aeabi_ui2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fee7 	bl	8000428 <__aeabi_f2d>
 800165a:	4603      	mov	r3, r0
 800165c:	460c      	mov	r4, r1
 800165e:	461a      	mov	r2, r3
 8001660:	4623      	mov	r3, r4
 8001662:	496f      	ldr	r1, [pc, #444]	; (8001820 <main+0x2fc>)
 8001664:	486c      	ldr	r0, [pc, #432]	; (8001818 <main+0x2f4>)
 8001666:	f003 fd01 	bl	800506c <siprintf>
				lcd1602_SetCursor(0, 1);
 800166a:	2101      	movs	r1, #1
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff feec 	bl	800144a <lcd1602_SetCursor>
				lcd1602_Print_text(lcd1602_tx_buffer);
 8001672:	4869      	ldr	r0, [pc, #420]	; (8001818 <main+0x2f4>)
 8001674:	f7ff fecd 	bl	8001412 <lcd1602_Print_text>
 8001678:	e049      	b.n	800170e <main+0x1ea>
			} else if (freq > 1000 && freq < 1000000) {
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <main+0x2e0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001682:	d922      	bls.n	80016ca <main+0x1a6>
 8001684:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <main+0x2e0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a66      	ldr	r2, [pc, #408]	; (8001824 <main+0x300>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d81d      	bhi.n	80016ca <main+0x1a6>
				sprintf(lcd1602_tx_buffer, "freq:%11.3f kHz", (float) freq / 1000);
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <main+0x2e0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fb1e 	bl	8000cd4 <__aeabi_ui2f>
 8001698:	4603      	mov	r3, r0
 800169a:	495d      	ldr	r1, [pc, #372]	; (8001810 <main+0x2ec>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fc25 	bl	8000eec <__aeabi_fdiv>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe febf 	bl	8000428 <__aeabi_f2d>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	495d      	ldr	r1, [pc, #372]	; (8001828 <main+0x304>)
 80016b4:	4858      	ldr	r0, [pc, #352]	; (8001818 <main+0x2f4>)
 80016b6:	f003 fcd9 	bl	800506c <siprintf>
				lcd1602_SetCursor(0, 1);
 80016ba:	2101      	movs	r1, #1
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff fec4 	bl	800144a <lcd1602_SetCursor>
				lcd1602_Print_text(lcd1602_tx_buffer);
 80016c2:	4855      	ldr	r0, [pc, #340]	; (8001818 <main+0x2f4>)
 80016c4:	f7ff fea5 	bl	8001412 <lcd1602_Print_text>
 80016c8:	e021      	b.n	800170e <main+0x1ea>
			} else if (freq >= 1000000) {
 80016ca:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <main+0x2e0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a55      	ldr	r2, [pc, #340]	; (8001824 <main+0x300>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d91c      	bls.n	800170e <main+0x1ea>
				sprintf(lcd1602_tx_buffer, "freq:%11.3f MHz", (float) freq / 1000000);
 80016d4:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <main+0x2e0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fafb 	bl	8000cd4 <__aeabi_ui2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	4949      	ldr	r1, [pc, #292]	; (8001808 <main+0x2e4>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fc02 	bl	8000eec <__aeabi_fdiv>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fe9c 	bl	8000428 <__aeabi_f2d>
 80016f0:	4603      	mov	r3, r0
 80016f2:	460c      	mov	r4, r1
 80016f4:	461a      	mov	r2, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	494c      	ldr	r1, [pc, #304]	; (800182c <main+0x308>)
 80016fa:	4847      	ldr	r0, [pc, #284]	; (8001818 <main+0x2f4>)
 80016fc:	f003 fcb6 	bl	800506c <siprintf>
				lcd1602_SetCursor(0, 1);
 8001700:	2101      	movs	r1, #1
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fea1 	bl	800144a <lcd1602_SetCursor>
				lcd1602_Print_text(lcd1602_tx_buffer);
 8001708:	4843      	ldr	r0, [pc, #268]	; (8001818 <main+0x2f4>)
 800170a:	f7ff fe82 	bl	8001412 <lcd1602_Print_text>
			}

			period2 = 1000000 / (float) freq2;
 800170e:	4b48      	ldr	r3, [pc, #288]	; (8001830 <main+0x30c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fade 	bl	8000cd4 <__aeabi_ui2f>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	483a      	ldr	r0, [pc, #232]	; (8001808 <main+0x2e4>)
 800171e:	f7ff fbe5 	bl	8000eec <__aeabi_fdiv>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <main+0x310>)
 8001728:	601a      	str	r2, [r3, #0]

			 if (period2 <= 1) {
 800172a:	4b42      	ldr	r3, [pc, #264]	; (8001834 <main+0x310>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fcce 	bl	80010d4 <__aeabi_fcmple>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d019      	beq.n	8001772 <main+0x24e>
			 sprintf(lcd1602_tx_buffer, "period2:%9.3f ns", period2 * 1000);
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <main+0x310>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4933      	ldr	r1, [pc, #204]	; (8001810 <main+0x2ec>)
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fb1d 	bl	8000d84 <__aeabi_fmul>
 800174a:	4603      	mov	r3, r0
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fe6b 	bl	8000428 <__aeabi_f2d>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	461a      	mov	r2, r3
 8001758:	4623      	mov	r3, r4
 800175a:	4937      	ldr	r1, [pc, #220]	; (8001838 <main+0x314>)
 800175c:	482e      	ldr	r0, [pc, #184]	; (8001818 <main+0x2f4>)
 800175e:	f003 fc85 	bl	800506c <siprintf>
			 lcd1602_SetCursor(0, 2);
 8001762:	2102      	movs	r1, #2
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff fe70 	bl	800144a <lcd1602_SetCursor>
			 lcd1602_Print_text(lcd1602_tx_buffer);
 800176a:	482b      	ldr	r0, [pc, #172]	; (8001818 <main+0x2f4>)
 800176c:	f7ff fe51 	bl	8001412 <lcd1602_Print_text>
 8001770:	e01f      	b.n	80017b2 <main+0x28e>
			 } else if (period2 >= 1) {
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <main+0x310>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fcb4 	bl	80010e8 <__aeabi_fcmpge>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <main+0x28e>
			 sprintf(lcd1602_tx_buffer, "period2:%9.3f %cs", period2, 0x01);
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <main+0x310>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe4c 	bl	8000428 <__aeabi_f2d>
 8001790:	460a      	mov	r2, r1
 8001792:	4601      	mov	r1, r0
 8001794:	2301      	movs	r3, #1
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	460a      	mov	r2, r1
 800179c:	4927      	ldr	r1, [pc, #156]	; (800183c <main+0x318>)
 800179e:	481e      	ldr	r0, [pc, #120]	; (8001818 <main+0x2f4>)
 80017a0:	f003 fc64 	bl	800506c <siprintf>
			 lcd1602_SetCursor(0, 2);
 80017a4:	2102      	movs	r1, #2
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fe4f 	bl	800144a <lcd1602_SetCursor>
			 lcd1602_Print_text(lcd1602_tx_buffer);
 80017ac:	481a      	ldr	r0, [pc, #104]	; (8001818 <main+0x2f4>)
 80017ae:	f7ff fe30 	bl	8001412 <lcd1602_Print_text>
			 }

			 if (freq2 <= 1000) {
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <main+0x30c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ba:	d843      	bhi.n	8001844 <main+0x320>
			 sprintf(lcd1602_tx_buffer, "freq2:%11.3f Hz", (float) freq2);
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <main+0x30c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fa87 	bl	8000cd4 <__aeabi_ui2f>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe2d 	bl	8000428 <__aeabi_f2d>
 80017ce:	4603      	mov	r3, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	461a      	mov	r2, r3
 80017d4:	4623      	mov	r3, r4
 80017d6:	491a      	ldr	r1, [pc, #104]	; (8001840 <main+0x31c>)
 80017d8:	480f      	ldr	r0, [pc, #60]	; (8001818 <main+0x2f4>)
 80017da:	f003 fc47 	bl	800506c <siprintf>
			 lcd1602_SetCursor(0, 3);
 80017de:	2103      	movs	r1, #3
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fe32 	bl	800144a <lcd1602_SetCursor>
			 lcd1602_Print_text(lcd1602_tx_buffer);
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <main+0x2f4>)
 80017e8:	f7ff fe13 	bl	8001412 <lcd1602_Print_text>
 80017ec:	e6ce      	b.n	800158c <main+0x68>
 80017ee:	bf00      	nop
 80017f0:	20000004 	.word	0x20000004
 80017f4:	2000033c 	.word	0x2000033c
 80017f8:	20000384 	.word	0x20000384
 80017fc:	200002f4 	.word	0x200002f4
 8001800:	20000248 	.word	0x20000248
 8001804:	20000234 	.word	0x20000234
 8001808:	49742400 	.word	0x49742400
 800180c:	20000238 	.word	0x20000238
 8001810:	447a0000 	.word	0x447a0000
 8001814:	08007e98 	.word	0x08007e98
 8001818:	20000204 	.word	0x20000204
 800181c:	08007eac 	.word	0x08007eac
 8001820:	08007ec0 	.word	0x08007ec0
 8001824:	000f423f 	.word	0x000f423f
 8001828:	08007ed0 	.word	0x08007ed0
 800182c:	08007ee0 	.word	0x08007ee0
 8001830:	20000240 	.word	0x20000240
 8001834:	20000244 	.word	0x20000244
 8001838:	08007ef0 	.word	0x08007ef0
 800183c:	08007f04 	.word	0x08007f04
 8001840:	08007f18 	.word	0x08007f18
			 } else if (freq2 > 1000 && freq2 < 1000000) {
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <main+0x3b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800184c:	d922      	bls.n	8001894 <main+0x370>
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <main+0x3b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <main+0x3bc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d81d      	bhi.n	8001894 <main+0x370>
			 sprintf(lcd1602_tx_buffer, "freq2:%10.3f kHz", (float) freq2 / 1000);
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <main+0x3b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fa39 	bl	8000cd4 <__aeabi_ui2f>
 8001862:	4603      	mov	r3, r0
 8001864:	491f      	ldr	r1, [pc, #124]	; (80018e4 <main+0x3c0>)
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb40 	bl	8000eec <__aeabi_fdiv>
 800186c:	4603      	mov	r3, r0
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fdda 	bl	8000428 <__aeabi_f2d>
 8001874:	4603      	mov	r3, r0
 8001876:	460c      	mov	r4, r1
 8001878:	461a      	mov	r2, r3
 800187a:	4623      	mov	r3, r4
 800187c:	491a      	ldr	r1, [pc, #104]	; (80018e8 <main+0x3c4>)
 800187e:	481b      	ldr	r0, [pc, #108]	; (80018ec <main+0x3c8>)
 8001880:	f003 fbf4 	bl	800506c <siprintf>
			 lcd1602_SetCursor(0, 3);
 8001884:	2103      	movs	r1, #3
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fddf 	bl	800144a <lcd1602_SetCursor>
			 lcd1602_Print_text(lcd1602_tx_buffer);
 800188c:	4817      	ldr	r0, [pc, #92]	; (80018ec <main+0x3c8>)
 800188e:	f7ff fdc0 	bl	8001412 <lcd1602_Print_text>
 8001892:	e022      	b.n	80018da <main+0x3b6>
			 } else if (freq2 >= 1000000) {
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <main+0x3b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <main+0x3bc>)
 800189a:	4293      	cmp	r3, r2
 800189c:	f67f ae76 	bls.w	800158c <main+0x68>
			 sprintf(lcd1602_tx_buffer, "freq2:%10.3f MHz", (float) freq2 / 1000000);
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <main+0x3b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa15 	bl	8000cd4 <__aeabi_ui2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4910      	ldr	r1, [pc, #64]	; (80018f0 <main+0x3cc>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fb1c 	bl	8000eec <__aeabi_fdiv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fdb6 	bl	8000428 <__aeabi_f2d>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	490b      	ldr	r1, [pc, #44]	; (80018f4 <main+0x3d0>)
 80018c6:	4809      	ldr	r0, [pc, #36]	; (80018ec <main+0x3c8>)
 80018c8:	f003 fbd0 	bl	800506c <siprintf>
			 lcd1602_SetCursor(0, 3);
 80018cc:	2103      	movs	r1, #3
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fdbb 	bl	800144a <lcd1602_SetCursor>
			 lcd1602_Print_text(lcd1602_tx_buffer);
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <main+0x3c8>)
 80018d6:	f7ff fd9c 	bl	8001412 <lcd1602_Print_text>
		if (flag) {
 80018da:	e657      	b.n	800158c <main+0x68>
 80018dc:	20000240 	.word	0x20000240
 80018e0:	000f423f 	.word	0x000f423f
 80018e4:	447a0000 	.word	0x447a0000
 80018e8:	08007f28 	.word	0x08007f28
 80018ec:	20000204 	.word	0x20000204
 80018f0:	49742400 	.word	0x49742400
 80018f4:	08007f3c 	.word	0x08007f3c

080018f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b090      	sub	sp, #64	; 0x40
 80018fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	2228      	movs	r2, #40	; 0x28
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fd74 	bl	80043f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800191a:	2301      	movs	r3, #1
 800191c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001922:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192c:	2302      	movs	r3, #2
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001936:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800193c:	f107 0318 	add.w	r3, r7, #24
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fba7 	bl	8003094 <HAL_RCC_OscConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0x58>
		Error_Handler();
 800194c:	f000 fa34 	bl	8001db8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001950:	230f      	movs	r3, #15
 8001952:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001954:	2302      	movs	r3, #2
 8001956:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800195c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001960:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2102      	movs	r1, #2
 800196a:	4618      	mov	r0, r3
 800196c:	f001 fe12 	bl	8003594 <HAL_RCC_ClockConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0x82>
		Error_Handler();
 8001976:	f000 fa1f 	bl	8001db8 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 800197a:	2200      	movs	r2, #0
 800197c:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8001980:	2000      	movs	r0, #0
 8001982:	f001 fef1 	bl	8003768 <HAL_RCC_MCOConfig>
}
 8001986:	bf00      	nop
 8001988:	3740      	adds	r7, #64	; 0x40
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_I2C1_Init+0x50>)
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <MX_I2C1_Init+0x54>)
 8001998:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_I2C1_Init+0x50>)
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x58>)
 800199e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019ce:	f000 ff23 	bl	8002818 <HAL_I2C_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80019d8:	f000 f9ee 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200002a0 	.word	0x200002a0
 80019e4:	40005400 	.word	0x40005400
 80019e8:	00061a80 	.word	0x00061a80

080019ec <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a1a:	4a2a      	ldr	r2, [pc, #168]	; (8001ac4 <MX_TIM1_Init+0xd8>)
 8001a1c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a30:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001a44:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a46:	f001 ff65 	bl	8003914 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0x68>
		Error_Handler();
 8001a50:	f000 f9b2 	bl	8001db8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a58:	623b      	str	r3, [r7, #32]
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
	sClockSourceConfig.ClockFilter = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a6e:	f002 f982 	bl	8003d76 <HAL_TIM_ConfigClockSource>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0x90>
		Error_Handler();
 8001a78:	f000 f99e 	bl	8001db8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001a80:	2320      	movs	r3, #32
 8001a82:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001a8c:	f002 fa2a 	bl	8003ee4 <HAL_TIM_SlaveConfigSynchro>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0xae>
		Error_Handler();
 8001a96:	f000 f98f 	bl	8001db8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_TIM1_Init+0xd4>)
 8001aa8:	f002 fc0a 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM1_Init+0xca>
		Error_Handler();
 8001ab2:	f000 f981 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3730      	adds	r7, #48	; 0x30
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000033c 	.word	0x2000033c
 8001ac4:	40012c00 	.word	0x40012c00

08001ac8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001b1c:	481e      	ldr	r0, [pc, #120]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001b1e:	f001 fef9 	bl	8003914 <HAL_TIM_Base_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM2_Init+0x64>
		Error_Handler();
 8001b28:	f000 f946 	bl	8001db8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b30:	623b      	str	r3, [r7, #32]
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
	sClockSourceConfig.ClockFilter = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	4619      	mov	r1, r3
 8001b44:	4814      	ldr	r0, [pc, #80]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001b46:	f002 f916 	bl	8003d76 <HAL_TIM_ConfigClockSource>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0x8c>
		Error_Handler();
 8001b50:	f000 f932 	bl	8001db8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001b54:	2305      	movs	r3, #5
 8001b56:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001b64:	f002 f9be 	bl	8003ee4 <HAL_TIM_SlaveConfigSynchro>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init+0xaa>
		Error_Handler();
 8001b6e:	f000 f923 	bl	8001db8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_TIM2_Init+0xd0>)
 8001b80:	f002 fb9e 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0xc6>
		Error_Handler();
 8001b8a:	f000 f915 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3730      	adds	r7, #48	; 0x30
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000384 	.word	0x20000384

08001b9c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <MX_TIM3_Init+0xac>)
 8001bbc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7200 - 1;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001bc0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001bc4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000 - 1;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001bce:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bd2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001be0:	4818      	ldr	r0, [pc, #96]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001be2:	f001 fe97 	bl	8003914 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0x54>
		Error_Handler();
 8001bec:	f000 f8e4 	bl	8001db8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4811      	ldr	r0, [pc, #68]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001bfe:	f002 f8ba 	bl	8003d76 <HAL_TIM_ConfigClockSource>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0x70>
		Error_Handler();
 8001c08:	f000 f8d6 	bl	8001db8 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001c10:	f001 ff50 	bl	8003ab4 <HAL_TIM_OnePulse_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x82>
		Error_Handler();
 8001c1a:	f000 f8cd 	bl	8001db8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001c1e:	2310      	movs	r3, #16
 8001c20:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_TIM3_Init+0xa8>)
 8001c2c:	f002 fb48 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x9e>
		Error_Handler();
 8001c36:	f000 f8bf 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200002f4 	.word	0x200002f4
 8001c48:	40000400 	.word	0x40000400

08001c4c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <MX_TIM4_Init+0x9c>)
 8001c6e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c82:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001c90:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001c92:	f001 fe3f 	bl	8003914 <HAL_TIM_Base_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM4_Init+0x54>
		Error_Handler();
 8001c9c:	f000 f88c 	bl	8001db8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK) {
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	4619      	mov	r1, r3
 8001cae:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001cb0:	f002 f918 	bl	8003ee4 <HAL_TIM_SlaveConfigSynchro>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM4_Init+0x72>
		Error_Handler();
 8001cba:	f000 f87d 	bl	8001db8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <MX_TIM4_Init+0x98>)
 8001ccc:	f002 faf8 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM4_Init+0x8e>
		Error_Handler();
 8001cd6:	f000 f86f 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000258 	.word	0x20000258
 8001ce8:	40000800 	.word	0x40000800

08001cec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a29      	ldr	r2, [pc, #164]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d06:	f043 0310 	orr.w	r3, r3, #16
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a23      	ldr	r2, [pc, #140]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d1e:	f043 0320 	orr.w	r3, r3, #32
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d66:	4812      	ldr	r0, [pc, #72]	; (8001db0 <MX_GPIO_Init+0xc4>)
 8001d68:	f000 fd3e 	bl	80027e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4619      	mov	r1, r3
 8001d84:	480a      	ldr	r0, [pc, #40]	; (8001db0 <MX_GPIO_Init+0xc4>)
 8001d86:	f000 fbd5 	bl	8002534 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_GPIO_Init+0xc8>)
 8001da0:	f000 fbc8 	bl	8002534 <HAL_GPIO_Init>

}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40010800 	.word	0x40010800

08001db8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dbe:	e7fe      	b.n	8001dbe <Error_Handler+0x6>

08001dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_MspInit+0x5c>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_MspInit+0x5c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6193      	str	r3, [r2, #24]
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_MspInit+0x5c>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_MspInit+0x5c>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_MspInit+0x5c>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_MspInit+0x5c>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_MspInit+0x60>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_MspInit+0x60>)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000

08001e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_I2C_MspInit+0x70>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d123      	bne.n	8001e8c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <HAL_I2C_MspInit+0x74>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <HAL_I2C_MspInit+0x74>)
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_I2C_MspInit+0x74>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e5c:	23c0      	movs	r3, #192	; 0xc0
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e60:	2312      	movs	r3, #18
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480b      	ldr	r0, [pc, #44]	; (8001e9c <HAL_I2C_MspInit+0x78>)
 8001e70:	f000 fb60 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_I2C_MspInit+0x74>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_I2C_MspInit+0x74>)
 8001e7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e7e:	61d3      	str	r3, [r2, #28]
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_I2C_MspInit+0x74>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40005400 	.word	0x40005400
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010c00 	.word	0x40010c00

08001ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a49      	ldr	r2, [pc, #292]	; (8001fe0 <HAL_TIM_Base_MspInit+0x140>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d12d      	bne.n	8001f1c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec0:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001ec6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b45      	ldr	r3, [pc, #276]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a41      	ldr	r2, [pc, #260]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	4619      	mov	r1, r3
 8001f04:	4838      	ldr	r0, [pc, #224]	; (8001fe8 <HAL_TIM_Base_MspInit+0x148>)
 8001f06:	f000 fb15 	bl	8002534 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2019      	movs	r0, #25
 8001f10:	f000 fad9 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f14:	2019      	movs	r0, #25
 8001f16:	f000 faf2 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f1a:	e05c      	b.n	8001fd6 <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d12c      	bne.n	8001f80 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6193      	str	r3, [r2, #24]
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f56:	2301      	movs	r3, #1
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	4619      	mov	r1, r3
 8001f68:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <HAL_TIM_Base_MspInit+0x148>)
 8001f6a:	f000 fae3 	bl	8002534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	201c      	movs	r0, #28
 8001f74:	f000 faa7 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f78:	201c      	movs	r0, #28
 8001f7a:	f000 fac0 	bl	80024fe <HAL_NVIC_EnableIRQ>
}
 8001f7e:	e02a      	b.n	8001fd6 <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_TIM_Base_MspInit+0x14c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d114      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	201d      	movs	r0, #29
 8001fa8:	f000 fa8d 	bl	80024c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fac:	201d      	movs	r0, #29
 8001fae:	f000 faa6 	bl	80024fe <HAL_NVIC_EnableIRQ>
}
 8001fb2:	e010      	b.n	8001fd6 <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM4)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HAL_TIM_Base_MspInit+0x150>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_TIM_Base_MspInit+0x144>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
}
 8001fd6:	bf00      	nop
 8001fd8:	3730      	adds	r7, #48	; 0x30
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010800 	.word	0x40010800
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40000800 	.word	0x40000800

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ff8:	e7fe      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <MemManage_Handler+0x4>

08002006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <UsageFault_Handler+0x4>

08002012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f000 f92f 	bl	800229c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <TIM1_UP_IRQHandler+0x1c>)
 800204a:	f001 fd8c 	bl	8003b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  count_over2++;
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <TIM1_UP_IRQHandler+0x20>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <TIM1_UP_IRQHandler+0x20>)
 8002058:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000033c 	.word	0x2000033c
 8002064:	2000023e 	.word	0x2000023e

08002068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <TIM2_IRQHandler+0x1c>)
 800206e:	f001 fd7a 	bl	8003b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	//Таймер 2 переполняется каждые 65535 тика. т.е. до частоты в 65,535 кГц, он сюда заходить не будет.
	//А если и будет, то подсчитаем переполнения таймера, чтоб потом вычислить частоту математически.
	count_over++;
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <TIM2_IRQHandler+0x20>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b03      	ldr	r3, [pc, #12]	; (8002088 <TIM2_IRQHandler+0x20>)
 800207c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000384 	.word	0x20000384
 8002088:	20000230 	.word	0x20000230

0800208c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002090:	4824      	ldr	r0, [pc, #144]	; (8002124 <TIM3_IRQHandler+0x98>)
 8002092:	f001 fd68 	bl	8003b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	//таймер 3 дает отсчет в 1 секунду. Работает синхронно с таймером 2. Включает его и выключает.
	//Каждую секунду, он заходит сюда. Здесь мы будет подсчитывать тики, что натикал 2 таймер за эту секунду:
	count_main = ((&htim2)->Instance->CNT); //смотрим, чего там натикало в таймере 2
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <TIM3_IRQHandler+0x9c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b23      	ldr	r3, [pc, #140]	; (800212c <TIM3_IRQHandler+0xa0>)
 80020a0:	801a      	strh	r2, [r3, #0]
	freq = count_main + count_over * ((&htim2)->Instance->ARR) + count_over; //Вычисляем частоту.
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <TIM3_IRQHandler+0xa0>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <TIM3_IRQHandler+0xa4>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <TIM3_IRQHandler+0x9c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	fb03 f301 	mul.w	r3, r3, r1
 80020b8:	4413      	add	r3, r2
 80020ba:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <TIM3_IRQHandler+0xa4>)
 80020bc:	8812      	ldrh	r2, [r2, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <TIM3_IRQHandler+0xa8>)
 80020c2:	6013      	str	r3, [r2, #0]
	(&htim2)->Instance->CNT = 0x0000; //сброс счетчика таймера 2.
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <TIM3_IRQHandler+0x9c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
	count_over = 0; //сброс счетчика переполнения
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <TIM3_IRQHandler+0xa4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	801a      	strh	r2, [r3, #0]

	count_main2 = ((&htim1)->Instance->CNT); //смотрим, чего там натикало в таймере 1
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <TIM3_IRQHandler+0xac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <TIM3_IRQHandler+0xb0>)
 80020dc:	801a      	strh	r2, [r3, #0]
	freq2 = count_main2 + count_over2 * ((&htim1)->Instance->ARR) + count_over2; //Вычисляем частоту.
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <TIM3_IRQHandler+0xb0>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <TIM3_IRQHandler+0xb4>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <TIM3_IRQHandler+0xac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	fb03 f301 	mul.w	r3, r3, r1
 80020f4:	4413      	add	r3, r2
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <TIM3_IRQHandler+0xb4>)
 80020f8:	8812      	ldrh	r2, [r2, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <TIM3_IRQHandler+0xb8>)
 80020fe:	6013      	str	r3, [r2, #0]
	(&htim1)->Instance->CNT = 0x0000; //сброс счетчика таймера 1.
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <TIM3_IRQHandler+0xac>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2200      	movs	r2, #0
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
	count_over2 = 0; //сброс счетчика переполнения
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <TIM3_IRQHandler+0xb4>)
 800210a:	2200      	movs	r2, #0
 800210c:	801a      	strh	r2, [r3, #0]


	HAL_TIM_Base_Stop_IT(&htim3); //остановим таймер 3
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <TIM3_IRQHandler+0x98>)
 8002110:	f001 fca2 	bl	8003a58 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3); //запустим таймер 3
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <TIM3_IRQHandler+0x98>)
 8002116:	f001 fc4d 	bl	80039b4 <HAL_TIM_Base_Start_IT>
	flag = 1; //дадим разрешение на вывод информации, подняв флаг.
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <TIM3_IRQHandler+0xbc>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200002f4 	.word	0x200002f4
 8002128:	20000384 	.word	0x20000384
 800212c:	2000022e 	.word	0x2000022e
 8002130:	20000230 	.word	0x20000230
 8002134:	20000234 	.word	0x20000234
 8002138:	2000033c 	.word	0x2000033c
 800213c:	2000023c 	.word	0x2000023c
 8002140:	2000023e 	.word	0x2000023e
 8002144:	20000240 	.word	0x20000240
 8002148:	20000248 	.word	0x20000248

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f002 f910 	bl	80043a0 <__errno>
 8002180:	4602      	mov	r2, r0
 8002182:	230c      	movs	r3, #12
 8002184:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20005000 	.word	0x20005000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	2000024c 	.word	0x2000024c
 80021b4:	200003d8 	.word	0x200003d8

080021b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021c6:	e003      	b.n	80021d0 <LoopCopyDataInit>

080021c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021ce:	3104      	adds	r1, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021d0:	480a      	ldr	r0, [pc, #40]	; (80021fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021d8:	d3f6      	bcc.n	80021c8 <CopyDataInit>
  ldr r2, =_sbss
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021dc:	e002      	b.n	80021e4 <LoopFillZerobss>

080021de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021e0:	f842 3b04 	str.w	r3, [r2], #4

080021e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021e8:	d3f9      	bcc.n	80021de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ea:	f7ff ffe5 	bl	80021b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f002 f8dd 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021f2:	f7ff f997 	bl	8001524 <main>
  bx lr
 80021f6:	4770      	bx	lr
  ldr r3, =_sidata
 80021f8:	08008238 	.word	0x08008238
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002200:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8002204:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8002208:	200003d4 	.word	0x200003d4

0800220c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC1_2_IRQHandler>
	...

08002210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_Init+0x28>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <HAL_Init+0x28>)
 800221a:	f043 0310 	orr.w	r3, r3, #16
 800221e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002220:	2003      	movs	r0, #3
 8002222:	f000 f945 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002226:	2000      	movs	r0, #0
 8002228:	f000 f808 	bl	800223c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800222c:	f7ff fdc8 	bl	8001dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40022000 	.word	0x40022000

0800223c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_InitTick+0x54>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0x58>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002252:	fbb3 f3f1 	udiv	r3, r3, r1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f95d 	bl	800251a <HAL_SYSTICK_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00e      	b.n	8002288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d80a      	bhi.n	8002286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f000 f925 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800227c:	4a06      	ldr	r2, [pc, #24]	; (8002298 <HAL_InitTick+0x5c>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20000014 	.word	0x20000014
 8002298:	20000010 	.word	0x20000010

0800229c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_IncTick+0x1c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_IncTick+0x20>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a03      	ldr	r2, [pc, #12]	; (80022bc <HAL_IncTick+0x20>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	20000014 	.word	0x20000014
 80022bc:	200003cc 	.word	0x200003cc

080022c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_GetTick+0x10>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	200003cc 	.word	0x200003cc

080022d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff fff0 	bl	80022c0 <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d005      	beq.n	80022fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_Delay+0x40>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022fa:	bf00      	nop
 80022fc:	f7ff ffe0 	bl	80022c0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d8f7      	bhi.n	80022fc <HAL_Delay+0x28>
  {
  }
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000014 	.word	0x20000014

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4906      	ldr	r1, [pc, #24]	; (80023b0 <__NVIC_EnableIRQ+0x34>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	; (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f7ff ff90 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff2d 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff42 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff90 	bl	8002408 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5f 	bl	80023b4 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff35 	bl	800237c <__NVIC_EnableIRQ>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffa2 	bl	800246c <SysTick_Config>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b08b      	sub	sp, #44	; 0x2c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	e127      	b.n	8002798 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002548:	2201      	movs	r2, #1
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 8116 	bne.w	8002792 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b12      	cmp	r3, #18
 800256c:	d034      	beq.n	80025d8 <HAL_GPIO_Init+0xa4>
 800256e:	2b12      	cmp	r3, #18
 8002570:	d80d      	bhi.n	800258e <HAL_GPIO_Init+0x5a>
 8002572:	2b02      	cmp	r3, #2
 8002574:	d02b      	beq.n	80025ce <HAL_GPIO_Init+0x9a>
 8002576:	2b02      	cmp	r3, #2
 8002578:	d804      	bhi.n	8002584 <HAL_GPIO_Init+0x50>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d031      	beq.n	80025e2 <HAL_GPIO_Init+0xae>
 800257e:	2b01      	cmp	r3, #1
 8002580:	d01c      	beq.n	80025bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002582:	e048      	b.n	8002616 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002584:	2b03      	cmp	r3, #3
 8002586:	d043      	beq.n	8002610 <HAL_GPIO_Init+0xdc>
 8002588:	2b11      	cmp	r3, #17
 800258a:	d01b      	beq.n	80025c4 <HAL_GPIO_Init+0x90>
          break;
 800258c:	e043      	b.n	8002616 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800258e:	4a89      	ldr	r2, [pc, #548]	; (80027b4 <HAL_GPIO_Init+0x280>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d026      	beq.n	80025e2 <HAL_GPIO_Init+0xae>
 8002594:	4a87      	ldr	r2, [pc, #540]	; (80027b4 <HAL_GPIO_Init+0x280>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d806      	bhi.n	80025a8 <HAL_GPIO_Init+0x74>
 800259a:	4a87      	ldr	r2, [pc, #540]	; (80027b8 <HAL_GPIO_Init+0x284>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d020      	beq.n	80025e2 <HAL_GPIO_Init+0xae>
 80025a0:	4a86      	ldr	r2, [pc, #536]	; (80027bc <HAL_GPIO_Init+0x288>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01d      	beq.n	80025e2 <HAL_GPIO_Init+0xae>
          break;
 80025a6:	e036      	b.n	8002616 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025a8:	4a85      	ldr	r2, [pc, #532]	; (80027c0 <HAL_GPIO_Init+0x28c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_Init+0xae>
 80025ae:	4a85      	ldr	r2, [pc, #532]	; (80027c4 <HAL_GPIO_Init+0x290>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d016      	beq.n	80025e2 <HAL_GPIO_Init+0xae>
 80025b4:	4a84      	ldr	r2, [pc, #528]	; (80027c8 <HAL_GPIO_Init+0x294>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0xae>
          break;
 80025ba:	e02c      	b.n	8002616 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	623b      	str	r3, [r7, #32]
          break;
 80025c2:	e028      	b.n	8002616 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	3304      	adds	r3, #4
 80025ca:	623b      	str	r3, [r7, #32]
          break;
 80025cc:	e023      	b.n	8002616 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	3308      	adds	r3, #8
 80025d4:	623b      	str	r3, [r7, #32]
          break;
 80025d6:	e01e      	b.n	8002616 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	330c      	adds	r3, #12
 80025de:	623b      	str	r3, [r7, #32]
          break;
 80025e0:	e019      	b.n	8002616 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ea:	2304      	movs	r3, #4
 80025ec:	623b      	str	r3, [r7, #32]
          break;
 80025ee:	e012      	b.n	8002616 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f8:	2308      	movs	r3, #8
 80025fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	611a      	str	r2, [r3, #16]
          break;
 8002602:	e008      	b.n	8002616 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002604:	2308      	movs	r3, #8
 8002606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	615a      	str	r2, [r3, #20]
          break;
 800260e:	e002      	b.n	8002616 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
          break;
 8002614:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2bff      	cmp	r3, #255	; 0xff
 800261a:	d801      	bhi.n	8002620 <HAL_GPIO_Init+0xec>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	e001      	b.n	8002624 <HAL_GPIO_Init+0xf0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2bff      	cmp	r3, #255	; 0xff
 800262a:	d802      	bhi.n	8002632 <HAL_GPIO_Init+0xfe>
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x104>
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	3b08      	subs	r3, #8
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	210f      	movs	r1, #15
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	401a      	ands	r2, r3
 800264a:	6a39      	ldr	r1, [r7, #32]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	431a      	orrs	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8096 	beq.w	8002792 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002666:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_GPIO_Init+0x298>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_GPIO_Init+0x298>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6193      	str	r3, [r2, #24]
 8002672:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_GPIO_Init+0x298>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800267e:	4a54      	ldr	r2, [pc, #336]	; (80027d0 <HAL_GPIO_Init+0x29c>)
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4b      	ldr	r2, [pc, #300]	; (80027d4 <HAL_GPIO_Init+0x2a0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x19e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <HAL_GPIO_Init+0x2a4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x19a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a49      	ldr	r2, [pc, #292]	; (80027dc <HAL_GPIO_Init+0x2a8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x196>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a48      	ldr	r2, [pc, #288]	; (80027e0 <HAL_GPIO_Init+0x2ac>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x192>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x1a0>
 80026c6:	2304      	movs	r3, #4
 80026c8:	e004      	b.n	80026d4 <HAL_GPIO_Init+0x1a0>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e002      	b.n	80026d4 <HAL_GPIO_Init+0x1a0>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_GPIO_Init+0x1a0>
 80026d2:	2300      	movs	r3, #0
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	f002 0203 	and.w	r2, r2, #3
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	4093      	lsls	r3, r2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026e4:	493a      	ldr	r1, [pc, #232]	; (80027d0 <HAL_GPIO_Init+0x29c>)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	3302      	adds	r3, #2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4938      	ldr	r1, [pc, #224]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
 800270a:	e006      	b.n	800271a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800270c:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	43db      	mvns	r3, r3
 8002714:	4933      	ldr	r1, [pc, #204]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002716:	4013      	ands	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002726:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	492e      	ldr	r1, [pc, #184]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
 8002732:	e006      	b.n	8002742 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	43db      	mvns	r3, r3
 800273c:	4929      	ldr	r1, [pc, #164]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 800273e:	4013      	ands	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800274e:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	4924      	ldr	r1, [pc, #144]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
 800275a:	e006      	b.n	800276a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	43db      	mvns	r3, r3
 8002764:	491f      	ldr	r1, [pc, #124]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002766:	4013      	ands	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	491a      	ldr	r1, [pc, #104]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	60cb      	str	r3, [r1, #12]
 8002782:	e006      	b.n	8002792 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	43db      	mvns	r3, r3
 800278c:	4915      	ldr	r1, [pc, #84]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 800278e:	4013      	ands	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	3301      	adds	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f47f aed0 	bne.w	8002548 <HAL_GPIO_Init+0x14>
  }
}
 80027a8:	bf00      	nop
 80027aa:	372c      	adds	r7, #44	; 0x2c
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	10210000 	.word	0x10210000
 80027b8:	10110000 	.word	0x10110000
 80027bc:	10120000 	.word	0x10120000
 80027c0:	10310000 	.word	0x10310000
 80027c4:	10320000 	.word	0x10320000
 80027c8:	10220000 	.word	0x10220000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40010800 	.word	0x40010800
 80027d8:	40010c00 	.word	0x40010c00
 80027dc:	40011000 	.word	0x40011000
 80027e0:	40011400 	.word	0x40011400
 80027e4:	40010400 	.word	0x40010400

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e11f      	b.n	8002a6a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff faf0 	bl	8001e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800287c:	f001 f818 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a7b      	ldr	r2, [pc, #492]	; (8002a74 <HAL_I2C_Init+0x25c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d807      	bhi.n	800289c <HAL_I2C_Init+0x84>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a7a      	ldr	r2, [pc, #488]	; (8002a78 <HAL_I2C_Init+0x260>)
 8002890:	4293      	cmp	r3, r2
 8002892:	bf94      	ite	ls
 8002894:	2301      	movls	r3, #1
 8002896:	2300      	movhi	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	e006      	b.n	80028aa <HAL_I2C_Init+0x92>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a77      	ldr	r2, [pc, #476]	; (8002a7c <HAL_I2C_Init+0x264>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0db      	b.n	8002a6a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a72      	ldr	r2, [pc, #456]	; (8002a80 <HAL_I2C_Init+0x268>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0c9b      	lsrs	r3, r3, #18
 80028bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a64      	ldr	r2, [pc, #400]	; (8002a74 <HAL_I2C_Init+0x25c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d802      	bhi.n	80028ec <HAL_I2C_Init+0xd4>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	e009      	b.n	8002900 <HAL_I2C_Init+0xe8>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	4a63      	ldr	r2, [pc, #396]	; (8002a84 <HAL_I2C_Init+0x26c>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	3301      	adds	r3, #1
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	430b      	orrs	r3, r1
 8002906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4956      	ldr	r1, [pc, #344]	; (8002a74 <HAL_I2C_Init+0x25c>)
 800291c:	428b      	cmp	r3, r1
 800291e:	d80d      	bhi.n	800293c <HAL_I2C_Init+0x124>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e59      	subs	r1, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fbb1 f3f3 	udiv	r3, r1, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	2b04      	cmp	r3, #4
 8002936:	bf38      	it	cc
 8002938:	2304      	movcc	r3, #4
 800293a:	e04f      	b.n	80029dc <HAL_I2C_Init+0x1c4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d111      	bne.n	8002968 <HAL_I2C_Init+0x150>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	440b      	add	r3, r1
 8002952:	fbb0 f3f3 	udiv	r3, r0, r3
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e012      	b.n	800298e <HAL_I2C_Init+0x176>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e58      	subs	r0, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	0099      	lsls	r1, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Init+0x17e>
 8002992:	2301      	movs	r3, #1
 8002994:	e022      	b.n	80029dc <HAL_I2C_Init+0x1c4>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10e      	bne.n	80029bc <HAL_I2C_Init+0x1a4>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e58      	subs	r0, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	440b      	add	r3, r1
 80029ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ba:	e00f      	b.n	80029dc <HAL_I2C_Init+0x1c4>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e58      	subs	r0, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	0099      	lsls	r1, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6911      	ldr	r1, [r2, #16]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68d2      	ldr	r2, [r2, #12]
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	000186a0 	.word	0x000186a0
 8002a78:	001e847f 	.word	0x001e847f
 8002a7c:	003d08ff 	.word	0x003d08ff
 8002a80:	431bde83 	.word	0x431bde83
 8002a84:	10624dd3 	.word	0x10624dd3

08002a88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	461a      	mov	r2, r3
 8002a94:	460b      	mov	r3, r1
 8002a96:	817b      	strh	r3, [r7, #10]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff fc10 	bl	80022c0 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	f040 80e0 	bne.w	8002c70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2319      	movs	r3, #25
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4970      	ldr	r1, [pc, #448]	; (8002c7c <HAL_I2C_Master_Transmit+0x1f4>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f964 	bl	8002d88 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0d3      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_I2C_Master_Transmit+0x50>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e0cc      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d007      	beq.n	8002afe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2221      	movs	r2, #33	; 0x21
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2210      	movs	r2, #16
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	893a      	ldrh	r2, [r7, #8]
 8002b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a50      	ldr	r2, [pc, #320]	; (8002c80 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b40:	8979      	ldrh	r1, [r7, #10]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f89c 	bl	8002c84 <I2C_MasterRequestWrite>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e08d      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b6c:	e066      	b.n	8002c3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	6a39      	ldr	r1, [r7, #32]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f9de 	bl	8002f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d107      	bne.n	8002b96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06b      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11b      	bne.n	8002c10 <HAL_I2C_Master_Transmit+0x188>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	6a39      	ldr	r1, [r7, #32]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f9ce 	bl	8002fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d107      	bne.n	8002c38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e01a      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d194      	bne.n	8002b6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e000      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	00100002 	.word	0x00100002
 8002c80:	ffff0000 	.word	0xffff0000

08002c84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	460b      	mov	r3, r1
 8002c92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d006      	beq.n	8002cae <I2C_MasterRequestWrite+0x2a>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d003      	beq.n	8002cae <I2C_MasterRequestWrite+0x2a>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cac:	d108      	bne.n	8002cc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e00b      	b.n	8002cd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	2b12      	cmp	r3, #18
 8002cc6:	d107      	bne.n	8002cd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f84f 	bl	8002d88 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfe:	d103      	bne.n	8002d08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e035      	b.n	8002d78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d14:	d108      	bne.n	8002d28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d24:	611a      	str	r2, [r3, #16]
 8002d26:	e01b      	b.n	8002d60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d28:	897b      	ldrh	r3, [r7, #10]
 8002d2a:	11db      	asrs	r3, r3, #7
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 0306 	and.w	r3, r3, #6
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f063 030f 	orn	r3, r3, #15
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	490e      	ldr	r1, [pc, #56]	; (8002d80 <I2C_MasterRequestWrite+0xfc>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f875 	bl	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e010      	b.n	8002d78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d56:	897b      	ldrh	r3, [r7, #10]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4907      	ldr	r1, [pc, #28]	; (8002d84 <I2C_MasterRequestWrite+0x100>)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f865 	bl	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	00010008 	.word	0x00010008
 8002d84:	00010002 	.word	0x00010002

08002d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d98:	e025      	b.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d021      	beq.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da2:	f7ff fa8d 	bl	80022c0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d302      	bcc.n	8002db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d116      	bne.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e023      	b.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d10d      	bne.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	e00c      	b.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d0b6      	beq.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e44:	e051      	b.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e54:	d123      	bne.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e046      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d021      	beq.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7ff fa0b 	bl	80022c0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d116      	bne.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e020      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10c      	bne.n	8002f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bf14      	ite	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	2300      	moveq	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e00b      	b.n	8002f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	43da      	mvns	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d18d      	bne.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f40:	e02d      	b.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f878 	bl	8003038 <I2C_IsAcknowledgeFailed>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e02d      	b.n	8002fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d021      	beq.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7ff f9b1 	bl	80022c0 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d116      	bne.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f043 0220 	orr.w	r2, r3, #32
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e007      	b.n	8002fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d1ca      	bne.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc2:	e02d      	b.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f837 	bl	8003038 <I2C_IsAcknowledgeFailed>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e02d      	b.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d021      	beq.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fdc:	f7ff f970 	bl	80022c0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e007      	b.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d1ca      	bne.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304e:	d11b      	bne.n	8003088 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003058:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f043 0204 	orr.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e26c      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8087 	beq.w	80031c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b4:	4b92      	ldr	r3, [pc, #584]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d00c      	beq.n	80030da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c0:	4b8f      	ldr	r3, [pc, #572]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d112      	bne.n	80030f2 <HAL_RCC_OscConfig+0x5e>
 80030cc:	4b8c      	ldr	r3, [pc, #560]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d8:	d10b      	bne.n	80030f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030da:	4b89      	ldr	r3, [pc, #548]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d06c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x12c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d168      	bne.n	80031c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e246      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x76>
 80030fc:	4b80      	ldr	r3, [pc, #512]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a7f      	ldr	r2, [pc, #508]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	e02e      	b.n	8003168 <HAL_RCC_OscConfig+0xd4>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x98>
 8003112:	4b7b      	ldr	r3, [pc, #492]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a7a      	ldr	r2, [pc, #488]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b78      	ldr	r3, [pc, #480]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a77      	ldr	r2, [pc, #476]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e01d      	b.n	8003168 <HAL_RCC_OscConfig+0xd4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0xbc>
 8003136:	4b72      	ldr	r3, [pc, #456]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a71      	ldr	r2, [pc, #452]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800313c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0xd4>
 8003150:	4b6b      	ldr	r3, [pc, #428]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a6a      	ldr	r2, [pc, #424]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b68      	ldr	r3, [pc, #416]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a67      	ldr	r2, [pc, #412]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7ff f8a6 	bl	80022c0 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003178:	f7ff f8a2 	bl	80022c0 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1fa      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0xe4>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7ff f892 	bl	80022c0 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7ff f88e 	bl	80022c0 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e1e6      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x10c>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d063      	beq.n	8003296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ce:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031da:	4b49      	ldr	r3, [pc, #292]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d11c      	bne.n	8003220 <HAL_RCC_OscConfig+0x18c>
 80031e6:	4b46      	ldr	r3, [pc, #280]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d116      	bne.n	8003220 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f2:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_RCC_OscConfig+0x176>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e1ba      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4939      	ldr	r1, [pc, #228]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	e03a      	b.n	8003296 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003228:	4b36      	ldr	r3, [pc, #216]	; (8003304 <HAL_RCC_OscConfig+0x270>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7ff f847 	bl	80022c0 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7ff f843 	bl	80022c0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e19b      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4927      	ldr	r1, [pc, #156]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
 8003268:	e015      	b.n	8003296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x270>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7ff f826 	bl	80022c0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7ff f822 	bl	80022c0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e17a      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d03a      	beq.n	8003318 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d019      	beq.n	80032de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b0:	f7ff f806 	bl	80022c0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7ff f802 	bl	80022c0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e15a      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032d6:	2001      	movs	r0, #1
 80032d8:	f000 fafe 	bl	80038d8 <RCC_Delay>
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e4:	f7fe ffec 	bl	80022c0 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ea:	e00f      	b.n	800330c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fe ffe8 	bl	80022c0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d908      	bls.n	800330c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e140      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	42420000 	.word	0x42420000
 8003308:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	4b9e      	ldr	r3, [pc, #632]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e9      	bne.n	80032ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a6 	beq.w	8003472 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332a:	4b97      	ldr	r3, [pc, #604]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10d      	bne.n	8003352 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	4b94      	ldr	r3, [pc, #592]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4a93      	ldr	r2, [pc, #588]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	61d3      	str	r3, [r2, #28]
 8003342:	4b91      	ldr	r3, [pc, #580]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b8e      	ldr	r3, [pc, #568]	; (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d118      	bne.n	8003390 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335e:	4b8b      	ldr	r3, [pc, #556]	; (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a8a      	ldr	r2, [pc, #552]	; (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336a:	f7fe ffa9 	bl	80022c0 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003372:	f7fe ffa5 	bl	80022c0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b64      	cmp	r3, #100	; 0x64
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0fd      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	4b81      	ldr	r3, [pc, #516]	; (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x312>
 8003398:	4b7b      	ldr	r3, [pc, #492]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4a7a      	ldr	r2, [pc, #488]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6213      	str	r3, [r2, #32]
 80033a4:	e02d      	b.n	8003402 <HAL_RCC_OscConfig+0x36e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x334>
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6213      	str	r3, [r2, #32]
 80033ba:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a72      	ldr	r2, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	e01c      	b.n	8003402 <HAL_RCC_OscConfig+0x36e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d10c      	bne.n	80033ea <HAL_RCC_OscConfig+0x356>
 80033d0:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4a6c      	ldr	r2, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6213      	str	r3, [r2, #32]
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a69      	ldr	r2, [pc, #420]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6213      	str	r3, [r2, #32]
 80033e8:	e00b      	b.n	8003402 <HAL_RCC_OscConfig+0x36e>
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4a66      	ldr	r2, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6213      	str	r3, [r2, #32]
 80033f6:	4b64      	ldr	r3, [pc, #400]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a63      	ldr	r2, [pc, #396]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d015      	beq.n	8003436 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340a:	f7fe ff59 	bl	80022c0 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	e00a      	b.n	8003428 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7fe ff55 	bl	80022c0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0ab      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ee      	beq.n	8003412 <HAL_RCC_OscConfig+0x37e>
 8003434:	e014      	b.n	8003460 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7fe ff43 	bl	80022c0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe ff3f 	bl	80022c0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e095      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	4b4c      	ldr	r3, [pc, #304]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ee      	bne.n	800343e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b48      	ldr	r3, [pc, #288]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a47      	ldr	r2, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003470:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8081 	beq.w	800357e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800347c:	4b42      	ldr	r3, [pc, #264]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d061      	beq.n	800354c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d146      	bne.n	800351e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003490:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <HAL_RCC_OscConfig+0x4fc>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fe ff13 	bl	80022c0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe ff0f 	bl	80022c0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e067      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d108      	bne.n	80034d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	492d      	ldr	r1, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a19      	ldr	r1, [r3, #32]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	430b      	orrs	r3, r1
 80034ea:	4927      	ldr	r1, [pc, #156]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_RCC_OscConfig+0x4fc>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fe fee3 	bl	80022c0 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fe fedf 	bl	80022c0 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e037      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x46a>
 800351c:	e02f      	b.n	800357e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <HAL_RCC_OscConfig+0x4fc>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe fecc 	bl	80022c0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352c:	f7fe fec8 	bl	80022c0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e020      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x498>
 800354a:	e018      	b.n	800357e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e013      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	429a      	cmp	r2, r3
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	40007000 	.word	0x40007000
 8003590:	42420060 	.word	0x42420060

08003594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0d0      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
 80035be:	4965      	ldr	r1, [pc, #404]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b8      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f0:	4b59      	ldr	r3, [pc, #356]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a58      	ldr	r2, [pc, #352]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b50      	ldr	r3, [pc, #320]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	494d      	ldr	r1, [pc, #308]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d040      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e073      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4936      	ldr	r1, [pc, #216]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fe fe1c 	bl	80022c0 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fe fe18 	bl	80022c0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e053      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d210      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	4922      	ldr	r1, [pc, #136]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e032      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4916      	ldr	r1, [pc, #88]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490e      	ldr	r1, [pc, #56]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f000 f859 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003726:	4601      	mov	r1, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	5cd3      	ldrb	r3, [r2, r3]
 8003736:	fa21 f303 	lsr.w	r3, r1, r3
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1cc>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fd7a 	bl	800223c <HAL_InitTick>

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
 800375c:	08007f64 	.word	0x08007f64
 8003760:	2000000c 	.word	0x2000000c
 8003764:	20000010 	.word	0x20000010

08003768 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003774:	f107 0318 	add.w	r3, r7, #24
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003786:	2303      	movs	r3, #3
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800378e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003792:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCC_MCOConfig+0x68>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_RCC_MCOConfig+0x68>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6193      	str	r3, [r2, #24]
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_MCOConfig+0x68>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80037ac:	f107 0318 	add.w	r3, r7, #24
 80037b0:	4619      	mov	r1, r3
 80037b2:	4808      	ldr	r0, [pc, #32]	; (80037d4 <HAL_RCC_MCOConfig+0x6c>)
 80037b4:	f7fe febe 	bl	8002534 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_MCOConfig+0x68>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037c0:	4903      	ldr	r1, [pc, #12]	; (80037d0 <HAL_RCC_MCOConfig+0x68>)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
}
 80037c8:	bf00      	nop
 80037ca:	3728      	adds	r7, #40	; 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010800 	.word	0x40010800

080037d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b490      	push	{r4, r7}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037de:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037e0:	1d3c      	adds	r4, r7, #4
 80037e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b04      	cmp	r3, #4
 8003810:	d002      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x40>
 8003812:	2b08      	cmp	r3, #8
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x46>
 8003816:	e02d      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_GetSysClockFreq+0xbc>)
 800381a:	623b      	str	r3, [r7, #32]
      break;
 800381c:	e02d      	b.n	800387a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	0c9b      	lsrs	r3, r3, #18
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800382a:	4413      	add	r3, r2
 800382c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003830:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d013      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	0c5b      	lsrs	r3, r3, #17
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800384a:	4413      	add	r3, r2
 800384c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003850:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003856:	fb02 f203 	mul.w	r2, r2, r3
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	e004      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	623b      	str	r3, [r7, #32]
      break;
 8003872:	e002      	b.n	800387a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003876:	623b      	str	r3, [r7, #32]
      break;
 8003878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387a:	6a3b      	ldr	r3, [r7, #32]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3728      	adds	r7, #40	; 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bc90      	pop	{r4, r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	08007f50 	.word	0x08007f50
 800388c:	08007f60 	.word	0x08007f60
 8003890:	40021000 	.word	0x40021000
 8003894:	007a1200 	.word	0x007a1200
 8003898:	003d0900 	.word	0x003d0900

0800389c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <HAL_RCC_GetHCLKFreq+0x10>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff2 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038b8:	4601      	mov	r1, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4a03      	ldr	r2, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08007f74 	.word	0x08007f74

080038d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <RCC_Delay+0x34>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <RCC_Delay+0x38>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0a5b      	lsrs	r3, r3, #9
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038f4:	bf00      	nop
  }
  while (Delay --);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1e5a      	subs	r2, r3, #1
 80038fa:	60fa      	str	r2, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f9      	bne.n	80038f4 <RCC_Delay+0x1c>
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	2000000c 	.word	0x2000000c
 8003910:	10624dd3 	.word	0x10624dd3

08003914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e041      	b.n	80039aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fe fab0 	bl	8001ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f000 fb36 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d001      	beq.n	80039cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e03a      	b.n	8003a42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <HAL_TIM_Base_Start_IT+0x98>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00e      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0x58>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f6:	d009      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0x58>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <HAL_TIM_Base_Start_IT+0x9c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0x58>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d111      	bne.n	8003a30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b06      	cmp	r3, #6
 8003a1c:	d010      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	e007      	b.n	8003a40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800

08003a58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10f      	bne.n	8003aa0 <HAL_TIM_Base_Stop_IT+0x48>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	f240 4344 	movw	r3, #1092	; 0x444
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_TIM_Base_Stop_IT+0x48>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e041      	b.n	8003b4c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f839 	bl	8003b54 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f000 fa65 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0208 	bic.w	r2, r2, #8
 8003b08:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d122      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d11b      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0202 	mvn.w	r2, #2
 8003b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f9ef 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003bae:	e005      	b.n	8003bbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f9e2 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9f1 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d122      	bne.n	8003c16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d11b      	bne.n	8003c16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f06f 0204 	mvn.w	r2, #4
 8003be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f9c5 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003c02:	e005      	b.n	8003c10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f9b8 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f9c7 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d122      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d11b      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0208 	mvn.w	r2, #8
 8003c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f99b 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003c56:	e005      	b.n	8003c64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f98e 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f99d 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d122      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d11b      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0210 	mvn.w	r2, #16
 8003c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2208      	movs	r2, #8
 8003c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f971 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003caa:	e005      	b.n	8003cb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f964 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f973 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10e      	bne.n	8003cea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0201 	mvn.w	r2, #1
 8003ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f93f 	bl	8003f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b80      	cmp	r3, #128	; 0x80
 8003cf6:	d10e      	bne.n	8003d16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d107      	bne.n	8003d16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb3c 	bl	800438e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d10e      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d107      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f937 	bl	8003fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d10e      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d107      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f06f 0220 	mvn.w	r2, #32
 8003d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb07 	bl	800437c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_TIM_ConfigClockSource+0x18>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e0a6      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x166>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d067      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x120>
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d80b      	bhi.n	8003de2 <HAL_TIM_ConfigClockSource+0x6c>
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d073      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x140>
 8003dce:	2b10      	cmp	r3, #16
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_TIM_ConfigClockSource+0x62>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d06f      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003dd6:	e078      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d06c      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x140>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d06a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003de0:	e073      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003de2:	2b70      	cmp	r3, #112	; 0x70
 8003de4:	d00d      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x8c>
 8003de6:	2b70      	cmp	r3, #112	; 0x70
 8003de8:	d804      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x7e>
 8003dea:	2b50      	cmp	r3, #80	; 0x50
 8003dec:	d033      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xe0>
 8003dee:	2b60      	cmp	r3, #96	; 0x60
 8003df0:	d041      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003df2:	e06a      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df8:	d066      	beq.n	8003ec8 <HAL_TIM_ConfigClockSource+0x152>
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	d017      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e00:	e063      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f000 fa36 	bl	8004282 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	609a      	str	r2, [r3, #8]
      break;
 8003e2e:	e04c      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6899      	ldr	r1, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f000 fa1f 	bl	8004282 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e52:	609a      	str	r2, [r3, #8]
      break;
 8003e54:	e039      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f000 f996 	bl	8004194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2150      	movs	r1, #80	; 0x50
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f9ed 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003e74:	e029      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f000 f9b4 	bl	80041f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2160      	movs	r1, #96	; 0x60
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f9dd 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003e94:	e019      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f000 f976 	bl	8004194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2140      	movs	r1, #64	; 0x40
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f9cd 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003eb4:	e009      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f000 f9c4 	bl	800424e <TIM_ITRx_SetConfig>
        break;
 8003ec6:	e000      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ec8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e031      	b.n	8003f60 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8ba 	bl	8004088 <TIM_SlaveTimer_SetConfig>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e018      	b.n	8003f60 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f4c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr
	...

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a29      	ldr	r2, [pc, #164]	; (800407c <TIM_Base_SetConfig+0xb8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a26      	ldr	r2, [pc, #152]	; (8004080 <TIM_Base_SetConfig+0xbc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a25      	ldr	r2, [pc, #148]	; (8004084 <TIM_Base_SetConfig+0xc0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <TIM_Base_SetConfig+0xb8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00b      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d007      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <TIM_Base_SetConfig+0xbc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a18      	ldr	r2, [pc, #96]	; (8004084 <TIM_Base_SetConfig+0xc0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <TIM_Base_SetConfig+0xb8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	615a      	str	r2, [r3, #20]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800

08004088 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0307 	bic.w	r3, r3, #7
 80040b2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b30      	cmp	r3, #48	; 0x30
 80040cc:	d05c      	beq.n	8004188 <TIM_SlaveTimer_SetConfig+0x100>
 80040ce:	2b30      	cmp	r3, #48	; 0x30
 80040d0:	d806      	bhi.n	80040e0 <TIM_SlaveTimer_SetConfig+0x58>
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d058      	beq.n	8004188 <TIM_SlaveTimer_SetConfig+0x100>
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d056      	beq.n	8004188 <TIM_SlaveTimer_SetConfig+0x100>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d054      	beq.n	8004188 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80040de:	e054      	b.n	800418a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80040e0:	2b50      	cmp	r3, #80	; 0x50
 80040e2:	d03d      	beq.n	8004160 <TIM_SlaveTimer_SetConfig+0xd8>
 80040e4:	2b50      	cmp	r3, #80	; 0x50
 80040e6:	d802      	bhi.n	80040ee <TIM_SlaveTimer_SetConfig+0x66>
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d010      	beq.n	800410e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80040ec:	e04d      	b.n	800418a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80040ee:	2b60      	cmp	r3, #96	; 0x60
 80040f0:	d040      	beq.n	8004174 <TIM_SlaveTimer_SetConfig+0xec>
 80040f2:	2b70      	cmp	r3, #112	; 0x70
 80040f4:	d000      	beq.n	80040f8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80040f6:	e048      	b.n	800418a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68d9      	ldr	r1, [r3, #12]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f000 f8bb 	bl	8004282 <TIM_ETR_SetConfig>
      break;
 800410c:	e03d      	b.n	800418a <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b05      	cmp	r3, #5
 8004114:	d101      	bne.n	800411a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e038      	b.n	800418c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a1a      	ldr	r2, [r3, #32]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004140:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	621a      	str	r2, [r3, #32]
      break;
 800415e:	e014      	b.n	800418a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	461a      	mov	r2, r3
 800416e:	f000 f811 	bl	8004194 <TIM_TI1_ConfigInputStage>
      break;
 8004172:	e00a      	b.n	800418a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6899      	ldr	r1, [r3, #8]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	461a      	mov	r2, r3
 8004182:	f000 f835 	bl	80041f0 <TIM_TI2_ConfigInputStage>
      break;
 8004186:	e000      	b.n	800418a <TIM_SlaveTimer_SetConfig+0x102>
        break;
 8004188:	bf00      	nop
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 030a 	bic.w	r3, r3, #10
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f023 0210 	bic.w	r2, r3, #16
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	031b      	lsls	r3, r3, #12
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	f043 0307 	orr.w	r3, r3, #7
 8004270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004282:	b480      	push	{r7}
 8004284:	b087      	sub	sp, #28
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	021a      	lsls	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	609a      	str	r2, [r3, #8]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e046      	b.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a16      	ldr	r2, [pc, #88]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00e      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d009      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a10      	ldr	r2, [pc, #64]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10c      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	4313      	orrs	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800

0800437c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <__errno>:
 80043a0:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <__errno+0x8>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000018 	.word	0x20000018

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	2500      	movs	r5, #0
 80043b0:	4e0c      	ldr	r6, [pc, #48]	; (80043e4 <__libc_init_array+0x38>)
 80043b2:	4c0d      	ldr	r4, [pc, #52]	; (80043e8 <__libc_init_array+0x3c>)
 80043b4:	1ba4      	subs	r4, r4, r6
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	42a5      	cmp	r5, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	f003 fd5e 	bl	8007e7c <_init>
 80043c0:	2500      	movs	r5, #0
 80043c2:	4e0a      	ldr	r6, [pc, #40]	; (80043ec <__libc_init_array+0x40>)
 80043c4:	4c0a      	ldr	r4, [pc, #40]	; (80043f0 <__libc_init_array+0x44>)
 80043c6:	1ba4      	subs	r4, r4, r6
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	42a5      	cmp	r5, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043d4:	4798      	blx	r3
 80043d6:	3501      	adds	r5, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043de:	4798      	blx	r3
 80043e0:	3501      	adds	r5, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08008230 	.word	0x08008230
 80043e8:	08008230 	.word	0x08008230
 80043ec:	08008230 	.word	0x08008230
 80043f0:	08008234 	.word	0x08008234

080043f4 <memset>:
 80043f4:	4603      	mov	r3, r0
 80043f6:	4402      	add	r2, r0
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d100      	bne.n	80043fe <memset+0xa>
 80043fc:	4770      	bx	lr
 80043fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004402:	e7f9      	b.n	80043f8 <memset+0x4>

08004404 <__cvt>:
 8004404:	2b00      	cmp	r3, #0
 8004406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440a:	461e      	mov	r6, r3
 800440c:	bfbb      	ittet	lt
 800440e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004412:	461e      	movlt	r6, r3
 8004414:	2300      	movge	r3, #0
 8004416:	232d      	movlt	r3, #45	; 0x2d
 8004418:	b088      	sub	sp, #32
 800441a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800441c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004420:	f027 0720 	bic.w	r7, r7, #32
 8004424:	2f46      	cmp	r7, #70	; 0x46
 8004426:	4614      	mov	r4, r2
 8004428:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800442a:	700b      	strb	r3, [r1, #0]
 800442c:	d004      	beq.n	8004438 <__cvt+0x34>
 800442e:	2f45      	cmp	r7, #69	; 0x45
 8004430:	d100      	bne.n	8004434 <__cvt+0x30>
 8004432:	3501      	adds	r5, #1
 8004434:	2302      	movs	r3, #2
 8004436:	e000      	b.n	800443a <__cvt+0x36>
 8004438:	2303      	movs	r3, #3
 800443a:	aa07      	add	r2, sp, #28
 800443c:	9204      	str	r2, [sp, #16]
 800443e:	aa06      	add	r2, sp, #24
 8004440:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004444:	e9cd 3500 	strd	r3, r5, [sp]
 8004448:	4622      	mov	r2, r4
 800444a:	4633      	mov	r3, r6
 800444c:	f001 fd7c 	bl	8005f48 <_dtoa_r>
 8004450:	2f47      	cmp	r7, #71	; 0x47
 8004452:	4680      	mov	r8, r0
 8004454:	d102      	bne.n	800445c <__cvt+0x58>
 8004456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004458:	07db      	lsls	r3, r3, #31
 800445a:	d526      	bpl.n	80044aa <__cvt+0xa6>
 800445c:	2f46      	cmp	r7, #70	; 0x46
 800445e:	eb08 0905 	add.w	r9, r8, r5
 8004462:	d111      	bne.n	8004488 <__cvt+0x84>
 8004464:	f898 3000 	ldrb.w	r3, [r8]
 8004468:	2b30      	cmp	r3, #48	; 0x30
 800446a:	d10a      	bne.n	8004482 <__cvt+0x7e>
 800446c:	2200      	movs	r2, #0
 800446e:	2300      	movs	r3, #0
 8004470:	4620      	mov	r0, r4
 8004472:	4631      	mov	r1, r6
 8004474:	f7fc fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8004478:	b918      	cbnz	r0, 8004482 <__cvt+0x7e>
 800447a:	f1c5 0501 	rsb	r5, r5, #1
 800447e:	f8ca 5000 	str.w	r5, [sl]
 8004482:	f8da 3000 	ldr.w	r3, [sl]
 8004486:	4499      	add	r9, r3
 8004488:	2200      	movs	r2, #0
 800448a:	2300      	movs	r3, #0
 800448c:	4620      	mov	r0, r4
 800448e:	4631      	mov	r1, r6
 8004490:	f7fc fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8004494:	b938      	cbnz	r0, 80044a6 <__cvt+0xa2>
 8004496:	2230      	movs	r2, #48	; 0x30
 8004498:	9b07      	ldr	r3, [sp, #28]
 800449a:	454b      	cmp	r3, r9
 800449c:	d205      	bcs.n	80044aa <__cvt+0xa6>
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	9107      	str	r1, [sp, #28]
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e7f8      	b.n	8004498 <__cvt+0x94>
 80044a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80044aa:	4640      	mov	r0, r8
 80044ac:	9b07      	ldr	r3, [sp, #28]
 80044ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80044b0:	eba3 0308 	sub.w	r3, r3, r8
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	b008      	add	sp, #32
 80044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080044bc <__exponent>:
 80044bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044be:	2900      	cmp	r1, #0
 80044c0:	bfb4      	ite	lt
 80044c2:	232d      	movlt	r3, #45	; 0x2d
 80044c4:	232b      	movge	r3, #43	; 0x2b
 80044c6:	4604      	mov	r4, r0
 80044c8:	bfb8      	it	lt
 80044ca:	4249      	neglt	r1, r1
 80044cc:	2909      	cmp	r1, #9
 80044ce:	f804 2b02 	strb.w	r2, [r4], #2
 80044d2:	7043      	strb	r3, [r0, #1]
 80044d4:	dd21      	ble.n	800451a <__exponent+0x5e>
 80044d6:	f10d 0307 	add.w	r3, sp, #7
 80044da:	461f      	mov	r7, r3
 80044dc:	260a      	movs	r6, #10
 80044de:	fb91 f5f6 	sdiv	r5, r1, r6
 80044e2:	fb06 1115 	mls	r1, r6, r5, r1
 80044e6:	2d09      	cmp	r5, #9
 80044e8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80044ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80044f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80044f4:	4629      	mov	r1, r5
 80044f6:	dc09      	bgt.n	800450c <__exponent+0x50>
 80044f8:	3130      	adds	r1, #48	; 0x30
 80044fa:	3b02      	subs	r3, #2
 80044fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004500:	42bb      	cmp	r3, r7
 8004502:	4622      	mov	r2, r4
 8004504:	d304      	bcc.n	8004510 <__exponent+0x54>
 8004506:	1a10      	subs	r0, r2, r0
 8004508:	b003      	add	sp, #12
 800450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450c:	4613      	mov	r3, r2
 800450e:	e7e6      	b.n	80044de <__exponent+0x22>
 8004510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004514:	f804 2b01 	strb.w	r2, [r4], #1
 8004518:	e7f2      	b.n	8004500 <__exponent+0x44>
 800451a:	2330      	movs	r3, #48	; 0x30
 800451c:	4419      	add	r1, r3
 800451e:	7083      	strb	r3, [r0, #2]
 8004520:	1d02      	adds	r2, r0, #4
 8004522:	70c1      	strb	r1, [r0, #3]
 8004524:	e7ef      	b.n	8004506 <__exponent+0x4a>
	...

08004528 <_printf_float>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	b091      	sub	sp, #68	; 0x44
 800452e:	460c      	mov	r4, r1
 8004530:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004532:	4693      	mov	fp, r2
 8004534:	461e      	mov	r6, r3
 8004536:	4605      	mov	r5, r0
 8004538:	f002 fde8 	bl	800710c <_localeconv_r>
 800453c:	6803      	ldr	r3, [r0, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	9309      	str	r3, [sp, #36]	; 0x24
 8004542:	f7fb fe05 	bl	8000150 <strlen>
 8004546:	2300      	movs	r3, #0
 8004548:	930e      	str	r3, [sp, #56]	; 0x38
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	900a      	str	r0, [sp, #40]	; 0x28
 800454e:	3307      	adds	r3, #7
 8004550:	f023 0307 	bic.w	r3, r3, #7
 8004554:	f103 0208 	add.w	r2, r3, #8
 8004558:	f894 8018 	ldrb.w	r8, [r4, #24]
 800455c:	f8d4 a000 	ldr.w	sl, [r4]
 8004560:	603a      	str	r2, [r7, #0]
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800456a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800456e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004572:	930b      	str	r3, [sp, #44]	; 0x2c
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	4ba6      	ldr	r3, [pc, #664]	; (8004814 <_printf_float+0x2ec>)
 800457a:	4638      	mov	r0, r7
 800457c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800457e:	f7fc fa45 	bl	8000a0c <__aeabi_dcmpun>
 8004582:	bb68      	cbnz	r0, 80045e0 <_printf_float+0xb8>
 8004584:	f04f 32ff 	mov.w	r2, #4294967295
 8004588:	4ba2      	ldr	r3, [pc, #648]	; (8004814 <_printf_float+0x2ec>)
 800458a:	4638      	mov	r0, r7
 800458c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800458e:	f7fc fa1f 	bl	80009d0 <__aeabi_dcmple>
 8004592:	bb28      	cbnz	r0, 80045e0 <_printf_float+0xb8>
 8004594:	2200      	movs	r2, #0
 8004596:	2300      	movs	r3, #0
 8004598:	4638      	mov	r0, r7
 800459a:	4649      	mov	r1, r9
 800459c:	f7fc fa0e 	bl	80009bc <__aeabi_dcmplt>
 80045a0:	b110      	cbz	r0, 80045a8 <_printf_float+0x80>
 80045a2:	232d      	movs	r3, #45	; 0x2d
 80045a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a8:	4f9b      	ldr	r7, [pc, #620]	; (8004818 <_printf_float+0x2f0>)
 80045aa:	4b9c      	ldr	r3, [pc, #624]	; (800481c <_printf_float+0x2f4>)
 80045ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045b0:	bf98      	it	ls
 80045b2:	461f      	movls	r7, r3
 80045b4:	2303      	movs	r3, #3
 80045b6:	f04f 0900 	mov.w	r9, #0
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	f02a 0304 	bic.w	r3, sl, #4
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	9600      	str	r6, [sp, #0]
 80045c4:	465b      	mov	r3, fp
 80045c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80045c8:	4621      	mov	r1, r4
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 f9e2 	bl	8004994 <_printf_common>
 80045d0:	3001      	adds	r0, #1
 80045d2:	f040 8090 	bne.w	80046f6 <_printf_float+0x1ce>
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295
 80045da:	b011      	add	sp, #68	; 0x44
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e0:	463a      	mov	r2, r7
 80045e2:	464b      	mov	r3, r9
 80045e4:	4638      	mov	r0, r7
 80045e6:	4649      	mov	r1, r9
 80045e8:	f7fc fa10 	bl	8000a0c <__aeabi_dcmpun>
 80045ec:	b110      	cbz	r0, 80045f4 <_printf_float+0xcc>
 80045ee:	4f8c      	ldr	r7, [pc, #560]	; (8004820 <_printf_float+0x2f8>)
 80045f0:	4b8c      	ldr	r3, [pc, #560]	; (8004824 <_printf_float+0x2fc>)
 80045f2:	e7db      	b.n	80045ac <_printf_float+0x84>
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	a80d      	add	r0, sp, #52	; 0x34
 80045fe:	a90e      	add	r1, sp, #56	; 0x38
 8004600:	d140      	bne.n	8004684 <_printf_float+0x15c>
 8004602:	2306      	movs	r3, #6
 8004604:	6063      	str	r3, [r4, #4]
 8004606:	f04f 0c00 	mov.w	ip, #0
 800460a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800460e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	463a      	mov	r2, r7
 800461e:	464b      	mov	r3, r9
 8004620:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004624:	4628      	mov	r0, r5
 8004626:	f7ff feed 	bl	8004404 <__cvt>
 800462a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800462e:	2b47      	cmp	r3, #71	; 0x47
 8004630:	4607      	mov	r7, r0
 8004632:	d109      	bne.n	8004648 <_printf_float+0x120>
 8004634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004636:	1cd8      	adds	r0, r3, #3
 8004638:	db02      	blt.n	8004640 <_printf_float+0x118>
 800463a:	6862      	ldr	r2, [r4, #4]
 800463c:	4293      	cmp	r3, r2
 800463e:	dd47      	ble.n	80046d0 <_printf_float+0x1a8>
 8004640:	f1a8 0802 	sub.w	r8, r8, #2
 8004644:	fa5f f888 	uxtb.w	r8, r8
 8004648:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800464c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800464e:	d824      	bhi.n	800469a <_printf_float+0x172>
 8004650:	3901      	subs	r1, #1
 8004652:	4642      	mov	r2, r8
 8004654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004658:	910d      	str	r1, [sp, #52]	; 0x34
 800465a:	f7ff ff2f 	bl	80044bc <__exponent>
 800465e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004660:	4681      	mov	r9, r0
 8004662:	1813      	adds	r3, r2, r0
 8004664:	2a01      	cmp	r2, #1
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	dc02      	bgt.n	8004670 <_printf_float+0x148>
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	07d1      	lsls	r1, r2, #31
 800466e:	d501      	bpl.n	8004674 <_printf_float+0x14c>
 8004670:	3301      	adds	r3, #1
 8004672:	6123      	str	r3, [r4, #16]
 8004674:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0a2      	beq.n	80045c2 <_printf_float+0x9a>
 800467c:	232d      	movs	r3, #45	; 0x2d
 800467e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004682:	e79e      	b.n	80045c2 <_printf_float+0x9a>
 8004684:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004688:	f000 816e 	beq.w	8004968 <_printf_float+0x440>
 800468c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004690:	d1b9      	bne.n	8004606 <_printf_float+0xde>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1b7      	bne.n	8004606 <_printf_float+0xde>
 8004696:	2301      	movs	r3, #1
 8004698:	e7b4      	b.n	8004604 <_printf_float+0xdc>
 800469a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800469e:	d119      	bne.n	80046d4 <_printf_float+0x1ac>
 80046a0:	2900      	cmp	r1, #0
 80046a2:	6863      	ldr	r3, [r4, #4]
 80046a4:	dd0c      	ble.n	80046c0 <_printf_float+0x198>
 80046a6:	6121      	str	r1, [r4, #16]
 80046a8:	b913      	cbnz	r3, 80046b0 <_printf_float+0x188>
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	07d2      	lsls	r2, r2, #31
 80046ae:	d502      	bpl.n	80046b6 <_printf_float+0x18e>
 80046b0:	3301      	adds	r3, #1
 80046b2:	440b      	add	r3, r1
 80046b4:	6123      	str	r3, [r4, #16]
 80046b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046b8:	f04f 0900 	mov.w	r9, #0
 80046bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80046be:	e7d9      	b.n	8004674 <_printf_float+0x14c>
 80046c0:	b913      	cbnz	r3, 80046c8 <_printf_float+0x1a0>
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	07d0      	lsls	r0, r2, #31
 80046c6:	d501      	bpl.n	80046cc <_printf_float+0x1a4>
 80046c8:	3302      	adds	r3, #2
 80046ca:	e7f3      	b.n	80046b4 <_printf_float+0x18c>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e7f1      	b.n	80046b4 <_printf_float+0x18c>
 80046d0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80046d4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80046d8:	4293      	cmp	r3, r2
 80046da:	db05      	blt.n	80046e8 <_printf_float+0x1c0>
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	6123      	str	r3, [r4, #16]
 80046e0:	07d1      	lsls	r1, r2, #31
 80046e2:	d5e8      	bpl.n	80046b6 <_printf_float+0x18e>
 80046e4:	3301      	adds	r3, #1
 80046e6:	e7e5      	b.n	80046b4 <_printf_float+0x18c>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bfcc      	ite	gt
 80046ec:	2301      	movgt	r3, #1
 80046ee:	f1c3 0302 	rsble	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	e7de      	b.n	80046b4 <_printf_float+0x18c>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	055a      	lsls	r2, r3, #21
 80046fa:	d407      	bmi.n	800470c <_printf_float+0x1e4>
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	463a      	mov	r2, r7
 8004700:	4659      	mov	r1, fp
 8004702:	4628      	mov	r0, r5
 8004704:	47b0      	blx	r6
 8004706:	3001      	adds	r0, #1
 8004708:	d129      	bne.n	800475e <_printf_float+0x236>
 800470a:	e764      	b.n	80045d6 <_printf_float+0xae>
 800470c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004710:	f240 80d7 	bls.w	80048c2 <_printf_float+0x39a>
 8004714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004718:	2200      	movs	r2, #0
 800471a:	2300      	movs	r3, #0
 800471c:	f7fc f944 	bl	80009a8 <__aeabi_dcmpeq>
 8004720:	b388      	cbz	r0, 8004786 <_printf_float+0x25e>
 8004722:	2301      	movs	r3, #1
 8004724:	4a40      	ldr	r2, [pc, #256]	; (8004828 <_printf_float+0x300>)
 8004726:	4659      	mov	r1, fp
 8004728:	4628      	mov	r0, r5
 800472a:	47b0      	blx	r6
 800472c:	3001      	adds	r0, #1
 800472e:	f43f af52 	beq.w	80045d6 <_printf_float+0xae>
 8004732:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004736:	429a      	cmp	r2, r3
 8004738:	db02      	blt.n	8004740 <_printf_float+0x218>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	07d8      	lsls	r0, r3, #31
 800473e:	d50e      	bpl.n	800475e <_printf_float+0x236>
 8004740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004744:	4659      	mov	r1, fp
 8004746:	4628      	mov	r0, r5
 8004748:	47b0      	blx	r6
 800474a:	3001      	adds	r0, #1
 800474c:	f43f af43 	beq.w	80045d6 <_printf_float+0xae>
 8004750:	2700      	movs	r7, #0
 8004752:	f104 081a 	add.w	r8, r4, #26
 8004756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004758:	3b01      	subs	r3, #1
 800475a:	42bb      	cmp	r3, r7
 800475c:	dc09      	bgt.n	8004772 <_printf_float+0x24a>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	079f      	lsls	r7, r3, #30
 8004762:	f100 80fd 	bmi.w	8004960 <_printf_float+0x438>
 8004766:	68e0      	ldr	r0, [r4, #12]
 8004768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800476a:	4298      	cmp	r0, r3
 800476c:	bfb8      	it	lt
 800476e:	4618      	movlt	r0, r3
 8004770:	e733      	b.n	80045da <_printf_float+0xb2>
 8004772:	2301      	movs	r3, #1
 8004774:	4642      	mov	r2, r8
 8004776:	4659      	mov	r1, fp
 8004778:	4628      	mov	r0, r5
 800477a:	47b0      	blx	r6
 800477c:	3001      	adds	r0, #1
 800477e:	f43f af2a 	beq.w	80045d6 <_printf_float+0xae>
 8004782:	3701      	adds	r7, #1
 8004784:	e7e7      	b.n	8004756 <_printf_float+0x22e>
 8004786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004788:	2b00      	cmp	r3, #0
 800478a:	dc2b      	bgt.n	80047e4 <_printf_float+0x2bc>
 800478c:	2301      	movs	r3, #1
 800478e:	4a26      	ldr	r2, [pc, #152]	; (8004828 <_printf_float+0x300>)
 8004790:	4659      	mov	r1, fp
 8004792:	4628      	mov	r0, r5
 8004794:	47b0      	blx	r6
 8004796:	3001      	adds	r0, #1
 8004798:	f43f af1d 	beq.w	80045d6 <_printf_float+0xae>
 800479c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800479e:	b923      	cbnz	r3, 80047aa <_printf_float+0x282>
 80047a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047a2:	b913      	cbnz	r3, 80047aa <_printf_float+0x282>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	07d9      	lsls	r1, r3, #31
 80047a8:	d5d9      	bpl.n	800475e <_printf_float+0x236>
 80047aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ae:	4659      	mov	r1, fp
 80047b0:	4628      	mov	r0, r5
 80047b2:	47b0      	blx	r6
 80047b4:	3001      	adds	r0, #1
 80047b6:	f43f af0e 	beq.w	80045d6 <_printf_float+0xae>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	f104 091a 	add.w	r9, r4, #26
 80047c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047c4:	425b      	negs	r3, r3
 80047c6:	4543      	cmp	r3, r8
 80047c8:	dc01      	bgt.n	80047ce <_printf_float+0x2a6>
 80047ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047cc:	e797      	b.n	80046fe <_printf_float+0x1d6>
 80047ce:	2301      	movs	r3, #1
 80047d0:	464a      	mov	r2, r9
 80047d2:	4659      	mov	r1, fp
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b0      	blx	r6
 80047d8:	3001      	adds	r0, #1
 80047da:	f43f aefc 	beq.w	80045d6 <_printf_float+0xae>
 80047de:	f108 0801 	add.w	r8, r8, #1
 80047e2:	e7ee      	b.n	80047c2 <_printf_float+0x29a>
 80047e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bfa8      	it	ge
 80047ec:	461a      	movge	r2, r3
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	4690      	mov	r8, r2
 80047f2:	dd07      	ble.n	8004804 <_printf_float+0x2dc>
 80047f4:	4613      	mov	r3, r2
 80047f6:	4659      	mov	r1, fp
 80047f8:	463a      	mov	r2, r7
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b0      	blx	r6
 80047fe:	3001      	adds	r0, #1
 8004800:	f43f aee9 	beq.w	80045d6 <_printf_float+0xae>
 8004804:	f104 031a 	add.w	r3, r4, #26
 8004808:	f04f 0a00 	mov.w	sl, #0
 800480c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004810:	930b      	str	r3, [sp, #44]	; 0x2c
 8004812:	e015      	b.n	8004840 <_printf_float+0x318>
 8004814:	7fefffff 	.word	0x7fefffff
 8004818:	08007f80 	.word	0x08007f80
 800481c:	08007f7c 	.word	0x08007f7c
 8004820:	08007f88 	.word	0x08007f88
 8004824:	08007f84 	.word	0x08007f84
 8004828:	08007f8c 	.word	0x08007f8c
 800482c:	2301      	movs	r3, #1
 800482e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004830:	4659      	mov	r1, fp
 8004832:	4628      	mov	r0, r5
 8004834:	47b0      	blx	r6
 8004836:	3001      	adds	r0, #1
 8004838:	f43f aecd 	beq.w	80045d6 <_printf_float+0xae>
 800483c:	f10a 0a01 	add.w	sl, sl, #1
 8004840:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004844:	eba9 0308 	sub.w	r3, r9, r8
 8004848:	4553      	cmp	r3, sl
 800484a:	dcef      	bgt.n	800482c <_printf_float+0x304>
 800484c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004850:	429a      	cmp	r2, r3
 8004852:	444f      	add	r7, r9
 8004854:	db14      	blt.n	8004880 <_printf_float+0x358>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	07da      	lsls	r2, r3, #31
 800485a:	d411      	bmi.n	8004880 <_printf_float+0x358>
 800485c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800485e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004860:	eba3 0209 	sub.w	r2, r3, r9
 8004864:	eba3 0901 	sub.w	r9, r3, r1
 8004868:	4591      	cmp	r9, r2
 800486a:	bfa8      	it	ge
 800486c:	4691      	movge	r9, r2
 800486e:	f1b9 0f00 	cmp.w	r9, #0
 8004872:	dc0d      	bgt.n	8004890 <_printf_float+0x368>
 8004874:	2700      	movs	r7, #0
 8004876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800487a:	f104 081a 	add.w	r8, r4, #26
 800487e:	e018      	b.n	80048b2 <_printf_float+0x38a>
 8004880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004884:	4659      	mov	r1, fp
 8004886:	4628      	mov	r0, r5
 8004888:	47b0      	blx	r6
 800488a:	3001      	adds	r0, #1
 800488c:	d1e6      	bne.n	800485c <_printf_float+0x334>
 800488e:	e6a2      	b.n	80045d6 <_printf_float+0xae>
 8004890:	464b      	mov	r3, r9
 8004892:	463a      	mov	r2, r7
 8004894:	4659      	mov	r1, fp
 8004896:	4628      	mov	r0, r5
 8004898:	47b0      	blx	r6
 800489a:	3001      	adds	r0, #1
 800489c:	d1ea      	bne.n	8004874 <_printf_float+0x34c>
 800489e:	e69a      	b.n	80045d6 <_printf_float+0xae>
 80048a0:	2301      	movs	r3, #1
 80048a2:	4642      	mov	r2, r8
 80048a4:	4659      	mov	r1, fp
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b0      	blx	r6
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f ae93 	beq.w	80045d6 <_printf_float+0xae>
 80048b0:	3701      	adds	r7, #1
 80048b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	eba3 0309 	sub.w	r3, r3, r9
 80048bc:	42bb      	cmp	r3, r7
 80048be:	dcef      	bgt.n	80048a0 <_printf_float+0x378>
 80048c0:	e74d      	b.n	800475e <_printf_float+0x236>
 80048c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048c4:	2a01      	cmp	r2, #1
 80048c6:	dc01      	bgt.n	80048cc <_printf_float+0x3a4>
 80048c8:	07db      	lsls	r3, r3, #31
 80048ca:	d538      	bpl.n	800493e <_printf_float+0x416>
 80048cc:	2301      	movs	r3, #1
 80048ce:	463a      	mov	r2, r7
 80048d0:	4659      	mov	r1, fp
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b0      	blx	r6
 80048d6:	3001      	adds	r0, #1
 80048d8:	f43f ae7d 	beq.w	80045d6 <_printf_float+0xae>
 80048dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e0:	4659      	mov	r1, fp
 80048e2:	4628      	mov	r0, r5
 80048e4:	47b0      	blx	r6
 80048e6:	3001      	adds	r0, #1
 80048e8:	f107 0701 	add.w	r7, r7, #1
 80048ec:	f43f ae73 	beq.w	80045d6 <_printf_float+0xae>
 80048f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f6:	2200      	movs	r2, #0
 80048f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80048fc:	2300      	movs	r3, #0
 80048fe:	f7fc f853 	bl	80009a8 <__aeabi_dcmpeq>
 8004902:	b9c0      	cbnz	r0, 8004936 <_printf_float+0x40e>
 8004904:	4643      	mov	r3, r8
 8004906:	463a      	mov	r2, r7
 8004908:	4659      	mov	r1, fp
 800490a:	4628      	mov	r0, r5
 800490c:	47b0      	blx	r6
 800490e:	3001      	adds	r0, #1
 8004910:	d10d      	bne.n	800492e <_printf_float+0x406>
 8004912:	e660      	b.n	80045d6 <_printf_float+0xae>
 8004914:	2301      	movs	r3, #1
 8004916:	4642      	mov	r2, r8
 8004918:	4659      	mov	r1, fp
 800491a:	4628      	mov	r0, r5
 800491c:	47b0      	blx	r6
 800491e:	3001      	adds	r0, #1
 8004920:	f43f ae59 	beq.w	80045d6 <_printf_float+0xae>
 8004924:	3701      	adds	r7, #1
 8004926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004928:	3b01      	subs	r3, #1
 800492a:	42bb      	cmp	r3, r7
 800492c:	dcf2      	bgt.n	8004914 <_printf_float+0x3ec>
 800492e:	464b      	mov	r3, r9
 8004930:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004934:	e6e4      	b.n	8004700 <_printf_float+0x1d8>
 8004936:	2700      	movs	r7, #0
 8004938:	f104 081a 	add.w	r8, r4, #26
 800493c:	e7f3      	b.n	8004926 <_printf_float+0x3fe>
 800493e:	2301      	movs	r3, #1
 8004940:	e7e1      	b.n	8004906 <_printf_float+0x3de>
 8004942:	2301      	movs	r3, #1
 8004944:	4642      	mov	r2, r8
 8004946:	4659      	mov	r1, fp
 8004948:	4628      	mov	r0, r5
 800494a:	47b0      	blx	r6
 800494c:	3001      	adds	r0, #1
 800494e:	f43f ae42 	beq.w	80045d6 <_printf_float+0xae>
 8004952:	3701      	adds	r7, #1
 8004954:	68e3      	ldr	r3, [r4, #12]
 8004956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	42bb      	cmp	r3, r7
 800495c:	dcf1      	bgt.n	8004942 <_printf_float+0x41a>
 800495e:	e702      	b.n	8004766 <_printf_float+0x23e>
 8004960:	2700      	movs	r7, #0
 8004962:	f104 0819 	add.w	r8, r4, #25
 8004966:	e7f5      	b.n	8004954 <_printf_float+0x42c>
 8004968:	2b00      	cmp	r3, #0
 800496a:	f43f ae94 	beq.w	8004696 <_printf_float+0x16e>
 800496e:	f04f 0c00 	mov.w	ip, #0
 8004972:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004976:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800497a:	6022      	str	r2, [r4, #0]
 800497c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004980:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	463a      	mov	r2, r7
 8004988:	464b      	mov	r3, r9
 800498a:	4628      	mov	r0, r5
 800498c:	f7ff fd3a 	bl	8004404 <__cvt>
 8004990:	4607      	mov	r7, r0
 8004992:	e64f      	b.n	8004634 <_printf_float+0x10c>

08004994 <_printf_common>:
 8004994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	4691      	mov	r9, r2
 800499a:	461f      	mov	r7, r3
 800499c:	688a      	ldr	r2, [r1, #8]
 800499e:	690b      	ldr	r3, [r1, #16]
 80049a0:	4606      	mov	r6, r0
 80049a2:	4293      	cmp	r3, r2
 80049a4:	bfb8      	it	lt
 80049a6:	4613      	movlt	r3, r2
 80049a8:	f8c9 3000 	str.w	r3, [r9]
 80049ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049b0:	460c      	mov	r4, r1
 80049b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049b6:	b112      	cbz	r2, 80049be <_printf_common+0x2a>
 80049b8:	3301      	adds	r3, #1
 80049ba:	f8c9 3000 	str.w	r3, [r9]
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	0699      	lsls	r1, r3, #26
 80049c2:	bf42      	ittt	mi
 80049c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049c8:	3302      	addmi	r3, #2
 80049ca:	f8c9 3000 	strmi.w	r3, [r9]
 80049ce:	6825      	ldr	r5, [r4, #0]
 80049d0:	f015 0506 	ands.w	r5, r5, #6
 80049d4:	d107      	bne.n	80049e6 <_printf_common+0x52>
 80049d6:	f104 0a19 	add.w	sl, r4, #25
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	f8d9 2000 	ldr.w	r2, [r9]
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	42ab      	cmp	r3, r5
 80049e4:	dc29      	bgt.n	8004a3a <_printf_common+0xa6>
 80049e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049ea:	6822      	ldr	r2, [r4, #0]
 80049ec:	3300      	adds	r3, #0
 80049ee:	bf18      	it	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	0692      	lsls	r2, r2, #26
 80049f4:	d42e      	bmi.n	8004a54 <_printf_common+0xc0>
 80049f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049fa:	4639      	mov	r1, r7
 80049fc:	4630      	mov	r0, r6
 80049fe:	47c0      	blx	r8
 8004a00:	3001      	adds	r0, #1
 8004a02:	d021      	beq.n	8004a48 <_printf_common+0xb4>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	68e5      	ldr	r5, [r4, #12]
 8004a08:	f003 0306 	and.w	r3, r3, #6
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	bf18      	it	ne
 8004a10:	2500      	movne	r5, #0
 8004a12:	f8d9 2000 	ldr.w	r2, [r9]
 8004a16:	f04f 0900 	mov.w	r9, #0
 8004a1a:	bf08      	it	eq
 8004a1c:	1aad      	subeq	r5, r5, r2
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	6922      	ldr	r2, [r4, #16]
 8004a22:	bf08      	it	eq
 8004a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bfc4      	itt	gt
 8004a2c:	1a9b      	subgt	r3, r3, r2
 8004a2e:	18ed      	addgt	r5, r5, r3
 8004a30:	341a      	adds	r4, #26
 8004a32:	454d      	cmp	r5, r9
 8004a34:	d11a      	bne.n	8004a6c <_printf_common+0xd8>
 8004a36:	2000      	movs	r0, #0
 8004a38:	e008      	b.n	8004a4c <_printf_common+0xb8>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4652      	mov	r2, sl
 8004a3e:	4639      	mov	r1, r7
 8004a40:	4630      	mov	r0, r6
 8004a42:	47c0      	blx	r8
 8004a44:	3001      	adds	r0, #1
 8004a46:	d103      	bne.n	8004a50 <_printf_common+0xbc>
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a50:	3501      	adds	r5, #1
 8004a52:	e7c2      	b.n	80049da <_printf_common+0x46>
 8004a54:	2030      	movs	r0, #48	; 0x30
 8004a56:	18e1      	adds	r1, r4, r3
 8004a58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a62:	4422      	add	r2, r4
 8004a64:	3302      	adds	r3, #2
 8004a66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a6a:	e7c4      	b.n	80049f6 <_printf_common+0x62>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4622      	mov	r2, r4
 8004a70:	4639      	mov	r1, r7
 8004a72:	4630      	mov	r0, r6
 8004a74:	47c0      	blx	r8
 8004a76:	3001      	adds	r0, #1
 8004a78:	d0e6      	beq.n	8004a48 <_printf_common+0xb4>
 8004a7a:	f109 0901 	add.w	r9, r9, #1
 8004a7e:	e7d8      	b.n	8004a32 <_printf_common+0x9e>

08004a80 <_printf_i>:
 8004a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a88:	460c      	mov	r4, r1
 8004a8a:	7e09      	ldrb	r1, [r1, #24]
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	296e      	cmp	r1, #110	; 0x6e
 8004a90:	4617      	mov	r7, r2
 8004a92:	4606      	mov	r6, r0
 8004a94:	4698      	mov	r8, r3
 8004a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a98:	f000 80b3 	beq.w	8004c02 <_printf_i+0x182>
 8004a9c:	d822      	bhi.n	8004ae4 <_printf_i+0x64>
 8004a9e:	2963      	cmp	r1, #99	; 0x63
 8004aa0:	d036      	beq.n	8004b10 <_printf_i+0x90>
 8004aa2:	d80a      	bhi.n	8004aba <_printf_i+0x3a>
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	f000 80b9 	beq.w	8004c1c <_printf_i+0x19c>
 8004aaa:	2958      	cmp	r1, #88	; 0x58
 8004aac:	f000 8083 	beq.w	8004bb6 <_printf_i+0x136>
 8004ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ab8:	e032      	b.n	8004b20 <_printf_i+0xa0>
 8004aba:	2964      	cmp	r1, #100	; 0x64
 8004abc:	d001      	beq.n	8004ac2 <_printf_i+0x42>
 8004abe:	2969      	cmp	r1, #105	; 0x69
 8004ac0:	d1f6      	bne.n	8004ab0 <_printf_i+0x30>
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	6813      	ldr	r3, [r2, #0]
 8004ac6:	0605      	lsls	r5, r0, #24
 8004ac8:	f103 0104 	add.w	r1, r3, #4
 8004acc:	d52a      	bpl.n	8004b24 <_printf_i+0xa4>
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6011      	str	r1, [r2, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da03      	bge.n	8004ade <_printf_i+0x5e>
 8004ad6:	222d      	movs	r2, #45	; 0x2d
 8004ad8:	425b      	negs	r3, r3
 8004ada:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ade:	486f      	ldr	r0, [pc, #444]	; (8004c9c <_printf_i+0x21c>)
 8004ae0:	220a      	movs	r2, #10
 8004ae2:	e039      	b.n	8004b58 <_printf_i+0xd8>
 8004ae4:	2973      	cmp	r1, #115	; 0x73
 8004ae6:	f000 809d 	beq.w	8004c24 <_printf_i+0x1a4>
 8004aea:	d808      	bhi.n	8004afe <_printf_i+0x7e>
 8004aec:	296f      	cmp	r1, #111	; 0x6f
 8004aee:	d020      	beq.n	8004b32 <_printf_i+0xb2>
 8004af0:	2970      	cmp	r1, #112	; 0x70
 8004af2:	d1dd      	bne.n	8004ab0 <_printf_i+0x30>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	f043 0320 	orr.w	r3, r3, #32
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	e003      	b.n	8004b06 <_printf_i+0x86>
 8004afe:	2975      	cmp	r1, #117	; 0x75
 8004b00:	d017      	beq.n	8004b32 <_printf_i+0xb2>
 8004b02:	2978      	cmp	r1, #120	; 0x78
 8004b04:	d1d4      	bne.n	8004ab0 <_printf_i+0x30>
 8004b06:	2378      	movs	r3, #120	; 0x78
 8004b08:	4865      	ldr	r0, [pc, #404]	; (8004ca0 <_printf_i+0x220>)
 8004b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b0e:	e055      	b.n	8004bbc <_printf_i+0x13c>
 8004b10:	6813      	ldr	r3, [r2, #0]
 8004b12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b16:	1d19      	adds	r1, r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6011      	str	r1, [r2, #0]
 8004b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b20:	2301      	movs	r3, #1
 8004b22:	e08c      	b.n	8004c3e <_printf_i+0x1be>
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b2a:	6011      	str	r1, [r2, #0]
 8004b2c:	bf18      	it	ne
 8004b2e:	b21b      	sxthne	r3, r3
 8004b30:	e7cf      	b.n	8004ad2 <_printf_i+0x52>
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	6825      	ldr	r5, [r4, #0]
 8004b36:	1d18      	adds	r0, r3, #4
 8004b38:	6010      	str	r0, [r2, #0]
 8004b3a:	0628      	lsls	r0, r5, #24
 8004b3c:	d501      	bpl.n	8004b42 <_printf_i+0xc2>
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	e002      	b.n	8004b48 <_printf_i+0xc8>
 8004b42:	0668      	lsls	r0, r5, #25
 8004b44:	d5fb      	bpl.n	8004b3e <_printf_i+0xbe>
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	296f      	cmp	r1, #111	; 0x6f
 8004b4a:	bf14      	ite	ne
 8004b4c:	220a      	movne	r2, #10
 8004b4e:	2208      	moveq	r2, #8
 8004b50:	4852      	ldr	r0, [pc, #328]	; (8004c9c <_printf_i+0x21c>)
 8004b52:	2100      	movs	r1, #0
 8004b54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b58:	6865      	ldr	r5, [r4, #4]
 8004b5a:	2d00      	cmp	r5, #0
 8004b5c:	60a5      	str	r5, [r4, #8]
 8004b5e:	f2c0 8095 	blt.w	8004c8c <_printf_i+0x20c>
 8004b62:	6821      	ldr	r1, [r4, #0]
 8004b64:	f021 0104 	bic.w	r1, r1, #4
 8004b68:	6021      	str	r1, [r4, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d13d      	bne.n	8004bea <_printf_i+0x16a>
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	f040 808e 	bne.w	8004c90 <_printf_i+0x210>
 8004b74:	4665      	mov	r5, ip
 8004b76:	2a08      	cmp	r2, #8
 8004b78:	d10b      	bne.n	8004b92 <_printf_i+0x112>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	07db      	lsls	r3, r3, #31
 8004b7e:	d508      	bpl.n	8004b92 <_printf_i+0x112>
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	6862      	ldr	r2, [r4, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	bfde      	ittt	le
 8004b88:	2330      	movle	r3, #48	; 0x30
 8004b8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b92:	ebac 0305 	sub.w	r3, ip, r5
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	f8cd 8000 	str.w	r8, [sp]
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	aa03      	add	r2, sp, #12
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7ff fef6 	bl	8004994 <_printf_common>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d14d      	bne.n	8004c48 <_printf_i+0x1c8>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	b005      	add	sp, #20
 8004bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bb6:	4839      	ldr	r0, [pc, #228]	; (8004c9c <_printf_i+0x21c>)
 8004bb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	6821      	ldr	r1, [r4, #0]
 8004bc0:	1d1d      	adds	r5, r3, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6015      	str	r5, [r2, #0]
 8004bc6:	060a      	lsls	r2, r1, #24
 8004bc8:	d50b      	bpl.n	8004be2 <_printf_i+0x162>
 8004bca:	07ca      	lsls	r2, r1, #31
 8004bcc:	bf44      	itt	mi
 8004bce:	f041 0120 	orrmi.w	r1, r1, #32
 8004bd2:	6021      	strmi	r1, [r4, #0]
 8004bd4:	b91b      	cbnz	r3, 8004bde <_printf_i+0x15e>
 8004bd6:	6822      	ldr	r2, [r4, #0]
 8004bd8:	f022 0220 	bic.w	r2, r2, #32
 8004bdc:	6022      	str	r2, [r4, #0]
 8004bde:	2210      	movs	r2, #16
 8004be0:	e7b7      	b.n	8004b52 <_printf_i+0xd2>
 8004be2:	064d      	lsls	r5, r1, #25
 8004be4:	bf48      	it	mi
 8004be6:	b29b      	uxthmi	r3, r3
 8004be8:	e7ef      	b.n	8004bca <_printf_i+0x14a>
 8004bea:	4665      	mov	r5, ip
 8004bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bf0:	fb02 3311 	mls	r3, r2, r1, r3
 8004bf4:	5cc3      	ldrb	r3, [r0, r3]
 8004bf6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	d1f5      	bne.n	8004bec <_printf_i+0x16c>
 8004c00:	e7b9      	b.n	8004b76 <_printf_i+0xf6>
 8004c02:	6813      	ldr	r3, [r2, #0]
 8004c04:	6825      	ldr	r5, [r4, #0]
 8004c06:	1d18      	adds	r0, r3, #4
 8004c08:	6961      	ldr	r1, [r4, #20]
 8004c0a:	6010      	str	r0, [r2, #0]
 8004c0c:	0628      	lsls	r0, r5, #24
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	d501      	bpl.n	8004c16 <_printf_i+0x196>
 8004c12:	6019      	str	r1, [r3, #0]
 8004c14:	e002      	b.n	8004c1c <_printf_i+0x19c>
 8004c16:	066a      	lsls	r2, r5, #25
 8004c18:	d5fb      	bpl.n	8004c12 <_printf_i+0x192>
 8004c1a:	8019      	strh	r1, [r3, #0]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4665      	mov	r5, ip
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	e7b9      	b.n	8004b98 <_printf_i+0x118>
 8004c24:	6813      	ldr	r3, [r2, #0]
 8004c26:	1d19      	adds	r1, r3, #4
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	681d      	ldr	r5, [r3, #0]
 8004c2c:	6862      	ldr	r2, [r4, #4]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4628      	mov	r0, r5
 8004c32:	f002 fa93 	bl	800715c <memchr>
 8004c36:	b108      	cbz	r0, 8004c3c <_printf_i+0x1bc>
 8004c38:	1b40      	subs	r0, r0, r5
 8004c3a:	6060      	str	r0, [r4, #4]
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	2300      	movs	r3, #0
 8004c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c46:	e7a7      	b.n	8004b98 <_printf_i+0x118>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	462a      	mov	r2, r5
 8004c4c:	4639      	mov	r1, r7
 8004c4e:	4630      	mov	r0, r6
 8004c50:	47c0      	blx	r8
 8004c52:	3001      	adds	r0, #1
 8004c54:	d0aa      	beq.n	8004bac <_printf_i+0x12c>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	079b      	lsls	r3, r3, #30
 8004c5a:	d413      	bmi.n	8004c84 <_printf_i+0x204>
 8004c5c:	68e0      	ldr	r0, [r4, #12]
 8004c5e:	9b03      	ldr	r3, [sp, #12]
 8004c60:	4298      	cmp	r0, r3
 8004c62:	bfb8      	it	lt
 8004c64:	4618      	movlt	r0, r3
 8004c66:	e7a3      	b.n	8004bb0 <_printf_i+0x130>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	464a      	mov	r2, r9
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	4630      	mov	r0, r6
 8004c70:	47c0      	blx	r8
 8004c72:	3001      	adds	r0, #1
 8004c74:	d09a      	beq.n	8004bac <_printf_i+0x12c>
 8004c76:	3501      	adds	r5, #1
 8004c78:	68e3      	ldr	r3, [r4, #12]
 8004c7a:	9a03      	ldr	r2, [sp, #12]
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	42ab      	cmp	r3, r5
 8004c80:	dcf2      	bgt.n	8004c68 <_printf_i+0x1e8>
 8004c82:	e7eb      	b.n	8004c5c <_printf_i+0x1dc>
 8004c84:	2500      	movs	r5, #0
 8004c86:	f104 0919 	add.w	r9, r4, #25
 8004c8a:	e7f5      	b.n	8004c78 <_printf_i+0x1f8>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ac      	bne.n	8004bea <_printf_i+0x16a>
 8004c90:	7803      	ldrb	r3, [r0, #0]
 8004c92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c9a:	e76c      	b.n	8004b76 <_printf_i+0xf6>
 8004c9c:	08007f8e 	.word	0x08007f8e
 8004ca0:	08007f9f 	.word	0x08007f9f

08004ca4 <_scanf_float>:
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	469a      	mov	sl, r3
 8004caa:	688b      	ldr	r3, [r1, #8]
 8004cac:	4616      	mov	r6, r2
 8004cae:	1e5a      	subs	r2, r3, #1
 8004cb0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004cb4:	bf88      	it	hi
 8004cb6:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004cba:	b087      	sub	sp, #28
 8004cbc:	bf85      	ittet	hi
 8004cbe:	189b      	addhi	r3, r3, r2
 8004cc0:	9301      	strhi	r3, [sp, #4]
 8004cc2:	2300      	movls	r3, #0
 8004cc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004cc8:	4688      	mov	r8, r1
 8004cca:	f04f 0b00 	mov.w	fp, #0
 8004cce:	bf8c      	ite	hi
 8004cd0:	608b      	strhi	r3, [r1, #8]
 8004cd2:	9301      	strls	r3, [sp, #4]
 8004cd4:	680b      	ldr	r3, [r1, #0]
 8004cd6:	4607      	mov	r7, r0
 8004cd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004cdc:	f848 3b1c 	str.w	r3, [r8], #28
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	4645      	mov	r5, r8
 8004ce4:	465a      	mov	r2, fp
 8004ce6:	46d9      	mov	r9, fp
 8004ce8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004cec:	f8cd b008 	str.w	fp, [sp, #8]
 8004cf0:	68a1      	ldr	r1, [r4, #8]
 8004cf2:	b181      	cbz	r1, 8004d16 <_scanf_float+0x72>
 8004cf4:	6833      	ldr	r3, [r6, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b49      	cmp	r3, #73	; 0x49
 8004cfa:	d071      	beq.n	8004de0 <_scanf_float+0x13c>
 8004cfc:	d84d      	bhi.n	8004d9a <_scanf_float+0xf6>
 8004cfe:	2b39      	cmp	r3, #57	; 0x39
 8004d00:	d840      	bhi.n	8004d84 <_scanf_float+0xe0>
 8004d02:	2b31      	cmp	r3, #49	; 0x31
 8004d04:	f080 8088 	bcs.w	8004e18 <_scanf_float+0x174>
 8004d08:	2b2d      	cmp	r3, #45	; 0x2d
 8004d0a:	f000 8090 	beq.w	8004e2e <_scanf_float+0x18a>
 8004d0e:	d815      	bhi.n	8004d3c <_scanf_float+0x98>
 8004d10:	2b2b      	cmp	r3, #43	; 0x2b
 8004d12:	f000 808c 	beq.w	8004e2e <_scanf_float+0x18a>
 8004d16:	f1b9 0f00 	cmp.w	r9, #0
 8004d1a:	d003      	beq.n	8004d24 <_scanf_float+0x80>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	3a01      	subs	r2, #1
 8004d26:	2a01      	cmp	r2, #1
 8004d28:	f200 80ea 	bhi.w	8004f00 <_scanf_float+0x25c>
 8004d2c:	4545      	cmp	r5, r8
 8004d2e:	f200 80dc 	bhi.w	8004eea <_scanf_float+0x246>
 8004d32:	2601      	movs	r6, #1
 8004d34:	4630      	mov	r0, r6
 8004d36:	b007      	add	sp, #28
 8004d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d3e:	f000 809f 	beq.w	8004e80 <_scanf_float+0x1dc>
 8004d42:	2b30      	cmp	r3, #48	; 0x30
 8004d44:	d1e7      	bne.n	8004d16 <_scanf_float+0x72>
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004d4c:	d064      	beq.n	8004e18 <_scanf_float+0x174>
 8004d4e:	9b01      	ldr	r3, [sp, #4]
 8004d50:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004d54:	6020      	str	r0, [r4, #0]
 8004d56:	f109 0901 	add.w	r9, r9, #1
 8004d5a:	b11b      	cbz	r3, 8004d64 <_scanf_float+0xc0>
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	3101      	adds	r1, #1
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	60a1      	str	r1, [r4, #8]
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	6873      	ldr	r3, [r6, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	6073      	str	r3, [r6, #4]
 8004d78:	f340 80ac 	ble.w	8004ed4 <_scanf_float+0x230>
 8004d7c:	6833      	ldr	r3, [r6, #0]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	e7b5      	b.n	8004cf0 <_scanf_float+0x4c>
 8004d84:	2b45      	cmp	r3, #69	; 0x45
 8004d86:	f000 8085 	beq.w	8004e94 <_scanf_float+0x1f0>
 8004d8a:	2b46      	cmp	r3, #70	; 0x46
 8004d8c:	d06a      	beq.n	8004e64 <_scanf_float+0x1c0>
 8004d8e:	2b41      	cmp	r3, #65	; 0x41
 8004d90:	d1c1      	bne.n	8004d16 <_scanf_float+0x72>
 8004d92:	2a01      	cmp	r2, #1
 8004d94:	d1bf      	bne.n	8004d16 <_scanf_float+0x72>
 8004d96:	2202      	movs	r2, #2
 8004d98:	e046      	b.n	8004e28 <_scanf_float+0x184>
 8004d9a:	2b65      	cmp	r3, #101	; 0x65
 8004d9c:	d07a      	beq.n	8004e94 <_scanf_float+0x1f0>
 8004d9e:	d818      	bhi.n	8004dd2 <_scanf_float+0x12e>
 8004da0:	2b54      	cmp	r3, #84	; 0x54
 8004da2:	d066      	beq.n	8004e72 <_scanf_float+0x1ce>
 8004da4:	d811      	bhi.n	8004dca <_scanf_float+0x126>
 8004da6:	2b4e      	cmp	r3, #78	; 0x4e
 8004da8:	d1b5      	bne.n	8004d16 <_scanf_float+0x72>
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	d146      	bne.n	8004e3c <_scanf_float+0x198>
 8004dae:	f1b9 0f00 	cmp.w	r9, #0
 8004db2:	d145      	bne.n	8004e40 <_scanf_float+0x19c>
 8004db4:	6821      	ldr	r1, [r4, #0]
 8004db6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004dba:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004dbe:	d13f      	bne.n	8004e40 <_scanf_float+0x19c>
 8004dc0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004dc4:	6021      	str	r1, [r4, #0]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	e02e      	b.n	8004e28 <_scanf_float+0x184>
 8004dca:	2b59      	cmp	r3, #89	; 0x59
 8004dcc:	d01e      	beq.n	8004e0c <_scanf_float+0x168>
 8004dce:	2b61      	cmp	r3, #97	; 0x61
 8004dd0:	e7de      	b.n	8004d90 <_scanf_float+0xec>
 8004dd2:	2b6e      	cmp	r3, #110	; 0x6e
 8004dd4:	d0e9      	beq.n	8004daa <_scanf_float+0x106>
 8004dd6:	d815      	bhi.n	8004e04 <_scanf_float+0x160>
 8004dd8:	2b66      	cmp	r3, #102	; 0x66
 8004dda:	d043      	beq.n	8004e64 <_scanf_float+0x1c0>
 8004ddc:	2b69      	cmp	r3, #105	; 0x69
 8004dde:	d19a      	bne.n	8004d16 <_scanf_float+0x72>
 8004de0:	f1bb 0f00 	cmp.w	fp, #0
 8004de4:	d138      	bne.n	8004e58 <_scanf_float+0x1b4>
 8004de6:	f1b9 0f00 	cmp.w	r9, #0
 8004dea:	d197      	bne.n	8004d1c <_scanf_float+0x78>
 8004dec:	6821      	ldr	r1, [r4, #0]
 8004dee:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004df2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004df6:	d195      	bne.n	8004d24 <_scanf_float+0x80>
 8004df8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004dfc:	6021      	str	r1, [r4, #0]
 8004dfe:	f04f 0b01 	mov.w	fp, #1
 8004e02:	e011      	b.n	8004e28 <_scanf_float+0x184>
 8004e04:	2b74      	cmp	r3, #116	; 0x74
 8004e06:	d034      	beq.n	8004e72 <_scanf_float+0x1ce>
 8004e08:	2b79      	cmp	r3, #121	; 0x79
 8004e0a:	d184      	bne.n	8004d16 <_scanf_float+0x72>
 8004e0c:	f1bb 0f07 	cmp.w	fp, #7
 8004e10:	d181      	bne.n	8004d16 <_scanf_float+0x72>
 8004e12:	f04f 0b08 	mov.w	fp, #8
 8004e16:	e007      	b.n	8004e28 <_scanf_float+0x184>
 8004e18:	eb12 0f0b 	cmn.w	r2, fp
 8004e1c:	f47f af7b 	bne.w	8004d16 <_scanf_float+0x72>
 8004e20:	6821      	ldr	r1, [r4, #0]
 8004e22:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004e26:	6021      	str	r1, [r4, #0]
 8004e28:	702b      	strb	r3, [r5, #0]
 8004e2a:	3501      	adds	r5, #1
 8004e2c:	e79a      	b.n	8004d64 <_scanf_float+0xc0>
 8004e2e:	6821      	ldr	r1, [r4, #0]
 8004e30:	0608      	lsls	r0, r1, #24
 8004e32:	f57f af70 	bpl.w	8004d16 <_scanf_float+0x72>
 8004e36:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e3a:	e7f4      	b.n	8004e26 <_scanf_float+0x182>
 8004e3c:	2a02      	cmp	r2, #2
 8004e3e:	d047      	beq.n	8004ed0 <_scanf_float+0x22c>
 8004e40:	f1bb 0f01 	cmp.w	fp, #1
 8004e44:	d003      	beq.n	8004e4e <_scanf_float+0x1aa>
 8004e46:	f1bb 0f04 	cmp.w	fp, #4
 8004e4a:	f47f af64 	bne.w	8004d16 <_scanf_float+0x72>
 8004e4e:	f10b 0b01 	add.w	fp, fp, #1
 8004e52:	fa5f fb8b 	uxtb.w	fp, fp
 8004e56:	e7e7      	b.n	8004e28 <_scanf_float+0x184>
 8004e58:	f1bb 0f03 	cmp.w	fp, #3
 8004e5c:	d0f7      	beq.n	8004e4e <_scanf_float+0x1aa>
 8004e5e:	f1bb 0f05 	cmp.w	fp, #5
 8004e62:	e7f2      	b.n	8004e4a <_scanf_float+0x1a6>
 8004e64:	f1bb 0f02 	cmp.w	fp, #2
 8004e68:	f47f af55 	bne.w	8004d16 <_scanf_float+0x72>
 8004e6c:	f04f 0b03 	mov.w	fp, #3
 8004e70:	e7da      	b.n	8004e28 <_scanf_float+0x184>
 8004e72:	f1bb 0f06 	cmp.w	fp, #6
 8004e76:	f47f af4e 	bne.w	8004d16 <_scanf_float+0x72>
 8004e7a:	f04f 0b07 	mov.w	fp, #7
 8004e7e:	e7d3      	b.n	8004e28 <_scanf_float+0x184>
 8004e80:	6821      	ldr	r1, [r4, #0]
 8004e82:	0588      	lsls	r0, r1, #22
 8004e84:	f57f af47 	bpl.w	8004d16 <_scanf_float+0x72>
 8004e88:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004e8c:	6021      	str	r1, [r4, #0]
 8004e8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004e92:	e7c9      	b.n	8004e28 <_scanf_float+0x184>
 8004e94:	6821      	ldr	r1, [r4, #0]
 8004e96:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004e9a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004e9e:	d006      	beq.n	8004eae <_scanf_float+0x20a>
 8004ea0:	0548      	lsls	r0, r1, #21
 8004ea2:	f57f af38 	bpl.w	8004d16 <_scanf_float+0x72>
 8004ea6:	f1b9 0f00 	cmp.w	r9, #0
 8004eaa:	f43f af3b 	beq.w	8004d24 <_scanf_float+0x80>
 8004eae:	0588      	lsls	r0, r1, #22
 8004eb0:	bf58      	it	pl
 8004eb2:	9802      	ldrpl	r0, [sp, #8]
 8004eb4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004eb8:	bf58      	it	pl
 8004eba:	eba9 0000 	subpl.w	r0, r9, r0
 8004ebe:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004ec2:	bf58      	it	pl
 8004ec4:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004ec8:	6021      	str	r1, [r4, #0]
 8004eca:	f04f 0900 	mov.w	r9, #0
 8004ece:	e7ab      	b.n	8004e28 <_scanf_float+0x184>
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	e7a9      	b.n	8004e28 <_scanf_float+0x184>
 8004ed4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ed8:	4631      	mov	r1, r6
 8004eda:	4638      	mov	r0, r7
 8004edc:	9205      	str	r2, [sp, #20]
 8004ede:	4798      	blx	r3
 8004ee0:	9a05      	ldr	r2, [sp, #20]
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	f43f af04 	beq.w	8004cf0 <_scanf_float+0x4c>
 8004ee8:	e715      	b.n	8004d16 <_scanf_float+0x72>
 8004eea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004eee:	4632      	mov	r2, r6
 8004ef0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	4798      	blx	r3
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6123      	str	r3, [r4, #16]
 8004efe:	e715      	b.n	8004d2c <_scanf_float+0x88>
 8004f00:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d80a      	bhi.n	8004f1e <_scanf_float+0x27a>
 8004f08:	f1bb 0f02 	cmp.w	fp, #2
 8004f0c:	d967      	bls.n	8004fde <_scanf_float+0x33a>
 8004f0e:	f1ab 0b03 	sub.w	fp, fp, #3
 8004f12:	fa5f fb8b 	uxtb.w	fp, fp
 8004f16:	eba5 0b0b 	sub.w	fp, r5, fp
 8004f1a:	455d      	cmp	r5, fp
 8004f1c:	d14a      	bne.n	8004fb4 <_scanf_float+0x310>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	05da      	lsls	r2, r3, #23
 8004f22:	d51f      	bpl.n	8004f64 <_scanf_float+0x2c0>
 8004f24:	055b      	lsls	r3, r3, #21
 8004f26:	d467      	bmi.n	8004ff8 <_scanf_float+0x354>
 8004f28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004f2c:	6923      	ldr	r3, [r4, #16]
 8004f2e:	2965      	cmp	r1, #101	; 0x65
 8004f30:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f34:	f105 3bff 	add.w	fp, r5, #4294967295
 8004f38:	6123      	str	r3, [r4, #16]
 8004f3a:	d00d      	beq.n	8004f58 <_scanf_float+0x2b4>
 8004f3c:	2945      	cmp	r1, #69	; 0x45
 8004f3e:	d00b      	beq.n	8004f58 <_scanf_float+0x2b4>
 8004f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f44:	4632      	mov	r2, r6
 8004f46:	4638      	mov	r0, r7
 8004f48:	4798      	blx	r3
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	f1a5 0b02 	sub.w	fp, r5, #2
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	4638      	mov	r0, r7
 8004f60:	4798      	blx	r3
 8004f62:	465d      	mov	r5, fp
 8004f64:	6826      	ldr	r6, [r4, #0]
 8004f66:	f016 0610 	ands.w	r6, r6, #16
 8004f6a:	d176      	bne.n	800505a <_scanf_float+0x3b6>
 8004f6c:	702e      	strb	r6, [r5, #0]
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d141      	bne.n	8004ffe <_scanf_float+0x35a>
 8004f7a:	9b02      	ldr	r3, [sp, #8]
 8004f7c:	eba9 0303 	sub.w	r3, r9, r3
 8004f80:	425a      	negs	r2, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d148      	bne.n	8005018 <_scanf_float+0x374>
 8004f86:	4641      	mov	r1, r8
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f000 feb0 	bl	8005cf0 <_strtod_r>
 8004f90:	6825      	ldr	r5, [r4, #0]
 8004f92:	4680      	mov	r8, r0
 8004f94:	f015 0f02 	tst.w	r5, #2
 8004f98:	4689      	mov	r9, r1
 8004f9a:	f8da 3000 	ldr.w	r3, [sl]
 8004f9e:	d046      	beq.n	800502e <_scanf_float+0x38a>
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	f8ca 2000 	str.w	r2, [sl]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	e9c3 8900 	strd	r8, r9, [r3]
 8004fac:	68e3      	ldr	r3, [r4, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60e3      	str	r3, [r4, #12]
 8004fb2:	e6bf      	b.n	8004d34 <_scanf_float+0x90>
 8004fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fb8:	4632      	mov	r2, r6
 8004fba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	4798      	blx	r3
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	6123      	str	r3, [r4, #16]
 8004fc8:	e7a7      	b.n	8004f1a <_scanf_float+0x276>
 8004fca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fce:	4632      	mov	r2, r6
 8004fd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	4798      	blx	r3
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	4545      	cmp	r5, r8
 8004fe0:	d8f3      	bhi.n	8004fca <_scanf_float+0x326>
 8004fe2:	e6a6      	b.n	8004d32 <_scanf_float+0x8e>
 8004fe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fe8:	4632      	mov	r2, r6
 8004fea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004fee:	4638      	mov	r0, r7
 8004ff0:	4798      	blx	r3
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	4545      	cmp	r5, r8
 8004ffa:	d8f3      	bhi.n	8004fe4 <_scanf_float+0x340>
 8004ffc:	e699      	b.n	8004d32 <_scanf_float+0x8e>
 8004ffe:	9b03      	ldr	r3, [sp, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0c0      	beq.n	8004f86 <_scanf_float+0x2e2>
 8005004:	9904      	ldr	r1, [sp, #16]
 8005006:	230a      	movs	r3, #10
 8005008:	4632      	mov	r2, r6
 800500a:	3101      	adds	r1, #1
 800500c:	4638      	mov	r0, r7
 800500e:	f000 fefb 	bl	8005e08 <_strtol_r>
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	9d04      	ldr	r5, [sp, #16]
 8005016:	1ac2      	subs	r2, r0, r3
 8005018:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800501c:	429d      	cmp	r5, r3
 800501e:	bf28      	it	cs
 8005020:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <_scanf_float+0x3bc>)
 8005026:	4628      	mov	r0, r5
 8005028:	f000 f820 	bl	800506c <siprintf>
 800502c:	e7ab      	b.n	8004f86 <_scanf_float+0x2e2>
 800502e:	1d1f      	adds	r7, r3, #4
 8005030:	f015 0504 	ands.w	r5, r5, #4
 8005034:	f8ca 7000 	str.w	r7, [sl]
 8005038:	d1b5      	bne.n	8004fa6 <_scanf_float+0x302>
 800503a:	681f      	ldr	r7, [r3, #0]
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	f7fb fce4 	bl	8000a0c <__aeabi_dcmpun>
 8005044:	b120      	cbz	r0, 8005050 <_scanf_float+0x3ac>
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f80c 	bl	8005064 <nanf>
 800504c:	6038      	str	r0, [r7, #0]
 800504e:	e7ad      	b.n	8004fac <_scanf_float+0x308>
 8005050:	4640      	mov	r0, r8
 8005052:	4649      	mov	r1, r9
 8005054:	f7fb fd38 	bl	8000ac8 <__aeabi_d2f>
 8005058:	e7f8      	b.n	800504c <_scanf_float+0x3a8>
 800505a:	2600      	movs	r6, #0
 800505c:	e66a      	b.n	8004d34 <_scanf_float+0x90>
 800505e:	bf00      	nop
 8005060:	08007fb0 	.word	0x08007fb0

08005064 <nanf>:
 8005064:	4800      	ldr	r0, [pc, #0]	; (8005068 <nanf+0x4>)
 8005066:	4770      	bx	lr
 8005068:	7fc00000 	.word	0x7fc00000

0800506c <siprintf>:
 800506c:	b40e      	push	{r1, r2, r3}
 800506e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005072:	b500      	push	{lr}
 8005074:	b09c      	sub	sp, #112	; 0x70
 8005076:	ab1d      	add	r3, sp, #116	; 0x74
 8005078:	9002      	str	r0, [sp, #8]
 800507a:	9006      	str	r0, [sp, #24]
 800507c:	9107      	str	r1, [sp, #28]
 800507e:	9104      	str	r1, [sp, #16]
 8005080:	4808      	ldr	r0, [pc, #32]	; (80050a4 <siprintf+0x38>)
 8005082:	4909      	ldr	r1, [pc, #36]	; (80050a8 <siprintf+0x3c>)
 8005084:	f853 2b04 	ldr.w	r2, [r3], #4
 8005088:	9105      	str	r1, [sp, #20]
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	a902      	add	r1, sp, #8
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	f002 fd84 	bl	8007b9c <_svfiprintf_r>
 8005094:	2200      	movs	r2, #0
 8005096:	9b02      	ldr	r3, [sp, #8]
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	b01c      	add	sp, #112	; 0x70
 800509c:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a0:	b003      	add	sp, #12
 80050a2:	4770      	bx	lr
 80050a4:	20000018 	.word	0x20000018
 80050a8:	ffff0208 	.word	0xffff0208

080050ac <sulp>:
 80050ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b0:	460f      	mov	r7, r1
 80050b2:	4690      	mov	r8, r2
 80050b4:	f002 fb36 	bl	8007724 <__ulp>
 80050b8:	4604      	mov	r4, r0
 80050ba:	460d      	mov	r5, r1
 80050bc:	f1b8 0f00 	cmp.w	r8, #0
 80050c0:	d011      	beq.n	80050e6 <sulp+0x3a>
 80050c2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80050c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	dd0b      	ble.n	80050e6 <sulp+0x3a>
 80050ce:	2400      	movs	r4, #0
 80050d0:	051b      	lsls	r3, r3, #20
 80050d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80050d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80050da:	4622      	mov	r2, r4
 80050dc:	462b      	mov	r3, r5
 80050de:	f7fb f9fb 	bl	80004d8 <__aeabi_dmul>
 80050e2:	4604      	mov	r4, r0
 80050e4:	460d      	mov	r5, r1
 80050e6:	4620      	mov	r0, r4
 80050e8:	4629      	mov	r1, r5
 80050ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080050f0 <_strtod_l>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	461f      	mov	r7, r3
 80050f6:	2300      	movs	r3, #0
 80050f8:	b0a1      	sub	sp, #132	; 0x84
 80050fa:	4683      	mov	fp, r0
 80050fc:	4638      	mov	r0, r7
 80050fe:	460e      	mov	r6, r1
 8005100:	9217      	str	r2, [sp, #92]	; 0x5c
 8005102:	931c      	str	r3, [sp, #112]	; 0x70
 8005104:	f001 ffff 	bl	8007106 <__localeconv_l>
 8005108:	4680      	mov	r8, r0
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	f7fb f820 	bl	8000150 <strlen>
 8005110:	f04f 0900 	mov.w	r9, #0
 8005114:	4604      	mov	r4, r0
 8005116:	f04f 0a00 	mov.w	sl, #0
 800511a:	961b      	str	r6, [sp, #108]	; 0x6c
 800511c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	2a0d      	cmp	r2, #13
 8005122:	d832      	bhi.n	800518a <_strtod_l+0x9a>
 8005124:	2a09      	cmp	r2, #9
 8005126:	d236      	bcs.n	8005196 <_strtod_l+0xa6>
 8005128:	2a00      	cmp	r2, #0
 800512a:	d03e      	beq.n	80051aa <_strtod_l+0xba>
 800512c:	2300      	movs	r3, #0
 800512e:	930d      	str	r3, [sp, #52]	; 0x34
 8005130:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005132:	782b      	ldrb	r3, [r5, #0]
 8005134:	2b30      	cmp	r3, #48	; 0x30
 8005136:	f040 80ac 	bne.w	8005292 <_strtod_l+0x1a2>
 800513a:	786b      	ldrb	r3, [r5, #1]
 800513c:	2b58      	cmp	r3, #88	; 0x58
 800513e:	d001      	beq.n	8005144 <_strtod_l+0x54>
 8005140:	2b78      	cmp	r3, #120	; 0x78
 8005142:	d167      	bne.n	8005214 <_strtod_l+0x124>
 8005144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005146:	9702      	str	r7, [sp, #8]
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	ab1c      	add	r3, sp, #112	; 0x70
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	4a89      	ldr	r2, [pc, #548]	; (8005374 <_strtod_l+0x284>)
 8005150:	ab1d      	add	r3, sp, #116	; 0x74
 8005152:	a91b      	add	r1, sp, #108	; 0x6c
 8005154:	4658      	mov	r0, fp
 8005156:	f001 fcfb 	bl	8006b50 <__gethex>
 800515a:	f010 0407 	ands.w	r4, r0, #7
 800515e:	4606      	mov	r6, r0
 8005160:	d005      	beq.n	800516e <_strtod_l+0x7e>
 8005162:	2c06      	cmp	r4, #6
 8005164:	d12b      	bne.n	80051be <_strtod_l+0xce>
 8005166:	2300      	movs	r3, #0
 8005168:	3501      	adds	r5, #1
 800516a:	951b      	str	r5, [sp, #108]	; 0x6c
 800516c:	930d      	str	r3, [sp, #52]	; 0x34
 800516e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 85a6 	bne.w	8005cc2 <_strtod_l+0xbd2>
 8005176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005178:	b1e3      	cbz	r3, 80051b4 <_strtod_l+0xc4>
 800517a:	464a      	mov	r2, r9
 800517c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	b021      	add	sp, #132	; 0x84
 8005186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518a:	2a2b      	cmp	r2, #43	; 0x2b
 800518c:	d015      	beq.n	80051ba <_strtod_l+0xca>
 800518e:	2a2d      	cmp	r2, #45	; 0x2d
 8005190:	d004      	beq.n	800519c <_strtod_l+0xac>
 8005192:	2a20      	cmp	r2, #32
 8005194:	d1ca      	bne.n	800512c <_strtod_l+0x3c>
 8005196:	3301      	adds	r3, #1
 8005198:	931b      	str	r3, [sp, #108]	; 0x6c
 800519a:	e7bf      	b.n	800511c <_strtod_l+0x2c>
 800519c:	2201      	movs	r2, #1
 800519e:	920d      	str	r2, [sp, #52]	; 0x34
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1c2      	bne.n	8005130 <_strtod_l+0x40>
 80051aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 8585 	bne.w	8005cbe <_strtod_l+0xbce>
 80051b4:	464a      	mov	r2, r9
 80051b6:	4653      	mov	r3, sl
 80051b8:	e7e2      	b.n	8005180 <_strtod_l+0x90>
 80051ba:	2200      	movs	r2, #0
 80051bc:	e7ef      	b.n	800519e <_strtod_l+0xae>
 80051be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80051c0:	b13a      	cbz	r2, 80051d2 <_strtod_l+0xe2>
 80051c2:	2135      	movs	r1, #53	; 0x35
 80051c4:	a81e      	add	r0, sp, #120	; 0x78
 80051c6:	f002 fba0 	bl	800790a <__copybits>
 80051ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80051cc:	4658      	mov	r0, fp
 80051ce:	f002 f812 	bl	80071f6 <_Bfree>
 80051d2:	3c01      	subs	r4, #1
 80051d4:	2c04      	cmp	r4, #4
 80051d6:	d806      	bhi.n	80051e6 <_strtod_l+0xf6>
 80051d8:	e8df f004 	tbb	[pc, r4]
 80051dc:	1714030a 	.word	0x1714030a
 80051e0:	0a          	.byte	0x0a
 80051e1:	00          	.byte	0x00
 80051e2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80051e6:	0731      	lsls	r1, r6, #28
 80051e8:	d5c1      	bpl.n	800516e <_strtod_l+0x7e>
 80051ea:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80051ee:	e7be      	b.n	800516e <_strtod_l+0x7e>
 80051f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80051f2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80051f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80051fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80051fe:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005202:	e7f0      	b.n	80051e6 <_strtod_l+0xf6>
 8005204:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005378 <_strtod_l+0x288>
 8005208:	e7ed      	b.n	80051e6 <_strtod_l+0xf6>
 800520a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800520e:	f04f 39ff 	mov.w	r9, #4294967295
 8005212:	e7e8      	b.n	80051e6 <_strtod_l+0xf6>
 8005214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	921b      	str	r2, [sp, #108]	; 0x6c
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	2b30      	cmp	r3, #48	; 0x30
 800521e:	d0f9      	beq.n	8005214 <_strtod_l+0x124>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0a4      	beq.n	800516e <_strtod_l+0x7e>
 8005224:	2301      	movs	r3, #1
 8005226:	2500      	movs	r5, #0
 8005228:	220a      	movs	r2, #10
 800522a:	9307      	str	r3, [sp, #28]
 800522c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800522e:	9506      	str	r5, [sp, #24]
 8005230:	9308      	str	r3, [sp, #32]
 8005232:	9504      	str	r5, [sp, #16]
 8005234:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005236:	7807      	ldrb	r7, [r0, #0]
 8005238:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800523c:	b2d9      	uxtb	r1, r3
 800523e:	2909      	cmp	r1, #9
 8005240:	d929      	bls.n	8005296 <_strtod_l+0x1a6>
 8005242:	4622      	mov	r2, r4
 8005244:	f8d8 1000 	ldr.w	r1, [r8]
 8005248:	f002 fdb0 	bl	8007dac <strncmp>
 800524c:	2800      	cmp	r0, #0
 800524e:	d031      	beq.n	80052b4 <_strtod_l+0x1c4>
 8005250:	2000      	movs	r0, #0
 8005252:	463b      	mov	r3, r7
 8005254:	4602      	mov	r2, r0
 8005256:	9c04      	ldr	r4, [sp, #16]
 8005258:	9005      	str	r0, [sp, #20]
 800525a:	2b65      	cmp	r3, #101	; 0x65
 800525c:	d001      	beq.n	8005262 <_strtod_l+0x172>
 800525e:	2b45      	cmp	r3, #69	; 0x45
 8005260:	d114      	bne.n	800528c <_strtod_l+0x19c>
 8005262:	b924      	cbnz	r4, 800526e <_strtod_l+0x17e>
 8005264:	b910      	cbnz	r0, 800526c <_strtod_l+0x17c>
 8005266:	9b07      	ldr	r3, [sp, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d09e      	beq.n	80051aa <_strtod_l+0xba>
 800526c:	2400      	movs	r4, #0
 800526e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005270:	1c73      	adds	r3, r6, #1
 8005272:	931b      	str	r3, [sp, #108]	; 0x6c
 8005274:	7873      	ldrb	r3, [r6, #1]
 8005276:	2b2b      	cmp	r3, #43	; 0x2b
 8005278:	d078      	beq.n	800536c <_strtod_l+0x27c>
 800527a:	2b2d      	cmp	r3, #45	; 0x2d
 800527c:	d070      	beq.n	8005360 <_strtod_l+0x270>
 800527e:	f04f 0c00 	mov.w	ip, #0
 8005282:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005286:	2f09      	cmp	r7, #9
 8005288:	d97c      	bls.n	8005384 <_strtod_l+0x294>
 800528a:	961b      	str	r6, [sp, #108]	; 0x6c
 800528c:	f04f 0e00 	mov.w	lr, #0
 8005290:	e09a      	b.n	80053c8 <_strtod_l+0x2d8>
 8005292:	2300      	movs	r3, #0
 8005294:	e7c7      	b.n	8005226 <_strtod_l+0x136>
 8005296:	9904      	ldr	r1, [sp, #16]
 8005298:	3001      	adds	r0, #1
 800529a:	2908      	cmp	r1, #8
 800529c:	bfd7      	itett	le
 800529e:	9906      	ldrle	r1, [sp, #24]
 80052a0:	fb02 3505 	mlagt	r5, r2, r5, r3
 80052a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80052a8:	9306      	strle	r3, [sp, #24]
 80052aa:	9b04      	ldr	r3, [sp, #16]
 80052ac:	901b      	str	r0, [sp, #108]	; 0x6c
 80052ae:	3301      	adds	r3, #1
 80052b0:	9304      	str	r3, [sp, #16]
 80052b2:	e7bf      	b.n	8005234 <_strtod_l+0x144>
 80052b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052b6:	191a      	adds	r2, r3, r4
 80052b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80052ba:	9a04      	ldr	r2, [sp, #16]
 80052bc:	5d1b      	ldrb	r3, [r3, r4]
 80052be:	2a00      	cmp	r2, #0
 80052c0:	d037      	beq.n	8005332 <_strtod_l+0x242>
 80052c2:	4602      	mov	r2, r0
 80052c4:	9c04      	ldr	r4, [sp, #16]
 80052c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80052ca:	2909      	cmp	r1, #9
 80052cc:	d913      	bls.n	80052f6 <_strtod_l+0x206>
 80052ce:	2101      	movs	r1, #1
 80052d0:	9105      	str	r1, [sp, #20]
 80052d2:	e7c2      	b.n	800525a <_strtod_l+0x16a>
 80052d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052d6:	3001      	adds	r0, #1
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	921b      	str	r2, [sp, #108]	; 0x6c
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b30      	cmp	r3, #48	; 0x30
 80052e0:	d0f8      	beq.n	80052d4 <_strtod_l+0x1e4>
 80052e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80052e6:	2a08      	cmp	r2, #8
 80052e8:	f200 84f0 	bhi.w	8005ccc <_strtod_l+0xbdc>
 80052ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80052ee:	9208      	str	r2, [sp, #32]
 80052f0:	4602      	mov	r2, r0
 80052f2:	2000      	movs	r0, #0
 80052f4:	4604      	mov	r4, r0
 80052f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80052fa:	f100 0101 	add.w	r1, r0, #1
 80052fe:	d012      	beq.n	8005326 <_strtod_l+0x236>
 8005300:	440a      	add	r2, r1
 8005302:	270a      	movs	r7, #10
 8005304:	4621      	mov	r1, r4
 8005306:	eb00 0c04 	add.w	ip, r0, r4
 800530a:	458c      	cmp	ip, r1
 800530c:	d113      	bne.n	8005336 <_strtod_l+0x246>
 800530e:	1821      	adds	r1, r4, r0
 8005310:	2908      	cmp	r1, #8
 8005312:	f104 0401 	add.w	r4, r4, #1
 8005316:	4404      	add	r4, r0
 8005318:	dc19      	bgt.n	800534e <_strtod_l+0x25e>
 800531a:	210a      	movs	r1, #10
 800531c:	9b06      	ldr	r3, [sp, #24]
 800531e:	fb01 e303 	mla	r3, r1, r3, lr
 8005322:	9306      	str	r3, [sp, #24]
 8005324:	2100      	movs	r1, #0
 8005326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005328:	1c58      	adds	r0, r3, #1
 800532a:	901b      	str	r0, [sp, #108]	; 0x6c
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	4608      	mov	r0, r1
 8005330:	e7c9      	b.n	80052c6 <_strtod_l+0x1d6>
 8005332:	9804      	ldr	r0, [sp, #16]
 8005334:	e7d3      	b.n	80052de <_strtod_l+0x1ee>
 8005336:	2908      	cmp	r1, #8
 8005338:	f101 0101 	add.w	r1, r1, #1
 800533c:	dc03      	bgt.n	8005346 <_strtod_l+0x256>
 800533e:	9b06      	ldr	r3, [sp, #24]
 8005340:	437b      	muls	r3, r7
 8005342:	9306      	str	r3, [sp, #24]
 8005344:	e7e1      	b.n	800530a <_strtod_l+0x21a>
 8005346:	2910      	cmp	r1, #16
 8005348:	bfd8      	it	le
 800534a:	437d      	mulle	r5, r7
 800534c:	e7dd      	b.n	800530a <_strtod_l+0x21a>
 800534e:	2c10      	cmp	r4, #16
 8005350:	bfdc      	itt	le
 8005352:	210a      	movle	r1, #10
 8005354:	fb01 e505 	mlale	r5, r1, r5, lr
 8005358:	e7e4      	b.n	8005324 <_strtod_l+0x234>
 800535a:	2301      	movs	r3, #1
 800535c:	9305      	str	r3, [sp, #20]
 800535e:	e781      	b.n	8005264 <_strtod_l+0x174>
 8005360:	f04f 0c01 	mov.w	ip, #1
 8005364:	1cb3      	adds	r3, r6, #2
 8005366:	931b      	str	r3, [sp, #108]	; 0x6c
 8005368:	78b3      	ldrb	r3, [r6, #2]
 800536a:	e78a      	b.n	8005282 <_strtod_l+0x192>
 800536c:	f04f 0c00 	mov.w	ip, #0
 8005370:	e7f8      	b.n	8005364 <_strtod_l+0x274>
 8005372:	bf00      	nop
 8005374:	08007fb8 	.word	0x08007fb8
 8005378:	7ff00000 	.word	0x7ff00000
 800537c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800537e:	1c5f      	adds	r7, r3, #1
 8005380:	971b      	str	r7, [sp, #108]	; 0x6c
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d0f9      	beq.n	800537c <_strtod_l+0x28c>
 8005388:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800538c:	2f08      	cmp	r7, #8
 800538e:	f63f af7d 	bhi.w	800528c <_strtod_l+0x19c>
 8005392:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005396:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005398:	9309      	str	r3, [sp, #36]	; 0x24
 800539a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800539c:	1c5f      	adds	r7, r3, #1
 800539e:	971b      	str	r7, [sp, #108]	; 0x6c
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80053a6:	f1b8 0f09 	cmp.w	r8, #9
 80053aa:	d937      	bls.n	800541c <_strtod_l+0x32c>
 80053ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ae:	1a7f      	subs	r7, r7, r1
 80053b0:	2f08      	cmp	r7, #8
 80053b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80053b6:	dc37      	bgt.n	8005428 <_strtod_l+0x338>
 80053b8:	45be      	cmp	lr, r7
 80053ba:	bfa8      	it	ge
 80053bc:	46be      	movge	lr, r7
 80053be:	f1bc 0f00 	cmp.w	ip, #0
 80053c2:	d001      	beq.n	80053c8 <_strtod_l+0x2d8>
 80053c4:	f1ce 0e00 	rsb	lr, lr, #0
 80053c8:	2c00      	cmp	r4, #0
 80053ca:	d151      	bne.n	8005470 <_strtod_l+0x380>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f47f aece 	bne.w	800516e <_strtod_l+0x7e>
 80053d2:	9a07      	ldr	r2, [sp, #28]
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	f47f aeca 	bne.w	800516e <_strtod_l+0x7e>
 80053da:	9a05      	ldr	r2, [sp, #20]
 80053dc:	2a00      	cmp	r2, #0
 80053de:	f47f aee4 	bne.w	80051aa <_strtod_l+0xba>
 80053e2:	2b4e      	cmp	r3, #78	; 0x4e
 80053e4:	d027      	beq.n	8005436 <_strtod_l+0x346>
 80053e6:	dc21      	bgt.n	800542c <_strtod_l+0x33c>
 80053e8:	2b49      	cmp	r3, #73	; 0x49
 80053ea:	f47f aede 	bne.w	80051aa <_strtod_l+0xba>
 80053ee:	49a4      	ldr	r1, [pc, #656]	; (8005680 <_strtod_l+0x590>)
 80053f0:	a81b      	add	r0, sp, #108	; 0x6c
 80053f2:	f001 fde1 	bl	8006fb8 <__match>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f43f aed7 	beq.w	80051aa <_strtod_l+0xba>
 80053fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053fe:	49a1      	ldr	r1, [pc, #644]	; (8005684 <_strtod_l+0x594>)
 8005400:	3b01      	subs	r3, #1
 8005402:	a81b      	add	r0, sp, #108	; 0x6c
 8005404:	931b      	str	r3, [sp, #108]	; 0x6c
 8005406:	f001 fdd7 	bl	8006fb8 <__match>
 800540a:	b910      	cbnz	r0, 8005412 <_strtod_l+0x322>
 800540c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800540e:	3301      	adds	r3, #1
 8005410:	931b      	str	r3, [sp, #108]	; 0x6c
 8005412:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005698 <_strtod_l+0x5a8>
 8005416:	f04f 0900 	mov.w	r9, #0
 800541a:	e6a8      	b.n	800516e <_strtod_l+0x7e>
 800541c:	210a      	movs	r1, #10
 800541e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005422:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005426:	e7b8      	b.n	800539a <_strtod_l+0x2aa>
 8005428:	46be      	mov	lr, r7
 800542a:	e7c8      	b.n	80053be <_strtod_l+0x2ce>
 800542c:	2b69      	cmp	r3, #105	; 0x69
 800542e:	d0de      	beq.n	80053ee <_strtod_l+0x2fe>
 8005430:	2b6e      	cmp	r3, #110	; 0x6e
 8005432:	f47f aeba 	bne.w	80051aa <_strtod_l+0xba>
 8005436:	4994      	ldr	r1, [pc, #592]	; (8005688 <_strtod_l+0x598>)
 8005438:	a81b      	add	r0, sp, #108	; 0x6c
 800543a:	f001 fdbd 	bl	8006fb8 <__match>
 800543e:	2800      	cmp	r0, #0
 8005440:	f43f aeb3 	beq.w	80051aa <_strtod_l+0xba>
 8005444:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b28      	cmp	r3, #40	; 0x28
 800544a:	d10e      	bne.n	800546a <_strtod_l+0x37a>
 800544c:	aa1e      	add	r2, sp, #120	; 0x78
 800544e:	498f      	ldr	r1, [pc, #572]	; (800568c <_strtod_l+0x59c>)
 8005450:	a81b      	add	r0, sp, #108	; 0x6c
 8005452:	f001 fdc5 	bl	8006fe0 <__hexnan>
 8005456:	2805      	cmp	r0, #5
 8005458:	d107      	bne.n	800546a <_strtod_l+0x37a>
 800545a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800545c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005460:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005464:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005468:	e681      	b.n	800516e <_strtod_l+0x7e>
 800546a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80056a0 <_strtod_l+0x5b0>
 800546e:	e7d2      	b.n	8005416 <_strtod_l+0x326>
 8005470:	ebae 0302 	sub.w	r3, lr, r2
 8005474:	9307      	str	r3, [sp, #28]
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	9806      	ldr	r0, [sp, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	bf08      	it	eq
 800547e:	4623      	moveq	r3, r4
 8005480:	2c10      	cmp	r4, #16
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	46a0      	mov	r8, r4
 8005486:	bfa8      	it	ge
 8005488:	f04f 0810 	movge.w	r8, #16
 800548c:	f7fa ffaa 	bl	80003e4 <__aeabi_ui2d>
 8005490:	2c09      	cmp	r4, #9
 8005492:	4681      	mov	r9, r0
 8005494:	468a      	mov	sl, r1
 8005496:	dc13      	bgt.n	80054c0 <_strtod_l+0x3d0>
 8005498:	9b07      	ldr	r3, [sp, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f43f ae67 	beq.w	800516e <_strtod_l+0x7e>
 80054a0:	9b07      	ldr	r3, [sp, #28]
 80054a2:	dd7e      	ble.n	80055a2 <_strtod_l+0x4b2>
 80054a4:	2b16      	cmp	r3, #22
 80054a6:	dc65      	bgt.n	8005574 <_strtod_l+0x484>
 80054a8:	4a79      	ldr	r2, [pc, #484]	; (8005690 <_strtod_l+0x5a0>)
 80054aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80054ae:	464a      	mov	r2, r9
 80054b0:	e9de 0100 	ldrd	r0, r1, [lr]
 80054b4:	4653      	mov	r3, sl
 80054b6:	f7fb f80f 	bl	80004d8 <__aeabi_dmul>
 80054ba:	4681      	mov	r9, r0
 80054bc:	468a      	mov	sl, r1
 80054be:	e656      	b.n	800516e <_strtod_l+0x7e>
 80054c0:	4b73      	ldr	r3, [pc, #460]	; (8005690 <_strtod_l+0x5a0>)
 80054c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80054c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054ca:	f7fb f805 	bl	80004d8 <__aeabi_dmul>
 80054ce:	4606      	mov	r6, r0
 80054d0:	4628      	mov	r0, r5
 80054d2:	460f      	mov	r7, r1
 80054d4:	f7fa ff86 	bl	80003e4 <__aeabi_ui2d>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4630      	mov	r0, r6
 80054de:	4639      	mov	r1, r7
 80054e0:	f7fa fe44 	bl	800016c <__adddf3>
 80054e4:	2c0f      	cmp	r4, #15
 80054e6:	4681      	mov	r9, r0
 80054e8:	468a      	mov	sl, r1
 80054ea:	ddd5      	ble.n	8005498 <_strtod_l+0x3a8>
 80054ec:	9b07      	ldr	r3, [sp, #28]
 80054ee:	eba4 0808 	sub.w	r8, r4, r8
 80054f2:	4498      	add	r8, r3
 80054f4:	f1b8 0f00 	cmp.w	r8, #0
 80054f8:	f340 809a 	ble.w	8005630 <_strtod_l+0x540>
 80054fc:	f018 030f 	ands.w	r3, r8, #15
 8005500:	d00a      	beq.n	8005518 <_strtod_l+0x428>
 8005502:	4963      	ldr	r1, [pc, #396]	; (8005690 <_strtod_l+0x5a0>)
 8005504:	464a      	mov	r2, r9
 8005506:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800550a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800550e:	4653      	mov	r3, sl
 8005510:	f7fa ffe2 	bl	80004d8 <__aeabi_dmul>
 8005514:	4681      	mov	r9, r0
 8005516:	468a      	mov	sl, r1
 8005518:	f038 080f 	bics.w	r8, r8, #15
 800551c:	d077      	beq.n	800560e <_strtod_l+0x51e>
 800551e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005522:	dd4b      	ble.n	80055bc <_strtod_l+0x4cc>
 8005524:	f04f 0800 	mov.w	r8, #0
 8005528:	f8cd 8010 	str.w	r8, [sp, #16]
 800552c:	f8cd 8020 	str.w	r8, [sp, #32]
 8005530:	f8cd 8018 	str.w	r8, [sp, #24]
 8005534:	2322      	movs	r3, #34	; 0x22
 8005536:	f04f 0900 	mov.w	r9, #0
 800553a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005698 <_strtod_l+0x5a8>
 800553e:	f8cb 3000 	str.w	r3, [fp]
 8005542:	9b08      	ldr	r3, [sp, #32]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f43f ae12 	beq.w	800516e <_strtod_l+0x7e>
 800554a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800554c:	4658      	mov	r0, fp
 800554e:	f001 fe52 	bl	80071f6 <_Bfree>
 8005552:	9906      	ldr	r1, [sp, #24]
 8005554:	4658      	mov	r0, fp
 8005556:	f001 fe4e 	bl	80071f6 <_Bfree>
 800555a:	9904      	ldr	r1, [sp, #16]
 800555c:	4658      	mov	r0, fp
 800555e:	f001 fe4a 	bl	80071f6 <_Bfree>
 8005562:	9908      	ldr	r1, [sp, #32]
 8005564:	4658      	mov	r0, fp
 8005566:	f001 fe46 	bl	80071f6 <_Bfree>
 800556a:	4641      	mov	r1, r8
 800556c:	4658      	mov	r0, fp
 800556e:	f001 fe42 	bl	80071f6 <_Bfree>
 8005572:	e5fc      	b.n	800516e <_strtod_l+0x7e>
 8005574:	9a07      	ldr	r2, [sp, #28]
 8005576:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800557a:	4293      	cmp	r3, r2
 800557c:	dbb6      	blt.n	80054ec <_strtod_l+0x3fc>
 800557e:	4d44      	ldr	r5, [pc, #272]	; (8005690 <_strtod_l+0x5a0>)
 8005580:	f1c4 040f 	rsb	r4, r4, #15
 8005584:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005588:	464a      	mov	r2, r9
 800558a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800558e:	4653      	mov	r3, sl
 8005590:	f7fa ffa2 	bl	80004d8 <__aeabi_dmul>
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	1b1c      	subs	r4, r3, r4
 8005598:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800559c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055a0:	e789      	b.n	80054b6 <_strtod_l+0x3c6>
 80055a2:	f113 0f16 	cmn.w	r3, #22
 80055a6:	dba1      	blt.n	80054ec <_strtod_l+0x3fc>
 80055a8:	4a39      	ldr	r2, [pc, #228]	; (8005690 <_strtod_l+0x5a0>)
 80055aa:	4648      	mov	r0, r9
 80055ac:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80055b0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80055b4:	4651      	mov	r1, sl
 80055b6:	f7fb f8b9 	bl	800072c <__aeabi_ddiv>
 80055ba:	e77e      	b.n	80054ba <_strtod_l+0x3ca>
 80055bc:	2300      	movs	r3, #0
 80055be:	4648      	mov	r0, r9
 80055c0:	4651      	mov	r1, sl
 80055c2:	461d      	mov	r5, r3
 80055c4:	4e33      	ldr	r6, [pc, #204]	; (8005694 <_strtod_l+0x5a4>)
 80055c6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80055ca:	f1b8 0f01 	cmp.w	r8, #1
 80055ce:	dc21      	bgt.n	8005614 <_strtod_l+0x524>
 80055d0:	b10b      	cbz	r3, 80055d6 <_strtod_l+0x4e6>
 80055d2:	4681      	mov	r9, r0
 80055d4:	468a      	mov	sl, r1
 80055d6:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <_strtod_l+0x5a4>)
 80055d8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80055dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80055e0:	464a      	mov	r2, r9
 80055e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80055e6:	4653      	mov	r3, sl
 80055e8:	f7fa ff76 	bl	80004d8 <__aeabi_dmul>
 80055ec:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <_strtod_l+0x5a8>)
 80055ee:	460a      	mov	r2, r1
 80055f0:	400b      	ands	r3, r1
 80055f2:	492a      	ldr	r1, [pc, #168]	; (800569c <_strtod_l+0x5ac>)
 80055f4:	4681      	mov	r9, r0
 80055f6:	428b      	cmp	r3, r1
 80055f8:	d894      	bhi.n	8005524 <_strtod_l+0x434>
 80055fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80055fe:	428b      	cmp	r3, r1
 8005600:	bf86      	itte	hi
 8005602:	f04f 39ff 	movhi.w	r9, #4294967295
 8005606:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80056a4 <_strtod_l+0x5b4>
 800560a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800560e:	2300      	movs	r3, #0
 8005610:	9305      	str	r3, [sp, #20]
 8005612:	e07b      	b.n	800570c <_strtod_l+0x61c>
 8005614:	f018 0f01 	tst.w	r8, #1
 8005618:	d006      	beq.n	8005628 <_strtod_l+0x538>
 800561a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa ff59 	bl	80004d8 <__aeabi_dmul>
 8005626:	2301      	movs	r3, #1
 8005628:	3501      	adds	r5, #1
 800562a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800562e:	e7cc      	b.n	80055ca <_strtod_l+0x4da>
 8005630:	d0ed      	beq.n	800560e <_strtod_l+0x51e>
 8005632:	f1c8 0800 	rsb	r8, r8, #0
 8005636:	f018 020f 	ands.w	r2, r8, #15
 800563a:	d00a      	beq.n	8005652 <_strtod_l+0x562>
 800563c:	4b14      	ldr	r3, [pc, #80]	; (8005690 <_strtod_l+0x5a0>)
 800563e:	4648      	mov	r0, r9
 8005640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005644:	4651      	mov	r1, sl
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f7fb f86f 	bl	800072c <__aeabi_ddiv>
 800564e:	4681      	mov	r9, r0
 8005650:	468a      	mov	sl, r1
 8005652:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005656:	d0da      	beq.n	800560e <_strtod_l+0x51e>
 8005658:	f1b8 0f1f 	cmp.w	r8, #31
 800565c:	dd24      	ble.n	80056a8 <_strtod_l+0x5b8>
 800565e:	f04f 0800 	mov.w	r8, #0
 8005662:	f8cd 8010 	str.w	r8, [sp, #16]
 8005666:	f8cd 8020 	str.w	r8, [sp, #32]
 800566a:	f8cd 8018 	str.w	r8, [sp, #24]
 800566e:	2322      	movs	r3, #34	; 0x22
 8005670:	f04f 0900 	mov.w	r9, #0
 8005674:	f04f 0a00 	mov.w	sl, #0
 8005678:	f8cb 3000 	str.w	r3, [fp]
 800567c:	e761      	b.n	8005542 <_strtod_l+0x452>
 800567e:	bf00      	nop
 8005680:	08007f81 	.word	0x08007f81
 8005684:	0800800b 	.word	0x0800800b
 8005688:	08007f89 	.word	0x08007f89
 800568c:	08007fcc 	.word	0x08007fcc
 8005690:	08008048 	.word	0x08008048
 8005694:	08008020 	.word	0x08008020
 8005698:	7ff00000 	.word	0x7ff00000
 800569c:	7ca00000 	.word	0x7ca00000
 80056a0:	fff80000 	.word	0xfff80000
 80056a4:	7fefffff 	.word	0x7fefffff
 80056a8:	f018 0310 	ands.w	r3, r8, #16
 80056ac:	bf18      	it	ne
 80056ae:	236a      	movne	r3, #106	; 0x6a
 80056b0:	4648      	mov	r0, r9
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	4651      	mov	r1, sl
 80056b6:	2300      	movs	r3, #0
 80056b8:	4da1      	ldr	r5, [pc, #644]	; (8005940 <_strtod_l+0x850>)
 80056ba:	f1b8 0f00 	cmp.w	r8, #0
 80056be:	f300 8113 	bgt.w	80058e8 <_strtod_l+0x7f8>
 80056c2:	b10b      	cbz	r3, 80056c8 <_strtod_l+0x5d8>
 80056c4:	4681      	mov	r9, r0
 80056c6:	468a      	mov	sl, r1
 80056c8:	9b05      	ldr	r3, [sp, #20]
 80056ca:	b1bb      	cbz	r3, 80056fc <_strtod_l+0x60c>
 80056cc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80056d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	4651      	mov	r1, sl
 80056d8:	dd10      	ble.n	80056fc <_strtod_l+0x60c>
 80056da:	2b1f      	cmp	r3, #31
 80056dc:	f340 8110 	ble.w	8005900 <_strtod_l+0x810>
 80056e0:	2b34      	cmp	r3, #52	; 0x34
 80056e2:	bfd8      	it	le
 80056e4:	f04f 32ff 	movle.w	r2, #4294967295
 80056e8:	f04f 0900 	mov.w	r9, #0
 80056ec:	bfcf      	iteee	gt
 80056ee:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80056f2:	3b20      	suble	r3, #32
 80056f4:	fa02 f303 	lslle.w	r3, r2, r3
 80056f8:	ea03 0a01 	andle.w	sl, r3, r1
 80056fc:	2200      	movs	r2, #0
 80056fe:	2300      	movs	r3, #0
 8005700:	4648      	mov	r0, r9
 8005702:	4651      	mov	r1, sl
 8005704:	f7fb f950 	bl	80009a8 <__aeabi_dcmpeq>
 8005708:	2800      	cmp	r0, #0
 800570a:	d1a8      	bne.n	800565e <_strtod_l+0x56e>
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	9a04      	ldr	r2, [sp, #16]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	9908      	ldr	r1, [sp, #32]
 8005714:	4623      	mov	r3, r4
 8005716:	4658      	mov	r0, fp
 8005718:	f001 fdbf 	bl	800729a <__s2b>
 800571c:	9008      	str	r0, [sp, #32]
 800571e:	2800      	cmp	r0, #0
 8005720:	f43f af00 	beq.w	8005524 <_strtod_l+0x434>
 8005724:	9a07      	ldr	r2, [sp, #28]
 8005726:	9b07      	ldr	r3, [sp, #28]
 8005728:	2a00      	cmp	r2, #0
 800572a:	f1c3 0300 	rsb	r3, r3, #0
 800572e:	bfa8      	it	ge
 8005730:	2300      	movge	r3, #0
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	930e      	str	r3, [sp, #56]	; 0x38
 8005738:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800573c:	9316      	str	r3, [sp, #88]	; 0x58
 800573e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005742:	9b08      	ldr	r3, [sp, #32]
 8005744:	4658      	mov	r0, fp
 8005746:	6859      	ldr	r1, [r3, #4]
 8005748:	f001 fd21 	bl	800718e <_Balloc>
 800574c:	9006      	str	r0, [sp, #24]
 800574e:	2800      	cmp	r0, #0
 8005750:	f43f aef0 	beq.w	8005534 <_strtod_l+0x444>
 8005754:	9b08      	ldr	r3, [sp, #32]
 8005756:	300c      	adds	r0, #12
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	f103 010c 	add.w	r1, r3, #12
 800575e:	3202      	adds	r2, #2
 8005760:	0092      	lsls	r2, r2, #2
 8005762:	f001 fd09 	bl	8007178 <memcpy>
 8005766:	ab1e      	add	r3, sp, #120	; 0x78
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	ab1d      	add	r3, sp, #116	; 0x74
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	464a      	mov	r2, r9
 8005770:	4653      	mov	r3, sl
 8005772:	4658      	mov	r0, fp
 8005774:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005778:	f002 f84a 	bl	8007810 <__d2b>
 800577c:	901c      	str	r0, [sp, #112]	; 0x70
 800577e:	2800      	cmp	r0, #0
 8005780:	f43f aed8 	beq.w	8005534 <_strtod_l+0x444>
 8005784:	2101      	movs	r1, #1
 8005786:	4658      	mov	r0, fp
 8005788:	f001 fe13 	bl	80073b2 <__i2b>
 800578c:	9004      	str	r0, [sp, #16]
 800578e:	4603      	mov	r3, r0
 8005790:	2800      	cmp	r0, #0
 8005792:	f43f aecf 	beq.w	8005534 <_strtod_l+0x444>
 8005796:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005798:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800579a:	2d00      	cmp	r5, #0
 800579c:	bfab      	itete	ge
 800579e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057a0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80057a2:	18ee      	addge	r6, r5, r3
 80057a4:	1b5c      	sublt	r4, r3, r5
 80057a6:	9b05      	ldr	r3, [sp, #20]
 80057a8:	bfa8      	it	ge
 80057aa:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80057ac:	eba5 0503 	sub.w	r5, r5, r3
 80057b0:	4415      	add	r5, r2
 80057b2:	4b64      	ldr	r3, [pc, #400]	; (8005944 <_strtod_l+0x854>)
 80057b4:	f105 35ff 	add.w	r5, r5, #4294967295
 80057b8:	bfb8      	it	lt
 80057ba:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80057bc:	429d      	cmp	r5, r3
 80057be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057c2:	f280 80af 	bge.w	8005924 <_strtod_l+0x834>
 80057c6:	1b5b      	subs	r3, r3, r5
 80057c8:	2b1f      	cmp	r3, #31
 80057ca:	eba2 0203 	sub.w	r2, r2, r3
 80057ce:	f04f 0701 	mov.w	r7, #1
 80057d2:	f300 809c 	bgt.w	800590e <_strtod_l+0x81e>
 80057d6:	2500      	movs	r5, #0
 80057d8:	fa07 f303 	lsl.w	r3, r7, r3
 80057dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80057de:	18b7      	adds	r7, r6, r2
 80057e0:	9b05      	ldr	r3, [sp, #20]
 80057e2:	42be      	cmp	r6, r7
 80057e4:	4414      	add	r4, r2
 80057e6:	441c      	add	r4, r3
 80057e8:	4633      	mov	r3, r6
 80057ea:	bfa8      	it	ge
 80057ec:	463b      	movge	r3, r7
 80057ee:	42a3      	cmp	r3, r4
 80057f0:	bfa8      	it	ge
 80057f2:	4623      	movge	r3, r4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bfc2      	ittt	gt
 80057f8:	1aff      	subgt	r7, r7, r3
 80057fa:	1ae4      	subgt	r4, r4, r3
 80057fc:	1af6      	subgt	r6, r6, r3
 80057fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005800:	b1bb      	cbz	r3, 8005832 <_strtod_l+0x742>
 8005802:	461a      	mov	r2, r3
 8005804:	9904      	ldr	r1, [sp, #16]
 8005806:	4658      	mov	r0, fp
 8005808:	f001 fe72 	bl	80074f0 <__pow5mult>
 800580c:	9004      	str	r0, [sp, #16]
 800580e:	2800      	cmp	r0, #0
 8005810:	f43f ae90 	beq.w	8005534 <_strtod_l+0x444>
 8005814:	4601      	mov	r1, r0
 8005816:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005818:	4658      	mov	r0, fp
 800581a:	f001 fdd3 	bl	80073c4 <__multiply>
 800581e:	9009      	str	r0, [sp, #36]	; 0x24
 8005820:	2800      	cmp	r0, #0
 8005822:	f43f ae87 	beq.w	8005534 <_strtod_l+0x444>
 8005826:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005828:	4658      	mov	r0, fp
 800582a:	f001 fce4 	bl	80071f6 <_Bfree>
 800582e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005830:	931c      	str	r3, [sp, #112]	; 0x70
 8005832:	2f00      	cmp	r7, #0
 8005834:	dc7a      	bgt.n	800592c <_strtod_l+0x83c>
 8005836:	9b07      	ldr	r3, [sp, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	dd08      	ble.n	800584e <_strtod_l+0x75e>
 800583c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800583e:	9906      	ldr	r1, [sp, #24]
 8005840:	4658      	mov	r0, fp
 8005842:	f001 fe55 	bl	80074f0 <__pow5mult>
 8005846:	9006      	str	r0, [sp, #24]
 8005848:	2800      	cmp	r0, #0
 800584a:	f43f ae73 	beq.w	8005534 <_strtod_l+0x444>
 800584e:	2c00      	cmp	r4, #0
 8005850:	dd08      	ble.n	8005864 <_strtod_l+0x774>
 8005852:	4622      	mov	r2, r4
 8005854:	9906      	ldr	r1, [sp, #24]
 8005856:	4658      	mov	r0, fp
 8005858:	f001 fe98 	bl	800758c <__lshift>
 800585c:	9006      	str	r0, [sp, #24]
 800585e:	2800      	cmp	r0, #0
 8005860:	f43f ae68 	beq.w	8005534 <_strtod_l+0x444>
 8005864:	2e00      	cmp	r6, #0
 8005866:	dd08      	ble.n	800587a <_strtod_l+0x78a>
 8005868:	4632      	mov	r2, r6
 800586a:	9904      	ldr	r1, [sp, #16]
 800586c:	4658      	mov	r0, fp
 800586e:	f001 fe8d 	bl	800758c <__lshift>
 8005872:	9004      	str	r0, [sp, #16]
 8005874:	2800      	cmp	r0, #0
 8005876:	f43f ae5d 	beq.w	8005534 <_strtod_l+0x444>
 800587a:	9a06      	ldr	r2, [sp, #24]
 800587c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800587e:	4658      	mov	r0, fp
 8005880:	f001 fef2 	bl	8007668 <__mdiff>
 8005884:	4680      	mov	r8, r0
 8005886:	2800      	cmp	r0, #0
 8005888:	f43f ae54 	beq.w	8005534 <_strtod_l+0x444>
 800588c:	2400      	movs	r4, #0
 800588e:	68c3      	ldr	r3, [r0, #12]
 8005890:	9904      	ldr	r1, [sp, #16]
 8005892:	60c4      	str	r4, [r0, #12]
 8005894:	930c      	str	r3, [sp, #48]	; 0x30
 8005896:	f001 fecd 	bl	8007634 <__mcmp>
 800589a:	42a0      	cmp	r0, r4
 800589c:	da54      	bge.n	8005948 <_strtod_l+0x858>
 800589e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058a0:	b9f3      	cbnz	r3, 80058e0 <_strtod_l+0x7f0>
 80058a2:	f1b9 0f00 	cmp.w	r9, #0
 80058a6:	d11b      	bne.n	80058e0 <_strtod_l+0x7f0>
 80058a8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80058ac:	b9c3      	cbnz	r3, 80058e0 <_strtod_l+0x7f0>
 80058ae:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80058b2:	0d1b      	lsrs	r3, r3, #20
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058ba:	d911      	bls.n	80058e0 <_strtod_l+0x7f0>
 80058bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80058c0:	b91b      	cbnz	r3, 80058ca <_strtod_l+0x7da>
 80058c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	dd0a      	ble.n	80058e0 <_strtod_l+0x7f0>
 80058ca:	4641      	mov	r1, r8
 80058cc:	2201      	movs	r2, #1
 80058ce:	4658      	mov	r0, fp
 80058d0:	f001 fe5c 	bl	800758c <__lshift>
 80058d4:	9904      	ldr	r1, [sp, #16]
 80058d6:	4680      	mov	r8, r0
 80058d8:	f001 feac 	bl	8007634 <__mcmp>
 80058dc:	2800      	cmp	r0, #0
 80058de:	dc68      	bgt.n	80059b2 <_strtod_l+0x8c2>
 80058e0:	9b05      	ldr	r3, [sp, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d172      	bne.n	80059cc <_strtod_l+0x8dc>
 80058e6:	e630      	b.n	800554a <_strtod_l+0x45a>
 80058e8:	f018 0f01 	tst.w	r8, #1
 80058ec:	d004      	beq.n	80058f8 <_strtod_l+0x808>
 80058ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058f2:	f7fa fdf1 	bl	80004d8 <__aeabi_dmul>
 80058f6:	2301      	movs	r3, #1
 80058f8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058fc:	3508      	adds	r5, #8
 80058fe:	e6dc      	b.n	80056ba <_strtod_l+0x5ca>
 8005900:	f04f 32ff 	mov.w	r2, #4294967295
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	ea03 0909 	and.w	r9, r3, r9
 800590c:	e6f6      	b.n	80056fc <_strtod_l+0x60c>
 800590e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005912:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005916:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800591a:	35e2      	adds	r5, #226	; 0xe2
 800591c:	fa07 f505 	lsl.w	r5, r7, r5
 8005920:	970f      	str	r7, [sp, #60]	; 0x3c
 8005922:	e75c      	b.n	80057de <_strtod_l+0x6ee>
 8005924:	2301      	movs	r3, #1
 8005926:	2500      	movs	r5, #0
 8005928:	930f      	str	r3, [sp, #60]	; 0x3c
 800592a:	e758      	b.n	80057de <_strtod_l+0x6ee>
 800592c:	463a      	mov	r2, r7
 800592e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005930:	4658      	mov	r0, fp
 8005932:	f001 fe2b 	bl	800758c <__lshift>
 8005936:	901c      	str	r0, [sp, #112]	; 0x70
 8005938:	2800      	cmp	r0, #0
 800593a:	f47f af7c 	bne.w	8005836 <_strtod_l+0x746>
 800593e:	e5f9      	b.n	8005534 <_strtod_l+0x444>
 8005940:	08007fe0 	.word	0x08007fe0
 8005944:	fffffc02 	.word	0xfffffc02
 8005948:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800594c:	f040 8089 	bne.w	8005a62 <_strtod_l+0x972>
 8005950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005952:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005956:	b342      	cbz	r2, 80059aa <_strtod_l+0x8ba>
 8005958:	4aaf      	ldr	r2, [pc, #700]	; (8005c18 <_strtod_l+0xb28>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d156      	bne.n	8005a0c <_strtod_l+0x91c>
 800595e:	9b05      	ldr	r3, [sp, #20]
 8005960:	4648      	mov	r0, r9
 8005962:	b1eb      	cbz	r3, 80059a0 <_strtod_l+0x8b0>
 8005964:	4653      	mov	r3, sl
 8005966:	4aad      	ldr	r2, [pc, #692]	; (8005c1c <_strtod_l+0xb2c>)
 8005968:	f04f 31ff 	mov.w	r1, #4294967295
 800596c:	401a      	ands	r2, r3
 800596e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005972:	d818      	bhi.n	80059a6 <_strtod_l+0x8b6>
 8005974:	0d12      	lsrs	r2, r2, #20
 8005976:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	4298      	cmp	r0, r3
 8005980:	d144      	bne.n	8005a0c <_strtod_l+0x91c>
 8005982:	4ba7      	ldr	r3, [pc, #668]	; (8005c20 <_strtod_l+0xb30>)
 8005984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005986:	429a      	cmp	r2, r3
 8005988:	d102      	bne.n	8005990 <_strtod_l+0x8a0>
 800598a:	3001      	adds	r0, #1
 800598c:	f43f add2 	beq.w	8005534 <_strtod_l+0x444>
 8005990:	4ba2      	ldr	r3, [pc, #648]	; (8005c1c <_strtod_l+0xb2c>)
 8005992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005994:	f04f 0900 	mov.w	r9, #0
 8005998:	401a      	ands	r2, r3
 800599a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800599e:	e79f      	b.n	80058e0 <_strtod_l+0x7f0>
 80059a0:	f04f 33ff 	mov.w	r3, #4294967295
 80059a4:	e7eb      	b.n	800597e <_strtod_l+0x88e>
 80059a6:	460b      	mov	r3, r1
 80059a8:	e7e9      	b.n	800597e <_strtod_l+0x88e>
 80059aa:	bb7b      	cbnz	r3, 8005a0c <_strtod_l+0x91c>
 80059ac:	f1b9 0f00 	cmp.w	r9, #0
 80059b0:	d12c      	bne.n	8005a0c <_strtod_l+0x91c>
 80059b2:	9905      	ldr	r1, [sp, #20]
 80059b4:	4653      	mov	r3, sl
 80059b6:	4a99      	ldr	r2, [pc, #612]	; (8005c1c <_strtod_l+0xb2c>)
 80059b8:	b1f1      	cbz	r1, 80059f8 <_strtod_l+0x908>
 80059ba:	ea02 010a 	and.w	r1, r2, sl
 80059be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80059c2:	dc19      	bgt.n	80059f8 <_strtod_l+0x908>
 80059c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80059c8:	f77f ae51 	ble.w	800566e <_strtod_l+0x57e>
 80059cc:	2300      	movs	r3, #0
 80059ce:	4a95      	ldr	r2, [pc, #596]	; (8005c24 <_strtod_l+0xb34>)
 80059d0:	4648      	mov	r0, r9
 80059d2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80059d6:	4651      	mov	r1, sl
 80059d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80059dc:	f7fa fd7c 	bl	80004d8 <__aeabi_dmul>
 80059e0:	4681      	mov	r9, r0
 80059e2:	468a      	mov	sl, r1
 80059e4:	2900      	cmp	r1, #0
 80059e6:	f47f adb0 	bne.w	800554a <_strtod_l+0x45a>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f47f adad 	bne.w	800554a <_strtod_l+0x45a>
 80059f0:	2322      	movs	r3, #34	; 0x22
 80059f2:	f8cb 3000 	str.w	r3, [fp]
 80059f6:	e5a8      	b.n	800554a <_strtod_l+0x45a>
 80059f8:	4013      	ands	r3, r2
 80059fa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80059fe:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005a02:	f04f 39ff 	mov.w	r9, #4294967295
 8005a06:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005a0a:	e769      	b.n	80058e0 <_strtod_l+0x7f0>
 8005a0c:	b19d      	cbz	r5, 8005a36 <_strtod_l+0x946>
 8005a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a10:	421d      	tst	r5, r3
 8005a12:	f43f af65 	beq.w	80058e0 <_strtod_l+0x7f0>
 8005a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a18:	9a05      	ldr	r2, [sp, #20]
 8005a1a:	4648      	mov	r0, r9
 8005a1c:	4651      	mov	r1, sl
 8005a1e:	b173      	cbz	r3, 8005a3e <_strtod_l+0x94e>
 8005a20:	f7ff fb44 	bl	80050ac <sulp>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a2c:	f7fa fb9e 	bl	800016c <__adddf3>
 8005a30:	4681      	mov	r9, r0
 8005a32:	468a      	mov	sl, r1
 8005a34:	e754      	b.n	80058e0 <_strtod_l+0x7f0>
 8005a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a38:	ea13 0f09 	tst.w	r3, r9
 8005a3c:	e7e9      	b.n	8005a12 <_strtod_l+0x922>
 8005a3e:	f7ff fb35 	bl	80050ac <sulp>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a4a:	f7fa fb8d 	bl	8000168 <__aeabi_dsub>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2300      	movs	r3, #0
 8005a52:	4681      	mov	r9, r0
 8005a54:	468a      	mov	sl, r1
 8005a56:	f7fa ffa7 	bl	80009a8 <__aeabi_dcmpeq>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f47f ae07 	bne.w	800566e <_strtod_l+0x57e>
 8005a60:	e73e      	b.n	80058e0 <_strtod_l+0x7f0>
 8005a62:	9904      	ldr	r1, [sp, #16]
 8005a64:	4640      	mov	r0, r8
 8005a66:	f001 ff22 	bl	80078ae <__ratio>
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a70:	4606      	mov	r6, r0
 8005a72:	460f      	mov	r7, r1
 8005a74:	f7fa ffac 	bl	80009d0 <__aeabi_dcmple>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d075      	beq.n	8005b68 <_strtod_l+0xa78>
 8005a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d047      	beq.n	8005b12 <_strtod_l+0xa22>
 8005a82:	2600      	movs	r6, #0
 8005a84:	4f68      	ldr	r7, [pc, #416]	; (8005c28 <_strtod_l+0xb38>)
 8005a86:	4d68      	ldr	r5, [pc, #416]	; (8005c28 <_strtod_l+0xb38>)
 8005a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a8e:	0d1b      	lsrs	r3, r3, #20
 8005a90:	051b      	lsls	r3, r3, #20
 8005a92:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a96:	4b65      	ldr	r3, [pc, #404]	; (8005c2c <_strtod_l+0xb3c>)
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	f040 80cf 	bne.w	8005c3c <_strtod_l+0xb4c>
 8005a9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005aa2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa8:	4648      	mov	r0, r9
 8005aaa:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005aae:	4651      	mov	r1, sl
 8005ab0:	f001 fe38 	bl	8007724 <__ulp>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4639      	mov	r1, r7
 8005abc:	f7fa fd0c 	bl	80004d8 <__aeabi_dmul>
 8005ac0:	464a      	mov	r2, r9
 8005ac2:	4653      	mov	r3, sl
 8005ac4:	f7fa fb52 	bl	800016c <__adddf3>
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4954      	ldr	r1, [pc, #336]	; (8005c1c <_strtod_l+0xb2c>)
 8005acc:	4a58      	ldr	r2, [pc, #352]	; (8005c30 <_strtod_l+0xb40>)
 8005ace:	4019      	ands	r1, r3
 8005ad0:	4291      	cmp	r1, r2
 8005ad2:	4681      	mov	r9, r0
 8005ad4:	d95e      	bls.n	8005b94 <_strtod_l+0xaa4>
 8005ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ad8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <_strtod_l+0x9f8>
 8005ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	f43f ad26 	beq.w	8005534 <_strtod_l+0x444>
 8005ae8:	f04f 39ff 	mov.w	r9, #4294967295
 8005aec:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005c20 <_strtod_l+0xb30>
 8005af0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005af2:	4658      	mov	r0, fp
 8005af4:	f001 fb7f 	bl	80071f6 <_Bfree>
 8005af8:	9906      	ldr	r1, [sp, #24]
 8005afa:	4658      	mov	r0, fp
 8005afc:	f001 fb7b 	bl	80071f6 <_Bfree>
 8005b00:	9904      	ldr	r1, [sp, #16]
 8005b02:	4658      	mov	r0, fp
 8005b04:	f001 fb77 	bl	80071f6 <_Bfree>
 8005b08:	4641      	mov	r1, r8
 8005b0a:	4658      	mov	r0, fp
 8005b0c:	f001 fb73 	bl	80071f6 <_Bfree>
 8005b10:	e617      	b.n	8005742 <_strtod_l+0x652>
 8005b12:	f1b9 0f00 	cmp.w	r9, #0
 8005b16:	d119      	bne.n	8005b4c <_strtod_l+0xa5c>
 8005b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b1e:	b9e3      	cbnz	r3, 8005b5a <_strtod_l+0xa6a>
 8005b20:	2200      	movs	r2, #0
 8005b22:	4b41      	ldr	r3, [pc, #260]	; (8005c28 <_strtod_l+0xb38>)
 8005b24:	4630      	mov	r0, r6
 8005b26:	4639      	mov	r1, r7
 8005b28:	f7fa ff48 	bl	80009bc <__aeabi_dcmplt>
 8005b2c:	b9c8      	cbnz	r0, 8005b62 <_strtod_l+0xa72>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	4b40      	ldr	r3, [pc, #256]	; (8005c34 <_strtod_l+0xb44>)
 8005b32:	4630      	mov	r0, r6
 8005b34:	4639      	mov	r1, r7
 8005b36:	f7fa fccf 	bl	80004d8 <__aeabi_dmul>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b42:	9418      	str	r4, [sp, #96]	; 0x60
 8005b44:	9319      	str	r3, [sp, #100]	; 0x64
 8005b46:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005b4a:	e79d      	b.n	8005a88 <_strtod_l+0x998>
 8005b4c:	f1b9 0f01 	cmp.w	r9, #1
 8005b50:	d103      	bne.n	8005b5a <_strtod_l+0xa6a>
 8005b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f43f ad8a 	beq.w	800566e <_strtod_l+0x57e>
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	4f36      	ldr	r7, [pc, #216]	; (8005c38 <_strtod_l+0xb48>)
 8005b5e:	2400      	movs	r4, #0
 8005b60:	e791      	b.n	8005a86 <_strtod_l+0x996>
 8005b62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005b64:	4d33      	ldr	r5, [pc, #204]	; (8005c34 <_strtod_l+0xb44>)
 8005b66:	e7ea      	b.n	8005b3e <_strtod_l+0xa4e>
 8005b68:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <_strtod_l+0xb44>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	4639      	mov	r1, r7
 8005b70:	f7fa fcb2 	bl	80004d8 <__aeabi_dmul>
 8005b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b76:	4604      	mov	r4, r0
 8005b78:	460d      	mov	r5, r1
 8005b7a:	b933      	cbnz	r3, 8005b8a <_strtod_l+0xa9a>
 8005b7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b80:	9010      	str	r0, [sp, #64]	; 0x40
 8005b82:	9311      	str	r3, [sp, #68]	; 0x44
 8005b84:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b88:	e77e      	b.n	8005a88 <_strtod_l+0x998>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005b92:	e7f7      	b.n	8005b84 <_strtod_l+0xa94>
 8005b94:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005b98:	9b05      	ldr	r3, [sp, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1a8      	bne.n	8005af0 <_strtod_l+0xa00>
 8005b9e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005ba2:	0d1b      	lsrs	r3, r3, #20
 8005ba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ba6:	051b      	lsls	r3, r3, #20
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	4656      	mov	r6, sl
 8005bac:	d1a0      	bne.n	8005af0 <_strtod_l+0xa00>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f7fa ff41 	bl	8000a38 <__aeabi_d2iz>
 8005bb6:	f7fa fc25 	bl	8000404 <__aeabi_i2d>
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f7fa fad1 	bl	8000168 <__aeabi_dsub>
 8005bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bc8:	4604      	mov	r4, r0
 8005bca:	460d      	mov	r5, r1
 8005bcc:	b933      	cbnz	r3, 8005bdc <_strtod_l+0xaec>
 8005bce:	f1b9 0f00 	cmp.w	r9, #0
 8005bd2:	d103      	bne.n	8005bdc <_strtod_l+0xaec>
 8005bd4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005bd8:	2e00      	cmp	r6, #0
 8005bda:	d06a      	beq.n	8005cb2 <_strtod_l+0xbc2>
 8005bdc:	a30a      	add	r3, pc, #40	; (adr r3, 8005c08 <_strtod_l+0xb18>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	4620      	mov	r0, r4
 8005be4:	4629      	mov	r1, r5
 8005be6:	f7fa fee9 	bl	80009bc <__aeabi_dcmplt>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	f47f acad 	bne.w	800554a <_strtod_l+0x45a>
 8005bf0:	a307      	add	r3, pc, #28	; (adr r3, 8005c10 <_strtod_l+0xb20>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f7fa fefd 	bl	80009f8 <__aeabi_dcmpgt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f43f af76 	beq.w	8005af0 <_strtod_l+0xa00>
 8005c04:	e4a1      	b.n	800554a <_strtod_l+0x45a>
 8005c06:	bf00      	nop
 8005c08:	94a03595 	.word	0x94a03595
 8005c0c:	3fdfffff 	.word	0x3fdfffff
 8005c10:	35afe535 	.word	0x35afe535
 8005c14:	3fe00000 	.word	0x3fe00000
 8005c18:	000fffff 	.word	0x000fffff
 8005c1c:	7ff00000 	.word	0x7ff00000
 8005c20:	7fefffff 	.word	0x7fefffff
 8005c24:	39500000 	.word	0x39500000
 8005c28:	3ff00000 	.word	0x3ff00000
 8005c2c:	7fe00000 	.word	0x7fe00000
 8005c30:	7c9fffff 	.word	0x7c9fffff
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	bff00000 	.word	0xbff00000
 8005c3c:	9b05      	ldr	r3, [sp, #20]
 8005c3e:	b313      	cbz	r3, 8005c86 <_strtod_l+0xb96>
 8005c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c46:	d81e      	bhi.n	8005c86 <_strtod_l+0xb96>
 8005c48:	a325      	add	r3, pc, #148	; (adr r3, 8005ce0 <_strtod_l+0xbf0>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	4620      	mov	r0, r4
 8005c50:	4629      	mov	r1, r5
 8005c52:	f7fa febd 	bl	80009d0 <__aeabi_dcmple>
 8005c56:	b190      	cbz	r0, 8005c7e <_strtod_l+0xb8e>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7fa ff14 	bl	8000a88 <__aeabi_d2uiz>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	bf08      	it	eq
 8005c64:	2001      	moveq	r0, #1
 8005c66:	f7fa fbbd 	bl	80003e4 <__aeabi_ui2d>
 8005c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	460d      	mov	r5, r1
 8005c70:	b9d3      	cbnz	r3, 8005ca8 <_strtod_l+0xbb8>
 8005c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c76:	9012      	str	r0, [sp, #72]	; 0x48
 8005c78:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c7a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005c7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c80:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005c84:	1a9f      	subs	r7, r3, r2
 8005c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c8a:	f001 fd4b 	bl	8007724 <__ulp>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4630      	mov	r0, r6
 8005c94:	4639      	mov	r1, r7
 8005c96:	f7fa fc1f 	bl	80004d8 <__aeabi_dmul>
 8005c9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c9e:	f7fa fa65 	bl	800016c <__adddf3>
 8005ca2:	4681      	mov	r9, r0
 8005ca4:	468a      	mov	sl, r1
 8005ca6:	e777      	b.n	8005b98 <_strtod_l+0xaa8>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005cb0:	e7e3      	b.n	8005c7a <_strtod_l+0xb8a>
 8005cb2:	a30d      	add	r3, pc, #52	; (adr r3, 8005ce8 <_strtod_l+0xbf8>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fe80 	bl	80009bc <__aeabi_dcmplt>
 8005cbc:	e79f      	b.n	8005bfe <_strtod_l+0xb0e>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	930d      	str	r3, [sp, #52]	; 0x34
 8005cc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	f7ff ba55 	b.w	8005176 <_strtod_l+0x86>
 8005ccc:	2b65      	cmp	r3, #101	; 0x65
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f43f ab42 	beq.w	800535a <_strtod_l+0x26a>
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4614      	mov	r4, r2
 8005cda:	9105      	str	r1, [sp, #20]
 8005cdc:	f7ff babf 	b.w	800525e <_strtod_l+0x16e>
 8005ce0:	ffc00000 	.word	0xffc00000
 8005ce4:	41dfffff 	.word	0x41dfffff
 8005ce8:	94a03595 	.word	0x94a03595
 8005cec:	3fcfffff 	.word	0x3fcfffff

08005cf0 <_strtod_r>:
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <_strtod_r+0x18>)
 8005cf2:	b410      	push	{r4}
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4c05      	ldr	r4, [pc, #20]	; (8005d0c <_strtod_r+0x1c>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bf08      	it	eq
 8005cfe:	4623      	moveq	r3, r4
 8005d00:	bc10      	pop	{r4}
 8005d02:	f7ff b9f5 	b.w	80050f0 <_strtod_l>
 8005d06:	bf00      	nop
 8005d08:	20000018 	.word	0x20000018
 8005d0c:	2000007c 	.word	0x2000007c

08005d10 <_strtol_l.isra.0>:
 8005d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d14:	4680      	mov	r8, r0
 8005d16:	4689      	mov	r9, r1
 8005d18:	4692      	mov	sl, r2
 8005d1a:	461e      	mov	r6, r3
 8005d1c:	460f      	mov	r7, r1
 8005d1e:	463d      	mov	r5, r7
 8005d20:	9808      	ldr	r0, [sp, #32]
 8005d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d26:	f001 f9eb 	bl	8007100 <__locale_ctype_ptr_l>
 8005d2a:	4420      	add	r0, r4
 8005d2c:	7843      	ldrb	r3, [r0, #1]
 8005d2e:	f013 0308 	ands.w	r3, r3, #8
 8005d32:	d132      	bne.n	8005d9a <_strtol_l.isra.0+0x8a>
 8005d34:	2c2d      	cmp	r4, #45	; 0x2d
 8005d36:	d132      	bne.n	8005d9e <_strtol_l.isra.0+0x8e>
 8005d38:	2201      	movs	r2, #1
 8005d3a:	787c      	ldrb	r4, [r7, #1]
 8005d3c:	1cbd      	adds	r5, r7, #2
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	d05d      	beq.n	8005dfe <_strtol_l.isra.0+0xee>
 8005d42:	2e10      	cmp	r6, #16
 8005d44:	d109      	bne.n	8005d5a <_strtol_l.isra.0+0x4a>
 8005d46:	2c30      	cmp	r4, #48	; 0x30
 8005d48:	d107      	bne.n	8005d5a <_strtol_l.isra.0+0x4a>
 8005d4a:	782b      	ldrb	r3, [r5, #0]
 8005d4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d50:	2b58      	cmp	r3, #88	; 0x58
 8005d52:	d14f      	bne.n	8005df4 <_strtol_l.isra.0+0xe4>
 8005d54:	2610      	movs	r6, #16
 8005d56:	786c      	ldrb	r4, [r5, #1]
 8005d58:	3502      	adds	r5, #2
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	bf14      	ite	ne
 8005d5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005d62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005d66:	2700      	movs	r7, #0
 8005d68:	fbb1 fcf6 	udiv	ip, r1, r6
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005d72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	d817      	bhi.n	8005daa <_strtol_l.isra.0+0x9a>
 8005d7a:	461c      	mov	r4, r3
 8005d7c:	42a6      	cmp	r6, r4
 8005d7e:	dd23      	ble.n	8005dc8 <_strtol_l.isra.0+0xb8>
 8005d80:	1c7b      	adds	r3, r7, #1
 8005d82:	d007      	beq.n	8005d94 <_strtol_l.isra.0+0x84>
 8005d84:	4584      	cmp	ip, r0
 8005d86:	d31c      	bcc.n	8005dc2 <_strtol_l.isra.0+0xb2>
 8005d88:	d101      	bne.n	8005d8e <_strtol_l.isra.0+0x7e>
 8005d8a:	45a6      	cmp	lr, r4
 8005d8c:	db19      	blt.n	8005dc2 <_strtol_l.isra.0+0xb2>
 8005d8e:	2701      	movs	r7, #1
 8005d90:	fb00 4006 	mla	r0, r0, r6, r4
 8005d94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d98:	e7eb      	b.n	8005d72 <_strtol_l.isra.0+0x62>
 8005d9a:	462f      	mov	r7, r5
 8005d9c:	e7bf      	b.n	8005d1e <_strtol_l.isra.0+0xe>
 8005d9e:	2c2b      	cmp	r4, #43	; 0x2b
 8005da0:	bf04      	itt	eq
 8005da2:	1cbd      	addeq	r5, r7, #2
 8005da4:	787c      	ldrbeq	r4, [r7, #1]
 8005da6:	461a      	mov	r2, r3
 8005da8:	e7c9      	b.n	8005d3e <_strtol_l.isra.0+0x2e>
 8005daa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005dae:	2b19      	cmp	r3, #25
 8005db0:	d801      	bhi.n	8005db6 <_strtol_l.isra.0+0xa6>
 8005db2:	3c37      	subs	r4, #55	; 0x37
 8005db4:	e7e2      	b.n	8005d7c <_strtol_l.isra.0+0x6c>
 8005db6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005dba:	2b19      	cmp	r3, #25
 8005dbc:	d804      	bhi.n	8005dc8 <_strtol_l.isra.0+0xb8>
 8005dbe:	3c57      	subs	r4, #87	; 0x57
 8005dc0:	e7dc      	b.n	8005d7c <_strtol_l.isra.0+0x6c>
 8005dc2:	f04f 37ff 	mov.w	r7, #4294967295
 8005dc6:	e7e5      	b.n	8005d94 <_strtol_l.isra.0+0x84>
 8005dc8:	1c7b      	adds	r3, r7, #1
 8005dca:	d108      	bne.n	8005dde <_strtol_l.isra.0+0xce>
 8005dcc:	2322      	movs	r3, #34	; 0x22
 8005dce:	4608      	mov	r0, r1
 8005dd0:	f8c8 3000 	str.w	r3, [r8]
 8005dd4:	f1ba 0f00 	cmp.w	sl, #0
 8005dd8:	d107      	bne.n	8005dea <_strtol_l.isra.0+0xda>
 8005dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dde:	b102      	cbz	r2, 8005de2 <_strtol_l.isra.0+0xd2>
 8005de0:	4240      	negs	r0, r0
 8005de2:	f1ba 0f00 	cmp.w	sl, #0
 8005de6:	d0f8      	beq.n	8005dda <_strtol_l.isra.0+0xca>
 8005de8:	b10f      	cbz	r7, 8005dee <_strtol_l.isra.0+0xde>
 8005dea:	f105 39ff 	add.w	r9, r5, #4294967295
 8005dee:	f8ca 9000 	str.w	r9, [sl]
 8005df2:	e7f2      	b.n	8005dda <_strtol_l.isra.0+0xca>
 8005df4:	2430      	movs	r4, #48	; 0x30
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	d1af      	bne.n	8005d5a <_strtol_l.isra.0+0x4a>
 8005dfa:	2608      	movs	r6, #8
 8005dfc:	e7ad      	b.n	8005d5a <_strtol_l.isra.0+0x4a>
 8005dfe:	2c30      	cmp	r4, #48	; 0x30
 8005e00:	d0a3      	beq.n	8005d4a <_strtol_l.isra.0+0x3a>
 8005e02:	260a      	movs	r6, #10
 8005e04:	e7a9      	b.n	8005d5a <_strtol_l.isra.0+0x4a>
	...

08005e08 <_strtol_r>:
 8005e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0a:	4c06      	ldr	r4, [pc, #24]	; (8005e24 <_strtol_r+0x1c>)
 8005e0c:	4d06      	ldr	r5, [pc, #24]	; (8005e28 <_strtol_r+0x20>)
 8005e0e:	6824      	ldr	r4, [r4, #0]
 8005e10:	6a24      	ldr	r4, [r4, #32]
 8005e12:	2c00      	cmp	r4, #0
 8005e14:	bf08      	it	eq
 8005e16:	462c      	moveq	r4, r5
 8005e18:	9400      	str	r4, [sp, #0]
 8005e1a:	f7ff ff79 	bl	8005d10 <_strtol_l.isra.0>
 8005e1e:	b003      	add	sp, #12
 8005e20:	bd30      	pop	{r4, r5, pc}
 8005e22:	bf00      	nop
 8005e24:	20000018 	.word	0x20000018
 8005e28:	2000007c 	.word	0x2000007c

08005e2c <quorem>:
 8005e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	6903      	ldr	r3, [r0, #16]
 8005e32:	690c      	ldr	r4, [r1, #16]
 8005e34:	4680      	mov	r8, r0
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	f2c0 8084 	blt.w	8005f44 <quorem+0x118>
 8005e3c:	3c01      	subs	r4, #1
 8005e3e:	f101 0714 	add.w	r7, r1, #20
 8005e42:	f100 0614 	add.w	r6, r0, #20
 8005e46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005e4e:	3501      	adds	r5, #1
 8005e50:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e54:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005e58:	eb06 030c 	add.w	r3, r6, ip
 8005e5c:	eb07 090c 	add.w	r9, r7, ip
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	b39d      	cbz	r5, 8005ecc <quorem+0xa0>
 8005e64:	f04f 0a00 	mov.w	sl, #0
 8005e68:	4638      	mov	r0, r7
 8005e6a:	46b6      	mov	lr, r6
 8005e6c:	46d3      	mov	fp, sl
 8005e6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e72:	b293      	uxth	r3, r2
 8005e74:	fb05 a303 	mla	r3, r5, r3, sl
 8005e78:	0c12      	lsrs	r2, r2, #16
 8005e7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e7e:	fb05 a202 	mla	r2, r5, r2, sl
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ebab 0303 	sub.w	r3, fp, r3
 8005e88:	f8de b000 	ldr.w	fp, [lr]
 8005e8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005e90:	fa1f fb8b 	uxth.w	fp, fp
 8005e94:	445b      	add	r3, fp
 8005e96:	fa1f fb82 	uxth.w	fp, r2
 8005e9a:	f8de 2000 	ldr.w	r2, [lr]
 8005e9e:	4581      	cmp	r9, r0
 8005ea0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005eb2:	f84e 3b04 	str.w	r3, [lr], #4
 8005eb6:	d2da      	bcs.n	8005e6e <quorem+0x42>
 8005eb8:	f856 300c 	ldr.w	r3, [r6, ip]
 8005ebc:	b933      	cbnz	r3, 8005ecc <quorem+0xa0>
 8005ebe:	9b01      	ldr	r3, [sp, #4]
 8005ec0:	3b04      	subs	r3, #4
 8005ec2:	429e      	cmp	r6, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	d331      	bcc.n	8005f2c <quorem+0x100>
 8005ec8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ecc:	4640      	mov	r0, r8
 8005ece:	f001 fbb1 	bl	8007634 <__mcmp>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	db26      	blt.n	8005f24 <quorem+0xf8>
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f04f 0c00 	mov.w	ip, #0
 8005edc:	3501      	adds	r5, #1
 8005ede:	f857 1b04 	ldr.w	r1, [r7], #4
 8005ee2:	f8d0 e000 	ldr.w	lr, [r0]
 8005ee6:	b28b      	uxth	r3, r1
 8005ee8:	ebac 0303 	sub.w	r3, ip, r3
 8005eec:	fa1f f28e 	uxth.w	r2, lr
 8005ef0:	4413      	add	r3, r2
 8005ef2:	0c0a      	lsrs	r2, r1, #16
 8005ef4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f02:	45b9      	cmp	r9, r7
 8005f04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f08:	f840 3b04 	str.w	r3, [r0], #4
 8005f0c:	d2e7      	bcs.n	8005ede <quorem+0xb2>
 8005f0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005f12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005f16:	b92a      	cbnz	r2, 8005f24 <quorem+0xf8>
 8005f18:	3b04      	subs	r3, #4
 8005f1a:	429e      	cmp	r6, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	d30b      	bcc.n	8005f38 <quorem+0x10c>
 8005f20:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f24:	4628      	mov	r0, r5
 8005f26:	b003      	add	sp, #12
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	3b04      	subs	r3, #4
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	d1c9      	bne.n	8005ec8 <quorem+0x9c>
 8005f34:	3c01      	subs	r4, #1
 8005f36:	e7c4      	b.n	8005ec2 <quorem+0x96>
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	3b04      	subs	r3, #4
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	d1ef      	bne.n	8005f20 <quorem+0xf4>
 8005f40:	3c01      	subs	r4, #1
 8005f42:	e7ea      	b.n	8005f1a <quorem+0xee>
 8005f44:	2000      	movs	r0, #0
 8005f46:	e7ee      	b.n	8005f26 <quorem+0xfa>

08005f48 <_dtoa_r>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	461f      	mov	r7, r3
 8005f50:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f52:	b095      	sub	sp, #84	; 0x54
 8005f54:	4604      	mov	r4, r0
 8005f56:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005f5a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f5e:	b93d      	cbnz	r5, 8005f70 <_dtoa_r+0x28>
 8005f60:	2010      	movs	r0, #16
 8005f62:	f001 f8e1 	bl	8007128 <malloc>
 8005f66:	6260      	str	r0, [r4, #36]	; 0x24
 8005f68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f6c:	6005      	str	r5, [r0, #0]
 8005f6e:	60c5      	str	r5, [r0, #12]
 8005f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	b151      	cbz	r1, 8005f8c <_dtoa_r+0x44>
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4093      	lsls	r3, r2
 8005f7c:	604a      	str	r2, [r1, #4]
 8005f7e:	608b      	str	r3, [r1, #8]
 8005f80:	4620      	mov	r0, r4
 8005f82:	f001 f938 	bl	80071f6 <_Bfree>
 8005f86:	2200      	movs	r2, #0
 8005f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	1e3b      	subs	r3, r7, #0
 8005f8e:	bfaf      	iteee	ge
 8005f90:	2300      	movge	r3, #0
 8005f92:	2201      	movlt	r2, #1
 8005f94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f98:	9303      	strlt	r3, [sp, #12]
 8005f9a:	bfac      	ite	ge
 8005f9c:	f8c8 3000 	strge.w	r3, [r8]
 8005fa0:	f8c8 2000 	strlt.w	r2, [r8]
 8005fa4:	4bae      	ldr	r3, [pc, #696]	; (8006260 <_dtoa_r+0x318>)
 8005fa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005faa:	ea33 0308 	bics.w	r3, r3, r8
 8005fae:	d11b      	bne.n	8005fe8 <_dtoa_r+0xa0>
 8005fb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	b923      	cbnz	r3, 8005fc6 <_dtoa_r+0x7e>
 8005fbc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f000 8545 	beq.w	8006a50 <_dtoa_r+0xb08>
 8005fc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fc8:	b953      	cbnz	r3, 8005fe0 <_dtoa_r+0x98>
 8005fca:	4ba6      	ldr	r3, [pc, #664]	; (8006264 <_dtoa_r+0x31c>)
 8005fcc:	e021      	b.n	8006012 <_dtoa_r+0xca>
 8005fce:	4ba6      	ldr	r3, [pc, #664]	; (8006268 <_dtoa_r+0x320>)
 8005fd0:	9306      	str	r3, [sp, #24]
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	9806      	ldr	r0, [sp, #24]
 8005fda:	b015      	add	sp, #84	; 0x54
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	4ba0      	ldr	r3, [pc, #640]	; (8006264 <_dtoa_r+0x31c>)
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	3303      	adds	r3, #3
 8005fe6:	e7f5      	b.n	8005fd4 <_dtoa_r+0x8c>
 8005fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff8:	4682      	mov	sl, r0
 8005ffa:	b160      	cbz	r0, 8006016 <_dtoa_r+0xce>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8520 	beq.w	8006a4a <_dtoa_r+0xb02>
 800600a:	4b98      	ldr	r3, [pc, #608]	; (800626c <_dtoa_r+0x324>)
 800600c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	3b01      	subs	r3, #1
 8006012:	9306      	str	r3, [sp, #24]
 8006014:	e7e0      	b.n	8005fd8 <_dtoa_r+0x90>
 8006016:	ab12      	add	r3, sp, #72	; 0x48
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	ab13      	add	r3, sp, #76	; 0x4c
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	4632      	mov	r2, r6
 8006020:	463b      	mov	r3, r7
 8006022:	4620      	mov	r0, r4
 8006024:	f001 fbf4 	bl	8007810 <__d2b>
 8006028:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800602c:	4683      	mov	fp, r0
 800602e:	2d00      	cmp	r5, #0
 8006030:	d07d      	beq.n	800612e <_dtoa_r+0x1e6>
 8006032:	46b0      	mov	r8, r6
 8006034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006038:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800603c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006040:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006044:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006048:	2200      	movs	r2, #0
 800604a:	4b89      	ldr	r3, [pc, #548]	; (8006270 <_dtoa_r+0x328>)
 800604c:	4640      	mov	r0, r8
 800604e:	4649      	mov	r1, r9
 8006050:	f7fa f88a 	bl	8000168 <__aeabi_dsub>
 8006054:	a37c      	add	r3, pc, #496	; (adr r3, 8006248 <_dtoa_r+0x300>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa fa3d 	bl	80004d8 <__aeabi_dmul>
 800605e:	a37c      	add	r3, pc, #496	; (adr r3, 8006250 <_dtoa_r+0x308>)
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f7fa f882 	bl	800016c <__adddf3>
 8006068:	4606      	mov	r6, r0
 800606a:	4628      	mov	r0, r5
 800606c:	460f      	mov	r7, r1
 800606e:	f7fa f9c9 	bl	8000404 <__aeabi_i2d>
 8006072:	a379      	add	r3, pc, #484	; (adr r3, 8006258 <_dtoa_r+0x310>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f7fa fa2e 	bl	80004d8 <__aeabi_dmul>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4630      	mov	r0, r6
 8006082:	4639      	mov	r1, r7
 8006084:	f7fa f872 	bl	800016c <__adddf3>
 8006088:	4606      	mov	r6, r0
 800608a:	460f      	mov	r7, r1
 800608c:	f7fa fcd4 	bl	8000a38 <__aeabi_d2iz>
 8006090:	2200      	movs	r2, #0
 8006092:	4682      	mov	sl, r0
 8006094:	2300      	movs	r3, #0
 8006096:	4630      	mov	r0, r6
 8006098:	4639      	mov	r1, r7
 800609a:	f7fa fc8f 	bl	80009bc <__aeabi_dcmplt>
 800609e:	b148      	cbz	r0, 80060b4 <_dtoa_r+0x16c>
 80060a0:	4650      	mov	r0, sl
 80060a2:	f7fa f9af 	bl	8000404 <__aeabi_i2d>
 80060a6:	4632      	mov	r2, r6
 80060a8:	463b      	mov	r3, r7
 80060aa:	f7fa fc7d 	bl	80009a8 <__aeabi_dcmpeq>
 80060ae:	b908      	cbnz	r0, 80060b4 <_dtoa_r+0x16c>
 80060b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060b4:	f1ba 0f16 	cmp.w	sl, #22
 80060b8:	d85a      	bhi.n	8006170 <_dtoa_r+0x228>
 80060ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060be:	496d      	ldr	r1, [pc, #436]	; (8006274 <_dtoa_r+0x32c>)
 80060c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80060c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c8:	f7fa fc96 	bl	80009f8 <__aeabi_dcmpgt>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d051      	beq.n	8006174 <_dtoa_r+0x22c>
 80060d0:	2300      	movs	r3, #0
 80060d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060d6:	930d      	str	r3, [sp, #52]	; 0x34
 80060d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060da:	1b5d      	subs	r5, r3, r5
 80060dc:	1e6b      	subs	r3, r5, #1
 80060de:	9307      	str	r3, [sp, #28]
 80060e0:	bf43      	ittte	mi
 80060e2:	2300      	movmi	r3, #0
 80060e4:	f1c5 0901 	rsbmi	r9, r5, #1
 80060e8:	9307      	strmi	r3, [sp, #28]
 80060ea:	f04f 0900 	movpl.w	r9, #0
 80060ee:	f1ba 0f00 	cmp.w	sl, #0
 80060f2:	db41      	blt.n	8006178 <_dtoa_r+0x230>
 80060f4:	9b07      	ldr	r3, [sp, #28]
 80060f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80060fa:	4453      	add	r3, sl
 80060fc:	9307      	str	r3, [sp, #28]
 80060fe:	2300      	movs	r3, #0
 8006100:	9308      	str	r3, [sp, #32]
 8006102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006104:	2b09      	cmp	r3, #9
 8006106:	f200 808f 	bhi.w	8006228 <_dtoa_r+0x2e0>
 800610a:	2b05      	cmp	r3, #5
 800610c:	bfc4      	itt	gt
 800610e:	3b04      	subgt	r3, #4
 8006110:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006114:	bfc8      	it	gt
 8006116:	2500      	movgt	r5, #0
 8006118:	f1a3 0302 	sub.w	r3, r3, #2
 800611c:	bfd8      	it	le
 800611e:	2501      	movle	r5, #1
 8006120:	2b03      	cmp	r3, #3
 8006122:	f200 808d 	bhi.w	8006240 <_dtoa_r+0x2f8>
 8006126:	e8df f003 	tbb	[pc, r3]
 800612a:	7d7b      	.short	0x7d7b
 800612c:	6f2f      	.short	0x6f2f
 800612e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006132:	441d      	add	r5, r3
 8006134:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006138:	2820      	cmp	r0, #32
 800613a:	dd13      	ble.n	8006164 <_dtoa_r+0x21c>
 800613c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006140:	9b02      	ldr	r3, [sp, #8]
 8006142:	fa08 f800 	lsl.w	r8, r8, r0
 8006146:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800614a:	fa23 f000 	lsr.w	r0, r3, r0
 800614e:	ea48 0000 	orr.w	r0, r8, r0
 8006152:	f7fa f947 	bl	80003e4 <__aeabi_ui2d>
 8006156:	2301      	movs	r3, #1
 8006158:	4680      	mov	r8, r0
 800615a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800615e:	3d01      	subs	r5, #1
 8006160:	9310      	str	r3, [sp, #64]	; 0x40
 8006162:	e771      	b.n	8006048 <_dtoa_r+0x100>
 8006164:	9b02      	ldr	r3, [sp, #8]
 8006166:	f1c0 0020 	rsb	r0, r0, #32
 800616a:	fa03 f000 	lsl.w	r0, r3, r0
 800616e:	e7f0      	b.n	8006152 <_dtoa_r+0x20a>
 8006170:	2301      	movs	r3, #1
 8006172:	e7b0      	b.n	80060d6 <_dtoa_r+0x18e>
 8006174:	900d      	str	r0, [sp, #52]	; 0x34
 8006176:	e7af      	b.n	80060d8 <_dtoa_r+0x190>
 8006178:	f1ca 0300 	rsb	r3, sl, #0
 800617c:	9308      	str	r3, [sp, #32]
 800617e:	2300      	movs	r3, #0
 8006180:	eba9 090a 	sub.w	r9, r9, sl
 8006184:	930c      	str	r3, [sp, #48]	; 0x30
 8006186:	e7bc      	b.n	8006102 <_dtoa_r+0x1ba>
 8006188:	2301      	movs	r3, #1
 800618a:	9309      	str	r3, [sp, #36]	; 0x24
 800618c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800618e:	2b00      	cmp	r3, #0
 8006190:	dd74      	ble.n	800627c <_dtoa_r+0x334>
 8006192:	4698      	mov	r8, r3
 8006194:	9304      	str	r3, [sp, #16]
 8006196:	2200      	movs	r2, #0
 8006198:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800619a:	6072      	str	r2, [r6, #4]
 800619c:	2204      	movs	r2, #4
 800619e:	f102 0014 	add.w	r0, r2, #20
 80061a2:	4298      	cmp	r0, r3
 80061a4:	6871      	ldr	r1, [r6, #4]
 80061a6:	d96e      	bls.n	8006286 <_dtoa_r+0x33e>
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fff0 	bl	800718e <_Balloc>
 80061ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b0:	6030      	str	r0, [r6, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f1b8 0f0e 	cmp.w	r8, #14
 80061b8:	9306      	str	r3, [sp, #24]
 80061ba:	f200 80ed 	bhi.w	8006398 <_dtoa_r+0x450>
 80061be:	2d00      	cmp	r5, #0
 80061c0:	f000 80ea 	beq.w	8006398 <_dtoa_r+0x450>
 80061c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c8:	f1ba 0f00 	cmp.w	sl, #0
 80061cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80061d0:	dd77      	ble.n	80062c2 <_dtoa_r+0x37a>
 80061d2:	4a28      	ldr	r2, [pc, #160]	; (8006274 <_dtoa_r+0x32c>)
 80061d4:	f00a 030f 	and.w	r3, sl, #15
 80061d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80061dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061e0:	06f0      	lsls	r0, r6, #27
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80061ea:	d568      	bpl.n	80062be <_dtoa_r+0x376>
 80061ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80061f0:	4b21      	ldr	r3, [pc, #132]	; (8006278 <_dtoa_r+0x330>)
 80061f2:	2503      	movs	r5, #3
 80061f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061f8:	f7fa fa98 	bl	800072c <__aeabi_ddiv>
 80061fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006200:	f006 060f 	and.w	r6, r6, #15
 8006204:	4f1c      	ldr	r7, [pc, #112]	; (8006278 <_dtoa_r+0x330>)
 8006206:	e04f      	b.n	80062a8 <_dtoa_r+0x360>
 8006208:	2301      	movs	r3, #1
 800620a:	9309      	str	r3, [sp, #36]	; 0x24
 800620c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800620e:	4453      	add	r3, sl
 8006210:	f103 0801 	add.w	r8, r3, #1
 8006214:	9304      	str	r3, [sp, #16]
 8006216:	4643      	mov	r3, r8
 8006218:	2b01      	cmp	r3, #1
 800621a:	bfb8      	it	lt
 800621c:	2301      	movlt	r3, #1
 800621e:	e7ba      	b.n	8006196 <_dtoa_r+0x24e>
 8006220:	2300      	movs	r3, #0
 8006222:	e7b2      	b.n	800618a <_dtoa_r+0x242>
 8006224:	2300      	movs	r3, #0
 8006226:	e7f0      	b.n	800620a <_dtoa_r+0x2c2>
 8006228:	2501      	movs	r5, #1
 800622a:	2300      	movs	r3, #0
 800622c:	9509      	str	r5, [sp, #36]	; 0x24
 800622e:	931e      	str	r3, [sp, #120]	; 0x78
 8006230:	f04f 33ff 	mov.w	r3, #4294967295
 8006234:	2200      	movs	r2, #0
 8006236:	9304      	str	r3, [sp, #16]
 8006238:	4698      	mov	r8, r3
 800623a:	2312      	movs	r3, #18
 800623c:	921f      	str	r2, [sp, #124]	; 0x7c
 800623e:	e7aa      	b.n	8006196 <_dtoa_r+0x24e>
 8006240:	2301      	movs	r3, #1
 8006242:	9309      	str	r3, [sp, #36]	; 0x24
 8006244:	e7f4      	b.n	8006230 <_dtoa_r+0x2e8>
 8006246:	bf00      	nop
 8006248:	636f4361 	.word	0x636f4361
 800624c:	3fd287a7 	.word	0x3fd287a7
 8006250:	8b60c8b3 	.word	0x8b60c8b3
 8006254:	3fc68a28 	.word	0x3fc68a28
 8006258:	509f79fb 	.word	0x509f79fb
 800625c:	3fd34413 	.word	0x3fd34413
 8006260:	7ff00000 	.word	0x7ff00000
 8006264:	08008011 	.word	0x08008011
 8006268:	08008008 	.word	0x08008008
 800626c:	08007f8d 	.word	0x08007f8d
 8006270:	3ff80000 	.word	0x3ff80000
 8006274:	08008048 	.word	0x08008048
 8006278:	08008020 	.word	0x08008020
 800627c:	2301      	movs	r3, #1
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	4698      	mov	r8, r3
 8006282:	461a      	mov	r2, r3
 8006284:	e7da      	b.n	800623c <_dtoa_r+0x2f4>
 8006286:	3101      	adds	r1, #1
 8006288:	6071      	str	r1, [r6, #4]
 800628a:	0052      	lsls	r2, r2, #1
 800628c:	e787      	b.n	800619e <_dtoa_r+0x256>
 800628e:	07f1      	lsls	r1, r6, #31
 8006290:	d508      	bpl.n	80062a4 <_dtoa_r+0x35c>
 8006292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629a:	f7fa f91d 	bl	80004d8 <__aeabi_dmul>
 800629e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062a2:	3501      	adds	r5, #1
 80062a4:	1076      	asrs	r6, r6, #1
 80062a6:	3708      	adds	r7, #8
 80062a8:	2e00      	cmp	r6, #0
 80062aa:	d1f0      	bne.n	800628e <_dtoa_r+0x346>
 80062ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b4:	f7fa fa3a 	bl	800072c <__aeabi_ddiv>
 80062b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062bc:	e01b      	b.n	80062f6 <_dtoa_r+0x3ae>
 80062be:	2502      	movs	r5, #2
 80062c0:	e7a0      	b.n	8006204 <_dtoa_r+0x2bc>
 80062c2:	f000 80a4 	beq.w	800640e <_dtoa_r+0x4c6>
 80062c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80062ca:	f1ca 0600 	rsb	r6, sl, #0
 80062ce:	4ba0      	ldr	r3, [pc, #640]	; (8006550 <_dtoa_r+0x608>)
 80062d0:	f006 020f 	and.w	r2, r6, #15
 80062d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7fa f8fc 	bl	80004d8 <__aeabi_dmul>
 80062e0:	2502      	movs	r5, #2
 80062e2:	2300      	movs	r3, #0
 80062e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e8:	4f9a      	ldr	r7, [pc, #616]	; (8006554 <_dtoa_r+0x60c>)
 80062ea:	1136      	asrs	r6, r6, #4
 80062ec:	2e00      	cmp	r6, #0
 80062ee:	f040 8083 	bne.w	80063f8 <_dtoa_r+0x4b0>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e0      	bne.n	80062b8 <_dtoa_r+0x370>
 80062f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 808a 	beq.w	8006412 <_dtoa_r+0x4ca>
 80062fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006302:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800630a:	2200      	movs	r2, #0
 800630c:	4b92      	ldr	r3, [pc, #584]	; (8006558 <_dtoa_r+0x610>)
 800630e:	f7fa fb55 	bl	80009bc <__aeabi_dcmplt>
 8006312:	2800      	cmp	r0, #0
 8006314:	d07d      	beq.n	8006412 <_dtoa_r+0x4ca>
 8006316:	f1b8 0f00 	cmp.w	r8, #0
 800631a:	d07a      	beq.n	8006412 <_dtoa_r+0x4ca>
 800631c:	9b04      	ldr	r3, [sp, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	dd36      	ble.n	8006390 <_dtoa_r+0x448>
 8006322:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006326:	2200      	movs	r2, #0
 8006328:	4b8c      	ldr	r3, [pc, #560]	; (800655c <_dtoa_r+0x614>)
 800632a:	f7fa f8d5 	bl	80004d8 <__aeabi_dmul>
 800632e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006332:	9e04      	ldr	r6, [sp, #16]
 8006334:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006338:	3501      	adds	r5, #1
 800633a:	4628      	mov	r0, r5
 800633c:	f7fa f862 	bl	8000404 <__aeabi_i2d>
 8006340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006344:	f7fa f8c8 	bl	80004d8 <__aeabi_dmul>
 8006348:	2200      	movs	r2, #0
 800634a:	4b85      	ldr	r3, [pc, #532]	; (8006560 <_dtoa_r+0x618>)
 800634c:	f7f9 ff0e 	bl	800016c <__adddf3>
 8006350:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006354:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006358:	950b      	str	r5, [sp, #44]	; 0x2c
 800635a:	2e00      	cmp	r6, #0
 800635c:	d15c      	bne.n	8006418 <_dtoa_r+0x4d0>
 800635e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006362:	2200      	movs	r2, #0
 8006364:	4b7f      	ldr	r3, [pc, #508]	; (8006564 <_dtoa_r+0x61c>)
 8006366:	f7f9 feff 	bl	8000168 <__aeabi_dsub>
 800636a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800636c:	462b      	mov	r3, r5
 800636e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006372:	f7fa fb41 	bl	80009f8 <__aeabi_dcmpgt>
 8006376:	2800      	cmp	r0, #0
 8006378:	f040 8281 	bne.w	800687e <_dtoa_r+0x936>
 800637c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006382:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006386:	f7fa fb19 	bl	80009bc <__aeabi_dcmplt>
 800638a:	2800      	cmp	r0, #0
 800638c:	f040 8275 	bne.w	800687a <_dtoa_r+0x932>
 8006390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800639a:	2b00      	cmp	r3, #0
 800639c:	f2c0 814b 	blt.w	8006636 <_dtoa_r+0x6ee>
 80063a0:	f1ba 0f0e 	cmp.w	sl, #14
 80063a4:	f300 8147 	bgt.w	8006636 <_dtoa_r+0x6ee>
 80063a8:	4b69      	ldr	r3, [pc, #420]	; (8006550 <_dtoa_r+0x608>)
 80063aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f280 80d7 	bge.w	800656c <_dtoa_r+0x624>
 80063be:	f1b8 0f00 	cmp.w	r8, #0
 80063c2:	f300 80d3 	bgt.w	800656c <_dtoa_r+0x624>
 80063c6:	f040 8257 	bne.w	8006878 <_dtoa_r+0x930>
 80063ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063ce:	2200      	movs	r2, #0
 80063d0:	4b64      	ldr	r3, [pc, #400]	; (8006564 <_dtoa_r+0x61c>)
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063da:	f7fa fb03 	bl	80009e4 <__aeabi_dcmpge>
 80063de:	4646      	mov	r6, r8
 80063e0:	4647      	mov	r7, r8
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f040 822d 	bne.w	8006842 <_dtoa_r+0x8fa>
 80063e8:	9b06      	ldr	r3, [sp, #24]
 80063ea:	9a06      	ldr	r2, [sp, #24]
 80063ec:	1c5d      	adds	r5, r3, #1
 80063ee:	2331      	movs	r3, #49	; 0x31
 80063f0:	f10a 0a01 	add.w	sl, sl, #1
 80063f4:	7013      	strb	r3, [r2, #0]
 80063f6:	e228      	b.n	800684a <_dtoa_r+0x902>
 80063f8:	07f2      	lsls	r2, r6, #31
 80063fa:	d505      	bpl.n	8006408 <_dtoa_r+0x4c0>
 80063fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006400:	f7fa f86a 	bl	80004d8 <__aeabi_dmul>
 8006404:	2301      	movs	r3, #1
 8006406:	3501      	adds	r5, #1
 8006408:	1076      	asrs	r6, r6, #1
 800640a:	3708      	adds	r7, #8
 800640c:	e76e      	b.n	80062ec <_dtoa_r+0x3a4>
 800640e:	2502      	movs	r5, #2
 8006410:	e771      	b.n	80062f6 <_dtoa_r+0x3ae>
 8006412:	4657      	mov	r7, sl
 8006414:	4646      	mov	r6, r8
 8006416:	e790      	b.n	800633a <_dtoa_r+0x3f2>
 8006418:	4b4d      	ldr	r3, [pc, #308]	; (8006550 <_dtoa_r+0x608>)
 800641a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800641e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d048      	beq.n	80064ba <_dtoa_r+0x572>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	2000      	movs	r0, #0
 800642e:	494e      	ldr	r1, [pc, #312]	; (8006568 <_dtoa_r+0x620>)
 8006430:	f7fa f97c 	bl	800072c <__aeabi_ddiv>
 8006434:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006438:	f7f9 fe96 	bl	8000168 <__aeabi_dsub>
 800643c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006440:	9d06      	ldr	r5, [sp, #24]
 8006442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006446:	f7fa faf7 	bl	8000a38 <__aeabi_d2iz>
 800644a:	9011      	str	r0, [sp, #68]	; 0x44
 800644c:	f7f9 ffda 	bl	8000404 <__aeabi_i2d>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006458:	f7f9 fe86 	bl	8000168 <__aeabi_dsub>
 800645c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800645e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006462:	3330      	adds	r3, #48	; 0x30
 8006464:	f805 3b01 	strb.w	r3, [r5], #1
 8006468:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800646c:	f7fa faa6 	bl	80009bc <__aeabi_dcmplt>
 8006470:	2800      	cmp	r0, #0
 8006472:	d163      	bne.n	800653c <_dtoa_r+0x5f4>
 8006474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006478:	2000      	movs	r0, #0
 800647a:	4937      	ldr	r1, [pc, #220]	; (8006558 <_dtoa_r+0x610>)
 800647c:	f7f9 fe74 	bl	8000168 <__aeabi_dsub>
 8006480:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006484:	f7fa fa9a 	bl	80009bc <__aeabi_dcmplt>
 8006488:	2800      	cmp	r0, #0
 800648a:	f040 80b5 	bne.w	80065f8 <_dtoa_r+0x6b0>
 800648e:	9b06      	ldr	r3, [sp, #24]
 8006490:	1aeb      	subs	r3, r5, r3
 8006492:	429e      	cmp	r6, r3
 8006494:	f77f af7c 	ble.w	8006390 <_dtoa_r+0x448>
 8006498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800649c:	2200      	movs	r2, #0
 800649e:	4b2f      	ldr	r3, [pc, #188]	; (800655c <_dtoa_r+0x614>)
 80064a0:	f7fa f81a 	bl	80004d8 <__aeabi_dmul>
 80064a4:	2200      	movs	r2, #0
 80064a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ae:	4b2b      	ldr	r3, [pc, #172]	; (800655c <_dtoa_r+0x614>)
 80064b0:	f7fa f812 	bl	80004d8 <__aeabi_dmul>
 80064b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b8:	e7c3      	b.n	8006442 <_dtoa_r+0x4fa>
 80064ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064be:	f7fa f80b 	bl	80004d8 <__aeabi_dmul>
 80064c2:	9b06      	ldr	r3, [sp, #24]
 80064c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064c8:	199d      	adds	r5, r3, r6
 80064ca:	461e      	mov	r6, r3
 80064cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d0:	f7fa fab2 	bl	8000a38 <__aeabi_d2iz>
 80064d4:	9011      	str	r0, [sp, #68]	; 0x44
 80064d6:	f7f9 ff95 	bl	8000404 <__aeabi_i2d>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e2:	f7f9 fe41 	bl	8000168 <__aeabi_dsub>
 80064e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ec:	3330      	adds	r3, #48	; 0x30
 80064ee:	f806 3b01 	strb.w	r3, [r6], #1
 80064f2:	42ae      	cmp	r6, r5
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	d124      	bne.n	8006544 <_dtoa_r+0x5fc>
 80064fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064fe:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <_dtoa_r+0x620>)
 8006500:	f7f9 fe34 	bl	800016c <__adddf3>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650c:	f7fa fa74 	bl	80009f8 <__aeabi_dcmpgt>
 8006510:	2800      	cmp	r0, #0
 8006512:	d171      	bne.n	80065f8 <_dtoa_r+0x6b0>
 8006514:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006518:	2000      	movs	r0, #0
 800651a:	4913      	ldr	r1, [pc, #76]	; (8006568 <_dtoa_r+0x620>)
 800651c:	f7f9 fe24 	bl	8000168 <__aeabi_dsub>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006528:	f7fa fa48 	bl	80009bc <__aeabi_dcmplt>
 800652c:	2800      	cmp	r0, #0
 800652e:	f43f af2f 	beq.w	8006390 <_dtoa_r+0x448>
 8006532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006536:	1e6a      	subs	r2, r5, #1
 8006538:	2b30      	cmp	r3, #48	; 0x30
 800653a:	d001      	beq.n	8006540 <_dtoa_r+0x5f8>
 800653c:	46ba      	mov	sl, r7
 800653e:	e04a      	b.n	80065d6 <_dtoa_r+0x68e>
 8006540:	4615      	mov	r5, r2
 8006542:	e7f6      	b.n	8006532 <_dtoa_r+0x5ea>
 8006544:	4b05      	ldr	r3, [pc, #20]	; (800655c <_dtoa_r+0x614>)
 8006546:	f7f9 ffc7 	bl	80004d8 <__aeabi_dmul>
 800654a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800654e:	e7bd      	b.n	80064cc <_dtoa_r+0x584>
 8006550:	08008048 	.word	0x08008048
 8006554:	08008020 	.word	0x08008020
 8006558:	3ff00000 	.word	0x3ff00000
 800655c:	40240000 	.word	0x40240000
 8006560:	401c0000 	.word	0x401c0000
 8006564:	40140000 	.word	0x40140000
 8006568:	3fe00000 	.word	0x3fe00000
 800656c:	9d06      	ldr	r5, [sp, #24]
 800656e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006576:	4630      	mov	r0, r6
 8006578:	4639      	mov	r1, r7
 800657a:	f7fa f8d7 	bl	800072c <__aeabi_ddiv>
 800657e:	f7fa fa5b 	bl	8000a38 <__aeabi_d2iz>
 8006582:	4681      	mov	r9, r0
 8006584:	f7f9 ff3e 	bl	8000404 <__aeabi_i2d>
 8006588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800658c:	f7f9 ffa4 	bl	80004d8 <__aeabi_dmul>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7f9 fde6 	bl	8000168 <__aeabi_dsub>
 800659c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80065a0:	f805 6b01 	strb.w	r6, [r5], #1
 80065a4:	9e06      	ldr	r6, [sp, #24]
 80065a6:	4602      	mov	r2, r0
 80065a8:	1bae      	subs	r6, r5, r6
 80065aa:	45b0      	cmp	r8, r6
 80065ac:	460b      	mov	r3, r1
 80065ae:	d135      	bne.n	800661c <_dtoa_r+0x6d4>
 80065b0:	f7f9 fddc 	bl	800016c <__adddf3>
 80065b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065b8:	4606      	mov	r6, r0
 80065ba:	460f      	mov	r7, r1
 80065bc:	f7fa fa1c 	bl	80009f8 <__aeabi_dcmpgt>
 80065c0:	b9c8      	cbnz	r0, 80065f6 <_dtoa_r+0x6ae>
 80065c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c6:	4630      	mov	r0, r6
 80065c8:	4639      	mov	r1, r7
 80065ca:	f7fa f9ed 	bl	80009a8 <__aeabi_dcmpeq>
 80065ce:	b110      	cbz	r0, 80065d6 <_dtoa_r+0x68e>
 80065d0:	f019 0f01 	tst.w	r9, #1
 80065d4:	d10f      	bne.n	80065f6 <_dtoa_r+0x6ae>
 80065d6:	4659      	mov	r1, fp
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 fe0c 	bl	80071f6 <_Bfree>
 80065de:	2300      	movs	r3, #0
 80065e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065e2:	702b      	strb	r3, [r5, #0]
 80065e4:	f10a 0301 	add.w	r3, sl, #1
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f43f acf3 	beq.w	8005fd8 <_dtoa_r+0x90>
 80065f2:	601d      	str	r5, [r3, #0]
 80065f4:	e4f0      	b.n	8005fd8 <_dtoa_r+0x90>
 80065f6:	4657      	mov	r7, sl
 80065f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065fc:	1e6b      	subs	r3, r5, #1
 80065fe:	2a39      	cmp	r2, #57	; 0x39
 8006600:	d106      	bne.n	8006610 <_dtoa_r+0x6c8>
 8006602:	9a06      	ldr	r2, [sp, #24]
 8006604:	429a      	cmp	r2, r3
 8006606:	d107      	bne.n	8006618 <_dtoa_r+0x6d0>
 8006608:	2330      	movs	r3, #48	; 0x30
 800660a:	7013      	strb	r3, [r2, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	3701      	adds	r7, #1
 8006610:	781a      	ldrb	r2, [r3, #0]
 8006612:	3201      	adds	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e791      	b.n	800653c <_dtoa_r+0x5f4>
 8006618:	461d      	mov	r5, r3
 800661a:	e7ed      	b.n	80065f8 <_dtoa_r+0x6b0>
 800661c:	2200      	movs	r2, #0
 800661e:	4b99      	ldr	r3, [pc, #612]	; (8006884 <_dtoa_r+0x93c>)
 8006620:	f7f9 ff5a 	bl	80004d8 <__aeabi_dmul>
 8006624:	2200      	movs	r2, #0
 8006626:	2300      	movs	r3, #0
 8006628:	4606      	mov	r6, r0
 800662a:	460f      	mov	r7, r1
 800662c:	f7fa f9bc 	bl	80009a8 <__aeabi_dcmpeq>
 8006630:	2800      	cmp	r0, #0
 8006632:	d09e      	beq.n	8006572 <_dtoa_r+0x62a>
 8006634:	e7cf      	b.n	80065d6 <_dtoa_r+0x68e>
 8006636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006638:	2a00      	cmp	r2, #0
 800663a:	f000 8088 	beq.w	800674e <_dtoa_r+0x806>
 800663e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006640:	2a01      	cmp	r2, #1
 8006642:	dc6d      	bgt.n	8006720 <_dtoa_r+0x7d8>
 8006644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006646:	2a00      	cmp	r2, #0
 8006648:	d066      	beq.n	8006718 <_dtoa_r+0x7d0>
 800664a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800664e:	464d      	mov	r5, r9
 8006650:	9e08      	ldr	r6, [sp, #32]
 8006652:	9a07      	ldr	r2, [sp, #28]
 8006654:	2101      	movs	r1, #1
 8006656:	441a      	add	r2, r3
 8006658:	4620      	mov	r0, r4
 800665a:	4499      	add	r9, r3
 800665c:	9207      	str	r2, [sp, #28]
 800665e:	f000 fea8 	bl	80073b2 <__i2b>
 8006662:	4607      	mov	r7, r0
 8006664:	2d00      	cmp	r5, #0
 8006666:	dd0b      	ble.n	8006680 <_dtoa_r+0x738>
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd08      	ble.n	8006680 <_dtoa_r+0x738>
 800666e:	42ab      	cmp	r3, r5
 8006670:	bfa8      	it	ge
 8006672:	462b      	movge	r3, r5
 8006674:	9a07      	ldr	r2, [sp, #28]
 8006676:	eba9 0903 	sub.w	r9, r9, r3
 800667a:	1aed      	subs	r5, r5, r3
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	9307      	str	r3, [sp, #28]
 8006680:	9b08      	ldr	r3, [sp, #32]
 8006682:	b1eb      	cbz	r3, 80066c0 <_dtoa_r+0x778>
 8006684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006686:	2b00      	cmp	r3, #0
 8006688:	d065      	beq.n	8006756 <_dtoa_r+0x80e>
 800668a:	b18e      	cbz	r6, 80066b0 <_dtoa_r+0x768>
 800668c:	4639      	mov	r1, r7
 800668e:	4632      	mov	r2, r6
 8006690:	4620      	mov	r0, r4
 8006692:	f000 ff2d 	bl	80074f0 <__pow5mult>
 8006696:	465a      	mov	r2, fp
 8006698:	4601      	mov	r1, r0
 800669a:	4607      	mov	r7, r0
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fe91 	bl	80073c4 <__multiply>
 80066a2:	4659      	mov	r1, fp
 80066a4:	900a      	str	r0, [sp, #40]	; 0x28
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fda5 	bl	80071f6 <_Bfree>
 80066ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ae:	469b      	mov	fp, r3
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	1b9a      	subs	r2, r3, r6
 80066b4:	d004      	beq.n	80066c0 <_dtoa_r+0x778>
 80066b6:	4659      	mov	r1, fp
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 ff19 	bl	80074f0 <__pow5mult>
 80066be:	4683      	mov	fp, r0
 80066c0:	2101      	movs	r1, #1
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fe75 	bl	80073b2 <__i2b>
 80066c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ca:	4606      	mov	r6, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 81c6 	beq.w	8006a5e <_dtoa_r+0xb16>
 80066d2:	461a      	mov	r2, r3
 80066d4:	4601      	mov	r1, r0
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 ff0a 	bl	80074f0 <__pow5mult>
 80066dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066de:	4606      	mov	r6, r0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	dc3e      	bgt.n	8006762 <_dtoa_r+0x81a>
 80066e4:	9b02      	ldr	r3, [sp, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d137      	bne.n	800675a <_dtoa_r+0x812>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d134      	bne.n	800675e <_dtoa_r+0x816>
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066fa:	0d1b      	lsrs	r3, r3, #20
 80066fc:	051b      	lsls	r3, r3, #20
 80066fe:	b12b      	cbz	r3, 800670c <_dtoa_r+0x7c4>
 8006700:	9b07      	ldr	r3, [sp, #28]
 8006702:	f109 0901 	add.w	r9, r9, #1
 8006706:	3301      	adds	r3, #1
 8006708:	9307      	str	r3, [sp, #28]
 800670a:	2301      	movs	r3, #1
 800670c:	9308      	str	r3, [sp, #32]
 800670e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006710:	2b00      	cmp	r3, #0
 8006712:	d128      	bne.n	8006766 <_dtoa_r+0x81e>
 8006714:	2001      	movs	r0, #1
 8006716:	e02e      	b.n	8006776 <_dtoa_r+0x82e>
 8006718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800671a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800671e:	e796      	b.n	800664e <_dtoa_r+0x706>
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	f108 36ff 	add.w	r6, r8, #4294967295
 8006726:	42b3      	cmp	r3, r6
 8006728:	bfb7      	itett	lt
 800672a:	9b08      	ldrlt	r3, [sp, #32]
 800672c:	1b9e      	subge	r6, r3, r6
 800672e:	1af2      	sublt	r2, r6, r3
 8006730:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006732:	bfbf      	itttt	lt
 8006734:	9608      	strlt	r6, [sp, #32]
 8006736:	189b      	addlt	r3, r3, r2
 8006738:	930c      	strlt	r3, [sp, #48]	; 0x30
 800673a:	2600      	movlt	r6, #0
 800673c:	f1b8 0f00 	cmp.w	r8, #0
 8006740:	bfb9      	ittee	lt
 8006742:	eba9 0508 	sublt.w	r5, r9, r8
 8006746:	2300      	movlt	r3, #0
 8006748:	464d      	movge	r5, r9
 800674a:	4643      	movge	r3, r8
 800674c:	e781      	b.n	8006652 <_dtoa_r+0x70a>
 800674e:	9e08      	ldr	r6, [sp, #32]
 8006750:	464d      	mov	r5, r9
 8006752:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006754:	e786      	b.n	8006664 <_dtoa_r+0x71c>
 8006756:	9a08      	ldr	r2, [sp, #32]
 8006758:	e7ad      	b.n	80066b6 <_dtoa_r+0x76e>
 800675a:	2300      	movs	r3, #0
 800675c:	e7d6      	b.n	800670c <_dtoa_r+0x7c4>
 800675e:	9b02      	ldr	r3, [sp, #8]
 8006760:	e7d4      	b.n	800670c <_dtoa_r+0x7c4>
 8006762:	2300      	movs	r3, #0
 8006764:	9308      	str	r3, [sp, #32]
 8006766:	6933      	ldr	r3, [r6, #16]
 8006768:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800676c:	6918      	ldr	r0, [r3, #16]
 800676e:	f000 fdd2 	bl	8007316 <__hi0bits>
 8006772:	f1c0 0020 	rsb	r0, r0, #32
 8006776:	9b07      	ldr	r3, [sp, #28]
 8006778:	4418      	add	r0, r3
 800677a:	f010 001f 	ands.w	r0, r0, #31
 800677e:	d047      	beq.n	8006810 <_dtoa_r+0x8c8>
 8006780:	f1c0 0320 	rsb	r3, r0, #32
 8006784:	2b04      	cmp	r3, #4
 8006786:	dd3b      	ble.n	8006800 <_dtoa_r+0x8b8>
 8006788:	9b07      	ldr	r3, [sp, #28]
 800678a:	f1c0 001c 	rsb	r0, r0, #28
 800678e:	4481      	add	r9, r0
 8006790:	4405      	add	r5, r0
 8006792:	4403      	add	r3, r0
 8006794:	9307      	str	r3, [sp, #28]
 8006796:	f1b9 0f00 	cmp.w	r9, #0
 800679a:	dd05      	ble.n	80067a8 <_dtoa_r+0x860>
 800679c:	4659      	mov	r1, fp
 800679e:	464a      	mov	r2, r9
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fef3 	bl	800758c <__lshift>
 80067a6:	4683      	mov	fp, r0
 80067a8:	9b07      	ldr	r3, [sp, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dd05      	ble.n	80067ba <_dtoa_r+0x872>
 80067ae:	4631      	mov	r1, r6
 80067b0:	461a      	mov	r2, r3
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 feea 	bl	800758c <__lshift>
 80067b8:	4606      	mov	r6, r0
 80067ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067bc:	b353      	cbz	r3, 8006814 <_dtoa_r+0x8cc>
 80067be:	4631      	mov	r1, r6
 80067c0:	4658      	mov	r0, fp
 80067c2:	f000 ff37 	bl	8007634 <__mcmp>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	da24      	bge.n	8006814 <_dtoa_r+0x8cc>
 80067ca:	2300      	movs	r3, #0
 80067cc:	4659      	mov	r1, fp
 80067ce:	220a      	movs	r2, #10
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fd27 	bl	8007224 <__multadd>
 80067d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067dc:	4683      	mov	fp, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 8144 	beq.w	8006a6c <_dtoa_r+0xb24>
 80067e4:	2300      	movs	r3, #0
 80067e6:	4639      	mov	r1, r7
 80067e8:	220a      	movs	r2, #10
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 fd1a 	bl	8007224 <__multadd>
 80067f0:	9b04      	ldr	r3, [sp, #16]
 80067f2:	4607      	mov	r7, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dc4d      	bgt.n	8006894 <_dtoa_r+0x94c>
 80067f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	dd4a      	ble.n	8006894 <_dtoa_r+0x94c>
 80067fe:	e011      	b.n	8006824 <_dtoa_r+0x8dc>
 8006800:	d0c9      	beq.n	8006796 <_dtoa_r+0x84e>
 8006802:	9a07      	ldr	r2, [sp, #28]
 8006804:	331c      	adds	r3, #28
 8006806:	441a      	add	r2, r3
 8006808:	4499      	add	r9, r3
 800680a:	441d      	add	r5, r3
 800680c:	4613      	mov	r3, r2
 800680e:	e7c1      	b.n	8006794 <_dtoa_r+0x84c>
 8006810:	4603      	mov	r3, r0
 8006812:	e7f6      	b.n	8006802 <_dtoa_r+0x8ba>
 8006814:	f1b8 0f00 	cmp.w	r8, #0
 8006818:	dc36      	bgt.n	8006888 <_dtoa_r+0x940>
 800681a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800681c:	2b02      	cmp	r3, #2
 800681e:	dd33      	ble.n	8006888 <_dtoa_r+0x940>
 8006820:	f8cd 8010 	str.w	r8, [sp, #16]
 8006824:	9b04      	ldr	r3, [sp, #16]
 8006826:	b963      	cbnz	r3, 8006842 <_dtoa_r+0x8fa>
 8006828:	4631      	mov	r1, r6
 800682a:	2205      	movs	r2, #5
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fcf9 	bl	8007224 <__multadd>
 8006832:	4601      	mov	r1, r0
 8006834:	4606      	mov	r6, r0
 8006836:	4658      	mov	r0, fp
 8006838:	f000 fefc 	bl	8007634 <__mcmp>
 800683c:	2800      	cmp	r0, #0
 800683e:	f73f add3 	bgt.w	80063e8 <_dtoa_r+0x4a0>
 8006842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006844:	9d06      	ldr	r5, [sp, #24]
 8006846:	ea6f 0a03 	mvn.w	sl, r3
 800684a:	f04f 0900 	mov.w	r9, #0
 800684e:	4631      	mov	r1, r6
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fcd0 	bl	80071f6 <_Bfree>
 8006856:	2f00      	cmp	r7, #0
 8006858:	f43f aebd 	beq.w	80065d6 <_dtoa_r+0x68e>
 800685c:	f1b9 0f00 	cmp.w	r9, #0
 8006860:	d005      	beq.n	800686e <_dtoa_r+0x926>
 8006862:	45b9      	cmp	r9, r7
 8006864:	d003      	beq.n	800686e <_dtoa_r+0x926>
 8006866:	4649      	mov	r1, r9
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fcc4 	bl	80071f6 <_Bfree>
 800686e:	4639      	mov	r1, r7
 8006870:	4620      	mov	r0, r4
 8006872:	f000 fcc0 	bl	80071f6 <_Bfree>
 8006876:	e6ae      	b.n	80065d6 <_dtoa_r+0x68e>
 8006878:	2600      	movs	r6, #0
 800687a:	4637      	mov	r7, r6
 800687c:	e7e1      	b.n	8006842 <_dtoa_r+0x8fa>
 800687e:	46ba      	mov	sl, r7
 8006880:	4637      	mov	r7, r6
 8006882:	e5b1      	b.n	80063e8 <_dtoa_r+0x4a0>
 8006884:	40240000 	.word	0x40240000
 8006888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688a:	f8cd 8010 	str.w	r8, [sp, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80f3 	beq.w	8006a7a <_dtoa_r+0xb32>
 8006894:	2d00      	cmp	r5, #0
 8006896:	dd05      	ble.n	80068a4 <_dtoa_r+0x95c>
 8006898:	4639      	mov	r1, r7
 800689a:	462a      	mov	r2, r5
 800689c:	4620      	mov	r0, r4
 800689e:	f000 fe75 	bl	800758c <__lshift>
 80068a2:	4607      	mov	r7, r0
 80068a4:	9b08      	ldr	r3, [sp, #32]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04c      	beq.n	8006944 <_dtoa_r+0x9fc>
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 fc6e 	bl	800718e <_Balloc>
 80068b2:	4605      	mov	r5, r0
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	f107 010c 	add.w	r1, r7, #12
 80068ba:	3202      	adds	r2, #2
 80068bc:	0092      	lsls	r2, r2, #2
 80068be:	300c      	adds	r0, #12
 80068c0:	f000 fc5a 	bl	8007178 <memcpy>
 80068c4:	2201      	movs	r2, #1
 80068c6:	4629      	mov	r1, r5
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 fe5f 	bl	800758c <__lshift>
 80068ce:	46b9      	mov	r9, r7
 80068d0:	4607      	mov	r7, r0
 80068d2:	9b06      	ldr	r3, [sp, #24]
 80068d4:	9307      	str	r3, [sp, #28]
 80068d6:	9b02      	ldr	r3, [sp, #8]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	9308      	str	r3, [sp, #32]
 80068de:	4631      	mov	r1, r6
 80068e0:	4658      	mov	r0, fp
 80068e2:	f7ff faa3 	bl	8005e2c <quorem>
 80068e6:	4649      	mov	r1, r9
 80068e8:	4605      	mov	r5, r0
 80068ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80068ee:	4658      	mov	r0, fp
 80068f0:	f000 fea0 	bl	8007634 <__mcmp>
 80068f4:	463a      	mov	r2, r7
 80068f6:	9002      	str	r0, [sp, #8]
 80068f8:	4631      	mov	r1, r6
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 feb4 	bl	8007668 <__mdiff>
 8006900:	68c3      	ldr	r3, [r0, #12]
 8006902:	4602      	mov	r2, r0
 8006904:	bb03      	cbnz	r3, 8006948 <_dtoa_r+0xa00>
 8006906:	4601      	mov	r1, r0
 8006908:	9009      	str	r0, [sp, #36]	; 0x24
 800690a:	4658      	mov	r0, fp
 800690c:	f000 fe92 	bl	8007634 <__mcmp>
 8006910:	4603      	mov	r3, r0
 8006912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006914:	4611      	mov	r1, r2
 8006916:	4620      	mov	r0, r4
 8006918:	9309      	str	r3, [sp, #36]	; 0x24
 800691a:	f000 fc6c 	bl	80071f6 <_Bfree>
 800691e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006920:	b9a3      	cbnz	r3, 800694c <_dtoa_r+0xa04>
 8006922:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006924:	b992      	cbnz	r2, 800694c <_dtoa_r+0xa04>
 8006926:	9a08      	ldr	r2, [sp, #32]
 8006928:	b982      	cbnz	r2, 800694c <_dtoa_r+0xa04>
 800692a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800692e:	d029      	beq.n	8006984 <_dtoa_r+0xa3c>
 8006930:	9b02      	ldr	r3, [sp, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	dd01      	ble.n	800693a <_dtoa_r+0x9f2>
 8006936:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800693a:	9b07      	ldr	r3, [sp, #28]
 800693c:	1c5d      	adds	r5, r3, #1
 800693e:	f883 8000 	strb.w	r8, [r3]
 8006942:	e784      	b.n	800684e <_dtoa_r+0x906>
 8006944:	4638      	mov	r0, r7
 8006946:	e7c2      	b.n	80068ce <_dtoa_r+0x986>
 8006948:	2301      	movs	r3, #1
 800694a:	e7e3      	b.n	8006914 <_dtoa_r+0x9cc>
 800694c:	9a02      	ldr	r2, [sp, #8]
 800694e:	2a00      	cmp	r2, #0
 8006950:	db04      	blt.n	800695c <_dtoa_r+0xa14>
 8006952:	d123      	bne.n	800699c <_dtoa_r+0xa54>
 8006954:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006956:	bb0a      	cbnz	r2, 800699c <_dtoa_r+0xa54>
 8006958:	9a08      	ldr	r2, [sp, #32]
 800695a:	b9fa      	cbnz	r2, 800699c <_dtoa_r+0xa54>
 800695c:	2b00      	cmp	r3, #0
 800695e:	ddec      	ble.n	800693a <_dtoa_r+0x9f2>
 8006960:	4659      	mov	r1, fp
 8006962:	2201      	movs	r2, #1
 8006964:	4620      	mov	r0, r4
 8006966:	f000 fe11 	bl	800758c <__lshift>
 800696a:	4631      	mov	r1, r6
 800696c:	4683      	mov	fp, r0
 800696e:	f000 fe61 	bl	8007634 <__mcmp>
 8006972:	2800      	cmp	r0, #0
 8006974:	dc03      	bgt.n	800697e <_dtoa_r+0xa36>
 8006976:	d1e0      	bne.n	800693a <_dtoa_r+0x9f2>
 8006978:	f018 0f01 	tst.w	r8, #1
 800697c:	d0dd      	beq.n	800693a <_dtoa_r+0x9f2>
 800697e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006982:	d1d8      	bne.n	8006936 <_dtoa_r+0x9ee>
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	9a07      	ldr	r2, [sp, #28]
 8006988:	1c5d      	adds	r5, r3, #1
 800698a:	2339      	movs	r3, #57	; 0x39
 800698c:	7013      	strb	r3, [r2, #0]
 800698e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006992:	1e6a      	subs	r2, r5, #1
 8006994:	2b39      	cmp	r3, #57	; 0x39
 8006996:	d04d      	beq.n	8006a34 <_dtoa_r+0xaec>
 8006998:	3301      	adds	r3, #1
 800699a:	e052      	b.n	8006a42 <_dtoa_r+0xafa>
 800699c:	9a07      	ldr	r2, [sp, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f102 0501 	add.w	r5, r2, #1
 80069a4:	dd06      	ble.n	80069b4 <_dtoa_r+0xa6c>
 80069a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069aa:	d0eb      	beq.n	8006984 <_dtoa_r+0xa3c>
 80069ac:	f108 0801 	add.w	r8, r8, #1
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	e7c4      	b.n	800693e <_dtoa_r+0x9f6>
 80069b4:	9b06      	ldr	r3, [sp, #24]
 80069b6:	9a04      	ldr	r2, [sp, #16]
 80069b8:	1aeb      	subs	r3, r5, r3
 80069ba:	4293      	cmp	r3, r2
 80069bc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80069c0:	d021      	beq.n	8006a06 <_dtoa_r+0xabe>
 80069c2:	4659      	mov	r1, fp
 80069c4:	2300      	movs	r3, #0
 80069c6:	220a      	movs	r2, #10
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fc2b 	bl	8007224 <__multadd>
 80069ce:	45b9      	cmp	r9, r7
 80069d0:	4683      	mov	fp, r0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	f04f 020a 	mov.w	r2, #10
 80069da:	4649      	mov	r1, r9
 80069dc:	4620      	mov	r0, r4
 80069de:	d105      	bne.n	80069ec <_dtoa_r+0xaa4>
 80069e0:	f000 fc20 	bl	8007224 <__multadd>
 80069e4:	4681      	mov	r9, r0
 80069e6:	4607      	mov	r7, r0
 80069e8:	9507      	str	r5, [sp, #28]
 80069ea:	e778      	b.n	80068de <_dtoa_r+0x996>
 80069ec:	f000 fc1a 	bl	8007224 <__multadd>
 80069f0:	4639      	mov	r1, r7
 80069f2:	4681      	mov	r9, r0
 80069f4:	2300      	movs	r3, #0
 80069f6:	220a      	movs	r2, #10
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 fc13 	bl	8007224 <__multadd>
 80069fe:	4607      	mov	r7, r0
 8006a00:	e7f2      	b.n	80069e8 <_dtoa_r+0xaa0>
 8006a02:	f04f 0900 	mov.w	r9, #0
 8006a06:	4659      	mov	r1, fp
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 fdbe 	bl	800758c <__lshift>
 8006a10:	4631      	mov	r1, r6
 8006a12:	4683      	mov	fp, r0
 8006a14:	f000 fe0e 	bl	8007634 <__mcmp>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	dcb8      	bgt.n	800698e <_dtoa_r+0xa46>
 8006a1c:	d102      	bne.n	8006a24 <_dtoa_r+0xadc>
 8006a1e:	f018 0f01 	tst.w	r8, #1
 8006a22:	d1b4      	bne.n	800698e <_dtoa_r+0xa46>
 8006a24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a28:	1e6a      	subs	r2, r5, #1
 8006a2a:	2b30      	cmp	r3, #48	; 0x30
 8006a2c:	f47f af0f 	bne.w	800684e <_dtoa_r+0x906>
 8006a30:	4615      	mov	r5, r2
 8006a32:	e7f7      	b.n	8006a24 <_dtoa_r+0xadc>
 8006a34:	9b06      	ldr	r3, [sp, #24]
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d105      	bne.n	8006a46 <_dtoa_r+0xafe>
 8006a3a:	2331      	movs	r3, #49	; 0x31
 8006a3c:	9a06      	ldr	r2, [sp, #24]
 8006a3e:	f10a 0a01 	add.w	sl, sl, #1
 8006a42:	7013      	strb	r3, [r2, #0]
 8006a44:	e703      	b.n	800684e <_dtoa_r+0x906>
 8006a46:	4615      	mov	r5, r2
 8006a48:	e7a1      	b.n	800698e <_dtoa_r+0xa46>
 8006a4a:	4b17      	ldr	r3, [pc, #92]	; (8006aa8 <_dtoa_r+0xb60>)
 8006a4c:	f7ff bae1 	b.w	8006012 <_dtoa_r+0xca>
 8006a50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f47f aabb 	bne.w	8005fce <_dtoa_r+0x86>
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <_dtoa_r+0xb64>)
 8006a5a:	f7ff bada 	b.w	8006012 <_dtoa_r+0xca>
 8006a5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	f77f ae3f 	ble.w	80066e4 <_dtoa_r+0x79c>
 8006a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a68:	9308      	str	r3, [sp, #32]
 8006a6a:	e653      	b.n	8006714 <_dtoa_r+0x7cc>
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dc03      	bgt.n	8006a7a <_dtoa_r+0xb32>
 8006a72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	f73f aed5 	bgt.w	8006824 <_dtoa_r+0x8dc>
 8006a7a:	9d06      	ldr	r5, [sp, #24]
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4658      	mov	r0, fp
 8006a80:	f7ff f9d4 	bl	8005e2c <quorem>
 8006a84:	9b06      	ldr	r3, [sp, #24]
 8006a86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a8a:	f805 8b01 	strb.w	r8, [r5], #1
 8006a8e:	9a04      	ldr	r2, [sp, #16]
 8006a90:	1aeb      	subs	r3, r5, r3
 8006a92:	429a      	cmp	r2, r3
 8006a94:	ddb5      	ble.n	8006a02 <_dtoa_r+0xaba>
 8006a96:	4659      	mov	r1, fp
 8006a98:	2300      	movs	r3, #0
 8006a9a:	220a      	movs	r2, #10
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 fbc1 	bl	8007224 <__multadd>
 8006aa2:	4683      	mov	fp, r0
 8006aa4:	e7ea      	b.n	8006a7c <_dtoa_r+0xb34>
 8006aa6:	bf00      	nop
 8006aa8:	08007f8c 	.word	0x08007f8c
 8006aac:	08008008 	.word	0x08008008

08006ab0 <rshift>:
 8006ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab2:	6906      	ldr	r6, [r0, #16]
 8006ab4:	114b      	asrs	r3, r1, #5
 8006ab6:	429e      	cmp	r6, r3
 8006ab8:	f100 0414 	add.w	r4, r0, #20
 8006abc:	dd31      	ble.n	8006b22 <rshift+0x72>
 8006abe:	f011 011f 	ands.w	r1, r1, #31
 8006ac2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006ac6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006aca:	d108      	bne.n	8006ade <rshift+0x2e>
 8006acc:	4621      	mov	r1, r4
 8006ace:	42b2      	cmp	r2, r6
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	d211      	bcs.n	8006af8 <rshift+0x48>
 8006ad4:	f852 3b04 	ldr.w	r3, [r2], #4
 8006ad8:	f841 3b04 	str.w	r3, [r1], #4
 8006adc:	e7f7      	b.n	8006ace <rshift+0x1e>
 8006ade:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	f1c1 0c20 	rsb	ip, r1, #32
 8006ae8:	40cd      	lsrs	r5, r1
 8006aea:	3204      	adds	r2, #4
 8006aec:	42b2      	cmp	r2, r6
 8006aee:	4617      	mov	r7, r2
 8006af0:	d30d      	bcc.n	8006b0e <rshift+0x5e>
 8006af2:	601d      	str	r5, [r3, #0]
 8006af4:	b105      	cbz	r5, 8006af8 <rshift+0x48>
 8006af6:	3304      	adds	r3, #4
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	eba3 0204 	sub.w	r2, r3, r4
 8006afe:	bf08      	it	eq
 8006b00:	2300      	moveq	r3, #0
 8006b02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b06:	6102      	str	r2, [r0, #16]
 8006b08:	bf08      	it	eq
 8006b0a:	6143      	streq	r3, [r0, #20]
 8006b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b0e:	683f      	ldr	r7, [r7, #0]
 8006b10:	fa07 f70c 	lsl.w	r7, r7, ip
 8006b14:	433d      	orrs	r5, r7
 8006b16:	f843 5b04 	str.w	r5, [r3], #4
 8006b1a:	f852 5b04 	ldr.w	r5, [r2], #4
 8006b1e:	40cd      	lsrs	r5, r1
 8006b20:	e7e4      	b.n	8006aec <rshift+0x3c>
 8006b22:	4623      	mov	r3, r4
 8006b24:	e7e8      	b.n	8006af8 <rshift+0x48>

08006b26 <__hexdig_fun>:
 8006b26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b2a:	2b09      	cmp	r3, #9
 8006b2c:	d802      	bhi.n	8006b34 <__hexdig_fun+0xe>
 8006b2e:	3820      	subs	r0, #32
 8006b30:	b2c0      	uxtb	r0, r0
 8006b32:	4770      	bx	lr
 8006b34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006b38:	2b05      	cmp	r3, #5
 8006b3a:	d801      	bhi.n	8006b40 <__hexdig_fun+0x1a>
 8006b3c:	3847      	subs	r0, #71	; 0x47
 8006b3e:	e7f7      	b.n	8006b30 <__hexdig_fun+0xa>
 8006b40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b44:	2b05      	cmp	r3, #5
 8006b46:	d801      	bhi.n	8006b4c <__hexdig_fun+0x26>
 8006b48:	3827      	subs	r0, #39	; 0x27
 8006b4a:	e7f1      	b.n	8006b30 <__hexdig_fun+0xa>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	4770      	bx	lr

08006b50 <__gethex>:
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	b08b      	sub	sp, #44	; 0x2c
 8006b56:	9002      	str	r0, [sp, #8]
 8006b58:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006b5a:	468a      	mov	sl, r1
 8006b5c:	4690      	mov	r8, r2
 8006b5e:	9306      	str	r3, [sp, #24]
 8006b60:	f000 fad1 	bl	8007106 <__localeconv_l>
 8006b64:	6803      	ldr	r3, [r0, #0]
 8006b66:	f04f 0b00 	mov.w	fp, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	f7f9 faef 	bl	8000150 <strlen>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	9001      	str	r0, [sp, #4]
 8006b76:	4403      	add	r3, r0
 8006b78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b7c:	9307      	str	r3, [sp, #28]
 8006b7e:	f8da 3000 	ldr.w	r3, [sl]
 8006b82:	3302      	adds	r3, #2
 8006b84:	461f      	mov	r7, r3
 8006b86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b8a:	2830      	cmp	r0, #48	; 0x30
 8006b8c:	d06c      	beq.n	8006c68 <__gethex+0x118>
 8006b8e:	f7ff ffca 	bl	8006b26 <__hexdig_fun>
 8006b92:	4604      	mov	r4, r0
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d16a      	bne.n	8006c6e <__gethex+0x11e>
 8006b98:	9a01      	ldr	r2, [sp, #4]
 8006b9a:	9903      	ldr	r1, [sp, #12]
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	f001 f905 	bl	8007dac <strncmp>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d166      	bne.n	8006c74 <__gethex+0x124>
 8006ba6:	9b01      	ldr	r3, [sp, #4]
 8006ba8:	5cf8      	ldrb	r0, [r7, r3]
 8006baa:	18fe      	adds	r6, r7, r3
 8006bac:	f7ff ffbb 	bl	8006b26 <__hexdig_fun>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d062      	beq.n	8006c7a <__gethex+0x12a>
 8006bb4:	4633      	mov	r3, r6
 8006bb6:	7818      	ldrb	r0, [r3, #0]
 8006bb8:	461f      	mov	r7, r3
 8006bba:	2830      	cmp	r0, #48	; 0x30
 8006bbc:	f103 0301 	add.w	r3, r3, #1
 8006bc0:	d0f9      	beq.n	8006bb6 <__gethex+0x66>
 8006bc2:	f7ff ffb0 	bl	8006b26 <__hexdig_fun>
 8006bc6:	fab0 f580 	clz	r5, r0
 8006bca:	4634      	mov	r4, r6
 8006bcc:	f04f 0b01 	mov.w	fp, #1
 8006bd0:	096d      	lsrs	r5, r5, #5
 8006bd2:	463a      	mov	r2, r7
 8006bd4:	4616      	mov	r6, r2
 8006bd6:	7830      	ldrb	r0, [r6, #0]
 8006bd8:	3201      	adds	r2, #1
 8006bda:	f7ff ffa4 	bl	8006b26 <__hexdig_fun>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d1f8      	bne.n	8006bd4 <__gethex+0x84>
 8006be2:	9a01      	ldr	r2, [sp, #4]
 8006be4:	9903      	ldr	r1, [sp, #12]
 8006be6:	4630      	mov	r0, r6
 8006be8:	f001 f8e0 	bl	8007dac <strncmp>
 8006bec:	b950      	cbnz	r0, 8006c04 <__gethex+0xb4>
 8006bee:	b954      	cbnz	r4, 8006c06 <__gethex+0xb6>
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	18f4      	adds	r4, r6, r3
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	4616      	mov	r6, r2
 8006bf8:	7830      	ldrb	r0, [r6, #0]
 8006bfa:	3201      	adds	r2, #1
 8006bfc:	f7ff ff93 	bl	8006b26 <__hexdig_fun>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d1f8      	bne.n	8006bf6 <__gethex+0xa6>
 8006c04:	b10c      	cbz	r4, 8006c0a <__gethex+0xba>
 8006c06:	1ba4      	subs	r4, r4, r6
 8006c08:	00a4      	lsls	r4, r4, #2
 8006c0a:	7833      	ldrb	r3, [r6, #0]
 8006c0c:	2b50      	cmp	r3, #80	; 0x50
 8006c0e:	d001      	beq.n	8006c14 <__gethex+0xc4>
 8006c10:	2b70      	cmp	r3, #112	; 0x70
 8006c12:	d140      	bne.n	8006c96 <__gethex+0x146>
 8006c14:	7873      	ldrb	r3, [r6, #1]
 8006c16:	2b2b      	cmp	r3, #43	; 0x2b
 8006c18:	d031      	beq.n	8006c7e <__gethex+0x12e>
 8006c1a:	2b2d      	cmp	r3, #45	; 0x2d
 8006c1c:	d033      	beq.n	8006c86 <__gethex+0x136>
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	1c71      	adds	r1, r6, #1
 8006c24:	7808      	ldrb	r0, [r1, #0]
 8006c26:	f7ff ff7e 	bl	8006b26 <__hexdig_fun>
 8006c2a:	1e43      	subs	r3, r0, #1
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b18      	cmp	r3, #24
 8006c30:	d831      	bhi.n	8006c96 <__gethex+0x146>
 8006c32:	f1a0 0210 	sub.w	r2, r0, #16
 8006c36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c3a:	f7ff ff74 	bl	8006b26 <__hexdig_fun>
 8006c3e:	1e43      	subs	r3, r0, #1
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b18      	cmp	r3, #24
 8006c44:	d922      	bls.n	8006c8c <__gethex+0x13c>
 8006c46:	f1b9 0f00 	cmp.w	r9, #0
 8006c4a:	d000      	beq.n	8006c4e <__gethex+0xfe>
 8006c4c:	4252      	negs	r2, r2
 8006c4e:	4414      	add	r4, r2
 8006c50:	f8ca 1000 	str.w	r1, [sl]
 8006c54:	b30d      	cbz	r5, 8006c9a <__gethex+0x14a>
 8006c56:	f1bb 0f00 	cmp.w	fp, #0
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2706      	moveq	r7, #6
 8006c5e:	2700      	movne	r7, #0
 8006c60:	4638      	mov	r0, r7
 8006c62:	b00b      	add	sp, #44	; 0x2c
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	f10b 0b01 	add.w	fp, fp, #1
 8006c6c:	e78a      	b.n	8006b84 <__gethex+0x34>
 8006c6e:	2500      	movs	r5, #0
 8006c70:	462c      	mov	r4, r5
 8006c72:	e7ae      	b.n	8006bd2 <__gethex+0x82>
 8006c74:	463e      	mov	r6, r7
 8006c76:	2501      	movs	r5, #1
 8006c78:	e7c7      	b.n	8006c0a <__gethex+0xba>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	e7fb      	b.n	8006c76 <__gethex+0x126>
 8006c7e:	f04f 0900 	mov.w	r9, #0
 8006c82:	1cb1      	adds	r1, r6, #2
 8006c84:	e7ce      	b.n	8006c24 <__gethex+0xd4>
 8006c86:	f04f 0901 	mov.w	r9, #1
 8006c8a:	e7fa      	b.n	8006c82 <__gethex+0x132>
 8006c8c:	230a      	movs	r3, #10
 8006c8e:	fb03 0202 	mla	r2, r3, r2, r0
 8006c92:	3a10      	subs	r2, #16
 8006c94:	e7cf      	b.n	8006c36 <__gethex+0xe6>
 8006c96:	4631      	mov	r1, r6
 8006c98:	e7da      	b.n	8006c50 <__gethex+0x100>
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	1bf3      	subs	r3, r6, r7
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b07      	cmp	r3, #7
 8006ca2:	dc49      	bgt.n	8006d38 <__gethex+0x1e8>
 8006ca4:	9802      	ldr	r0, [sp, #8]
 8006ca6:	f000 fa72 	bl	800718e <_Balloc>
 8006caa:	f04f 0b00 	mov.w	fp, #0
 8006cae:	4605      	mov	r5, r0
 8006cb0:	46da      	mov	sl, fp
 8006cb2:	9b01      	ldr	r3, [sp, #4]
 8006cb4:	f100 0914 	add.w	r9, r0, #20
 8006cb8:	f1c3 0301 	rsb	r3, r3, #1
 8006cbc:	f8cd 9010 	str.w	r9, [sp, #16]
 8006cc0:	9308      	str	r3, [sp, #32]
 8006cc2:	42b7      	cmp	r7, r6
 8006cc4:	d33b      	bcc.n	8006d3e <__gethex+0x1ee>
 8006cc6:	9804      	ldr	r0, [sp, #16]
 8006cc8:	f840 ab04 	str.w	sl, [r0], #4
 8006ccc:	eba0 0009 	sub.w	r0, r0, r9
 8006cd0:	1080      	asrs	r0, r0, #2
 8006cd2:	6128      	str	r0, [r5, #16]
 8006cd4:	0147      	lsls	r7, r0, #5
 8006cd6:	4650      	mov	r0, sl
 8006cd8:	f000 fb1d 	bl	8007316 <__hi0bits>
 8006cdc:	f8d8 6000 	ldr.w	r6, [r8]
 8006ce0:	1a3f      	subs	r7, r7, r0
 8006ce2:	42b7      	cmp	r7, r6
 8006ce4:	dd64      	ble.n	8006db0 <__gethex+0x260>
 8006ce6:	1bbf      	subs	r7, r7, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 fe27 	bl	800793e <__any_on>
 8006cf0:	4682      	mov	sl, r0
 8006cf2:	b178      	cbz	r0, 8006d14 <__gethex+0x1c4>
 8006cf4:	f04f 0a01 	mov.w	sl, #1
 8006cf8:	1e7b      	subs	r3, r7, #1
 8006cfa:	1159      	asrs	r1, r3, #5
 8006cfc:	f003 021f 	and.w	r2, r3, #31
 8006d00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006d04:	fa0a f202 	lsl.w	r2, sl, r2
 8006d08:	420a      	tst	r2, r1
 8006d0a:	d003      	beq.n	8006d14 <__gethex+0x1c4>
 8006d0c:	4553      	cmp	r3, sl
 8006d0e:	dc46      	bgt.n	8006d9e <__gethex+0x24e>
 8006d10:	f04f 0a02 	mov.w	sl, #2
 8006d14:	4639      	mov	r1, r7
 8006d16:	4628      	mov	r0, r5
 8006d18:	f7ff feca 	bl	8006ab0 <rshift>
 8006d1c:	443c      	add	r4, r7
 8006d1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	da52      	bge.n	8006dcc <__gethex+0x27c>
 8006d26:	4629      	mov	r1, r5
 8006d28:	9802      	ldr	r0, [sp, #8]
 8006d2a:	f000 fa64 	bl	80071f6 <_Bfree>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d32:	27a3      	movs	r7, #163	; 0xa3
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e793      	b.n	8006c60 <__gethex+0x110>
 8006d38:	3101      	adds	r1, #1
 8006d3a:	105b      	asrs	r3, r3, #1
 8006d3c:	e7b0      	b.n	8006ca0 <__gethex+0x150>
 8006d3e:	1e73      	subs	r3, r6, #1
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	9a07      	ldr	r2, [sp, #28]
 8006d44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <__gethex+0x22e>
 8006d4c:	f1bb 0f20 	cmp.w	fp, #32
 8006d50:	d107      	bne.n	8006d62 <__gethex+0x212>
 8006d52:	9b04      	ldr	r3, [sp, #16]
 8006d54:	f8c3 a000 	str.w	sl, [r3]
 8006d58:	f04f 0a00 	mov.w	sl, #0
 8006d5c:	46d3      	mov	fp, sl
 8006d5e:	3304      	adds	r3, #4
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006d66:	f7ff fede 	bl	8006b26 <__hexdig_fun>
 8006d6a:	f000 000f 	and.w	r0, r0, #15
 8006d6e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006d72:	ea4a 0a00 	orr.w	sl, sl, r0
 8006d76:	f10b 0b04 	add.w	fp, fp, #4
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	e00d      	b.n	8006d9a <__gethex+0x24a>
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	9a08      	ldr	r2, [sp, #32]
 8006d82:	4413      	add	r3, r2
 8006d84:	42bb      	cmp	r3, r7
 8006d86:	d3e1      	bcc.n	8006d4c <__gethex+0x1fc>
 8006d88:	4618      	mov	r0, r3
 8006d8a:	9a01      	ldr	r2, [sp, #4]
 8006d8c:	9903      	ldr	r1, [sp, #12]
 8006d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d90:	f001 f80c 	bl	8007dac <strncmp>
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d1d8      	bne.n	8006d4c <__gethex+0x1fc>
 8006d9a:	461e      	mov	r6, r3
 8006d9c:	e791      	b.n	8006cc2 <__gethex+0x172>
 8006d9e:	1eb9      	subs	r1, r7, #2
 8006da0:	4628      	mov	r0, r5
 8006da2:	f000 fdcc 	bl	800793e <__any_on>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d0b2      	beq.n	8006d10 <__gethex+0x1c0>
 8006daa:	f04f 0a03 	mov.w	sl, #3
 8006dae:	e7b1      	b.n	8006d14 <__gethex+0x1c4>
 8006db0:	da09      	bge.n	8006dc6 <__gethex+0x276>
 8006db2:	1bf7      	subs	r7, r6, r7
 8006db4:	4629      	mov	r1, r5
 8006db6:	463a      	mov	r2, r7
 8006db8:	9802      	ldr	r0, [sp, #8]
 8006dba:	f000 fbe7 	bl	800758c <__lshift>
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	1be4      	subs	r4, r4, r7
 8006dc2:	f100 0914 	add.w	r9, r0, #20
 8006dc6:	f04f 0a00 	mov.w	sl, #0
 8006dca:	e7a8      	b.n	8006d1e <__gethex+0x1ce>
 8006dcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	dd6b      	ble.n	8006eac <__gethex+0x35c>
 8006dd4:	1b04      	subs	r4, r0, r4
 8006dd6:	42a6      	cmp	r6, r4
 8006dd8:	dc2e      	bgt.n	8006e38 <__gethex+0x2e8>
 8006dda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d022      	beq.n	8006e28 <__gethex+0x2d8>
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d024      	beq.n	8006e30 <__gethex+0x2e0>
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d115      	bne.n	8006e16 <__gethex+0x2c6>
 8006dea:	42a6      	cmp	r6, r4
 8006dec:	d113      	bne.n	8006e16 <__gethex+0x2c6>
 8006dee:	2e01      	cmp	r6, #1
 8006df0:	dc0b      	bgt.n	8006e0a <__gethex+0x2ba>
 8006df2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006df6:	9a06      	ldr	r2, [sp, #24]
 8006df8:	2762      	movs	r7, #98	; 0x62
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	612b      	str	r3, [r5, #16]
 8006e00:	f8c9 3000 	str.w	r3, [r9]
 8006e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e06:	601d      	str	r5, [r3, #0]
 8006e08:	e72a      	b.n	8006c60 <__gethex+0x110>
 8006e0a:	1e71      	subs	r1, r6, #1
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 fd96 	bl	800793e <__any_on>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d1ed      	bne.n	8006df2 <__gethex+0x2a2>
 8006e16:	4629      	mov	r1, r5
 8006e18:	9802      	ldr	r0, [sp, #8]
 8006e1a:	f000 f9ec 	bl	80071f6 <_Bfree>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e22:	2750      	movs	r7, #80	; 0x50
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e71b      	b.n	8006c60 <__gethex+0x110>
 8006e28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0e1      	beq.n	8006df2 <__gethex+0x2a2>
 8006e2e:	e7f2      	b.n	8006e16 <__gethex+0x2c6>
 8006e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1dd      	bne.n	8006df2 <__gethex+0x2a2>
 8006e36:	e7ee      	b.n	8006e16 <__gethex+0x2c6>
 8006e38:	1e67      	subs	r7, r4, #1
 8006e3a:	f1ba 0f00 	cmp.w	sl, #0
 8006e3e:	d132      	bne.n	8006ea6 <__gethex+0x356>
 8006e40:	b127      	cbz	r7, 8006e4c <__gethex+0x2fc>
 8006e42:	4639      	mov	r1, r7
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 fd7a 	bl	800793e <__any_on>
 8006e4a:	4682      	mov	sl, r0
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	117a      	asrs	r2, r7, #5
 8006e50:	f007 071f 	and.w	r7, r7, #31
 8006e54:	fa03 f707 	lsl.w	r7, r3, r7
 8006e58:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	421f      	tst	r7, r3
 8006e60:	f04f 0702 	mov.w	r7, #2
 8006e64:	4628      	mov	r0, r5
 8006e66:	bf18      	it	ne
 8006e68:	f04a 0a02 	orrne.w	sl, sl, #2
 8006e6c:	1b36      	subs	r6, r6, r4
 8006e6e:	f7ff fe1f 	bl	8006ab0 <rshift>
 8006e72:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006e76:	f1ba 0f00 	cmp.w	sl, #0
 8006e7a:	d048      	beq.n	8006f0e <__gethex+0x3be>
 8006e7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d015      	beq.n	8006eb0 <__gethex+0x360>
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d017      	beq.n	8006eb8 <__gethex+0x368>
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d109      	bne.n	8006ea0 <__gethex+0x350>
 8006e8c:	f01a 0f02 	tst.w	sl, #2
 8006e90:	d006      	beq.n	8006ea0 <__gethex+0x350>
 8006e92:	f8d9 3000 	ldr.w	r3, [r9]
 8006e96:	ea4a 0a03 	orr.w	sl, sl, r3
 8006e9a:	f01a 0f01 	tst.w	sl, #1
 8006e9e:	d10e      	bne.n	8006ebe <__gethex+0x36e>
 8006ea0:	f047 0710 	orr.w	r7, r7, #16
 8006ea4:	e033      	b.n	8006f0e <__gethex+0x3be>
 8006ea6:	f04f 0a01 	mov.w	sl, #1
 8006eaa:	e7cf      	b.n	8006e4c <__gethex+0x2fc>
 8006eac:	2701      	movs	r7, #1
 8006eae:	e7e2      	b.n	8006e76 <__gethex+0x326>
 8006eb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb2:	f1c3 0301 	rsb	r3, r3, #1
 8006eb6:	9315      	str	r3, [sp, #84]	; 0x54
 8006eb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <__gethex+0x350>
 8006ebe:	f04f 0c00 	mov.w	ip, #0
 8006ec2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006ec6:	f105 0314 	add.w	r3, r5, #20
 8006eca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006ece:	eb03 010a 	add.w	r1, r3, sl
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006edc:	d01c      	beq.n	8006f18 <__gethex+0x3c8>
 8006ede:	3201      	adds	r2, #1
 8006ee0:	6002      	str	r2, [r0, #0]
 8006ee2:	2f02      	cmp	r7, #2
 8006ee4:	f105 0314 	add.w	r3, r5, #20
 8006ee8:	d138      	bne.n	8006f5c <__gethex+0x40c>
 8006eea:	f8d8 2000 	ldr.w	r2, [r8]
 8006eee:	3a01      	subs	r2, #1
 8006ef0:	42b2      	cmp	r2, r6
 8006ef2:	d10a      	bne.n	8006f0a <__gethex+0x3ba>
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	1171      	asrs	r1, r6, #5
 8006ef8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006efc:	f006 061f 	and.w	r6, r6, #31
 8006f00:	fa02 f606 	lsl.w	r6, r2, r6
 8006f04:	421e      	tst	r6, r3
 8006f06:	bf18      	it	ne
 8006f08:	4617      	movne	r7, r2
 8006f0a:	f047 0720 	orr.w	r7, r7, #32
 8006f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f10:	601d      	str	r5, [r3, #0]
 8006f12:	9b06      	ldr	r3, [sp, #24]
 8006f14:	601c      	str	r4, [r3, #0]
 8006f16:	e6a3      	b.n	8006c60 <__gethex+0x110>
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f1e:	d8d8      	bhi.n	8006ed2 <__gethex+0x382>
 8006f20:	68ab      	ldr	r3, [r5, #8]
 8006f22:	4599      	cmp	r9, r3
 8006f24:	db12      	blt.n	8006f4c <__gethex+0x3fc>
 8006f26:	6869      	ldr	r1, [r5, #4]
 8006f28:	9802      	ldr	r0, [sp, #8]
 8006f2a:	3101      	adds	r1, #1
 8006f2c:	f000 f92f 	bl	800718e <_Balloc>
 8006f30:	4683      	mov	fp, r0
 8006f32:	692a      	ldr	r2, [r5, #16]
 8006f34:	f105 010c 	add.w	r1, r5, #12
 8006f38:	3202      	adds	r2, #2
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	300c      	adds	r0, #12
 8006f3e:	f000 f91b 	bl	8007178 <memcpy>
 8006f42:	4629      	mov	r1, r5
 8006f44:	9802      	ldr	r0, [sp, #8]
 8006f46:	f000 f956 	bl	80071f6 <_Bfree>
 8006f4a:	465d      	mov	r5, fp
 8006f4c:	692b      	ldr	r3, [r5, #16]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	612a      	str	r2, [r5, #16]
 8006f52:	2201      	movs	r2, #1
 8006f54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006f58:	615a      	str	r2, [r3, #20]
 8006f5a:	e7c2      	b.n	8006ee2 <__gethex+0x392>
 8006f5c:	692a      	ldr	r2, [r5, #16]
 8006f5e:	454a      	cmp	r2, r9
 8006f60:	dd0b      	ble.n	8006f7a <__gethex+0x42a>
 8006f62:	2101      	movs	r1, #1
 8006f64:	4628      	mov	r0, r5
 8006f66:	f7ff fda3 	bl	8006ab0 <rshift>
 8006f6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f6e:	3401      	adds	r4, #1
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	f6ff aed8 	blt.w	8006d26 <__gethex+0x1d6>
 8006f76:	2701      	movs	r7, #1
 8006f78:	e7c7      	b.n	8006f0a <__gethex+0x3ba>
 8006f7a:	f016 061f 	ands.w	r6, r6, #31
 8006f7e:	d0fa      	beq.n	8006f76 <__gethex+0x426>
 8006f80:	449a      	add	sl, r3
 8006f82:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006f86:	f000 f9c6 	bl	8007316 <__hi0bits>
 8006f8a:	f1c6 0620 	rsb	r6, r6, #32
 8006f8e:	42b0      	cmp	r0, r6
 8006f90:	dbe7      	blt.n	8006f62 <__gethex+0x412>
 8006f92:	e7f0      	b.n	8006f76 <__gethex+0x426>

08006f94 <L_shift>:
 8006f94:	f1c2 0208 	rsb	r2, r2, #8
 8006f98:	0092      	lsls	r2, r2, #2
 8006f9a:	b570      	push	{r4, r5, r6, lr}
 8006f9c:	f1c2 0620 	rsb	r6, r2, #32
 8006fa0:	6843      	ldr	r3, [r0, #4]
 8006fa2:	6804      	ldr	r4, [r0, #0]
 8006fa4:	fa03 f506 	lsl.w	r5, r3, r6
 8006fa8:	432c      	orrs	r4, r5
 8006faa:	40d3      	lsrs	r3, r2
 8006fac:	6004      	str	r4, [r0, #0]
 8006fae:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fb2:	4288      	cmp	r0, r1
 8006fb4:	d3f4      	bcc.n	8006fa0 <L_shift+0xc>
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}

08006fb8 <__match>:
 8006fb8:	b530      	push	{r4, r5, lr}
 8006fba:	6803      	ldr	r3, [r0, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc2:	b914      	cbnz	r4, 8006fca <__match+0x12>
 8006fc4:	6003      	str	r3, [r0, #0]
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	bd30      	pop	{r4, r5, pc}
 8006fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006fd2:	2d19      	cmp	r5, #25
 8006fd4:	bf98      	it	ls
 8006fd6:	3220      	addls	r2, #32
 8006fd8:	42a2      	cmp	r2, r4
 8006fda:	d0f0      	beq.n	8006fbe <__match+0x6>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e7f3      	b.n	8006fc8 <__match+0x10>

08006fe0 <__hexnan>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	2500      	movs	r5, #0
 8006fe6:	680b      	ldr	r3, [r1, #0]
 8006fe8:	4682      	mov	sl, r0
 8006fea:	115f      	asrs	r7, r3, #5
 8006fec:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006ff0:	f013 031f 	ands.w	r3, r3, #31
 8006ff4:	bf18      	it	ne
 8006ff6:	3704      	addne	r7, #4
 8006ff8:	1f3e      	subs	r6, r7, #4
 8006ffa:	4690      	mov	r8, r2
 8006ffc:	46b1      	mov	r9, r6
 8006ffe:	4634      	mov	r4, r6
 8007000:	46ab      	mov	fp, r5
 8007002:	b087      	sub	sp, #28
 8007004:	6801      	ldr	r1, [r0, #0]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	f847 5c04 	str.w	r5, [r7, #-4]
 800700c:	9502      	str	r5, [sp, #8]
 800700e:	784a      	ldrb	r2, [r1, #1]
 8007010:	1c4b      	adds	r3, r1, #1
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	b342      	cbz	r2, 8007068 <__hexnan+0x88>
 8007016:	4610      	mov	r0, r2
 8007018:	9105      	str	r1, [sp, #20]
 800701a:	9204      	str	r2, [sp, #16]
 800701c:	f7ff fd83 	bl	8006b26 <__hexdig_fun>
 8007020:	2800      	cmp	r0, #0
 8007022:	d143      	bne.n	80070ac <__hexnan+0xcc>
 8007024:	9a04      	ldr	r2, [sp, #16]
 8007026:	9905      	ldr	r1, [sp, #20]
 8007028:	2a20      	cmp	r2, #32
 800702a:	d818      	bhi.n	800705e <__hexnan+0x7e>
 800702c:	9b02      	ldr	r3, [sp, #8]
 800702e:	459b      	cmp	fp, r3
 8007030:	dd13      	ble.n	800705a <__hexnan+0x7a>
 8007032:	454c      	cmp	r4, r9
 8007034:	d206      	bcs.n	8007044 <__hexnan+0x64>
 8007036:	2d07      	cmp	r5, #7
 8007038:	dc04      	bgt.n	8007044 <__hexnan+0x64>
 800703a:	462a      	mov	r2, r5
 800703c:	4649      	mov	r1, r9
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff ffa8 	bl	8006f94 <L_shift>
 8007044:	4544      	cmp	r4, r8
 8007046:	d944      	bls.n	80070d2 <__hexnan+0xf2>
 8007048:	2300      	movs	r3, #0
 800704a:	f1a4 0904 	sub.w	r9, r4, #4
 800704e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007052:	461d      	mov	r5, r3
 8007054:	464c      	mov	r4, r9
 8007056:	f8cd b008 	str.w	fp, [sp, #8]
 800705a:	9903      	ldr	r1, [sp, #12]
 800705c:	e7d7      	b.n	800700e <__hexnan+0x2e>
 800705e:	2a29      	cmp	r2, #41	; 0x29
 8007060:	d14a      	bne.n	80070f8 <__hexnan+0x118>
 8007062:	3102      	adds	r1, #2
 8007064:	f8ca 1000 	str.w	r1, [sl]
 8007068:	f1bb 0f00 	cmp.w	fp, #0
 800706c:	d044      	beq.n	80070f8 <__hexnan+0x118>
 800706e:	454c      	cmp	r4, r9
 8007070:	d206      	bcs.n	8007080 <__hexnan+0xa0>
 8007072:	2d07      	cmp	r5, #7
 8007074:	dc04      	bgt.n	8007080 <__hexnan+0xa0>
 8007076:	462a      	mov	r2, r5
 8007078:	4649      	mov	r1, r9
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff ff8a 	bl	8006f94 <L_shift>
 8007080:	4544      	cmp	r4, r8
 8007082:	d928      	bls.n	80070d6 <__hexnan+0xf6>
 8007084:	4643      	mov	r3, r8
 8007086:	f854 2b04 	ldr.w	r2, [r4], #4
 800708a:	42a6      	cmp	r6, r4
 800708c:	f843 2b04 	str.w	r2, [r3], #4
 8007090:	d2f9      	bcs.n	8007086 <__hexnan+0xa6>
 8007092:	2200      	movs	r2, #0
 8007094:	f843 2b04 	str.w	r2, [r3], #4
 8007098:	429e      	cmp	r6, r3
 800709a:	d2fb      	bcs.n	8007094 <__hexnan+0xb4>
 800709c:	6833      	ldr	r3, [r6, #0]
 800709e:	b91b      	cbnz	r3, 80070a8 <__hexnan+0xc8>
 80070a0:	4546      	cmp	r6, r8
 80070a2:	d127      	bne.n	80070f4 <__hexnan+0x114>
 80070a4:	2301      	movs	r3, #1
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	2005      	movs	r0, #5
 80070aa:	e026      	b.n	80070fa <__hexnan+0x11a>
 80070ac:	3501      	adds	r5, #1
 80070ae:	2d08      	cmp	r5, #8
 80070b0:	f10b 0b01 	add.w	fp, fp, #1
 80070b4:	dd06      	ble.n	80070c4 <__hexnan+0xe4>
 80070b6:	4544      	cmp	r4, r8
 80070b8:	d9cf      	bls.n	800705a <__hexnan+0x7a>
 80070ba:	2300      	movs	r3, #0
 80070bc:	2501      	movs	r5, #1
 80070be:	f844 3c04 	str.w	r3, [r4, #-4]
 80070c2:	3c04      	subs	r4, #4
 80070c4:	6822      	ldr	r2, [r4, #0]
 80070c6:	f000 000f 	and.w	r0, r0, #15
 80070ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80070ce:	6020      	str	r0, [r4, #0]
 80070d0:	e7c3      	b.n	800705a <__hexnan+0x7a>
 80070d2:	2508      	movs	r5, #8
 80070d4:	e7c1      	b.n	800705a <__hexnan+0x7a>
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0df      	beq.n	800709c <__hexnan+0xbc>
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	f1c3 0320 	rsb	r3, r3, #32
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80070ec:	401a      	ands	r2, r3
 80070ee:	f847 2c04 	str.w	r2, [r7, #-4]
 80070f2:	e7d3      	b.n	800709c <__hexnan+0xbc>
 80070f4:	3e04      	subs	r6, #4
 80070f6:	e7d1      	b.n	800709c <__hexnan+0xbc>
 80070f8:	2004      	movs	r0, #4
 80070fa:	b007      	add	sp, #28
 80070fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007100 <__locale_ctype_ptr_l>:
 8007100:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007104:	4770      	bx	lr

08007106 <__localeconv_l>:
 8007106:	30f0      	adds	r0, #240	; 0xf0
 8007108:	4770      	bx	lr
	...

0800710c <_localeconv_r>:
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <_localeconv_r+0x14>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a18      	ldr	r0, [r3, #32]
 8007112:	4b04      	ldr	r3, [pc, #16]	; (8007124 <_localeconv_r+0x18>)
 8007114:	2800      	cmp	r0, #0
 8007116:	bf08      	it	eq
 8007118:	4618      	moveq	r0, r3
 800711a:	30f0      	adds	r0, #240	; 0xf0
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000018 	.word	0x20000018
 8007124:	2000007c 	.word	0x2000007c

08007128 <malloc>:
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <malloc+0xc>)
 800712a:	4601      	mov	r1, r0
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	f000 bc81 	b.w	8007a34 <_malloc_r>
 8007132:	bf00      	nop
 8007134:	20000018 	.word	0x20000018

08007138 <__ascii_mbtowc>:
 8007138:	b082      	sub	sp, #8
 800713a:	b901      	cbnz	r1, 800713e <__ascii_mbtowc+0x6>
 800713c:	a901      	add	r1, sp, #4
 800713e:	b142      	cbz	r2, 8007152 <__ascii_mbtowc+0x1a>
 8007140:	b14b      	cbz	r3, 8007156 <__ascii_mbtowc+0x1e>
 8007142:	7813      	ldrb	r3, [r2, #0]
 8007144:	600b      	str	r3, [r1, #0]
 8007146:	7812      	ldrb	r2, [r2, #0]
 8007148:	1c10      	adds	r0, r2, #0
 800714a:	bf18      	it	ne
 800714c:	2001      	movne	r0, #1
 800714e:	b002      	add	sp, #8
 8007150:	4770      	bx	lr
 8007152:	4610      	mov	r0, r2
 8007154:	e7fb      	b.n	800714e <__ascii_mbtowc+0x16>
 8007156:	f06f 0001 	mvn.w	r0, #1
 800715a:	e7f8      	b.n	800714e <__ascii_mbtowc+0x16>

0800715c <memchr>:
 800715c:	b510      	push	{r4, lr}
 800715e:	b2c9      	uxtb	r1, r1
 8007160:	4402      	add	r2, r0
 8007162:	4290      	cmp	r0, r2
 8007164:	4603      	mov	r3, r0
 8007166:	d101      	bne.n	800716c <memchr+0x10>
 8007168:	2300      	movs	r3, #0
 800716a:	e003      	b.n	8007174 <memchr+0x18>
 800716c:	781c      	ldrb	r4, [r3, #0]
 800716e:	3001      	adds	r0, #1
 8007170:	428c      	cmp	r4, r1
 8007172:	d1f6      	bne.n	8007162 <memchr+0x6>
 8007174:	4618      	mov	r0, r3
 8007176:	bd10      	pop	{r4, pc}

08007178 <memcpy>:
 8007178:	b510      	push	{r4, lr}
 800717a:	1e43      	subs	r3, r0, #1
 800717c:	440a      	add	r2, r1
 800717e:	4291      	cmp	r1, r2
 8007180:	d100      	bne.n	8007184 <memcpy+0xc>
 8007182:	bd10      	pop	{r4, pc}
 8007184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718c:	e7f7      	b.n	800717e <memcpy+0x6>

0800718e <_Balloc>:
 800718e:	b570      	push	{r4, r5, r6, lr}
 8007190:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007192:	4604      	mov	r4, r0
 8007194:	460e      	mov	r6, r1
 8007196:	b93d      	cbnz	r5, 80071a8 <_Balloc+0x1a>
 8007198:	2010      	movs	r0, #16
 800719a:	f7ff ffc5 	bl	8007128 <malloc>
 800719e:	6260      	str	r0, [r4, #36]	; 0x24
 80071a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071a4:	6005      	str	r5, [r0, #0]
 80071a6:	60c5      	str	r5, [r0, #12]
 80071a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80071aa:	68eb      	ldr	r3, [r5, #12]
 80071ac:	b183      	cbz	r3, 80071d0 <_Balloc+0x42>
 80071ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071b6:	b9b8      	cbnz	r0, 80071e8 <_Balloc+0x5a>
 80071b8:	2101      	movs	r1, #1
 80071ba:	fa01 f506 	lsl.w	r5, r1, r6
 80071be:	1d6a      	adds	r2, r5, #5
 80071c0:	0092      	lsls	r2, r2, #2
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fbdc 	bl	8007980 <_calloc_r>
 80071c8:	b160      	cbz	r0, 80071e4 <_Balloc+0x56>
 80071ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80071ce:	e00e      	b.n	80071ee <_Balloc+0x60>
 80071d0:	2221      	movs	r2, #33	; 0x21
 80071d2:	2104      	movs	r1, #4
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 fbd3 	bl	8007980 <_calloc_r>
 80071da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071dc:	60e8      	str	r0, [r5, #12]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e4      	bne.n	80071ae <_Balloc+0x20>
 80071e4:	2000      	movs	r0, #0
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	6802      	ldr	r2, [r0, #0]
 80071ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80071ee:	2300      	movs	r3, #0
 80071f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071f4:	e7f7      	b.n	80071e6 <_Balloc+0x58>

080071f6 <_Bfree>:
 80071f6:	b570      	push	{r4, r5, r6, lr}
 80071f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80071fa:	4606      	mov	r6, r0
 80071fc:	460d      	mov	r5, r1
 80071fe:	b93c      	cbnz	r4, 8007210 <_Bfree+0x1a>
 8007200:	2010      	movs	r0, #16
 8007202:	f7ff ff91 	bl	8007128 <malloc>
 8007206:	6270      	str	r0, [r6, #36]	; 0x24
 8007208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800720c:	6004      	str	r4, [r0, #0]
 800720e:	60c4      	str	r4, [r0, #12]
 8007210:	b13d      	cbz	r5, 8007222 <_Bfree+0x2c>
 8007212:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007214:	686a      	ldr	r2, [r5, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800721c:	6029      	str	r1, [r5, #0]
 800721e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007222:	bd70      	pop	{r4, r5, r6, pc}

08007224 <__multadd>:
 8007224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007228:	461f      	mov	r7, r3
 800722a:	4606      	mov	r6, r0
 800722c:	460c      	mov	r4, r1
 800722e:	2300      	movs	r3, #0
 8007230:	690d      	ldr	r5, [r1, #16]
 8007232:	f101 0c14 	add.w	ip, r1, #20
 8007236:	f8dc 0000 	ldr.w	r0, [ip]
 800723a:	3301      	adds	r3, #1
 800723c:	b281      	uxth	r1, r0
 800723e:	fb02 7101 	mla	r1, r2, r1, r7
 8007242:	0c00      	lsrs	r0, r0, #16
 8007244:	0c0f      	lsrs	r7, r1, #16
 8007246:	fb02 7000 	mla	r0, r2, r0, r7
 800724a:	b289      	uxth	r1, r1
 800724c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007250:	429d      	cmp	r5, r3
 8007252:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007256:	f84c 1b04 	str.w	r1, [ip], #4
 800725a:	dcec      	bgt.n	8007236 <__multadd+0x12>
 800725c:	b1d7      	cbz	r7, 8007294 <__multadd+0x70>
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	42ab      	cmp	r3, r5
 8007262:	dc12      	bgt.n	800728a <__multadd+0x66>
 8007264:	6861      	ldr	r1, [r4, #4]
 8007266:	4630      	mov	r0, r6
 8007268:	3101      	adds	r1, #1
 800726a:	f7ff ff90 	bl	800718e <_Balloc>
 800726e:	4680      	mov	r8, r0
 8007270:	6922      	ldr	r2, [r4, #16]
 8007272:	f104 010c 	add.w	r1, r4, #12
 8007276:	3202      	adds	r2, #2
 8007278:	0092      	lsls	r2, r2, #2
 800727a:	300c      	adds	r0, #12
 800727c:	f7ff ff7c 	bl	8007178 <memcpy>
 8007280:	4621      	mov	r1, r4
 8007282:	4630      	mov	r0, r6
 8007284:	f7ff ffb7 	bl	80071f6 <_Bfree>
 8007288:	4644      	mov	r4, r8
 800728a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800728e:	3501      	adds	r5, #1
 8007290:	615f      	str	r7, [r3, #20]
 8007292:	6125      	str	r5, [r4, #16]
 8007294:	4620      	mov	r0, r4
 8007296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800729a <__s2b>:
 800729a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800729e:	4615      	mov	r5, r2
 80072a0:	2209      	movs	r2, #9
 80072a2:	461f      	mov	r7, r3
 80072a4:	3308      	adds	r3, #8
 80072a6:	460c      	mov	r4, r1
 80072a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ac:	4606      	mov	r6, r0
 80072ae:	2201      	movs	r2, #1
 80072b0:	2100      	movs	r1, #0
 80072b2:	429a      	cmp	r2, r3
 80072b4:	db20      	blt.n	80072f8 <__s2b+0x5e>
 80072b6:	4630      	mov	r0, r6
 80072b8:	f7ff ff69 	bl	800718e <_Balloc>
 80072bc:	9b08      	ldr	r3, [sp, #32]
 80072be:	2d09      	cmp	r5, #9
 80072c0:	6143      	str	r3, [r0, #20]
 80072c2:	f04f 0301 	mov.w	r3, #1
 80072c6:	6103      	str	r3, [r0, #16]
 80072c8:	dd19      	ble.n	80072fe <__s2b+0x64>
 80072ca:	f104 0809 	add.w	r8, r4, #9
 80072ce:	46c1      	mov	r9, r8
 80072d0:	442c      	add	r4, r5
 80072d2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80072d6:	4601      	mov	r1, r0
 80072d8:	3b30      	subs	r3, #48	; 0x30
 80072da:	220a      	movs	r2, #10
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff ffa1 	bl	8007224 <__multadd>
 80072e2:	45a1      	cmp	r9, r4
 80072e4:	d1f5      	bne.n	80072d2 <__s2b+0x38>
 80072e6:	eb08 0405 	add.w	r4, r8, r5
 80072ea:	3c08      	subs	r4, #8
 80072ec:	1b2d      	subs	r5, r5, r4
 80072ee:	1963      	adds	r3, r4, r5
 80072f0:	42bb      	cmp	r3, r7
 80072f2:	db07      	blt.n	8007304 <__s2b+0x6a>
 80072f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f8:	0052      	lsls	r2, r2, #1
 80072fa:	3101      	adds	r1, #1
 80072fc:	e7d9      	b.n	80072b2 <__s2b+0x18>
 80072fe:	340a      	adds	r4, #10
 8007300:	2509      	movs	r5, #9
 8007302:	e7f3      	b.n	80072ec <__s2b+0x52>
 8007304:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007308:	4601      	mov	r1, r0
 800730a:	3b30      	subs	r3, #48	; 0x30
 800730c:	220a      	movs	r2, #10
 800730e:	4630      	mov	r0, r6
 8007310:	f7ff ff88 	bl	8007224 <__multadd>
 8007314:	e7eb      	b.n	80072ee <__s2b+0x54>

08007316 <__hi0bits>:
 8007316:	0c02      	lsrs	r2, r0, #16
 8007318:	0412      	lsls	r2, r2, #16
 800731a:	4603      	mov	r3, r0
 800731c:	b9b2      	cbnz	r2, 800734c <__hi0bits+0x36>
 800731e:	0403      	lsls	r3, r0, #16
 8007320:	2010      	movs	r0, #16
 8007322:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007326:	bf04      	itt	eq
 8007328:	021b      	lsleq	r3, r3, #8
 800732a:	3008      	addeq	r0, #8
 800732c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007330:	bf04      	itt	eq
 8007332:	011b      	lsleq	r3, r3, #4
 8007334:	3004      	addeq	r0, #4
 8007336:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800733a:	bf04      	itt	eq
 800733c:	009b      	lsleq	r3, r3, #2
 800733e:	3002      	addeq	r0, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	db06      	blt.n	8007352 <__hi0bits+0x3c>
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	d503      	bpl.n	8007350 <__hi0bits+0x3a>
 8007348:	3001      	adds	r0, #1
 800734a:	4770      	bx	lr
 800734c:	2000      	movs	r0, #0
 800734e:	e7e8      	b.n	8007322 <__hi0bits+0xc>
 8007350:	2020      	movs	r0, #32
 8007352:	4770      	bx	lr

08007354 <__lo0bits>:
 8007354:	6803      	ldr	r3, [r0, #0]
 8007356:	4601      	mov	r1, r0
 8007358:	f013 0207 	ands.w	r2, r3, #7
 800735c:	d00b      	beq.n	8007376 <__lo0bits+0x22>
 800735e:	07da      	lsls	r2, r3, #31
 8007360:	d423      	bmi.n	80073aa <__lo0bits+0x56>
 8007362:	0798      	lsls	r0, r3, #30
 8007364:	bf49      	itett	mi
 8007366:	085b      	lsrmi	r3, r3, #1
 8007368:	089b      	lsrpl	r3, r3, #2
 800736a:	2001      	movmi	r0, #1
 800736c:	600b      	strmi	r3, [r1, #0]
 800736e:	bf5c      	itt	pl
 8007370:	600b      	strpl	r3, [r1, #0]
 8007372:	2002      	movpl	r0, #2
 8007374:	4770      	bx	lr
 8007376:	b298      	uxth	r0, r3
 8007378:	b9a8      	cbnz	r0, 80073a6 <__lo0bits+0x52>
 800737a:	2010      	movs	r0, #16
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007382:	bf04      	itt	eq
 8007384:	0a1b      	lsreq	r3, r3, #8
 8007386:	3008      	addeq	r0, #8
 8007388:	071a      	lsls	r2, r3, #28
 800738a:	bf04      	itt	eq
 800738c:	091b      	lsreq	r3, r3, #4
 800738e:	3004      	addeq	r0, #4
 8007390:	079a      	lsls	r2, r3, #30
 8007392:	bf04      	itt	eq
 8007394:	089b      	lsreq	r3, r3, #2
 8007396:	3002      	addeq	r0, #2
 8007398:	07da      	lsls	r2, r3, #31
 800739a:	d402      	bmi.n	80073a2 <__lo0bits+0x4e>
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	d006      	beq.n	80073ae <__lo0bits+0x5a>
 80073a0:	3001      	adds	r0, #1
 80073a2:	600b      	str	r3, [r1, #0]
 80073a4:	4770      	bx	lr
 80073a6:	4610      	mov	r0, r2
 80073a8:	e7e9      	b.n	800737e <__lo0bits+0x2a>
 80073aa:	2000      	movs	r0, #0
 80073ac:	4770      	bx	lr
 80073ae:	2020      	movs	r0, #32
 80073b0:	4770      	bx	lr

080073b2 <__i2b>:
 80073b2:	b510      	push	{r4, lr}
 80073b4:	460c      	mov	r4, r1
 80073b6:	2101      	movs	r1, #1
 80073b8:	f7ff fee9 	bl	800718e <_Balloc>
 80073bc:	2201      	movs	r2, #1
 80073be:	6144      	str	r4, [r0, #20]
 80073c0:	6102      	str	r2, [r0, #16]
 80073c2:	bd10      	pop	{r4, pc}

080073c4 <__multiply>:
 80073c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c8:	4614      	mov	r4, r2
 80073ca:	690a      	ldr	r2, [r1, #16]
 80073cc:	6923      	ldr	r3, [r4, #16]
 80073ce:	4688      	mov	r8, r1
 80073d0:	429a      	cmp	r2, r3
 80073d2:	bfbe      	ittt	lt
 80073d4:	460b      	movlt	r3, r1
 80073d6:	46a0      	movlt	r8, r4
 80073d8:	461c      	movlt	r4, r3
 80073da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073ea:	eb07 0609 	add.w	r6, r7, r9
 80073ee:	42b3      	cmp	r3, r6
 80073f0:	bfb8      	it	lt
 80073f2:	3101      	addlt	r1, #1
 80073f4:	f7ff fecb 	bl	800718e <_Balloc>
 80073f8:	f100 0514 	add.w	r5, r0, #20
 80073fc:	462b      	mov	r3, r5
 80073fe:	2200      	movs	r2, #0
 8007400:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007404:	4573      	cmp	r3, lr
 8007406:	d316      	bcc.n	8007436 <__multiply+0x72>
 8007408:	f104 0214 	add.w	r2, r4, #20
 800740c:	f108 0114 	add.w	r1, r8, #20
 8007410:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007414:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	9b00      	ldr	r3, [sp, #0]
 800741c:	9201      	str	r2, [sp, #4]
 800741e:	4293      	cmp	r3, r2
 8007420:	d80c      	bhi.n	800743c <__multiply+0x78>
 8007422:	2e00      	cmp	r6, #0
 8007424:	dd03      	ble.n	800742e <__multiply+0x6a>
 8007426:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800742a:	2b00      	cmp	r3, #0
 800742c:	d05d      	beq.n	80074ea <__multiply+0x126>
 800742e:	6106      	str	r6, [r0, #16]
 8007430:	b003      	add	sp, #12
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	f843 2b04 	str.w	r2, [r3], #4
 800743a:	e7e3      	b.n	8007404 <__multiply+0x40>
 800743c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007440:	f1bb 0f00 	cmp.w	fp, #0
 8007444:	d023      	beq.n	800748e <__multiply+0xca>
 8007446:	4689      	mov	r9, r1
 8007448:	46ac      	mov	ip, r5
 800744a:	f04f 0800 	mov.w	r8, #0
 800744e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007452:	f8dc a000 	ldr.w	sl, [ip]
 8007456:	b2a3      	uxth	r3, r4
 8007458:	fa1f fa8a 	uxth.w	sl, sl
 800745c:	fb0b a303 	mla	r3, fp, r3, sl
 8007460:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007464:	f8dc 4000 	ldr.w	r4, [ip]
 8007468:	4443      	add	r3, r8
 800746a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800746e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007472:	46e2      	mov	sl, ip
 8007474:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007478:	b29b      	uxth	r3, r3
 800747a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800747e:	454f      	cmp	r7, r9
 8007480:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007484:	f84a 3b04 	str.w	r3, [sl], #4
 8007488:	d82b      	bhi.n	80074e2 <__multiply+0x11e>
 800748a:	f8cc 8004 	str.w	r8, [ip, #4]
 800748e:	9b01      	ldr	r3, [sp, #4]
 8007490:	3204      	adds	r2, #4
 8007492:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007496:	f1ba 0f00 	cmp.w	sl, #0
 800749a:	d020      	beq.n	80074de <__multiply+0x11a>
 800749c:	4689      	mov	r9, r1
 800749e:	46a8      	mov	r8, r5
 80074a0:	f04f 0b00 	mov.w	fp, #0
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	f8b9 c000 	ldrh.w	ip, [r9]
 80074aa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	fb0a 440c 	mla	r4, sl, ip, r4
 80074b4:	46c4      	mov	ip, r8
 80074b6:	445c      	add	r4, fp
 80074b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074bc:	f84c 3b04 	str.w	r3, [ip], #4
 80074c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80074c4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	fb0a b303 	mla	r3, sl, r3, fp
 80074ce:	454f      	cmp	r7, r9
 80074d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80074d4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80074d8:	d805      	bhi.n	80074e6 <__multiply+0x122>
 80074da:	f8c8 3004 	str.w	r3, [r8, #4]
 80074de:	3504      	adds	r5, #4
 80074e0:	e79b      	b.n	800741a <__multiply+0x56>
 80074e2:	46d4      	mov	ip, sl
 80074e4:	e7b3      	b.n	800744e <__multiply+0x8a>
 80074e6:	46e0      	mov	r8, ip
 80074e8:	e7dd      	b.n	80074a6 <__multiply+0xe2>
 80074ea:	3e01      	subs	r6, #1
 80074ec:	e799      	b.n	8007422 <__multiply+0x5e>
	...

080074f0 <__pow5mult>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	4615      	mov	r5, r2
 80074f6:	f012 0203 	ands.w	r2, r2, #3
 80074fa:	4606      	mov	r6, r0
 80074fc:	460f      	mov	r7, r1
 80074fe:	d007      	beq.n	8007510 <__pow5mult+0x20>
 8007500:	4c21      	ldr	r4, [pc, #132]	; (8007588 <__pow5mult+0x98>)
 8007502:	3a01      	subs	r2, #1
 8007504:	2300      	movs	r3, #0
 8007506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800750a:	f7ff fe8b 	bl	8007224 <__multadd>
 800750e:	4607      	mov	r7, r0
 8007510:	10ad      	asrs	r5, r5, #2
 8007512:	d035      	beq.n	8007580 <__pow5mult+0x90>
 8007514:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007516:	b93c      	cbnz	r4, 8007528 <__pow5mult+0x38>
 8007518:	2010      	movs	r0, #16
 800751a:	f7ff fe05 	bl	8007128 <malloc>
 800751e:	6270      	str	r0, [r6, #36]	; 0x24
 8007520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007524:	6004      	str	r4, [r0, #0]
 8007526:	60c4      	str	r4, [r0, #12]
 8007528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800752c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007530:	b94c      	cbnz	r4, 8007546 <__pow5mult+0x56>
 8007532:	f240 2171 	movw	r1, #625	; 0x271
 8007536:	4630      	mov	r0, r6
 8007538:	f7ff ff3b 	bl	80073b2 <__i2b>
 800753c:	2300      	movs	r3, #0
 800753e:	4604      	mov	r4, r0
 8007540:	f8c8 0008 	str.w	r0, [r8, #8]
 8007544:	6003      	str	r3, [r0, #0]
 8007546:	f04f 0800 	mov.w	r8, #0
 800754a:	07eb      	lsls	r3, r5, #31
 800754c:	d50a      	bpl.n	8007564 <__pow5mult+0x74>
 800754e:	4639      	mov	r1, r7
 8007550:	4622      	mov	r2, r4
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ff36 	bl	80073c4 <__multiply>
 8007558:	4681      	mov	r9, r0
 800755a:	4639      	mov	r1, r7
 800755c:	4630      	mov	r0, r6
 800755e:	f7ff fe4a 	bl	80071f6 <_Bfree>
 8007562:	464f      	mov	r7, r9
 8007564:	106d      	asrs	r5, r5, #1
 8007566:	d00b      	beq.n	8007580 <__pow5mult+0x90>
 8007568:	6820      	ldr	r0, [r4, #0]
 800756a:	b938      	cbnz	r0, 800757c <__pow5mult+0x8c>
 800756c:	4622      	mov	r2, r4
 800756e:	4621      	mov	r1, r4
 8007570:	4630      	mov	r0, r6
 8007572:	f7ff ff27 	bl	80073c4 <__multiply>
 8007576:	6020      	str	r0, [r4, #0]
 8007578:	f8c0 8000 	str.w	r8, [r0]
 800757c:	4604      	mov	r4, r0
 800757e:	e7e4      	b.n	800754a <__pow5mult+0x5a>
 8007580:	4638      	mov	r0, r7
 8007582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007586:	bf00      	nop
 8007588:	08008110 	.word	0x08008110

0800758c <__lshift>:
 800758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	460c      	mov	r4, r1
 8007592:	4607      	mov	r7, r0
 8007594:	4616      	mov	r6, r2
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800759c:	eb0a 0903 	add.w	r9, sl, r3
 80075a0:	6849      	ldr	r1, [r1, #4]
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	f109 0501 	add.w	r5, r9, #1
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	db32      	blt.n	8007612 <__lshift+0x86>
 80075ac:	4638      	mov	r0, r7
 80075ae:	f7ff fdee 	bl	800718e <_Balloc>
 80075b2:	2300      	movs	r3, #0
 80075b4:	4680      	mov	r8, r0
 80075b6:	461a      	mov	r2, r3
 80075b8:	f100 0114 	add.w	r1, r0, #20
 80075bc:	4553      	cmp	r3, sl
 80075be:	db2b      	blt.n	8007618 <__lshift+0x8c>
 80075c0:	6920      	ldr	r0, [r4, #16]
 80075c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c6:	f104 0314 	add.w	r3, r4, #20
 80075ca:	f016 021f 	ands.w	r2, r6, #31
 80075ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075d6:	d025      	beq.n	8007624 <__lshift+0x98>
 80075d8:	2000      	movs	r0, #0
 80075da:	f1c2 0e20 	rsb	lr, r2, #32
 80075de:	468a      	mov	sl, r1
 80075e0:	681e      	ldr	r6, [r3, #0]
 80075e2:	4096      	lsls	r6, r2
 80075e4:	4330      	orrs	r0, r6
 80075e6:	f84a 0b04 	str.w	r0, [sl], #4
 80075ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80075ee:	459c      	cmp	ip, r3
 80075f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80075f4:	d814      	bhi.n	8007620 <__lshift+0x94>
 80075f6:	6048      	str	r0, [r1, #4]
 80075f8:	b108      	cbz	r0, 80075fe <__lshift+0x72>
 80075fa:	f109 0502 	add.w	r5, r9, #2
 80075fe:	3d01      	subs	r5, #1
 8007600:	4638      	mov	r0, r7
 8007602:	f8c8 5010 	str.w	r5, [r8, #16]
 8007606:	4621      	mov	r1, r4
 8007608:	f7ff fdf5 	bl	80071f6 <_Bfree>
 800760c:	4640      	mov	r0, r8
 800760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007612:	3101      	adds	r1, #1
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	e7c7      	b.n	80075a8 <__lshift+0x1c>
 8007618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800761c:	3301      	adds	r3, #1
 800761e:	e7cd      	b.n	80075bc <__lshift+0x30>
 8007620:	4651      	mov	r1, sl
 8007622:	e7dc      	b.n	80075de <__lshift+0x52>
 8007624:	3904      	subs	r1, #4
 8007626:	f853 2b04 	ldr.w	r2, [r3], #4
 800762a:	459c      	cmp	ip, r3
 800762c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007630:	d8f9      	bhi.n	8007626 <__lshift+0x9a>
 8007632:	e7e4      	b.n	80075fe <__lshift+0x72>

08007634 <__mcmp>:
 8007634:	6903      	ldr	r3, [r0, #16]
 8007636:	690a      	ldr	r2, [r1, #16]
 8007638:	b530      	push	{r4, r5, lr}
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	d10c      	bne.n	8007658 <__mcmp+0x24>
 800763e:	0092      	lsls	r2, r2, #2
 8007640:	3014      	adds	r0, #20
 8007642:	3114      	adds	r1, #20
 8007644:	1884      	adds	r4, r0, r2
 8007646:	4411      	add	r1, r2
 8007648:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800764c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007650:	4295      	cmp	r5, r2
 8007652:	d003      	beq.n	800765c <__mcmp+0x28>
 8007654:	d305      	bcc.n	8007662 <__mcmp+0x2e>
 8007656:	2301      	movs	r3, #1
 8007658:	4618      	mov	r0, r3
 800765a:	bd30      	pop	{r4, r5, pc}
 800765c:	42a0      	cmp	r0, r4
 800765e:	d3f3      	bcc.n	8007648 <__mcmp+0x14>
 8007660:	e7fa      	b.n	8007658 <__mcmp+0x24>
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
 8007666:	e7f7      	b.n	8007658 <__mcmp+0x24>

08007668 <__mdiff>:
 8007668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800766c:	460d      	mov	r5, r1
 800766e:	4607      	mov	r7, r0
 8007670:	4611      	mov	r1, r2
 8007672:	4628      	mov	r0, r5
 8007674:	4614      	mov	r4, r2
 8007676:	f7ff ffdd 	bl	8007634 <__mcmp>
 800767a:	1e06      	subs	r6, r0, #0
 800767c:	d108      	bne.n	8007690 <__mdiff+0x28>
 800767e:	4631      	mov	r1, r6
 8007680:	4638      	mov	r0, r7
 8007682:	f7ff fd84 	bl	800718e <_Balloc>
 8007686:	2301      	movs	r3, #1
 8007688:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007690:	bfa4      	itt	ge
 8007692:	4623      	movge	r3, r4
 8007694:	462c      	movge	r4, r5
 8007696:	4638      	mov	r0, r7
 8007698:	6861      	ldr	r1, [r4, #4]
 800769a:	bfa6      	itte	ge
 800769c:	461d      	movge	r5, r3
 800769e:	2600      	movge	r6, #0
 80076a0:	2601      	movlt	r6, #1
 80076a2:	f7ff fd74 	bl	800718e <_Balloc>
 80076a6:	f04f 0e00 	mov.w	lr, #0
 80076aa:	60c6      	str	r6, [r0, #12]
 80076ac:	692b      	ldr	r3, [r5, #16]
 80076ae:	6926      	ldr	r6, [r4, #16]
 80076b0:	f104 0214 	add.w	r2, r4, #20
 80076b4:	f105 0914 	add.w	r9, r5, #20
 80076b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80076bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80076c0:	f100 0114 	add.w	r1, r0, #20
 80076c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80076c8:	f859 5b04 	ldr.w	r5, [r9], #4
 80076cc:	fa1f f38a 	uxth.w	r3, sl
 80076d0:	4473      	add	r3, lr
 80076d2:	b2ac      	uxth	r4, r5
 80076d4:	1b1b      	subs	r3, r3, r4
 80076d6:	0c2c      	lsrs	r4, r5, #16
 80076d8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80076dc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80076e6:	45c8      	cmp	r8, r9
 80076e8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80076ec:	4694      	mov	ip, r2
 80076ee:	f841 4b04 	str.w	r4, [r1], #4
 80076f2:	d8e7      	bhi.n	80076c4 <__mdiff+0x5c>
 80076f4:	45bc      	cmp	ip, r7
 80076f6:	d304      	bcc.n	8007702 <__mdiff+0x9a>
 80076f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80076fc:	b183      	cbz	r3, 8007720 <__mdiff+0xb8>
 80076fe:	6106      	str	r6, [r0, #16]
 8007700:	e7c4      	b.n	800768c <__mdiff+0x24>
 8007702:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007706:	b2a2      	uxth	r2, r4
 8007708:	4472      	add	r2, lr
 800770a:	1413      	asrs	r3, r2, #16
 800770c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007710:	b292      	uxth	r2, r2
 8007712:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007716:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800771a:	f841 2b04 	str.w	r2, [r1], #4
 800771e:	e7e9      	b.n	80076f4 <__mdiff+0x8c>
 8007720:	3e01      	subs	r6, #1
 8007722:	e7e9      	b.n	80076f8 <__mdiff+0x90>

08007724 <__ulp>:
 8007724:	4b10      	ldr	r3, [pc, #64]	; (8007768 <__ulp+0x44>)
 8007726:	400b      	ands	r3, r1
 8007728:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800772c:	2b00      	cmp	r3, #0
 800772e:	dd02      	ble.n	8007736 <__ulp+0x12>
 8007730:	2000      	movs	r0, #0
 8007732:	4619      	mov	r1, r3
 8007734:	4770      	bx	lr
 8007736:	425b      	negs	r3, r3
 8007738:	151b      	asrs	r3, r3, #20
 800773a:	2b13      	cmp	r3, #19
 800773c:	f04f 0000 	mov.w	r0, #0
 8007740:	f04f 0100 	mov.w	r1, #0
 8007744:	dc04      	bgt.n	8007750 <__ulp+0x2c>
 8007746:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800774a:	fa42 f103 	asr.w	r1, r2, r3
 800774e:	4770      	bx	lr
 8007750:	2201      	movs	r2, #1
 8007752:	3b14      	subs	r3, #20
 8007754:	2b1e      	cmp	r3, #30
 8007756:	bfce      	itee	gt
 8007758:	4613      	movgt	r3, r2
 800775a:	f1c3 031f 	rsble	r3, r3, #31
 800775e:	fa02 f303 	lslle.w	r3, r2, r3
 8007762:	4618      	mov	r0, r3
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	7ff00000 	.word	0x7ff00000

0800776c <__b2d>:
 800776c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007770:	6907      	ldr	r7, [r0, #16]
 8007772:	f100 0914 	add.w	r9, r0, #20
 8007776:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800777a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800777e:	f1a7 0804 	sub.w	r8, r7, #4
 8007782:	4630      	mov	r0, r6
 8007784:	f7ff fdc7 	bl	8007316 <__hi0bits>
 8007788:	f1c0 0320 	rsb	r3, r0, #32
 800778c:	280a      	cmp	r0, #10
 800778e:	600b      	str	r3, [r1, #0]
 8007790:	491e      	ldr	r1, [pc, #120]	; (800780c <__b2d+0xa0>)
 8007792:	dc17      	bgt.n	80077c4 <__b2d+0x58>
 8007794:	45c1      	cmp	r9, r8
 8007796:	bf28      	it	cs
 8007798:	2200      	movcs	r2, #0
 800779a:	f1c0 0c0b 	rsb	ip, r0, #11
 800779e:	fa26 f30c 	lsr.w	r3, r6, ip
 80077a2:	bf38      	it	cc
 80077a4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80077a8:	ea43 0501 	orr.w	r5, r3, r1
 80077ac:	f100 0315 	add.w	r3, r0, #21
 80077b0:	fa06 f303 	lsl.w	r3, r6, r3
 80077b4:	fa22 f20c 	lsr.w	r2, r2, ip
 80077b8:	ea43 0402 	orr.w	r4, r3, r2
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c4:	45c1      	cmp	r9, r8
 80077c6:	bf3a      	itte	cc
 80077c8:	f1a7 0808 	subcc.w	r8, r7, #8
 80077cc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80077d0:	2200      	movcs	r2, #0
 80077d2:	f1b0 030b 	subs.w	r3, r0, #11
 80077d6:	d015      	beq.n	8007804 <__b2d+0x98>
 80077d8:	409e      	lsls	r6, r3
 80077da:	f1c3 0720 	rsb	r7, r3, #32
 80077de:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80077e2:	fa22 f107 	lsr.w	r1, r2, r7
 80077e6:	45c8      	cmp	r8, r9
 80077e8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80077ec:	ea46 0501 	orr.w	r5, r6, r1
 80077f0:	bf94      	ite	ls
 80077f2:	2100      	movls	r1, #0
 80077f4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80077f8:	fa02 f003 	lsl.w	r0, r2, r3
 80077fc:	40f9      	lsrs	r1, r7
 80077fe:	ea40 0401 	orr.w	r4, r0, r1
 8007802:	e7db      	b.n	80077bc <__b2d+0x50>
 8007804:	ea46 0501 	orr.w	r5, r6, r1
 8007808:	4614      	mov	r4, r2
 800780a:	e7d7      	b.n	80077bc <__b2d+0x50>
 800780c:	3ff00000 	.word	0x3ff00000

08007810 <__d2b>:
 8007810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007814:	461c      	mov	r4, r3
 8007816:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800781a:	2101      	movs	r1, #1
 800781c:	4690      	mov	r8, r2
 800781e:	f7ff fcb6 	bl	800718e <_Balloc>
 8007822:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007826:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800782a:	4607      	mov	r7, r0
 800782c:	bb34      	cbnz	r4, 800787c <__d2b+0x6c>
 800782e:	9201      	str	r2, [sp, #4]
 8007830:	f1b8 0200 	subs.w	r2, r8, #0
 8007834:	d027      	beq.n	8007886 <__d2b+0x76>
 8007836:	a802      	add	r0, sp, #8
 8007838:	f840 2d08 	str.w	r2, [r0, #-8]!
 800783c:	f7ff fd8a 	bl	8007354 <__lo0bits>
 8007840:	9900      	ldr	r1, [sp, #0]
 8007842:	b1f0      	cbz	r0, 8007882 <__d2b+0x72>
 8007844:	9a01      	ldr	r2, [sp, #4]
 8007846:	f1c0 0320 	rsb	r3, r0, #32
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	430b      	orrs	r3, r1
 8007850:	40c2      	lsrs	r2, r0
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	9201      	str	r2, [sp, #4]
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf14      	ite	ne
 800785c:	2102      	movne	r1, #2
 800785e:	2101      	moveq	r1, #1
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	6139      	str	r1, [r7, #16]
 8007864:	b1c4      	cbz	r4, 8007898 <__d2b+0x88>
 8007866:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800786a:	4404      	add	r4, r0
 800786c:	6034      	str	r4, [r6, #0]
 800786e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007872:	6028      	str	r0, [r5, #0]
 8007874:	4638      	mov	r0, r7
 8007876:	b002      	add	sp, #8
 8007878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800787c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007880:	e7d5      	b.n	800782e <__d2b+0x1e>
 8007882:	6179      	str	r1, [r7, #20]
 8007884:	e7e7      	b.n	8007856 <__d2b+0x46>
 8007886:	a801      	add	r0, sp, #4
 8007888:	f7ff fd64 	bl	8007354 <__lo0bits>
 800788c:	2101      	movs	r1, #1
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	6139      	str	r1, [r7, #16]
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	3020      	adds	r0, #32
 8007896:	e7e5      	b.n	8007864 <__d2b+0x54>
 8007898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800789c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80078a0:	6030      	str	r0, [r6, #0]
 80078a2:	6918      	ldr	r0, [r3, #16]
 80078a4:	f7ff fd37 	bl	8007316 <__hi0bits>
 80078a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80078ac:	e7e1      	b.n	8007872 <__d2b+0x62>

080078ae <__ratio>:
 80078ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b2:	4688      	mov	r8, r1
 80078b4:	4669      	mov	r1, sp
 80078b6:	4681      	mov	r9, r0
 80078b8:	f7ff ff58 	bl	800776c <__b2d>
 80078bc:	468b      	mov	fp, r1
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	4640      	mov	r0, r8
 80078c4:	a901      	add	r1, sp, #4
 80078c6:	f7ff ff51 	bl	800776c <__b2d>
 80078ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80078d2:	460d      	mov	r5, r1
 80078d4:	eba3 0c02 	sub.w	ip, r3, r2
 80078d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	bfd5      	itete	le
 80078e6:	460a      	movle	r2, r1
 80078e8:	463a      	movgt	r2, r7
 80078ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80078f2:	bfd8      	it	le
 80078f4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80078f8:	462b      	mov	r3, r5
 80078fa:	4602      	mov	r2, r0
 80078fc:	4659      	mov	r1, fp
 80078fe:	4630      	mov	r0, r6
 8007900:	f7f8 ff14 	bl	800072c <__aeabi_ddiv>
 8007904:	b003      	add	sp, #12
 8007906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800790a <__copybits>:
 800790a:	3901      	subs	r1, #1
 800790c:	b510      	push	{r4, lr}
 800790e:	1149      	asrs	r1, r1, #5
 8007910:	6914      	ldr	r4, [r2, #16]
 8007912:	3101      	adds	r1, #1
 8007914:	f102 0314 	add.w	r3, r2, #20
 8007918:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800791c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007920:	42a3      	cmp	r3, r4
 8007922:	4602      	mov	r2, r0
 8007924:	d303      	bcc.n	800792e <__copybits+0x24>
 8007926:	2300      	movs	r3, #0
 8007928:	428a      	cmp	r2, r1
 800792a:	d305      	bcc.n	8007938 <__copybits+0x2e>
 800792c:	bd10      	pop	{r4, pc}
 800792e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007932:	f840 2b04 	str.w	r2, [r0], #4
 8007936:	e7f3      	b.n	8007920 <__copybits+0x16>
 8007938:	f842 3b04 	str.w	r3, [r2], #4
 800793c:	e7f4      	b.n	8007928 <__copybits+0x1e>

0800793e <__any_on>:
 800793e:	f100 0214 	add.w	r2, r0, #20
 8007942:	6900      	ldr	r0, [r0, #16]
 8007944:	114b      	asrs	r3, r1, #5
 8007946:	4298      	cmp	r0, r3
 8007948:	b510      	push	{r4, lr}
 800794a:	db11      	blt.n	8007970 <__any_on+0x32>
 800794c:	dd0a      	ble.n	8007964 <__any_on+0x26>
 800794e:	f011 011f 	ands.w	r1, r1, #31
 8007952:	d007      	beq.n	8007964 <__any_on+0x26>
 8007954:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007958:	fa24 f001 	lsr.w	r0, r4, r1
 800795c:	fa00 f101 	lsl.w	r1, r0, r1
 8007960:	428c      	cmp	r4, r1
 8007962:	d10b      	bne.n	800797c <__any_on+0x3e>
 8007964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007968:	4293      	cmp	r3, r2
 800796a:	d803      	bhi.n	8007974 <__any_on+0x36>
 800796c:	2000      	movs	r0, #0
 800796e:	bd10      	pop	{r4, pc}
 8007970:	4603      	mov	r3, r0
 8007972:	e7f7      	b.n	8007964 <__any_on+0x26>
 8007974:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007978:	2900      	cmp	r1, #0
 800797a:	d0f5      	beq.n	8007968 <__any_on+0x2a>
 800797c:	2001      	movs	r0, #1
 800797e:	e7f6      	b.n	800796e <__any_on+0x30>

08007980 <_calloc_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	fb02 f401 	mul.w	r4, r2, r1
 8007986:	4621      	mov	r1, r4
 8007988:	f000 f854 	bl	8007a34 <_malloc_r>
 800798c:	4605      	mov	r5, r0
 800798e:	b118      	cbz	r0, 8007998 <_calloc_r+0x18>
 8007990:	4622      	mov	r2, r4
 8007992:	2100      	movs	r1, #0
 8007994:	f7fc fd2e 	bl	80043f4 <memset>
 8007998:	4628      	mov	r0, r5
 800799a:	bd38      	pop	{r3, r4, r5, pc}

0800799c <_free_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4605      	mov	r5, r0
 80079a0:	2900      	cmp	r1, #0
 80079a2:	d043      	beq.n	8007a2c <_free_r+0x90>
 80079a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a8:	1f0c      	subs	r4, r1, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bfb8      	it	lt
 80079ae:	18e4      	addlt	r4, r4, r3
 80079b0:	f000 fa34 	bl	8007e1c <__malloc_lock>
 80079b4:	4a1e      	ldr	r2, [pc, #120]	; (8007a30 <_free_r+0x94>)
 80079b6:	6813      	ldr	r3, [r2, #0]
 80079b8:	4610      	mov	r0, r2
 80079ba:	b933      	cbnz	r3, 80079ca <_free_r+0x2e>
 80079bc:	6063      	str	r3, [r4, #4]
 80079be:	6014      	str	r4, [r2, #0]
 80079c0:	4628      	mov	r0, r5
 80079c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079c6:	f000 ba2a 	b.w	8007e1e <__malloc_unlock>
 80079ca:	42a3      	cmp	r3, r4
 80079cc:	d90b      	bls.n	80079e6 <_free_r+0x4a>
 80079ce:	6821      	ldr	r1, [r4, #0]
 80079d0:	1862      	adds	r2, r4, r1
 80079d2:	4293      	cmp	r3, r2
 80079d4:	bf01      	itttt	eq
 80079d6:	681a      	ldreq	r2, [r3, #0]
 80079d8:	685b      	ldreq	r3, [r3, #4]
 80079da:	1852      	addeq	r2, r2, r1
 80079dc:	6022      	streq	r2, [r4, #0]
 80079de:	6063      	str	r3, [r4, #4]
 80079e0:	6004      	str	r4, [r0, #0]
 80079e2:	e7ed      	b.n	80079c0 <_free_r+0x24>
 80079e4:	4613      	mov	r3, r2
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	b10a      	cbz	r2, 80079ee <_free_r+0x52>
 80079ea:	42a2      	cmp	r2, r4
 80079ec:	d9fa      	bls.n	80079e4 <_free_r+0x48>
 80079ee:	6819      	ldr	r1, [r3, #0]
 80079f0:	1858      	adds	r0, r3, r1
 80079f2:	42a0      	cmp	r0, r4
 80079f4:	d10b      	bne.n	8007a0e <_free_r+0x72>
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	4401      	add	r1, r0
 80079fa:	1858      	adds	r0, r3, r1
 80079fc:	4282      	cmp	r2, r0
 80079fe:	6019      	str	r1, [r3, #0]
 8007a00:	d1de      	bne.n	80079c0 <_free_r+0x24>
 8007a02:	6810      	ldr	r0, [r2, #0]
 8007a04:	6852      	ldr	r2, [r2, #4]
 8007a06:	4401      	add	r1, r0
 8007a08:	6019      	str	r1, [r3, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
 8007a0c:	e7d8      	b.n	80079c0 <_free_r+0x24>
 8007a0e:	d902      	bls.n	8007a16 <_free_r+0x7a>
 8007a10:	230c      	movs	r3, #12
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	e7d4      	b.n	80079c0 <_free_r+0x24>
 8007a16:	6820      	ldr	r0, [r4, #0]
 8007a18:	1821      	adds	r1, r4, r0
 8007a1a:	428a      	cmp	r2, r1
 8007a1c:	bf01      	itttt	eq
 8007a1e:	6811      	ldreq	r1, [r2, #0]
 8007a20:	6852      	ldreq	r2, [r2, #4]
 8007a22:	1809      	addeq	r1, r1, r0
 8007a24:	6021      	streq	r1, [r4, #0]
 8007a26:	6062      	str	r2, [r4, #4]
 8007a28:	605c      	str	r4, [r3, #4]
 8007a2a:	e7c9      	b.n	80079c0 <_free_r+0x24>
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000250 	.word	0x20000250

08007a34 <_malloc_r>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	1ccd      	adds	r5, r1, #3
 8007a38:	f025 0503 	bic.w	r5, r5, #3
 8007a3c:	3508      	adds	r5, #8
 8007a3e:	2d0c      	cmp	r5, #12
 8007a40:	bf38      	it	cc
 8007a42:	250c      	movcc	r5, #12
 8007a44:	2d00      	cmp	r5, #0
 8007a46:	4606      	mov	r6, r0
 8007a48:	db01      	blt.n	8007a4e <_malloc_r+0x1a>
 8007a4a:	42a9      	cmp	r1, r5
 8007a4c:	d903      	bls.n	8007a56 <_malloc_r+0x22>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	6033      	str	r3, [r6, #0]
 8007a52:	2000      	movs	r0, #0
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	f000 f9e1 	bl	8007e1c <__malloc_lock>
 8007a5a:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <_malloc_r+0xac>)
 8007a5c:	6814      	ldr	r4, [r2, #0]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	b991      	cbnz	r1, 8007a88 <_malloc_r+0x54>
 8007a62:	4c20      	ldr	r4, [pc, #128]	; (8007ae4 <_malloc_r+0xb0>)
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	b91b      	cbnz	r3, 8007a70 <_malloc_r+0x3c>
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 f98f 	bl	8007d8c <_sbrk_r>
 8007a6e:	6020      	str	r0, [r4, #0]
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 f98a 	bl	8007d8c <_sbrk_r>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d124      	bne.n	8007ac6 <_malloc_r+0x92>
 8007a7c:	230c      	movs	r3, #12
 8007a7e:	4630      	mov	r0, r6
 8007a80:	6033      	str	r3, [r6, #0]
 8007a82:	f000 f9cc 	bl	8007e1e <__malloc_unlock>
 8007a86:	e7e4      	b.n	8007a52 <_malloc_r+0x1e>
 8007a88:	680b      	ldr	r3, [r1, #0]
 8007a8a:	1b5b      	subs	r3, r3, r5
 8007a8c:	d418      	bmi.n	8007ac0 <_malloc_r+0x8c>
 8007a8e:	2b0b      	cmp	r3, #11
 8007a90:	d90f      	bls.n	8007ab2 <_malloc_r+0x7e>
 8007a92:	600b      	str	r3, [r1, #0]
 8007a94:	18cc      	adds	r4, r1, r3
 8007a96:	50cd      	str	r5, [r1, r3]
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 f9c0 	bl	8007e1e <__malloc_unlock>
 8007a9e:	f104 000b 	add.w	r0, r4, #11
 8007aa2:	1d23      	adds	r3, r4, #4
 8007aa4:	f020 0007 	bic.w	r0, r0, #7
 8007aa8:	1ac3      	subs	r3, r0, r3
 8007aaa:	d0d3      	beq.n	8007a54 <_malloc_r+0x20>
 8007aac:	425a      	negs	r2, r3
 8007aae:	50e2      	str	r2, [r4, r3]
 8007ab0:	e7d0      	b.n	8007a54 <_malloc_r+0x20>
 8007ab2:	684b      	ldr	r3, [r1, #4]
 8007ab4:	428c      	cmp	r4, r1
 8007ab6:	bf16      	itet	ne
 8007ab8:	6063      	strne	r3, [r4, #4]
 8007aba:	6013      	streq	r3, [r2, #0]
 8007abc:	460c      	movne	r4, r1
 8007abe:	e7eb      	b.n	8007a98 <_malloc_r+0x64>
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	6849      	ldr	r1, [r1, #4]
 8007ac4:	e7cc      	b.n	8007a60 <_malloc_r+0x2c>
 8007ac6:	1cc4      	adds	r4, r0, #3
 8007ac8:	f024 0403 	bic.w	r4, r4, #3
 8007acc:	42a0      	cmp	r0, r4
 8007ace:	d005      	beq.n	8007adc <_malloc_r+0xa8>
 8007ad0:	1a21      	subs	r1, r4, r0
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f000 f95a 	bl	8007d8c <_sbrk_r>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d0cf      	beq.n	8007a7c <_malloc_r+0x48>
 8007adc:	6025      	str	r5, [r4, #0]
 8007ade:	e7db      	b.n	8007a98 <_malloc_r+0x64>
 8007ae0:	20000250 	.word	0x20000250
 8007ae4:	20000254 	.word	0x20000254

08007ae8 <__ssputs_r>:
 8007ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aec:	688e      	ldr	r6, [r1, #8]
 8007aee:	4682      	mov	sl, r0
 8007af0:	429e      	cmp	r6, r3
 8007af2:	460c      	mov	r4, r1
 8007af4:	4690      	mov	r8, r2
 8007af6:	4699      	mov	r9, r3
 8007af8:	d837      	bhi.n	8007b6a <__ssputs_r+0x82>
 8007afa:	898a      	ldrh	r2, [r1, #12]
 8007afc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b00:	d031      	beq.n	8007b66 <__ssputs_r+0x7e>
 8007b02:	2302      	movs	r3, #2
 8007b04:	6825      	ldr	r5, [r4, #0]
 8007b06:	6909      	ldr	r1, [r1, #16]
 8007b08:	1a6f      	subs	r7, r5, r1
 8007b0a:	6965      	ldr	r5, [r4, #20]
 8007b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b10:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b14:	f109 0301 	add.w	r3, r9, #1
 8007b18:	443b      	add	r3, r7
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	bf38      	it	cc
 8007b1e:	461d      	movcc	r5, r3
 8007b20:	0553      	lsls	r3, r2, #21
 8007b22:	d530      	bpl.n	8007b86 <__ssputs_r+0x9e>
 8007b24:	4629      	mov	r1, r5
 8007b26:	f7ff ff85 	bl	8007a34 <_malloc_r>
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	b950      	cbnz	r0, 8007b44 <__ssputs_r+0x5c>
 8007b2e:	230c      	movs	r3, #12
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	f8ca 3000 	str.w	r3, [sl]
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b44:	463a      	mov	r2, r7
 8007b46:	6921      	ldr	r1, [r4, #16]
 8007b48:	f7ff fb16 	bl	8007178 <memcpy>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	6126      	str	r6, [r4, #16]
 8007b5a:	443e      	add	r6, r7
 8007b5c:	6026      	str	r6, [r4, #0]
 8007b5e:	464e      	mov	r6, r9
 8007b60:	6165      	str	r5, [r4, #20]
 8007b62:	1bed      	subs	r5, r5, r7
 8007b64:	60a5      	str	r5, [r4, #8]
 8007b66:	454e      	cmp	r6, r9
 8007b68:	d900      	bls.n	8007b6c <__ssputs_r+0x84>
 8007b6a:	464e      	mov	r6, r9
 8007b6c:	4632      	mov	r2, r6
 8007b6e:	4641      	mov	r1, r8
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	f000 f93a 	bl	8007dea <memmove>
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	2000      	movs	r0, #0
 8007b7a:	1b9b      	subs	r3, r3, r6
 8007b7c:	60a3      	str	r3, [r4, #8]
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	441e      	add	r6, r3
 8007b82:	6026      	str	r6, [r4, #0]
 8007b84:	e7dc      	b.n	8007b40 <__ssputs_r+0x58>
 8007b86:	462a      	mov	r2, r5
 8007b88:	f000 f94a 	bl	8007e20 <_realloc_r>
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d1e2      	bne.n	8007b58 <__ssputs_r+0x70>
 8007b92:	6921      	ldr	r1, [r4, #16]
 8007b94:	4650      	mov	r0, sl
 8007b96:	f7ff ff01 	bl	800799c <_free_r>
 8007b9a:	e7c8      	b.n	8007b2e <__ssputs_r+0x46>

08007b9c <_svfiprintf_r>:
 8007b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba0:	461d      	mov	r5, r3
 8007ba2:	898b      	ldrh	r3, [r1, #12]
 8007ba4:	b09d      	sub	sp, #116	; 0x74
 8007ba6:	061f      	lsls	r7, r3, #24
 8007ba8:	4680      	mov	r8, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	4616      	mov	r6, r2
 8007bae:	d50f      	bpl.n	8007bd0 <_svfiprintf_r+0x34>
 8007bb0:	690b      	ldr	r3, [r1, #16]
 8007bb2:	b96b      	cbnz	r3, 8007bd0 <_svfiprintf_r+0x34>
 8007bb4:	2140      	movs	r1, #64	; 0x40
 8007bb6:	f7ff ff3d 	bl	8007a34 <_malloc_r>
 8007bba:	6020      	str	r0, [r4, #0]
 8007bbc:	6120      	str	r0, [r4, #16]
 8007bbe:	b928      	cbnz	r0, 8007bcc <_svfiprintf_r+0x30>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	f8c8 3000 	str.w	r3, [r8]
 8007bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bca:	e0c8      	b.n	8007d5e <_svfiprintf_r+0x1c2>
 8007bcc:	2340      	movs	r3, #64	; 0x40
 8007bce:	6163      	str	r3, [r4, #20]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd4:	2320      	movs	r3, #32
 8007bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bda:	2330      	movs	r3, #48	; 0x30
 8007bdc:	f04f 0b01 	mov.w	fp, #1
 8007be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007be4:	9503      	str	r5, [sp, #12]
 8007be6:	4637      	mov	r7, r6
 8007be8:	463d      	mov	r5, r7
 8007bea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bee:	b10b      	cbz	r3, 8007bf4 <_svfiprintf_r+0x58>
 8007bf0:	2b25      	cmp	r3, #37	; 0x25
 8007bf2:	d13e      	bne.n	8007c72 <_svfiprintf_r+0xd6>
 8007bf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8007bf8:	d00b      	beq.n	8007c12 <_svfiprintf_r+0x76>
 8007bfa:	4653      	mov	r3, sl
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4640      	mov	r0, r8
 8007c02:	f7ff ff71 	bl	8007ae8 <__ssputs_r>
 8007c06:	3001      	adds	r0, #1
 8007c08:	f000 80a4 	beq.w	8007d54 <_svfiprintf_r+0x1b8>
 8007c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0e:	4453      	add	r3, sl
 8007c10:	9309      	str	r3, [sp, #36]	; 0x24
 8007c12:	783b      	ldrb	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 809d 	beq.w	8007d54 <_svfiprintf_r+0x1b8>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c2e:	462f      	mov	r7, r5
 8007c30:	2205      	movs	r2, #5
 8007c32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c36:	4850      	ldr	r0, [pc, #320]	; (8007d78 <_svfiprintf_r+0x1dc>)
 8007c38:	f7ff fa90 	bl	800715c <memchr>
 8007c3c:	9b04      	ldr	r3, [sp, #16]
 8007c3e:	b9d0      	cbnz	r0, 8007c76 <_svfiprintf_r+0xda>
 8007c40:	06d9      	lsls	r1, r3, #27
 8007c42:	bf44      	itt	mi
 8007c44:	2220      	movmi	r2, #32
 8007c46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c4a:	071a      	lsls	r2, r3, #28
 8007c4c:	bf44      	itt	mi
 8007c4e:	222b      	movmi	r2, #43	; 0x2b
 8007c50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c54:	782a      	ldrb	r2, [r5, #0]
 8007c56:	2a2a      	cmp	r2, #42	; 0x2a
 8007c58:	d015      	beq.n	8007c86 <_svfiprintf_r+0xea>
 8007c5a:	462f      	mov	r7, r5
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	250a      	movs	r5, #10
 8007c60:	9a07      	ldr	r2, [sp, #28]
 8007c62:	4639      	mov	r1, r7
 8007c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c68:	3b30      	subs	r3, #48	; 0x30
 8007c6a:	2b09      	cmp	r3, #9
 8007c6c:	d94d      	bls.n	8007d0a <_svfiprintf_r+0x16e>
 8007c6e:	b1b8      	cbz	r0, 8007ca0 <_svfiprintf_r+0x104>
 8007c70:	e00f      	b.n	8007c92 <_svfiprintf_r+0xf6>
 8007c72:	462f      	mov	r7, r5
 8007c74:	e7b8      	b.n	8007be8 <_svfiprintf_r+0x4c>
 8007c76:	4a40      	ldr	r2, [pc, #256]	; (8007d78 <_svfiprintf_r+0x1dc>)
 8007c78:	463d      	mov	r5, r7
 8007c7a:	1a80      	subs	r0, r0, r2
 8007c7c:	fa0b f000 	lsl.w	r0, fp, r0
 8007c80:	4318      	orrs	r0, r3
 8007c82:	9004      	str	r0, [sp, #16]
 8007c84:	e7d3      	b.n	8007c2e <_svfiprintf_r+0x92>
 8007c86:	9a03      	ldr	r2, [sp, #12]
 8007c88:	1d11      	adds	r1, r2, #4
 8007c8a:	6812      	ldr	r2, [r2, #0]
 8007c8c:	9103      	str	r1, [sp, #12]
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	db01      	blt.n	8007c96 <_svfiprintf_r+0xfa>
 8007c92:	9207      	str	r2, [sp, #28]
 8007c94:	e004      	b.n	8007ca0 <_svfiprintf_r+0x104>
 8007c96:	4252      	negs	r2, r2
 8007c98:	f043 0302 	orr.w	r3, r3, #2
 8007c9c:	9207      	str	r2, [sp, #28]
 8007c9e:	9304      	str	r3, [sp, #16]
 8007ca0:	783b      	ldrb	r3, [r7, #0]
 8007ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca4:	d10c      	bne.n	8007cc0 <_svfiprintf_r+0x124>
 8007ca6:	787b      	ldrb	r3, [r7, #1]
 8007ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8007caa:	d133      	bne.n	8007d14 <_svfiprintf_r+0x178>
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	3702      	adds	r7, #2
 8007cb0:	1d1a      	adds	r2, r3, #4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	9203      	str	r2, [sp, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	4d2e      	ldr	r5, [pc, #184]	; (8007d7c <_svfiprintf_r+0x1e0>)
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	7839      	ldrb	r1, [r7, #0]
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f7ff fa48 	bl	800715c <memchr>
 8007ccc:	b138      	cbz	r0, 8007cde <_svfiprintf_r+0x142>
 8007cce:	2340      	movs	r3, #64	; 0x40
 8007cd0:	1b40      	subs	r0, r0, r5
 8007cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8007cd6:	9b04      	ldr	r3, [sp, #16]
 8007cd8:	3701      	adds	r7, #1
 8007cda:	4303      	orrs	r3, r0
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	7839      	ldrb	r1, [r7, #0]
 8007ce0:	2206      	movs	r2, #6
 8007ce2:	4827      	ldr	r0, [pc, #156]	; (8007d80 <_svfiprintf_r+0x1e4>)
 8007ce4:	1c7e      	adds	r6, r7, #1
 8007ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cea:	f7ff fa37 	bl	800715c <memchr>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d038      	beq.n	8007d64 <_svfiprintf_r+0x1c8>
 8007cf2:	4b24      	ldr	r3, [pc, #144]	; (8007d84 <_svfiprintf_r+0x1e8>)
 8007cf4:	bb13      	cbnz	r3, 8007d3c <_svfiprintf_r+0x1a0>
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	3307      	adds	r3, #7
 8007cfa:	f023 0307 	bic.w	r3, r3, #7
 8007cfe:	3308      	adds	r3, #8
 8007d00:	9303      	str	r3, [sp, #12]
 8007d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d04:	444b      	add	r3, r9
 8007d06:	9309      	str	r3, [sp, #36]	; 0x24
 8007d08:	e76d      	b.n	8007be6 <_svfiprintf_r+0x4a>
 8007d0a:	fb05 3202 	mla	r2, r5, r2, r3
 8007d0e:	2001      	movs	r0, #1
 8007d10:	460f      	mov	r7, r1
 8007d12:	e7a6      	b.n	8007c62 <_svfiprintf_r+0xc6>
 8007d14:	2300      	movs	r3, #0
 8007d16:	250a      	movs	r5, #10
 8007d18:	4619      	mov	r1, r3
 8007d1a:	3701      	adds	r7, #1
 8007d1c:	9305      	str	r3, [sp, #20]
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d24:	3a30      	subs	r2, #48	; 0x30
 8007d26:	2a09      	cmp	r2, #9
 8007d28:	d903      	bls.n	8007d32 <_svfiprintf_r+0x196>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0c8      	beq.n	8007cc0 <_svfiprintf_r+0x124>
 8007d2e:	9105      	str	r1, [sp, #20]
 8007d30:	e7c6      	b.n	8007cc0 <_svfiprintf_r+0x124>
 8007d32:	fb05 2101 	mla	r1, r5, r1, r2
 8007d36:	2301      	movs	r3, #1
 8007d38:	4607      	mov	r7, r0
 8007d3a:	e7f0      	b.n	8007d1e <_svfiprintf_r+0x182>
 8007d3c:	ab03      	add	r3, sp, #12
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	4622      	mov	r2, r4
 8007d42:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <_svfiprintf_r+0x1ec>)
 8007d44:	a904      	add	r1, sp, #16
 8007d46:	4640      	mov	r0, r8
 8007d48:	f7fc fbee 	bl	8004528 <_printf_float>
 8007d4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d50:	4681      	mov	r9, r0
 8007d52:	d1d6      	bne.n	8007d02 <_svfiprintf_r+0x166>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	065b      	lsls	r3, r3, #25
 8007d58:	f53f af35 	bmi.w	8007bc6 <_svfiprintf_r+0x2a>
 8007d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d5e:	b01d      	add	sp, #116	; 0x74
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	ab03      	add	r3, sp, #12
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	4622      	mov	r2, r4
 8007d6a:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <_svfiprintf_r+0x1ec>)
 8007d6c:	a904      	add	r1, sp, #16
 8007d6e:	4640      	mov	r0, r8
 8007d70:	f7fc fe86 	bl	8004a80 <_printf_i>
 8007d74:	e7ea      	b.n	8007d4c <_svfiprintf_r+0x1b0>
 8007d76:	bf00      	nop
 8007d78:	0800811c 	.word	0x0800811c
 8007d7c:	08008122 	.word	0x08008122
 8007d80:	08008126 	.word	0x08008126
 8007d84:	08004529 	.word	0x08004529
 8007d88:	08007ae9 	.word	0x08007ae9

08007d8c <_sbrk_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4c05      	ldr	r4, [pc, #20]	; (8007da8 <_sbrk_r+0x1c>)
 8007d92:	4605      	mov	r5, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	f7fa f9d8 	bl	800214c <_sbrk>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_sbrk_r+0x1a>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_sbrk_r+0x1a>
 8007da4:	602b      	str	r3, [r5, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	200003d0 	.word	0x200003d0

08007dac <strncmp>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	b16a      	cbz	r2, 8007dcc <strncmp+0x20>
 8007db0:	3901      	subs	r1, #1
 8007db2:	1884      	adds	r4, r0, r2
 8007db4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007db8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d103      	bne.n	8007dc8 <strncmp+0x1c>
 8007dc0:	42a0      	cmp	r0, r4
 8007dc2:	d001      	beq.n	8007dc8 <strncmp+0x1c>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1f5      	bne.n	8007db4 <strncmp+0x8>
 8007dc8:	1a98      	subs	r0, r3, r2
 8007dca:	bd10      	pop	{r4, pc}
 8007dcc:	4610      	mov	r0, r2
 8007dce:	e7fc      	b.n	8007dca <strncmp+0x1e>

08007dd0 <__ascii_wctomb>:
 8007dd0:	b149      	cbz	r1, 8007de6 <__ascii_wctomb+0x16>
 8007dd2:	2aff      	cmp	r2, #255	; 0xff
 8007dd4:	bf8b      	itete	hi
 8007dd6:	238a      	movhi	r3, #138	; 0x8a
 8007dd8:	700a      	strbls	r2, [r1, #0]
 8007dda:	6003      	strhi	r3, [r0, #0]
 8007ddc:	2001      	movls	r0, #1
 8007dde:	bf88      	it	hi
 8007de0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007de4:	4770      	bx	lr
 8007de6:	4608      	mov	r0, r1
 8007de8:	4770      	bx	lr

08007dea <memmove>:
 8007dea:	4288      	cmp	r0, r1
 8007dec:	b510      	push	{r4, lr}
 8007dee:	eb01 0302 	add.w	r3, r1, r2
 8007df2:	d807      	bhi.n	8007e04 <memmove+0x1a>
 8007df4:	1e42      	subs	r2, r0, #1
 8007df6:	4299      	cmp	r1, r3
 8007df8:	d00a      	beq.n	8007e10 <memmove+0x26>
 8007dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e02:	e7f8      	b.n	8007df6 <memmove+0xc>
 8007e04:	4283      	cmp	r3, r0
 8007e06:	d9f5      	bls.n	8007df4 <memmove+0xa>
 8007e08:	1881      	adds	r1, r0, r2
 8007e0a:	1ad2      	subs	r2, r2, r3
 8007e0c:	42d3      	cmn	r3, r2
 8007e0e:	d100      	bne.n	8007e12 <memmove+0x28>
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e16:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e1a:	e7f7      	b.n	8007e0c <memmove+0x22>

08007e1c <__malloc_lock>:
 8007e1c:	4770      	bx	lr

08007e1e <__malloc_unlock>:
 8007e1e:	4770      	bx	lr

08007e20 <_realloc_r>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	4607      	mov	r7, r0
 8007e24:	4614      	mov	r4, r2
 8007e26:	460e      	mov	r6, r1
 8007e28:	b921      	cbnz	r1, 8007e34 <_realloc_r+0x14>
 8007e2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e2e:	4611      	mov	r1, r2
 8007e30:	f7ff be00 	b.w	8007a34 <_malloc_r>
 8007e34:	b922      	cbnz	r2, 8007e40 <_realloc_r+0x20>
 8007e36:	f7ff fdb1 	bl	800799c <_free_r>
 8007e3a:	4625      	mov	r5, r4
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e40:	f000 f814 	bl	8007e6c <_malloc_usable_size_r>
 8007e44:	42a0      	cmp	r0, r4
 8007e46:	d20f      	bcs.n	8007e68 <_realloc_r+0x48>
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	f7ff fdf2 	bl	8007a34 <_malloc_r>
 8007e50:	4605      	mov	r5, r0
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d0f2      	beq.n	8007e3c <_realloc_r+0x1c>
 8007e56:	4631      	mov	r1, r6
 8007e58:	4622      	mov	r2, r4
 8007e5a:	f7ff f98d 	bl	8007178 <memcpy>
 8007e5e:	4631      	mov	r1, r6
 8007e60:	4638      	mov	r0, r7
 8007e62:	f7ff fd9b 	bl	800799c <_free_r>
 8007e66:	e7e9      	b.n	8007e3c <_realloc_r+0x1c>
 8007e68:	4635      	mov	r5, r6
 8007e6a:	e7e7      	b.n	8007e3c <_realloc_r+0x1c>

08007e6c <_malloc_usable_size_r>:
 8007e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e70:	1f18      	subs	r0, r3, #4
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfbc      	itt	lt
 8007e76:	580b      	ldrlt	r3, [r1, r0]
 8007e78:	18c0      	addlt	r0, r0, r3
 8007e7a:	4770      	bx	lr

08007e7c <_init>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr

08007e88 <_fini>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr
