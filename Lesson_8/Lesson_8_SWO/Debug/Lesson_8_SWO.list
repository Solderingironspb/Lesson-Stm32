
Lesson_8_SWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000414c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08004260  08004260  00014260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004560  08004560  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004560  08004560  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004560  08004560  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200001dc  08004744  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004744  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a7f  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010d2  00000000  00000000  00024c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000450  00000000  00000000  00025d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b8  00000000  00000000  000261a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013dcb  00000000  00000000  00026560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000407a  00000000  00000000  0003a32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068b59  00000000  00000000  0003e3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a6efe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d7c  00000000  00000000  000a6f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004244 	.word	0x08004244

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004244 	.word	0x08004244

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d013      	beq.n	8000ce4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000cc4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00b      	beq.n	8000ce4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ccc:	e000      	b.n	8000cd0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000cd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f9      	beq.n	8000cce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e009      	b.n	8000d16 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ffca 	bl	8000ca4 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	dbf1      	blt.n	8000d02 <_write+0x12>
	}
	return len;
 8000d1e:	687b      	ldr	r3, [r7, #4]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d28:	b598      	push	{r3, r4, r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d2c:	f000 f9e2 	bl	80010f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d30:	f000 f82c 	bl	8000d8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d34:	f000 f870 	bl	8000e18 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	A = 0.5f;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <main+0x54>)
 8000d3a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000d3e:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		printf("Hello World\n\r");
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <main+0x58>)
 8000d42:	f001 fbab 	bl	800249c <iprintf>
		printf("A = %.3f\n\r", A);
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <main+0x54>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fb6c 	bl	8000428 <__aeabi_f2d>
 8000d50:	4603      	mov	r3, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	461a      	mov	r2, r3
 8000d56:	4623      	mov	r3, r4
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <main+0x5c>)
 8000d5a:	f001 fb9f 	bl	800249c <iprintf>
		A = A + 0.236f;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <main+0x54>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4909      	ldr	r1, [pc, #36]	; (8000d88 <main+0x60>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fe95 	bl	8000a94 <__addsf3>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <main+0x54>)
 8000d70:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 8000d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d76:	f000 fa1f 	bl	80011b8 <HAL_Delay>
		printf("Hello World\n\r");
 8000d7a:	e7e1      	b.n	8000d40 <main+0x18>
 8000d7c:	20000204 	.word	0x20000204
 8000d80:	08004260 	.word	0x08004260
 8000d84:	08004270 	.word	0x08004270
 8000d88:	3e71a9fc 	.word	0x3e71a9fc

08000d8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b090      	sub	sp, #64	; 0x40
 8000d90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	2228      	movs	r2, #40	; 0x28
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 ff26 	bl	8001bec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 faf5 	bl	80013c4 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x58>
		Error_Handler();
 8000de0:	f000 f848 	bl	8000e74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fd60 	bl	80018c4 <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x82>
		Error_Handler();
 8000e0a:	f000 f833 	bl	8000e74 <Error_Handler>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3740      	adds	r7, #64	; 0x40
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e24:	f043 0320 	orr.w	r3, r3, #32
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <MX_GPIO_Init+0x58>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000

08000e74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_MspInit+0x5c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_MspInit+0x5c>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_MspInit+0x5c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_MspInit+0x5c>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_MspInit+0x60>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_MspInit+0x60>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <MemManage_Handler+0x4>

08000efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <BusFault_Handler+0x4>

08000f02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f926 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e00a      	b.n	8000f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4a:	f3af 8000 	nop.w
 8000f4e:	4601      	mov	r1, r0
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	b2ca      	uxtb	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbf0      	blt.n	8000f4a <_read+0x12>
	}

return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	return -1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f98:	605a      	str	r2, [r3, #4]
	return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <_isatty>:

int _isatty(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
	return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f000 fdc8 	bl	8001b98 <__errno>
 8001008:	4602      	mov	r2, r0
 800100a:	230c      	movs	r3, #12
 800100c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20005000 	.word	0x20005000
 8001034:	00000400 	.word	0x00000400
 8001038:	200001f8 	.word	0x200001f8
 800103c:	20000210 	.word	0x20000210

08001040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <SystemInit+0x5c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <SystemInit+0x5c>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <SystemInit+0x5c>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	4911      	ldr	r1, [pc, #68]	; (800109c <SystemInit+0x5c>)
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <SystemInit+0x60>)
 8001058:	4013      	ands	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <SystemInit+0x5c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <SystemInit+0x5c>)
 8001062:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <SystemInit+0x5c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SystemInit+0x5c>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <SystemInit+0x5c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <SystemInit+0x5c>)
 800107e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001082:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SystemInit+0x5c>)
 8001086:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800108a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SystemInit+0x64>)
 800108e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001092:	609a      	str	r2, [r3, #8]
#endif 
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40021000 	.word	0x40021000
 80010a0:	f8ff0000 	.word	0xf8ff0000
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010aa:	e003      	b.n	80010b4 <LoopCopyDataInit>

080010ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010b2:	3104      	adds	r1, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010bc:	d3f6      	bcc.n	80010ac <CopyDataInit>
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010c0:	e002      	b.n	80010c8 <LoopFillZerobss>

080010c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010c4:	f842 3b04 	str.w	r3, [r2], #4

080010c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010cc:	d3f9      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ce:	f7ff ffb7 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f000 fd67 	bl	8001ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d6:	f7ff fe27 	bl	8000d28 <main>
  bx lr
 80010da:	4770      	bx	lr
  ldr r3, =_sidata
 80010dc:	08004568 	.word	0x08004568
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010e4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80010e8:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80010ec:	20000210 	.word	0x20000210

080010f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC1_2_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Init+0x28>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x28>)
 80010fe:	f043 0310 	orr.w	r3, r3, #16
 8001102:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f929 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f808 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff feb6 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f933 	bl	80013aa <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f909 	bl	8001372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x1c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x20>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <HAL_IncTick+0x20>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000208 	.word	0x20000208

080011a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <HAL_GetTick+0x10>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000208 	.word	0x20000208

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff fff0 	bl	80011a4 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_Delay+0x40>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffe0 	bl	80011a4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_SetPriority>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <SysTick_Config>:
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff90 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff49 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff5e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff90 	bl	80012b4 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5f 	bl	8001260 <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffb0 	bl	8001318 <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e26c      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8087 	beq.w	80014f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e4:	4b92      	ldr	r3, [pc, #584]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d00c      	beq.n	800140a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f0:	4b8f      	ldr	r3, [pc, #572]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d112      	bne.n	8001422 <HAL_RCC_OscConfig+0x5e>
 80013fc:	4b8c      	ldr	r3, [pc, #560]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d10b      	bne.n	8001422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	4b89      	ldr	r3, [pc, #548]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d06c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x12c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d168      	bne.n	80014f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e246      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x76>
 800142c:	4b80      	ldr	r3, [pc, #512]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a7f      	ldr	r2, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	e02e      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b7b      	ldr	r3, [pc, #492]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7a      	ldr	r2, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b78      	ldr	r3, [pc, #480]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a77      	ldr	r2, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e01d      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0xbc>
 8001466:	4b72      	ldr	r3, [pc, #456]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a71      	ldr	r2, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b6f      	ldr	r3, [pc, #444]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6e      	ldr	r2, [pc, #440]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 8001480:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6a      	ldr	r2, [pc, #424]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fe80 	bl	80011a4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fe7c 	bl	80011a4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1fa      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0xe4>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fe6c 	bl	80011a4 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fe68 	bl	80011a4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1e6      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x10c>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d063      	beq.n	80015c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fe:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150a:	4b49      	ldr	r3, [pc, #292]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b08      	cmp	r3, #8
 8001514:	d11c      	bne.n	8001550 <HAL_RCC_OscConfig+0x18c>
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d116      	bne.n	8001550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x176>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e1ba      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4939      	ldr	r1, [pc, #228]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	e03a      	b.n	80015c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fe21 	bl	80011a4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fe1d 	bl	80011a4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e19b      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4927      	ldr	r1, [pc, #156]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fe00 	bl	80011a4 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fdfc 	bl	80011a4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e17a      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03a      	beq.n	8001648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d019      	beq.n	800160e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_RCC_OscConfig+0x274>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fde0 	bl	80011a4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fddc 	bl	80011a4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e15a      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f000 faa8 	bl	8001b5c <RCC_Delay>
 800160c:	e01c      	b.n	8001648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCC_OscConfig+0x274>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fdc6 	bl	80011a4 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161a:	e00f      	b.n	800163c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fdc2 	bl	80011a4 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d908      	bls.n	800163c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e140      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	42420000 	.word	0x42420000
 8001638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	4b9e      	ldr	r3, [pc, #632]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e9      	bne.n	800161c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a6 	beq.w	80017a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	4b97      	ldr	r3, [pc, #604]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10d      	bne.n	8001682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b94      	ldr	r3, [pc, #592]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a93      	ldr	r2, [pc, #588]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b91      	ldr	r3, [pc, #580]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b8e      	ldr	r3, [pc, #568]	; (80018bc <HAL_RCC_OscConfig+0x4f8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168e:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <HAL_RCC_OscConfig+0x4f8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a8a      	ldr	r2, [pc, #552]	; (80018bc <HAL_RCC_OscConfig+0x4f8>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff fd83 	bl	80011a4 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff fd7f 	bl	80011a4 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0fd      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b81      	ldr	r3, [pc, #516]	; (80018bc <HAL_RCC_OscConfig+0x4f8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x312>
 80016c8:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a7a      	ldr	r2, [pc, #488]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e02d      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x334>
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a75      	ldr	r2, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a72      	ldr	r2, [pc, #456]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e01c      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x356>
 8001700:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a6c      	ldr	r2, [pc, #432]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4a69      	ldr	r2, [pc, #420]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6213      	str	r3, [r2, #32]
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a66      	ldr	r2, [pc, #408]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a63      	ldr	r2, [pc, #396]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d015      	beq.n	8001766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff fd33 	bl	80011a4 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff fd2f 	bl	80011a4 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0ab      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ee      	beq.n	8001742 <HAL_RCC_OscConfig+0x37e>
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fd1d 	bl	80011a4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fd19 	bl	80011a4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e095      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ee      	bne.n	800176e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8081 	beq.w	80018ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ac:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d061      	beq.n	800187c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d146      	bne.n	800184e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <HAL_RCC_OscConfig+0x4fc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fced 	bl	80011a4 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fce9 	bl	80011a4 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e067      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	492d      	ldr	r1, [pc, #180]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a19      	ldr	r1, [r3, #32]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	430b      	orrs	r3, r1
 800181a:	4927      	ldr	r1, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_OscConfig+0x4fc>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fcbd 	bl	80011a4 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fcb9 	bl	80011a4 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e037      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x46a>
 800184c:	e02f      	b.n	80018ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_RCC_OscConfig+0x4fc>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fca6 	bl	80011a4 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff fca2 	bl	80011a4 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e020      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x498>
 800187a:	e018      	b.n	80018ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e013      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	429a      	cmp	r2, r3
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42420060 	.word	0x42420060

080018c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0d0      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d910      	bls.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 0207 	bic.w	r2, r3, #7
 80018ee:	4965      	ldr	r1, [pc, #404]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800192a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d040      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e073      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06b      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4936      	ldr	r1, [pc, #216]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fbf6 	bl	80011a4 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff fbf2 	bl	80011a4 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e053      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d210      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0207 	bic.w	r2, r3, #7
 80019fa:	4922      	ldr	r1, [pc, #136]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4601      	mov	r1, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	5cd3      	ldrb	r3, [r2, r3]
 8001a66:	fa21 f303 	lsr.w	r3, r1, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1cc>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1d0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fb54 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	08004290 	.word	0x08004290
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b490      	push	{r4, r7}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aa0:	1d3c      	adds	r4, r7, #4
 8001aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x46>
 8001ad6:	e02d      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ada:	623b      	str	r3, [r7, #32]
      break;
 8001adc:	e02d      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aea:	4413      	add	r3, r2
 8001aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c5b      	lsrs	r3, r3, #17
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b16:	fb02 f203 	mul.w	r2, r2, r3
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e004      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	623b      	str	r3, [r7, #32]
      break;
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b36:	623b      	str	r3, [r7, #32]
      break;
 8001b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc90      	pop	{r4, r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	0800427c 	.word	0x0800427c
 8001b4c:	0800428c 	.word	0x0800428c
 8001b50:	40021000 	.word	0x40021000
 8001b54:	007a1200 	.word	0x007a1200
 8001b58:	003d0900 	.word	0x003d0900

08001b5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <RCC_Delay+0x34>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <RCC_Delay+0x38>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a5b      	lsrs	r3, r3, #9
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b78:	bf00      	nop
  }
  while (Delay --);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f9      	bne.n	8001b78 <RCC_Delay+0x1c>
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000000 	.word	0x20000000
 8001b94:	10624dd3 	.word	0x10624dd3

08001b98 <__errno>:
 8001b98:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <__errno+0x8>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	2000000c 	.word	0x2000000c

08001ba4 <__libc_init_array>:
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	2500      	movs	r5, #0
 8001ba8:	4e0c      	ldr	r6, [pc, #48]	; (8001bdc <__libc_init_array+0x38>)
 8001baa:	4c0d      	ldr	r4, [pc, #52]	; (8001be0 <__libc_init_array+0x3c>)
 8001bac:	1ba4      	subs	r4, r4, r6
 8001bae:	10a4      	asrs	r4, r4, #2
 8001bb0:	42a5      	cmp	r5, r4
 8001bb2:	d109      	bne.n	8001bc8 <__libc_init_array+0x24>
 8001bb4:	f002 fb46 	bl	8004244 <_init>
 8001bb8:	2500      	movs	r5, #0
 8001bba:	4e0a      	ldr	r6, [pc, #40]	; (8001be4 <__libc_init_array+0x40>)
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	; (8001be8 <__libc_init_array+0x44>)
 8001bbe:	1ba4      	subs	r4, r4, r6
 8001bc0:	10a4      	asrs	r4, r4, #2
 8001bc2:	42a5      	cmp	r5, r4
 8001bc4:	d105      	bne.n	8001bd2 <__libc_init_array+0x2e>
 8001bc6:	bd70      	pop	{r4, r5, r6, pc}
 8001bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bcc:	4798      	blx	r3
 8001bce:	3501      	adds	r5, #1
 8001bd0:	e7ee      	b.n	8001bb0 <__libc_init_array+0xc>
 8001bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bd6:	4798      	blx	r3
 8001bd8:	3501      	adds	r5, #1
 8001bda:	e7f2      	b.n	8001bc2 <__libc_init_array+0x1e>
 8001bdc:	08004560 	.word	0x08004560
 8001be0:	08004560 	.word	0x08004560
 8001be4:	08004560 	.word	0x08004560
 8001be8:	08004564 	.word	0x08004564

08001bec <memset>:
 8001bec:	4603      	mov	r3, r0
 8001bee:	4402      	add	r2, r0
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d100      	bne.n	8001bf6 <memset+0xa>
 8001bf4:	4770      	bx	lr
 8001bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bfa:	e7f9      	b.n	8001bf0 <memset+0x4>

08001bfc <__cvt>:
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c02:	461e      	mov	r6, r3
 8001c04:	bfbb      	ittet	lt
 8001c06:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8001c0a:	461e      	movlt	r6, r3
 8001c0c:	2300      	movge	r3, #0
 8001c0e:	232d      	movlt	r3, #45	; 0x2d
 8001c10:	b088      	sub	sp, #32
 8001c12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001c14:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8001c18:	f027 0720 	bic.w	r7, r7, #32
 8001c1c:	2f46      	cmp	r7, #70	; 0x46
 8001c1e:	4614      	mov	r4, r2
 8001c20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001c22:	700b      	strb	r3, [r1, #0]
 8001c24:	d004      	beq.n	8001c30 <__cvt+0x34>
 8001c26:	2f45      	cmp	r7, #69	; 0x45
 8001c28:	d100      	bne.n	8001c2c <__cvt+0x30>
 8001c2a:	3501      	adds	r5, #1
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e000      	b.n	8001c32 <__cvt+0x36>
 8001c30:	2303      	movs	r3, #3
 8001c32:	aa07      	add	r2, sp, #28
 8001c34:	9204      	str	r2, [sp, #16]
 8001c36:	aa06      	add	r2, sp, #24
 8001c38:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001c3c:	e9cd 3500 	strd	r3, r5, [sp]
 8001c40:	4622      	mov	r2, r4
 8001c42:	4633      	mov	r3, r6
 8001c44:	f000 fcd0 	bl	80025e8 <_dtoa_r>
 8001c48:	2f47      	cmp	r7, #71	; 0x47
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	d102      	bne.n	8001c54 <__cvt+0x58>
 8001c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001c50:	07db      	lsls	r3, r3, #31
 8001c52:	d526      	bpl.n	8001ca2 <__cvt+0xa6>
 8001c54:	2f46      	cmp	r7, #70	; 0x46
 8001c56:	eb08 0905 	add.w	r9, r8, r5
 8001c5a:	d111      	bne.n	8001c80 <__cvt+0x84>
 8001c5c:	f898 3000 	ldrb.w	r3, [r8]
 8001c60:	2b30      	cmp	r3, #48	; 0x30
 8001c62:	d10a      	bne.n	8001c7a <__cvt+0x7e>
 8001c64:	2200      	movs	r2, #0
 8001c66:	2300      	movs	r3, #0
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4631      	mov	r1, r6
 8001c6c:	f7fe fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8001c70:	b918      	cbnz	r0, 8001c7a <__cvt+0x7e>
 8001c72:	f1c5 0501 	rsb	r5, r5, #1
 8001c76:	f8ca 5000 	str.w	r5, [sl]
 8001c7a:	f8da 3000 	ldr.w	r3, [sl]
 8001c7e:	4499      	add	r9, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	2300      	movs	r3, #0
 8001c84:	4620      	mov	r0, r4
 8001c86:	4631      	mov	r1, r6
 8001c88:	f7fe fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8001c8c:	b938      	cbnz	r0, 8001c9e <__cvt+0xa2>
 8001c8e:	2230      	movs	r2, #48	; 0x30
 8001c90:	9b07      	ldr	r3, [sp, #28]
 8001c92:	454b      	cmp	r3, r9
 8001c94:	d205      	bcs.n	8001ca2 <__cvt+0xa6>
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	9107      	str	r1, [sp, #28]
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e7f8      	b.n	8001c90 <__cvt+0x94>
 8001c9e:	f8cd 901c 	str.w	r9, [sp, #28]
 8001ca2:	4640      	mov	r0, r8
 8001ca4:	9b07      	ldr	r3, [sp, #28]
 8001ca6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001ca8:	eba3 0308 	sub.w	r3, r3, r8
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	b008      	add	sp, #32
 8001cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001cb4 <__exponent>:
 8001cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cb6:	2900      	cmp	r1, #0
 8001cb8:	bfb4      	ite	lt
 8001cba:	232d      	movlt	r3, #45	; 0x2d
 8001cbc:	232b      	movge	r3, #43	; 0x2b
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	bfb8      	it	lt
 8001cc2:	4249      	neglt	r1, r1
 8001cc4:	2909      	cmp	r1, #9
 8001cc6:	f804 2b02 	strb.w	r2, [r4], #2
 8001cca:	7043      	strb	r3, [r0, #1]
 8001ccc:	dd21      	ble.n	8001d12 <__exponent+0x5e>
 8001cce:	f10d 0307 	add.w	r3, sp, #7
 8001cd2:	461f      	mov	r7, r3
 8001cd4:	260a      	movs	r6, #10
 8001cd6:	fb91 f5f6 	sdiv	r5, r1, r6
 8001cda:	fb06 1115 	mls	r1, r6, r5, r1
 8001cde:	2d09      	cmp	r5, #9
 8001ce0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001ce4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001ce8:	f103 32ff 	add.w	r2, r3, #4294967295
 8001cec:	4629      	mov	r1, r5
 8001cee:	dc09      	bgt.n	8001d04 <__exponent+0x50>
 8001cf0:	3130      	adds	r1, #48	; 0x30
 8001cf2:	3b02      	subs	r3, #2
 8001cf4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001cf8:	42bb      	cmp	r3, r7
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	d304      	bcc.n	8001d08 <__exponent+0x54>
 8001cfe:	1a10      	subs	r0, r2, r0
 8001d00:	b003      	add	sp, #12
 8001d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d04:	4613      	mov	r3, r2
 8001d06:	e7e6      	b.n	8001cd6 <__exponent+0x22>
 8001d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d0c:	f804 2b01 	strb.w	r2, [r4], #1
 8001d10:	e7f2      	b.n	8001cf8 <__exponent+0x44>
 8001d12:	2330      	movs	r3, #48	; 0x30
 8001d14:	4419      	add	r1, r3
 8001d16:	7083      	strb	r3, [r0, #2]
 8001d18:	1d02      	adds	r2, r0, #4
 8001d1a:	70c1      	strb	r1, [r0, #3]
 8001d1c:	e7ef      	b.n	8001cfe <__exponent+0x4a>
	...

08001d20 <_printf_float>:
 8001d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d24:	b091      	sub	sp, #68	; 0x44
 8001d26:	460c      	mov	r4, r1
 8001d28:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001d2a:	4693      	mov	fp, r2
 8001d2c:	461e      	mov	r6, r3
 8001d2e:	4605      	mov	r5, r0
 8001d30:	f001 fad8 	bl	80032e4 <_localeconv_r>
 8001d34:	6803      	ldr	r3, [r0, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	9309      	str	r3, [sp, #36]	; 0x24
 8001d3a:	f7fe fa09 	bl	8000150 <strlen>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	930e      	str	r3, [sp, #56]	; 0x38
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	900a      	str	r0, [sp, #40]	; 0x28
 8001d46:	3307      	adds	r3, #7
 8001d48:	f023 0307 	bic.w	r3, r3, #7
 8001d4c:	f103 0208 	add.w	r2, r3, #8
 8001d50:	f894 8018 	ldrb.w	r8, [r4, #24]
 8001d54:	f8d4 a000 	ldr.w	sl, [r4]
 8001d58:	603a      	str	r2, [r7, #0]
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001d62:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8001d66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	4ba6      	ldr	r3, [pc, #664]	; (800200c <_printf_float+0x2ec>)
 8001d72:	4638      	mov	r0, r7
 8001d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d76:	f7fe fe49 	bl	8000a0c <__aeabi_dcmpun>
 8001d7a:	bb68      	cbnz	r0, 8001dd8 <_printf_float+0xb8>
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	4ba2      	ldr	r3, [pc, #648]	; (800200c <_printf_float+0x2ec>)
 8001d82:	4638      	mov	r0, r7
 8001d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d86:	f7fe fe23 	bl	80009d0 <__aeabi_dcmple>
 8001d8a:	bb28      	cbnz	r0, 8001dd8 <_printf_float+0xb8>
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2300      	movs	r3, #0
 8001d90:	4638      	mov	r0, r7
 8001d92:	4649      	mov	r1, r9
 8001d94:	f7fe fe12 	bl	80009bc <__aeabi_dcmplt>
 8001d98:	b110      	cbz	r0, 8001da0 <_printf_float+0x80>
 8001d9a:	232d      	movs	r3, #45	; 0x2d
 8001d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001da0:	4f9b      	ldr	r7, [pc, #620]	; (8002010 <_printf_float+0x2f0>)
 8001da2:	4b9c      	ldr	r3, [pc, #624]	; (8002014 <_printf_float+0x2f4>)
 8001da4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001da8:	bf98      	it	ls
 8001daa:	461f      	movls	r7, r3
 8001dac:	2303      	movs	r3, #3
 8001dae:	f04f 0900 	mov.w	r9, #0
 8001db2:	6123      	str	r3, [r4, #16]
 8001db4:	f02a 0304 	bic.w	r3, sl, #4
 8001db8:	6023      	str	r3, [r4, #0]
 8001dba:	9600      	str	r6, [sp, #0]
 8001dbc:	465b      	mov	r3, fp
 8001dbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f000 f9e2 	bl	800218c <_printf_common>
 8001dc8:	3001      	adds	r0, #1
 8001dca:	f040 8090 	bne.w	8001eee <_printf_float+0x1ce>
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd2:	b011      	add	sp, #68	; 0x44
 8001dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dd8:	463a      	mov	r2, r7
 8001dda:	464b      	mov	r3, r9
 8001ddc:	4638      	mov	r0, r7
 8001dde:	4649      	mov	r1, r9
 8001de0:	f7fe fe14 	bl	8000a0c <__aeabi_dcmpun>
 8001de4:	b110      	cbz	r0, 8001dec <_printf_float+0xcc>
 8001de6:	4f8c      	ldr	r7, [pc, #560]	; (8002018 <_printf_float+0x2f8>)
 8001de8:	4b8c      	ldr	r3, [pc, #560]	; (800201c <_printf_float+0x2fc>)
 8001dea:	e7db      	b.n	8001da4 <_printf_float+0x84>
 8001dec:	6863      	ldr	r3, [r4, #4]
 8001dee:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8001df2:	1c59      	adds	r1, r3, #1
 8001df4:	a80d      	add	r0, sp, #52	; 0x34
 8001df6:	a90e      	add	r1, sp, #56	; 0x38
 8001df8:	d140      	bne.n	8001e7c <_printf_float+0x15c>
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	6063      	str	r3, [r4, #4]
 8001dfe:	f04f 0c00 	mov.w	ip, #0
 8001e02:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8001e06:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001e0a:	6863      	ldr	r3, [r4, #4]
 8001e0c:	6022      	str	r2, [r4, #0]
 8001e0e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	463a      	mov	r2, r7
 8001e16:	464b      	mov	r3, r9
 8001e18:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f7ff feed 	bl	8001bfc <__cvt>
 8001e22:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8001e26:	2b47      	cmp	r3, #71	; 0x47
 8001e28:	4607      	mov	r7, r0
 8001e2a:	d109      	bne.n	8001e40 <_printf_float+0x120>
 8001e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001e2e:	1cd8      	adds	r0, r3, #3
 8001e30:	db02      	blt.n	8001e38 <_printf_float+0x118>
 8001e32:	6862      	ldr	r2, [r4, #4]
 8001e34:	4293      	cmp	r3, r2
 8001e36:	dd47      	ble.n	8001ec8 <_printf_float+0x1a8>
 8001e38:	f1a8 0802 	sub.w	r8, r8, #2
 8001e3c:	fa5f f888 	uxtb.w	r8, r8
 8001e40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001e44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001e46:	d824      	bhi.n	8001e92 <_printf_float+0x172>
 8001e48:	3901      	subs	r1, #1
 8001e4a:	4642      	mov	r2, r8
 8001e4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001e50:	910d      	str	r1, [sp, #52]	; 0x34
 8001e52:	f7ff ff2f 	bl	8001cb4 <__exponent>
 8001e56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e58:	4681      	mov	r9, r0
 8001e5a:	1813      	adds	r3, r2, r0
 8001e5c:	2a01      	cmp	r2, #1
 8001e5e:	6123      	str	r3, [r4, #16]
 8001e60:	dc02      	bgt.n	8001e68 <_printf_float+0x148>
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	07d1      	lsls	r1, r2, #31
 8001e66:	d501      	bpl.n	8001e6c <_printf_float+0x14c>
 8001e68:	3301      	adds	r3, #1
 8001e6a:	6123      	str	r3, [r4, #16]
 8001e6c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0a2      	beq.n	8001dba <_printf_float+0x9a>
 8001e74:	232d      	movs	r3, #45	; 0x2d
 8001e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e7a:	e79e      	b.n	8001dba <_printf_float+0x9a>
 8001e7c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8001e80:	f000 816e 	beq.w	8002160 <_printf_float+0x440>
 8001e84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001e88:	d1b9      	bne.n	8001dfe <_printf_float+0xde>
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1b7      	bne.n	8001dfe <_printf_float+0xde>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e7b4      	b.n	8001dfc <_printf_float+0xdc>
 8001e92:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8001e96:	d119      	bne.n	8001ecc <_printf_float+0x1ac>
 8001e98:	2900      	cmp	r1, #0
 8001e9a:	6863      	ldr	r3, [r4, #4]
 8001e9c:	dd0c      	ble.n	8001eb8 <_printf_float+0x198>
 8001e9e:	6121      	str	r1, [r4, #16]
 8001ea0:	b913      	cbnz	r3, 8001ea8 <_printf_float+0x188>
 8001ea2:	6822      	ldr	r2, [r4, #0]
 8001ea4:	07d2      	lsls	r2, r2, #31
 8001ea6:	d502      	bpl.n	8001eae <_printf_float+0x18e>
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	440b      	add	r3, r1
 8001eac:	6123      	str	r3, [r4, #16]
 8001eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001eb0:	f04f 0900 	mov.w	r9, #0
 8001eb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8001eb6:	e7d9      	b.n	8001e6c <_printf_float+0x14c>
 8001eb8:	b913      	cbnz	r3, 8001ec0 <_printf_float+0x1a0>
 8001eba:	6822      	ldr	r2, [r4, #0]
 8001ebc:	07d0      	lsls	r0, r2, #31
 8001ebe:	d501      	bpl.n	8001ec4 <_printf_float+0x1a4>
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	e7f3      	b.n	8001eac <_printf_float+0x18c>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e7f1      	b.n	8001eac <_printf_float+0x18c>
 8001ec8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8001ecc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	db05      	blt.n	8001ee0 <_printf_float+0x1c0>
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	6123      	str	r3, [r4, #16]
 8001ed8:	07d1      	lsls	r1, r2, #31
 8001eda:	d5e8      	bpl.n	8001eae <_printf_float+0x18e>
 8001edc:	3301      	adds	r3, #1
 8001ede:	e7e5      	b.n	8001eac <_printf_float+0x18c>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bfcc      	ite	gt
 8001ee4:	2301      	movgt	r3, #1
 8001ee6:	f1c3 0302 	rsble	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	e7de      	b.n	8001eac <_printf_float+0x18c>
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	055a      	lsls	r2, r3, #21
 8001ef2:	d407      	bmi.n	8001f04 <_printf_float+0x1e4>
 8001ef4:	6923      	ldr	r3, [r4, #16]
 8001ef6:	463a      	mov	r2, r7
 8001ef8:	4659      	mov	r1, fp
 8001efa:	4628      	mov	r0, r5
 8001efc:	47b0      	blx	r6
 8001efe:	3001      	adds	r0, #1
 8001f00:	d129      	bne.n	8001f56 <_printf_float+0x236>
 8001f02:	e764      	b.n	8001dce <_printf_float+0xae>
 8001f04:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001f08:	f240 80d7 	bls.w	80020ba <_printf_float+0x39a>
 8001f0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001f10:	2200      	movs	r2, #0
 8001f12:	2300      	movs	r3, #0
 8001f14:	f7fe fd48 	bl	80009a8 <__aeabi_dcmpeq>
 8001f18:	b388      	cbz	r0, 8001f7e <_printf_float+0x25e>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	4a40      	ldr	r2, [pc, #256]	; (8002020 <_printf_float+0x300>)
 8001f1e:	4659      	mov	r1, fp
 8001f20:	4628      	mov	r0, r5
 8001f22:	47b0      	blx	r6
 8001f24:	3001      	adds	r0, #1
 8001f26:	f43f af52 	beq.w	8001dce <_printf_float+0xae>
 8001f2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	db02      	blt.n	8001f38 <_printf_float+0x218>
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	07d8      	lsls	r0, r3, #31
 8001f36:	d50e      	bpl.n	8001f56 <_printf_float+0x236>
 8001f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001f3c:	4659      	mov	r1, fp
 8001f3e:	4628      	mov	r0, r5
 8001f40:	47b0      	blx	r6
 8001f42:	3001      	adds	r0, #1
 8001f44:	f43f af43 	beq.w	8001dce <_printf_float+0xae>
 8001f48:	2700      	movs	r7, #0
 8001f4a:	f104 081a 	add.w	r8, r4, #26
 8001f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f50:	3b01      	subs	r3, #1
 8001f52:	42bb      	cmp	r3, r7
 8001f54:	dc09      	bgt.n	8001f6a <_printf_float+0x24a>
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	079f      	lsls	r7, r3, #30
 8001f5a:	f100 80fd 	bmi.w	8002158 <_printf_float+0x438>
 8001f5e:	68e0      	ldr	r0, [r4, #12]
 8001f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f62:	4298      	cmp	r0, r3
 8001f64:	bfb8      	it	lt
 8001f66:	4618      	movlt	r0, r3
 8001f68:	e733      	b.n	8001dd2 <_printf_float+0xb2>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	4642      	mov	r2, r8
 8001f6e:	4659      	mov	r1, fp
 8001f70:	4628      	mov	r0, r5
 8001f72:	47b0      	blx	r6
 8001f74:	3001      	adds	r0, #1
 8001f76:	f43f af2a 	beq.w	8001dce <_printf_float+0xae>
 8001f7a:	3701      	adds	r7, #1
 8001f7c:	e7e7      	b.n	8001f4e <_printf_float+0x22e>
 8001f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	dc2b      	bgt.n	8001fdc <_printf_float+0x2bc>
 8001f84:	2301      	movs	r3, #1
 8001f86:	4a26      	ldr	r2, [pc, #152]	; (8002020 <_printf_float+0x300>)
 8001f88:	4659      	mov	r1, fp
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	47b0      	blx	r6
 8001f8e:	3001      	adds	r0, #1
 8001f90:	f43f af1d 	beq.w	8001dce <_printf_float+0xae>
 8001f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f96:	b923      	cbnz	r3, 8001fa2 <_printf_float+0x282>
 8001f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f9a:	b913      	cbnz	r3, 8001fa2 <_printf_float+0x282>
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	07d9      	lsls	r1, r3, #31
 8001fa0:	d5d9      	bpl.n	8001f56 <_printf_float+0x236>
 8001fa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001fa6:	4659      	mov	r1, fp
 8001fa8:	4628      	mov	r0, r5
 8001faa:	47b0      	blx	r6
 8001fac:	3001      	adds	r0, #1
 8001fae:	f43f af0e 	beq.w	8001dce <_printf_float+0xae>
 8001fb2:	f04f 0800 	mov.w	r8, #0
 8001fb6:	f104 091a 	add.w	r9, r4, #26
 8001fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fbc:	425b      	negs	r3, r3
 8001fbe:	4543      	cmp	r3, r8
 8001fc0:	dc01      	bgt.n	8001fc6 <_printf_float+0x2a6>
 8001fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001fc4:	e797      	b.n	8001ef6 <_printf_float+0x1d6>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	464a      	mov	r2, r9
 8001fca:	4659      	mov	r1, fp
 8001fcc:	4628      	mov	r0, r5
 8001fce:	47b0      	blx	r6
 8001fd0:	3001      	adds	r0, #1
 8001fd2:	f43f aefc 	beq.w	8001dce <_printf_float+0xae>
 8001fd6:	f108 0801 	add.w	r8, r8, #1
 8001fda:	e7ee      	b.n	8001fba <_printf_float+0x29a>
 8001fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	bfa8      	it	ge
 8001fe4:	461a      	movge	r2, r3
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	4690      	mov	r8, r2
 8001fea:	dd07      	ble.n	8001ffc <_printf_float+0x2dc>
 8001fec:	4613      	mov	r3, r2
 8001fee:	4659      	mov	r1, fp
 8001ff0:	463a      	mov	r2, r7
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	47b0      	blx	r6
 8001ff6:	3001      	adds	r0, #1
 8001ff8:	f43f aee9 	beq.w	8001dce <_printf_float+0xae>
 8001ffc:	f104 031a 	add.w	r3, r4, #26
 8002000:	f04f 0a00 	mov.w	sl, #0
 8002004:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002008:	930b      	str	r3, [sp, #44]	; 0x2c
 800200a:	e015      	b.n	8002038 <_printf_float+0x318>
 800200c:	7fefffff 	.word	0x7fefffff
 8002010:	080042a8 	.word	0x080042a8
 8002014:	080042a4 	.word	0x080042a4
 8002018:	080042b0 	.word	0x080042b0
 800201c:	080042ac 	.word	0x080042ac
 8002020:	080042b4 	.word	0x080042b4
 8002024:	2301      	movs	r3, #1
 8002026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002028:	4659      	mov	r1, fp
 800202a:	4628      	mov	r0, r5
 800202c:	47b0      	blx	r6
 800202e:	3001      	adds	r0, #1
 8002030:	f43f aecd 	beq.w	8001dce <_printf_float+0xae>
 8002034:	f10a 0a01 	add.w	sl, sl, #1
 8002038:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800203c:	eba9 0308 	sub.w	r3, r9, r8
 8002040:	4553      	cmp	r3, sl
 8002042:	dcef      	bgt.n	8002024 <_printf_float+0x304>
 8002044:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002048:	429a      	cmp	r2, r3
 800204a:	444f      	add	r7, r9
 800204c:	db14      	blt.n	8002078 <_printf_float+0x358>
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	07da      	lsls	r2, r3, #31
 8002052:	d411      	bmi.n	8002078 <_printf_float+0x358>
 8002054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002056:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002058:	eba3 0209 	sub.w	r2, r3, r9
 800205c:	eba3 0901 	sub.w	r9, r3, r1
 8002060:	4591      	cmp	r9, r2
 8002062:	bfa8      	it	ge
 8002064:	4691      	movge	r9, r2
 8002066:	f1b9 0f00 	cmp.w	r9, #0
 800206a:	dc0d      	bgt.n	8002088 <_printf_float+0x368>
 800206c:	2700      	movs	r7, #0
 800206e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002072:	f104 081a 	add.w	r8, r4, #26
 8002076:	e018      	b.n	80020aa <_printf_float+0x38a>
 8002078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800207c:	4659      	mov	r1, fp
 800207e:	4628      	mov	r0, r5
 8002080:	47b0      	blx	r6
 8002082:	3001      	adds	r0, #1
 8002084:	d1e6      	bne.n	8002054 <_printf_float+0x334>
 8002086:	e6a2      	b.n	8001dce <_printf_float+0xae>
 8002088:	464b      	mov	r3, r9
 800208a:	463a      	mov	r2, r7
 800208c:	4659      	mov	r1, fp
 800208e:	4628      	mov	r0, r5
 8002090:	47b0      	blx	r6
 8002092:	3001      	adds	r0, #1
 8002094:	d1ea      	bne.n	800206c <_printf_float+0x34c>
 8002096:	e69a      	b.n	8001dce <_printf_float+0xae>
 8002098:	2301      	movs	r3, #1
 800209a:	4642      	mov	r2, r8
 800209c:	4659      	mov	r1, fp
 800209e:	4628      	mov	r0, r5
 80020a0:	47b0      	blx	r6
 80020a2:	3001      	adds	r0, #1
 80020a4:	f43f ae93 	beq.w	8001dce <_printf_float+0xae>
 80020a8:	3701      	adds	r7, #1
 80020aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	eba3 0309 	sub.w	r3, r3, r9
 80020b4:	42bb      	cmp	r3, r7
 80020b6:	dcef      	bgt.n	8002098 <_printf_float+0x378>
 80020b8:	e74d      	b.n	8001f56 <_printf_float+0x236>
 80020ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80020bc:	2a01      	cmp	r2, #1
 80020be:	dc01      	bgt.n	80020c4 <_printf_float+0x3a4>
 80020c0:	07db      	lsls	r3, r3, #31
 80020c2:	d538      	bpl.n	8002136 <_printf_float+0x416>
 80020c4:	2301      	movs	r3, #1
 80020c6:	463a      	mov	r2, r7
 80020c8:	4659      	mov	r1, fp
 80020ca:	4628      	mov	r0, r5
 80020cc:	47b0      	blx	r6
 80020ce:	3001      	adds	r0, #1
 80020d0:	f43f ae7d 	beq.w	8001dce <_printf_float+0xae>
 80020d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80020d8:	4659      	mov	r1, fp
 80020da:	4628      	mov	r0, r5
 80020dc:	47b0      	blx	r6
 80020de:	3001      	adds	r0, #1
 80020e0:	f107 0701 	add.w	r7, r7, #1
 80020e4:	f43f ae73 	beq.w	8001dce <_printf_float+0xae>
 80020e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80020ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020ee:	2200      	movs	r2, #0
 80020f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80020f4:	2300      	movs	r3, #0
 80020f6:	f7fe fc57 	bl	80009a8 <__aeabi_dcmpeq>
 80020fa:	b9c0      	cbnz	r0, 800212e <_printf_float+0x40e>
 80020fc:	4643      	mov	r3, r8
 80020fe:	463a      	mov	r2, r7
 8002100:	4659      	mov	r1, fp
 8002102:	4628      	mov	r0, r5
 8002104:	47b0      	blx	r6
 8002106:	3001      	adds	r0, #1
 8002108:	d10d      	bne.n	8002126 <_printf_float+0x406>
 800210a:	e660      	b.n	8001dce <_printf_float+0xae>
 800210c:	2301      	movs	r3, #1
 800210e:	4642      	mov	r2, r8
 8002110:	4659      	mov	r1, fp
 8002112:	4628      	mov	r0, r5
 8002114:	47b0      	blx	r6
 8002116:	3001      	adds	r0, #1
 8002118:	f43f ae59 	beq.w	8001dce <_printf_float+0xae>
 800211c:	3701      	adds	r7, #1
 800211e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002120:	3b01      	subs	r3, #1
 8002122:	42bb      	cmp	r3, r7
 8002124:	dcf2      	bgt.n	800210c <_printf_float+0x3ec>
 8002126:	464b      	mov	r3, r9
 8002128:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800212c:	e6e4      	b.n	8001ef8 <_printf_float+0x1d8>
 800212e:	2700      	movs	r7, #0
 8002130:	f104 081a 	add.w	r8, r4, #26
 8002134:	e7f3      	b.n	800211e <_printf_float+0x3fe>
 8002136:	2301      	movs	r3, #1
 8002138:	e7e1      	b.n	80020fe <_printf_float+0x3de>
 800213a:	2301      	movs	r3, #1
 800213c:	4642      	mov	r2, r8
 800213e:	4659      	mov	r1, fp
 8002140:	4628      	mov	r0, r5
 8002142:	47b0      	blx	r6
 8002144:	3001      	adds	r0, #1
 8002146:	f43f ae42 	beq.w	8001dce <_printf_float+0xae>
 800214a:	3701      	adds	r7, #1
 800214c:	68e3      	ldr	r3, [r4, #12]
 800214e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	42bb      	cmp	r3, r7
 8002154:	dcf1      	bgt.n	800213a <_printf_float+0x41a>
 8002156:	e702      	b.n	8001f5e <_printf_float+0x23e>
 8002158:	2700      	movs	r7, #0
 800215a:	f104 0819 	add.w	r8, r4, #25
 800215e:	e7f5      	b.n	800214c <_printf_float+0x42c>
 8002160:	2b00      	cmp	r3, #0
 8002162:	f43f ae94 	beq.w	8001e8e <_printf_float+0x16e>
 8002166:	f04f 0c00 	mov.w	ip, #0
 800216a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800216e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002172:	6022      	str	r2, [r4, #0]
 8002174:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002178:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	463a      	mov	r2, r7
 8002180:	464b      	mov	r3, r9
 8002182:	4628      	mov	r0, r5
 8002184:	f7ff fd3a 	bl	8001bfc <__cvt>
 8002188:	4607      	mov	r7, r0
 800218a:	e64f      	b.n	8001e2c <_printf_float+0x10c>

0800218c <_printf_common>:
 800218c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002190:	4691      	mov	r9, r2
 8002192:	461f      	mov	r7, r3
 8002194:	688a      	ldr	r2, [r1, #8]
 8002196:	690b      	ldr	r3, [r1, #16]
 8002198:	4606      	mov	r6, r0
 800219a:	4293      	cmp	r3, r2
 800219c:	bfb8      	it	lt
 800219e:	4613      	movlt	r3, r2
 80021a0:	f8c9 3000 	str.w	r3, [r9]
 80021a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021a8:	460c      	mov	r4, r1
 80021aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021ae:	b112      	cbz	r2, 80021b6 <_printf_common+0x2a>
 80021b0:	3301      	adds	r3, #1
 80021b2:	f8c9 3000 	str.w	r3, [r9]
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	0699      	lsls	r1, r3, #26
 80021ba:	bf42      	ittt	mi
 80021bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021c0:	3302      	addmi	r3, #2
 80021c2:	f8c9 3000 	strmi.w	r3, [r9]
 80021c6:	6825      	ldr	r5, [r4, #0]
 80021c8:	f015 0506 	ands.w	r5, r5, #6
 80021cc:	d107      	bne.n	80021de <_printf_common+0x52>
 80021ce:	f104 0a19 	add.w	sl, r4, #25
 80021d2:	68e3      	ldr	r3, [r4, #12]
 80021d4:	f8d9 2000 	ldr.w	r2, [r9]
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	42ab      	cmp	r3, r5
 80021dc:	dc29      	bgt.n	8002232 <_printf_common+0xa6>
 80021de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021e2:	6822      	ldr	r2, [r4, #0]
 80021e4:	3300      	adds	r3, #0
 80021e6:	bf18      	it	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	0692      	lsls	r2, r2, #26
 80021ec:	d42e      	bmi.n	800224c <_printf_common+0xc0>
 80021ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021f2:	4639      	mov	r1, r7
 80021f4:	4630      	mov	r0, r6
 80021f6:	47c0      	blx	r8
 80021f8:	3001      	adds	r0, #1
 80021fa:	d021      	beq.n	8002240 <_printf_common+0xb4>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	68e5      	ldr	r5, [r4, #12]
 8002200:	f003 0306 	and.w	r3, r3, #6
 8002204:	2b04      	cmp	r3, #4
 8002206:	bf18      	it	ne
 8002208:	2500      	movne	r5, #0
 800220a:	f8d9 2000 	ldr.w	r2, [r9]
 800220e:	f04f 0900 	mov.w	r9, #0
 8002212:	bf08      	it	eq
 8002214:	1aad      	subeq	r5, r5, r2
 8002216:	68a3      	ldr	r3, [r4, #8]
 8002218:	6922      	ldr	r2, [r4, #16]
 800221a:	bf08      	it	eq
 800221c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002220:	4293      	cmp	r3, r2
 8002222:	bfc4      	itt	gt
 8002224:	1a9b      	subgt	r3, r3, r2
 8002226:	18ed      	addgt	r5, r5, r3
 8002228:	341a      	adds	r4, #26
 800222a:	454d      	cmp	r5, r9
 800222c:	d11a      	bne.n	8002264 <_printf_common+0xd8>
 800222e:	2000      	movs	r0, #0
 8002230:	e008      	b.n	8002244 <_printf_common+0xb8>
 8002232:	2301      	movs	r3, #1
 8002234:	4652      	mov	r2, sl
 8002236:	4639      	mov	r1, r7
 8002238:	4630      	mov	r0, r6
 800223a:	47c0      	blx	r8
 800223c:	3001      	adds	r0, #1
 800223e:	d103      	bne.n	8002248 <_printf_common+0xbc>
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002248:	3501      	adds	r5, #1
 800224a:	e7c2      	b.n	80021d2 <_printf_common+0x46>
 800224c:	2030      	movs	r0, #48	; 0x30
 800224e:	18e1      	adds	r1, r4, r3
 8002250:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800225a:	4422      	add	r2, r4
 800225c:	3302      	adds	r3, #2
 800225e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002262:	e7c4      	b.n	80021ee <_printf_common+0x62>
 8002264:	2301      	movs	r3, #1
 8002266:	4622      	mov	r2, r4
 8002268:	4639      	mov	r1, r7
 800226a:	4630      	mov	r0, r6
 800226c:	47c0      	blx	r8
 800226e:	3001      	adds	r0, #1
 8002270:	d0e6      	beq.n	8002240 <_printf_common+0xb4>
 8002272:	f109 0901 	add.w	r9, r9, #1
 8002276:	e7d8      	b.n	800222a <_printf_common+0x9e>

08002278 <_printf_i>:
 8002278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800227c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002280:	460c      	mov	r4, r1
 8002282:	7e09      	ldrb	r1, [r1, #24]
 8002284:	b085      	sub	sp, #20
 8002286:	296e      	cmp	r1, #110	; 0x6e
 8002288:	4617      	mov	r7, r2
 800228a:	4606      	mov	r6, r0
 800228c:	4698      	mov	r8, r3
 800228e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002290:	f000 80b3 	beq.w	80023fa <_printf_i+0x182>
 8002294:	d822      	bhi.n	80022dc <_printf_i+0x64>
 8002296:	2963      	cmp	r1, #99	; 0x63
 8002298:	d036      	beq.n	8002308 <_printf_i+0x90>
 800229a:	d80a      	bhi.n	80022b2 <_printf_i+0x3a>
 800229c:	2900      	cmp	r1, #0
 800229e:	f000 80b9 	beq.w	8002414 <_printf_i+0x19c>
 80022a2:	2958      	cmp	r1, #88	; 0x58
 80022a4:	f000 8083 	beq.w	80023ae <_printf_i+0x136>
 80022a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80022b0:	e032      	b.n	8002318 <_printf_i+0xa0>
 80022b2:	2964      	cmp	r1, #100	; 0x64
 80022b4:	d001      	beq.n	80022ba <_printf_i+0x42>
 80022b6:	2969      	cmp	r1, #105	; 0x69
 80022b8:	d1f6      	bne.n	80022a8 <_printf_i+0x30>
 80022ba:	6820      	ldr	r0, [r4, #0]
 80022bc:	6813      	ldr	r3, [r2, #0]
 80022be:	0605      	lsls	r5, r0, #24
 80022c0:	f103 0104 	add.w	r1, r3, #4
 80022c4:	d52a      	bpl.n	800231c <_printf_i+0xa4>
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6011      	str	r1, [r2, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da03      	bge.n	80022d6 <_printf_i+0x5e>
 80022ce:	222d      	movs	r2, #45	; 0x2d
 80022d0:	425b      	negs	r3, r3
 80022d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022d6:	486f      	ldr	r0, [pc, #444]	; (8002494 <_printf_i+0x21c>)
 80022d8:	220a      	movs	r2, #10
 80022da:	e039      	b.n	8002350 <_printf_i+0xd8>
 80022dc:	2973      	cmp	r1, #115	; 0x73
 80022de:	f000 809d 	beq.w	800241c <_printf_i+0x1a4>
 80022e2:	d808      	bhi.n	80022f6 <_printf_i+0x7e>
 80022e4:	296f      	cmp	r1, #111	; 0x6f
 80022e6:	d020      	beq.n	800232a <_printf_i+0xb2>
 80022e8:	2970      	cmp	r1, #112	; 0x70
 80022ea:	d1dd      	bne.n	80022a8 <_printf_i+0x30>
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	6023      	str	r3, [r4, #0]
 80022f4:	e003      	b.n	80022fe <_printf_i+0x86>
 80022f6:	2975      	cmp	r1, #117	; 0x75
 80022f8:	d017      	beq.n	800232a <_printf_i+0xb2>
 80022fa:	2978      	cmp	r1, #120	; 0x78
 80022fc:	d1d4      	bne.n	80022a8 <_printf_i+0x30>
 80022fe:	2378      	movs	r3, #120	; 0x78
 8002300:	4865      	ldr	r0, [pc, #404]	; (8002498 <_printf_i+0x220>)
 8002302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002306:	e055      	b.n	80023b4 <_printf_i+0x13c>
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800230e:	1d19      	adds	r1, r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6011      	str	r1, [r2, #0]
 8002314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002318:	2301      	movs	r3, #1
 800231a:	e08c      	b.n	8002436 <_printf_i+0x1be>
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	bf18      	it	ne
 8002326:	b21b      	sxthne	r3, r3
 8002328:	e7cf      	b.n	80022ca <_printf_i+0x52>
 800232a:	6813      	ldr	r3, [r2, #0]
 800232c:	6825      	ldr	r5, [r4, #0]
 800232e:	1d18      	adds	r0, r3, #4
 8002330:	6010      	str	r0, [r2, #0]
 8002332:	0628      	lsls	r0, r5, #24
 8002334:	d501      	bpl.n	800233a <_printf_i+0xc2>
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e002      	b.n	8002340 <_printf_i+0xc8>
 800233a:	0668      	lsls	r0, r5, #25
 800233c:	d5fb      	bpl.n	8002336 <_printf_i+0xbe>
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	296f      	cmp	r1, #111	; 0x6f
 8002342:	bf14      	ite	ne
 8002344:	220a      	movne	r2, #10
 8002346:	2208      	moveq	r2, #8
 8002348:	4852      	ldr	r0, [pc, #328]	; (8002494 <_printf_i+0x21c>)
 800234a:	2100      	movs	r1, #0
 800234c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002350:	6865      	ldr	r5, [r4, #4]
 8002352:	2d00      	cmp	r5, #0
 8002354:	60a5      	str	r5, [r4, #8]
 8002356:	f2c0 8095 	blt.w	8002484 <_printf_i+0x20c>
 800235a:	6821      	ldr	r1, [r4, #0]
 800235c:	f021 0104 	bic.w	r1, r1, #4
 8002360:	6021      	str	r1, [r4, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d13d      	bne.n	80023e2 <_printf_i+0x16a>
 8002366:	2d00      	cmp	r5, #0
 8002368:	f040 808e 	bne.w	8002488 <_printf_i+0x210>
 800236c:	4665      	mov	r5, ip
 800236e:	2a08      	cmp	r2, #8
 8002370:	d10b      	bne.n	800238a <_printf_i+0x112>
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	07db      	lsls	r3, r3, #31
 8002376:	d508      	bpl.n	800238a <_printf_i+0x112>
 8002378:	6923      	ldr	r3, [r4, #16]
 800237a:	6862      	ldr	r2, [r4, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	bfde      	ittt	le
 8002380:	2330      	movle	r3, #48	; 0x30
 8002382:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002386:	f105 35ff 	addle.w	r5, r5, #4294967295
 800238a:	ebac 0305 	sub.w	r3, ip, r5
 800238e:	6123      	str	r3, [r4, #16]
 8002390:	f8cd 8000 	str.w	r8, [sp]
 8002394:	463b      	mov	r3, r7
 8002396:	aa03      	add	r2, sp, #12
 8002398:	4621      	mov	r1, r4
 800239a:	4630      	mov	r0, r6
 800239c:	f7ff fef6 	bl	800218c <_printf_common>
 80023a0:	3001      	adds	r0, #1
 80023a2:	d14d      	bne.n	8002440 <_printf_i+0x1c8>
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	b005      	add	sp, #20
 80023aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023ae:	4839      	ldr	r0, [pc, #228]	; (8002494 <_printf_i+0x21c>)
 80023b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80023b4:	6813      	ldr	r3, [r2, #0]
 80023b6:	6821      	ldr	r1, [r4, #0]
 80023b8:	1d1d      	adds	r5, r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6015      	str	r5, [r2, #0]
 80023be:	060a      	lsls	r2, r1, #24
 80023c0:	d50b      	bpl.n	80023da <_printf_i+0x162>
 80023c2:	07ca      	lsls	r2, r1, #31
 80023c4:	bf44      	itt	mi
 80023c6:	f041 0120 	orrmi.w	r1, r1, #32
 80023ca:	6021      	strmi	r1, [r4, #0]
 80023cc:	b91b      	cbnz	r3, 80023d6 <_printf_i+0x15e>
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	f022 0220 	bic.w	r2, r2, #32
 80023d4:	6022      	str	r2, [r4, #0]
 80023d6:	2210      	movs	r2, #16
 80023d8:	e7b7      	b.n	800234a <_printf_i+0xd2>
 80023da:	064d      	lsls	r5, r1, #25
 80023dc:	bf48      	it	mi
 80023de:	b29b      	uxthmi	r3, r3
 80023e0:	e7ef      	b.n	80023c2 <_printf_i+0x14a>
 80023e2:	4665      	mov	r5, ip
 80023e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80023e8:	fb02 3311 	mls	r3, r2, r1, r3
 80023ec:	5cc3      	ldrb	r3, [r0, r3]
 80023ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023f2:	460b      	mov	r3, r1
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d1f5      	bne.n	80023e4 <_printf_i+0x16c>
 80023f8:	e7b9      	b.n	800236e <_printf_i+0xf6>
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	6825      	ldr	r5, [r4, #0]
 80023fe:	1d18      	adds	r0, r3, #4
 8002400:	6961      	ldr	r1, [r4, #20]
 8002402:	6010      	str	r0, [r2, #0]
 8002404:	0628      	lsls	r0, r5, #24
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	d501      	bpl.n	800240e <_printf_i+0x196>
 800240a:	6019      	str	r1, [r3, #0]
 800240c:	e002      	b.n	8002414 <_printf_i+0x19c>
 800240e:	066a      	lsls	r2, r5, #25
 8002410:	d5fb      	bpl.n	800240a <_printf_i+0x192>
 8002412:	8019      	strh	r1, [r3, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	4665      	mov	r5, ip
 8002418:	6123      	str	r3, [r4, #16]
 800241a:	e7b9      	b.n	8002390 <_printf_i+0x118>
 800241c:	6813      	ldr	r3, [r2, #0]
 800241e:	1d19      	adds	r1, r3, #4
 8002420:	6011      	str	r1, [r2, #0]
 8002422:	681d      	ldr	r5, [r3, #0]
 8002424:	6862      	ldr	r2, [r4, #4]
 8002426:	2100      	movs	r1, #0
 8002428:	4628      	mov	r0, r5
 800242a:	f000 ff71 	bl	8003310 <memchr>
 800242e:	b108      	cbz	r0, 8002434 <_printf_i+0x1bc>
 8002430:	1b40      	subs	r0, r0, r5
 8002432:	6060      	str	r0, [r4, #4]
 8002434:	6863      	ldr	r3, [r4, #4]
 8002436:	6123      	str	r3, [r4, #16]
 8002438:	2300      	movs	r3, #0
 800243a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800243e:	e7a7      	b.n	8002390 <_printf_i+0x118>
 8002440:	6923      	ldr	r3, [r4, #16]
 8002442:	462a      	mov	r2, r5
 8002444:	4639      	mov	r1, r7
 8002446:	4630      	mov	r0, r6
 8002448:	47c0      	blx	r8
 800244a:	3001      	adds	r0, #1
 800244c:	d0aa      	beq.n	80023a4 <_printf_i+0x12c>
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	079b      	lsls	r3, r3, #30
 8002452:	d413      	bmi.n	800247c <_printf_i+0x204>
 8002454:	68e0      	ldr	r0, [r4, #12]
 8002456:	9b03      	ldr	r3, [sp, #12]
 8002458:	4298      	cmp	r0, r3
 800245a:	bfb8      	it	lt
 800245c:	4618      	movlt	r0, r3
 800245e:	e7a3      	b.n	80023a8 <_printf_i+0x130>
 8002460:	2301      	movs	r3, #1
 8002462:	464a      	mov	r2, r9
 8002464:	4639      	mov	r1, r7
 8002466:	4630      	mov	r0, r6
 8002468:	47c0      	blx	r8
 800246a:	3001      	adds	r0, #1
 800246c:	d09a      	beq.n	80023a4 <_printf_i+0x12c>
 800246e:	3501      	adds	r5, #1
 8002470:	68e3      	ldr	r3, [r4, #12]
 8002472:	9a03      	ldr	r2, [sp, #12]
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	42ab      	cmp	r3, r5
 8002478:	dcf2      	bgt.n	8002460 <_printf_i+0x1e8>
 800247a:	e7eb      	b.n	8002454 <_printf_i+0x1dc>
 800247c:	2500      	movs	r5, #0
 800247e:	f104 0919 	add.w	r9, r4, #25
 8002482:	e7f5      	b.n	8002470 <_printf_i+0x1f8>
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ac      	bne.n	80023e2 <_printf_i+0x16a>
 8002488:	7803      	ldrb	r3, [r0, #0]
 800248a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800248e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002492:	e76c      	b.n	800236e <_printf_i+0xf6>
 8002494:	080042b6 	.word	0x080042b6
 8002498:	080042c7 	.word	0x080042c7

0800249c <iprintf>:
 800249c:	b40f      	push	{r0, r1, r2, r3}
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <iprintf+0x2c>)
 80024a0:	b513      	push	{r0, r1, r4, lr}
 80024a2:	681c      	ldr	r4, [r3, #0]
 80024a4:	b124      	cbz	r4, 80024b0 <iprintf+0x14>
 80024a6:	69a3      	ldr	r3, [r4, #24]
 80024a8:	b913      	cbnz	r3, 80024b0 <iprintf+0x14>
 80024aa:	4620      	mov	r0, r4
 80024ac:	f000 fe90 	bl	80031d0 <__sinit>
 80024b0:	ab05      	add	r3, sp, #20
 80024b2:	9a04      	ldr	r2, [sp, #16]
 80024b4:	68a1      	ldr	r1, [r4, #8]
 80024b6:	4620      	mov	r0, r4
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	f001 fafb 	bl	8003ab4 <_vfiprintf_r>
 80024be:	b002      	add	sp, #8
 80024c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024c4:	b004      	add	sp, #16
 80024c6:	4770      	bx	lr
 80024c8:	2000000c 	.word	0x2000000c

080024cc <quorem>:
 80024cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024d0:	6903      	ldr	r3, [r0, #16]
 80024d2:	690c      	ldr	r4, [r1, #16]
 80024d4:	4680      	mov	r8, r0
 80024d6:	42a3      	cmp	r3, r4
 80024d8:	f2c0 8084 	blt.w	80025e4 <quorem+0x118>
 80024dc:	3c01      	subs	r4, #1
 80024de:	f101 0714 	add.w	r7, r1, #20
 80024e2:	f100 0614 	add.w	r6, r0, #20
 80024e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80024ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80024ee:	3501      	adds	r5, #1
 80024f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80024f4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80024f8:	eb06 030c 	add.w	r3, r6, ip
 80024fc:	eb07 090c 	add.w	r9, r7, ip
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	b39d      	cbz	r5, 800256c <quorem+0xa0>
 8002504:	f04f 0a00 	mov.w	sl, #0
 8002508:	4638      	mov	r0, r7
 800250a:	46b6      	mov	lr, r6
 800250c:	46d3      	mov	fp, sl
 800250e:	f850 2b04 	ldr.w	r2, [r0], #4
 8002512:	b293      	uxth	r3, r2
 8002514:	fb05 a303 	mla	r3, r5, r3, sl
 8002518:	0c12      	lsrs	r2, r2, #16
 800251a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800251e:	fb05 a202 	mla	r2, r5, r2, sl
 8002522:	b29b      	uxth	r3, r3
 8002524:	ebab 0303 	sub.w	r3, fp, r3
 8002528:	f8de b000 	ldr.w	fp, [lr]
 800252c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002530:	fa1f fb8b 	uxth.w	fp, fp
 8002534:	445b      	add	r3, fp
 8002536:	fa1f fb82 	uxth.w	fp, r2
 800253a:	f8de 2000 	ldr.w	r2, [lr]
 800253e:	4581      	cmp	r9, r0
 8002540:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002548:	b29b      	uxth	r3, r3
 800254a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800254e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002552:	f84e 3b04 	str.w	r3, [lr], #4
 8002556:	d2da      	bcs.n	800250e <quorem+0x42>
 8002558:	f856 300c 	ldr.w	r3, [r6, ip]
 800255c:	b933      	cbnz	r3, 800256c <quorem+0xa0>
 800255e:	9b01      	ldr	r3, [sp, #4]
 8002560:	3b04      	subs	r3, #4
 8002562:	429e      	cmp	r6, r3
 8002564:	461a      	mov	r2, r3
 8002566:	d331      	bcc.n	80025cc <quorem+0x100>
 8002568:	f8c8 4010 	str.w	r4, [r8, #16]
 800256c:	4640      	mov	r0, r8
 800256e:	f001 f8fd 	bl	800376c <__mcmp>
 8002572:	2800      	cmp	r0, #0
 8002574:	db26      	blt.n	80025c4 <quorem+0xf8>
 8002576:	4630      	mov	r0, r6
 8002578:	f04f 0c00 	mov.w	ip, #0
 800257c:	3501      	adds	r5, #1
 800257e:	f857 1b04 	ldr.w	r1, [r7], #4
 8002582:	f8d0 e000 	ldr.w	lr, [r0]
 8002586:	b28b      	uxth	r3, r1
 8002588:	ebac 0303 	sub.w	r3, ip, r3
 800258c:	fa1f f28e 	uxth.w	r2, lr
 8002590:	4413      	add	r3, r2
 8002592:	0c0a      	lsrs	r2, r1, #16
 8002594:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002598:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800259c:	b29b      	uxth	r3, r3
 800259e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025a2:	45b9      	cmp	r9, r7
 80025a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80025a8:	f840 3b04 	str.w	r3, [r0], #4
 80025ac:	d2e7      	bcs.n	800257e <quorem+0xb2>
 80025ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80025b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80025b6:	b92a      	cbnz	r2, 80025c4 <quorem+0xf8>
 80025b8:	3b04      	subs	r3, #4
 80025ba:	429e      	cmp	r6, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	d30b      	bcc.n	80025d8 <quorem+0x10c>
 80025c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80025c4:	4628      	mov	r0, r5
 80025c6:	b003      	add	sp, #12
 80025c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	3b04      	subs	r3, #4
 80025d0:	2a00      	cmp	r2, #0
 80025d2:	d1c9      	bne.n	8002568 <quorem+0x9c>
 80025d4:	3c01      	subs	r4, #1
 80025d6:	e7c4      	b.n	8002562 <quorem+0x96>
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	3b04      	subs	r3, #4
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d1ef      	bne.n	80025c0 <quorem+0xf4>
 80025e0:	3c01      	subs	r4, #1
 80025e2:	e7ea      	b.n	80025ba <quorem+0xee>
 80025e4:	2000      	movs	r0, #0
 80025e6:	e7ee      	b.n	80025c6 <quorem+0xfa>

080025e8 <_dtoa_r>:
 80025e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ec:	4616      	mov	r6, r2
 80025ee:	461f      	mov	r7, r3
 80025f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80025f2:	b095      	sub	sp, #84	; 0x54
 80025f4:	4604      	mov	r4, r0
 80025f6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80025fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80025fe:	b93d      	cbnz	r5, 8002610 <_dtoa_r+0x28>
 8002600:	2010      	movs	r0, #16
 8002602:	f000 fe7d 	bl	8003300 <malloc>
 8002606:	6260      	str	r0, [r4, #36]	; 0x24
 8002608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800260c:	6005      	str	r5, [r0, #0]
 800260e:	60c5      	str	r5, [r0, #12]
 8002610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	b151      	cbz	r1, 800262c <_dtoa_r+0x44>
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	2301      	movs	r3, #1
 800261a:	4093      	lsls	r3, r2
 800261c:	604a      	str	r2, [r1, #4]
 800261e:	608b      	str	r3, [r1, #8]
 8002620:	4620      	mov	r0, r4
 8002622:	f000 fec2 	bl	80033aa <_Bfree>
 8002626:	2200      	movs	r2, #0
 8002628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	1e3b      	subs	r3, r7, #0
 800262e:	bfaf      	iteee	ge
 8002630:	2300      	movge	r3, #0
 8002632:	2201      	movlt	r2, #1
 8002634:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002638:	9303      	strlt	r3, [sp, #12]
 800263a:	bfac      	ite	ge
 800263c:	f8c8 3000 	strge.w	r3, [r8]
 8002640:	f8c8 2000 	strlt.w	r2, [r8]
 8002644:	4bae      	ldr	r3, [pc, #696]	; (8002900 <_dtoa_r+0x318>)
 8002646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800264a:	ea33 0308 	bics.w	r3, r3, r8
 800264e:	d11b      	bne.n	8002688 <_dtoa_r+0xa0>
 8002650:	f242 730f 	movw	r3, #9999	; 0x270f
 8002654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	9b02      	ldr	r3, [sp, #8]
 800265a:	b923      	cbnz	r3, 8002666 <_dtoa_r+0x7e>
 800265c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002660:	2800      	cmp	r0, #0
 8002662:	f000 8545 	beq.w	80030f0 <_dtoa_r+0xb08>
 8002666:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002668:	b953      	cbnz	r3, 8002680 <_dtoa_r+0x98>
 800266a:	4ba6      	ldr	r3, [pc, #664]	; (8002904 <_dtoa_r+0x31c>)
 800266c:	e021      	b.n	80026b2 <_dtoa_r+0xca>
 800266e:	4ba6      	ldr	r3, [pc, #664]	; (8002908 <_dtoa_r+0x320>)
 8002670:	9306      	str	r3, [sp, #24]
 8002672:	3308      	adds	r3, #8
 8002674:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	9806      	ldr	r0, [sp, #24]
 800267a:	b015      	add	sp, #84	; 0x54
 800267c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002680:	4ba0      	ldr	r3, [pc, #640]	; (8002904 <_dtoa_r+0x31c>)
 8002682:	9306      	str	r3, [sp, #24]
 8002684:	3303      	adds	r3, #3
 8002686:	e7f5      	b.n	8002674 <_dtoa_r+0x8c>
 8002688:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	2300      	movs	r3, #0
 8002690:	4630      	mov	r0, r6
 8002692:	4639      	mov	r1, r7
 8002694:	f7fe f988 	bl	80009a8 <__aeabi_dcmpeq>
 8002698:	4682      	mov	sl, r0
 800269a:	b160      	cbz	r0, 80026b6 <_dtoa_r+0xce>
 800269c:	2301      	movs	r3, #1
 800269e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8520 	beq.w	80030ea <_dtoa_r+0xb02>
 80026aa:	4b98      	ldr	r3, [pc, #608]	; (800290c <_dtoa_r+0x324>)
 80026ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	9306      	str	r3, [sp, #24]
 80026b4:	e7e0      	b.n	8002678 <_dtoa_r+0x90>
 80026b6:	ab12      	add	r3, sp, #72	; 0x48
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	ab13      	add	r3, sp, #76	; 0x4c
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	4632      	mov	r2, r6
 80026c0:	463b      	mov	r3, r7
 80026c2:	4620      	mov	r0, r4
 80026c4:	f001 f8ca 	bl	800385c <__d2b>
 80026c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80026cc:	4683      	mov	fp, r0
 80026ce:	2d00      	cmp	r5, #0
 80026d0:	d07d      	beq.n	80027ce <_dtoa_r+0x1e6>
 80026d2:	46b0      	mov	r8, r6
 80026d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80026d8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80026dc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80026e0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80026e4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80026e8:	2200      	movs	r2, #0
 80026ea:	4b89      	ldr	r3, [pc, #548]	; (8002910 <_dtoa_r+0x328>)
 80026ec:	4640      	mov	r0, r8
 80026ee:	4649      	mov	r1, r9
 80026f0:	f7fd fd3a 	bl	8000168 <__aeabi_dsub>
 80026f4:	a37c      	add	r3, pc, #496	; (adr r3, 80028e8 <_dtoa_r+0x300>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fd feed 	bl	80004d8 <__aeabi_dmul>
 80026fe:	a37c      	add	r3, pc, #496	; (adr r3, 80028f0 <_dtoa_r+0x308>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fd fd32 	bl	800016c <__adddf3>
 8002708:	4606      	mov	r6, r0
 800270a:	4628      	mov	r0, r5
 800270c:	460f      	mov	r7, r1
 800270e:	f7fd fe79 	bl	8000404 <__aeabi_i2d>
 8002712:	a379      	add	r3, pc, #484	; (adr r3, 80028f8 <_dtoa_r+0x310>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd fede 	bl	80004d8 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4630      	mov	r0, r6
 8002722:	4639      	mov	r1, r7
 8002724:	f7fd fd22 	bl	800016c <__adddf3>
 8002728:	4606      	mov	r6, r0
 800272a:	460f      	mov	r7, r1
 800272c:	f7fe f984 	bl	8000a38 <__aeabi_d2iz>
 8002730:	2200      	movs	r2, #0
 8002732:	4682      	mov	sl, r0
 8002734:	2300      	movs	r3, #0
 8002736:	4630      	mov	r0, r6
 8002738:	4639      	mov	r1, r7
 800273a:	f7fe f93f 	bl	80009bc <__aeabi_dcmplt>
 800273e:	b148      	cbz	r0, 8002754 <_dtoa_r+0x16c>
 8002740:	4650      	mov	r0, sl
 8002742:	f7fd fe5f 	bl	8000404 <__aeabi_i2d>
 8002746:	4632      	mov	r2, r6
 8002748:	463b      	mov	r3, r7
 800274a:	f7fe f92d 	bl	80009a8 <__aeabi_dcmpeq>
 800274e:	b908      	cbnz	r0, 8002754 <_dtoa_r+0x16c>
 8002750:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002754:	f1ba 0f16 	cmp.w	sl, #22
 8002758:	d85a      	bhi.n	8002810 <_dtoa_r+0x228>
 800275a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800275e:	496d      	ldr	r1, [pc, #436]	; (8002914 <_dtoa_r+0x32c>)
 8002760:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002768:	f7fe f946 	bl	80009f8 <__aeabi_dcmpgt>
 800276c:	2800      	cmp	r0, #0
 800276e:	d051      	beq.n	8002814 <_dtoa_r+0x22c>
 8002770:	2300      	movs	r3, #0
 8002772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002776:	930d      	str	r3, [sp, #52]	; 0x34
 8002778:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800277a:	1b5d      	subs	r5, r3, r5
 800277c:	1e6b      	subs	r3, r5, #1
 800277e:	9307      	str	r3, [sp, #28]
 8002780:	bf43      	ittte	mi
 8002782:	2300      	movmi	r3, #0
 8002784:	f1c5 0901 	rsbmi	r9, r5, #1
 8002788:	9307      	strmi	r3, [sp, #28]
 800278a:	f04f 0900 	movpl.w	r9, #0
 800278e:	f1ba 0f00 	cmp.w	sl, #0
 8002792:	db41      	blt.n	8002818 <_dtoa_r+0x230>
 8002794:	9b07      	ldr	r3, [sp, #28]
 8002796:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800279a:	4453      	add	r3, sl
 800279c:	9307      	str	r3, [sp, #28]
 800279e:	2300      	movs	r3, #0
 80027a0:	9308      	str	r3, [sp, #32]
 80027a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	f200 808f 	bhi.w	80028c8 <_dtoa_r+0x2e0>
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	bfc4      	itt	gt
 80027ae:	3b04      	subgt	r3, #4
 80027b0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80027b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80027b4:	bfc8      	it	gt
 80027b6:	2500      	movgt	r5, #0
 80027b8:	f1a3 0302 	sub.w	r3, r3, #2
 80027bc:	bfd8      	it	le
 80027be:	2501      	movle	r5, #1
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	f200 808d 	bhi.w	80028e0 <_dtoa_r+0x2f8>
 80027c6:	e8df f003 	tbb	[pc, r3]
 80027ca:	7d7b      	.short	0x7d7b
 80027cc:	6f2f      	.short	0x6f2f
 80027ce:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80027d2:	441d      	add	r5, r3
 80027d4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80027d8:	2820      	cmp	r0, #32
 80027da:	dd13      	ble.n	8002804 <_dtoa_r+0x21c>
 80027dc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80027e0:	9b02      	ldr	r3, [sp, #8]
 80027e2:	fa08 f800 	lsl.w	r8, r8, r0
 80027e6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80027ea:	fa23 f000 	lsr.w	r0, r3, r0
 80027ee:	ea48 0000 	orr.w	r0, r8, r0
 80027f2:	f7fd fdf7 	bl	80003e4 <__aeabi_ui2d>
 80027f6:	2301      	movs	r3, #1
 80027f8:	4680      	mov	r8, r0
 80027fa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80027fe:	3d01      	subs	r5, #1
 8002800:	9310      	str	r3, [sp, #64]	; 0x40
 8002802:	e771      	b.n	80026e8 <_dtoa_r+0x100>
 8002804:	9b02      	ldr	r3, [sp, #8]
 8002806:	f1c0 0020 	rsb	r0, r0, #32
 800280a:	fa03 f000 	lsl.w	r0, r3, r0
 800280e:	e7f0      	b.n	80027f2 <_dtoa_r+0x20a>
 8002810:	2301      	movs	r3, #1
 8002812:	e7b0      	b.n	8002776 <_dtoa_r+0x18e>
 8002814:	900d      	str	r0, [sp, #52]	; 0x34
 8002816:	e7af      	b.n	8002778 <_dtoa_r+0x190>
 8002818:	f1ca 0300 	rsb	r3, sl, #0
 800281c:	9308      	str	r3, [sp, #32]
 800281e:	2300      	movs	r3, #0
 8002820:	eba9 090a 	sub.w	r9, r9, sl
 8002824:	930c      	str	r3, [sp, #48]	; 0x30
 8002826:	e7bc      	b.n	80027a2 <_dtoa_r+0x1ba>
 8002828:	2301      	movs	r3, #1
 800282a:	9309      	str	r3, [sp, #36]	; 0x24
 800282c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800282e:	2b00      	cmp	r3, #0
 8002830:	dd74      	ble.n	800291c <_dtoa_r+0x334>
 8002832:	4698      	mov	r8, r3
 8002834:	9304      	str	r3, [sp, #16]
 8002836:	2200      	movs	r2, #0
 8002838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800283a:	6072      	str	r2, [r6, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	f102 0014 	add.w	r0, r2, #20
 8002842:	4298      	cmp	r0, r3
 8002844:	6871      	ldr	r1, [r6, #4]
 8002846:	d96e      	bls.n	8002926 <_dtoa_r+0x33e>
 8002848:	4620      	mov	r0, r4
 800284a:	f000 fd7a 	bl	8003342 <_Balloc>
 800284e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002850:	6030      	str	r0, [r6, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b8 0f0e 	cmp.w	r8, #14
 8002858:	9306      	str	r3, [sp, #24]
 800285a:	f200 80ed 	bhi.w	8002a38 <_dtoa_r+0x450>
 800285e:	2d00      	cmp	r5, #0
 8002860:	f000 80ea 	beq.w	8002a38 <_dtoa_r+0x450>
 8002864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002868:	f1ba 0f00 	cmp.w	sl, #0
 800286c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002870:	dd77      	ble.n	8002962 <_dtoa_r+0x37a>
 8002872:	4a28      	ldr	r2, [pc, #160]	; (8002914 <_dtoa_r+0x32c>)
 8002874:	f00a 030f 	and.w	r3, sl, #15
 8002878:	ea4f 162a 	mov.w	r6, sl, asr #4
 800287c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002880:	06f0      	lsls	r0, r6, #27
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800288a:	d568      	bpl.n	800295e <_dtoa_r+0x376>
 800288c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <_dtoa_r+0x330>)
 8002892:	2503      	movs	r5, #3
 8002894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002898:	f7fd ff48 	bl	800072c <__aeabi_ddiv>
 800289c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028a0:	f006 060f 	and.w	r6, r6, #15
 80028a4:	4f1c      	ldr	r7, [pc, #112]	; (8002918 <_dtoa_r+0x330>)
 80028a6:	e04f      	b.n	8002948 <_dtoa_r+0x360>
 80028a8:	2301      	movs	r3, #1
 80028aa:	9309      	str	r3, [sp, #36]	; 0x24
 80028ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80028ae:	4453      	add	r3, sl
 80028b0:	f103 0801 	add.w	r8, r3, #1
 80028b4:	9304      	str	r3, [sp, #16]
 80028b6:	4643      	mov	r3, r8
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	bfb8      	it	lt
 80028bc:	2301      	movlt	r3, #1
 80028be:	e7ba      	b.n	8002836 <_dtoa_r+0x24e>
 80028c0:	2300      	movs	r3, #0
 80028c2:	e7b2      	b.n	800282a <_dtoa_r+0x242>
 80028c4:	2300      	movs	r3, #0
 80028c6:	e7f0      	b.n	80028aa <_dtoa_r+0x2c2>
 80028c8:	2501      	movs	r5, #1
 80028ca:	2300      	movs	r3, #0
 80028cc:	9509      	str	r5, [sp, #36]	; 0x24
 80028ce:	931e      	str	r3, [sp, #120]	; 0x78
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	2200      	movs	r2, #0
 80028d6:	9304      	str	r3, [sp, #16]
 80028d8:	4698      	mov	r8, r3
 80028da:	2312      	movs	r3, #18
 80028dc:	921f      	str	r2, [sp, #124]	; 0x7c
 80028de:	e7aa      	b.n	8002836 <_dtoa_r+0x24e>
 80028e0:	2301      	movs	r3, #1
 80028e2:	9309      	str	r3, [sp, #36]	; 0x24
 80028e4:	e7f4      	b.n	80028d0 <_dtoa_r+0x2e8>
 80028e6:	bf00      	nop
 80028e8:	636f4361 	.word	0x636f4361
 80028ec:	3fd287a7 	.word	0x3fd287a7
 80028f0:	8b60c8b3 	.word	0x8b60c8b3
 80028f4:	3fc68a28 	.word	0x3fc68a28
 80028f8:	509f79fb 	.word	0x509f79fb
 80028fc:	3fd34413 	.word	0x3fd34413
 8002900:	7ff00000 	.word	0x7ff00000
 8002904:	080042e1 	.word	0x080042e1
 8002908:	080042d8 	.word	0x080042d8
 800290c:	080042b5 	.word	0x080042b5
 8002910:	3ff80000 	.word	0x3ff80000
 8002914:	08004370 	.word	0x08004370
 8002918:	08004348 	.word	0x08004348
 800291c:	2301      	movs	r3, #1
 800291e:	9304      	str	r3, [sp, #16]
 8002920:	4698      	mov	r8, r3
 8002922:	461a      	mov	r2, r3
 8002924:	e7da      	b.n	80028dc <_dtoa_r+0x2f4>
 8002926:	3101      	adds	r1, #1
 8002928:	6071      	str	r1, [r6, #4]
 800292a:	0052      	lsls	r2, r2, #1
 800292c:	e787      	b.n	800283e <_dtoa_r+0x256>
 800292e:	07f1      	lsls	r1, r6, #31
 8002930:	d508      	bpl.n	8002944 <_dtoa_r+0x35c>
 8002932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800293a:	f7fd fdcd 	bl	80004d8 <__aeabi_dmul>
 800293e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002942:	3501      	adds	r5, #1
 8002944:	1076      	asrs	r6, r6, #1
 8002946:	3708      	adds	r7, #8
 8002948:	2e00      	cmp	r6, #0
 800294a:	d1f0      	bne.n	800292e <_dtoa_r+0x346>
 800294c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002954:	f7fd feea 	bl	800072c <__aeabi_ddiv>
 8002958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800295c:	e01b      	b.n	8002996 <_dtoa_r+0x3ae>
 800295e:	2502      	movs	r5, #2
 8002960:	e7a0      	b.n	80028a4 <_dtoa_r+0x2bc>
 8002962:	f000 80a4 	beq.w	8002aae <_dtoa_r+0x4c6>
 8002966:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800296a:	f1ca 0600 	rsb	r6, sl, #0
 800296e:	4ba0      	ldr	r3, [pc, #640]	; (8002bf0 <_dtoa_r+0x608>)
 8002970:	f006 020f 	and.w	r2, r6, #15
 8002974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd fdac 	bl	80004d8 <__aeabi_dmul>
 8002980:	2502      	movs	r5, #2
 8002982:	2300      	movs	r3, #0
 8002984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002988:	4f9a      	ldr	r7, [pc, #616]	; (8002bf4 <_dtoa_r+0x60c>)
 800298a:	1136      	asrs	r6, r6, #4
 800298c:	2e00      	cmp	r6, #0
 800298e:	f040 8083 	bne.w	8002a98 <_dtoa_r+0x4b0>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e0      	bne.n	8002958 <_dtoa_r+0x370>
 8002996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 808a 	beq.w	8002ab2 <_dtoa_r+0x4ca>
 800299e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80029a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80029a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80029aa:	2200      	movs	r2, #0
 80029ac:	4b92      	ldr	r3, [pc, #584]	; (8002bf8 <_dtoa_r+0x610>)
 80029ae:	f7fe f805 	bl	80009bc <__aeabi_dcmplt>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d07d      	beq.n	8002ab2 <_dtoa_r+0x4ca>
 80029b6:	f1b8 0f00 	cmp.w	r8, #0
 80029ba:	d07a      	beq.n	8002ab2 <_dtoa_r+0x4ca>
 80029bc:	9b04      	ldr	r3, [sp, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	dd36      	ble.n	8002a30 <_dtoa_r+0x448>
 80029c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80029c6:	2200      	movs	r2, #0
 80029c8:	4b8c      	ldr	r3, [pc, #560]	; (8002bfc <_dtoa_r+0x614>)
 80029ca:	f7fd fd85 	bl	80004d8 <__aeabi_dmul>
 80029ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029d2:	9e04      	ldr	r6, [sp, #16]
 80029d4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80029d8:	3501      	adds	r5, #1
 80029da:	4628      	mov	r0, r5
 80029dc:	f7fd fd12 	bl	8000404 <__aeabi_i2d>
 80029e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80029e4:	f7fd fd78 	bl	80004d8 <__aeabi_dmul>
 80029e8:	2200      	movs	r2, #0
 80029ea:	4b85      	ldr	r3, [pc, #532]	; (8002c00 <_dtoa_r+0x618>)
 80029ec:	f7fd fbbe 	bl	800016c <__adddf3>
 80029f0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80029f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80029f8:	950b      	str	r5, [sp, #44]	; 0x2c
 80029fa:	2e00      	cmp	r6, #0
 80029fc:	d15c      	bne.n	8002ab8 <_dtoa_r+0x4d0>
 80029fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <_dtoa_r+0x61c>)
 8002a06:	f7fd fbaf 	bl	8000168 <__aeabi_dsub>
 8002a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a12:	f7fd fff1 	bl	80009f8 <__aeabi_dcmpgt>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	f040 8281 	bne.w	8002f1e <_dtoa_r+0x936>
 8002a1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a22:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002a26:	f7fd ffc9 	bl	80009bc <__aeabi_dcmplt>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	f040 8275 	bne.w	8002f1a <_dtoa_r+0x932>
 8002a30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002a34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f2c0 814b 	blt.w	8002cd6 <_dtoa_r+0x6ee>
 8002a40:	f1ba 0f0e 	cmp.w	sl, #14
 8002a44:	f300 8147 	bgt.w	8002cd6 <_dtoa_r+0x6ee>
 8002a48:	4b69      	ldr	r3, [pc, #420]	; (8002bf0 <_dtoa_r+0x608>)
 8002a4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f280 80d7 	bge.w	8002c0c <_dtoa_r+0x624>
 8002a5e:	f1b8 0f00 	cmp.w	r8, #0
 8002a62:	f300 80d3 	bgt.w	8002c0c <_dtoa_r+0x624>
 8002a66:	f040 8257 	bne.w	8002f18 <_dtoa_r+0x930>
 8002a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4b64      	ldr	r3, [pc, #400]	; (8002c04 <_dtoa_r+0x61c>)
 8002a72:	f7fd fd31 	bl	80004d8 <__aeabi_dmul>
 8002a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a7a:	f7fd ffb3 	bl	80009e4 <__aeabi_dcmpge>
 8002a7e:	4646      	mov	r6, r8
 8002a80:	4647      	mov	r7, r8
 8002a82:	2800      	cmp	r0, #0
 8002a84:	f040 822d 	bne.w	8002ee2 <_dtoa_r+0x8fa>
 8002a88:	9b06      	ldr	r3, [sp, #24]
 8002a8a:	9a06      	ldr	r2, [sp, #24]
 8002a8c:	1c5d      	adds	r5, r3, #1
 8002a8e:	2331      	movs	r3, #49	; 0x31
 8002a90:	f10a 0a01 	add.w	sl, sl, #1
 8002a94:	7013      	strb	r3, [r2, #0]
 8002a96:	e228      	b.n	8002eea <_dtoa_r+0x902>
 8002a98:	07f2      	lsls	r2, r6, #31
 8002a9a:	d505      	bpl.n	8002aa8 <_dtoa_r+0x4c0>
 8002a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa0:	f7fd fd1a 	bl	80004d8 <__aeabi_dmul>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	3501      	adds	r5, #1
 8002aa8:	1076      	asrs	r6, r6, #1
 8002aaa:	3708      	adds	r7, #8
 8002aac:	e76e      	b.n	800298c <_dtoa_r+0x3a4>
 8002aae:	2502      	movs	r5, #2
 8002ab0:	e771      	b.n	8002996 <_dtoa_r+0x3ae>
 8002ab2:	4657      	mov	r7, sl
 8002ab4:	4646      	mov	r6, r8
 8002ab6:	e790      	b.n	80029da <_dtoa_r+0x3f2>
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <_dtoa_r+0x608>)
 8002aba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002abe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d048      	beq.n	8002b5a <_dtoa_r+0x572>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	2000      	movs	r0, #0
 8002ace:	494e      	ldr	r1, [pc, #312]	; (8002c08 <_dtoa_r+0x620>)
 8002ad0:	f7fd fe2c 	bl	800072c <__aeabi_ddiv>
 8002ad4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ad8:	f7fd fb46 	bl	8000168 <__aeabi_dsub>
 8002adc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002ae0:	9d06      	ldr	r5, [sp, #24]
 8002ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ae6:	f7fd ffa7 	bl	8000a38 <__aeabi_d2iz>
 8002aea:	9011      	str	r0, [sp, #68]	; 0x44
 8002aec:	f7fd fc8a 	bl	8000404 <__aeabi_i2d>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002af8:	f7fd fb36 	bl	8000168 <__aeabi_dsub>
 8002afc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b02:	3330      	adds	r3, #48	; 0x30
 8002b04:	f805 3b01 	strb.w	r3, [r5], #1
 8002b08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b0c:	f7fd ff56 	bl	80009bc <__aeabi_dcmplt>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d163      	bne.n	8002bdc <_dtoa_r+0x5f4>
 8002b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b18:	2000      	movs	r0, #0
 8002b1a:	4937      	ldr	r1, [pc, #220]	; (8002bf8 <_dtoa_r+0x610>)
 8002b1c:	f7fd fb24 	bl	8000168 <__aeabi_dsub>
 8002b20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b24:	f7fd ff4a 	bl	80009bc <__aeabi_dcmplt>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	f040 80b5 	bne.w	8002c98 <_dtoa_r+0x6b0>
 8002b2e:	9b06      	ldr	r3, [sp, #24]
 8002b30:	1aeb      	subs	r3, r5, r3
 8002b32:	429e      	cmp	r6, r3
 8002b34:	f77f af7c 	ble.w	8002a30 <_dtoa_r+0x448>
 8002b38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <_dtoa_r+0x614>)
 8002b40:	f7fd fcca 	bl	80004d8 <__aeabi_dmul>
 8002b44:	2200      	movs	r2, #0
 8002b46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <_dtoa_r+0x614>)
 8002b50:	f7fd fcc2 	bl	80004d8 <__aeabi_dmul>
 8002b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b58:	e7c3      	b.n	8002ae2 <_dtoa_r+0x4fa>
 8002b5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b5e:	f7fd fcbb 	bl	80004d8 <__aeabi_dmul>
 8002b62:	9b06      	ldr	r3, [sp, #24]
 8002b64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002b68:	199d      	adds	r5, r3, r6
 8002b6a:	461e      	mov	r6, r3
 8002b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b70:	f7fd ff62 	bl	8000a38 <__aeabi_d2iz>
 8002b74:	9011      	str	r0, [sp, #68]	; 0x44
 8002b76:	f7fd fc45 	bl	8000404 <__aeabi_i2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b82:	f7fd faf1 	bl	8000168 <__aeabi_dsub>
 8002b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b8c:	3330      	adds	r3, #48	; 0x30
 8002b8e:	f806 3b01 	strb.w	r3, [r6], #1
 8002b92:	42ae      	cmp	r6, r5
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	d124      	bne.n	8002be4 <_dtoa_r+0x5fc>
 8002b9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <_dtoa_r+0x620>)
 8002ba0:	f7fd fae4 	bl	800016c <__adddf3>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bac:	f7fd ff24 	bl	80009f8 <__aeabi_dcmpgt>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d171      	bne.n	8002c98 <_dtoa_r+0x6b0>
 8002bb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002bb8:	2000      	movs	r0, #0
 8002bba:	4913      	ldr	r1, [pc, #76]	; (8002c08 <_dtoa_r+0x620>)
 8002bbc:	f7fd fad4 	bl	8000168 <__aeabi_dsub>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bc8:	f7fd fef8 	bl	80009bc <__aeabi_dcmplt>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	f43f af2f 	beq.w	8002a30 <_dtoa_r+0x448>
 8002bd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002bd6:	1e6a      	subs	r2, r5, #1
 8002bd8:	2b30      	cmp	r3, #48	; 0x30
 8002bda:	d001      	beq.n	8002be0 <_dtoa_r+0x5f8>
 8002bdc:	46ba      	mov	sl, r7
 8002bde:	e04a      	b.n	8002c76 <_dtoa_r+0x68e>
 8002be0:	4615      	mov	r5, r2
 8002be2:	e7f6      	b.n	8002bd2 <_dtoa_r+0x5ea>
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <_dtoa_r+0x614>)
 8002be6:	f7fd fc77 	bl	80004d8 <__aeabi_dmul>
 8002bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002bee:	e7bd      	b.n	8002b6c <_dtoa_r+0x584>
 8002bf0:	08004370 	.word	0x08004370
 8002bf4:	08004348 	.word	0x08004348
 8002bf8:	3ff00000 	.word	0x3ff00000
 8002bfc:	40240000 	.word	0x40240000
 8002c00:	401c0000 	.word	0x401c0000
 8002c04:	40140000 	.word	0x40140000
 8002c08:	3fe00000 	.word	0x3fe00000
 8002c0c:	9d06      	ldr	r5, [sp, #24]
 8002c0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c16:	4630      	mov	r0, r6
 8002c18:	4639      	mov	r1, r7
 8002c1a:	f7fd fd87 	bl	800072c <__aeabi_ddiv>
 8002c1e:	f7fd ff0b 	bl	8000a38 <__aeabi_d2iz>
 8002c22:	4681      	mov	r9, r0
 8002c24:	f7fd fbee 	bl	8000404 <__aeabi_i2d>
 8002c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c2c:	f7fd fc54 	bl	80004d8 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4630      	mov	r0, r6
 8002c36:	4639      	mov	r1, r7
 8002c38:	f7fd fa96 	bl	8000168 <__aeabi_dsub>
 8002c3c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8002c40:	f805 6b01 	strb.w	r6, [r5], #1
 8002c44:	9e06      	ldr	r6, [sp, #24]
 8002c46:	4602      	mov	r2, r0
 8002c48:	1bae      	subs	r6, r5, r6
 8002c4a:	45b0      	cmp	r8, r6
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	d135      	bne.n	8002cbc <_dtoa_r+0x6d4>
 8002c50:	f7fd fa8c 	bl	800016c <__adddf3>
 8002c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c58:	4606      	mov	r6, r0
 8002c5a:	460f      	mov	r7, r1
 8002c5c:	f7fd fecc 	bl	80009f8 <__aeabi_dcmpgt>
 8002c60:	b9c8      	cbnz	r0, 8002c96 <_dtoa_r+0x6ae>
 8002c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c66:	4630      	mov	r0, r6
 8002c68:	4639      	mov	r1, r7
 8002c6a:	f7fd fe9d 	bl	80009a8 <__aeabi_dcmpeq>
 8002c6e:	b110      	cbz	r0, 8002c76 <_dtoa_r+0x68e>
 8002c70:	f019 0f01 	tst.w	r9, #1
 8002c74:	d10f      	bne.n	8002c96 <_dtoa_r+0x6ae>
 8002c76:	4659      	mov	r1, fp
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f000 fb96 	bl	80033aa <_Bfree>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002c82:	702b      	strb	r3, [r5, #0]
 8002c84:	f10a 0301 	add.w	r3, sl, #1
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f43f acf3 	beq.w	8002678 <_dtoa_r+0x90>
 8002c92:	601d      	str	r5, [r3, #0]
 8002c94:	e4f0      	b.n	8002678 <_dtoa_r+0x90>
 8002c96:	4657      	mov	r7, sl
 8002c98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002c9c:	1e6b      	subs	r3, r5, #1
 8002c9e:	2a39      	cmp	r2, #57	; 0x39
 8002ca0:	d106      	bne.n	8002cb0 <_dtoa_r+0x6c8>
 8002ca2:	9a06      	ldr	r2, [sp, #24]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <_dtoa_r+0x6d0>
 8002ca8:	2330      	movs	r3, #48	; 0x30
 8002caa:	7013      	strb	r3, [r2, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	3701      	adds	r7, #1
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	3201      	adds	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e791      	b.n	8002bdc <_dtoa_r+0x5f4>
 8002cb8:	461d      	mov	r5, r3
 8002cba:	e7ed      	b.n	8002c98 <_dtoa_r+0x6b0>
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4b99      	ldr	r3, [pc, #612]	; (8002f24 <_dtoa_r+0x93c>)
 8002cc0:	f7fd fc0a 	bl	80004d8 <__aeabi_dmul>
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4606      	mov	r6, r0
 8002cca:	460f      	mov	r7, r1
 8002ccc:	f7fd fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d09e      	beq.n	8002c12 <_dtoa_r+0x62a>
 8002cd4:	e7cf      	b.n	8002c76 <_dtoa_r+0x68e>
 8002cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cd8:	2a00      	cmp	r2, #0
 8002cda:	f000 8088 	beq.w	8002dee <_dtoa_r+0x806>
 8002cde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002ce0:	2a01      	cmp	r2, #1
 8002ce2:	dc6d      	bgt.n	8002dc0 <_dtoa_r+0x7d8>
 8002ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002ce6:	2a00      	cmp	r2, #0
 8002ce8:	d066      	beq.n	8002db8 <_dtoa_r+0x7d0>
 8002cea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002cee:	464d      	mov	r5, r9
 8002cf0:	9e08      	ldr	r6, [sp, #32]
 8002cf2:	9a07      	ldr	r2, [sp, #28]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	441a      	add	r2, r3
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	4499      	add	r9, r3
 8002cfc:	9207      	str	r2, [sp, #28]
 8002cfe:	f000 fbf4 	bl	80034ea <__i2b>
 8002d02:	4607      	mov	r7, r0
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	dd0b      	ble.n	8002d20 <_dtoa_r+0x738>
 8002d08:	9b07      	ldr	r3, [sp, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	dd08      	ble.n	8002d20 <_dtoa_r+0x738>
 8002d0e:	42ab      	cmp	r3, r5
 8002d10:	bfa8      	it	ge
 8002d12:	462b      	movge	r3, r5
 8002d14:	9a07      	ldr	r2, [sp, #28]
 8002d16:	eba9 0903 	sub.w	r9, r9, r3
 8002d1a:	1aed      	subs	r5, r5, r3
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	9307      	str	r3, [sp, #28]
 8002d20:	9b08      	ldr	r3, [sp, #32]
 8002d22:	b1eb      	cbz	r3, 8002d60 <_dtoa_r+0x778>
 8002d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d065      	beq.n	8002df6 <_dtoa_r+0x80e>
 8002d2a:	b18e      	cbz	r6, 8002d50 <_dtoa_r+0x768>
 8002d2c:	4639      	mov	r1, r7
 8002d2e:	4632      	mov	r2, r6
 8002d30:	4620      	mov	r0, r4
 8002d32:	f000 fc79 	bl	8003628 <__pow5mult>
 8002d36:	465a      	mov	r2, fp
 8002d38:	4601      	mov	r1, r0
 8002d3a:	4607      	mov	r7, r0
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f000 fbdd 	bl	80034fc <__multiply>
 8002d42:	4659      	mov	r1, fp
 8002d44:	900a      	str	r0, [sp, #40]	; 0x28
 8002d46:	4620      	mov	r0, r4
 8002d48:	f000 fb2f 	bl	80033aa <_Bfree>
 8002d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d4e:	469b      	mov	fp, r3
 8002d50:	9b08      	ldr	r3, [sp, #32]
 8002d52:	1b9a      	subs	r2, r3, r6
 8002d54:	d004      	beq.n	8002d60 <_dtoa_r+0x778>
 8002d56:	4659      	mov	r1, fp
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f000 fc65 	bl	8003628 <__pow5mult>
 8002d5e:	4683      	mov	fp, r0
 8002d60:	2101      	movs	r1, #1
 8002d62:	4620      	mov	r0, r4
 8002d64:	f000 fbc1 	bl	80034ea <__i2b>
 8002d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 81c6 	beq.w	80030fe <_dtoa_r+0xb16>
 8002d72:	461a      	mov	r2, r3
 8002d74:	4601      	mov	r1, r0
 8002d76:	4620      	mov	r0, r4
 8002d78:	f000 fc56 	bl	8003628 <__pow5mult>
 8002d7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d7e:	4606      	mov	r6, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	dc3e      	bgt.n	8002e02 <_dtoa_r+0x81a>
 8002d84:	9b02      	ldr	r3, [sp, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d137      	bne.n	8002dfa <_dtoa_r+0x812>
 8002d8a:	9b03      	ldr	r3, [sp, #12]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d134      	bne.n	8002dfe <_dtoa_r+0x816>
 8002d94:	9b03      	ldr	r3, [sp, #12]
 8002d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d9a:	0d1b      	lsrs	r3, r3, #20
 8002d9c:	051b      	lsls	r3, r3, #20
 8002d9e:	b12b      	cbz	r3, 8002dac <_dtoa_r+0x7c4>
 8002da0:	9b07      	ldr	r3, [sp, #28]
 8002da2:	f109 0901 	add.w	r9, r9, #1
 8002da6:	3301      	adds	r3, #1
 8002da8:	9307      	str	r3, [sp, #28]
 8002daa:	2301      	movs	r3, #1
 8002dac:	9308      	str	r3, [sp, #32]
 8002dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d128      	bne.n	8002e06 <_dtoa_r+0x81e>
 8002db4:	2001      	movs	r0, #1
 8002db6:	e02e      	b.n	8002e16 <_dtoa_r+0x82e>
 8002db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002dba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002dbe:	e796      	b.n	8002cee <_dtoa_r+0x706>
 8002dc0:	9b08      	ldr	r3, [sp, #32]
 8002dc2:	f108 36ff 	add.w	r6, r8, #4294967295
 8002dc6:	42b3      	cmp	r3, r6
 8002dc8:	bfb7      	itett	lt
 8002dca:	9b08      	ldrlt	r3, [sp, #32]
 8002dcc:	1b9e      	subge	r6, r3, r6
 8002dce:	1af2      	sublt	r2, r6, r3
 8002dd0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8002dd2:	bfbf      	itttt	lt
 8002dd4:	9608      	strlt	r6, [sp, #32]
 8002dd6:	189b      	addlt	r3, r3, r2
 8002dd8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8002dda:	2600      	movlt	r6, #0
 8002ddc:	f1b8 0f00 	cmp.w	r8, #0
 8002de0:	bfb9      	ittee	lt
 8002de2:	eba9 0508 	sublt.w	r5, r9, r8
 8002de6:	2300      	movlt	r3, #0
 8002de8:	464d      	movge	r5, r9
 8002dea:	4643      	movge	r3, r8
 8002dec:	e781      	b.n	8002cf2 <_dtoa_r+0x70a>
 8002dee:	9e08      	ldr	r6, [sp, #32]
 8002df0:	464d      	mov	r5, r9
 8002df2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002df4:	e786      	b.n	8002d04 <_dtoa_r+0x71c>
 8002df6:	9a08      	ldr	r2, [sp, #32]
 8002df8:	e7ad      	b.n	8002d56 <_dtoa_r+0x76e>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e7d6      	b.n	8002dac <_dtoa_r+0x7c4>
 8002dfe:	9b02      	ldr	r3, [sp, #8]
 8002e00:	e7d4      	b.n	8002dac <_dtoa_r+0x7c4>
 8002e02:	2300      	movs	r3, #0
 8002e04:	9308      	str	r3, [sp, #32]
 8002e06:	6933      	ldr	r3, [r6, #16]
 8002e08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002e0c:	6918      	ldr	r0, [r3, #16]
 8002e0e:	f000 fb1e 	bl	800344e <__hi0bits>
 8002e12:	f1c0 0020 	rsb	r0, r0, #32
 8002e16:	9b07      	ldr	r3, [sp, #28]
 8002e18:	4418      	add	r0, r3
 8002e1a:	f010 001f 	ands.w	r0, r0, #31
 8002e1e:	d047      	beq.n	8002eb0 <_dtoa_r+0x8c8>
 8002e20:	f1c0 0320 	rsb	r3, r0, #32
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	dd3b      	ble.n	8002ea0 <_dtoa_r+0x8b8>
 8002e28:	9b07      	ldr	r3, [sp, #28]
 8002e2a:	f1c0 001c 	rsb	r0, r0, #28
 8002e2e:	4481      	add	r9, r0
 8002e30:	4405      	add	r5, r0
 8002e32:	4403      	add	r3, r0
 8002e34:	9307      	str	r3, [sp, #28]
 8002e36:	f1b9 0f00 	cmp.w	r9, #0
 8002e3a:	dd05      	ble.n	8002e48 <_dtoa_r+0x860>
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	464a      	mov	r2, r9
 8002e40:	4620      	mov	r0, r4
 8002e42:	f000 fc3f 	bl	80036c4 <__lshift>
 8002e46:	4683      	mov	fp, r0
 8002e48:	9b07      	ldr	r3, [sp, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	dd05      	ble.n	8002e5a <_dtoa_r+0x872>
 8002e4e:	4631      	mov	r1, r6
 8002e50:	461a      	mov	r2, r3
 8002e52:	4620      	mov	r0, r4
 8002e54:	f000 fc36 	bl	80036c4 <__lshift>
 8002e58:	4606      	mov	r6, r0
 8002e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e5c:	b353      	cbz	r3, 8002eb4 <_dtoa_r+0x8cc>
 8002e5e:	4631      	mov	r1, r6
 8002e60:	4658      	mov	r0, fp
 8002e62:	f000 fc83 	bl	800376c <__mcmp>
 8002e66:	2800      	cmp	r0, #0
 8002e68:	da24      	bge.n	8002eb4 <_dtoa_r+0x8cc>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	220a      	movs	r2, #10
 8002e70:	4620      	mov	r0, r4
 8002e72:	f000 fab1 	bl	80033d8 <__multadd>
 8002e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002e7c:	4683      	mov	fp, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8144 	beq.w	800310c <_dtoa_r+0xb24>
 8002e84:	2300      	movs	r3, #0
 8002e86:	4639      	mov	r1, r7
 8002e88:	220a      	movs	r2, #10
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f000 faa4 	bl	80033d8 <__multadd>
 8002e90:	9b04      	ldr	r3, [sp, #16]
 8002e92:	4607      	mov	r7, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	dc4d      	bgt.n	8002f34 <_dtoa_r+0x94c>
 8002e98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	dd4a      	ble.n	8002f34 <_dtoa_r+0x94c>
 8002e9e:	e011      	b.n	8002ec4 <_dtoa_r+0x8dc>
 8002ea0:	d0c9      	beq.n	8002e36 <_dtoa_r+0x84e>
 8002ea2:	9a07      	ldr	r2, [sp, #28]
 8002ea4:	331c      	adds	r3, #28
 8002ea6:	441a      	add	r2, r3
 8002ea8:	4499      	add	r9, r3
 8002eaa:	441d      	add	r5, r3
 8002eac:	4613      	mov	r3, r2
 8002eae:	e7c1      	b.n	8002e34 <_dtoa_r+0x84c>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	e7f6      	b.n	8002ea2 <_dtoa_r+0x8ba>
 8002eb4:	f1b8 0f00 	cmp.w	r8, #0
 8002eb8:	dc36      	bgt.n	8002f28 <_dtoa_r+0x940>
 8002eba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	dd33      	ble.n	8002f28 <_dtoa_r+0x940>
 8002ec0:	f8cd 8010 	str.w	r8, [sp, #16]
 8002ec4:	9b04      	ldr	r3, [sp, #16]
 8002ec6:	b963      	cbnz	r3, 8002ee2 <_dtoa_r+0x8fa>
 8002ec8:	4631      	mov	r1, r6
 8002eca:	2205      	movs	r2, #5
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f000 fa83 	bl	80033d8 <__multadd>
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	4658      	mov	r0, fp
 8002ed8:	f000 fc48 	bl	800376c <__mcmp>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	f73f add3 	bgt.w	8002a88 <_dtoa_r+0x4a0>
 8002ee2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002ee4:	9d06      	ldr	r5, [sp, #24]
 8002ee6:	ea6f 0a03 	mvn.w	sl, r3
 8002eea:	f04f 0900 	mov.w	r9, #0
 8002eee:	4631      	mov	r1, r6
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f000 fa5a 	bl	80033aa <_Bfree>
 8002ef6:	2f00      	cmp	r7, #0
 8002ef8:	f43f aebd 	beq.w	8002c76 <_dtoa_r+0x68e>
 8002efc:	f1b9 0f00 	cmp.w	r9, #0
 8002f00:	d005      	beq.n	8002f0e <_dtoa_r+0x926>
 8002f02:	45b9      	cmp	r9, r7
 8002f04:	d003      	beq.n	8002f0e <_dtoa_r+0x926>
 8002f06:	4649      	mov	r1, r9
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f000 fa4e 	bl	80033aa <_Bfree>
 8002f0e:	4639      	mov	r1, r7
 8002f10:	4620      	mov	r0, r4
 8002f12:	f000 fa4a 	bl	80033aa <_Bfree>
 8002f16:	e6ae      	b.n	8002c76 <_dtoa_r+0x68e>
 8002f18:	2600      	movs	r6, #0
 8002f1a:	4637      	mov	r7, r6
 8002f1c:	e7e1      	b.n	8002ee2 <_dtoa_r+0x8fa>
 8002f1e:	46ba      	mov	sl, r7
 8002f20:	4637      	mov	r7, r6
 8002f22:	e5b1      	b.n	8002a88 <_dtoa_r+0x4a0>
 8002f24:	40240000 	.word	0x40240000
 8002f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80f3 	beq.w	800311a <_dtoa_r+0xb32>
 8002f34:	2d00      	cmp	r5, #0
 8002f36:	dd05      	ble.n	8002f44 <_dtoa_r+0x95c>
 8002f38:	4639      	mov	r1, r7
 8002f3a:	462a      	mov	r2, r5
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f000 fbc1 	bl	80036c4 <__lshift>
 8002f42:	4607      	mov	r7, r0
 8002f44:	9b08      	ldr	r3, [sp, #32]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d04c      	beq.n	8002fe4 <_dtoa_r+0x9fc>
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f000 f9f8 	bl	8003342 <_Balloc>
 8002f52:	4605      	mov	r5, r0
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	f107 010c 	add.w	r1, r7, #12
 8002f5a:	3202      	adds	r2, #2
 8002f5c:	0092      	lsls	r2, r2, #2
 8002f5e:	300c      	adds	r0, #12
 8002f60:	f000 f9e4 	bl	800332c <memcpy>
 8002f64:	2201      	movs	r2, #1
 8002f66:	4629      	mov	r1, r5
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f000 fbab 	bl	80036c4 <__lshift>
 8002f6e:	46b9      	mov	r9, r7
 8002f70:	4607      	mov	r7, r0
 8002f72:	9b06      	ldr	r3, [sp, #24]
 8002f74:	9307      	str	r3, [sp, #28]
 8002f76:	9b02      	ldr	r3, [sp, #8]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	9308      	str	r3, [sp, #32]
 8002f7e:	4631      	mov	r1, r6
 8002f80:	4658      	mov	r0, fp
 8002f82:	f7ff faa3 	bl	80024cc <quorem>
 8002f86:	4649      	mov	r1, r9
 8002f88:	4605      	mov	r5, r0
 8002f8a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002f8e:	4658      	mov	r0, fp
 8002f90:	f000 fbec 	bl	800376c <__mcmp>
 8002f94:	463a      	mov	r2, r7
 8002f96:	9002      	str	r0, [sp, #8]
 8002f98:	4631      	mov	r1, r6
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f000 fc00 	bl	80037a0 <__mdiff>
 8002fa0:	68c3      	ldr	r3, [r0, #12]
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	bb03      	cbnz	r3, 8002fe8 <_dtoa_r+0xa00>
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	9009      	str	r0, [sp, #36]	; 0x24
 8002faa:	4658      	mov	r0, fp
 8002fac:	f000 fbde 	bl	800376c <__mcmp>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8002fba:	f000 f9f6 	bl	80033aa <_Bfree>
 8002fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fc0:	b9a3      	cbnz	r3, 8002fec <_dtoa_r+0xa04>
 8002fc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002fc4:	b992      	cbnz	r2, 8002fec <_dtoa_r+0xa04>
 8002fc6:	9a08      	ldr	r2, [sp, #32]
 8002fc8:	b982      	cbnz	r2, 8002fec <_dtoa_r+0xa04>
 8002fca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002fce:	d029      	beq.n	8003024 <_dtoa_r+0xa3c>
 8002fd0:	9b02      	ldr	r3, [sp, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	dd01      	ble.n	8002fda <_dtoa_r+0x9f2>
 8002fd6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8002fda:	9b07      	ldr	r3, [sp, #28]
 8002fdc:	1c5d      	adds	r5, r3, #1
 8002fde:	f883 8000 	strb.w	r8, [r3]
 8002fe2:	e784      	b.n	8002eee <_dtoa_r+0x906>
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	e7c2      	b.n	8002f6e <_dtoa_r+0x986>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e7e3      	b.n	8002fb4 <_dtoa_r+0x9cc>
 8002fec:	9a02      	ldr	r2, [sp, #8]
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	db04      	blt.n	8002ffc <_dtoa_r+0xa14>
 8002ff2:	d123      	bne.n	800303c <_dtoa_r+0xa54>
 8002ff4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002ff6:	bb0a      	cbnz	r2, 800303c <_dtoa_r+0xa54>
 8002ff8:	9a08      	ldr	r2, [sp, #32]
 8002ffa:	b9fa      	cbnz	r2, 800303c <_dtoa_r+0xa54>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	ddec      	ble.n	8002fda <_dtoa_r+0x9f2>
 8003000:	4659      	mov	r1, fp
 8003002:	2201      	movs	r2, #1
 8003004:	4620      	mov	r0, r4
 8003006:	f000 fb5d 	bl	80036c4 <__lshift>
 800300a:	4631      	mov	r1, r6
 800300c:	4683      	mov	fp, r0
 800300e:	f000 fbad 	bl	800376c <__mcmp>
 8003012:	2800      	cmp	r0, #0
 8003014:	dc03      	bgt.n	800301e <_dtoa_r+0xa36>
 8003016:	d1e0      	bne.n	8002fda <_dtoa_r+0x9f2>
 8003018:	f018 0f01 	tst.w	r8, #1
 800301c:	d0dd      	beq.n	8002fda <_dtoa_r+0x9f2>
 800301e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003022:	d1d8      	bne.n	8002fd6 <_dtoa_r+0x9ee>
 8003024:	9b07      	ldr	r3, [sp, #28]
 8003026:	9a07      	ldr	r2, [sp, #28]
 8003028:	1c5d      	adds	r5, r3, #1
 800302a:	2339      	movs	r3, #57	; 0x39
 800302c:	7013      	strb	r3, [r2, #0]
 800302e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003032:	1e6a      	subs	r2, r5, #1
 8003034:	2b39      	cmp	r3, #57	; 0x39
 8003036:	d04d      	beq.n	80030d4 <_dtoa_r+0xaec>
 8003038:	3301      	adds	r3, #1
 800303a:	e052      	b.n	80030e2 <_dtoa_r+0xafa>
 800303c:	9a07      	ldr	r2, [sp, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f102 0501 	add.w	r5, r2, #1
 8003044:	dd06      	ble.n	8003054 <_dtoa_r+0xa6c>
 8003046:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800304a:	d0eb      	beq.n	8003024 <_dtoa_r+0xa3c>
 800304c:	f108 0801 	add.w	r8, r8, #1
 8003050:	9b07      	ldr	r3, [sp, #28]
 8003052:	e7c4      	b.n	8002fde <_dtoa_r+0x9f6>
 8003054:	9b06      	ldr	r3, [sp, #24]
 8003056:	9a04      	ldr	r2, [sp, #16]
 8003058:	1aeb      	subs	r3, r5, r3
 800305a:	4293      	cmp	r3, r2
 800305c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003060:	d021      	beq.n	80030a6 <_dtoa_r+0xabe>
 8003062:	4659      	mov	r1, fp
 8003064:	2300      	movs	r3, #0
 8003066:	220a      	movs	r2, #10
 8003068:	4620      	mov	r0, r4
 800306a:	f000 f9b5 	bl	80033d8 <__multadd>
 800306e:	45b9      	cmp	r9, r7
 8003070:	4683      	mov	fp, r0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	f04f 020a 	mov.w	r2, #10
 800307a:	4649      	mov	r1, r9
 800307c:	4620      	mov	r0, r4
 800307e:	d105      	bne.n	800308c <_dtoa_r+0xaa4>
 8003080:	f000 f9aa 	bl	80033d8 <__multadd>
 8003084:	4681      	mov	r9, r0
 8003086:	4607      	mov	r7, r0
 8003088:	9507      	str	r5, [sp, #28]
 800308a:	e778      	b.n	8002f7e <_dtoa_r+0x996>
 800308c:	f000 f9a4 	bl	80033d8 <__multadd>
 8003090:	4639      	mov	r1, r7
 8003092:	4681      	mov	r9, r0
 8003094:	2300      	movs	r3, #0
 8003096:	220a      	movs	r2, #10
 8003098:	4620      	mov	r0, r4
 800309a:	f000 f99d 	bl	80033d8 <__multadd>
 800309e:	4607      	mov	r7, r0
 80030a0:	e7f2      	b.n	8003088 <_dtoa_r+0xaa0>
 80030a2:	f04f 0900 	mov.w	r9, #0
 80030a6:	4659      	mov	r1, fp
 80030a8:	2201      	movs	r2, #1
 80030aa:	4620      	mov	r0, r4
 80030ac:	f000 fb0a 	bl	80036c4 <__lshift>
 80030b0:	4631      	mov	r1, r6
 80030b2:	4683      	mov	fp, r0
 80030b4:	f000 fb5a 	bl	800376c <__mcmp>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	dcb8      	bgt.n	800302e <_dtoa_r+0xa46>
 80030bc:	d102      	bne.n	80030c4 <_dtoa_r+0xadc>
 80030be:	f018 0f01 	tst.w	r8, #1
 80030c2:	d1b4      	bne.n	800302e <_dtoa_r+0xa46>
 80030c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80030c8:	1e6a      	subs	r2, r5, #1
 80030ca:	2b30      	cmp	r3, #48	; 0x30
 80030cc:	f47f af0f 	bne.w	8002eee <_dtoa_r+0x906>
 80030d0:	4615      	mov	r5, r2
 80030d2:	e7f7      	b.n	80030c4 <_dtoa_r+0xadc>
 80030d4:	9b06      	ldr	r3, [sp, #24]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d105      	bne.n	80030e6 <_dtoa_r+0xafe>
 80030da:	2331      	movs	r3, #49	; 0x31
 80030dc:	9a06      	ldr	r2, [sp, #24]
 80030de:	f10a 0a01 	add.w	sl, sl, #1
 80030e2:	7013      	strb	r3, [r2, #0]
 80030e4:	e703      	b.n	8002eee <_dtoa_r+0x906>
 80030e6:	4615      	mov	r5, r2
 80030e8:	e7a1      	b.n	800302e <_dtoa_r+0xa46>
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <_dtoa_r+0xb60>)
 80030ec:	f7ff bae1 	b.w	80026b2 <_dtoa_r+0xca>
 80030f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f47f aabb 	bne.w	800266e <_dtoa_r+0x86>
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <_dtoa_r+0xb64>)
 80030fa:	f7ff bada 	b.w	80026b2 <_dtoa_r+0xca>
 80030fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003100:	2b01      	cmp	r3, #1
 8003102:	f77f ae3f 	ble.w	8002d84 <_dtoa_r+0x79c>
 8003106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003108:	9308      	str	r3, [sp, #32]
 800310a:	e653      	b.n	8002db4 <_dtoa_r+0x7cc>
 800310c:	9b04      	ldr	r3, [sp, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	dc03      	bgt.n	800311a <_dtoa_r+0xb32>
 8003112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003114:	2b02      	cmp	r3, #2
 8003116:	f73f aed5 	bgt.w	8002ec4 <_dtoa_r+0x8dc>
 800311a:	9d06      	ldr	r5, [sp, #24]
 800311c:	4631      	mov	r1, r6
 800311e:	4658      	mov	r0, fp
 8003120:	f7ff f9d4 	bl	80024cc <quorem>
 8003124:	9b06      	ldr	r3, [sp, #24]
 8003126:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800312a:	f805 8b01 	strb.w	r8, [r5], #1
 800312e:	9a04      	ldr	r2, [sp, #16]
 8003130:	1aeb      	subs	r3, r5, r3
 8003132:	429a      	cmp	r2, r3
 8003134:	ddb5      	ble.n	80030a2 <_dtoa_r+0xaba>
 8003136:	4659      	mov	r1, fp
 8003138:	2300      	movs	r3, #0
 800313a:	220a      	movs	r2, #10
 800313c:	4620      	mov	r0, r4
 800313e:	f000 f94b 	bl	80033d8 <__multadd>
 8003142:	4683      	mov	fp, r0
 8003144:	e7ea      	b.n	800311c <_dtoa_r+0xb34>
 8003146:	bf00      	nop
 8003148:	080042b4 	.word	0x080042b4
 800314c:	080042d8 	.word	0x080042d8

08003150 <std>:
 8003150:	2300      	movs	r3, #0
 8003152:	b510      	push	{r4, lr}
 8003154:	4604      	mov	r4, r0
 8003156:	e9c0 3300 	strd	r3, r3, [r0]
 800315a:	6083      	str	r3, [r0, #8]
 800315c:	8181      	strh	r1, [r0, #12]
 800315e:	6643      	str	r3, [r0, #100]	; 0x64
 8003160:	81c2      	strh	r2, [r0, #14]
 8003162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003166:	6183      	str	r3, [r0, #24]
 8003168:	4619      	mov	r1, r3
 800316a:	2208      	movs	r2, #8
 800316c:	305c      	adds	r0, #92	; 0x5c
 800316e:	f7fe fd3d 	bl	8001bec <memset>
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <std+0x38>)
 8003174:	6224      	str	r4, [r4, #32]
 8003176:	6263      	str	r3, [r4, #36]	; 0x24
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <std+0x3c>)
 800317a:	62a3      	str	r3, [r4, #40]	; 0x28
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <std+0x40>)
 800317e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <std+0x44>)
 8003182:	6323      	str	r3, [r4, #48]	; 0x30
 8003184:	bd10      	pop	{r4, pc}
 8003186:	bf00      	nop
 8003188:	08003d01 	.word	0x08003d01
 800318c:	08003d23 	.word	0x08003d23
 8003190:	08003d5b 	.word	0x08003d5b
 8003194:	08003d7f 	.word	0x08003d7f

08003198 <_cleanup_r>:
 8003198:	4901      	ldr	r1, [pc, #4]	; (80031a0 <_cleanup_r+0x8>)
 800319a:	f000 b885 	b.w	80032a8 <_fwalk_reent>
 800319e:	bf00      	nop
 80031a0:	08004059 	.word	0x08004059

080031a4 <__sfmoreglue>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	2568      	movs	r5, #104	; 0x68
 80031a8:	1e4a      	subs	r2, r1, #1
 80031aa:	4355      	muls	r5, r2
 80031ac:	460e      	mov	r6, r1
 80031ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80031b2:	f000 fbfd 	bl	80039b0 <_malloc_r>
 80031b6:	4604      	mov	r4, r0
 80031b8:	b140      	cbz	r0, 80031cc <__sfmoreglue+0x28>
 80031ba:	2100      	movs	r1, #0
 80031bc:	e9c0 1600 	strd	r1, r6, [r0]
 80031c0:	300c      	adds	r0, #12
 80031c2:	60a0      	str	r0, [r4, #8]
 80031c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031c8:	f7fe fd10 	bl	8001bec <memset>
 80031cc:	4620      	mov	r0, r4
 80031ce:	bd70      	pop	{r4, r5, r6, pc}

080031d0 <__sinit>:
 80031d0:	6983      	ldr	r3, [r0, #24]
 80031d2:	b510      	push	{r4, lr}
 80031d4:	4604      	mov	r4, r0
 80031d6:	bb33      	cbnz	r3, 8003226 <__sinit+0x56>
 80031d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80031dc:	6503      	str	r3, [r0, #80]	; 0x50
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <__sinit+0x58>)
 80031e0:	4a12      	ldr	r2, [pc, #72]	; (800322c <__sinit+0x5c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6282      	str	r2, [r0, #40]	; 0x28
 80031e6:	4298      	cmp	r0, r3
 80031e8:	bf04      	itt	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	6183      	streq	r3, [r0, #24]
 80031ee:	f000 f81f 	bl	8003230 <__sfp>
 80031f2:	6060      	str	r0, [r4, #4]
 80031f4:	4620      	mov	r0, r4
 80031f6:	f000 f81b 	bl	8003230 <__sfp>
 80031fa:	60a0      	str	r0, [r4, #8]
 80031fc:	4620      	mov	r0, r4
 80031fe:	f000 f817 	bl	8003230 <__sfp>
 8003202:	2200      	movs	r2, #0
 8003204:	60e0      	str	r0, [r4, #12]
 8003206:	2104      	movs	r1, #4
 8003208:	6860      	ldr	r0, [r4, #4]
 800320a:	f7ff ffa1 	bl	8003150 <std>
 800320e:	2201      	movs	r2, #1
 8003210:	2109      	movs	r1, #9
 8003212:	68a0      	ldr	r0, [r4, #8]
 8003214:	f7ff ff9c 	bl	8003150 <std>
 8003218:	2202      	movs	r2, #2
 800321a:	2112      	movs	r1, #18
 800321c:	68e0      	ldr	r0, [r4, #12]
 800321e:	f7ff ff97 	bl	8003150 <std>
 8003222:	2301      	movs	r3, #1
 8003224:	61a3      	str	r3, [r4, #24]
 8003226:	bd10      	pop	{r4, pc}
 8003228:	080042a0 	.word	0x080042a0
 800322c:	08003199 	.word	0x08003199

08003230 <__sfp>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <__sfp+0x70>)
 8003234:	4607      	mov	r7, r0
 8003236:	681e      	ldr	r6, [r3, #0]
 8003238:	69b3      	ldr	r3, [r6, #24]
 800323a:	b913      	cbnz	r3, 8003242 <__sfp+0x12>
 800323c:	4630      	mov	r0, r6
 800323e:	f7ff ffc7 	bl	80031d0 <__sinit>
 8003242:	3648      	adds	r6, #72	; 0x48
 8003244:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003248:	3b01      	subs	r3, #1
 800324a:	d503      	bpl.n	8003254 <__sfp+0x24>
 800324c:	6833      	ldr	r3, [r6, #0]
 800324e:	b133      	cbz	r3, 800325e <__sfp+0x2e>
 8003250:	6836      	ldr	r6, [r6, #0]
 8003252:	e7f7      	b.n	8003244 <__sfp+0x14>
 8003254:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003258:	b16d      	cbz	r5, 8003276 <__sfp+0x46>
 800325a:	3468      	adds	r4, #104	; 0x68
 800325c:	e7f4      	b.n	8003248 <__sfp+0x18>
 800325e:	2104      	movs	r1, #4
 8003260:	4638      	mov	r0, r7
 8003262:	f7ff ff9f 	bl	80031a4 <__sfmoreglue>
 8003266:	6030      	str	r0, [r6, #0]
 8003268:	2800      	cmp	r0, #0
 800326a:	d1f1      	bne.n	8003250 <__sfp+0x20>
 800326c:	230c      	movs	r3, #12
 800326e:	4604      	mov	r4, r0
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4620      	mov	r0, r4
 8003274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <__sfp+0x74>)
 8003278:	6665      	str	r5, [r4, #100]	; 0x64
 800327a:	e9c4 5500 	strd	r5, r5, [r4]
 800327e:	60a5      	str	r5, [r4, #8]
 8003280:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003284:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003288:	2208      	movs	r2, #8
 800328a:	4629      	mov	r1, r5
 800328c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003290:	f7fe fcac 	bl	8001bec <memset>
 8003294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800329c:	e7e9      	b.n	8003272 <__sfp+0x42>
 800329e:	bf00      	nop
 80032a0:	080042a0 	.word	0x080042a0
 80032a4:	ffff0001 	.word	0xffff0001

080032a8 <_fwalk_reent>:
 80032a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032ac:	4680      	mov	r8, r0
 80032ae:	4689      	mov	r9, r1
 80032b0:	2600      	movs	r6, #0
 80032b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032b6:	b914      	cbnz	r4, 80032be <_fwalk_reent+0x16>
 80032b8:	4630      	mov	r0, r6
 80032ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80032c2:	3f01      	subs	r7, #1
 80032c4:	d501      	bpl.n	80032ca <_fwalk_reent+0x22>
 80032c6:	6824      	ldr	r4, [r4, #0]
 80032c8:	e7f5      	b.n	80032b6 <_fwalk_reent+0xe>
 80032ca:	89ab      	ldrh	r3, [r5, #12]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d907      	bls.n	80032e0 <_fwalk_reent+0x38>
 80032d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032d4:	3301      	adds	r3, #1
 80032d6:	d003      	beq.n	80032e0 <_fwalk_reent+0x38>
 80032d8:	4629      	mov	r1, r5
 80032da:	4640      	mov	r0, r8
 80032dc:	47c8      	blx	r9
 80032de:	4306      	orrs	r6, r0
 80032e0:	3568      	adds	r5, #104	; 0x68
 80032e2:	e7ee      	b.n	80032c2 <_fwalk_reent+0x1a>

080032e4 <_localeconv_r>:
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <_localeconv_r+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a18      	ldr	r0, [r3, #32]
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <_localeconv_r+0x18>)
 80032ec:	2800      	cmp	r0, #0
 80032ee:	bf08      	it	eq
 80032f0:	4618      	moveq	r0, r3
 80032f2:	30f0      	adds	r0, #240	; 0xf0
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	2000000c 	.word	0x2000000c
 80032fc:	20000070 	.word	0x20000070

08003300 <malloc>:
 8003300:	4b02      	ldr	r3, [pc, #8]	; (800330c <malloc+0xc>)
 8003302:	4601      	mov	r1, r0
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	f000 bb53 	b.w	80039b0 <_malloc_r>
 800330a:	bf00      	nop
 800330c:	2000000c 	.word	0x2000000c

08003310 <memchr>:
 8003310:	b510      	push	{r4, lr}
 8003312:	b2c9      	uxtb	r1, r1
 8003314:	4402      	add	r2, r0
 8003316:	4290      	cmp	r0, r2
 8003318:	4603      	mov	r3, r0
 800331a:	d101      	bne.n	8003320 <memchr+0x10>
 800331c:	2300      	movs	r3, #0
 800331e:	e003      	b.n	8003328 <memchr+0x18>
 8003320:	781c      	ldrb	r4, [r3, #0]
 8003322:	3001      	adds	r0, #1
 8003324:	428c      	cmp	r4, r1
 8003326:	d1f6      	bne.n	8003316 <memchr+0x6>
 8003328:	4618      	mov	r0, r3
 800332a:	bd10      	pop	{r4, pc}

0800332c <memcpy>:
 800332c:	b510      	push	{r4, lr}
 800332e:	1e43      	subs	r3, r0, #1
 8003330:	440a      	add	r2, r1
 8003332:	4291      	cmp	r1, r2
 8003334:	d100      	bne.n	8003338 <memcpy+0xc>
 8003336:	bd10      	pop	{r4, pc}
 8003338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800333c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003340:	e7f7      	b.n	8003332 <memcpy+0x6>

08003342 <_Balloc>:
 8003342:	b570      	push	{r4, r5, r6, lr}
 8003344:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003346:	4604      	mov	r4, r0
 8003348:	460e      	mov	r6, r1
 800334a:	b93d      	cbnz	r5, 800335c <_Balloc+0x1a>
 800334c:	2010      	movs	r0, #16
 800334e:	f7ff ffd7 	bl	8003300 <malloc>
 8003352:	6260      	str	r0, [r4, #36]	; 0x24
 8003354:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003358:	6005      	str	r5, [r0, #0]
 800335a:	60c5      	str	r5, [r0, #12]
 800335c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800335e:	68eb      	ldr	r3, [r5, #12]
 8003360:	b183      	cbz	r3, 8003384 <_Balloc+0x42>
 8003362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800336a:	b9b8      	cbnz	r0, 800339c <_Balloc+0x5a>
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f506 	lsl.w	r5, r1, r6
 8003372:	1d6a      	adds	r2, r5, #5
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	4620      	mov	r0, r4
 8003378:	f000 fabf 	bl	80038fa <_calloc_r>
 800337c:	b160      	cbz	r0, 8003398 <_Balloc+0x56>
 800337e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003382:	e00e      	b.n	80033a2 <_Balloc+0x60>
 8003384:	2221      	movs	r2, #33	; 0x21
 8003386:	2104      	movs	r1, #4
 8003388:	4620      	mov	r0, r4
 800338a:	f000 fab6 	bl	80038fa <_calloc_r>
 800338e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003390:	60e8      	str	r0, [r5, #12]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e4      	bne.n	8003362 <_Balloc+0x20>
 8003398:	2000      	movs	r0, #0
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	6802      	ldr	r2, [r0, #0]
 800339e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80033a2:	2300      	movs	r3, #0
 80033a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80033a8:	e7f7      	b.n	800339a <_Balloc+0x58>

080033aa <_Bfree>:
 80033aa:	b570      	push	{r4, r5, r6, lr}
 80033ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80033ae:	4606      	mov	r6, r0
 80033b0:	460d      	mov	r5, r1
 80033b2:	b93c      	cbnz	r4, 80033c4 <_Bfree+0x1a>
 80033b4:	2010      	movs	r0, #16
 80033b6:	f7ff ffa3 	bl	8003300 <malloc>
 80033ba:	6270      	str	r0, [r6, #36]	; 0x24
 80033bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80033c0:	6004      	str	r4, [r0, #0]
 80033c2:	60c4      	str	r4, [r0, #12]
 80033c4:	b13d      	cbz	r5, 80033d6 <_Bfree+0x2c>
 80033c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80033c8:	686a      	ldr	r2, [r5, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033d0:	6029      	str	r1, [r5, #0]
 80033d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80033d6:	bd70      	pop	{r4, r5, r6, pc}

080033d8 <__multadd>:
 80033d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033dc:	461f      	mov	r7, r3
 80033de:	4606      	mov	r6, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	2300      	movs	r3, #0
 80033e4:	690d      	ldr	r5, [r1, #16]
 80033e6:	f101 0c14 	add.w	ip, r1, #20
 80033ea:	f8dc 0000 	ldr.w	r0, [ip]
 80033ee:	3301      	adds	r3, #1
 80033f0:	b281      	uxth	r1, r0
 80033f2:	fb02 7101 	mla	r1, r2, r1, r7
 80033f6:	0c00      	lsrs	r0, r0, #16
 80033f8:	0c0f      	lsrs	r7, r1, #16
 80033fa:	fb02 7000 	mla	r0, r2, r0, r7
 80033fe:	b289      	uxth	r1, r1
 8003400:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003404:	429d      	cmp	r5, r3
 8003406:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800340a:	f84c 1b04 	str.w	r1, [ip], #4
 800340e:	dcec      	bgt.n	80033ea <__multadd+0x12>
 8003410:	b1d7      	cbz	r7, 8003448 <__multadd+0x70>
 8003412:	68a3      	ldr	r3, [r4, #8]
 8003414:	42ab      	cmp	r3, r5
 8003416:	dc12      	bgt.n	800343e <__multadd+0x66>
 8003418:	6861      	ldr	r1, [r4, #4]
 800341a:	4630      	mov	r0, r6
 800341c:	3101      	adds	r1, #1
 800341e:	f7ff ff90 	bl	8003342 <_Balloc>
 8003422:	4680      	mov	r8, r0
 8003424:	6922      	ldr	r2, [r4, #16]
 8003426:	f104 010c 	add.w	r1, r4, #12
 800342a:	3202      	adds	r2, #2
 800342c:	0092      	lsls	r2, r2, #2
 800342e:	300c      	adds	r0, #12
 8003430:	f7ff ff7c 	bl	800332c <memcpy>
 8003434:	4621      	mov	r1, r4
 8003436:	4630      	mov	r0, r6
 8003438:	f7ff ffb7 	bl	80033aa <_Bfree>
 800343c:	4644      	mov	r4, r8
 800343e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003442:	3501      	adds	r5, #1
 8003444:	615f      	str	r7, [r3, #20]
 8003446:	6125      	str	r5, [r4, #16]
 8003448:	4620      	mov	r0, r4
 800344a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800344e <__hi0bits>:
 800344e:	0c02      	lsrs	r2, r0, #16
 8003450:	0412      	lsls	r2, r2, #16
 8003452:	4603      	mov	r3, r0
 8003454:	b9b2      	cbnz	r2, 8003484 <__hi0bits+0x36>
 8003456:	0403      	lsls	r3, r0, #16
 8003458:	2010      	movs	r0, #16
 800345a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800345e:	bf04      	itt	eq
 8003460:	021b      	lsleq	r3, r3, #8
 8003462:	3008      	addeq	r0, #8
 8003464:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003468:	bf04      	itt	eq
 800346a:	011b      	lsleq	r3, r3, #4
 800346c:	3004      	addeq	r0, #4
 800346e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003472:	bf04      	itt	eq
 8003474:	009b      	lsleq	r3, r3, #2
 8003476:	3002      	addeq	r0, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	db06      	blt.n	800348a <__hi0bits+0x3c>
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	d503      	bpl.n	8003488 <__hi0bits+0x3a>
 8003480:	3001      	adds	r0, #1
 8003482:	4770      	bx	lr
 8003484:	2000      	movs	r0, #0
 8003486:	e7e8      	b.n	800345a <__hi0bits+0xc>
 8003488:	2020      	movs	r0, #32
 800348a:	4770      	bx	lr

0800348c <__lo0bits>:
 800348c:	6803      	ldr	r3, [r0, #0]
 800348e:	4601      	mov	r1, r0
 8003490:	f013 0207 	ands.w	r2, r3, #7
 8003494:	d00b      	beq.n	80034ae <__lo0bits+0x22>
 8003496:	07da      	lsls	r2, r3, #31
 8003498:	d423      	bmi.n	80034e2 <__lo0bits+0x56>
 800349a:	0798      	lsls	r0, r3, #30
 800349c:	bf49      	itett	mi
 800349e:	085b      	lsrmi	r3, r3, #1
 80034a0:	089b      	lsrpl	r3, r3, #2
 80034a2:	2001      	movmi	r0, #1
 80034a4:	600b      	strmi	r3, [r1, #0]
 80034a6:	bf5c      	itt	pl
 80034a8:	600b      	strpl	r3, [r1, #0]
 80034aa:	2002      	movpl	r0, #2
 80034ac:	4770      	bx	lr
 80034ae:	b298      	uxth	r0, r3
 80034b0:	b9a8      	cbnz	r0, 80034de <__lo0bits+0x52>
 80034b2:	2010      	movs	r0, #16
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80034ba:	bf04      	itt	eq
 80034bc:	0a1b      	lsreq	r3, r3, #8
 80034be:	3008      	addeq	r0, #8
 80034c0:	071a      	lsls	r2, r3, #28
 80034c2:	bf04      	itt	eq
 80034c4:	091b      	lsreq	r3, r3, #4
 80034c6:	3004      	addeq	r0, #4
 80034c8:	079a      	lsls	r2, r3, #30
 80034ca:	bf04      	itt	eq
 80034cc:	089b      	lsreq	r3, r3, #2
 80034ce:	3002      	addeq	r0, #2
 80034d0:	07da      	lsls	r2, r3, #31
 80034d2:	d402      	bmi.n	80034da <__lo0bits+0x4e>
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	d006      	beq.n	80034e6 <__lo0bits+0x5a>
 80034d8:	3001      	adds	r0, #1
 80034da:	600b      	str	r3, [r1, #0]
 80034dc:	4770      	bx	lr
 80034de:	4610      	mov	r0, r2
 80034e0:	e7e9      	b.n	80034b6 <__lo0bits+0x2a>
 80034e2:	2000      	movs	r0, #0
 80034e4:	4770      	bx	lr
 80034e6:	2020      	movs	r0, #32
 80034e8:	4770      	bx	lr

080034ea <__i2b>:
 80034ea:	b510      	push	{r4, lr}
 80034ec:	460c      	mov	r4, r1
 80034ee:	2101      	movs	r1, #1
 80034f0:	f7ff ff27 	bl	8003342 <_Balloc>
 80034f4:	2201      	movs	r2, #1
 80034f6:	6144      	str	r4, [r0, #20]
 80034f8:	6102      	str	r2, [r0, #16]
 80034fa:	bd10      	pop	{r4, pc}

080034fc <__multiply>:
 80034fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003500:	4614      	mov	r4, r2
 8003502:	690a      	ldr	r2, [r1, #16]
 8003504:	6923      	ldr	r3, [r4, #16]
 8003506:	4688      	mov	r8, r1
 8003508:	429a      	cmp	r2, r3
 800350a:	bfbe      	ittt	lt
 800350c:	460b      	movlt	r3, r1
 800350e:	46a0      	movlt	r8, r4
 8003510:	461c      	movlt	r4, r3
 8003512:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003516:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800351a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800351e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003522:	eb07 0609 	add.w	r6, r7, r9
 8003526:	42b3      	cmp	r3, r6
 8003528:	bfb8      	it	lt
 800352a:	3101      	addlt	r1, #1
 800352c:	f7ff ff09 	bl	8003342 <_Balloc>
 8003530:	f100 0514 	add.w	r5, r0, #20
 8003534:	462b      	mov	r3, r5
 8003536:	2200      	movs	r2, #0
 8003538:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800353c:	4573      	cmp	r3, lr
 800353e:	d316      	bcc.n	800356e <__multiply+0x72>
 8003540:	f104 0214 	add.w	r2, r4, #20
 8003544:	f108 0114 	add.w	r1, r8, #20
 8003548:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800354c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	9b00      	ldr	r3, [sp, #0]
 8003554:	9201      	str	r2, [sp, #4]
 8003556:	4293      	cmp	r3, r2
 8003558:	d80c      	bhi.n	8003574 <__multiply+0x78>
 800355a:	2e00      	cmp	r6, #0
 800355c:	dd03      	ble.n	8003566 <__multiply+0x6a>
 800355e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003562:	2b00      	cmp	r3, #0
 8003564:	d05d      	beq.n	8003622 <__multiply+0x126>
 8003566:	6106      	str	r6, [r0, #16]
 8003568:	b003      	add	sp, #12
 800356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800356e:	f843 2b04 	str.w	r2, [r3], #4
 8003572:	e7e3      	b.n	800353c <__multiply+0x40>
 8003574:	f8b2 b000 	ldrh.w	fp, [r2]
 8003578:	f1bb 0f00 	cmp.w	fp, #0
 800357c:	d023      	beq.n	80035c6 <__multiply+0xca>
 800357e:	4689      	mov	r9, r1
 8003580:	46ac      	mov	ip, r5
 8003582:	f04f 0800 	mov.w	r8, #0
 8003586:	f859 4b04 	ldr.w	r4, [r9], #4
 800358a:	f8dc a000 	ldr.w	sl, [ip]
 800358e:	b2a3      	uxth	r3, r4
 8003590:	fa1f fa8a 	uxth.w	sl, sl
 8003594:	fb0b a303 	mla	r3, fp, r3, sl
 8003598:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800359c:	f8dc 4000 	ldr.w	r4, [ip]
 80035a0:	4443      	add	r3, r8
 80035a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80035a6:	fb0b 840a 	mla	r4, fp, sl, r8
 80035aa:	46e2      	mov	sl, ip
 80035ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80035b6:	454f      	cmp	r7, r9
 80035b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80035bc:	f84a 3b04 	str.w	r3, [sl], #4
 80035c0:	d82b      	bhi.n	800361a <__multiply+0x11e>
 80035c2:	f8cc 8004 	str.w	r8, [ip, #4]
 80035c6:	9b01      	ldr	r3, [sp, #4]
 80035c8:	3204      	adds	r2, #4
 80035ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80035ce:	f1ba 0f00 	cmp.w	sl, #0
 80035d2:	d020      	beq.n	8003616 <__multiply+0x11a>
 80035d4:	4689      	mov	r9, r1
 80035d6:	46a8      	mov	r8, r5
 80035d8:	f04f 0b00 	mov.w	fp, #0
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	f8b9 c000 	ldrh.w	ip, [r9]
 80035e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	fb0a 440c 	mla	r4, sl, ip, r4
 80035ec:	46c4      	mov	ip, r8
 80035ee:	445c      	add	r4, fp
 80035f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80035f4:	f84c 3b04 	str.w	r3, [ip], #4
 80035f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80035fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	fb0a b303 	mla	r3, sl, r3, fp
 8003606:	454f      	cmp	r7, r9
 8003608:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800360c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003610:	d805      	bhi.n	800361e <__multiply+0x122>
 8003612:	f8c8 3004 	str.w	r3, [r8, #4]
 8003616:	3504      	adds	r5, #4
 8003618:	e79b      	b.n	8003552 <__multiply+0x56>
 800361a:	46d4      	mov	ip, sl
 800361c:	e7b3      	b.n	8003586 <__multiply+0x8a>
 800361e:	46e0      	mov	r8, ip
 8003620:	e7dd      	b.n	80035de <__multiply+0xe2>
 8003622:	3e01      	subs	r6, #1
 8003624:	e799      	b.n	800355a <__multiply+0x5e>
	...

08003628 <__pow5mult>:
 8003628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800362c:	4615      	mov	r5, r2
 800362e:	f012 0203 	ands.w	r2, r2, #3
 8003632:	4606      	mov	r6, r0
 8003634:	460f      	mov	r7, r1
 8003636:	d007      	beq.n	8003648 <__pow5mult+0x20>
 8003638:	4c21      	ldr	r4, [pc, #132]	; (80036c0 <__pow5mult+0x98>)
 800363a:	3a01      	subs	r2, #1
 800363c:	2300      	movs	r3, #0
 800363e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003642:	f7ff fec9 	bl	80033d8 <__multadd>
 8003646:	4607      	mov	r7, r0
 8003648:	10ad      	asrs	r5, r5, #2
 800364a:	d035      	beq.n	80036b8 <__pow5mult+0x90>
 800364c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800364e:	b93c      	cbnz	r4, 8003660 <__pow5mult+0x38>
 8003650:	2010      	movs	r0, #16
 8003652:	f7ff fe55 	bl	8003300 <malloc>
 8003656:	6270      	str	r0, [r6, #36]	; 0x24
 8003658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800365c:	6004      	str	r4, [r0, #0]
 800365e:	60c4      	str	r4, [r0, #12]
 8003660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003668:	b94c      	cbnz	r4, 800367e <__pow5mult+0x56>
 800366a:	f240 2171 	movw	r1, #625	; 0x271
 800366e:	4630      	mov	r0, r6
 8003670:	f7ff ff3b 	bl	80034ea <__i2b>
 8003674:	2300      	movs	r3, #0
 8003676:	4604      	mov	r4, r0
 8003678:	f8c8 0008 	str.w	r0, [r8, #8]
 800367c:	6003      	str	r3, [r0, #0]
 800367e:	f04f 0800 	mov.w	r8, #0
 8003682:	07eb      	lsls	r3, r5, #31
 8003684:	d50a      	bpl.n	800369c <__pow5mult+0x74>
 8003686:	4639      	mov	r1, r7
 8003688:	4622      	mov	r2, r4
 800368a:	4630      	mov	r0, r6
 800368c:	f7ff ff36 	bl	80034fc <__multiply>
 8003690:	4681      	mov	r9, r0
 8003692:	4639      	mov	r1, r7
 8003694:	4630      	mov	r0, r6
 8003696:	f7ff fe88 	bl	80033aa <_Bfree>
 800369a:	464f      	mov	r7, r9
 800369c:	106d      	asrs	r5, r5, #1
 800369e:	d00b      	beq.n	80036b8 <__pow5mult+0x90>
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	b938      	cbnz	r0, 80036b4 <__pow5mult+0x8c>
 80036a4:	4622      	mov	r2, r4
 80036a6:	4621      	mov	r1, r4
 80036a8:	4630      	mov	r0, r6
 80036aa:	f7ff ff27 	bl	80034fc <__multiply>
 80036ae:	6020      	str	r0, [r4, #0]
 80036b0:	f8c0 8000 	str.w	r8, [r0]
 80036b4:	4604      	mov	r4, r0
 80036b6:	e7e4      	b.n	8003682 <__pow5mult+0x5a>
 80036b8:	4638      	mov	r0, r7
 80036ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036be:	bf00      	nop
 80036c0:	08004438 	.word	0x08004438

080036c4 <__lshift>:
 80036c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c8:	460c      	mov	r4, r1
 80036ca:	4607      	mov	r7, r0
 80036cc:	4616      	mov	r6, r2
 80036ce:	6923      	ldr	r3, [r4, #16]
 80036d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80036d4:	eb0a 0903 	add.w	r9, sl, r3
 80036d8:	6849      	ldr	r1, [r1, #4]
 80036da:	68a3      	ldr	r3, [r4, #8]
 80036dc:	f109 0501 	add.w	r5, r9, #1
 80036e0:	42ab      	cmp	r3, r5
 80036e2:	db32      	blt.n	800374a <__lshift+0x86>
 80036e4:	4638      	mov	r0, r7
 80036e6:	f7ff fe2c 	bl	8003342 <_Balloc>
 80036ea:	2300      	movs	r3, #0
 80036ec:	4680      	mov	r8, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	f100 0114 	add.w	r1, r0, #20
 80036f4:	4553      	cmp	r3, sl
 80036f6:	db2b      	blt.n	8003750 <__lshift+0x8c>
 80036f8:	6920      	ldr	r0, [r4, #16]
 80036fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80036fe:	f104 0314 	add.w	r3, r4, #20
 8003702:	f016 021f 	ands.w	r2, r6, #31
 8003706:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800370a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800370e:	d025      	beq.n	800375c <__lshift+0x98>
 8003710:	2000      	movs	r0, #0
 8003712:	f1c2 0e20 	rsb	lr, r2, #32
 8003716:	468a      	mov	sl, r1
 8003718:	681e      	ldr	r6, [r3, #0]
 800371a:	4096      	lsls	r6, r2
 800371c:	4330      	orrs	r0, r6
 800371e:	f84a 0b04 	str.w	r0, [sl], #4
 8003722:	f853 0b04 	ldr.w	r0, [r3], #4
 8003726:	459c      	cmp	ip, r3
 8003728:	fa20 f00e 	lsr.w	r0, r0, lr
 800372c:	d814      	bhi.n	8003758 <__lshift+0x94>
 800372e:	6048      	str	r0, [r1, #4]
 8003730:	b108      	cbz	r0, 8003736 <__lshift+0x72>
 8003732:	f109 0502 	add.w	r5, r9, #2
 8003736:	3d01      	subs	r5, #1
 8003738:	4638      	mov	r0, r7
 800373a:	f8c8 5010 	str.w	r5, [r8, #16]
 800373e:	4621      	mov	r1, r4
 8003740:	f7ff fe33 	bl	80033aa <_Bfree>
 8003744:	4640      	mov	r0, r8
 8003746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374a:	3101      	adds	r1, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	e7c7      	b.n	80036e0 <__lshift+0x1c>
 8003750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003754:	3301      	adds	r3, #1
 8003756:	e7cd      	b.n	80036f4 <__lshift+0x30>
 8003758:	4651      	mov	r1, sl
 800375a:	e7dc      	b.n	8003716 <__lshift+0x52>
 800375c:	3904      	subs	r1, #4
 800375e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003762:	459c      	cmp	ip, r3
 8003764:	f841 2f04 	str.w	r2, [r1, #4]!
 8003768:	d8f9      	bhi.n	800375e <__lshift+0x9a>
 800376a:	e7e4      	b.n	8003736 <__lshift+0x72>

0800376c <__mcmp>:
 800376c:	6903      	ldr	r3, [r0, #16]
 800376e:	690a      	ldr	r2, [r1, #16]
 8003770:	b530      	push	{r4, r5, lr}
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	d10c      	bne.n	8003790 <__mcmp+0x24>
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	3014      	adds	r0, #20
 800377a:	3114      	adds	r1, #20
 800377c:	1884      	adds	r4, r0, r2
 800377e:	4411      	add	r1, r2
 8003780:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003784:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003788:	4295      	cmp	r5, r2
 800378a:	d003      	beq.n	8003794 <__mcmp+0x28>
 800378c:	d305      	bcc.n	800379a <__mcmp+0x2e>
 800378e:	2301      	movs	r3, #1
 8003790:	4618      	mov	r0, r3
 8003792:	bd30      	pop	{r4, r5, pc}
 8003794:	42a0      	cmp	r0, r4
 8003796:	d3f3      	bcc.n	8003780 <__mcmp+0x14>
 8003798:	e7fa      	b.n	8003790 <__mcmp+0x24>
 800379a:	f04f 33ff 	mov.w	r3, #4294967295
 800379e:	e7f7      	b.n	8003790 <__mcmp+0x24>

080037a0 <__mdiff>:
 80037a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	460d      	mov	r5, r1
 80037a6:	4607      	mov	r7, r0
 80037a8:	4611      	mov	r1, r2
 80037aa:	4628      	mov	r0, r5
 80037ac:	4614      	mov	r4, r2
 80037ae:	f7ff ffdd 	bl	800376c <__mcmp>
 80037b2:	1e06      	subs	r6, r0, #0
 80037b4:	d108      	bne.n	80037c8 <__mdiff+0x28>
 80037b6:	4631      	mov	r1, r6
 80037b8:	4638      	mov	r0, r7
 80037ba:	f7ff fdc2 	bl	8003342 <_Balloc>
 80037be:	2301      	movs	r3, #1
 80037c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	bfa4      	itt	ge
 80037ca:	4623      	movge	r3, r4
 80037cc:	462c      	movge	r4, r5
 80037ce:	4638      	mov	r0, r7
 80037d0:	6861      	ldr	r1, [r4, #4]
 80037d2:	bfa6      	itte	ge
 80037d4:	461d      	movge	r5, r3
 80037d6:	2600      	movge	r6, #0
 80037d8:	2601      	movlt	r6, #1
 80037da:	f7ff fdb2 	bl	8003342 <_Balloc>
 80037de:	f04f 0e00 	mov.w	lr, #0
 80037e2:	60c6      	str	r6, [r0, #12]
 80037e4:	692b      	ldr	r3, [r5, #16]
 80037e6:	6926      	ldr	r6, [r4, #16]
 80037e8:	f104 0214 	add.w	r2, r4, #20
 80037ec:	f105 0914 	add.w	r9, r5, #20
 80037f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80037f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80037f8:	f100 0114 	add.w	r1, r0, #20
 80037fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8003800:	f859 5b04 	ldr.w	r5, [r9], #4
 8003804:	fa1f f38a 	uxth.w	r3, sl
 8003808:	4473      	add	r3, lr
 800380a:	b2ac      	uxth	r4, r5
 800380c:	1b1b      	subs	r3, r3, r4
 800380e:	0c2c      	lsrs	r4, r5, #16
 8003810:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003814:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003818:	b29b      	uxth	r3, r3
 800381a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800381e:	45c8      	cmp	r8, r9
 8003820:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003824:	4694      	mov	ip, r2
 8003826:	f841 4b04 	str.w	r4, [r1], #4
 800382a:	d8e7      	bhi.n	80037fc <__mdiff+0x5c>
 800382c:	45bc      	cmp	ip, r7
 800382e:	d304      	bcc.n	800383a <__mdiff+0x9a>
 8003830:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003834:	b183      	cbz	r3, 8003858 <__mdiff+0xb8>
 8003836:	6106      	str	r6, [r0, #16]
 8003838:	e7c4      	b.n	80037c4 <__mdiff+0x24>
 800383a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800383e:	b2a2      	uxth	r2, r4
 8003840:	4472      	add	r2, lr
 8003842:	1413      	asrs	r3, r2, #16
 8003844:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003848:	b292      	uxth	r2, r2
 800384a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800384e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003852:	f841 2b04 	str.w	r2, [r1], #4
 8003856:	e7e9      	b.n	800382c <__mdiff+0x8c>
 8003858:	3e01      	subs	r6, #1
 800385a:	e7e9      	b.n	8003830 <__mdiff+0x90>

0800385c <__d2b>:
 800385c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003860:	461c      	mov	r4, r3
 8003862:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003866:	2101      	movs	r1, #1
 8003868:	4690      	mov	r8, r2
 800386a:	f7ff fd6a 	bl	8003342 <_Balloc>
 800386e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003872:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003876:	4607      	mov	r7, r0
 8003878:	bb34      	cbnz	r4, 80038c8 <__d2b+0x6c>
 800387a:	9201      	str	r2, [sp, #4]
 800387c:	f1b8 0200 	subs.w	r2, r8, #0
 8003880:	d027      	beq.n	80038d2 <__d2b+0x76>
 8003882:	a802      	add	r0, sp, #8
 8003884:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003888:	f7ff fe00 	bl	800348c <__lo0bits>
 800388c:	9900      	ldr	r1, [sp, #0]
 800388e:	b1f0      	cbz	r0, 80038ce <__d2b+0x72>
 8003890:	9a01      	ldr	r2, [sp, #4]
 8003892:	f1c0 0320 	rsb	r3, r0, #32
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	430b      	orrs	r3, r1
 800389c:	40c2      	lsrs	r2, r0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	9201      	str	r2, [sp, #4]
 80038a2:	9b01      	ldr	r3, [sp, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2102      	movne	r1, #2
 80038aa:	2101      	moveq	r1, #1
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	6139      	str	r1, [r7, #16]
 80038b0:	b1c4      	cbz	r4, 80038e4 <__d2b+0x88>
 80038b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80038b6:	4404      	add	r4, r0
 80038b8:	6034      	str	r4, [r6, #0]
 80038ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80038be:	6028      	str	r0, [r5, #0]
 80038c0:	4638      	mov	r0, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80038cc:	e7d5      	b.n	800387a <__d2b+0x1e>
 80038ce:	6179      	str	r1, [r7, #20]
 80038d0:	e7e7      	b.n	80038a2 <__d2b+0x46>
 80038d2:	a801      	add	r0, sp, #4
 80038d4:	f7ff fdda 	bl	800348c <__lo0bits>
 80038d8:	2101      	movs	r1, #1
 80038da:	9b01      	ldr	r3, [sp, #4]
 80038dc:	6139      	str	r1, [r7, #16]
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	3020      	adds	r0, #32
 80038e2:	e7e5      	b.n	80038b0 <__d2b+0x54>
 80038e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80038e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80038ec:	6030      	str	r0, [r6, #0]
 80038ee:	6918      	ldr	r0, [r3, #16]
 80038f0:	f7ff fdad 	bl	800344e <__hi0bits>
 80038f4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80038f8:	e7e1      	b.n	80038be <__d2b+0x62>

080038fa <_calloc_r>:
 80038fa:	b538      	push	{r3, r4, r5, lr}
 80038fc:	fb02 f401 	mul.w	r4, r2, r1
 8003900:	4621      	mov	r1, r4
 8003902:	f000 f855 	bl	80039b0 <_malloc_r>
 8003906:	4605      	mov	r5, r0
 8003908:	b118      	cbz	r0, 8003912 <_calloc_r+0x18>
 800390a:	4622      	mov	r2, r4
 800390c:	2100      	movs	r1, #0
 800390e:	f7fe f96d 	bl	8001bec <memset>
 8003912:	4628      	mov	r0, r5
 8003914:	bd38      	pop	{r3, r4, r5, pc}
	...

08003918 <_free_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4605      	mov	r5, r0
 800391c:	2900      	cmp	r1, #0
 800391e:	d043      	beq.n	80039a8 <_free_r+0x90>
 8003920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003924:	1f0c      	subs	r4, r1, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfb8      	it	lt
 800392a:	18e4      	addlt	r4, r4, r3
 800392c:	f000 fc46 	bl	80041bc <__malloc_lock>
 8003930:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <_free_r+0x94>)
 8003932:	6813      	ldr	r3, [r2, #0]
 8003934:	4610      	mov	r0, r2
 8003936:	b933      	cbnz	r3, 8003946 <_free_r+0x2e>
 8003938:	6063      	str	r3, [r4, #4]
 800393a:	6014      	str	r4, [r2, #0]
 800393c:	4628      	mov	r0, r5
 800393e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003942:	f000 bc3c 	b.w	80041be <__malloc_unlock>
 8003946:	42a3      	cmp	r3, r4
 8003948:	d90b      	bls.n	8003962 <_free_r+0x4a>
 800394a:	6821      	ldr	r1, [r4, #0]
 800394c:	1862      	adds	r2, r4, r1
 800394e:	4293      	cmp	r3, r2
 8003950:	bf01      	itttt	eq
 8003952:	681a      	ldreq	r2, [r3, #0]
 8003954:	685b      	ldreq	r3, [r3, #4]
 8003956:	1852      	addeq	r2, r2, r1
 8003958:	6022      	streq	r2, [r4, #0]
 800395a:	6063      	str	r3, [r4, #4]
 800395c:	6004      	str	r4, [r0, #0]
 800395e:	e7ed      	b.n	800393c <_free_r+0x24>
 8003960:	4613      	mov	r3, r2
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	b10a      	cbz	r2, 800396a <_free_r+0x52>
 8003966:	42a2      	cmp	r2, r4
 8003968:	d9fa      	bls.n	8003960 <_free_r+0x48>
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	1858      	adds	r0, r3, r1
 800396e:	42a0      	cmp	r0, r4
 8003970:	d10b      	bne.n	800398a <_free_r+0x72>
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	4401      	add	r1, r0
 8003976:	1858      	adds	r0, r3, r1
 8003978:	4282      	cmp	r2, r0
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	d1de      	bne.n	800393c <_free_r+0x24>
 800397e:	6810      	ldr	r0, [r2, #0]
 8003980:	6852      	ldr	r2, [r2, #4]
 8003982:	4401      	add	r1, r0
 8003984:	6019      	str	r1, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	e7d8      	b.n	800393c <_free_r+0x24>
 800398a:	d902      	bls.n	8003992 <_free_r+0x7a>
 800398c:	230c      	movs	r3, #12
 800398e:	602b      	str	r3, [r5, #0]
 8003990:	e7d4      	b.n	800393c <_free_r+0x24>
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	1821      	adds	r1, r4, r0
 8003996:	428a      	cmp	r2, r1
 8003998:	bf01      	itttt	eq
 800399a:	6811      	ldreq	r1, [r2, #0]
 800399c:	6852      	ldreq	r2, [r2, #4]
 800399e:	1809      	addeq	r1, r1, r0
 80039a0:	6021      	streq	r1, [r4, #0]
 80039a2:	6062      	str	r2, [r4, #4]
 80039a4:	605c      	str	r4, [r3, #4]
 80039a6:	e7c9      	b.n	800393c <_free_r+0x24>
 80039a8:	bd38      	pop	{r3, r4, r5, pc}
 80039aa:	bf00      	nop
 80039ac:	200001fc 	.word	0x200001fc

080039b0 <_malloc_r>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	1ccd      	adds	r5, r1, #3
 80039b4:	f025 0503 	bic.w	r5, r5, #3
 80039b8:	3508      	adds	r5, #8
 80039ba:	2d0c      	cmp	r5, #12
 80039bc:	bf38      	it	cc
 80039be:	250c      	movcc	r5, #12
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	4606      	mov	r6, r0
 80039c4:	db01      	blt.n	80039ca <_malloc_r+0x1a>
 80039c6:	42a9      	cmp	r1, r5
 80039c8:	d903      	bls.n	80039d2 <_malloc_r+0x22>
 80039ca:	230c      	movs	r3, #12
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	2000      	movs	r0, #0
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
 80039d2:	f000 fbf3 	bl	80041bc <__malloc_lock>
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <_malloc_r+0xac>)
 80039d8:	6814      	ldr	r4, [r2, #0]
 80039da:	4621      	mov	r1, r4
 80039dc:	b991      	cbnz	r1, 8003a04 <_malloc_r+0x54>
 80039de:	4c20      	ldr	r4, [pc, #128]	; (8003a60 <_malloc_r+0xb0>)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	b91b      	cbnz	r3, 80039ec <_malloc_r+0x3c>
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 f97b 	bl	8003ce0 <_sbrk_r>
 80039ea:	6020      	str	r0, [r4, #0]
 80039ec:	4629      	mov	r1, r5
 80039ee:	4630      	mov	r0, r6
 80039f0:	f000 f976 	bl	8003ce0 <_sbrk_r>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d124      	bne.n	8003a42 <_malloc_r+0x92>
 80039f8:	230c      	movs	r3, #12
 80039fa:	4630      	mov	r0, r6
 80039fc:	6033      	str	r3, [r6, #0]
 80039fe:	f000 fbde 	bl	80041be <__malloc_unlock>
 8003a02:	e7e4      	b.n	80039ce <_malloc_r+0x1e>
 8003a04:	680b      	ldr	r3, [r1, #0]
 8003a06:	1b5b      	subs	r3, r3, r5
 8003a08:	d418      	bmi.n	8003a3c <_malloc_r+0x8c>
 8003a0a:	2b0b      	cmp	r3, #11
 8003a0c:	d90f      	bls.n	8003a2e <_malloc_r+0x7e>
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	18cc      	adds	r4, r1, r3
 8003a12:	50cd      	str	r5, [r1, r3]
 8003a14:	4630      	mov	r0, r6
 8003a16:	f000 fbd2 	bl	80041be <__malloc_unlock>
 8003a1a:	f104 000b 	add.w	r0, r4, #11
 8003a1e:	1d23      	adds	r3, r4, #4
 8003a20:	f020 0007 	bic.w	r0, r0, #7
 8003a24:	1ac3      	subs	r3, r0, r3
 8003a26:	d0d3      	beq.n	80039d0 <_malloc_r+0x20>
 8003a28:	425a      	negs	r2, r3
 8003a2a:	50e2      	str	r2, [r4, r3]
 8003a2c:	e7d0      	b.n	80039d0 <_malloc_r+0x20>
 8003a2e:	684b      	ldr	r3, [r1, #4]
 8003a30:	428c      	cmp	r4, r1
 8003a32:	bf16      	itet	ne
 8003a34:	6063      	strne	r3, [r4, #4]
 8003a36:	6013      	streq	r3, [r2, #0]
 8003a38:	460c      	movne	r4, r1
 8003a3a:	e7eb      	b.n	8003a14 <_malloc_r+0x64>
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	6849      	ldr	r1, [r1, #4]
 8003a40:	e7cc      	b.n	80039dc <_malloc_r+0x2c>
 8003a42:	1cc4      	adds	r4, r0, #3
 8003a44:	f024 0403 	bic.w	r4, r4, #3
 8003a48:	42a0      	cmp	r0, r4
 8003a4a:	d005      	beq.n	8003a58 <_malloc_r+0xa8>
 8003a4c:	1a21      	subs	r1, r4, r0
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f000 f946 	bl	8003ce0 <_sbrk_r>
 8003a54:	3001      	adds	r0, #1
 8003a56:	d0cf      	beq.n	80039f8 <_malloc_r+0x48>
 8003a58:	6025      	str	r5, [r4, #0]
 8003a5a:	e7db      	b.n	8003a14 <_malloc_r+0x64>
 8003a5c:	200001fc 	.word	0x200001fc
 8003a60:	20000200 	.word	0x20000200

08003a64 <__sfputc_r>:
 8003a64:	6893      	ldr	r3, [r2, #8]
 8003a66:	b410      	push	{r4}
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	6093      	str	r3, [r2, #8]
 8003a6e:	da07      	bge.n	8003a80 <__sfputc_r+0x1c>
 8003a70:	6994      	ldr	r4, [r2, #24]
 8003a72:	42a3      	cmp	r3, r4
 8003a74:	db01      	blt.n	8003a7a <__sfputc_r+0x16>
 8003a76:	290a      	cmp	r1, #10
 8003a78:	d102      	bne.n	8003a80 <__sfputc_r+0x1c>
 8003a7a:	bc10      	pop	{r4}
 8003a7c:	f000 b984 	b.w	8003d88 <__swbuf_r>
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	1c58      	adds	r0, r3, #1
 8003a84:	6010      	str	r0, [r2, #0]
 8003a86:	7019      	strb	r1, [r3, #0]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	bc10      	pop	{r4}
 8003a8c:	4770      	bx	lr

08003a8e <__sfputs_r>:
 8003a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a90:	4606      	mov	r6, r0
 8003a92:	460f      	mov	r7, r1
 8003a94:	4614      	mov	r4, r2
 8003a96:	18d5      	adds	r5, r2, r3
 8003a98:	42ac      	cmp	r4, r5
 8003a9a:	d101      	bne.n	8003aa0 <__sfputs_r+0x12>
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	e007      	b.n	8003ab0 <__sfputs_r+0x22>
 8003aa0:	463a      	mov	r2, r7
 8003aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f7ff ffdc 	bl	8003a64 <__sfputc_r>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d1f3      	bne.n	8003a98 <__sfputs_r+0xa>
 8003ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ab4 <_vfiprintf_r>:
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab8:	460c      	mov	r4, r1
 8003aba:	b09d      	sub	sp, #116	; 0x74
 8003abc:	4617      	mov	r7, r2
 8003abe:	461d      	mov	r5, r3
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	b118      	cbz	r0, 8003acc <_vfiprintf_r+0x18>
 8003ac4:	6983      	ldr	r3, [r0, #24]
 8003ac6:	b90b      	cbnz	r3, 8003acc <_vfiprintf_r+0x18>
 8003ac8:	f7ff fb82 	bl	80031d0 <__sinit>
 8003acc:	4b7c      	ldr	r3, [pc, #496]	; (8003cc0 <_vfiprintf_r+0x20c>)
 8003ace:	429c      	cmp	r4, r3
 8003ad0:	d158      	bne.n	8003b84 <_vfiprintf_r+0xd0>
 8003ad2:	6874      	ldr	r4, [r6, #4]
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	0718      	lsls	r0, r3, #28
 8003ad8:	d55e      	bpl.n	8003b98 <_vfiprintf_r+0xe4>
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05b      	beq.n	8003b98 <_vfiprintf_r+0xe4>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aea:	2330      	movs	r3, #48	; 0x30
 8003aec:	f04f 0b01 	mov.w	fp, #1
 8003af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003af4:	9503      	str	r5, [sp, #12]
 8003af6:	46b8      	mov	r8, r7
 8003af8:	4645      	mov	r5, r8
 8003afa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003afe:	b10b      	cbz	r3, 8003b04 <_vfiprintf_r+0x50>
 8003b00:	2b25      	cmp	r3, #37	; 0x25
 8003b02:	d154      	bne.n	8003bae <_vfiprintf_r+0xfa>
 8003b04:	ebb8 0a07 	subs.w	sl, r8, r7
 8003b08:	d00b      	beq.n	8003b22 <_vfiprintf_r+0x6e>
 8003b0a:	4653      	mov	r3, sl
 8003b0c:	463a      	mov	r2, r7
 8003b0e:	4621      	mov	r1, r4
 8003b10:	4630      	mov	r0, r6
 8003b12:	f7ff ffbc 	bl	8003a8e <__sfputs_r>
 8003b16:	3001      	adds	r0, #1
 8003b18:	f000 80c2 	beq.w	8003ca0 <_vfiprintf_r+0x1ec>
 8003b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1e:	4453      	add	r3, sl
 8003b20:	9309      	str	r3, [sp, #36]	; 0x24
 8003b22:	f898 3000 	ldrb.w	r3, [r8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80ba 	beq.w	8003ca0 <_vfiprintf_r+0x1ec>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b36:	9304      	str	r3, [sp, #16]
 8003b38:	9307      	str	r3, [sp, #28]
 8003b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b40:	46a8      	mov	r8, r5
 8003b42:	2205      	movs	r2, #5
 8003b44:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003b48:	485e      	ldr	r0, [pc, #376]	; (8003cc4 <_vfiprintf_r+0x210>)
 8003b4a:	f7ff fbe1 	bl	8003310 <memchr>
 8003b4e:	9b04      	ldr	r3, [sp, #16]
 8003b50:	bb78      	cbnz	r0, 8003bb2 <_vfiprintf_r+0xfe>
 8003b52:	06d9      	lsls	r1, r3, #27
 8003b54:	bf44      	itt	mi
 8003b56:	2220      	movmi	r2, #32
 8003b58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b5c:	071a      	lsls	r2, r3, #28
 8003b5e:	bf44      	itt	mi
 8003b60:	222b      	movmi	r2, #43	; 0x2b
 8003b62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b66:	782a      	ldrb	r2, [r5, #0]
 8003b68:	2a2a      	cmp	r2, #42	; 0x2a
 8003b6a:	d02a      	beq.n	8003bc2 <_vfiprintf_r+0x10e>
 8003b6c:	46a8      	mov	r8, r5
 8003b6e:	2000      	movs	r0, #0
 8003b70:	250a      	movs	r5, #10
 8003b72:	9a07      	ldr	r2, [sp, #28]
 8003b74:	4641      	mov	r1, r8
 8003b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b7a:	3b30      	subs	r3, #48	; 0x30
 8003b7c:	2b09      	cmp	r3, #9
 8003b7e:	d969      	bls.n	8003c54 <_vfiprintf_r+0x1a0>
 8003b80:	b360      	cbz	r0, 8003bdc <_vfiprintf_r+0x128>
 8003b82:	e024      	b.n	8003bce <_vfiprintf_r+0x11a>
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <_vfiprintf_r+0x214>)
 8003b86:	429c      	cmp	r4, r3
 8003b88:	d101      	bne.n	8003b8e <_vfiprintf_r+0xda>
 8003b8a:	68b4      	ldr	r4, [r6, #8]
 8003b8c:	e7a2      	b.n	8003ad4 <_vfiprintf_r+0x20>
 8003b8e:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <_vfiprintf_r+0x218>)
 8003b90:	429c      	cmp	r4, r3
 8003b92:	bf08      	it	eq
 8003b94:	68f4      	ldreq	r4, [r6, #12]
 8003b96:	e79d      	b.n	8003ad4 <_vfiprintf_r+0x20>
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f000 f958 	bl	8003e50 <__swsetup_r>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d09d      	beq.n	8003ae0 <_vfiprintf_r+0x2c>
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	b01d      	add	sp, #116	; 0x74
 8003baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bae:	46a8      	mov	r8, r5
 8003bb0:	e7a2      	b.n	8003af8 <_vfiprintf_r+0x44>
 8003bb2:	4a44      	ldr	r2, [pc, #272]	; (8003cc4 <_vfiprintf_r+0x210>)
 8003bb4:	4645      	mov	r5, r8
 8003bb6:	1a80      	subs	r0, r0, r2
 8003bb8:	fa0b f000 	lsl.w	r0, fp, r0
 8003bbc:	4318      	orrs	r0, r3
 8003bbe:	9004      	str	r0, [sp, #16]
 8003bc0:	e7be      	b.n	8003b40 <_vfiprintf_r+0x8c>
 8003bc2:	9a03      	ldr	r2, [sp, #12]
 8003bc4:	1d11      	adds	r1, r2, #4
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	9103      	str	r1, [sp, #12]
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	db01      	blt.n	8003bd2 <_vfiprintf_r+0x11e>
 8003bce:	9207      	str	r2, [sp, #28]
 8003bd0:	e004      	b.n	8003bdc <_vfiprintf_r+0x128>
 8003bd2:	4252      	negs	r2, r2
 8003bd4:	f043 0302 	orr.w	r3, r3, #2
 8003bd8:	9207      	str	r2, [sp, #28]
 8003bda:	9304      	str	r3, [sp, #16]
 8003bdc:	f898 3000 	ldrb.w	r3, [r8]
 8003be0:	2b2e      	cmp	r3, #46	; 0x2e
 8003be2:	d10e      	bne.n	8003c02 <_vfiprintf_r+0x14e>
 8003be4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003be8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bea:	d138      	bne.n	8003c5e <_vfiprintf_r+0x1aa>
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	f108 0802 	add.w	r8, r8, #2
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	9203      	str	r2, [sp, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bfb8      	it	lt
 8003bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c00:	9305      	str	r3, [sp, #20]
 8003c02:	4d33      	ldr	r5, [pc, #204]	; (8003cd0 <_vfiprintf_r+0x21c>)
 8003c04:	2203      	movs	r2, #3
 8003c06:	f898 1000 	ldrb.w	r1, [r8]
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f7ff fb80 	bl	8003310 <memchr>
 8003c10:	b140      	cbz	r0, 8003c24 <_vfiprintf_r+0x170>
 8003c12:	2340      	movs	r3, #64	; 0x40
 8003c14:	1b40      	subs	r0, r0, r5
 8003c16:	fa03 f000 	lsl.w	r0, r3, r0
 8003c1a:	9b04      	ldr	r3, [sp, #16]
 8003c1c:	f108 0801 	add.w	r8, r8, #1
 8003c20:	4303      	orrs	r3, r0
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	f898 1000 	ldrb.w	r1, [r8]
 8003c28:	2206      	movs	r2, #6
 8003c2a:	482a      	ldr	r0, [pc, #168]	; (8003cd4 <_vfiprintf_r+0x220>)
 8003c2c:	f108 0701 	add.w	r7, r8, #1
 8003c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c34:	f7ff fb6c 	bl	8003310 <memchr>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d037      	beq.n	8003cac <_vfiprintf_r+0x1f8>
 8003c3c:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <_vfiprintf_r+0x224>)
 8003c3e:	bb1b      	cbnz	r3, 8003c88 <_vfiprintf_r+0x1d4>
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	3307      	adds	r3, #7
 8003c44:	f023 0307 	bic.w	r3, r3, #7
 8003c48:	3308      	adds	r3, #8
 8003c4a:	9303      	str	r3, [sp, #12]
 8003c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c4e:	444b      	add	r3, r9
 8003c50:	9309      	str	r3, [sp, #36]	; 0x24
 8003c52:	e750      	b.n	8003af6 <_vfiprintf_r+0x42>
 8003c54:	fb05 3202 	mla	r2, r5, r2, r3
 8003c58:	2001      	movs	r0, #1
 8003c5a:	4688      	mov	r8, r1
 8003c5c:	e78a      	b.n	8003b74 <_vfiprintf_r+0xc0>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	250a      	movs	r5, #10
 8003c62:	4619      	mov	r1, r3
 8003c64:	f108 0801 	add.w	r8, r8, #1
 8003c68:	9305      	str	r3, [sp, #20]
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c70:	3a30      	subs	r2, #48	; 0x30
 8003c72:	2a09      	cmp	r2, #9
 8003c74:	d903      	bls.n	8003c7e <_vfiprintf_r+0x1ca>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0c3      	beq.n	8003c02 <_vfiprintf_r+0x14e>
 8003c7a:	9105      	str	r1, [sp, #20]
 8003c7c:	e7c1      	b.n	8003c02 <_vfiprintf_r+0x14e>
 8003c7e:	fb05 2101 	mla	r1, r5, r1, r2
 8003c82:	2301      	movs	r3, #1
 8003c84:	4680      	mov	r8, r0
 8003c86:	e7f0      	b.n	8003c6a <_vfiprintf_r+0x1b6>
 8003c88:	ab03      	add	r3, sp, #12
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <_vfiprintf_r+0x228>)
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	4630      	mov	r0, r6
 8003c94:	f7fe f844 	bl	8001d20 <_printf_float>
 8003c98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c9c:	4681      	mov	r9, r0
 8003c9e:	d1d5      	bne.n	8003c4c <_vfiprintf_r+0x198>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	065b      	lsls	r3, r3, #25
 8003ca4:	f53f af7e 	bmi.w	8003ba4 <_vfiprintf_r+0xf0>
 8003ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003caa:	e77d      	b.n	8003ba8 <_vfiprintf_r+0xf4>
 8003cac:	ab03      	add	r3, sp, #12
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4622      	mov	r2, r4
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <_vfiprintf_r+0x228>)
 8003cb4:	a904      	add	r1, sp, #16
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	f7fe fade 	bl	8002278 <_printf_i>
 8003cbc:	e7ec      	b.n	8003c98 <_vfiprintf_r+0x1e4>
 8003cbe:	bf00      	nop
 8003cc0:	08004308 	.word	0x08004308
 8003cc4:	08004444 	.word	0x08004444
 8003cc8:	08004328 	.word	0x08004328
 8003ccc:	080042e8 	.word	0x080042e8
 8003cd0:	0800444a 	.word	0x0800444a
 8003cd4:	0800444e 	.word	0x0800444e
 8003cd8:	08001d21 	.word	0x08001d21
 8003cdc:	08003a8f 	.word	0x08003a8f

08003ce0 <_sbrk_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	4c05      	ldr	r4, [pc, #20]	; (8003cfc <_sbrk_r+0x1c>)
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	4608      	mov	r0, r1
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	f7fd f972 	bl	8000fd4 <_sbrk>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d102      	bne.n	8003cfa <_sbrk_r+0x1a>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	b103      	cbz	r3, 8003cfa <_sbrk_r+0x1a>
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	2000020c 	.word	0x2000020c

08003d00 <__sread>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	460c      	mov	r4, r1
 8003d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d08:	f000 fa5a 	bl	80041c0 <_read_r>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	bfab      	itete	ge
 8003d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d12:	89a3      	ldrhlt	r3, [r4, #12]
 8003d14:	181b      	addge	r3, r3, r0
 8003d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d1a:	bfac      	ite	ge
 8003d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d1e:	81a3      	strhlt	r3, [r4, #12]
 8003d20:	bd10      	pop	{r4, pc}

08003d22 <__swrite>:
 8003d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d26:	461f      	mov	r7, r3
 8003d28:	898b      	ldrh	r3, [r1, #12]
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	05db      	lsls	r3, r3, #23
 8003d2e:	460c      	mov	r4, r1
 8003d30:	4616      	mov	r6, r2
 8003d32:	d505      	bpl.n	8003d40 <__swrite+0x1e>
 8003d34:	2302      	movs	r3, #2
 8003d36:	2200      	movs	r2, #0
 8003d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3c:	f000 f9b6 	bl	80040ac <_lseek_r>
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	4632      	mov	r2, r6
 8003d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d4e:	463b      	mov	r3, r7
 8003d50:	4628      	mov	r0, r5
 8003d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d56:	f000 b869 	b.w	8003e2c <_write_r>

08003d5a <__sseek>:
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d62:	f000 f9a3 	bl	80040ac <_lseek_r>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	bf15      	itete	ne
 8003d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d76:	81a3      	strheq	r3, [r4, #12]
 8003d78:	bf18      	it	ne
 8003d7a:	81a3      	strhne	r3, [r4, #12]
 8003d7c:	bd10      	pop	{r4, pc}

08003d7e <__sclose>:
 8003d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d82:	f000 b8d3 	b.w	8003f2c <_close_r>
	...

08003d88 <__swbuf_r>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	460e      	mov	r6, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	4605      	mov	r5, r0
 8003d90:	b118      	cbz	r0, 8003d9a <__swbuf_r+0x12>
 8003d92:	6983      	ldr	r3, [r0, #24]
 8003d94:	b90b      	cbnz	r3, 8003d9a <__swbuf_r+0x12>
 8003d96:	f7ff fa1b 	bl	80031d0 <__sinit>
 8003d9a:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <__swbuf_r+0x98>)
 8003d9c:	429c      	cmp	r4, r3
 8003d9e:	d12a      	bne.n	8003df6 <__swbuf_r+0x6e>
 8003da0:	686c      	ldr	r4, [r5, #4]
 8003da2:	69a3      	ldr	r3, [r4, #24]
 8003da4:	60a3      	str	r3, [r4, #8]
 8003da6:	89a3      	ldrh	r3, [r4, #12]
 8003da8:	071a      	lsls	r2, r3, #28
 8003daa:	d52e      	bpl.n	8003e0a <__swbuf_r+0x82>
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	b363      	cbz	r3, 8003e0a <__swbuf_r+0x82>
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	6820      	ldr	r0, [r4, #0]
 8003db4:	b2f6      	uxtb	r6, r6
 8003db6:	1ac0      	subs	r0, r0, r3
 8003db8:	6963      	ldr	r3, [r4, #20]
 8003dba:	4637      	mov	r7, r6
 8003dbc:	4283      	cmp	r3, r0
 8003dbe:	dc04      	bgt.n	8003dca <__swbuf_r+0x42>
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 f948 	bl	8004058 <_fflush_r>
 8003dc8:	bb28      	cbnz	r0, 8003e16 <__swbuf_r+0x8e>
 8003dca:	68a3      	ldr	r3, [r4, #8]
 8003dcc:	3001      	adds	r0, #1
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	60a3      	str	r3, [r4, #8]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	6022      	str	r2, [r4, #0]
 8003dd8:	701e      	strb	r6, [r3, #0]
 8003dda:	6963      	ldr	r3, [r4, #20]
 8003ddc:	4283      	cmp	r3, r0
 8003dde:	d004      	beq.n	8003dea <__swbuf_r+0x62>
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	07db      	lsls	r3, r3, #31
 8003de4:	d519      	bpl.n	8003e1a <__swbuf_r+0x92>
 8003de6:	2e0a      	cmp	r6, #10
 8003de8:	d117      	bne.n	8003e1a <__swbuf_r+0x92>
 8003dea:	4621      	mov	r1, r4
 8003dec:	4628      	mov	r0, r5
 8003dee:	f000 f933 	bl	8004058 <_fflush_r>
 8003df2:	b190      	cbz	r0, 8003e1a <__swbuf_r+0x92>
 8003df4:	e00f      	b.n	8003e16 <__swbuf_r+0x8e>
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <__swbuf_r+0x9c>)
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	d101      	bne.n	8003e00 <__swbuf_r+0x78>
 8003dfc:	68ac      	ldr	r4, [r5, #8]
 8003dfe:	e7d0      	b.n	8003da2 <__swbuf_r+0x1a>
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <__swbuf_r+0xa0>)
 8003e02:	429c      	cmp	r4, r3
 8003e04:	bf08      	it	eq
 8003e06:	68ec      	ldreq	r4, [r5, #12]
 8003e08:	e7cb      	b.n	8003da2 <__swbuf_r+0x1a>
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f81f 	bl	8003e50 <__swsetup_r>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d0cc      	beq.n	8003db0 <__swbuf_r+0x28>
 8003e16:	f04f 37ff 	mov.w	r7, #4294967295
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	08004308 	.word	0x08004308
 8003e24:	08004328 	.word	0x08004328
 8003e28:	080042e8 	.word	0x080042e8

08003e2c <_write_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4605      	mov	r5, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	2200      	movs	r2, #0
 8003e36:	4c05      	ldr	r4, [pc, #20]	; (8003e4c <_write_r+0x20>)
 8003e38:	6022      	str	r2, [r4, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f7fc ff58 	bl	8000cf0 <_write>
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	d102      	bne.n	8003e4a <_write_r+0x1e>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	b103      	cbz	r3, 8003e4a <_write_r+0x1e>
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	2000020c 	.word	0x2000020c

08003e50 <__swsetup_r>:
 8003e50:	4b32      	ldr	r3, [pc, #200]	; (8003f1c <__swsetup_r+0xcc>)
 8003e52:	b570      	push	{r4, r5, r6, lr}
 8003e54:	681d      	ldr	r5, [r3, #0]
 8003e56:	4606      	mov	r6, r0
 8003e58:	460c      	mov	r4, r1
 8003e5a:	b125      	cbz	r5, 8003e66 <__swsetup_r+0x16>
 8003e5c:	69ab      	ldr	r3, [r5, #24]
 8003e5e:	b913      	cbnz	r3, 8003e66 <__swsetup_r+0x16>
 8003e60:	4628      	mov	r0, r5
 8003e62:	f7ff f9b5 	bl	80031d0 <__sinit>
 8003e66:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <__swsetup_r+0xd0>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d10f      	bne.n	8003e8c <__swsetup_r+0x3c>
 8003e6c:	686c      	ldr	r4, [r5, #4]
 8003e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	0715      	lsls	r5, r2, #28
 8003e76:	d42c      	bmi.n	8003ed2 <__swsetup_r+0x82>
 8003e78:	06d0      	lsls	r0, r2, #27
 8003e7a:	d411      	bmi.n	8003ea0 <__swsetup_r+0x50>
 8003e7c:	2209      	movs	r2, #9
 8003e7e:	6032      	str	r2, [r6, #0]
 8003e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8a:	e03e      	b.n	8003f0a <__swsetup_r+0xba>
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <__swsetup_r+0xd4>)
 8003e8e:	429c      	cmp	r4, r3
 8003e90:	d101      	bne.n	8003e96 <__swsetup_r+0x46>
 8003e92:	68ac      	ldr	r4, [r5, #8]
 8003e94:	e7eb      	b.n	8003e6e <__swsetup_r+0x1e>
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <__swsetup_r+0xd8>)
 8003e98:	429c      	cmp	r4, r3
 8003e9a:	bf08      	it	eq
 8003e9c:	68ec      	ldreq	r4, [r5, #12]
 8003e9e:	e7e6      	b.n	8003e6e <__swsetup_r+0x1e>
 8003ea0:	0751      	lsls	r1, r2, #29
 8003ea2:	d512      	bpl.n	8003eca <__swsetup_r+0x7a>
 8003ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ea6:	b141      	cbz	r1, 8003eba <__swsetup_r+0x6a>
 8003ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eac:	4299      	cmp	r1, r3
 8003eae:	d002      	beq.n	8003eb6 <__swsetup_r+0x66>
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f7ff fd31 	bl	8003918 <_free_r>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6363      	str	r3, [r4, #52]	; 0x34
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ec0:	81a3      	strh	r3, [r4, #12]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6063      	str	r3, [r4, #4]
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	f043 0308 	orr.w	r3, r3, #8
 8003ed0:	81a3      	strh	r3, [r4, #12]
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	b94b      	cbnz	r3, 8003eea <__swsetup_r+0x9a>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee0:	d003      	beq.n	8003eea <__swsetup_r+0x9a>
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f000 f917 	bl	8004118 <__smakebuf_r>
 8003eea:	89a2      	ldrh	r2, [r4, #12]
 8003eec:	f012 0301 	ands.w	r3, r2, #1
 8003ef0:	d00c      	beq.n	8003f0c <__swsetup_r+0xbc>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60a3      	str	r3, [r4, #8]
 8003ef6:	6963      	ldr	r3, [r4, #20]
 8003ef8:	425b      	negs	r3, r3
 8003efa:	61a3      	str	r3, [r4, #24]
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	b953      	cbnz	r3, 8003f16 <__swsetup_r+0xc6>
 8003f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003f08:	d1ba      	bne.n	8003e80 <__swsetup_r+0x30>
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	0792      	lsls	r2, r2, #30
 8003f0e:	bf58      	it	pl
 8003f10:	6963      	ldrpl	r3, [r4, #20]
 8003f12:	60a3      	str	r3, [r4, #8]
 8003f14:	e7f2      	b.n	8003efc <__swsetup_r+0xac>
 8003f16:	2000      	movs	r0, #0
 8003f18:	e7f7      	b.n	8003f0a <__swsetup_r+0xba>
 8003f1a:	bf00      	nop
 8003f1c:	2000000c 	.word	0x2000000c
 8003f20:	08004308 	.word	0x08004308
 8003f24:	08004328 	.word	0x08004328
 8003f28:	080042e8 	.word	0x080042e8

08003f2c <_close_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	2300      	movs	r3, #0
 8003f30:	4c05      	ldr	r4, [pc, #20]	; (8003f48 <_close_r+0x1c>)
 8003f32:	4605      	mov	r5, r0
 8003f34:	4608      	mov	r0, r1
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	f7fd f81b 	bl	8000f72 <_close>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d102      	bne.n	8003f46 <_close_r+0x1a>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	b103      	cbz	r3, 8003f46 <_close_r+0x1a>
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	2000020c 	.word	0x2000020c

08003f4c <__sflush_r>:
 8003f4c:	898a      	ldrh	r2, [r1, #12]
 8003f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	4605      	mov	r5, r0
 8003f54:	0710      	lsls	r0, r2, #28
 8003f56:	460c      	mov	r4, r1
 8003f58:	d458      	bmi.n	800400c <__sflush_r+0xc0>
 8003f5a:	684b      	ldr	r3, [r1, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	dc05      	bgt.n	8003f6c <__sflush_r+0x20>
 8003f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	dc02      	bgt.n	8003f6c <__sflush_r+0x20>
 8003f66:	2000      	movs	r0, #0
 8003f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f6e:	2e00      	cmp	r6, #0
 8003f70:	d0f9      	beq.n	8003f66 <__sflush_r+0x1a>
 8003f72:	2300      	movs	r3, #0
 8003f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f78:	682f      	ldr	r7, [r5, #0]
 8003f7a:	6a21      	ldr	r1, [r4, #32]
 8003f7c:	602b      	str	r3, [r5, #0]
 8003f7e:	d032      	beq.n	8003fe6 <__sflush_r+0x9a>
 8003f80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	075a      	lsls	r2, r3, #29
 8003f86:	d505      	bpl.n	8003f94 <__sflush_r+0x48>
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	1ac0      	subs	r0, r0, r3
 8003f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f8e:	b10b      	cbz	r3, 8003f94 <__sflush_r+0x48>
 8003f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f92:	1ac0      	subs	r0, r0, r3
 8003f94:	2300      	movs	r3, #0
 8003f96:	4602      	mov	r2, r0
 8003f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f9a:	6a21      	ldr	r1, [r4, #32]
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	47b0      	blx	r6
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	d106      	bne.n	8003fb4 <__sflush_r+0x68>
 8003fa6:	6829      	ldr	r1, [r5, #0]
 8003fa8:	291d      	cmp	r1, #29
 8003faa:	d848      	bhi.n	800403e <__sflush_r+0xf2>
 8003fac:	4a29      	ldr	r2, [pc, #164]	; (8004054 <__sflush_r+0x108>)
 8003fae:	40ca      	lsrs	r2, r1
 8003fb0:	07d6      	lsls	r6, r2, #31
 8003fb2:	d544      	bpl.n	800403e <__sflush_r+0xf2>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	6062      	str	r2, [r4, #4]
 8003fb8:	6922      	ldr	r2, [r4, #16]
 8003fba:	04d9      	lsls	r1, r3, #19
 8003fbc:	6022      	str	r2, [r4, #0]
 8003fbe:	d504      	bpl.n	8003fca <__sflush_r+0x7e>
 8003fc0:	1c42      	adds	r2, r0, #1
 8003fc2:	d101      	bne.n	8003fc8 <__sflush_r+0x7c>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b903      	cbnz	r3, 8003fca <__sflush_r+0x7e>
 8003fc8:	6560      	str	r0, [r4, #84]	; 0x54
 8003fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fcc:	602f      	str	r7, [r5, #0]
 8003fce:	2900      	cmp	r1, #0
 8003fd0:	d0c9      	beq.n	8003f66 <__sflush_r+0x1a>
 8003fd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	d002      	beq.n	8003fe0 <__sflush_r+0x94>
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7ff fc9c 	bl	8003918 <_free_r>
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	6360      	str	r0, [r4, #52]	; 0x34
 8003fe4:	e7c0      	b.n	8003f68 <__sflush_r+0x1c>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b0      	blx	r6
 8003fec:	1c41      	adds	r1, r0, #1
 8003fee:	d1c8      	bne.n	8003f82 <__sflush_r+0x36>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0c5      	beq.n	8003f82 <__sflush_r+0x36>
 8003ff6:	2b1d      	cmp	r3, #29
 8003ff8:	d001      	beq.n	8003ffe <__sflush_r+0xb2>
 8003ffa:	2b16      	cmp	r3, #22
 8003ffc:	d101      	bne.n	8004002 <__sflush_r+0xb6>
 8003ffe:	602f      	str	r7, [r5, #0]
 8004000:	e7b1      	b.n	8003f66 <__sflush_r+0x1a>
 8004002:	89a3      	ldrh	r3, [r4, #12]
 8004004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004008:	81a3      	strh	r3, [r4, #12]
 800400a:	e7ad      	b.n	8003f68 <__sflush_r+0x1c>
 800400c:	690f      	ldr	r7, [r1, #16]
 800400e:	2f00      	cmp	r7, #0
 8004010:	d0a9      	beq.n	8003f66 <__sflush_r+0x1a>
 8004012:	0793      	lsls	r3, r2, #30
 8004014:	bf18      	it	ne
 8004016:	2300      	movne	r3, #0
 8004018:	680e      	ldr	r6, [r1, #0]
 800401a:	bf08      	it	eq
 800401c:	694b      	ldreq	r3, [r1, #20]
 800401e:	eba6 0807 	sub.w	r8, r6, r7
 8004022:	600f      	str	r7, [r1, #0]
 8004024:	608b      	str	r3, [r1, #8]
 8004026:	f1b8 0f00 	cmp.w	r8, #0
 800402a:	dd9c      	ble.n	8003f66 <__sflush_r+0x1a>
 800402c:	4643      	mov	r3, r8
 800402e:	463a      	mov	r2, r7
 8004030:	6a21      	ldr	r1, [r4, #32]
 8004032:	4628      	mov	r0, r5
 8004034:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004036:	47b0      	blx	r6
 8004038:	2800      	cmp	r0, #0
 800403a:	dc06      	bgt.n	800404a <__sflush_r+0xfe>
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	e78e      	b.n	8003f68 <__sflush_r+0x1c>
 800404a:	4407      	add	r7, r0
 800404c:	eba8 0800 	sub.w	r8, r8, r0
 8004050:	e7e9      	b.n	8004026 <__sflush_r+0xda>
 8004052:	bf00      	nop
 8004054:	20400001 	.word	0x20400001

08004058 <_fflush_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	690b      	ldr	r3, [r1, #16]
 800405c:	4605      	mov	r5, r0
 800405e:	460c      	mov	r4, r1
 8004060:	b1db      	cbz	r3, 800409a <_fflush_r+0x42>
 8004062:	b118      	cbz	r0, 800406c <_fflush_r+0x14>
 8004064:	6983      	ldr	r3, [r0, #24]
 8004066:	b90b      	cbnz	r3, 800406c <_fflush_r+0x14>
 8004068:	f7ff f8b2 	bl	80031d0 <__sinit>
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <_fflush_r+0x48>)
 800406e:	429c      	cmp	r4, r3
 8004070:	d109      	bne.n	8004086 <_fflush_r+0x2e>
 8004072:	686c      	ldr	r4, [r5, #4]
 8004074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004078:	b17b      	cbz	r3, 800409a <_fflush_r+0x42>
 800407a:	4621      	mov	r1, r4
 800407c:	4628      	mov	r0, r5
 800407e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004082:	f7ff bf63 	b.w	8003f4c <__sflush_r>
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <_fflush_r+0x4c>)
 8004088:	429c      	cmp	r4, r3
 800408a:	d101      	bne.n	8004090 <_fflush_r+0x38>
 800408c:	68ac      	ldr	r4, [r5, #8]
 800408e:	e7f1      	b.n	8004074 <_fflush_r+0x1c>
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <_fflush_r+0x50>)
 8004092:	429c      	cmp	r4, r3
 8004094:	bf08      	it	eq
 8004096:	68ec      	ldreq	r4, [r5, #12]
 8004098:	e7ec      	b.n	8004074 <_fflush_r+0x1c>
 800409a:	2000      	movs	r0, #0
 800409c:	bd38      	pop	{r3, r4, r5, pc}
 800409e:	bf00      	nop
 80040a0:	08004308 	.word	0x08004308
 80040a4:	08004328 	.word	0x08004328
 80040a8:	080042e8 	.word	0x080042e8

080040ac <_lseek_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4605      	mov	r5, r0
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	2200      	movs	r2, #0
 80040b6:	4c05      	ldr	r4, [pc, #20]	; (80040cc <_lseek_r+0x20>)
 80040b8:	6022      	str	r2, [r4, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f7fc ff7d 	bl	8000fba <_lseek>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_lseek_r+0x1e>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_lseek_r+0x1e>
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	2000020c 	.word	0x2000020c

080040d0 <__swhatbuf_r>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	460e      	mov	r6, r1
 80040d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d8:	b096      	sub	sp, #88	; 0x58
 80040da:	2900      	cmp	r1, #0
 80040dc:	4614      	mov	r4, r2
 80040de:	461d      	mov	r5, r3
 80040e0:	da07      	bge.n	80040f2 <__swhatbuf_r+0x22>
 80040e2:	2300      	movs	r3, #0
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	89b3      	ldrh	r3, [r6, #12]
 80040e8:	061a      	lsls	r2, r3, #24
 80040ea:	d410      	bmi.n	800410e <__swhatbuf_r+0x3e>
 80040ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f0:	e00e      	b.n	8004110 <__swhatbuf_r+0x40>
 80040f2:	466a      	mov	r2, sp
 80040f4:	f000 f884 	bl	8004200 <_fstat_r>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	dbf2      	blt.n	80040e2 <__swhatbuf_r+0x12>
 80040fc:	9a01      	ldr	r2, [sp, #4]
 80040fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004106:	425a      	negs	r2, r3
 8004108:	415a      	adcs	r2, r3
 800410a:	602a      	str	r2, [r5, #0]
 800410c:	e7ee      	b.n	80040ec <__swhatbuf_r+0x1c>
 800410e:	2340      	movs	r3, #64	; 0x40
 8004110:	2000      	movs	r0, #0
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	b016      	add	sp, #88	; 0x58
 8004116:	bd70      	pop	{r4, r5, r6, pc}

08004118 <__smakebuf_r>:
 8004118:	898b      	ldrh	r3, [r1, #12]
 800411a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800411c:	079d      	lsls	r5, r3, #30
 800411e:	4606      	mov	r6, r0
 8004120:	460c      	mov	r4, r1
 8004122:	d507      	bpl.n	8004134 <__smakebuf_r+0x1c>
 8004124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	6123      	str	r3, [r4, #16]
 800412c:	2301      	movs	r3, #1
 800412e:	6163      	str	r3, [r4, #20]
 8004130:	b002      	add	sp, #8
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	ab01      	add	r3, sp, #4
 8004136:	466a      	mov	r2, sp
 8004138:	f7ff ffca 	bl	80040d0 <__swhatbuf_r>
 800413c:	9900      	ldr	r1, [sp, #0]
 800413e:	4605      	mov	r5, r0
 8004140:	4630      	mov	r0, r6
 8004142:	f7ff fc35 	bl	80039b0 <_malloc_r>
 8004146:	b948      	cbnz	r0, 800415c <__smakebuf_r+0x44>
 8004148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800414c:	059a      	lsls	r2, r3, #22
 800414e:	d4ef      	bmi.n	8004130 <__smakebuf_r+0x18>
 8004150:	f023 0303 	bic.w	r3, r3, #3
 8004154:	f043 0302 	orr.w	r3, r3, #2
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	e7e3      	b.n	8004124 <__smakebuf_r+0xc>
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <__smakebuf_r+0x7c>)
 800415e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	6020      	str	r0, [r4, #0]
 8004164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	9b00      	ldr	r3, [sp, #0]
 800416c:	6120      	str	r0, [r4, #16]
 800416e:	6163      	str	r3, [r4, #20]
 8004170:	9b01      	ldr	r3, [sp, #4]
 8004172:	b15b      	cbz	r3, 800418c <__smakebuf_r+0x74>
 8004174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004178:	4630      	mov	r0, r6
 800417a:	f000 f853 	bl	8004224 <_isatty_r>
 800417e:	b128      	cbz	r0, 800418c <__smakebuf_r+0x74>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	431d      	orrs	r5, r3
 8004190:	81a5      	strh	r5, [r4, #12]
 8004192:	e7cd      	b.n	8004130 <__smakebuf_r+0x18>
 8004194:	08003199 	.word	0x08003199

08004198 <__ascii_mbtowc>:
 8004198:	b082      	sub	sp, #8
 800419a:	b901      	cbnz	r1, 800419e <__ascii_mbtowc+0x6>
 800419c:	a901      	add	r1, sp, #4
 800419e:	b142      	cbz	r2, 80041b2 <__ascii_mbtowc+0x1a>
 80041a0:	b14b      	cbz	r3, 80041b6 <__ascii_mbtowc+0x1e>
 80041a2:	7813      	ldrb	r3, [r2, #0]
 80041a4:	600b      	str	r3, [r1, #0]
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	1c10      	adds	r0, r2, #0
 80041aa:	bf18      	it	ne
 80041ac:	2001      	movne	r0, #1
 80041ae:	b002      	add	sp, #8
 80041b0:	4770      	bx	lr
 80041b2:	4610      	mov	r0, r2
 80041b4:	e7fb      	b.n	80041ae <__ascii_mbtowc+0x16>
 80041b6:	f06f 0001 	mvn.w	r0, #1
 80041ba:	e7f8      	b.n	80041ae <__ascii_mbtowc+0x16>

080041bc <__malloc_lock>:
 80041bc:	4770      	bx	lr

080041be <__malloc_unlock>:
 80041be:	4770      	bx	lr

080041c0 <_read_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4605      	mov	r5, r0
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	2200      	movs	r2, #0
 80041ca:	4c05      	ldr	r4, [pc, #20]	; (80041e0 <_read_r+0x20>)
 80041cc:	6022      	str	r2, [r4, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7fc feb2 	bl	8000f38 <_read>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d102      	bne.n	80041de <_read_r+0x1e>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	b103      	cbz	r3, 80041de <_read_r+0x1e>
 80041dc:	602b      	str	r3, [r5, #0]
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	2000020c 	.word	0x2000020c

080041e4 <__ascii_wctomb>:
 80041e4:	b149      	cbz	r1, 80041fa <__ascii_wctomb+0x16>
 80041e6:	2aff      	cmp	r2, #255	; 0xff
 80041e8:	bf8b      	itete	hi
 80041ea:	238a      	movhi	r3, #138	; 0x8a
 80041ec:	700a      	strbls	r2, [r1, #0]
 80041ee:	6003      	strhi	r3, [r0, #0]
 80041f0:	2001      	movls	r0, #1
 80041f2:	bf88      	it	hi
 80041f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80041f8:	4770      	bx	lr
 80041fa:	4608      	mov	r0, r1
 80041fc:	4770      	bx	lr
	...

08004200 <_fstat_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	2300      	movs	r3, #0
 8004204:	4c06      	ldr	r4, [pc, #24]	; (8004220 <_fstat_r+0x20>)
 8004206:	4605      	mov	r5, r0
 8004208:	4608      	mov	r0, r1
 800420a:	4611      	mov	r1, r2
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	f7fc febb 	bl	8000f88 <_fstat>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	d102      	bne.n	800421c <_fstat_r+0x1c>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	b103      	cbz	r3, 800421c <_fstat_r+0x1c>
 800421a:	602b      	str	r3, [r5, #0]
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	2000020c 	.word	0x2000020c

08004224 <_isatty_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	2300      	movs	r3, #0
 8004228:	4c05      	ldr	r4, [pc, #20]	; (8004240 <_isatty_r+0x1c>)
 800422a:	4605      	mov	r5, r0
 800422c:	4608      	mov	r0, r1
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	f7fc feb9 	bl	8000fa6 <_isatty>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_isatty_r+0x1a>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	b103      	cbz	r3, 800423e <_isatty_r+0x1a>
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	2000020c 	.word	0x2000020c

08004244 <_init>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr

08004250 <_fini>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr
