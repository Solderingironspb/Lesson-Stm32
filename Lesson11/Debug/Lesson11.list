
Lesson11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004350  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004568  08004568  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004568  08004568  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004568  08004568  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000070  080045e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080045e0  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ea3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000182f  00000000  00000000  00028f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000800  00000000  00000000  0002a770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002af70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ac7  00000000  00000000  0002b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007201  00000000  00000000  00043197  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083312  00000000  00000000  0004a398  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd6aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ec  00000000  00000000  000cd728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004444 	.word	0x08004444

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004444 	.word	0x08004444

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*------------------------------Отладка по SWO--------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <HAL_I2C_MasterTxCpltCallback>:
/*------------------------------Отладка по SWO--------------------------------*/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_IT(&hi2c1, Adress, rx_buffer, 7);
 80001d8:	2307      	movs	r3, #7
 80001da:	4a04      	ldr	r2, [pc, #16]	; (80001ec <HAL_I2C_MasterTxCpltCallback+0x1c>)
 80001dc:	21d0      	movs	r1, #208	; 0xd0
 80001de:	4804      	ldr	r0, [pc, #16]	; (80001f0 <HAL_I2C_MasterTxCpltCallback+0x20>)
 80001e0:	f001 f852 	bl	8001288 <HAL_I2C_Master_Receive_IT>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000090 	.word	0x20000090
 80001f0:	200000ac 	.word	0x200000ac

080001f4 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	Seconds = ((rx_buffer[0] >> 4) * 10) + (rx_buffer[0] & 0x0F);
 80001fc:	4b52      	ldr	r3, [pc, #328]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	091b      	lsrs	r3, r3, #4
 8000202:	b2db      	uxtb	r3, r3
 8000204:	461a      	mov	r2, r3
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	4413      	add	r3, r2
 800020a:	005b      	lsls	r3, r3, #1
 800020c:	b2da      	uxtb	r2, r3
 800020e:	4b4e      	ldr	r3, [pc, #312]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	f003 030f 	and.w	r3, r3, #15
 8000216:	b2db      	uxtb	r3, r3
 8000218:	4413      	add	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	4b4b      	ldr	r3, [pc, #300]	; (800034c <HAL_I2C_MasterRxCpltCallback+0x158>)
 800021e:	701a      	strb	r2, [r3, #0]
	Minutes = ((rx_buffer[1] >> 4) * 10) + (rx_buffer[1] & 0x0F);
 8000220:	4b49      	ldr	r3, [pc, #292]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8000222:	785b      	ldrb	r3, [r3, #1]
 8000224:	091b      	lsrs	r3, r3, #4
 8000226:	b2db      	uxtb	r3, r3
 8000228:	461a      	mov	r2, r3
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	4413      	add	r3, r2
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4b45      	ldr	r3, [pc, #276]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8000234:	785b      	ldrb	r3, [r3, #1]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4413      	add	r3, r2
 800023e:	b2da      	uxtb	r2, r3
 8000240:	4b43      	ldr	r3, [pc, #268]	; (8000350 <HAL_I2C_MasterRxCpltCallback+0x15c>)
 8000242:	701a      	strb	r2, [r3, #0]
	Hours = ((rx_buffer[2] >> 4) * 10) + (rx_buffer[2] & 0x0F);
 8000244:	4b40      	ldr	r3, [pc, #256]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8000246:	789b      	ldrb	r3, [r3, #2]
 8000248:	091b      	lsrs	r3, r3, #4
 800024a:	b2db      	uxtb	r3, r3
 800024c:	461a      	mov	r2, r3
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	4413      	add	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4b3c      	ldr	r3, [pc, #240]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8000258:	789b      	ldrb	r3, [r3, #2]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4413      	add	r3, r2
 8000262:	b2da      	uxtb	r2, r3
 8000264:	4b3b      	ldr	r3, [pc, #236]	; (8000354 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8000266:	701a      	strb	r2, [r3, #0]
	Day = rx_buffer[3];
 8000268:	4b37      	ldr	r3, [pc, #220]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 800026a:	78da      	ldrb	r2, [r3, #3]
 800026c:	4b3a      	ldr	r3, [pc, #232]	; (8000358 <HAL_I2C_MasterRxCpltCallback+0x164>)
 800026e:	701a      	strb	r2, [r3, #0]
	Date = ((rx_buffer[4] >> 4) * 10) + (rx_buffer[4] & 0x0F);
 8000270:	4b35      	ldr	r3, [pc, #212]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8000272:	791b      	ldrb	r3, [r3, #4]
 8000274:	091b      	lsrs	r3, r3, #4
 8000276:	b2db      	uxtb	r3, r3
 8000278:	461a      	mov	r2, r3
 800027a:	0092      	lsls	r2, r2, #2
 800027c:	4413      	add	r3, r2
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	b2da      	uxtb	r2, r3
 8000282:	4b31      	ldr	r3, [pc, #196]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8000284:	791b      	ldrb	r3, [r3, #4]
 8000286:	f003 030f 	and.w	r3, r3, #15
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4413      	add	r3, r2
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b32      	ldr	r3, [pc, #200]	; (800035c <HAL_I2C_MasterRxCpltCallback+0x168>)
 8000292:	701a      	strb	r2, [r3, #0]
	Month = ((rx_buffer[5] >> 4) & 0x07) * 10 + (rx_buffer[5] & 0x0F);
 8000294:	4b2c      	ldr	r3, [pc, #176]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8000296:	795b      	ldrb	r3, [r3, #5]
 8000298:	091b      	lsrs	r3, r3, #4
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0307 	and.w	r3, r3, #7
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	0092      	lsls	r2, r2, #2
 80002a6:	4413      	add	r3, r2
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b26      	ldr	r3, [pc, #152]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 80002ae:	795b      	ldrb	r3, [r3, #5]
 80002b0:	f003 030f 	and.w	r3, r3, #15
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4413      	add	r3, r2
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b29      	ldr	r3, [pc, #164]	; (8000360 <HAL_I2C_MasterRxCpltCallback+0x16c>)
 80002bc:	701a      	strb	r2, [r3, #0]
	Cuntury = 20 + (rx_buffer[5] >> 7);
 80002be:	4b22      	ldr	r3, [pc, #136]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 80002c0:	795b      	ldrb	r3, [r3, #5]
 80002c2:	09db      	lsrs	r3, r3, #7
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	3314      	adds	r3, #20
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b26      	ldr	r3, [pc, #152]	; (8000364 <HAL_I2C_MasterRxCpltCallback+0x170>)
 80002cc:	701a      	strb	r2, [r3, #0]
	Year = 2000 + ((rx_buffer[6] >> 4) * 10) + (rx_buffer[6] & 0x0F);
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 80002d0:	799b      	ldrb	r3, [r3, #6]
 80002d2:	091b      	lsrs	r3, r3, #4
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	461a      	mov	r2, r3
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	4413      	add	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	4b19      	ldr	r3, [pc, #100]	; (8000348 <HAL_I2C_MasterRxCpltCallback+0x154>)
 80002e4:	799b      	ldrb	r3, [r3, #6]
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	f003 030f 	and.w	r3, r3, #15
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	4413      	add	r3, r2
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <HAL_I2C_MasterRxCpltCallback+0x174>)
 80002fa:	801a      	strh	r2, [r3, #0]
	printf("\r\n");
 80002fc:	481b      	ldr	r0, [pc, #108]	; (800036c <HAL_I2C_MasterRxCpltCallback+0x178>)
 80002fe:	f003 f9c3 	bl	8003688 <puts>
	printf("Moscow_time: \r\n");
 8000302:	481b      	ldr	r0, [pc, #108]	; (8000370 <HAL_I2C_MasterRxCpltCallback+0x17c>)
 8000304:	f003 f9c0 	bl	8003688 <puts>
	printf("%02d:%02d:%02d\r\n", Hours, Minutes, Seconds);
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <HAL_I2C_MasterRxCpltCallback+0x160>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	4619      	mov	r1, r3
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <HAL_I2C_MasterRxCpltCallback+0x15c>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	461a      	mov	r2, r3
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <HAL_I2C_MasterRxCpltCallback+0x158>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4816      	ldr	r0, [pc, #88]	; (8000374 <HAL_I2C_MasterRxCpltCallback+0x180>)
 800031a:	f003 f941 	bl	80035a0 <iprintf>
	printf("%02d:%02d:%d\r\n", Date, Month, Year);
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <HAL_I2C_MasterRxCpltCallback+0x168>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4619      	mov	r1, r3
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <HAL_I2C_MasterRxCpltCallback+0x16c>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	461a      	mov	r2, r3
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <HAL_I2C_MasterRxCpltCallback+0x174>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	4812      	ldr	r0, [pc, #72]	; (8000378 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000330:	f003 f936 	bl	80035a0 <iprintf>
	printf("Cuntury: %d\r\n", Cuntury);
 8000334:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4619      	mov	r1, r3
 800033a:	4810      	ldr	r0, [pc, #64]	; (800037c <HAL_I2C_MasterRxCpltCallback+0x188>)
 800033c:	f003 f930 	bl	80035a0 <iprintf>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000090 	.word	0x20000090
 800034c:	20000097 	.word	0x20000097
 8000350:	20000098 	.word	0x20000098
 8000354:	20000099 	.word	0x20000099
 8000358:	2000009a 	.word	0x2000009a
 800035c:	2000009b 	.word	0x2000009b
 8000360:	2000009c 	.word	0x2000009c
 8000364:	2000009d 	.word	0x2000009d
 8000368:	2000009e 	.word	0x2000009e
 800036c:	0800445c 	.word	0x0800445c
 8000370:	08004460 	.word	0x08004460
 8000374:	08004470 	.word	0x08004470
 8000378:	08004484 	.word	0x08004484
 800037c:	08004494 	.word	0x08004494

08000380 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000384:	f000 fa36 	bl	80007f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000388:	f000 f822 	bl	80003d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800038c:	f000 f894 	bl	80004b8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000390:	f000 f864 	bl	800045c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000394:	2064      	movs	r0, #100	; 0x64
 8000396:	f000 fa8f 	bl	80008b8 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (HAL_GetTick() - T >= 1000) {
 800039a:	f000 fa83 	bl	80008a4 <HAL_GetTick>
 800039e:	4602      	mov	r2, r0
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <main+0x44>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003aa:	d3f6      	bcc.n	800039a <main+0x1a>
			T = HAL_GetTick();
 80003ac:	f000 fa7a 	bl	80008a4 <HAL_GetTick>
 80003b0:	4602      	mov	r2, r0
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <main+0x44>)
 80003b4:	601a      	str	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(&hi2c1, Adress, &tx_buffer, 1);
 80003b6:	2301      	movs	r3, #1
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <main+0x48>)
 80003ba:	21d0      	movs	r1, #208	; 0xd0
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <main+0x4c>)
 80003be:	f000 febf 	bl	8001140 <HAL_I2C_Master_Transmit_IT>
		if (HAL_GetTick() - T >= 1000) {
 80003c2:	e7ea      	b.n	800039a <main+0x1a>
 80003c4:	20000100 	.word	0x20000100
 80003c8:	2000008c 	.word	0x2000008c
 80003cc:	200000ac 	.word	0x200000ac

080003d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b090      	sub	sp, #64	; 0x40
 80003d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	2228      	movs	r2, #40	; 0x28
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 f8d6 	bl	8003590 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000400:	2301      	movs	r3, #1
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000404:	2302      	movs	r3, #2
 8000406:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800040e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000412:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f002 fc87 	bl	8002d2c <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x58>
		Error_Handler();
 8000424:	f000 f876 	bl	8000514 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	2302      	movs	r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000438:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f002 fef2 	bl	800322c <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x82>
		Error_Handler();
 800044e:	f000 f861 	bl	8000514 <Error_Handler>
	}
}
 8000452:	bf00      	nop
 8000454:	3740      	adds	r7, #64	; 0x40
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <MX_I2C1_Init+0x50>)
 8000462:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <MX_I2C1_Init+0x54>)
 8000464:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_I2C1_Init+0x50>)
 8000468:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <MX_I2C1_Init+0x58>)
 800046a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_I2C1_Init+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_I2C1_Init+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_I2C1_Init+0x50>)
 800047a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800047e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <MX_I2C1_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_I2C1_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <MX_I2C1_Init+0x50>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_I2C1_Init+0x50>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <MX_I2C1_Init+0x50>)
 800049a:	f000 fd19 	bl	8000ed0 <HAL_I2C_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80004a4:	f000 f836 	bl	8000514 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000ac 	.word	0x200000ac
 80004b0:	40005400 	.word	0x40005400
 80004b4:	000186a0 	.word	0x000186a0

080004b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_GPIO_Init+0x58>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <MX_GPIO_Init+0x58>)
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_GPIO_Init+0x58>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0320 	and.w	r3, r3, #32
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_GPIO_Init+0x58>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <MX_GPIO_Init+0x58>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_GPIO_Init+0x58>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_GPIO_Init+0x58>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <MX_GPIO_Init+0x58>)
 80004f4:	f043 0308 	orr.w	r3, r3, #8
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <MX_GPIO_Init+0x58>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0308 	and.w	r3, r3, #8
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000

08000514 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800051a:	e7fe      	b.n	800051a <Error_Handler+0x6>

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a14      	ldr	r2, [pc, #80]	; (8000578 <HAL_MspInit+0x5c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_MspInit+0x5c>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_MspInit+0x60>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_MspInit+0x60>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000
 800057c:	40010000 	.word	0x40010000

08000580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <HAL_I2C_MspInit+0x90>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d133      	bne.n	8000608 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <HAL_I2C_MspInit+0x94>)
 80005a2:	69db      	ldr	r3, [r3, #28]
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <HAL_I2C_MspInit+0x94>)
 80005a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005aa:	61d3      	str	r3, [r2, #28]
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <HAL_I2C_MspInit+0x94>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_I2C_MspInit+0x94>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a15      	ldr	r2, [pc, #84]	; (8000614 <HAL_I2C_MspInit+0x94>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_I2C_MspInit+0x94>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005d0:	23c0      	movs	r3, #192	; 0xc0
 80005d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d4:	2312      	movs	r3, #18
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <HAL_I2C_MspInit+0x98>)
 80005e4:	f000 fb1a 	bl	8000c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	201f      	movs	r0, #31
 80005ee:	f000 fa5c 	bl	8000aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005f2:	201f      	movs	r0, #31
 80005f4:	f000 fa75 	bl	8000ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2020      	movs	r0, #32
 80005fe:	f000 fa54 	bl	8000aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000602:	2020      	movs	r0, #32
 8000604:	f000 fa6d 	bl	8000ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40005400 	.word	0x40005400
 8000614:	40021000 	.word	0x40021000
 8000618:	40010c00 	.word	0x40010c00

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <MemManage_Handler+0x4>

0800062e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <UsageFault_Handler+0x4>

0800063a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000662:	f000 f90d 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <I2C1_EV_IRQHandler+0x10>)
 8000672:	f000 feb5 	bl	80013e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000ac 	.word	0x200000ac

08000680 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <I2C1_ER_IRQHandler+0x10>)
 8000686:	f001 f818 	bl	80016ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000ac 	.word	0x200000ac

08000694 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e00a      	b.n	80006bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006a6:	f3af 8000 	nop.w
 80006aa:	4601      	mov	r1, r0
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	60ba      	str	r2, [r7, #8]
 80006b2:	b2ca      	uxtb	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf0      	blt.n	80006a6 <_read+0x12>
	}

return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
	return -1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f4:	605a      	str	r2, [r3, #4]
	return 0;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <_isatty>:

int _isatty(int file)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	return 1;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000716:	b480      	push	{r7}
 8000718:	b085      	sub	sp, #20
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
	return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
	...

08000730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <_sbrk+0x5c>)
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <_sbrk+0x60>)
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <_sbrk+0x64>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <_sbrk+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	429a      	cmp	r2, r3
 800075e:	d207      	bcs.n	8000770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000760:	f002 feec 	bl	800353c <__errno>
 8000764:	4602      	mov	r2, r0
 8000766:	230c      	movs	r3, #12
 8000768:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	e009      	b.n	8000784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <_sbrk+0x64>)
 8000780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20005000 	.word	0x20005000
 8000790:	00000400 	.word	0x00000400
 8000794:	200000a0 	.word	0x200000a0
 8000798:	20000110 	.word	0x20000110

0800079c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007aa:	e003      	b.n	80007b4 <LoopCopyDataInit>

080007ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007b2:	3104      	adds	r1, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007bc:	d3f6      	bcc.n	80007ac <CopyDataInit>
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007c0:	e002      	b.n	80007c8 <LoopFillZerobss>

080007c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007c4:	f842 3b04 	str.w	r3, [r2], #4

080007c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007cc:	d3f9      	bcc.n	80007c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ce:	f7ff ffe5 	bl	800079c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f002 feb9 	bl	8003548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fdd3 	bl	8000380 <main>
  bx lr
 80007da:	4770      	bx	lr
  ldr r3, =_sidata
 80007dc:	08004570 	.word	0x08004570
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007e4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80007e8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80007ec:	2000010c 	.word	0x2000010c

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_Init+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_Init+0x28>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f945 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f808 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff fe84 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_InitTick+0x54>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_InitTick+0x58>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	fbb3 f3f1 	udiv	r3, r3, r1
 800083a:	fbb2 f3f3 	udiv	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f95d 	bl	8000afe <HAL_SYSTICK_Config>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e00e      	b.n	800086c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	d80a      	bhi.n	800086a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f000 f925 	bl	8000aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_InitTick+0x5c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e000      	b.n	800086c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000000 	.word	0x20000000
 8000878:	20000008 	.word	0x20000008
 800087c:	20000004 	.word	0x20000004

08000880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x1c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x20>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <HAL_IncTick+0x20>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000104 	.word	0x20000104

080008a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <HAL_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	20000104 	.word	0x20000104

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff fff0 	bl	80008a4 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_Delay+0x40>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffe0 	bl	80008a4 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000008 	.word	0x20000008

080008fc <__NVIC_SetPriorityGrouping>:
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_GetPriorityGrouping>:
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <__NVIC_GetPriorityGrouping+0x18>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	f003 0307 	and.w	r3, r3, #7
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_EnableIRQ>:
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db0b      	blt.n	800098a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 021f 	and.w	r2, r3, #31
 8000978:	4906      	ldr	r1, [pc, #24]	; (8000994 <__NVIC_EnableIRQ+0x34>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	2001      	movs	r0, #1
 8000982:	fa00 f202 	lsl.w	r2, r0, r2
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100

08000998 <__NVIC_SetPriority>:
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	db0a      	blt.n	80009c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	490c      	ldr	r1, [pc, #48]	; (80009e4 <__NVIC_SetPriority+0x4c>)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	0112      	lsls	r2, r2, #4
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	440b      	add	r3, r1
 80009bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009c0:	e00a      	b.n	80009d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4908      	ldr	r1, [pc, #32]	; (80009e8 <__NVIC_SetPriority+0x50>)
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	f003 030f 	and.w	r3, r3, #15
 80009ce:	3b04      	subs	r3, #4
 80009d0:	0112      	lsls	r2, r2, #4
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	440b      	add	r3, r1
 80009d6:	761a      	strb	r2, [r3, #24]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <NVIC_EncodePriority>:
{
 80009ec:	b480      	push	{r7}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	f1c3 0307 	rsb	r3, r3, #7
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	bf28      	it	cs
 8000a0a:	2304      	movcs	r3, #4
 8000a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3304      	adds	r3, #4
 8000a12:	2b06      	cmp	r3, #6
 8000a14:	d902      	bls.n	8000a1c <NVIC_EncodePriority+0x30>
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3b03      	subs	r3, #3
 8000a1a:	e000      	b.n	8000a1e <NVIC_EncodePriority+0x32>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	f04f 32ff 	mov.w	r2, #4294967295
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	401a      	ands	r2, r3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a34:	f04f 31ff 	mov.w	r1, #4294967295
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3e:	43d9      	mvns	r1, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	4313      	orrs	r3, r2
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3724      	adds	r7, #36	; 0x24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Config>:
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a60:	d301      	bcc.n	8000a66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00f      	b.n	8000a86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <SysTick_Config+0x40>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	210f      	movs	r1, #15
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff90 	bl	8000998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SysTick_Config+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SysTick_Config+0x40>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff2d 	bl	80008fc <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000abc:	f7ff ff42 	bl	8000944 <__NVIC_GetPriorityGrouping>
 8000ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	6978      	ldr	r0, [r7, #20]
 8000ac8:	f7ff ff90 	bl	80009ec <NVIC_EncodePriority>
 8000acc:	4602      	mov	r2, r0
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff5f 	bl	8000998 <__NVIC_SetPriority>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff35 	bl	8000960 <__NVIC_EnableIRQ>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffa2 	bl	8000a50 <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d005      	beq.n	8000b3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2204      	movs	r2, #4
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e051      	b.n	8000bde <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 020e 	bic.w	r2, r2, #14
 8000b48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0201 	bic.w	r2, r2, #1
 8000b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_DMA_Abort_IT+0xd0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d029      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0xa0>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <HAL_DMA_Abort_IT+0xd4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d022      	beq.n	8000bb4 <HAL_DMA_Abort_IT+0x9c>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_DMA_Abort_IT+0xd8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d01a      	beq.n	8000bae <HAL_DMA_Abort_IT+0x96>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <HAL_DMA_Abort_IT+0xdc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d012      	beq.n	8000ba8 <HAL_DMA_Abort_IT+0x90>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <HAL_DMA_Abort_IT+0xe0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d00a      	beq.n	8000ba2 <HAL_DMA_Abort_IT+0x8a>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_DMA_Abort_IT+0xe4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d102      	bne.n	8000b9c <HAL_DMA_Abort_IT+0x84>
 8000b96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b9a:	e00e      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba0:	e00b      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba6:	e008      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bac:	e005      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	e002      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	e000      	b.n	8000bba <HAL_DMA_Abort_IT+0xa2>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	4a11      	ldr	r2, [pc, #68]	; (8000c00 <HAL_DMA_Abort_IT+0xe8>)
 8000bbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	4798      	blx	r3
    } 
  }
  return status;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40020008 	.word	0x40020008
 8000bec:	4002001c 	.word	0x4002001c
 8000bf0:	40020030 	.word	0x40020030
 8000bf4:	40020044 	.word	0x40020044
 8000bf8:	40020058 	.word	0x40020058
 8000bfc:	4002006c 	.word	0x4002006c
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b08b      	sub	sp, #44	; 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e127      	b.n	8000e80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c30:	2201      	movs	r2, #1
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 8116 	bne.w	8000e7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d034      	beq.n	8000cc0 <HAL_GPIO_Init+0xa4>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d80d      	bhi.n	8000c76 <HAL_GPIO_Init+0x5a>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d02b      	beq.n	8000cb6 <HAL_GPIO_Init+0x9a>
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d804      	bhi.n	8000c6c <HAL_GPIO_Init+0x50>
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d031      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d01c      	beq.n	8000ca4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6a:	e048      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d043      	beq.n	8000cf8 <HAL_GPIO_Init+0xdc>
 8000c70:	2b11      	cmp	r3, #17
 8000c72:	d01b      	beq.n	8000cac <HAL_GPIO_Init+0x90>
          break;
 8000c74:	e043      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c76:	4a89      	ldr	r2, [pc, #548]	; (8000e9c <HAL_GPIO_Init+0x280>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d026      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c7c:	4a87      	ldr	r2, [pc, #540]	; (8000e9c <HAL_GPIO_Init+0x280>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d806      	bhi.n	8000c90 <HAL_GPIO_Init+0x74>
 8000c82:	4a87      	ldr	r2, [pc, #540]	; (8000ea0 <HAL_GPIO_Init+0x284>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d020      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c88:	4a86      	ldr	r2, [pc, #536]	; (8000ea4 <HAL_GPIO_Init+0x288>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d01d      	beq.n	8000cca <HAL_GPIO_Init+0xae>
          break;
 8000c8e:	e036      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c90:	4a85      	ldr	r2, [pc, #532]	; (8000ea8 <HAL_GPIO_Init+0x28c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d019      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c96:	4a85      	ldr	r2, [pc, #532]	; (8000eac <HAL_GPIO_Init+0x290>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d016      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c9c:	4a84      	ldr	r2, [pc, #528]	; (8000eb0 <HAL_GPIO_Init+0x294>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0xae>
          break;
 8000ca2:	e02c      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e028      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e023      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	3308      	adds	r3, #8
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e01e      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	330c      	adds	r3, #12
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e019      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e012      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69fa      	ldr	r2, [r7, #28]
 8000ce8:	611a      	str	r2, [r3, #16]
          break;
 8000cea:	e008      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cec:	2308      	movs	r3, #8
 8000cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	615a      	str	r2, [r3, #20]
          break;
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2bff      	cmp	r3, #255	; 0xff
 8000d02:	d801      	bhi.n	8000d08 <HAL_GPIO_Init+0xec>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	e001      	b.n	8000d0c <HAL_GPIO_Init+0xf0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	2bff      	cmp	r3, #255	; 0xff
 8000d12:	d802      	bhi.n	8000d1a <HAL_GPIO_Init+0xfe>
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	e002      	b.n	8000d20 <HAL_GPIO_Init+0x104>
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	3b08      	subs	r3, #8
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	210f      	movs	r1, #15
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	401a      	ands	r2, r3
 8000d32:	6a39      	ldr	r1, [r7, #32]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 8096 	beq.w	8000e7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a58      	ldr	r2, [pc, #352]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b56      	ldr	r3, [pc, #344]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d66:	4a54      	ldr	r2, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x29c>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4013      	ands	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <HAL_GPIO_Init+0x2a0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x19e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4a      	ldr	r2, [pc, #296]	; (8000ec0 <HAL_GPIO_Init+0x2a4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x19a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a49      	ldr	r2, [pc, #292]	; (8000ec4 <HAL_GPIO_Init+0x2a8>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x196>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <HAL_GPIO_Init+0x2ac>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x192>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000dae:	2304      	movs	r3, #4
 8000db0:	e004      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dbe:	f002 0203 	and.w	r2, r2, #3
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	4093      	lsls	r3, r2
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dcc:	493a      	ldr	r1, [pc, #232]	; (8000eb8 <HAL_GPIO_Init+0x29c>)
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4938      	ldr	r1, [pc, #224]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
 8000df2:	e006      	b.n	8000e02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000df4:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4933      	ldr	r1, [pc, #204]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	492e      	ldr	r1, [pc, #184]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
 8000e1a:	e006      	b.n	8000e2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4929      	ldr	r1, [pc, #164]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	4924      	ldr	r1, [pc, #144]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	608b      	str	r3, [r1, #8]
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	491f      	ldr	r1, [pc, #124]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	491a      	ldr	r1, [pc, #104]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60cb      	str	r3, [r1, #12]
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4915      	ldr	r1, [pc, #84]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f47f aed0 	bne.w	8000c30 <HAL_GPIO_Init+0x14>
  }
}
 8000e90:	bf00      	nop
 8000e92:	372c      	adds	r7, #44	; 0x2c
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10110000 	.word	0x10110000
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	10320000 	.word	0x10320000
 8000eb0:	10220000 	.word	0x10220000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40011400 	.word	0x40011400
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e11f      	b.n	8001122 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fb42 	bl	8000580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2224      	movs	r2, #36	; 0x24
 8000f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f34:	f002 fad0 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8000f38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a7b      	ldr	r2, [pc, #492]	; (800112c <HAL_I2C_Init+0x25c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d807      	bhi.n	8000f54 <HAL_I2C_Init+0x84>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4a7a      	ldr	r2, [pc, #488]	; (8001130 <HAL_I2C_Init+0x260>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	bf94      	ite	ls
 8000f4c:	2301      	movls	r3, #1
 8000f4e:	2300      	movhi	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	e006      	b.n	8000f62 <HAL_I2C_Init+0x92>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a77      	ldr	r2, [pc, #476]	; (8001134 <HAL_I2C_Init+0x264>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	bf94      	ite	ls
 8000f5c:	2301      	movls	r3, #1
 8000f5e:	2300      	movhi	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0db      	b.n	8001122 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4a72      	ldr	r2, [pc, #456]	; (8001138 <HAL_I2C_Init+0x268>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9b      	lsrs	r3, r3, #18
 8000f74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4a64      	ldr	r2, [pc, #400]	; (800112c <HAL_I2C_Init+0x25c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d802      	bhi.n	8000fa4 <HAL_I2C_Init+0xd4>
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	e009      	b.n	8000fb8 <HAL_I2C_Init+0xe8>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	4a63      	ldr	r2, [pc, #396]	; (800113c <HAL_I2C_Init+0x26c>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	099b      	lsrs	r3, r3, #6
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4956      	ldr	r1, [pc, #344]	; (800112c <HAL_I2C_Init+0x25c>)
 8000fd4:	428b      	cmp	r3, r1
 8000fd6:	d80d      	bhi.n	8000ff4 <HAL_I2C_Init+0x124>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1e59      	subs	r1, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	bf38      	it	cc
 8000ff0:	2304      	movcc	r3, #4
 8000ff2:	e04f      	b.n	8001094 <HAL_I2C_Init+0x1c4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d111      	bne.n	8001020 <HAL_I2C_Init+0x150>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1e58      	subs	r0, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6859      	ldr	r1, [r3, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	fbb0 f3f3 	udiv	r3, r0, r3
 800100e:	3301      	adds	r3, #1
 8001010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	e012      	b.n	8001046 <HAL_I2C_Init+0x176>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1e58      	subs	r0, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	0099      	lsls	r1, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	fbb0 f3f3 	udiv	r3, r0, r3
 8001036:	3301      	adds	r3, #1
 8001038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2C_Init+0x17e>
 800104a:	2301      	movs	r3, #1
 800104c:	e022      	b.n	8001094 <HAL_I2C_Init+0x1c4>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10e      	bne.n	8001074 <HAL_I2C_Init+0x1a4>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1e58      	subs	r0, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6859      	ldr	r1, [r3, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	440b      	add	r3, r1
 8001064:	fbb0 f3f3 	udiv	r3, r0, r3
 8001068:	3301      	adds	r3, #1
 800106a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001072:	e00f      	b.n	8001094 <HAL_I2C_Init+0x1c4>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1e58      	subs	r0, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	0099      	lsls	r1, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	fbb0 f3f3 	udiv	r3, r0, r3
 800108a:	3301      	adds	r3, #1
 800108c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	6809      	ldr	r1, [r1, #0]
 8001098:	4313      	orrs	r3, r2
 800109a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6911      	ldr	r1, [r2, #16]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68d2      	ldr	r2, [r2, #12]
 80010ce:	4311      	orrs	r1, r2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2220      	movs	r2, #32
 800110e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	000186a0 	.word	0x000186a0
 8001130:	001e847f 	.word	0x001e847f
 8001134:	003d08ff 	.word	0x003d08ff
 8001138:	431bde83 	.word	0x431bde83
 800113c:	10624dd3 	.word	0x10624dd3

08001140 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	461a      	mov	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	817b      	strh	r3, [r7, #10]
 8001150:	4613      	mov	r3, r2
 8001152:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b20      	cmp	r3, #32
 8001162:	f040 8085 	bne.w	8001270 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001166:	4b45      	ldr	r3, [pc, #276]	; (800127c <HAL_I2C_Master_Transmit_IT+0x13c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	4a44      	ldr	r2, [pc, #272]	; (8001280 <HAL_I2C_Master_Transmit_IT+0x140>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0a1a      	lsrs	r2, r3, #8
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	009a      	lsls	r2, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3b01      	subs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d116      	bne.n	80011ba <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2220      	movs	r2, #32
 8001196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f043 0220 	orr.w	r2, r3, #32
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e05b      	b.n	8001272 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d0db      	beq.n	8001180 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_I2C_Master_Transmit_IT+0x96>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e04d      	b.n	8001272 <HAL_I2C_Master_Transmit_IT+0x132>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d007      	beq.n	80011fc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800120a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2221      	movs	r2, #33	; 0x21
 8001210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2210      	movs	r2, #16
 8001218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	893a      	ldrh	r2, [r7, #8]
 800122c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001232:	b29a      	uxth	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_I2C_Master_Transmit_IT+0x144>)
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800123e:	897a      	ldrh	r2, [r7, #10]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001252:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800126a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	e000      	b.n	8001272 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8001270:	2302      	movs	r3, #2
  }
}
 8001272:	4618      	mov	r0, r3
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	20000000 	.word	0x20000000
 8001280:	14f8b589 	.word	0x14f8b589
 8001284:	ffff0000 	.word	0xffff0000

08001288 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	461a      	mov	r2, r3
 8001294:	460b      	mov	r3, r1
 8001296:	817b      	strh	r3, [r7, #10]
 8001298:	4613      	mov	r3, r2
 800129a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b20      	cmp	r3, #32
 80012aa:	f040 808d 	bne.w	80013c8 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <HAL_I2C_Master_Receive_IT+0x14c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <HAL_I2C_Master_Receive_IT+0x150>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0a1a      	lsrs	r2, r3, #8
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	009a      	lsls	r2, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d116      	bne.n	8001302 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2220      	movs	r2, #32
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f043 0220 	orr.w	r2, r3, #32
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e063      	b.n	80013ca <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b02      	cmp	r3, #2
 800130e:	d0db      	beq.n	80012c8 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_I2C_Master_Receive_IT+0x96>
 800131a:	2302      	movs	r3, #2
 800131c:	e055      	b.n	80013ca <HAL_I2C_Master_Receive_IT+0x142>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d007      	beq.n	8001344 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001352:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2222      	movs	r2, #34	; 0x22
 8001358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2210      	movs	r2, #16
 8001360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	893a      	ldrh	r2, [r7, #8]
 8001374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137a:	b29a      	uxth	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <HAL_I2C_Master_Receive_IT+0x154>)
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001386:	897a      	ldrh	r2, [r7, #10]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800139a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80013c2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e000      	b.n	80013ca <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80013c8:	2302      	movs	r3, #2
  }
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000000 	.word	0x20000000
 80013d8:	14f8b589 	.word	0x14f8b589
 80013dc:	ffff0000 	.word	0xffff0000

080013e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001400:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001408:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d003      	beq.n	8001418 <HAL_I2C_EV_IRQHandler+0x38>
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b40      	cmp	r3, #64	; 0x40
 8001414:	f040 80bd 	bne.w	8001592 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10d      	bne.n	800144e <HAL_I2C_EV_IRQHandler+0x6e>
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001438:	d003      	beq.n	8001442 <HAL_I2C_EV_IRQHandler+0x62>
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001440:	d101      	bne.n	8001446 <HAL_I2C_EV_IRQHandler+0x66>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_I2C_EV_IRQHandler+0x68>
 8001446:	2300      	movs	r3, #0
 8001448:	2b01      	cmp	r3, #1
 800144a:	f000 812e 	beq.w	80016aa <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00c      	beq.n	8001472 <HAL_I2C_EV_IRQHandler+0x92>
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	0a5b      	lsrs	r3, r3, #9
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f001 fc47 	bl	8002cf8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fd4e 	bl	8001f0c <I2C_Master_SB>
 8001470:	e08e      	b.n	8001590 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_I2C_EV_IRQHandler+0xb2>
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	0a5b      	lsrs	r3, r3, #9
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fdc3 	bl	8002016 <I2C_Master_ADD10>
 8001490:	e07e      	b.n	8001590 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_I2C_EV_IRQHandler+0xd2>
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	0a5b      	lsrs	r3, r3, #9
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fddc 	bl	8002068 <I2C_Master_ADDR>
 80014b0:	e06e      	b.n	8001590 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d037      	beq.n	800152e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014cc:	f000 80ef 	beq.w	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	09db      	lsrs	r3, r3, #7
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00f      	beq.n	80014fc <HAL_I2C_EV_IRQHandler+0x11c>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	0a9b      	lsrs	r3, r3, #10
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d009      	beq.n	80014fc <HAL_I2C_EV_IRQHandler+0x11c>
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d103      	bne.n	80014fc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f9db 	bl	80018b0 <I2C_MasterTransmit_TXE>
 80014fa:	e049      	b.n	8001590 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80d2 	beq.w	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	0a5b      	lsrs	r3, r3, #9
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80cb 	beq.w	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d103      	bne.n	8001526 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fa62 	bl	80019e8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001524:	e0c3      	b.n	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fac6 	bl	8001ab8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800152c:	e0bf      	b.n	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800153c:	f000 80b7 	beq.w	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	099b      	lsrs	r3, r3, #6
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00f      	beq.n	800156c <HAL_I2C_EV_IRQHandler+0x18c>
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	0a9b      	lsrs	r3, r3, #10
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <HAL_I2C_EV_IRQHandler+0x18c>
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d103      	bne.n	800156c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fb36 	bl	8001bd6 <I2C_MasterReceive_RXNE>
 800156a:	e011      	b.n	8001590 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 809a 	beq.w	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	0a5b      	lsrs	r3, r3, #9
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8093 	beq.w	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fbd5 	bl	8001d38 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800158e:	e08e      	b.n	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
 8001590:	e08d      	b.n	80016ae <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e007      	b.n	80015b4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	085b      	lsrs	r3, r3, #1
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d012      	beq.n	80015e6 <HAL_I2C_EV_IRQHandler+0x206>
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	0a5b      	lsrs	r3, r3, #9
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80015dc:	69b9      	ldr	r1, [r7, #24]
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 ff99 	bl	8002516 <I2C_Slave_ADDR>
 80015e4:	e066      	b.n	80016b4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_I2C_EV_IRQHandler+0x226>
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	0a5b      	lsrs	r3, r3, #9
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 ffce 	bl	80025a0 <I2C_Slave_STOPF>
 8001604:	e056      	b.n	80016b4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001606:	7bbb      	ldrb	r3, [r7, #14]
 8001608:	2b21      	cmp	r3, #33	; 0x21
 800160a:	d002      	beq.n	8001612 <HAL_I2C_EV_IRQHandler+0x232>
 800160c:	7bbb      	ldrb	r3, [r7, #14]
 800160e:	2b29      	cmp	r3, #41	; 0x29
 8001610:	d125      	bne.n	800165e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	09db      	lsrs	r3, r3, #7
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00f      	beq.n	800163e <HAL_I2C_EV_IRQHandler+0x25e>
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	0a9b      	lsrs	r3, r3, #10
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_I2C_EV_IRQHandler+0x25e>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 feb1 	bl	800239e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800163c:	e039      	b.n	80016b2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d033      	beq.n	80016b2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	0a5b      	lsrs	r3, r3, #9
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d02d      	beq.n	80016b2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fede 	bl	8002418 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800165c:	e029      	b.n	80016b2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00f      	beq.n	800168a <HAL_I2C_EV_IRQHandler+0x2aa>
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	0a9b      	lsrs	r3, r3, #10
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <HAL_I2C_EV_IRQHandler+0x2aa>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d103      	bne.n	800168a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fee8 	bl	8002458 <I2C_SlaveReceive_RXNE>
 8001688:	e014      	b.n	80016b4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	0a5b      	lsrs	r3, r3, #9
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 ff16 	bl	80024d4 <I2C_SlaveReceive_BTF>
 80016a8:	e004      	b.n	80016b4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80016aa:	bf00      	nop
 80016ac:	e002      	b.n	80016b4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ae:	bf00      	nop
 80016b0:	e000      	b.n	80016b4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b08a      	sub	sp, #40	; 0x28
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <HAL_I2C_ER_IRQHandler+0x5e>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d010      	beq.n	8001718 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001706:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001716:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	0a5b      	lsrs	r3, r3, #9
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00e      	beq.n	8001742 <HAL_I2C_ER_IRQHandler+0x88>
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001740:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	0a9b      	lsrs	r3, r3, #10
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d03f      	beq.n	80017ce <HAL_I2C_ER_IRQHandler+0x114>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d039      	beq.n	80017ce <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800175a:	7efb      	ldrb	r3, [r7, #27]
 800175c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001774:	7ebb      	ldrb	r3, [r7, #26]
 8001776:	2b20      	cmp	r3, #32
 8001778:	d112      	bne.n	80017a0 <HAL_I2C_ER_IRQHandler+0xe6>
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10f      	bne.n	80017a0 <HAL_I2C_ER_IRQHandler+0xe6>
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	2b21      	cmp	r3, #33	; 0x21
 8001784:	d008      	beq.n	8001798 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001786:	7cfb      	ldrb	r3, [r7, #19]
 8001788:	2b29      	cmp	r3, #41	; 0x29
 800178a:	d005      	beq.n	8001798 <HAL_I2C_ER_IRQHandler+0xde>
 800178c:	7cfb      	ldrb	r3, [r7, #19]
 800178e:	2b28      	cmp	r3, #40	; 0x28
 8001790:	d106      	bne.n	80017a0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b21      	cmp	r3, #33	; 0x21
 8001796:	d103      	bne.n	80017a0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f001 f831 	bl	8002800 <I2C_Slave_AF>
 800179e:	e016      	b.n	80017ce <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017a8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80017b2:	7efb      	ldrb	r3, [r7, #27]
 80017b4:	2b10      	cmp	r3, #16
 80017b6:	d002      	beq.n	80017be <HAL_I2C_ER_IRQHandler+0x104>
 80017b8:	7efb      	ldrb	r3, [r7, #27]
 80017ba:	2b40      	cmp	r3, #64	; 0x40
 80017bc:	d107      	bne.n	80017ce <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017cc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	0adb      	lsrs	r3, r3, #11
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <HAL_I2C_ER_IRQHandler+0x13e>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d008      	beq.n	80017f8 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80017f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f001 f868 	bl	80028e0 <I2C_ITError>
  }
}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
 8001848:	4613      	mov	r3, r2
 800184a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d150      	bne.n	8001978 <I2C_MasterTransmit_TXE+0xc8>
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b21      	cmp	r3, #33	; 0x21
 80018da:	d14d      	bne.n	8001978 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d01d      	beq.n	800191e <I2C_MasterTransmit_TXE+0x6e>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d01a      	beq.n	800191e <I2C_MasterTransmit_TXE+0x6e>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018ee:	d016      	beq.n	800191e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018fe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2211      	movs	r2, #17
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7fe fc5a 	bl	80001d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800191c:	e060      	b.n	80019e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800192c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	d107      	bne.n	8001968 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff81 	bl	8001868 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001966:	e03b      	b.n	80019e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7fe fc2d 	bl	80001d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001976:	e033      	b.n	80019e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b21      	cmp	r3, #33	; 0x21
 800197c:	d005      	beq.n	800198a <I2C_MasterTransmit_TXE+0xda>
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	2b40      	cmp	r3, #64	; 0x40
 8001982:	d12d      	bne.n	80019e0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b22      	cmp	r3, #34	; 0x22
 8001988:	d12a      	bne.n	80019e0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d108      	bne.n	80019a6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80019a4:	e01c      	b.n	80019e0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d103      	bne.n	80019ba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f880 	bl	8001ab8 <I2C_MemoryTransmit_TXE_BTF>
}
 80019b8:	e012      	b.n	80019e0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80019de:	e7ff      	b.n	80019e0 <I2C_MasterTransmit_TXE+0x130>
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b21      	cmp	r3, #33	; 0x21
 8001a00:	d156      	bne.n	8001ab0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d012      	beq.n	8001a32 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001a30:	e03e      	b.n	8001ab0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d01d      	beq.n	8001a74 <I2C_MasterTransmit_BTF+0x8c>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d01a      	beq.n	8001a74 <I2C_MasterTransmit_BTF+0x8c>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a44:	d016      	beq.n	8001a74 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a54:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2211      	movs	r2, #17
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7fe fbaf 	bl	80001d0 <HAL_I2C_MasterTxCpltCallback>
}
 8001a72:	e01d      	b.n	8001ab0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a82:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a92:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fb90 	bl	80001d0 <HAL_I2C_MasterTxCpltCallback>
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d11d      	bne.n	8001b0c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d10b      	bne.n	8001af0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae8:	1c9a      	adds	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001aee:	e06e      	b.n	8001bce <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	121b      	asrs	r3, r3, #8
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b0a:	e060      	b.n	8001bce <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d10b      	bne.n	8001b2c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b2a:	e050      	b.n	8001bce <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d14c      	bne.n	8001bce <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	2b22      	cmp	r3, #34	; 0x22
 8001b38:	d108      	bne.n	8001b4c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	e040      	b.n	8001bce <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d015      	beq.n	8001b82 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b21      	cmp	r3, #33	; 0x21
 8001b5a:	d112      	bne.n	8001b82 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b80:	e025      	b.n	8001bce <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d120      	bne.n	8001bce <I2C_MemoryTransmit_TXE_BTF+0x116>
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b21      	cmp	r3, #33	; 0x21
 8001b90:	d11d      	bne.n	8001bce <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ba0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fe4d 	bl	8001868 <HAL_I2C_MemTxCpltCallback>
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b22      	cmp	r3, #34	; 0x22
 8001be8:	f040 80a2 	bne.w	8001d30 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d921      	bls.n	8001c3e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	f040 8082 	bne.w	8001d30 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001c3c:	e078      	b.n	8001d30 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d074      	beq.n	8001d30 <I2C_MasterReceive_RXNE+0x15a>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d002      	beq.n	8001c52 <I2C_MasterReceive_RXNE+0x7c>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d16e      	bne.n	8001d30 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f001 f81e 	bl	8002c94 <I2C_WaitOnSTOPRequestThroughIT>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d142      	bne.n	8001ce4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c7c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d10a      	bne.n	8001cce <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fdd7 	bl	800187a <HAL_I2C_MemRxCpltCallback>
}
 8001ccc:	e030      	b.n	8001d30 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2212      	movs	r2, #18
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7fe fa89 	bl	80001f4 <HAL_I2C_MasterRxCpltCallback>
}
 8001ce2:	e025      	b.n	8001d30 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cf2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fdae 	bl	800188c <HAL_I2C_ErrorCallback>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d11b      	bne.n	8001d88 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001d86:	e0bd      	b.n	8001f04 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d129      	bne.n	8001de6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d00a      	beq.n	8001dbe <I2C_MasterReceive_BTF+0x86>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d007      	beq.n	8001dbe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dbc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001de4:	e08e      	b.n	8001f04 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d176      	bne.n	8001ede <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d002      	beq.n	8001dfc <I2C_MasterReceive_BTF+0xc4>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d108      	bne.n	8001e0e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e019      	b.n	8001e42 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d002      	beq.n	8001e1a <I2C_MasterReceive_BTF+0xe2>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d108      	bne.n	8001e2c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e00a      	b.n	8001e42 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d007      	beq.n	8001e42 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e9c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d10a      	bne.n	8001ec8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fcda 	bl	800187a <HAL_I2C_MemRxCpltCallback>
}
 8001ec6:	e01d      	b.n	8001f04 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2212      	movs	r2, #18
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe f98c 	bl	80001f4 <HAL_I2C_MasterRxCpltCallback>
}
 8001edc:	e012      	b.n	8001f04 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	d117      	bne.n	8001f50 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f38:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001f3a:	e067      	b.n	800200c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	611a      	str	r2, [r3, #16]
}
 8001f4e:	e05d      	b.n	800200c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f58:	d133      	bne.n	8001fc2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b21      	cmp	r3, #33	; 0x21
 8001f64:	d109      	bne.n	8001f7a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	e008      	b.n	8001f8c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <I2C_Master_SB+0x92>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d108      	bne.n	8001fb0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d032      	beq.n	800200c <I2C_Master_SB+0x100>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d02d      	beq.n	800200c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fbe:	605a      	str	r2, [r3, #4]
}
 8001fc0:	e024      	b.n	800200c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	11db      	asrs	r3, r3, #7
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 0306 	and.w	r3, r3, #6
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f063 030f 	orn	r3, r3, #15
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	611a      	str	r2, [r3, #16]
}
 8001fe6:	e011      	b.n	800200c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d10d      	bne.n	800200c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	11db      	asrs	r3, r3, #7
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0306 	and.w	r3, r3, #6
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f063 030e 	orn	r3, r3, #14
 8002004:	b2da      	uxtb	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	b2da      	uxtb	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <I2C_Master_ADD10+0x24>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	2b00      	cmp	r3, #0
 8002038:	d011      	beq.n	800205e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d104      	bne.n	800204e <I2C_Master_ADD10+0x38>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002068:	b480      	push	{r7}
 800206a:	b091      	sub	sp, #68	; 0x44
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002076:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b22      	cmp	r3, #34	; 0x22
 8002090:	f040 8174 	bne.w	800237c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10f      	bne.n	80020bc <I2C_Master_ADDR+0x54>
 800209c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020a0:	2b40      	cmp	r3, #64	; 0x40
 80020a2:	d10b      	bne.n	80020bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
 80020b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ba:	e16b      	b.n	8002394 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11d      	bne.n	8002100 <I2C_Master_ADDR+0x98>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80020cc:	d118      	bne.n	8002100 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	651a      	str	r2, [r3, #80]	; 0x50
 80020fe:	e149      	b.n	8002394 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d113      	bne.n	8002132 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e120      	b.n	8002374 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	f040 808a 	bne.w	8002252 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002144:	d137      	bne.n	80021b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002154:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002164:	d113      	bne.n	800218e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002174:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	e0f2      	b.n	8002374 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e0de      	b.n	8002374 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d02e      	beq.n	800221a <I2C_Master_ADDR+0x1b2>
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d02b      	beq.n	800221a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d102      	bne.n	80021ce <I2C_Master_ADDR+0x166>
 80021c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d125      	bne.n	800221a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d00e      	beq.n	80021f2 <I2C_Master_ADDR+0x18a>
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d00b      	beq.n	80021f2 <I2C_Master_ADDR+0x18a>
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d008      	beq.n	80021f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e007      	b.n	8002202 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002200:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	e0ac      	b.n	8002374 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002228:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e090      	b.n	8002374 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d158      	bne.n	800230e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800225c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225e:	2b04      	cmp	r3, #4
 8002260:	d021      	beq.n	80022a6 <I2C_Master_ADDR+0x23e>
 8002262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002264:	2b02      	cmp	r3, #2
 8002266:	d01e      	beq.n	80022a6 <I2C_Master_ADDR+0x23e>
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	2b10      	cmp	r3, #16
 800226c:	d01b      	beq.n	80022a6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800227c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e012      	b.n	80022cc <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022b4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022da:	d14b      	bne.n	8002374 <I2C_Master_ADDR+0x30c>
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e2:	d00b      	beq.n	80022fc <I2C_Master_ADDR+0x294>
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d008      	beq.n	80022fc <I2C_Master_ADDR+0x294>
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d005      	beq.n	80022fc <I2C_Master_ADDR+0x294>
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d002      	beq.n	80022fc <I2C_Master_ADDR+0x294>
 80022f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d13b      	bne.n	8002374 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	e032      	b.n	8002374 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800231c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800232c:	d117      	bne.n	800235e <I2C_Master_ADDR+0x2f6>
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002334:	d00b      	beq.n	800234e <I2C_Master_ADDR+0x2e6>
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002338:	2b01      	cmp	r3, #1
 800233a:	d008      	beq.n	800234e <I2C_Master_ADDR+0x2e6>
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	2b08      	cmp	r3, #8
 8002340:	d005      	beq.n	800234e <I2C_Master_ADDR+0x2e6>
 8002342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002344:	2b10      	cmp	r3, #16
 8002346:	d002      	beq.n	800234e <I2C_Master_ADDR+0x2e6>
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	2b20      	cmp	r3, #32
 800234c:	d107      	bne.n	800235e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800235c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800237a:	e00b      	b.n	8002394 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
}
 8002392:	e7ff      	b.n	8002394 <I2C_Master_ADDR+0x32c>
 8002394:	bf00      	nop
 8002396:	3744      	adds	r7, #68	; 0x44
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02b      	beq.n	8002410 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d114      	bne.n	8002410 <I2C_SlaveTransmit_TXE+0x72>
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b29      	cmp	r3, #41	; 0x29
 80023ea:	d111      	bne.n	8002410 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2221      	movs	r2, #33	; 0x21
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2228      	movs	r2, #40	; 0x28
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fa04 	bl	8001818 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d011      	beq.n	800244e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d02c      	beq.n	80024cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d114      	bne.n	80024cc <I2C_SlaveReceive_RXNE+0x74>
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b2a      	cmp	r3, #42	; 0x2a
 80024a6:	d111      	bne.n	80024cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2222      	movs	r2, #34	; 0x22
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2228      	movs	r2, #40	; 0x28
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff f9af 	bl	800182a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002530:	2b28      	cmp	r3, #40	; 0x28
 8002532:	d127      	bne.n	8002584 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	09db      	lsrs	r3, r3, #7
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	81bb      	strh	r3, [r7, #12]
 8002566:	e002      	b.n	800256e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002576:	89ba      	ldrh	r2, [r7, #12]
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff f95d 	bl	800183c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002582:	e008      	b.n	8002596 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0202 	mvn.w	r2, #2
 800258c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025fc:	d172      	bne.n	80026e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b22      	cmp	r3, #34	; 0x22
 8002602:	d002      	beq.n	800260a <I2C_Slave_STOPF+0x6a>
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b2a      	cmp	r3, #42	; 0x2a
 8002608:	d135      	bne.n	8002676 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	b29a      	uxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800263c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fade 	bl	8000c04 <HAL_DMA_GetState>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d049      	beq.n	80026e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	4a69      	ldr	r2, [pc, #420]	; (80027f8 <I2C_Slave_STOPF+0x258>)
 8002654:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fa5c 	bl	8000b18 <HAL_DMA_Abort_IT>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d03d      	beq.n	80026e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002670:	4610      	mov	r0, r2
 8002672:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002674:	e035      	b.n	80026e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b29a      	uxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f043 0204 	orr.w	r2, r3, #4
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe faa8 	bl	8000c04 <HAL_DMA_GetState>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d014      	beq.n	80026e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	4a4e      	ldr	r2, [pc, #312]	; (80027f8 <I2C_Slave_STOPF+0x258>)
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fa26 	bl	8000b18 <HAL_DMA_Abort_IT>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026dc:	4610      	mov	r0, r2
 80026de:	4798      	blx	r3
 80026e0:	e000      	b.n	80026e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03e      	beq.n	800276c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d112      	bne.n	8002722 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d112      	bne.n	8002756 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f043 0204 	orr.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8b3 	bl	80028e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800277a:	e039      	b.n	80027f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b2a      	cmp	r3, #42	; 0x2a
 8002780:	d109      	bne.n	8002796 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2228      	movs	r2, #40	; 0x28
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff f84a 	bl	800182a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b28      	cmp	r3, #40	; 0x28
 80027a0:	d111      	bne.n	80027c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a15      	ldr	r2, [pc, #84]	; (80027fc <I2C_Slave_STOPF+0x25c>)
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff f849 	bl	8001856 <HAL_I2C_ListenCpltCallback>
}
 80027c4:	e014      	b.n	80027f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	2b22      	cmp	r3, #34	; 0x22
 80027cc:	d002      	beq.n	80027d4 <I2C_Slave_STOPF+0x234>
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b22      	cmp	r3, #34	; 0x22
 80027d2:	d10d      	bne.n	80027f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff f81d 	bl	800182a <HAL_I2C_SlaveRxCpltCallback>
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	08002b45 	.word	0x08002b45
 80027fc:	ffff0000 	.word	0xffff0000

08002800 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d002      	beq.n	8002822 <I2C_Slave_AF+0x22>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b20      	cmp	r3, #32
 8002820:	d129      	bne.n	8002876 <I2C_Slave_AF+0x76>
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b28      	cmp	r3, #40	; 0x28
 8002826:	d126      	bne.n	8002876 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <I2C_Slave_AF+0xdc>)
 800282c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800283c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002846:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002856:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fff1 	bl	8001856 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002874:	e02e      	b.n	80028d4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b21      	cmp	r3, #33	; 0x21
 800287a:	d126      	bne.n	80028ca <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a17      	ldr	r2, [pc, #92]	; (80028dc <I2C_Slave_AF+0xdc>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2221      	movs	r2, #33	; 0x21
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe ffa8 	bl	8001818 <HAL_I2C_SlaveTxCpltCallback>
}
 80028c8:	e004      	b.n	80028d4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d2:	615a      	str	r2, [r3, #20]
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	ffff0000 	.word	0xffff0000

080028e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028f8:	7bbb      	ldrb	r3, [r7, #14]
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d002      	beq.n	8002904 <I2C_ITError+0x24>
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d10a      	bne.n	800291a <I2C_ITError+0x3a>
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b22      	cmp	r3, #34	; 0x22
 8002908:	d107      	bne.n	800291a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002918:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002920:	2b28      	cmp	r3, #40	; 0x28
 8002922:	d107      	bne.n	8002934 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2228      	movs	r2, #40	; 0x28
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002932:	e015      	b.n	8002960 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002942:	d00a      	beq.n	800295a <I2C_ITError+0x7a>
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b60      	cmp	r3, #96	; 0x60
 8002948:	d007      	beq.n	800295a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800296e:	d161      	bne.n	8002a34 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002988:	2b01      	cmp	r3, #1
 800298a:	d020      	beq.n	80029ce <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	4a6a      	ldr	r2, [pc, #424]	; (8002b3c <I2C_ITError+0x25c>)
 8002992:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe f8bd 	bl	8000b18 <HAL_DMA_Abort_IT>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8089 	beq.w	8002ab8 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029c8:	4610      	mov	r0, r2
 80029ca:	4798      	blx	r3
 80029cc:	e074      	b.n	8002ab8 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	4a5a      	ldr	r2, [pc, #360]	; (8002b3c <I2C_ITError+0x25c>)
 80029d4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe f89c 	bl	8000b18 <HAL_DMA_Abort_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d068      	beq.n	8002ab8 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d10b      	bne.n	8002a0c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4798      	blx	r3
 8002a32:	e041      	b.n	8002ab8 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b60      	cmp	r3, #96	; 0x60
 8002a3e:	d125      	bne.n	8002a8c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d10b      	bne.n	8002a74 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7fe ff0a 	bl	800189e <HAL_I2C_AbortCpltCallback>
 8002a8a:	e015      	b.n	8002ab8 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d10b      	bne.n	8002ab2 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe feea 	bl	800188c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10e      	bne.n	8002ae6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002af4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d113      	bne.n	8002b32 <I2C_ITError+0x252>
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b28      	cmp	r3, #40	; 0x28
 8002b0e:	d110      	bne.n	8002b32 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <I2C_ITError+0x260>)
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fe fe92 	bl	8001856 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08002b45 	.word	0x08002b45
 8002b40:	ffff0000 	.word	0xffff0000

08002b44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <I2C_DMAAbort+0x148>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	4a4a      	ldr	r2, [pc, #296]	; (8002c90 <I2C_DMAAbort+0x14c>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0a1a      	lsrs	r2, r3, #8
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00da      	lsls	r2, r3, #3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0220 	orr.w	r2, r3, #32
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002b8a:	e00a      	b.n	8002ba2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba0:	d0ea      	beq.n	8002b78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	2200      	movs	r2, #0
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d10e      	bne.n	8002c32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2200      	movs	r2, #0
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7fe fe37 	bl	800189e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c30:	e027      	b.n	8002c82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c38:	2b28      	cmp	r3, #40	; 0x28
 8002c3a:	d117      	bne.n	8002c6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2228      	movs	r2, #40	; 0x28
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c6a:	e007      	b.n	8002c7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002c7c:	6978      	ldr	r0, [r7, #20]
 8002c7e:	f7fe fe05 	bl	800188c <HAL_I2C_ErrorCallback>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	14f8b589 	.word	0x14f8b589

08002c94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	0a1a      	lsrs	r2, r3, #8
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e008      	b.n	8002ce4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce0:	d0e9      	beq.n	8002cb6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	14f8b589 	.word	0x14f8b589

08002cf8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d08:	d103      	bne.n	8002d12 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d10:	e007      	b.n	8002d22 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d1a:	d102      	bne.n	8002d22 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2208      	movs	r2, #8
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e26c      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8087 	beq.w	8002e5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d4c:	4b92      	ldr	r3, [pc, #584]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d00c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d58:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d112      	bne.n	8002d8a <HAL_RCC_OscConfig+0x5e>
 8002d64:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d10b      	bne.n	8002d8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d72:	4b89      	ldr	r3, [pc, #548]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d06c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x12c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d168      	bne.n	8002e58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e246      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x76>
 8002d94:	4b80      	ldr	r3, [pc, #512]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a7f      	ldr	r2, [pc, #508]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	e02e      	b.n	8002e00 <HAL_RCC_OscConfig+0xd4>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x98>
 8002daa:	4b7b      	ldr	r3, [pc, #492]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7a      	ldr	r2, [pc, #488]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b78      	ldr	r3, [pc, #480]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a77      	ldr	r2, [pc, #476]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e01d      	b.n	8002e00 <HAL_RCC_OscConfig+0xd4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0xbc>
 8002dce:	4b72      	ldr	r3, [pc, #456]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a71      	ldr	r2, [pc, #452]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0xd4>
 8002de8:	4b6b      	ldr	r3, [pc, #428]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b68      	ldr	r3, [pc, #416]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a67      	ldr	r2, [pc, #412]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fd fd4c 	bl	80008a4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fd fd48 	bl	80008a4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e1fa      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b5d      	ldr	r3, [pc, #372]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0xe4>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fd fd38 	bl	80008a4 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fd fd34 	bl	80008a4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1e6      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x10c>
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d063      	beq.n	8002f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e66:	4b4c      	ldr	r3, [pc, #304]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e72:	4b49      	ldr	r3, [pc, #292]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d11c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x18c>
 8002e7e:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x176>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1ba      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4939      	ldr	r1, [pc, #228]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	e03a      	b.n	8002f2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7fd fced 	bl	80008a4 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ece:	f7fd fce9 	bl	80008a4 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e19b      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eec:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4927      	ldr	r1, [pc, #156]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fd fccc 	bl	80008a4 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f10:	f7fd fcc8 	bl	80008a4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e17a      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d03a      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d019      	beq.n	8002f76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f48:	f7fd fcac 	bl	80008a4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fd fca8 	bl	80008a4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e15a      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f000 fac6 	bl	8003500 <RCC_Delay>
 8002f74:	e01c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7c:	f7fd fc92 	bl	80008a4 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f82:	e00f      	b.n	8002fa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f84:	f7fd fc8e 	bl	80008a4 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d908      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e140      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	42420000 	.word	0x42420000
 8002fa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	4b9e      	ldr	r3, [pc, #632]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e9      	bne.n	8002f84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a6 	beq.w	800310a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b97      	ldr	r3, [pc, #604]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b94      	ldr	r3, [pc, #592]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a93      	ldr	r2, [pc, #588]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	61d3      	str	r3, [r2, #28]
 8002fda:	4b91      	ldr	r3, [pc, #580]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fea:	4b8e      	ldr	r3, [pc, #568]	; (8003224 <HAL_RCC_OscConfig+0x4f8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff6:	4b8b      	ldr	r3, [pc, #556]	; (8003224 <HAL_RCC_OscConfig+0x4f8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a8a      	ldr	r2, [pc, #552]	; (8003224 <HAL_RCC_OscConfig+0x4f8>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003002:	f7fd fc4f 	bl	80008a4 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7fd fc4b 	bl	80008a4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	; 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e0fd      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	4b81      	ldr	r3, [pc, #516]	; (8003224 <HAL_RCC_OscConfig+0x4f8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x312>
 8003030:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4a7a      	ldr	r2, [pc, #488]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6213      	str	r3, [r2, #32]
 800303c:	e02d      	b.n	800309a <HAL_RCC_OscConfig+0x36e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x334>
 8003046:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4a75      	ldr	r2, [pc, #468]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6213      	str	r3, [r2, #32]
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4a72      	ldr	r2, [pc, #456]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	6213      	str	r3, [r2, #32]
 800305e:	e01c      	b.n	800309a <HAL_RCC_OscConfig+0x36e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_OscConfig+0x356>
 8003068:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a6c      	ldr	r2, [pc, #432]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4a69      	ldr	r2, [pc, #420]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	e00b      	b.n	800309a <HAL_RCC_OscConfig+0x36e>
 8003082:	4b67      	ldr	r3, [pc, #412]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4a66      	ldr	r2, [pc, #408]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6213      	str	r3, [r2, #32]
 800308e:	4b64      	ldr	r3, [pc, #400]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a63      	ldr	r2, [pc, #396]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d015      	beq.n	80030ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fd fbff 	bl	80008a4 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fd fbfb 	bl	80008a4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0ab      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	4b57      	ldr	r3, [pc, #348]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ee      	beq.n	80030aa <HAL_RCC_OscConfig+0x37e>
 80030cc:	e014      	b.n	80030f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7fd fbe9 	bl	80008a4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fd fbe5 	bl	80008a4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e095      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	4b4c      	ldr	r3, [pc, #304]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d105      	bne.n	800310a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4b48      	ldr	r3, [pc, #288]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	4a47      	ldr	r2, [pc, #284]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003108:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8081 	beq.w	8003216 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003114:	4b42      	ldr	r3, [pc, #264]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b08      	cmp	r3, #8
 800311e:	d061      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d146      	bne.n	80031b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_RCC_OscConfig+0x4fc>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fd fbb9 	bl	80008a4 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd fbb5 	bl	80008a4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e067      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003148:	4b35      	ldr	r3, [pc, #212]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d108      	bne.n	8003170 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800315e:	4b30      	ldr	r3, [pc, #192]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	492d      	ldr	r1, [pc, #180]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003170:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a19      	ldr	r1, [r3, #32]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	430b      	orrs	r3, r1
 8003182:	4927      	ldr	r1, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_RCC_OscConfig+0x4fc>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fd fb89 	bl	80008a4 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003196:	f7fd fb85 	bl	80008a4 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e037      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x46a>
 80031b4:	e02f      	b.n	8003216 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b1c      	ldr	r3, [pc, #112]	; (8003228 <HAL_RCC_OscConfig+0x4fc>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fd fb72 	bl	80008a4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fd fb6e 	bl	80008a4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e020      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x498>
 80031e2:	e018      	b.n	8003216 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e013      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_OscConfig+0x4f4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
 8003228:	42420060 	.word	0x42420060

0800322c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0d0      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d910      	bls.n	8003270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b67      	ldr	r3, [pc, #412]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 0207 	bic.w	r2, r3, #7
 8003256:	4965      	ldr	r1, [pc, #404]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0b8      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003288:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003292:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a52      	ldr	r2, [pc, #328]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	494d      	ldr	r1, [pc, #308]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d040      	beq.n	800334c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d115      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e073      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06b      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330a:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4936      	ldr	r1, [pc, #216]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800331c:	f7fd fac2 	bl	80008a4 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fd fabe 	bl	80008a4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e053      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 020c 	and.w	r2, r3, #12
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	429a      	cmp	r2, r3
 800334a:	d1eb      	bne.n	8003324 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d210      	bcs.n	800337c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 0207 	bic.w	r2, r3, #7
 8003362:	4922      	ldr	r1, [pc, #136]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e032      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4916      	ldr	r1, [pc, #88]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	490e      	ldr	r1, [pc, #56]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ba:	f000 f821 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033be:	4601      	mov	r1, r0
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033cc:	5cd3      	ldrb	r3, [r2, r3]
 80033ce:	fa21 f303 	lsr.w	r3, r1, r3
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1cc>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1d0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fa20 	bl	8000820 <HAL_InitTick>

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	080044b8 	.word	0x080044b8
 80033f8:	20000000 	.word	0x20000000
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	b490      	push	{r4, r7}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003406:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003408:	1d3c      	adds	r4, r7, #4
 800340a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800340c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	2300      	movs	r3, #0
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b04      	cmp	r3, #4
 8003438:	d002      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x40>
 800343a:	2b08      	cmp	r3, #8
 800343c:	d003      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x46>
 800343e:	e02d      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003442:	623b      	str	r3, [r7, #32]
      break;
 8003444:	e02d      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	0c9b      	lsrs	r3, r3, #18
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003452:	4413      	add	r3, r2
 8003454:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003458:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003464:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0c5b      	lsrs	r3, r3, #17
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003472:	4413      	add	r3, r2
 8003474:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003478:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	4a0f      	ldr	r2, [pc, #60]	; (80034bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800347e:	fb02 f203 	mul.w	r2, r2, r3
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
 800348a:	e004      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	623b      	str	r3, [r7, #32]
      break;
 800349a:	e002      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800349e:	623b      	str	r3, [r7, #32]
      break;
 80034a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a2:	6a3b      	ldr	r3, [r7, #32]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3728      	adds	r7, #40	; 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc90      	pop	{r4, r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	080044a4 	.word	0x080044a4
 80034b4:	080044b4 	.word	0x080044b4
 80034b8:	40021000 	.word	0x40021000
 80034bc:	007a1200 	.word	0x007a1200
 80034c0:	003d0900 	.word	0x003d0900

080034c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b02      	ldr	r3, [pc, #8]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	20000000 	.word	0x20000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff2 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e0:	4601      	mov	r1, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4a03      	ldr	r2, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	080044c8 	.word	0x080044c8

08003500 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <RCC_Delay+0x34>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <RCC_Delay+0x38>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0a5b      	lsrs	r3, r3, #9
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800351c:	bf00      	nop
  }
  while (Delay --);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1e5a      	subs	r2, r3, #1
 8003522:	60fa      	str	r2, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f9      	bne.n	800351c <RCC_Delay+0x1c>
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000
 8003538:	10624dd3 	.word	0x10624dd3

0800353c <__errno>:
 800353c:	4b01      	ldr	r3, [pc, #4]	; (8003544 <__errno+0x8>)
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	2000000c 	.word	0x2000000c

08003548 <__libc_init_array>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	2500      	movs	r5, #0
 800354c:	4e0c      	ldr	r6, [pc, #48]	; (8003580 <__libc_init_array+0x38>)
 800354e:	4c0d      	ldr	r4, [pc, #52]	; (8003584 <__libc_init_array+0x3c>)
 8003550:	1ba4      	subs	r4, r4, r6
 8003552:	10a4      	asrs	r4, r4, #2
 8003554:	42a5      	cmp	r5, r4
 8003556:	d109      	bne.n	800356c <__libc_init_array+0x24>
 8003558:	f000 ff74 	bl	8004444 <_init>
 800355c:	2500      	movs	r5, #0
 800355e:	4e0a      	ldr	r6, [pc, #40]	; (8003588 <__libc_init_array+0x40>)
 8003560:	4c0a      	ldr	r4, [pc, #40]	; (800358c <__libc_init_array+0x44>)
 8003562:	1ba4      	subs	r4, r4, r6
 8003564:	10a4      	asrs	r4, r4, #2
 8003566:	42a5      	cmp	r5, r4
 8003568:	d105      	bne.n	8003576 <__libc_init_array+0x2e>
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003570:	4798      	blx	r3
 8003572:	3501      	adds	r5, #1
 8003574:	e7ee      	b.n	8003554 <__libc_init_array+0xc>
 8003576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800357a:	4798      	blx	r3
 800357c:	3501      	adds	r5, #1
 800357e:	e7f2      	b.n	8003566 <__libc_init_array+0x1e>
 8003580:	08004568 	.word	0x08004568
 8003584:	08004568 	.word	0x08004568
 8003588:	08004568 	.word	0x08004568
 800358c:	0800456c 	.word	0x0800456c

08003590 <memset>:
 8003590:	4603      	mov	r3, r0
 8003592:	4402      	add	r2, r0
 8003594:	4293      	cmp	r3, r2
 8003596:	d100      	bne.n	800359a <memset+0xa>
 8003598:	4770      	bx	lr
 800359a:	f803 1b01 	strb.w	r1, [r3], #1
 800359e:	e7f9      	b.n	8003594 <memset+0x4>

080035a0 <iprintf>:
 80035a0:	b40f      	push	{r0, r1, r2, r3}
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <iprintf+0x2c>)
 80035a4:	b513      	push	{r0, r1, r4, lr}
 80035a6:	681c      	ldr	r4, [r3, #0]
 80035a8:	b124      	cbz	r4, 80035b4 <iprintf+0x14>
 80035aa:	69a3      	ldr	r3, [r4, #24]
 80035ac:	b913      	cbnz	r3, 80035b4 <iprintf+0x14>
 80035ae:	4620      	mov	r0, r4
 80035b0:	f000 fa22 	bl	80039f8 <__sinit>
 80035b4:	ab05      	add	r3, sp, #20
 80035b6:	9a04      	ldr	r2, [sp, #16]
 80035b8:	68a1      	ldr	r1, [r4, #8]
 80035ba:	4620      	mov	r0, r4
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	f000 fbd7 	bl	8003d70 <_vfiprintf_r>
 80035c2:	b002      	add	sp, #8
 80035c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c8:	b004      	add	sp, #16
 80035ca:	4770      	bx	lr
 80035cc:	2000000c 	.word	0x2000000c

080035d0 <_puts_r>:
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	460e      	mov	r6, r1
 80035d4:	4605      	mov	r5, r0
 80035d6:	b118      	cbz	r0, 80035e0 <_puts_r+0x10>
 80035d8:	6983      	ldr	r3, [r0, #24]
 80035da:	b90b      	cbnz	r3, 80035e0 <_puts_r+0x10>
 80035dc:	f000 fa0c 	bl	80039f8 <__sinit>
 80035e0:	69ab      	ldr	r3, [r5, #24]
 80035e2:	68ac      	ldr	r4, [r5, #8]
 80035e4:	b913      	cbnz	r3, 80035ec <_puts_r+0x1c>
 80035e6:	4628      	mov	r0, r5
 80035e8:	f000 fa06 	bl	80039f8 <__sinit>
 80035ec:	4b23      	ldr	r3, [pc, #140]	; (800367c <_puts_r+0xac>)
 80035ee:	429c      	cmp	r4, r3
 80035f0:	d117      	bne.n	8003622 <_puts_r+0x52>
 80035f2:	686c      	ldr	r4, [r5, #4]
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	071b      	lsls	r3, r3, #28
 80035f8:	d51d      	bpl.n	8003636 <_puts_r+0x66>
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	b1db      	cbz	r3, 8003636 <_puts_r+0x66>
 80035fe:	3e01      	subs	r6, #1
 8003600:	68a3      	ldr	r3, [r4, #8]
 8003602:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003606:	3b01      	subs	r3, #1
 8003608:	60a3      	str	r3, [r4, #8]
 800360a:	b9e9      	cbnz	r1, 8003648 <_puts_r+0x78>
 800360c:	2b00      	cmp	r3, #0
 800360e:	da2e      	bge.n	800366e <_puts_r+0x9e>
 8003610:	4622      	mov	r2, r4
 8003612:	210a      	movs	r1, #10
 8003614:	4628      	mov	r0, r5
 8003616:	f000 f83f 	bl	8003698 <__swbuf_r>
 800361a:	3001      	adds	r0, #1
 800361c:	d011      	beq.n	8003642 <_puts_r+0x72>
 800361e:	200a      	movs	r0, #10
 8003620:	e011      	b.n	8003646 <_puts_r+0x76>
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <_puts_r+0xb0>)
 8003624:	429c      	cmp	r4, r3
 8003626:	d101      	bne.n	800362c <_puts_r+0x5c>
 8003628:	68ac      	ldr	r4, [r5, #8]
 800362a:	e7e3      	b.n	80035f4 <_puts_r+0x24>
 800362c:	4b15      	ldr	r3, [pc, #84]	; (8003684 <_puts_r+0xb4>)
 800362e:	429c      	cmp	r4, r3
 8003630:	bf08      	it	eq
 8003632:	68ec      	ldreq	r4, [r5, #12]
 8003634:	e7de      	b.n	80035f4 <_puts_r+0x24>
 8003636:	4621      	mov	r1, r4
 8003638:	4628      	mov	r0, r5
 800363a:	f000 f87f 	bl	800373c <__swsetup_r>
 800363e:	2800      	cmp	r0, #0
 8003640:	d0dd      	beq.n	80035fe <_puts_r+0x2e>
 8003642:	f04f 30ff 	mov.w	r0, #4294967295
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	2b00      	cmp	r3, #0
 800364a:	da04      	bge.n	8003656 <_puts_r+0x86>
 800364c:	69a2      	ldr	r2, [r4, #24]
 800364e:	429a      	cmp	r2, r3
 8003650:	dc06      	bgt.n	8003660 <_puts_r+0x90>
 8003652:	290a      	cmp	r1, #10
 8003654:	d004      	beq.n	8003660 <_puts_r+0x90>
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	6022      	str	r2, [r4, #0]
 800365c:	7019      	strb	r1, [r3, #0]
 800365e:	e7cf      	b.n	8003600 <_puts_r+0x30>
 8003660:	4622      	mov	r2, r4
 8003662:	4628      	mov	r0, r5
 8003664:	f000 f818 	bl	8003698 <__swbuf_r>
 8003668:	3001      	adds	r0, #1
 800366a:	d1c9      	bne.n	8003600 <_puts_r+0x30>
 800366c:	e7e9      	b.n	8003642 <_puts_r+0x72>
 800366e:	200a      	movs	r0, #10
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	6022      	str	r2, [r4, #0]
 8003676:	7018      	strb	r0, [r3, #0]
 8003678:	e7e5      	b.n	8003646 <_puts_r+0x76>
 800367a:	bf00      	nop
 800367c:	080044f4 	.word	0x080044f4
 8003680:	08004514 	.word	0x08004514
 8003684:	080044d4 	.word	0x080044d4

08003688 <puts>:
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <puts+0xc>)
 800368a:	4601      	mov	r1, r0
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	f7ff bf9f 	b.w	80035d0 <_puts_r>
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c

08003698 <__swbuf_r>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	460e      	mov	r6, r1
 800369c:	4614      	mov	r4, r2
 800369e:	4605      	mov	r5, r0
 80036a0:	b118      	cbz	r0, 80036aa <__swbuf_r+0x12>
 80036a2:	6983      	ldr	r3, [r0, #24]
 80036a4:	b90b      	cbnz	r3, 80036aa <__swbuf_r+0x12>
 80036a6:	f000 f9a7 	bl	80039f8 <__sinit>
 80036aa:	4b21      	ldr	r3, [pc, #132]	; (8003730 <__swbuf_r+0x98>)
 80036ac:	429c      	cmp	r4, r3
 80036ae:	d12a      	bne.n	8003706 <__swbuf_r+0x6e>
 80036b0:	686c      	ldr	r4, [r5, #4]
 80036b2:	69a3      	ldr	r3, [r4, #24]
 80036b4:	60a3      	str	r3, [r4, #8]
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	071a      	lsls	r2, r3, #28
 80036ba:	d52e      	bpl.n	800371a <__swbuf_r+0x82>
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	b363      	cbz	r3, 800371a <__swbuf_r+0x82>
 80036c0:	6923      	ldr	r3, [r4, #16]
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	b2f6      	uxtb	r6, r6
 80036c6:	1ac0      	subs	r0, r0, r3
 80036c8:	6963      	ldr	r3, [r4, #20]
 80036ca:	4637      	mov	r7, r6
 80036cc:	4283      	cmp	r3, r0
 80036ce:	dc04      	bgt.n	80036da <__swbuf_r+0x42>
 80036d0:	4621      	mov	r1, r4
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 f926 	bl	8003924 <_fflush_r>
 80036d8:	bb28      	cbnz	r0, 8003726 <__swbuf_r+0x8e>
 80036da:	68a3      	ldr	r3, [r4, #8]
 80036dc:	3001      	adds	r0, #1
 80036de:	3b01      	subs	r3, #1
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	6022      	str	r2, [r4, #0]
 80036e8:	701e      	strb	r6, [r3, #0]
 80036ea:	6963      	ldr	r3, [r4, #20]
 80036ec:	4283      	cmp	r3, r0
 80036ee:	d004      	beq.n	80036fa <__swbuf_r+0x62>
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	07db      	lsls	r3, r3, #31
 80036f4:	d519      	bpl.n	800372a <__swbuf_r+0x92>
 80036f6:	2e0a      	cmp	r6, #10
 80036f8:	d117      	bne.n	800372a <__swbuf_r+0x92>
 80036fa:	4621      	mov	r1, r4
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f911 	bl	8003924 <_fflush_r>
 8003702:	b190      	cbz	r0, 800372a <__swbuf_r+0x92>
 8003704:	e00f      	b.n	8003726 <__swbuf_r+0x8e>
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <__swbuf_r+0x9c>)
 8003708:	429c      	cmp	r4, r3
 800370a:	d101      	bne.n	8003710 <__swbuf_r+0x78>
 800370c:	68ac      	ldr	r4, [r5, #8]
 800370e:	e7d0      	b.n	80036b2 <__swbuf_r+0x1a>
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <__swbuf_r+0xa0>)
 8003712:	429c      	cmp	r4, r3
 8003714:	bf08      	it	eq
 8003716:	68ec      	ldreq	r4, [r5, #12]
 8003718:	e7cb      	b.n	80036b2 <__swbuf_r+0x1a>
 800371a:	4621      	mov	r1, r4
 800371c:	4628      	mov	r0, r5
 800371e:	f000 f80d 	bl	800373c <__swsetup_r>
 8003722:	2800      	cmp	r0, #0
 8003724:	d0cc      	beq.n	80036c0 <__swbuf_r+0x28>
 8003726:	f04f 37ff 	mov.w	r7, #4294967295
 800372a:	4638      	mov	r0, r7
 800372c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800372e:	bf00      	nop
 8003730:	080044f4 	.word	0x080044f4
 8003734:	08004514 	.word	0x08004514
 8003738:	080044d4 	.word	0x080044d4

0800373c <__swsetup_r>:
 800373c:	4b32      	ldr	r3, [pc, #200]	; (8003808 <__swsetup_r+0xcc>)
 800373e:	b570      	push	{r4, r5, r6, lr}
 8003740:	681d      	ldr	r5, [r3, #0]
 8003742:	4606      	mov	r6, r0
 8003744:	460c      	mov	r4, r1
 8003746:	b125      	cbz	r5, 8003752 <__swsetup_r+0x16>
 8003748:	69ab      	ldr	r3, [r5, #24]
 800374a:	b913      	cbnz	r3, 8003752 <__swsetup_r+0x16>
 800374c:	4628      	mov	r0, r5
 800374e:	f000 f953 	bl	80039f8 <__sinit>
 8003752:	4b2e      	ldr	r3, [pc, #184]	; (800380c <__swsetup_r+0xd0>)
 8003754:	429c      	cmp	r4, r3
 8003756:	d10f      	bne.n	8003778 <__swsetup_r+0x3c>
 8003758:	686c      	ldr	r4, [r5, #4]
 800375a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800375e:	b29a      	uxth	r2, r3
 8003760:	0715      	lsls	r5, r2, #28
 8003762:	d42c      	bmi.n	80037be <__swsetup_r+0x82>
 8003764:	06d0      	lsls	r0, r2, #27
 8003766:	d411      	bmi.n	800378c <__swsetup_r+0x50>
 8003768:	2209      	movs	r2, #9
 800376a:	6032      	str	r2, [r6, #0]
 800376c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	e03e      	b.n	80037f6 <__swsetup_r+0xba>
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <__swsetup_r+0xd4>)
 800377a:	429c      	cmp	r4, r3
 800377c:	d101      	bne.n	8003782 <__swsetup_r+0x46>
 800377e:	68ac      	ldr	r4, [r5, #8]
 8003780:	e7eb      	b.n	800375a <__swsetup_r+0x1e>
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <__swsetup_r+0xd8>)
 8003784:	429c      	cmp	r4, r3
 8003786:	bf08      	it	eq
 8003788:	68ec      	ldreq	r4, [r5, #12]
 800378a:	e7e6      	b.n	800375a <__swsetup_r+0x1e>
 800378c:	0751      	lsls	r1, r2, #29
 800378e:	d512      	bpl.n	80037b6 <__swsetup_r+0x7a>
 8003790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003792:	b141      	cbz	r1, 80037a6 <__swsetup_r+0x6a>
 8003794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003798:	4299      	cmp	r1, r3
 800379a:	d002      	beq.n	80037a2 <__swsetup_r+0x66>
 800379c:	4630      	mov	r0, r6
 800379e:	f000 fa19 	bl	8003bd4 <_free_r>
 80037a2:	2300      	movs	r3, #0
 80037a4:	6363      	str	r3, [r4, #52]	; 0x34
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037ac:	81a3      	strh	r3, [r4, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	6063      	str	r3, [r4, #4]
 80037b2:	6923      	ldr	r3, [r4, #16]
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	b94b      	cbnz	r3, 80037d6 <__swsetup_r+0x9a>
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d003      	beq.n	80037d6 <__swsetup_r+0x9a>
 80037ce:	4621      	mov	r1, r4
 80037d0:	4630      	mov	r0, r6
 80037d2:	f000 f9bf 	bl	8003b54 <__smakebuf_r>
 80037d6:	89a2      	ldrh	r2, [r4, #12]
 80037d8:	f012 0301 	ands.w	r3, r2, #1
 80037dc:	d00c      	beq.n	80037f8 <__swsetup_r+0xbc>
 80037de:	2300      	movs	r3, #0
 80037e0:	60a3      	str	r3, [r4, #8]
 80037e2:	6963      	ldr	r3, [r4, #20]
 80037e4:	425b      	negs	r3, r3
 80037e6:	61a3      	str	r3, [r4, #24]
 80037e8:	6923      	ldr	r3, [r4, #16]
 80037ea:	b953      	cbnz	r3, 8003802 <__swsetup_r+0xc6>
 80037ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80037f4:	d1ba      	bne.n	800376c <__swsetup_r+0x30>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	0792      	lsls	r2, r2, #30
 80037fa:	bf58      	it	pl
 80037fc:	6963      	ldrpl	r3, [r4, #20]
 80037fe:	60a3      	str	r3, [r4, #8]
 8003800:	e7f2      	b.n	80037e8 <__swsetup_r+0xac>
 8003802:	2000      	movs	r0, #0
 8003804:	e7f7      	b.n	80037f6 <__swsetup_r+0xba>
 8003806:	bf00      	nop
 8003808:	2000000c 	.word	0x2000000c
 800380c:	080044f4 	.word	0x080044f4
 8003810:	08004514 	.word	0x08004514
 8003814:	080044d4 	.word	0x080044d4

08003818 <__sflush_r>:
 8003818:	898a      	ldrh	r2, [r1, #12]
 800381a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381e:	4605      	mov	r5, r0
 8003820:	0710      	lsls	r0, r2, #28
 8003822:	460c      	mov	r4, r1
 8003824:	d458      	bmi.n	80038d8 <__sflush_r+0xc0>
 8003826:	684b      	ldr	r3, [r1, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	dc05      	bgt.n	8003838 <__sflush_r+0x20>
 800382c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	dc02      	bgt.n	8003838 <__sflush_r+0x20>
 8003832:	2000      	movs	r0, #0
 8003834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800383a:	2e00      	cmp	r6, #0
 800383c:	d0f9      	beq.n	8003832 <__sflush_r+0x1a>
 800383e:	2300      	movs	r3, #0
 8003840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003844:	682f      	ldr	r7, [r5, #0]
 8003846:	6a21      	ldr	r1, [r4, #32]
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	d032      	beq.n	80038b2 <__sflush_r+0x9a>
 800384c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	075a      	lsls	r2, r3, #29
 8003852:	d505      	bpl.n	8003860 <__sflush_r+0x48>
 8003854:	6863      	ldr	r3, [r4, #4]
 8003856:	1ac0      	subs	r0, r0, r3
 8003858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800385a:	b10b      	cbz	r3, 8003860 <__sflush_r+0x48>
 800385c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800385e:	1ac0      	subs	r0, r0, r3
 8003860:	2300      	movs	r3, #0
 8003862:	4602      	mov	r2, r0
 8003864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003866:	6a21      	ldr	r1, [r4, #32]
 8003868:	4628      	mov	r0, r5
 800386a:	47b0      	blx	r6
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	d106      	bne.n	8003880 <__sflush_r+0x68>
 8003872:	6829      	ldr	r1, [r5, #0]
 8003874:	291d      	cmp	r1, #29
 8003876:	d848      	bhi.n	800390a <__sflush_r+0xf2>
 8003878:	4a29      	ldr	r2, [pc, #164]	; (8003920 <__sflush_r+0x108>)
 800387a:	40ca      	lsrs	r2, r1
 800387c:	07d6      	lsls	r6, r2, #31
 800387e:	d544      	bpl.n	800390a <__sflush_r+0xf2>
 8003880:	2200      	movs	r2, #0
 8003882:	6062      	str	r2, [r4, #4]
 8003884:	6922      	ldr	r2, [r4, #16]
 8003886:	04d9      	lsls	r1, r3, #19
 8003888:	6022      	str	r2, [r4, #0]
 800388a:	d504      	bpl.n	8003896 <__sflush_r+0x7e>
 800388c:	1c42      	adds	r2, r0, #1
 800388e:	d101      	bne.n	8003894 <__sflush_r+0x7c>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b903      	cbnz	r3, 8003896 <__sflush_r+0x7e>
 8003894:	6560      	str	r0, [r4, #84]	; 0x54
 8003896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003898:	602f      	str	r7, [r5, #0]
 800389a:	2900      	cmp	r1, #0
 800389c:	d0c9      	beq.n	8003832 <__sflush_r+0x1a>
 800389e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038a2:	4299      	cmp	r1, r3
 80038a4:	d002      	beq.n	80038ac <__sflush_r+0x94>
 80038a6:	4628      	mov	r0, r5
 80038a8:	f000 f994 	bl	8003bd4 <_free_r>
 80038ac:	2000      	movs	r0, #0
 80038ae:	6360      	str	r0, [r4, #52]	; 0x34
 80038b0:	e7c0      	b.n	8003834 <__sflush_r+0x1c>
 80038b2:	2301      	movs	r3, #1
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b0      	blx	r6
 80038b8:	1c41      	adds	r1, r0, #1
 80038ba:	d1c8      	bne.n	800384e <__sflush_r+0x36>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0c5      	beq.n	800384e <__sflush_r+0x36>
 80038c2:	2b1d      	cmp	r3, #29
 80038c4:	d001      	beq.n	80038ca <__sflush_r+0xb2>
 80038c6:	2b16      	cmp	r3, #22
 80038c8:	d101      	bne.n	80038ce <__sflush_r+0xb6>
 80038ca:	602f      	str	r7, [r5, #0]
 80038cc:	e7b1      	b.n	8003832 <__sflush_r+0x1a>
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	e7ad      	b.n	8003834 <__sflush_r+0x1c>
 80038d8:	690f      	ldr	r7, [r1, #16]
 80038da:	2f00      	cmp	r7, #0
 80038dc:	d0a9      	beq.n	8003832 <__sflush_r+0x1a>
 80038de:	0793      	lsls	r3, r2, #30
 80038e0:	bf18      	it	ne
 80038e2:	2300      	movne	r3, #0
 80038e4:	680e      	ldr	r6, [r1, #0]
 80038e6:	bf08      	it	eq
 80038e8:	694b      	ldreq	r3, [r1, #20]
 80038ea:	eba6 0807 	sub.w	r8, r6, r7
 80038ee:	600f      	str	r7, [r1, #0]
 80038f0:	608b      	str	r3, [r1, #8]
 80038f2:	f1b8 0f00 	cmp.w	r8, #0
 80038f6:	dd9c      	ble.n	8003832 <__sflush_r+0x1a>
 80038f8:	4643      	mov	r3, r8
 80038fa:	463a      	mov	r2, r7
 80038fc:	6a21      	ldr	r1, [r4, #32]
 80038fe:	4628      	mov	r0, r5
 8003900:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003902:	47b0      	blx	r6
 8003904:	2800      	cmp	r0, #0
 8003906:	dc06      	bgt.n	8003916 <__sflush_r+0xfe>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390e:	81a3      	strh	r3, [r4, #12]
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	e78e      	b.n	8003834 <__sflush_r+0x1c>
 8003916:	4407      	add	r7, r0
 8003918:	eba8 0800 	sub.w	r8, r8, r0
 800391c:	e7e9      	b.n	80038f2 <__sflush_r+0xda>
 800391e:	bf00      	nop
 8003920:	20400001 	.word	0x20400001

08003924 <_fflush_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	690b      	ldr	r3, [r1, #16]
 8003928:	4605      	mov	r5, r0
 800392a:	460c      	mov	r4, r1
 800392c:	b1db      	cbz	r3, 8003966 <_fflush_r+0x42>
 800392e:	b118      	cbz	r0, 8003938 <_fflush_r+0x14>
 8003930:	6983      	ldr	r3, [r0, #24]
 8003932:	b90b      	cbnz	r3, 8003938 <_fflush_r+0x14>
 8003934:	f000 f860 	bl	80039f8 <__sinit>
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <_fflush_r+0x48>)
 800393a:	429c      	cmp	r4, r3
 800393c:	d109      	bne.n	8003952 <_fflush_r+0x2e>
 800393e:	686c      	ldr	r4, [r5, #4]
 8003940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003944:	b17b      	cbz	r3, 8003966 <_fflush_r+0x42>
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800394e:	f7ff bf63 	b.w	8003818 <__sflush_r>
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <_fflush_r+0x4c>)
 8003954:	429c      	cmp	r4, r3
 8003956:	d101      	bne.n	800395c <_fflush_r+0x38>
 8003958:	68ac      	ldr	r4, [r5, #8]
 800395a:	e7f1      	b.n	8003940 <_fflush_r+0x1c>
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <_fflush_r+0x50>)
 800395e:	429c      	cmp	r4, r3
 8003960:	bf08      	it	eq
 8003962:	68ec      	ldreq	r4, [r5, #12]
 8003964:	e7ec      	b.n	8003940 <_fflush_r+0x1c>
 8003966:	2000      	movs	r0, #0
 8003968:	bd38      	pop	{r3, r4, r5, pc}
 800396a:	bf00      	nop
 800396c:	080044f4 	.word	0x080044f4
 8003970:	08004514 	.word	0x08004514
 8003974:	080044d4 	.word	0x080044d4

08003978 <std>:
 8003978:	2300      	movs	r3, #0
 800397a:	b510      	push	{r4, lr}
 800397c:	4604      	mov	r4, r0
 800397e:	e9c0 3300 	strd	r3, r3, [r0]
 8003982:	6083      	str	r3, [r0, #8]
 8003984:	8181      	strh	r1, [r0, #12]
 8003986:	6643      	str	r3, [r0, #100]	; 0x64
 8003988:	81c2      	strh	r2, [r0, #14]
 800398a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800398e:	6183      	str	r3, [r0, #24]
 8003990:	4619      	mov	r1, r3
 8003992:	2208      	movs	r2, #8
 8003994:	305c      	adds	r0, #92	; 0x5c
 8003996:	f7ff fdfb 	bl	8003590 <memset>
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <std+0x38>)
 800399c:	6224      	str	r4, [r4, #32]
 800399e:	6263      	str	r3, [r4, #36]	; 0x24
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <std+0x3c>)
 80039a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <std+0x40>)
 80039a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <std+0x44>)
 80039aa:	6323      	str	r3, [r4, #48]	; 0x30
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	080042cd 	.word	0x080042cd
 80039b4:	080042ef 	.word	0x080042ef
 80039b8:	08004327 	.word	0x08004327
 80039bc:	0800434b 	.word	0x0800434b

080039c0 <_cleanup_r>:
 80039c0:	4901      	ldr	r1, [pc, #4]	; (80039c8 <_cleanup_r+0x8>)
 80039c2:	f000 b885 	b.w	8003ad0 <_fwalk_reent>
 80039c6:	bf00      	nop
 80039c8:	08003925 	.word	0x08003925

080039cc <__sfmoreglue>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	2568      	movs	r5, #104	; 0x68
 80039d0:	1e4a      	subs	r2, r1, #1
 80039d2:	4355      	muls	r5, r2
 80039d4:	460e      	mov	r6, r1
 80039d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039da:	f000 f947 	bl	8003c6c <_malloc_r>
 80039de:	4604      	mov	r4, r0
 80039e0:	b140      	cbz	r0, 80039f4 <__sfmoreglue+0x28>
 80039e2:	2100      	movs	r1, #0
 80039e4:	e9c0 1600 	strd	r1, r6, [r0]
 80039e8:	300c      	adds	r0, #12
 80039ea:	60a0      	str	r0, [r4, #8]
 80039ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039f0:	f7ff fdce 	bl	8003590 <memset>
 80039f4:	4620      	mov	r0, r4
 80039f6:	bd70      	pop	{r4, r5, r6, pc}

080039f8 <__sinit>:
 80039f8:	6983      	ldr	r3, [r0, #24]
 80039fa:	b510      	push	{r4, lr}
 80039fc:	4604      	mov	r4, r0
 80039fe:	bb33      	cbnz	r3, 8003a4e <__sinit+0x56>
 8003a00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003a04:	6503      	str	r3, [r0, #80]	; 0x50
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <__sinit+0x58>)
 8003a08:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <__sinit+0x5c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6282      	str	r2, [r0, #40]	; 0x28
 8003a0e:	4298      	cmp	r0, r3
 8003a10:	bf04      	itt	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	6183      	streq	r3, [r0, #24]
 8003a16:	f000 f81f 	bl	8003a58 <__sfp>
 8003a1a:	6060      	str	r0, [r4, #4]
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f000 f81b 	bl	8003a58 <__sfp>
 8003a22:	60a0      	str	r0, [r4, #8]
 8003a24:	4620      	mov	r0, r4
 8003a26:	f000 f817 	bl	8003a58 <__sfp>
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60e0      	str	r0, [r4, #12]
 8003a2e:	2104      	movs	r1, #4
 8003a30:	6860      	ldr	r0, [r4, #4]
 8003a32:	f7ff ffa1 	bl	8003978 <std>
 8003a36:	2201      	movs	r2, #1
 8003a38:	2109      	movs	r1, #9
 8003a3a:	68a0      	ldr	r0, [r4, #8]
 8003a3c:	f7ff ff9c 	bl	8003978 <std>
 8003a40:	2202      	movs	r2, #2
 8003a42:	2112      	movs	r1, #18
 8003a44:	68e0      	ldr	r0, [r4, #12]
 8003a46:	f7ff ff97 	bl	8003978 <std>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61a3      	str	r3, [r4, #24]
 8003a4e:	bd10      	pop	{r4, pc}
 8003a50:	080044d0 	.word	0x080044d0
 8003a54:	080039c1 	.word	0x080039c1

08003a58 <__sfp>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <__sfp+0x70>)
 8003a5c:	4607      	mov	r7, r0
 8003a5e:	681e      	ldr	r6, [r3, #0]
 8003a60:	69b3      	ldr	r3, [r6, #24]
 8003a62:	b913      	cbnz	r3, 8003a6a <__sfp+0x12>
 8003a64:	4630      	mov	r0, r6
 8003a66:	f7ff ffc7 	bl	80039f8 <__sinit>
 8003a6a:	3648      	adds	r6, #72	; 0x48
 8003a6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	d503      	bpl.n	8003a7c <__sfp+0x24>
 8003a74:	6833      	ldr	r3, [r6, #0]
 8003a76:	b133      	cbz	r3, 8003a86 <__sfp+0x2e>
 8003a78:	6836      	ldr	r6, [r6, #0]
 8003a7a:	e7f7      	b.n	8003a6c <__sfp+0x14>
 8003a7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a80:	b16d      	cbz	r5, 8003a9e <__sfp+0x46>
 8003a82:	3468      	adds	r4, #104	; 0x68
 8003a84:	e7f4      	b.n	8003a70 <__sfp+0x18>
 8003a86:	2104      	movs	r1, #4
 8003a88:	4638      	mov	r0, r7
 8003a8a:	f7ff ff9f 	bl	80039cc <__sfmoreglue>
 8003a8e:	6030      	str	r0, [r6, #0]
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1f1      	bne.n	8003a78 <__sfp+0x20>
 8003a94:	230c      	movs	r3, #12
 8003a96:	4604      	mov	r4, r0
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <__sfp+0x74>)
 8003aa0:	6665      	str	r5, [r4, #100]	; 0x64
 8003aa2:	e9c4 5500 	strd	r5, r5, [r4]
 8003aa6:	60a5      	str	r5, [r4, #8]
 8003aa8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003aac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ab8:	f7ff fd6a 	bl	8003590 <memset>
 8003abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ac4:	e7e9      	b.n	8003a9a <__sfp+0x42>
 8003ac6:	bf00      	nop
 8003ac8:	080044d0 	.word	0x080044d0
 8003acc:	ffff0001 	.word	0xffff0001

08003ad0 <_fwalk_reent>:
 8003ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	4689      	mov	r9, r1
 8003ad8:	2600      	movs	r6, #0
 8003ada:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ade:	b914      	cbnz	r4, 8003ae6 <_fwalk_reent+0x16>
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003aea:	3f01      	subs	r7, #1
 8003aec:	d501      	bpl.n	8003af2 <_fwalk_reent+0x22>
 8003aee:	6824      	ldr	r4, [r4, #0]
 8003af0:	e7f5      	b.n	8003ade <_fwalk_reent+0xe>
 8003af2:	89ab      	ldrh	r3, [r5, #12]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d907      	bls.n	8003b08 <_fwalk_reent+0x38>
 8003af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003afc:	3301      	adds	r3, #1
 8003afe:	d003      	beq.n	8003b08 <_fwalk_reent+0x38>
 8003b00:	4629      	mov	r1, r5
 8003b02:	4640      	mov	r0, r8
 8003b04:	47c8      	blx	r9
 8003b06:	4306      	orrs	r6, r0
 8003b08:	3568      	adds	r5, #104	; 0x68
 8003b0a:	e7ee      	b.n	8003aea <_fwalk_reent+0x1a>

08003b0c <__swhatbuf_r>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	460e      	mov	r6, r1
 8003b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b14:	b096      	sub	sp, #88	; 0x58
 8003b16:	2900      	cmp	r1, #0
 8003b18:	4614      	mov	r4, r2
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	da07      	bge.n	8003b2e <__swhatbuf_r+0x22>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	602b      	str	r3, [r5, #0]
 8003b22:	89b3      	ldrh	r3, [r6, #12]
 8003b24:	061a      	lsls	r2, r3, #24
 8003b26:	d410      	bmi.n	8003b4a <__swhatbuf_r+0x3e>
 8003b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b2c:	e00e      	b.n	8003b4c <__swhatbuf_r+0x40>
 8003b2e:	466a      	mov	r2, sp
 8003b30:	f000 fc32 	bl	8004398 <_fstat_r>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	dbf2      	blt.n	8003b1e <__swhatbuf_r+0x12>
 8003b38:	9a01      	ldr	r2, [sp, #4]
 8003b3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b42:	425a      	negs	r2, r3
 8003b44:	415a      	adcs	r2, r3
 8003b46:	602a      	str	r2, [r5, #0]
 8003b48:	e7ee      	b.n	8003b28 <__swhatbuf_r+0x1c>
 8003b4a:	2340      	movs	r3, #64	; 0x40
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	6023      	str	r3, [r4, #0]
 8003b50:	b016      	add	sp, #88	; 0x58
 8003b52:	bd70      	pop	{r4, r5, r6, pc}

08003b54 <__smakebuf_r>:
 8003b54:	898b      	ldrh	r3, [r1, #12]
 8003b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b58:	079d      	lsls	r5, r3, #30
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	d507      	bpl.n	8003b70 <__smakebuf_r+0x1c>
 8003b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	6123      	str	r3, [r4, #16]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	6163      	str	r3, [r4, #20]
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	ab01      	add	r3, sp, #4
 8003b72:	466a      	mov	r2, sp
 8003b74:	f7ff ffca 	bl	8003b0c <__swhatbuf_r>
 8003b78:	9900      	ldr	r1, [sp, #0]
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f000 f875 	bl	8003c6c <_malloc_r>
 8003b82:	b948      	cbnz	r0, 8003b98 <__smakebuf_r+0x44>
 8003b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b88:	059a      	lsls	r2, r3, #22
 8003b8a:	d4ef      	bmi.n	8003b6c <__smakebuf_r+0x18>
 8003b8c:	f023 0303 	bic.w	r3, r3, #3
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	e7e3      	b.n	8003b60 <__smakebuf_r+0xc>
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <__smakebuf_r+0x7c>)
 8003b9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	6020      	str	r0, [r4, #0]
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	9b00      	ldr	r3, [sp, #0]
 8003ba8:	6120      	str	r0, [r4, #16]
 8003baa:	6163      	str	r3, [r4, #20]
 8003bac:	9b01      	ldr	r3, [sp, #4]
 8003bae:	b15b      	cbz	r3, 8003bc8 <__smakebuf_r+0x74>
 8003bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	f000 fc01 	bl	80043bc <_isatty_r>
 8003bba:	b128      	cbz	r0, 8003bc8 <__smakebuf_r+0x74>
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	81a3      	strh	r3, [r4, #12]
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	431d      	orrs	r5, r3
 8003bcc:	81a5      	strh	r5, [r4, #12]
 8003bce:	e7cd      	b.n	8003b6c <__smakebuf_r+0x18>
 8003bd0:	080039c1 	.word	0x080039c1

08003bd4 <_free_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	2900      	cmp	r1, #0
 8003bda:	d043      	beq.n	8003c64 <_free_r+0x90>
 8003bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be0:	1f0c      	subs	r4, r1, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bfb8      	it	lt
 8003be6:	18e4      	addlt	r4, r4, r3
 8003be8:	f000 fc18 	bl	800441c <__malloc_lock>
 8003bec:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <_free_r+0x94>)
 8003bee:	6813      	ldr	r3, [r2, #0]
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	b933      	cbnz	r3, 8003c02 <_free_r+0x2e>
 8003bf4:	6063      	str	r3, [r4, #4]
 8003bf6:	6014      	str	r4, [r2, #0]
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bfe:	f000 bc0e 	b.w	800441e <__malloc_unlock>
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	d90b      	bls.n	8003c1e <_free_r+0x4a>
 8003c06:	6821      	ldr	r1, [r4, #0]
 8003c08:	1862      	adds	r2, r4, r1
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	bf01      	itttt	eq
 8003c0e:	681a      	ldreq	r2, [r3, #0]
 8003c10:	685b      	ldreq	r3, [r3, #4]
 8003c12:	1852      	addeq	r2, r2, r1
 8003c14:	6022      	streq	r2, [r4, #0]
 8003c16:	6063      	str	r3, [r4, #4]
 8003c18:	6004      	str	r4, [r0, #0]
 8003c1a:	e7ed      	b.n	8003bf8 <_free_r+0x24>
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	b10a      	cbz	r2, 8003c26 <_free_r+0x52>
 8003c22:	42a2      	cmp	r2, r4
 8003c24:	d9fa      	bls.n	8003c1c <_free_r+0x48>
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	1858      	adds	r0, r3, r1
 8003c2a:	42a0      	cmp	r0, r4
 8003c2c:	d10b      	bne.n	8003c46 <_free_r+0x72>
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	4401      	add	r1, r0
 8003c32:	1858      	adds	r0, r3, r1
 8003c34:	4282      	cmp	r2, r0
 8003c36:	6019      	str	r1, [r3, #0]
 8003c38:	d1de      	bne.n	8003bf8 <_free_r+0x24>
 8003c3a:	6810      	ldr	r0, [r2, #0]
 8003c3c:	6852      	ldr	r2, [r2, #4]
 8003c3e:	4401      	add	r1, r0
 8003c40:	6019      	str	r1, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	e7d8      	b.n	8003bf8 <_free_r+0x24>
 8003c46:	d902      	bls.n	8003c4e <_free_r+0x7a>
 8003c48:	230c      	movs	r3, #12
 8003c4a:	602b      	str	r3, [r5, #0]
 8003c4c:	e7d4      	b.n	8003bf8 <_free_r+0x24>
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	1821      	adds	r1, r4, r0
 8003c52:	428a      	cmp	r2, r1
 8003c54:	bf01      	itttt	eq
 8003c56:	6811      	ldreq	r1, [r2, #0]
 8003c58:	6852      	ldreq	r2, [r2, #4]
 8003c5a:	1809      	addeq	r1, r1, r0
 8003c5c:	6021      	streq	r1, [r4, #0]
 8003c5e:	6062      	str	r2, [r4, #4]
 8003c60:	605c      	str	r4, [r3, #4]
 8003c62:	e7c9      	b.n	8003bf8 <_free_r+0x24>
 8003c64:	bd38      	pop	{r3, r4, r5, pc}
 8003c66:	bf00      	nop
 8003c68:	200000a4 	.word	0x200000a4

08003c6c <_malloc_r>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	1ccd      	adds	r5, r1, #3
 8003c70:	f025 0503 	bic.w	r5, r5, #3
 8003c74:	3508      	adds	r5, #8
 8003c76:	2d0c      	cmp	r5, #12
 8003c78:	bf38      	it	cc
 8003c7a:	250c      	movcc	r5, #12
 8003c7c:	2d00      	cmp	r5, #0
 8003c7e:	4606      	mov	r6, r0
 8003c80:	db01      	blt.n	8003c86 <_malloc_r+0x1a>
 8003c82:	42a9      	cmp	r1, r5
 8003c84:	d903      	bls.n	8003c8e <_malloc_r+0x22>
 8003c86:	230c      	movs	r3, #12
 8003c88:	6033      	str	r3, [r6, #0]
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	f000 fbc5 	bl	800441c <__malloc_lock>
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <_malloc_r+0xac>)
 8003c94:	6814      	ldr	r4, [r2, #0]
 8003c96:	4621      	mov	r1, r4
 8003c98:	b991      	cbnz	r1, 8003cc0 <_malloc_r+0x54>
 8003c9a:	4c20      	ldr	r4, [pc, #128]	; (8003d1c <_malloc_r+0xb0>)
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	b91b      	cbnz	r3, 8003ca8 <_malloc_r+0x3c>
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f000 fb03 	bl	80042ac <_sbrk_r>
 8003ca6:	6020      	str	r0, [r4, #0]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4630      	mov	r0, r6
 8003cac:	f000 fafe 	bl	80042ac <_sbrk_r>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d124      	bne.n	8003cfe <_malloc_r+0x92>
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	f000 fbb0 	bl	800441e <__malloc_unlock>
 8003cbe:	e7e4      	b.n	8003c8a <_malloc_r+0x1e>
 8003cc0:	680b      	ldr	r3, [r1, #0]
 8003cc2:	1b5b      	subs	r3, r3, r5
 8003cc4:	d418      	bmi.n	8003cf8 <_malloc_r+0x8c>
 8003cc6:	2b0b      	cmp	r3, #11
 8003cc8:	d90f      	bls.n	8003cea <_malloc_r+0x7e>
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	18cc      	adds	r4, r1, r3
 8003cce:	50cd      	str	r5, [r1, r3]
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f000 fba4 	bl	800441e <__malloc_unlock>
 8003cd6:	f104 000b 	add.w	r0, r4, #11
 8003cda:	1d23      	adds	r3, r4, #4
 8003cdc:	f020 0007 	bic.w	r0, r0, #7
 8003ce0:	1ac3      	subs	r3, r0, r3
 8003ce2:	d0d3      	beq.n	8003c8c <_malloc_r+0x20>
 8003ce4:	425a      	negs	r2, r3
 8003ce6:	50e2      	str	r2, [r4, r3]
 8003ce8:	e7d0      	b.n	8003c8c <_malloc_r+0x20>
 8003cea:	684b      	ldr	r3, [r1, #4]
 8003cec:	428c      	cmp	r4, r1
 8003cee:	bf16      	itet	ne
 8003cf0:	6063      	strne	r3, [r4, #4]
 8003cf2:	6013      	streq	r3, [r2, #0]
 8003cf4:	460c      	movne	r4, r1
 8003cf6:	e7eb      	b.n	8003cd0 <_malloc_r+0x64>
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	6849      	ldr	r1, [r1, #4]
 8003cfc:	e7cc      	b.n	8003c98 <_malloc_r+0x2c>
 8003cfe:	1cc4      	adds	r4, r0, #3
 8003d00:	f024 0403 	bic.w	r4, r4, #3
 8003d04:	42a0      	cmp	r0, r4
 8003d06:	d005      	beq.n	8003d14 <_malloc_r+0xa8>
 8003d08:	1a21      	subs	r1, r4, r0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f000 face 	bl	80042ac <_sbrk_r>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d0cf      	beq.n	8003cb4 <_malloc_r+0x48>
 8003d14:	6025      	str	r5, [r4, #0]
 8003d16:	e7db      	b.n	8003cd0 <_malloc_r+0x64>
 8003d18:	200000a4 	.word	0x200000a4
 8003d1c:	200000a8 	.word	0x200000a8

08003d20 <__sfputc_r>:
 8003d20:	6893      	ldr	r3, [r2, #8]
 8003d22:	b410      	push	{r4}
 8003d24:	3b01      	subs	r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	6093      	str	r3, [r2, #8]
 8003d2a:	da07      	bge.n	8003d3c <__sfputc_r+0x1c>
 8003d2c:	6994      	ldr	r4, [r2, #24]
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	db01      	blt.n	8003d36 <__sfputc_r+0x16>
 8003d32:	290a      	cmp	r1, #10
 8003d34:	d102      	bne.n	8003d3c <__sfputc_r+0x1c>
 8003d36:	bc10      	pop	{r4}
 8003d38:	f7ff bcae 	b.w	8003698 <__swbuf_r>
 8003d3c:	6813      	ldr	r3, [r2, #0]
 8003d3e:	1c58      	adds	r0, r3, #1
 8003d40:	6010      	str	r0, [r2, #0]
 8003d42:	7019      	strb	r1, [r3, #0]
 8003d44:	4608      	mov	r0, r1
 8003d46:	bc10      	pop	{r4}
 8003d48:	4770      	bx	lr

08003d4a <__sfputs_r>:
 8003d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	460f      	mov	r7, r1
 8003d50:	4614      	mov	r4, r2
 8003d52:	18d5      	adds	r5, r2, r3
 8003d54:	42ac      	cmp	r4, r5
 8003d56:	d101      	bne.n	8003d5c <__sfputs_r+0x12>
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e007      	b.n	8003d6c <__sfputs_r+0x22>
 8003d5c:	463a      	mov	r2, r7
 8003d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d62:	4630      	mov	r0, r6
 8003d64:	f7ff ffdc 	bl	8003d20 <__sfputc_r>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	d1f3      	bne.n	8003d54 <__sfputs_r+0xa>
 8003d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d70 <_vfiprintf_r>:
 8003d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d74:	460c      	mov	r4, r1
 8003d76:	b09d      	sub	sp, #116	; 0x74
 8003d78:	4617      	mov	r7, r2
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	4606      	mov	r6, r0
 8003d7e:	b118      	cbz	r0, 8003d88 <_vfiprintf_r+0x18>
 8003d80:	6983      	ldr	r3, [r0, #24]
 8003d82:	b90b      	cbnz	r3, 8003d88 <_vfiprintf_r+0x18>
 8003d84:	f7ff fe38 	bl	80039f8 <__sinit>
 8003d88:	4b7c      	ldr	r3, [pc, #496]	; (8003f7c <_vfiprintf_r+0x20c>)
 8003d8a:	429c      	cmp	r4, r3
 8003d8c:	d158      	bne.n	8003e40 <_vfiprintf_r+0xd0>
 8003d8e:	6874      	ldr	r4, [r6, #4]
 8003d90:	89a3      	ldrh	r3, [r4, #12]
 8003d92:	0718      	lsls	r0, r3, #28
 8003d94:	d55e      	bpl.n	8003e54 <_vfiprintf_r+0xe4>
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05b      	beq.n	8003e54 <_vfiprintf_r+0xe4>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003da0:	2320      	movs	r3, #32
 8003da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da6:	2330      	movs	r3, #48	; 0x30
 8003da8:	f04f 0b01 	mov.w	fp, #1
 8003dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003db0:	9503      	str	r5, [sp, #12]
 8003db2:	46b8      	mov	r8, r7
 8003db4:	4645      	mov	r5, r8
 8003db6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003dba:	b10b      	cbz	r3, 8003dc0 <_vfiprintf_r+0x50>
 8003dbc:	2b25      	cmp	r3, #37	; 0x25
 8003dbe:	d154      	bne.n	8003e6a <_vfiprintf_r+0xfa>
 8003dc0:	ebb8 0a07 	subs.w	sl, r8, r7
 8003dc4:	d00b      	beq.n	8003dde <_vfiprintf_r+0x6e>
 8003dc6:	4653      	mov	r3, sl
 8003dc8:	463a      	mov	r2, r7
 8003dca:	4621      	mov	r1, r4
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f7ff ffbc 	bl	8003d4a <__sfputs_r>
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	f000 80c2 	beq.w	8003f5c <_vfiprintf_r+0x1ec>
 8003dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dda:	4453      	add	r3, sl
 8003ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dde:	f898 3000 	ldrb.w	r3, [r8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80ba 	beq.w	8003f5c <_vfiprintf_r+0x1ec>
 8003de8:	2300      	movs	r3, #0
 8003dea:	f04f 32ff 	mov.w	r2, #4294967295
 8003dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	9307      	str	r3, [sp, #28]
 8003df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8003dfc:	46a8      	mov	r8, r5
 8003dfe:	2205      	movs	r2, #5
 8003e00:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003e04:	485e      	ldr	r0, [pc, #376]	; (8003f80 <_vfiprintf_r+0x210>)
 8003e06:	f000 fafb 	bl	8004400 <memchr>
 8003e0a:	9b04      	ldr	r3, [sp, #16]
 8003e0c:	bb78      	cbnz	r0, 8003e6e <_vfiprintf_r+0xfe>
 8003e0e:	06d9      	lsls	r1, r3, #27
 8003e10:	bf44      	itt	mi
 8003e12:	2220      	movmi	r2, #32
 8003e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e18:	071a      	lsls	r2, r3, #28
 8003e1a:	bf44      	itt	mi
 8003e1c:	222b      	movmi	r2, #43	; 0x2b
 8003e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e22:	782a      	ldrb	r2, [r5, #0]
 8003e24:	2a2a      	cmp	r2, #42	; 0x2a
 8003e26:	d02a      	beq.n	8003e7e <_vfiprintf_r+0x10e>
 8003e28:	46a8      	mov	r8, r5
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	250a      	movs	r5, #10
 8003e2e:	9a07      	ldr	r2, [sp, #28]
 8003e30:	4641      	mov	r1, r8
 8003e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e36:	3b30      	subs	r3, #48	; 0x30
 8003e38:	2b09      	cmp	r3, #9
 8003e3a:	d969      	bls.n	8003f10 <_vfiprintf_r+0x1a0>
 8003e3c:	b360      	cbz	r0, 8003e98 <_vfiprintf_r+0x128>
 8003e3e:	e024      	b.n	8003e8a <_vfiprintf_r+0x11a>
 8003e40:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <_vfiprintf_r+0x214>)
 8003e42:	429c      	cmp	r4, r3
 8003e44:	d101      	bne.n	8003e4a <_vfiprintf_r+0xda>
 8003e46:	68b4      	ldr	r4, [r6, #8]
 8003e48:	e7a2      	b.n	8003d90 <_vfiprintf_r+0x20>
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <_vfiprintf_r+0x218>)
 8003e4c:	429c      	cmp	r4, r3
 8003e4e:	bf08      	it	eq
 8003e50:	68f4      	ldreq	r4, [r6, #12]
 8003e52:	e79d      	b.n	8003d90 <_vfiprintf_r+0x20>
 8003e54:	4621      	mov	r1, r4
 8003e56:	4630      	mov	r0, r6
 8003e58:	f7ff fc70 	bl	800373c <__swsetup_r>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d09d      	beq.n	8003d9c <_vfiprintf_r+0x2c>
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	b01d      	add	sp, #116	; 0x74
 8003e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6a:	46a8      	mov	r8, r5
 8003e6c:	e7a2      	b.n	8003db4 <_vfiprintf_r+0x44>
 8003e6e:	4a44      	ldr	r2, [pc, #272]	; (8003f80 <_vfiprintf_r+0x210>)
 8003e70:	4645      	mov	r5, r8
 8003e72:	1a80      	subs	r0, r0, r2
 8003e74:	fa0b f000 	lsl.w	r0, fp, r0
 8003e78:	4318      	orrs	r0, r3
 8003e7a:	9004      	str	r0, [sp, #16]
 8003e7c:	e7be      	b.n	8003dfc <_vfiprintf_r+0x8c>
 8003e7e:	9a03      	ldr	r2, [sp, #12]
 8003e80:	1d11      	adds	r1, r2, #4
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	9103      	str	r1, [sp, #12]
 8003e86:	2a00      	cmp	r2, #0
 8003e88:	db01      	blt.n	8003e8e <_vfiprintf_r+0x11e>
 8003e8a:	9207      	str	r2, [sp, #28]
 8003e8c:	e004      	b.n	8003e98 <_vfiprintf_r+0x128>
 8003e8e:	4252      	negs	r2, r2
 8003e90:	f043 0302 	orr.w	r3, r3, #2
 8003e94:	9207      	str	r2, [sp, #28]
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	f898 3000 	ldrb.w	r3, [r8]
 8003e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e9e:	d10e      	bne.n	8003ebe <_vfiprintf_r+0x14e>
 8003ea0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea6:	d138      	bne.n	8003f1a <_vfiprintf_r+0x1aa>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	f108 0802 	add.w	r8, r8, #2
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	9203      	str	r2, [sp, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bfb8      	it	lt
 8003eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ebc:	9305      	str	r3, [sp, #20]
 8003ebe:	4d33      	ldr	r5, [pc, #204]	; (8003f8c <_vfiprintf_r+0x21c>)
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f898 1000 	ldrb.w	r1, [r8]
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fa9a 	bl	8004400 <memchr>
 8003ecc:	b140      	cbz	r0, 8003ee0 <_vfiprintf_r+0x170>
 8003ece:	2340      	movs	r3, #64	; 0x40
 8003ed0:	1b40      	subs	r0, r0, r5
 8003ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ed6:	9b04      	ldr	r3, [sp, #16]
 8003ed8:	f108 0801 	add.w	r8, r8, #1
 8003edc:	4303      	orrs	r3, r0
 8003ede:	9304      	str	r3, [sp, #16]
 8003ee0:	f898 1000 	ldrb.w	r1, [r8]
 8003ee4:	2206      	movs	r2, #6
 8003ee6:	482a      	ldr	r0, [pc, #168]	; (8003f90 <_vfiprintf_r+0x220>)
 8003ee8:	f108 0701 	add.w	r7, r8, #1
 8003eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ef0:	f000 fa86 	bl	8004400 <memchr>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d037      	beq.n	8003f68 <_vfiprintf_r+0x1f8>
 8003ef8:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <_vfiprintf_r+0x224>)
 8003efa:	bb1b      	cbnz	r3, 8003f44 <_vfiprintf_r+0x1d4>
 8003efc:	9b03      	ldr	r3, [sp, #12]
 8003efe:	3307      	adds	r3, #7
 8003f00:	f023 0307 	bic.w	r3, r3, #7
 8003f04:	3308      	adds	r3, #8
 8003f06:	9303      	str	r3, [sp, #12]
 8003f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0a:	444b      	add	r3, r9
 8003f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0e:	e750      	b.n	8003db2 <_vfiprintf_r+0x42>
 8003f10:	fb05 3202 	mla	r2, r5, r2, r3
 8003f14:	2001      	movs	r0, #1
 8003f16:	4688      	mov	r8, r1
 8003f18:	e78a      	b.n	8003e30 <_vfiprintf_r+0xc0>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	250a      	movs	r5, #10
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f108 0801 	add.w	r8, r8, #1
 8003f24:	9305      	str	r3, [sp, #20]
 8003f26:	4640      	mov	r0, r8
 8003f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f2c:	3a30      	subs	r2, #48	; 0x30
 8003f2e:	2a09      	cmp	r2, #9
 8003f30:	d903      	bls.n	8003f3a <_vfiprintf_r+0x1ca>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0c3      	beq.n	8003ebe <_vfiprintf_r+0x14e>
 8003f36:	9105      	str	r1, [sp, #20]
 8003f38:	e7c1      	b.n	8003ebe <_vfiprintf_r+0x14e>
 8003f3a:	fb05 2101 	mla	r1, r5, r1, r2
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4680      	mov	r8, r0
 8003f42:	e7f0      	b.n	8003f26 <_vfiprintf_r+0x1b6>
 8003f44:	ab03      	add	r3, sp, #12
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4622      	mov	r2, r4
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <_vfiprintf_r+0x228>)
 8003f4c:	a904      	add	r1, sp, #16
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f3af 8000 	nop.w
 8003f54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f58:	4681      	mov	r9, r0
 8003f5a:	d1d5      	bne.n	8003f08 <_vfiprintf_r+0x198>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	065b      	lsls	r3, r3, #25
 8003f60:	f53f af7e 	bmi.w	8003e60 <_vfiprintf_r+0xf0>
 8003f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f66:	e77d      	b.n	8003e64 <_vfiprintf_r+0xf4>
 8003f68:	ab03      	add	r3, sp, #12
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4622      	mov	r2, r4
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <_vfiprintf_r+0x228>)
 8003f70:	a904      	add	r1, sp, #16
 8003f72:	4630      	mov	r0, r6
 8003f74:	f000 f888 	bl	8004088 <_printf_i>
 8003f78:	e7ec      	b.n	8003f54 <_vfiprintf_r+0x1e4>
 8003f7a:	bf00      	nop
 8003f7c:	080044f4 	.word	0x080044f4
 8003f80:	08004534 	.word	0x08004534
 8003f84:	08004514 	.word	0x08004514
 8003f88:	080044d4 	.word	0x080044d4
 8003f8c:	0800453a 	.word	0x0800453a
 8003f90:	0800453e 	.word	0x0800453e
 8003f94:	00000000 	.word	0x00000000
 8003f98:	08003d4b 	.word	0x08003d4b

08003f9c <_printf_common>:
 8003f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa0:	4691      	mov	r9, r2
 8003fa2:	461f      	mov	r7, r3
 8003fa4:	688a      	ldr	r2, [r1, #8]
 8003fa6:	690b      	ldr	r3, [r1, #16]
 8003fa8:	4606      	mov	r6, r0
 8003faa:	4293      	cmp	r3, r2
 8003fac:	bfb8      	it	lt
 8003fae:	4613      	movlt	r3, r2
 8003fb0:	f8c9 3000 	str.w	r3, [r9]
 8003fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fb8:	460c      	mov	r4, r1
 8003fba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fbe:	b112      	cbz	r2, 8003fc6 <_printf_common+0x2a>
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	f8c9 3000 	str.w	r3, [r9]
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	0699      	lsls	r1, r3, #26
 8003fca:	bf42      	ittt	mi
 8003fcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003fd0:	3302      	addmi	r3, #2
 8003fd2:	f8c9 3000 	strmi.w	r3, [r9]
 8003fd6:	6825      	ldr	r5, [r4, #0]
 8003fd8:	f015 0506 	ands.w	r5, r5, #6
 8003fdc:	d107      	bne.n	8003fee <_printf_common+0x52>
 8003fde:	f104 0a19 	add.w	sl, r4, #25
 8003fe2:	68e3      	ldr	r3, [r4, #12]
 8003fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	42ab      	cmp	r3, r5
 8003fec:	dc29      	bgt.n	8004042 <_printf_common+0xa6>
 8003fee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ff2:	6822      	ldr	r2, [r4, #0]
 8003ff4:	3300      	adds	r3, #0
 8003ff6:	bf18      	it	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	0692      	lsls	r2, r2, #26
 8003ffc:	d42e      	bmi.n	800405c <_printf_common+0xc0>
 8003ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004002:	4639      	mov	r1, r7
 8004004:	4630      	mov	r0, r6
 8004006:	47c0      	blx	r8
 8004008:	3001      	adds	r0, #1
 800400a:	d021      	beq.n	8004050 <_printf_common+0xb4>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	68e5      	ldr	r5, [r4, #12]
 8004010:	f003 0306 	and.w	r3, r3, #6
 8004014:	2b04      	cmp	r3, #4
 8004016:	bf18      	it	ne
 8004018:	2500      	movne	r5, #0
 800401a:	f8d9 2000 	ldr.w	r2, [r9]
 800401e:	f04f 0900 	mov.w	r9, #0
 8004022:	bf08      	it	eq
 8004024:	1aad      	subeq	r5, r5, r2
 8004026:	68a3      	ldr	r3, [r4, #8]
 8004028:	6922      	ldr	r2, [r4, #16]
 800402a:	bf08      	it	eq
 800402c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004030:	4293      	cmp	r3, r2
 8004032:	bfc4      	itt	gt
 8004034:	1a9b      	subgt	r3, r3, r2
 8004036:	18ed      	addgt	r5, r5, r3
 8004038:	341a      	adds	r4, #26
 800403a:	454d      	cmp	r5, r9
 800403c:	d11a      	bne.n	8004074 <_printf_common+0xd8>
 800403e:	2000      	movs	r0, #0
 8004040:	e008      	b.n	8004054 <_printf_common+0xb8>
 8004042:	2301      	movs	r3, #1
 8004044:	4652      	mov	r2, sl
 8004046:	4639      	mov	r1, r7
 8004048:	4630      	mov	r0, r6
 800404a:	47c0      	blx	r8
 800404c:	3001      	adds	r0, #1
 800404e:	d103      	bne.n	8004058 <_printf_common+0xbc>
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004058:	3501      	adds	r5, #1
 800405a:	e7c2      	b.n	8003fe2 <_printf_common+0x46>
 800405c:	2030      	movs	r0, #48	; 0x30
 800405e:	18e1      	adds	r1, r4, r3
 8004060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800406a:	4422      	add	r2, r4
 800406c:	3302      	adds	r3, #2
 800406e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004072:	e7c4      	b.n	8003ffe <_printf_common+0x62>
 8004074:	2301      	movs	r3, #1
 8004076:	4622      	mov	r2, r4
 8004078:	4639      	mov	r1, r7
 800407a:	4630      	mov	r0, r6
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d0e6      	beq.n	8004050 <_printf_common+0xb4>
 8004082:	f109 0901 	add.w	r9, r9, #1
 8004086:	e7d8      	b.n	800403a <_printf_common+0x9e>

08004088 <_printf_i>:
 8004088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800408c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004090:	460c      	mov	r4, r1
 8004092:	7e09      	ldrb	r1, [r1, #24]
 8004094:	b085      	sub	sp, #20
 8004096:	296e      	cmp	r1, #110	; 0x6e
 8004098:	4617      	mov	r7, r2
 800409a:	4606      	mov	r6, r0
 800409c:	4698      	mov	r8, r3
 800409e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040a0:	f000 80b3 	beq.w	800420a <_printf_i+0x182>
 80040a4:	d822      	bhi.n	80040ec <_printf_i+0x64>
 80040a6:	2963      	cmp	r1, #99	; 0x63
 80040a8:	d036      	beq.n	8004118 <_printf_i+0x90>
 80040aa:	d80a      	bhi.n	80040c2 <_printf_i+0x3a>
 80040ac:	2900      	cmp	r1, #0
 80040ae:	f000 80b9 	beq.w	8004224 <_printf_i+0x19c>
 80040b2:	2958      	cmp	r1, #88	; 0x58
 80040b4:	f000 8083 	beq.w	80041be <_printf_i+0x136>
 80040b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80040c0:	e032      	b.n	8004128 <_printf_i+0xa0>
 80040c2:	2964      	cmp	r1, #100	; 0x64
 80040c4:	d001      	beq.n	80040ca <_printf_i+0x42>
 80040c6:	2969      	cmp	r1, #105	; 0x69
 80040c8:	d1f6      	bne.n	80040b8 <_printf_i+0x30>
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	0605      	lsls	r5, r0, #24
 80040d0:	f103 0104 	add.w	r1, r3, #4
 80040d4:	d52a      	bpl.n	800412c <_printf_i+0xa4>
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6011      	str	r1, [r2, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	da03      	bge.n	80040e6 <_printf_i+0x5e>
 80040de:	222d      	movs	r2, #45	; 0x2d
 80040e0:	425b      	negs	r3, r3
 80040e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80040e6:	486f      	ldr	r0, [pc, #444]	; (80042a4 <_printf_i+0x21c>)
 80040e8:	220a      	movs	r2, #10
 80040ea:	e039      	b.n	8004160 <_printf_i+0xd8>
 80040ec:	2973      	cmp	r1, #115	; 0x73
 80040ee:	f000 809d 	beq.w	800422c <_printf_i+0x1a4>
 80040f2:	d808      	bhi.n	8004106 <_printf_i+0x7e>
 80040f4:	296f      	cmp	r1, #111	; 0x6f
 80040f6:	d020      	beq.n	800413a <_printf_i+0xb2>
 80040f8:	2970      	cmp	r1, #112	; 0x70
 80040fa:	d1dd      	bne.n	80040b8 <_printf_i+0x30>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f043 0320 	orr.w	r3, r3, #32
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	e003      	b.n	800410e <_printf_i+0x86>
 8004106:	2975      	cmp	r1, #117	; 0x75
 8004108:	d017      	beq.n	800413a <_printf_i+0xb2>
 800410a:	2978      	cmp	r1, #120	; 0x78
 800410c:	d1d4      	bne.n	80040b8 <_printf_i+0x30>
 800410e:	2378      	movs	r3, #120	; 0x78
 8004110:	4865      	ldr	r0, [pc, #404]	; (80042a8 <_printf_i+0x220>)
 8004112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004116:	e055      	b.n	80041c4 <_printf_i+0x13c>
 8004118:	6813      	ldr	r3, [r2, #0]
 800411a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800411e:	1d19      	adds	r1, r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6011      	str	r1, [r2, #0]
 8004124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004128:	2301      	movs	r3, #1
 800412a:	e08c      	b.n	8004246 <_printf_i+0x1be>
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004132:	6011      	str	r1, [r2, #0]
 8004134:	bf18      	it	ne
 8004136:	b21b      	sxthne	r3, r3
 8004138:	e7cf      	b.n	80040da <_printf_i+0x52>
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	6825      	ldr	r5, [r4, #0]
 800413e:	1d18      	adds	r0, r3, #4
 8004140:	6010      	str	r0, [r2, #0]
 8004142:	0628      	lsls	r0, r5, #24
 8004144:	d501      	bpl.n	800414a <_printf_i+0xc2>
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	e002      	b.n	8004150 <_printf_i+0xc8>
 800414a:	0668      	lsls	r0, r5, #25
 800414c:	d5fb      	bpl.n	8004146 <_printf_i+0xbe>
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	296f      	cmp	r1, #111	; 0x6f
 8004152:	bf14      	ite	ne
 8004154:	220a      	movne	r2, #10
 8004156:	2208      	moveq	r2, #8
 8004158:	4852      	ldr	r0, [pc, #328]	; (80042a4 <_printf_i+0x21c>)
 800415a:	2100      	movs	r1, #0
 800415c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004160:	6865      	ldr	r5, [r4, #4]
 8004162:	2d00      	cmp	r5, #0
 8004164:	60a5      	str	r5, [r4, #8]
 8004166:	f2c0 8095 	blt.w	8004294 <_printf_i+0x20c>
 800416a:	6821      	ldr	r1, [r4, #0]
 800416c:	f021 0104 	bic.w	r1, r1, #4
 8004170:	6021      	str	r1, [r4, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d13d      	bne.n	80041f2 <_printf_i+0x16a>
 8004176:	2d00      	cmp	r5, #0
 8004178:	f040 808e 	bne.w	8004298 <_printf_i+0x210>
 800417c:	4665      	mov	r5, ip
 800417e:	2a08      	cmp	r2, #8
 8004180:	d10b      	bne.n	800419a <_printf_i+0x112>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	07db      	lsls	r3, r3, #31
 8004186:	d508      	bpl.n	800419a <_printf_i+0x112>
 8004188:	6923      	ldr	r3, [r4, #16]
 800418a:	6862      	ldr	r2, [r4, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	bfde      	ittt	le
 8004190:	2330      	movle	r3, #48	; 0x30
 8004192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800419a:	ebac 0305 	sub.w	r3, ip, r5
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	f8cd 8000 	str.w	r8, [sp]
 80041a4:	463b      	mov	r3, r7
 80041a6:	aa03      	add	r2, sp, #12
 80041a8:	4621      	mov	r1, r4
 80041aa:	4630      	mov	r0, r6
 80041ac:	f7ff fef6 	bl	8003f9c <_printf_common>
 80041b0:	3001      	adds	r0, #1
 80041b2:	d14d      	bne.n	8004250 <_printf_i+0x1c8>
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	b005      	add	sp, #20
 80041ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041be:	4839      	ldr	r0, [pc, #228]	; (80042a4 <_printf_i+0x21c>)
 80041c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80041c4:	6813      	ldr	r3, [r2, #0]
 80041c6:	6821      	ldr	r1, [r4, #0]
 80041c8:	1d1d      	adds	r5, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6015      	str	r5, [r2, #0]
 80041ce:	060a      	lsls	r2, r1, #24
 80041d0:	d50b      	bpl.n	80041ea <_printf_i+0x162>
 80041d2:	07ca      	lsls	r2, r1, #31
 80041d4:	bf44      	itt	mi
 80041d6:	f041 0120 	orrmi.w	r1, r1, #32
 80041da:	6021      	strmi	r1, [r4, #0]
 80041dc:	b91b      	cbnz	r3, 80041e6 <_printf_i+0x15e>
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	f022 0220 	bic.w	r2, r2, #32
 80041e4:	6022      	str	r2, [r4, #0]
 80041e6:	2210      	movs	r2, #16
 80041e8:	e7b7      	b.n	800415a <_printf_i+0xd2>
 80041ea:	064d      	lsls	r5, r1, #25
 80041ec:	bf48      	it	mi
 80041ee:	b29b      	uxthmi	r3, r3
 80041f0:	e7ef      	b.n	80041d2 <_printf_i+0x14a>
 80041f2:	4665      	mov	r5, ip
 80041f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80041f8:	fb02 3311 	mls	r3, r2, r1, r3
 80041fc:	5cc3      	ldrb	r3, [r0, r3]
 80041fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004202:	460b      	mov	r3, r1
 8004204:	2900      	cmp	r1, #0
 8004206:	d1f5      	bne.n	80041f4 <_printf_i+0x16c>
 8004208:	e7b9      	b.n	800417e <_printf_i+0xf6>
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	6825      	ldr	r5, [r4, #0]
 800420e:	1d18      	adds	r0, r3, #4
 8004210:	6961      	ldr	r1, [r4, #20]
 8004212:	6010      	str	r0, [r2, #0]
 8004214:	0628      	lsls	r0, r5, #24
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	d501      	bpl.n	800421e <_printf_i+0x196>
 800421a:	6019      	str	r1, [r3, #0]
 800421c:	e002      	b.n	8004224 <_printf_i+0x19c>
 800421e:	066a      	lsls	r2, r5, #25
 8004220:	d5fb      	bpl.n	800421a <_printf_i+0x192>
 8004222:	8019      	strh	r1, [r3, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	4665      	mov	r5, ip
 8004228:	6123      	str	r3, [r4, #16]
 800422a:	e7b9      	b.n	80041a0 <_printf_i+0x118>
 800422c:	6813      	ldr	r3, [r2, #0]
 800422e:	1d19      	adds	r1, r3, #4
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	681d      	ldr	r5, [r3, #0]
 8004234:	6862      	ldr	r2, [r4, #4]
 8004236:	2100      	movs	r1, #0
 8004238:	4628      	mov	r0, r5
 800423a:	f000 f8e1 	bl	8004400 <memchr>
 800423e:	b108      	cbz	r0, 8004244 <_printf_i+0x1bc>
 8004240:	1b40      	subs	r0, r0, r5
 8004242:	6060      	str	r0, [r4, #4]
 8004244:	6863      	ldr	r3, [r4, #4]
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	2300      	movs	r3, #0
 800424a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800424e:	e7a7      	b.n	80041a0 <_printf_i+0x118>
 8004250:	6923      	ldr	r3, [r4, #16]
 8004252:	462a      	mov	r2, r5
 8004254:	4639      	mov	r1, r7
 8004256:	4630      	mov	r0, r6
 8004258:	47c0      	blx	r8
 800425a:	3001      	adds	r0, #1
 800425c:	d0aa      	beq.n	80041b4 <_printf_i+0x12c>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	079b      	lsls	r3, r3, #30
 8004262:	d413      	bmi.n	800428c <_printf_i+0x204>
 8004264:	68e0      	ldr	r0, [r4, #12]
 8004266:	9b03      	ldr	r3, [sp, #12]
 8004268:	4298      	cmp	r0, r3
 800426a:	bfb8      	it	lt
 800426c:	4618      	movlt	r0, r3
 800426e:	e7a3      	b.n	80041b8 <_printf_i+0x130>
 8004270:	2301      	movs	r3, #1
 8004272:	464a      	mov	r2, r9
 8004274:	4639      	mov	r1, r7
 8004276:	4630      	mov	r0, r6
 8004278:	47c0      	blx	r8
 800427a:	3001      	adds	r0, #1
 800427c:	d09a      	beq.n	80041b4 <_printf_i+0x12c>
 800427e:	3501      	adds	r5, #1
 8004280:	68e3      	ldr	r3, [r4, #12]
 8004282:	9a03      	ldr	r2, [sp, #12]
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	42ab      	cmp	r3, r5
 8004288:	dcf2      	bgt.n	8004270 <_printf_i+0x1e8>
 800428a:	e7eb      	b.n	8004264 <_printf_i+0x1dc>
 800428c:	2500      	movs	r5, #0
 800428e:	f104 0919 	add.w	r9, r4, #25
 8004292:	e7f5      	b.n	8004280 <_printf_i+0x1f8>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ac      	bne.n	80041f2 <_printf_i+0x16a>
 8004298:	7803      	ldrb	r3, [r0, #0]
 800429a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800429e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042a2:	e76c      	b.n	800417e <_printf_i+0xf6>
 80042a4:	08004545 	.word	0x08004545
 80042a8:	08004556 	.word	0x08004556

080042ac <_sbrk_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	2300      	movs	r3, #0
 80042b0:	4c05      	ldr	r4, [pc, #20]	; (80042c8 <_sbrk_r+0x1c>)
 80042b2:	4605      	mov	r5, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	f7fc fa3a 	bl	8000730 <_sbrk>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_sbrk_r+0x1a>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_sbrk_r+0x1a>
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000108 	.word	0x20000108

080042cc <__sread>:
 80042cc:	b510      	push	{r4, lr}
 80042ce:	460c      	mov	r4, r1
 80042d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d4:	f000 f8a4 	bl	8004420 <_read_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	bfab      	itete	ge
 80042dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042de:	89a3      	ldrhlt	r3, [r4, #12]
 80042e0:	181b      	addge	r3, r3, r0
 80042e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042e6:	bfac      	ite	ge
 80042e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ea:	81a3      	strhlt	r3, [r4, #12]
 80042ec:	bd10      	pop	{r4, pc}

080042ee <__swrite>:
 80042ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f2:	461f      	mov	r7, r3
 80042f4:	898b      	ldrh	r3, [r1, #12]
 80042f6:	4605      	mov	r5, r0
 80042f8:	05db      	lsls	r3, r3, #23
 80042fa:	460c      	mov	r4, r1
 80042fc:	4616      	mov	r6, r2
 80042fe:	d505      	bpl.n	800430c <__swrite+0x1e>
 8004300:	2302      	movs	r3, #2
 8004302:	2200      	movs	r2, #0
 8004304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004308:	f000 f868 	bl	80043dc <_lseek_r>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	4632      	mov	r2, r6
 8004310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004314:	81a3      	strh	r3, [r4, #12]
 8004316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800431a:	463b      	mov	r3, r7
 800431c:	4628      	mov	r0, r5
 800431e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004322:	f000 b817 	b.w	8004354 <_write_r>

08004326 <__sseek>:
 8004326:	b510      	push	{r4, lr}
 8004328:	460c      	mov	r4, r1
 800432a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800432e:	f000 f855 	bl	80043dc <_lseek_r>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	bf15      	itete	ne
 8004338:	6560      	strne	r0, [r4, #84]	; 0x54
 800433a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800433e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004342:	81a3      	strheq	r3, [r4, #12]
 8004344:	bf18      	it	ne
 8004346:	81a3      	strhne	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__sclose>:
 800434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434e:	f000 b813 	b.w	8004378 <_close_r>
	...

08004354 <_write_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4605      	mov	r5, r0
 8004358:	4608      	mov	r0, r1
 800435a:	4611      	mov	r1, r2
 800435c:	2200      	movs	r2, #0
 800435e:	4c05      	ldr	r4, [pc, #20]	; (8004374 <_write_r+0x20>)
 8004360:	6022      	str	r2, [r4, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	f7fb ff18 	bl	8000198 <_write>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_write_r+0x1e>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	b103      	cbz	r3, 8004372 <_write_r+0x1e>
 8004370:	602b      	str	r3, [r5, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	20000108 	.word	0x20000108

08004378 <_close_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	2300      	movs	r3, #0
 800437c:	4c05      	ldr	r4, [pc, #20]	; (8004394 <_close_r+0x1c>)
 800437e:	4605      	mov	r5, r0
 8004380:	4608      	mov	r0, r1
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	f7fc f9a3 	bl	80006ce <_close>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_close_r+0x1a>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	b103      	cbz	r3, 8004392 <_close_r+0x1a>
 8004390:	602b      	str	r3, [r5, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	20000108 	.word	0x20000108

08004398 <_fstat_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	2300      	movs	r3, #0
 800439c:	4c06      	ldr	r4, [pc, #24]	; (80043b8 <_fstat_r+0x20>)
 800439e:	4605      	mov	r5, r0
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	f7fc f99d 	bl	80006e4 <_fstat>
 80043aa:	1c43      	adds	r3, r0, #1
 80043ac:	d102      	bne.n	80043b4 <_fstat_r+0x1c>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	b103      	cbz	r3, 80043b4 <_fstat_r+0x1c>
 80043b2:	602b      	str	r3, [r5, #0]
 80043b4:	bd38      	pop	{r3, r4, r5, pc}
 80043b6:	bf00      	nop
 80043b8:	20000108 	.word	0x20000108

080043bc <_isatty_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	2300      	movs	r3, #0
 80043c0:	4c05      	ldr	r4, [pc, #20]	; (80043d8 <_isatty_r+0x1c>)
 80043c2:	4605      	mov	r5, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	f7fc f99b 	bl	8000702 <_isatty>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_isatty_r+0x1a>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_isatty_r+0x1a>
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000108 	.word	0x20000108

080043dc <_lseek_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4605      	mov	r5, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	2200      	movs	r2, #0
 80043e6:	4c05      	ldr	r4, [pc, #20]	; (80043fc <_lseek_r+0x20>)
 80043e8:	6022      	str	r2, [r4, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f7fc f993 	bl	8000716 <_lseek>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_lseek_r+0x1e>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_lseek_r+0x1e>
 80043f8:	602b      	str	r3, [r5, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000108 	.word	0x20000108

08004400 <memchr>:
 8004400:	b510      	push	{r4, lr}
 8004402:	b2c9      	uxtb	r1, r1
 8004404:	4402      	add	r2, r0
 8004406:	4290      	cmp	r0, r2
 8004408:	4603      	mov	r3, r0
 800440a:	d101      	bne.n	8004410 <memchr+0x10>
 800440c:	2300      	movs	r3, #0
 800440e:	e003      	b.n	8004418 <memchr+0x18>
 8004410:	781c      	ldrb	r4, [r3, #0]
 8004412:	3001      	adds	r0, #1
 8004414:	428c      	cmp	r4, r1
 8004416:	d1f6      	bne.n	8004406 <memchr+0x6>
 8004418:	4618      	mov	r0, r3
 800441a:	bd10      	pop	{r4, pc}

0800441c <__malloc_lock>:
 800441c:	4770      	bx	lr

0800441e <__malloc_unlock>:
 800441e:	4770      	bx	lr

08004420 <_read_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4605      	mov	r5, r0
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	2200      	movs	r2, #0
 800442a:	4c05      	ldr	r4, [pc, #20]	; (8004440 <_read_r+0x20>)
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	f7fc f930 	bl	8000694 <_read>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d102      	bne.n	800443e <_read_r+0x1e>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	b103      	cbz	r3, 800443e <_read_r+0x1e>
 800443c:	602b      	str	r3, [r5, #0]
 800443e:	bd38      	pop	{r3, r4, r5, pc}
 8004440:	20000108 	.word	0x20000108

08004444 <_init>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	bf00      	nop
 8004448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444a:	bc08      	pop	{r3}
 800444c:	469e      	mov	lr, r3
 800444e:	4770      	bx	lr

08004450 <_fini>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	bf00      	nop
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr
