
Practic_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e20  08002e20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e20  08002e20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e20  08002e20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e20  08002e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002e34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002e34  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e99  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001600  00000000  00000000  00026ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  000284d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  00028b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016c34  00000000  00000000  00029228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062f9  00000000  00000000  0003fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000817ef  00000000  00000000  00046155  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b44  00000000  00000000  000c79c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002de4 	.word	0x08002de4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002de4 	.word	0x08002de4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000744:	f001 f854 	bl	80017f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000748:	f000 f860 	bl	800080c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800074c:	f000 f8da 	bl	8000904 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000750:	f000 f8a2 	bl	8000898 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f001 f8ad 	bl	80018b4 <HAL_Delay>
	max7219_Init();
 800075a:	f000 f977 	bl	8000a4c <max7219_Init>
	flag = 0;
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <main+0xb4>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	counter = 0;
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <main+0xb8>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
	A = -25.999f;
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <main+0xbc>)
 800076c:	4a24      	ldr	r2, [pc, #144]	; (8000800 <main+0xc0>)
 800076e:	601a      	str	r2, [r3, #0]
		/*Привет! Вот небольшой пример применения моей библиотеки.  */
		/*Каждые 2 секунды flag меняется с true на false.           */
		/*В зависимости от флага выбирается и переменная, изменяется*/
		/*и выводится на дисплей.                                   */

		if (HAL_GetTick() - T >= 2000) {
 8000770:	f001 f896 	bl	80018a0 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <main+0xc4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000780:	d3f6      	bcc.n	8000770 <main+0x30>
			T = HAL_GetTick();
 8000782:	f001 f88d 	bl	80018a0 <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <main+0xc4>)
 800078a:	601a      	str	r2, [r3, #0]
			flag = !flag;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <main+0xb4>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f083 0301 	eor.w	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <main+0xb4>)
 80007a8:	701a      	strb	r2, [r3, #0]
			if (flag) {
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <main+0xb4>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00f      	beq.n	80007d2 <main+0x92>
				counter++;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <main+0xb8>)
 80007b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	3301      	adds	r3, #1
 80007bc:	b29b      	uxth	r3, r3
 80007be:	b21a      	sxth	r2, r3
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <main+0xb8>)
 80007c2:	801a      	strh	r2, [r3, #0]
				max7219_Send_int32_t(counter);
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <main+0xb8>)
 80007c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fa60 	bl	8000c90 <max7219_Send_int32_t>
 80007d0:	e7ce      	b.n	8000770 <main+0x30>
			} else {
				A = A + 1.001f;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <main+0xbc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	490c      	ldr	r1, [pc, #48]	; (8000808 <main+0xc8>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fcbd 	bl	8000158 <__addsf3>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <main+0xbc>)
 80007e4:	601a      	str	r2, [r3, #0]
				max7219_Send_float(A);
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <main+0xbc>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fca6 	bl	800113c <max7219_Send_float>
		if (HAL_GetTick() - T >= 2000) {
 80007f0:	e7be      	b.n	8000770 <main+0x30>
 80007f2:	bf00      	nop
 80007f4:	20000034 	.word	0x20000034
 80007f8:	2000003c 	.word	0x2000003c
 80007fc:	20000030 	.word	0x20000030
 8000800:	c1cffdf4 	.word	0xc1cffdf4
 8000804:	20000038 	.word	0x20000038
 8000808:	3f8020c5 	.word	0x3f8020c5

0800080c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b090      	sub	sp, #64	; 0x40
 8000810:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	2228      	movs	r2, #40	; 0x28
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fada 	bl	8002dd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000836:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800084a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fb45 	bl	8001ee4 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x58>
		Error_Handler();
 8000860:	f000 f89a 	bl	8000998 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2302      	movs	r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2102      	movs	r1, #2
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fdb0 	bl	80023e4 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x82>
		Error_Handler();
 800088a:	f000 f885 	bl	8000998 <Error_Handler>
	}
}
 800088e:	bf00      	nop
 8000890:	3740      	adds	r7, #64	; 0x40
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_SPI1_Init+0x64>)
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <MX_SPI1_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_SPI1_Init+0x64>)
 80008a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI1_Init+0x64>)
 80008c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI1_Init+0x64>)
 80008cc:	2210      	movs	r2, #16
 80008ce:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_SPI1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI1_Init+0x64>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_SPI1_Init+0x64>)
 80008ea:	f001 fee5 	bl	80026b8 <HAL_SPI_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80008f4:	f000 f850 	bl	8000998 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000040 	.word	0x20000040
 8000900:	40013000 	.word	0x40013000

08000904 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_GPIO_Init+0x8c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <MX_GPIO_Init+0x8c>)
 800091e:	f043 0320 	orr.w	r3, r3, #32
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_GPIO_Init+0x8c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_GPIO_Init+0x8c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a16      	ldr	r2, [pc, #88]	; (8000990 <MX_GPIO_Init+0x8c>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_GPIO_Init+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_GPIO_Init+0x8c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a10      	ldr	r2, [pc, #64]	; (8000990 <MX_GPIO_Init+0x8c>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_GPIO_Init+0x8c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2102      	movs	r1, #2
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <MX_GPIO_Init+0x90>)
 8000966:	f001 faa5 	bl	8001eb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_Pin */
	GPIO_InitStruct.Pin = CS_Pin;
 800096a:	2302      	movs	r3, #2
 800096c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0x90>)
 8000982:	f001 f93d 	bl	8001c00 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <max7219_Transmit>:
/*----------Общение с max7219 по spi-----------------*/
///Общение с max7219 по spi(выбор регистра и отправка данных).
///(См. Datasheet MAX7219/MAX7221. Cтр.7, табл. 2).
/// \param adress - адрес регистра, в который производится отправка данных;
/// \param data - данные.
void max7219_Transmit(uint8_t adress, uint8_t data) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[1] = { 0 };
 80009b4:	2300      	movs	r3, #0
 80009b6:	733b      	strb	r3, [r7, #12]
	cs_set();
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <max7219_Transmit+0x4c>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	615a      	str	r2, [r3, #20]
	tx_buffer[0] = adress;
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2201      	movs	r2, #1
 80009c8:	4619      	mov	r1, r3
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <max7219_Transmit+0x50>)
 80009cc:	f001 fef8 	bl	80027c0 <HAL_SPI_Transmit_IT>
	tx_buffer[0] = data;
 80009d0:	79bb      	ldrb	r3, [r7, #6]
 80009d2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2201      	movs	r2, #1
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <max7219_Transmit+0x50>)
 80009de:	f001 feef 	bl	80027c0 <HAL_SPI_Transmit_IT>
	cs_reset();
 80009e2:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <max7219_Transmit+0x4c>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	611a      	str	r2, [r3, #16]
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40010800 	.word	0x40010800
 80009f4:	20000040 	.word	0x20000040

080009f8 <max7219_Shutdown>:
/*----------Общение с max7219 по spi-----------------*/

/*--------------------Режим сна----------------------*/
///Режим сна.(См. Datasheet MAX7219/MAX7221. Стр.7, табл. 3).
/// \param data - данные. 0 - Режим сна. 1 - Нормальный режим.
void max7219_Shutdown(bool data){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0C, data);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4619      	mov	r1, r3
 8000a06:	200c      	movs	r0, #12
 8000a08:	f7ff ffcc 	bl	80009a4 <max7219_Transmit>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <max7219_Display_Test>:
/*--------------------Режим сна----------------------*/

/*-------------------Тест дисплея--------------------*/
///Тест дисплея.(См. Datasheet MAX7219/MAX7221. Стр.10, табл. 10).
/// \param data - данные. 0 - Нормальный режим. 1 - Тест дисплея.
void max7219_Display_Test(bool data){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0F, data);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4619      	mov	r1, r3
 8000a22:	200f      	movs	r0, #15
 8000a24:	f7ff ffbe 	bl	80009a4 <max7219_Transmit>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <max7219_Intensity>:


/*-----------------Яркость дисплея-------------------*/
///Яркость дисплея.(См. Datasheet MAX7219/MAX7221. Стр.9, табл. 7).
/// \param data - данные. Значения от 0x00 до 0x0F.
void max7219_Intensity(uint8_t data){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
max7219_Transmit(0x0A, data);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f7ff ffb0 	bl	80009a4 <max7219_Transmit>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <max7219_Init>:
/*-----------------Яркость дисплея-------------------*/

/*--------------Инициализация дисплея----------------*/
///Инициализация дисплея.
void max7219_Init(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	max7219_Transmit(0x09, 0x00); //Работа без режима декодирование
 8000a50:	2100      	movs	r1, #0
 8000a52:	2009      	movs	r0, #9
 8000a54:	f7ff ffa6 	bl	80009a4 <max7219_Transmit>
	max7219_Transmit(0x0B, 0x07); //Количество используемых разрядов
 8000a58:	2107      	movs	r1, #7
 8000a5a:	200b      	movs	r0, #11
 8000a5c:	f7ff ffa2 	bl	80009a4 <max7219_Transmit>
	max7219_Intensity(0x0F); //Интенсивность свечения на максимум
 8000a60:	200f      	movs	r0, #15
 8000a62:	f7ff ffe5 	bl	8000a30 <max7219_Intensity>
	max7219_Shutdown(1); //Вывести дисплей из сна в нормальный режим работы
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff ffc6 	bl	80009f8 <max7219_Shutdown>
	max7219_Display_Test(1); //Проверка дисплея
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ffd1 	bl	8000a14 <max7219_Display_Test>
	HAL_Delay(2000); //Время на визуальный осмотр
 8000a72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a76:	f000 ff1d 	bl	80018b4 <HAL_Delay>
	max7219_Display_Test(0); //Перевод дисплея в нормальный режим работы
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ffca 	bl	8000a14 <max7219_Display_Test>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <max7219_send_symbol>:
/*--------------Инициализация дисплея----------------*/

/*-----------Отправка символов на дисплей------------*/
///Отправка символов на дисплей. Функция вспомогательная.
/// \param *tx_buffer - Массив с данными, которые будут выводиться на дисплей.
void max7219_send_symbol(uint8_t *tx_buffer) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	max7219_Transmit(8, tx_buffer[0]);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	2008      	movs	r0, #8
 8000a94:	f7ff ff86 	bl	80009a4 <max7219_Transmit>
	max7219_Transmit(7, tx_buffer[1]);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	2007      	movs	r0, #7
 8000aa2:	f7ff ff7f 	bl	80009a4 <max7219_Transmit>
	max7219_Transmit(6, tx_buffer[2]);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	2006      	movs	r0, #6
 8000ab0:	f7ff ff78 	bl	80009a4 <max7219_Transmit>
	max7219_Transmit(5, tx_buffer[3]);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4619      	mov	r1, r3
 8000abc:	2005      	movs	r0, #5
 8000abe:	f7ff ff71 	bl	80009a4 <max7219_Transmit>
	max7219_Transmit(4, tx_buffer[4]);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	2004      	movs	r0, #4
 8000acc:	f7ff ff6a 	bl	80009a4 <max7219_Transmit>
	max7219_Transmit(3, tx_buffer[5]);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3305      	adds	r3, #5
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f7ff ff63 	bl	80009a4 <max7219_Transmit>
	max7219_Transmit(2, tx_buffer[6]);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3306      	adds	r3, #6
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f7ff ff5c 	bl	80009a4 <max7219_Transmit>
	max7219_Transmit(1, tx_buffer[7]);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3307      	adds	r3, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4619      	mov	r1, r3
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff55 	bl	80009a4 <max7219_Transmit>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <max7219_num>:
/*-----------Отправка символов на дисплей------------*/

/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/
///Подготовка данных к выводу на дисплей. Цифры, минус, пробел. Функция вспомогательная.
void max7219_num(uint8_t rg, uint32_t value) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d038      	beq.n	8000b88 <max7219_num+0x84>
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d80d      	bhi.n	8000b36 <max7219_num+0x32>
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d025      	beq.n	8000b6a <max7219_num+0x66>
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d804      	bhi.n	8000b2c <max7219_num+0x28>
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d017      	beq.n	8000b56 <max7219_num+0x52>
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d01a      	beq.n	8000b60 <max7219_num+0x5c>
		break;
	case 255:
		symbol[rg] = _255;
		break;
	}
}
 8000b2a:	e050      	b.n	8000bce <max7219_num+0xca>
	switch (value) {
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d021      	beq.n	8000b74 <max7219_num+0x70>
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d024      	beq.n	8000b7e <max7219_num+0x7a>
}
 8000b34:	e04b      	b.n	8000bce <max7219_num+0xca>
	switch (value) {
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d035      	beq.n	8000ba6 <max7219_num+0xa2>
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d804      	bhi.n	8000b48 <max7219_num+0x44>
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d027      	beq.n	8000b92 <max7219_num+0x8e>
 8000b42:	2b07      	cmp	r3, #7
 8000b44:	d02a      	beq.n	8000b9c <max7219_num+0x98>
}
 8000b46:	e042      	b.n	8000bce <max7219_num+0xca>
	switch (value) {
 8000b48:	2bfe      	cmp	r3, #254	; 0xfe
 8000b4a:	d036      	beq.n	8000bba <max7219_num+0xb6>
 8000b4c:	2bff      	cmp	r3, #255	; 0xff
 8000b4e:	d039      	beq.n	8000bc4 <max7219_num+0xc0>
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d02d      	beq.n	8000bb0 <max7219_num+0xac>
}
 8000b54:	e03b      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _0;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <max7219_num+0xd4>)
 8000b5a:	217e      	movs	r1, #126	; 0x7e
 8000b5c:	54d1      	strb	r1, [r2, r3]
		break;
 8000b5e:	e036      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _1;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <max7219_num+0xd4>)
 8000b64:	2130      	movs	r1, #48	; 0x30
 8000b66:	54d1      	strb	r1, [r2, r3]
		break;
 8000b68:	e031      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _2;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <max7219_num+0xd4>)
 8000b6e:	216d      	movs	r1, #109	; 0x6d
 8000b70:	54d1      	strb	r1, [r2, r3]
		break;
 8000b72:	e02c      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _3;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <max7219_num+0xd4>)
 8000b78:	2179      	movs	r1, #121	; 0x79
 8000b7a:	54d1      	strb	r1, [r2, r3]
		break;
 8000b7c:	e027      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _4;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <max7219_num+0xd4>)
 8000b82:	2133      	movs	r1, #51	; 0x33
 8000b84:	54d1      	strb	r1, [r2, r3]
		break;
 8000b86:	e022      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _5;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <max7219_num+0xd4>)
 8000b8c:	215b      	movs	r1, #91	; 0x5b
 8000b8e:	54d1      	strb	r1, [r2, r3]
		break;
 8000b90:	e01d      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _6;
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <max7219_num+0xd4>)
 8000b96:	215f      	movs	r1, #95	; 0x5f
 8000b98:	54d1      	strb	r1, [r2, r3]
		break;
 8000b9a:	e018      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _7;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <max7219_num+0xd4>)
 8000ba0:	2170      	movs	r1, #112	; 0x70
 8000ba2:	54d1      	strb	r1, [r2, r3]
		break;
 8000ba4:	e013      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _8;
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <max7219_num+0xd4>)
 8000baa:	217f      	movs	r1, #127	; 0x7f
 8000bac:	54d1      	strb	r1, [r2, r3]
		break;
 8000bae:	e00e      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _9;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <max7219_num+0xd4>)
 8000bb4:	217b      	movs	r1, #123	; 0x7b
 8000bb6:	54d1      	strb	r1, [r2, r3]
		break;
 8000bb8:	e009      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _254;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <max7219_num+0xd4>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	54d1      	strb	r1, [r2, r3]
		break;
 8000bc2:	e004      	b.n	8000bce <max7219_num+0xca>
		symbol[rg] = _255;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <max7219_num+0xd4>)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	54d1      	strb	r1, [r2, r3]
		break;
 8000bcc:	bf00      	nop
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000028 	.word	0x20000028

08000bdc <max7219_num_point>:
/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/

/*---Подготовка данных к выводу на дисплей. Цифры с точкой---*/
///Подготовка данных к выводу на дисплей. Цифры с точкой. Функция вспомогательная.
void max7219_num_point(uint8_t rg, uint32_t value) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b09      	cmp	r3, #9
 8000bec:	d848      	bhi.n	8000c80 <max7219_num_point+0xa4>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <max7219_num_point+0x18>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c1d 	.word	0x08000c1d
 8000bf8:	08000c27 	.word	0x08000c27
 8000bfc:	08000c31 	.word	0x08000c31
 8000c00:	08000c3b 	.word	0x08000c3b
 8000c04:	08000c45 	.word	0x08000c45
 8000c08:	08000c4f 	.word	0x08000c4f
 8000c0c:	08000c59 	.word	0x08000c59
 8000c10:	08000c63 	.word	0x08000c63
 8000c14:	08000c6d 	.word	0x08000c6d
 8000c18:	08000c77 	.word	0x08000c77
	case 0:
		symbol[rg] = _0_point;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <max7219_num_point+0xb0>)
 8000c20:	21fe      	movs	r1, #254	; 0xfe
 8000c22:	54d1      	strb	r1, [r2, r3]
		break;
 8000c24:	e02c      	b.n	8000c80 <max7219_num_point+0xa4>
	case 1:
		symbol[rg] = _1_point;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <max7219_num_point+0xb0>)
 8000c2a:	21b0      	movs	r1, #176	; 0xb0
 8000c2c:	54d1      	strb	r1, [r2, r3]
		break;
 8000c2e:	e027      	b.n	8000c80 <max7219_num_point+0xa4>
	case 2:
		symbol[rg] = _2_point;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <max7219_num_point+0xb0>)
 8000c34:	21ed      	movs	r1, #237	; 0xed
 8000c36:	54d1      	strb	r1, [r2, r3]
		break;
 8000c38:	e022      	b.n	8000c80 <max7219_num_point+0xa4>
	case 3:
		symbol[rg] = _3_point;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <max7219_num_point+0xb0>)
 8000c3e:	21f9      	movs	r1, #249	; 0xf9
 8000c40:	54d1      	strb	r1, [r2, r3]
		break;
 8000c42:	e01d      	b.n	8000c80 <max7219_num_point+0xa4>
	case 4:
		symbol[rg] = _4_point;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <max7219_num_point+0xb0>)
 8000c48:	21b3      	movs	r1, #179	; 0xb3
 8000c4a:	54d1      	strb	r1, [r2, r3]
		break;
 8000c4c:	e018      	b.n	8000c80 <max7219_num_point+0xa4>
	case 5:
		symbol[rg] = _5_point;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <max7219_num_point+0xb0>)
 8000c52:	21db      	movs	r1, #219	; 0xdb
 8000c54:	54d1      	strb	r1, [r2, r3]
		break;
 8000c56:	e013      	b.n	8000c80 <max7219_num_point+0xa4>
	case 6:
		symbol[rg] = _6_point;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <max7219_num_point+0xb0>)
 8000c5c:	21df      	movs	r1, #223	; 0xdf
 8000c5e:	54d1      	strb	r1, [r2, r3]
		break;
 8000c60:	e00e      	b.n	8000c80 <max7219_num_point+0xa4>
	case 7:
		symbol[rg] = _7_point;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <max7219_num_point+0xb0>)
 8000c66:	21f0      	movs	r1, #240	; 0xf0
 8000c68:	54d1      	strb	r1, [r2, r3]
		break;
 8000c6a:	e009      	b.n	8000c80 <max7219_num_point+0xa4>
	case 8:
		symbol[rg] = _8_point;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <max7219_num_point+0xb0>)
 8000c70:	21ff      	movs	r1, #255	; 0xff
 8000c72:	54d1      	strb	r1, [r2, r3]
		break;
 8000c74:	e004      	b.n	8000c80 <max7219_num_point+0xa4>
	case 9:
		symbol[rg] = _9_point;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <max7219_num_point+0xb0>)
 8000c7a:	21fb      	movs	r1, #251	; 0xfb
 8000c7c:	54d1      	strb	r1, [r2, r3]
		break;
 8000c7e:	bf00      	nop
	}
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000028 	.word	0x20000028

08000c90 <max7219_Send_int32_t>:
///                uint32_t/int32_t
///Единственное ограничение - число должно быть в рамках от -9999999 до 99999999.
///В противном случае, на дисплее будет отображено "--------".
///Функция проверяет отправленное число на выход за рамки вывода дисплея, положительное оно или отрицательное,
///далее преобразует отправленное число в BCD код(двоично-десятичный код.) и уже после этого отправляет данные на дисплей.
void max7219_Send_int32_t(int32_t value) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (value > 99999999 || value < -9999999) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4abc      	ldr	r2, [pc, #752]	; (8000f8c <max7219_Send_int32_t+0x2fc>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	dc03      	bgt.n	8000ca8 <max7219_Send_int32_t+0x18>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4abb      	ldr	r2, [pc, #748]	; (8000f90 <max7219_Send_int32_t+0x300>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	da23      	bge.n	8000cf0 <max7219_Send_int32_t+0x60>
		max7219_num(0, 254);
 8000ca8:	21fe      	movs	r1, #254	; 0xfe
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff ff2a 	bl	8000b04 <max7219_num>
		max7219_num(1, 254);
 8000cb0:	21fe      	movs	r1, #254	; 0xfe
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff ff26 	bl	8000b04 <max7219_num>
		max7219_num(2, 254);
 8000cb8:	21fe      	movs	r1, #254	; 0xfe
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f7ff ff22 	bl	8000b04 <max7219_num>
		max7219_num(3, 254);
 8000cc0:	21fe      	movs	r1, #254	; 0xfe
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f7ff ff1e 	bl	8000b04 <max7219_num>
		max7219_num(4, 254);
 8000cc8:	21fe      	movs	r1, #254	; 0xfe
 8000cca:	2004      	movs	r0, #4
 8000ccc:	f7ff ff1a 	bl	8000b04 <max7219_num>
		max7219_num(5, 254);
 8000cd0:	21fe      	movs	r1, #254	; 0xfe
 8000cd2:	2005      	movs	r0, #5
 8000cd4:	f7ff ff16 	bl	8000b04 <max7219_num>
		max7219_num(6, 254);
 8000cd8:	21fe      	movs	r1, #254	; 0xfe
 8000cda:	2006      	movs	r0, #6
 8000cdc:	f7ff ff12 	bl	8000b04 <max7219_num>
		max7219_num(7, 254);
 8000ce0:	21fe      	movs	r1, #254	; 0xfe
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f7ff ff0e 	bl	8000b04 <max7219_num>
		max7219_send_symbol(symbol);
 8000ce8:	48aa      	ldr	r0, [pc, #680]	; (8000f94 <max7219_Send_int32_t+0x304>)
 8000cea:	f7ff fecb 	bl	8000a84 <max7219_send_symbol>
			max7219_num(6, BCD_Arr[1]);
			max7219_num(7, BCD_Arr[0]);
			max7219_send_symbol(symbol);
		}
	}
}
 8000cee:	e218      	b.n	8001122 <max7219_Send_int32_t+0x492>
		if (value < 0) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da05      	bge.n	8000d02 <max7219_Send_int32_t+0x72>
			positive_value = false;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	75fb      	strb	r3, [r7, #23]
			value = value * (-1);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	e001      	b.n	8000d06 <max7219_Send_int32_t+0x76>
			positive_value = true;
 8000d02:	2301      	movs	r3, #1
 8000d04:	75fb      	strb	r3, [r7, #23]
		uint8_t BCD_Arr[8] = { 0, };
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
		lenght = value;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	613b      	str	r3, [r7, #16]
		while (value >= 10000000) {
 8000d14:	e007      	b.n	8000d26 <max7219_Send_int32_t+0x96>
			value -= 10000000;
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4b9f      	ldr	r3, [pc, #636]	; (8000f98 <max7219_Send_int32_t+0x308>)
 8000d1a:	4413      	add	r3, r2
 8000d1c:	607b      	str	r3, [r7, #4]
			BCD_Arr[7]++;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	73fb      	strb	r3, [r7, #15]
		while (value >= 10000000) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a9c      	ldr	r2, [pc, #624]	; (8000f9c <max7219_Send_int32_t+0x30c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	dcf3      	bgt.n	8000d16 <max7219_Send_int32_t+0x86>
		while (value >= 1000000) {
 8000d2e:	e009      	b.n	8000d44 <max7219_Send_int32_t+0xb4>
			value -= 1000000;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8000d36:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000d3a:	607b      	str	r3, [r7, #4]
			BCD_Arr[6]++;
 8000d3c:	7bbb      	ldrb	r3, [r7, #14]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	73bb      	strb	r3, [r7, #14]
		while (value >= 1000000) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a96      	ldr	r2, [pc, #600]	; (8000fa0 <max7219_Send_int32_t+0x310>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	dcf1      	bgt.n	8000d30 <max7219_Send_int32_t+0xa0>
		while (value >= 100000) {
 8000d4c:	e008      	b.n	8000d60 <max7219_Send_int32_t+0xd0>
			value -= 100000;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000d54:	3ba0      	subs	r3, #160	; 0xa0
 8000d56:	607b      	str	r3, [r7, #4]
			BCD_Arr[5]++;
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	737b      	strb	r3, [r7, #13]
		while (value >= 100000) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a90      	ldr	r2, [pc, #576]	; (8000fa4 <max7219_Send_int32_t+0x314>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	dcf2      	bgt.n	8000d4e <max7219_Send_int32_t+0xbe>
		while (value >= 10000) {
 8000d68:	e008      	b.n	8000d7c <max7219_Send_int32_t+0xec>
			value -= 10000;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000d70:	3b10      	subs	r3, #16
 8000d72:	607b      	str	r3, [r7, #4]
			BCD_Arr[4]++;
 8000d74:	7b3b      	ldrb	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	733b      	strb	r3, [r7, #12]
		while (value >= 10000) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d82:	4293      	cmp	r3, r2
 8000d84:	dcf1      	bgt.n	8000d6a <max7219_Send_int32_t+0xda>
		while (value >= 1000) {
 8000d86:	e007      	b.n	8000d98 <max7219_Send_int32_t+0x108>
			value -= 1000;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d8e:	607b      	str	r3, [r7, #4]
			BCD_Arr[3]++;
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	3301      	adds	r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	72fb      	strb	r3, [r7, #11]
		while (value >= 1000) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d9e:	daf3      	bge.n	8000d88 <max7219_Send_int32_t+0xf8>
		while (value >= 100) {
 8000da0:	e006      	b.n	8000db0 <max7219_Send_int32_t+0x120>
			value -= 100;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3b64      	subs	r3, #100	; 0x64
 8000da6:	607b      	str	r3, [r7, #4]
			BCD_Arr[2]++;
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	72bb      	strb	r3, [r7, #10]
		while (value >= 100) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b63      	cmp	r3, #99	; 0x63
 8000db4:	dcf5      	bgt.n	8000da2 <max7219_Send_int32_t+0x112>
		while (value >= 10) {
 8000db6:	e006      	b.n	8000dc6 <max7219_Send_int32_t+0x136>
			value -= 10;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b0a      	subs	r3, #10
 8000dbc:	607b      	str	r3, [r7, #4]
			BCD_Arr[1]++;
 8000dbe:	7a7b      	ldrb	r3, [r7, #9]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	727b      	strb	r3, [r7, #9]
		while (value >= 10) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b09      	cmp	r3, #9
 8000dca:	dcf5      	bgt.n	8000db8 <max7219_Send_int32_t+0x128>
		BCD_Arr[0] = (uint8_t) (value);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	723b      	strb	r3, [r7, #8]
		if (lenght < 10) {
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	2b09      	cmp	r3, #9
 8000dd6:	d82c      	bhi.n	8000e32 <max7219_Send_int32_t+0x1a2>
			max7219_num(0, 255);
 8000dd8:	21ff      	movs	r1, #255	; 0xff
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fe92 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 8000de0:	21ff      	movs	r1, #255	; 0xff
 8000de2:	2001      	movs	r0, #1
 8000de4:	f7ff fe8e 	bl	8000b04 <max7219_num>
			max7219_num(2, 255);
 8000de8:	21ff      	movs	r1, #255	; 0xff
 8000dea:	2002      	movs	r0, #2
 8000dec:	f7ff fe8a 	bl	8000b04 <max7219_num>
			max7219_num(3, 255);
 8000df0:	21ff      	movs	r1, #255	; 0xff
 8000df2:	2003      	movs	r0, #3
 8000df4:	f7ff fe86 	bl	8000b04 <max7219_num>
			max7219_num(4, 255);
 8000df8:	21ff      	movs	r1, #255	; 0xff
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f7ff fe82 	bl	8000b04 <max7219_num>
			max7219_num(5, 255);
 8000e00:	21ff      	movs	r1, #255	; 0xff
 8000e02:	2005      	movs	r0, #5
 8000e04:	f7ff fe7e 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d004      	beq.n	8000e18 <max7219_Send_int32_t+0x188>
				max7219_num(6, 255);
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	2006      	movs	r0, #6
 8000e12:	f7ff fe77 	bl	8000b04 <max7219_num>
 8000e16:	e003      	b.n	8000e20 <max7219_Send_int32_t+0x190>
				max7219_num(6, 254);
 8000e18:	21fe      	movs	r1, #254	; 0xfe
 8000e1a:	2006      	movs	r0, #6
 8000e1c:	f7ff fe72 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8000e20:	7a3b      	ldrb	r3, [r7, #8]
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff fe6d 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8000e2a:	485a      	ldr	r0, [pc, #360]	; (8000f94 <max7219_Send_int32_t+0x304>)
 8000e2c:	f7ff fe2a 	bl	8000a84 <max7219_send_symbol>
}
 8000e30:	e177      	b.n	8001122 <max7219_Send_int32_t+0x492>
		} else if (lenght < 100) {
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	2b63      	cmp	r3, #99	; 0x63
 8000e36:	d82d      	bhi.n	8000e94 <max7219_Send_int32_t+0x204>
			max7219_num(0, 255);
 8000e38:	21ff      	movs	r1, #255	; 0xff
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fe62 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 8000e40:	21ff      	movs	r1, #255	; 0xff
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff fe5e 	bl	8000b04 <max7219_num>
			max7219_num(2, 255);
 8000e48:	21ff      	movs	r1, #255	; 0xff
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f7ff fe5a 	bl	8000b04 <max7219_num>
			max7219_num(3, 255);
 8000e50:	21ff      	movs	r1, #255	; 0xff
 8000e52:	2003      	movs	r0, #3
 8000e54:	f7ff fe56 	bl	8000b04 <max7219_num>
			max7219_num(4, 255);
 8000e58:	21ff      	movs	r1, #255	; 0xff
 8000e5a:	2004      	movs	r0, #4
 8000e5c:	f7ff fe52 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <max7219_Send_int32_t+0x1e0>
				max7219_num(5, 255);
 8000e66:	21ff      	movs	r1, #255	; 0xff
 8000e68:	2005      	movs	r0, #5
 8000e6a:	f7ff fe4b 	bl	8000b04 <max7219_num>
 8000e6e:	e003      	b.n	8000e78 <max7219_Send_int32_t+0x1e8>
				max7219_num(5, 254);
 8000e70:	21fe      	movs	r1, #254	; 0xfe
 8000e72:	2005      	movs	r0, #5
 8000e74:	f7ff fe46 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8000e78:	7a7b      	ldrb	r3, [r7, #9]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2006      	movs	r0, #6
 8000e7e:	f7ff fe41 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8000e82:	7a3b      	ldrb	r3, [r7, #8]
 8000e84:	4619      	mov	r1, r3
 8000e86:	2007      	movs	r0, #7
 8000e88:	f7ff fe3c 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8000e8c:	4841      	ldr	r0, [pc, #260]	; (8000f94 <max7219_Send_int32_t+0x304>)
 8000e8e:	f7ff fdf9 	bl	8000a84 <max7219_send_symbol>
}
 8000e92:	e146      	b.n	8001122 <max7219_Send_int32_t+0x492>
		} else if (lenght < 1000) {
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e9a:	d22e      	bcs.n	8000efa <max7219_Send_int32_t+0x26a>
			max7219_num(0, 255);
 8000e9c:	21ff      	movs	r1, #255	; 0xff
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fe30 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 8000ea4:	21ff      	movs	r1, #255	; 0xff
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fe2c 	bl	8000b04 <max7219_num>
			max7219_num(2, 255);
 8000eac:	21ff      	movs	r1, #255	; 0xff
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff fe28 	bl	8000b04 <max7219_num>
			max7219_num(3, 255);
 8000eb4:	21ff      	movs	r1, #255	; 0xff
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f7ff fe24 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d004      	beq.n	8000ecc <max7219_Send_int32_t+0x23c>
				max7219_num(4, 255);
 8000ec2:	21ff      	movs	r1, #255	; 0xff
 8000ec4:	2004      	movs	r0, #4
 8000ec6:	f7ff fe1d 	bl	8000b04 <max7219_num>
 8000eca:	e003      	b.n	8000ed4 <max7219_Send_int32_t+0x244>
				max7219_num(4, 254);
 8000ecc:	21fe      	movs	r1, #254	; 0xfe
 8000ece:	2004      	movs	r0, #4
 8000ed0:	f7ff fe18 	bl	8000b04 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 8000ed4:	7abb      	ldrb	r3, [r7, #10]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2005      	movs	r0, #5
 8000eda:	f7ff fe13 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8000ede:	7a7b      	ldrb	r3, [r7, #9]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f7ff fe0e 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8000ee8:	7a3b      	ldrb	r3, [r7, #8]
 8000eea:	4619      	mov	r1, r3
 8000eec:	2007      	movs	r0, #7
 8000eee:	f7ff fe09 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8000ef2:	4828      	ldr	r0, [pc, #160]	; (8000f94 <max7219_Send_int32_t+0x304>)
 8000ef4:	f7ff fdc6 	bl	8000a84 <max7219_send_symbol>
}
 8000ef8:	e113      	b.n	8001122 <max7219_Send_int32_t+0x492>
		} else if (lenght < 10000) {
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d82f      	bhi.n	8000f64 <max7219_Send_int32_t+0x2d4>
			max7219_num(0, 255);
 8000f04:	21ff      	movs	r1, #255	; 0xff
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fdfc 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 8000f0c:	21ff      	movs	r1, #255	; 0xff
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f7ff fdf8 	bl	8000b04 <max7219_num>
			max7219_num(2, 255);
 8000f14:	21ff      	movs	r1, #255	; 0xff
 8000f16:	2002      	movs	r0, #2
 8000f18:	f7ff fdf4 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <max7219_Send_int32_t+0x29c>
				max7219_num(3, 255);
 8000f22:	21ff      	movs	r1, #255	; 0xff
 8000f24:	2003      	movs	r0, #3
 8000f26:	f7ff fded 	bl	8000b04 <max7219_num>
 8000f2a:	e003      	b.n	8000f34 <max7219_Send_int32_t+0x2a4>
				max7219_num(3, 254);
 8000f2c:	21fe      	movs	r1, #254	; 0xfe
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f7ff fde8 	bl	8000b04 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 8000f34:	7afb      	ldrb	r3, [r7, #11]
 8000f36:	4619      	mov	r1, r3
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f7ff fde3 	bl	8000b04 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 8000f3e:	7abb      	ldrb	r3, [r7, #10]
 8000f40:	4619      	mov	r1, r3
 8000f42:	2005      	movs	r0, #5
 8000f44:	f7ff fdde 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8000f48:	7a7b      	ldrb	r3, [r7, #9]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2006      	movs	r0, #6
 8000f4e:	f7ff fdd9 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8000f52:	7a3b      	ldrb	r3, [r7, #8]
 8000f54:	4619      	mov	r1, r3
 8000f56:	2007      	movs	r0, #7
 8000f58:	f7ff fdd4 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <max7219_Send_int32_t+0x304>)
 8000f5e:	f7ff fd91 	bl	8000a84 <max7219_send_symbol>
}
 8000f62:	e0de      	b.n	8001122 <max7219_Send_int32_t+0x492>
		} else if (lenght < 100000) {
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <max7219_Send_int32_t+0x314>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d83e      	bhi.n	8000fea <max7219_Send_int32_t+0x35a>
			max7219_num(0, 255);
 8000f6c:	21ff      	movs	r1, #255	; 0xff
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fdc8 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 8000f74:	21ff      	movs	r1, #255	; 0xff
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff fdc4 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d012      	beq.n	8000fa8 <max7219_Send_int32_t+0x318>
				max7219_num(2, 255);
 8000f82:	21ff      	movs	r1, #255	; 0xff
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff fdbd 	bl	8000b04 <max7219_num>
 8000f8a:	e011      	b.n	8000fb0 <max7219_Send_int32_t+0x320>
 8000f8c:	05f5e0ff 	.word	0x05f5e0ff
 8000f90:	ff676981 	.word	0xff676981
 8000f94:	20000028 	.word	0x20000028
 8000f98:	ff676980 	.word	0xff676980
 8000f9c:	0098967f 	.word	0x0098967f
 8000fa0:	000f423f 	.word	0x000f423f
 8000fa4:	0001869f 	.word	0x0001869f
				max7219_num(2, 254);
 8000fa8:	21fe      	movs	r1, #254	; 0xfe
 8000faa:	2002      	movs	r0, #2
 8000fac:	f7ff fdaa 	bl	8000b04 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f7ff fda5 	bl	8000b04 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2004      	movs	r0, #4
 8000fc0:	f7ff fda0 	bl	8000b04 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 8000fc4:	7abb      	ldrb	r3, [r7, #10]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f7ff fd9b 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8000fce:	7a7b      	ldrb	r3, [r7, #9]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f7ff fd96 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8000fd8:	7a3b      	ldrb	r3, [r7, #8]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2007      	movs	r0, #7
 8000fde:	f7ff fd91 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8000fe2:	4852      	ldr	r0, [pc, #328]	; (800112c <max7219_Send_int32_t+0x49c>)
 8000fe4:	f7ff fd4e 	bl	8000a84 <max7219_send_symbol>
}
 8000fe8:	e09b      	b.n	8001122 <max7219_Send_int32_t+0x492>
		} else if (lenght < 1000000) {
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4a50      	ldr	r2, [pc, #320]	; (8001130 <max7219_Send_int32_t+0x4a0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d831      	bhi.n	8001056 <max7219_Send_int32_t+0x3c6>
			max7219_num(0, 255);
 8000ff2:	21ff      	movs	r1, #255	; 0xff
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fd85 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <max7219_Send_int32_t+0x37a>
				max7219_num(1, 255);
 8001000:	21ff      	movs	r1, #255	; 0xff
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fd7e 	bl	8000b04 <max7219_num>
 8001008:	e003      	b.n	8001012 <max7219_Send_int32_t+0x382>
				max7219_num(1, 254);
 800100a:	21fe      	movs	r1, #254	; 0xfe
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff fd79 	bl	8000b04 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8001012:	7b7b      	ldrb	r3, [r7, #13]
 8001014:	4619      	mov	r1, r3
 8001016:	2002      	movs	r0, #2
 8001018:	f7ff fd74 	bl	8000b04 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 800101c:	7b3b      	ldrb	r3, [r7, #12]
 800101e:	4619      	mov	r1, r3
 8001020:	2003      	movs	r0, #3
 8001022:	f7ff fd6f 	bl	8000b04 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	4619      	mov	r1, r3
 800102a:	2004      	movs	r0, #4
 800102c:	f7ff fd6a 	bl	8000b04 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 8001030:	7abb      	ldrb	r3, [r7, #10]
 8001032:	4619      	mov	r1, r3
 8001034:	2005      	movs	r0, #5
 8001036:	f7ff fd65 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 800103a:	7a7b      	ldrb	r3, [r7, #9]
 800103c:	4619      	mov	r1, r3
 800103e:	2006      	movs	r0, #6
 8001040:	f7ff fd60 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001044:	7a3b      	ldrb	r3, [r7, #8]
 8001046:	4619      	mov	r1, r3
 8001048:	2007      	movs	r0, #7
 800104a:	f7ff fd5b 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 800104e:	4837      	ldr	r0, [pc, #220]	; (800112c <max7219_Send_int32_t+0x49c>)
 8001050:	f7ff fd18 	bl	8000a84 <max7219_send_symbol>
}
 8001054:	e065      	b.n	8001122 <max7219_Send_int32_t+0x492>
		} else if (lenght < 10000000) {
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4a36      	ldr	r2, [pc, #216]	; (8001134 <max7219_Send_int32_t+0x4a4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d832      	bhi.n	80010c4 <max7219_Send_int32_t+0x434>
			if (positive_value == true) {
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <max7219_Send_int32_t+0x3de>
				max7219_num(0, 255);
 8001064:	21ff      	movs	r1, #255	; 0xff
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fd4c 	bl	8000b04 <max7219_num>
 800106c:	e003      	b.n	8001076 <max7219_Send_int32_t+0x3e6>
				max7219_num(0, 254);
 800106e:	21fe      	movs	r1, #254	; 0xfe
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fd47 	bl	8000b04 <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	4619      	mov	r1, r3
 800107a:	2001      	movs	r0, #1
 800107c:	f7ff fd42 	bl	8000b04 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	4619      	mov	r1, r3
 8001084:	2002      	movs	r0, #2
 8001086:	f7ff fd3d 	bl	8000b04 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	4619      	mov	r1, r3
 800108e:	2003      	movs	r0, #3
 8001090:	f7ff fd38 	bl	8000b04 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	4619      	mov	r1, r3
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff fd33 	bl	8000b04 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	4619      	mov	r1, r3
 80010a2:	2005      	movs	r0, #5
 80010a4:	f7ff fd2e 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80010a8:	7a7b      	ldrb	r3, [r7, #9]
 80010aa:	4619      	mov	r1, r3
 80010ac:	2006      	movs	r0, #6
 80010ae:	f7ff fd29 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80010b2:	7a3b      	ldrb	r3, [r7, #8]
 80010b4:	4619      	mov	r1, r3
 80010b6:	2007      	movs	r0, #7
 80010b8:	f7ff fd24 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 80010bc:	481b      	ldr	r0, [pc, #108]	; (800112c <max7219_Send_int32_t+0x49c>)
 80010be:	f7ff fce1 	bl	8000a84 <max7219_send_symbol>
}
 80010c2:	e02e      	b.n	8001122 <max7219_Send_int32_t+0x492>
		} else if (lenght < 100000000) {
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <max7219_Send_int32_t+0x4a8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d82a      	bhi.n	8001122 <max7219_Send_int32_t+0x492>
			max7219_num(0, BCD_Arr[7]);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	4619      	mov	r1, r3
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fd17 	bl	8000b04 <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	4619      	mov	r1, r3
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff fd12 	bl	8000b04 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 80010e0:	7b7b      	ldrb	r3, [r7, #13]
 80010e2:	4619      	mov	r1, r3
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fd0d 	bl	8000b04 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 80010ea:	7b3b      	ldrb	r3, [r7, #12]
 80010ec:	4619      	mov	r1, r3
 80010ee:	2003      	movs	r0, #3
 80010f0:	f7ff fd08 	bl	8000b04 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	4619      	mov	r1, r3
 80010f8:	2004      	movs	r0, #4
 80010fa:	f7ff fd03 	bl	8000b04 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 80010fe:	7abb      	ldrb	r3, [r7, #10]
 8001100:	4619      	mov	r1, r3
 8001102:	2005      	movs	r0, #5
 8001104:	f7ff fcfe 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001108:	7a7b      	ldrb	r3, [r7, #9]
 800110a:	4619      	mov	r1, r3
 800110c:	2006      	movs	r0, #6
 800110e:	f7ff fcf9 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001112:	7a3b      	ldrb	r3, [r7, #8]
 8001114:	4619      	mov	r1, r3
 8001116:	2007      	movs	r0, #7
 8001118:	f7ff fcf4 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <max7219_Send_int32_t+0x49c>)
 800111e:	f7ff fcb1 	bl	8000a84 <max7219_send_symbol>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000028 	.word	0x20000028
 8001130:	000f423f 	.word	0x000f423f
 8001134:	0098967f 	.word	0x0098967f
 8001138:	05f5e0ff 	.word	0x05f5e0ff

0800113c <max7219_Send_float>:
///Отправка чисел с плавающей запятой на дисплей.
///Число должно быть в рамках от -9999.999 до 99999.999.
///В противном случае, на дисплее будет отображено "--------".
///Функция проверяет отправленное число на выход за рамки вывода дисплея, положительное оно или отрицательное,
///далее преобразует отправленное число в BCD код(двоично-десятичный код.) и уже после этого отправляет данные на дисплей.
void max7219_Send_float(float value) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if (value > 99999.999f || value < -9999.999f) {
 8001144:	49b2      	ldr	r1, [pc, #712]	; (8001410 <max7219_Send_float+0x2d4>)
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff faca 	bl	80006e0 <__aeabi_fcmpgt>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <max7219_Send_float+0x24>
 8001152:	49b0      	ldr	r1, [pc, #704]	; (8001414 <max7219_Send_float+0x2d8>)
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff faa5 	bl	80006a4 <__aeabi_fcmplt>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d023      	beq.n	80011a8 <max7219_Send_float+0x6c>
		max7219_num(0, 254);
 8001160:	21fe      	movs	r1, #254	; 0xfe
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fcce 	bl	8000b04 <max7219_num>
		max7219_num(1, 254);
 8001168:	21fe      	movs	r1, #254	; 0xfe
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fcca 	bl	8000b04 <max7219_num>
		max7219_num(2, 254);
 8001170:	21fe      	movs	r1, #254	; 0xfe
 8001172:	2002      	movs	r0, #2
 8001174:	f7ff fcc6 	bl	8000b04 <max7219_num>
		max7219_num(3, 254);
 8001178:	21fe      	movs	r1, #254	; 0xfe
 800117a:	2003      	movs	r0, #3
 800117c:	f7ff fcc2 	bl	8000b04 <max7219_num>
		max7219_num(4, 254);
 8001180:	21fe      	movs	r1, #254	; 0xfe
 8001182:	2004      	movs	r0, #4
 8001184:	f7ff fcbe 	bl	8000b04 <max7219_num>
		max7219_num(5, 254);
 8001188:	21fe      	movs	r1, #254	; 0xfe
 800118a:	2005      	movs	r0, #5
 800118c:	f7ff fcba 	bl	8000b04 <max7219_num>
		max7219_num(6, 254);
 8001190:	21fe      	movs	r1, #254	; 0xfe
 8001192:	2006      	movs	r0, #6
 8001194:	f7ff fcb6 	bl	8000b04 <max7219_num>
		max7219_num(7, 254);
 8001198:	21fe      	movs	r1, #254	; 0xfe
 800119a:	2007      	movs	r0, #7
 800119c:	f7ff fcb2 	bl	8000b04 <max7219_num>
		max7219_send_symbol(symbol);
 80011a0:	489d      	ldr	r0, [pc, #628]	; (8001418 <max7219_Send_float+0x2dc>)
 80011a2:	f7ff fc6f 	bl	8000a84 <max7219_send_symbol>
			max7219_num(7, BCD_Arr[0]);
			max7219_send_symbol(symbol);
		}
	}

}
 80011a6:	e230      	b.n	800160a <max7219_Send_float+0x4ce>
		int32_t value_conv = value * 1000;
 80011a8:	499c      	ldr	r1, [pc, #624]	; (800141c <max7219_Send_float+0x2e0>)
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff f8dc 	bl	8000368 <__aeabi_fmul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fa9e 	bl	80006f4 <__aeabi_f2iz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	61fb      	str	r3, [r7, #28]
		value = value * 1000;
 80011bc:	4997      	ldr	r1, [pc, #604]	; (800141c <max7219_Send_float+0x2e0>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff f8d2 	bl	8000368 <__aeabi_fmul>
 80011c4:	4603      	mov	r3, r0
 80011c6:	607b      	str	r3, [r7, #4]
		if (value_conv < 0) {
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da05      	bge.n	80011da <max7219_Send_float+0x9e>
			positive_value = false;
 80011ce:	2300      	movs	r3, #0
 80011d0:	76fb      	strb	r3, [r7, #27]
			value_conv = value_conv * (-1);
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	425b      	negs	r3, r3
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	e001      	b.n	80011de <max7219_Send_float+0xa2>
			positive_value = true;
 80011da:	2301      	movs	r3, #1
 80011dc:	76fb      	strb	r3, [r7, #27]
		uint8_t BCD_Arr[8] = { 0, };
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
		lenght = value_conv;
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	617b      	str	r3, [r7, #20]
		while (value_conv >= 10000000) {
 80011ec:	e007      	b.n	80011fe <max7219_Send_float+0xc2>
			value_conv -= 10000000;
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	4b8b      	ldr	r3, [pc, #556]	; (8001420 <max7219_Send_float+0x2e4>)
 80011f2:	4413      	add	r3, r2
 80011f4:	61fb      	str	r3, [r7, #28]
			BCD_Arr[7]++;
 80011f6:	7cfb      	ldrb	r3, [r7, #19]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	74fb      	strb	r3, [r7, #19]
		while (value_conv >= 10000000) {
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	4a88      	ldr	r2, [pc, #544]	; (8001424 <max7219_Send_float+0x2e8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	dcf3      	bgt.n	80011ee <max7219_Send_float+0xb2>
		while (value_conv >= 1000000) {
 8001206:	e009      	b.n	800121c <max7219_Send_float+0xe0>
			value_conv -= 1000000;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800120e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001212:	61fb      	str	r3, [r7, #28]
			BCD_Arr[6]++;
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	3301      	adds	r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	74bb      	strb	r3, [r7, #18]
		while (value_conv >= 1000000) {
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	4a82      	ldr	r2, [pc, #520]	; (8001428 <max7219_Send_float+0x2ec>)
 8001220:	4293      	cmp	r3, r2
 8001222:	dcf1      	bgt.n	8001208 <max7219_Send_float+0xcc>
		while (value_conv >= 100000) {
 8001224:	e008      	b.n	8001238 <max7219_Send_float+0xfc>
			value_conv -= 100000;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 800122c:	3ba0      	subs	r3, #160	; 0xa0
 800122e:	61fb      	str	r3, [r7, #28]
			BCD_Arr[5]++;
 8001230:	7c7b      	ldrb	r3, [r7, #17]
 8001232:	3301      	adds	r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	747b      	strb	r3, [r7, #17]
		while (value_conv >= 100000) {
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	4a7c      	ldr	r2, [pc, #496]	; (800142c <max7219_Send_float+0x2f0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	dcf2      	bgt.n	8001226 <max7219_Send_float+0xea>
		while (value_conv >= 10000) {
 8001240:	e008      	b.n	8001254 <max7219_Send_float+0x118>
			value_conv -= 10000;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8001248:	3b10      	subs	r3, #16
 800124a:	61fb      	str	r3, [r7, #28]
			BCD_Arr[4]++;
 800124c:	7c3b      	ldrb	r3, [r7, #16]
 800124e:	3301      	adds	r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	743b      	strb	r3, [r7, #16]
		while (value_conv >= 10000) {
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f242 720f 	movw	r2, #9999	; 0x270f
 800125a:	4293      	cmp	r3, r2
 800125c:	dcf1      	bgt.n	8001242 <max7219_Send_float+0x106>
		while (value_conv >= 1000) {
 800125e:	e007      	b.n	8001270 <max7219_Send_float+0x134>
			value_conv -= 1000;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001266:	61fb      	str	r3, [r7, #28]
			BCD_Arr[3]++;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	3301      	adds	r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	73fb      	strb	r3, [r7, #15]
		while (value_conv >= 1000) {
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001276:	daf3      	bge.n	8001260 <max7219_Send_float+0x124>
		while (value_conv >= 100) {
 8001278:	e006      	b.n	8001288 <max7219_Send_float+0x14c>
			value_conv -= 100;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b64      	subs	r3, #100	; 0x64
 800127e:	61fb      	str	r3, [r7, #28]
			BCD_Arr[2]++;
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	3301      	adds	r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	73bb      	strb	r3, [r7, #14]
		while (value_conv >= 100) {
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2b63      	cmp	r3, #99	; 0x63
 800128c:	dcf5      	bgt.n	800127a <max7219_Send_float+0x13e>
		while (value_conv >= 10) {
 800128e:	e006      	b.n	800129e <max7219_Send_float+0x162>
			value_conv -= 10;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3b0a      	subs	r3, #10
 8001294:	61fb      	str	r3, [r7, #28]
			BCD_Arr[1]++;
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	3301      	adds	r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	737b      	strb	r3, [r7, #13]
		while (value_conv >= 10) {
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	dcf5      	bgt.n	8001290 <max7219_Send_float+0x154>
		BCD_Arr[0] = (uint8_t) (value_conv);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	733b      	strb	r3, [r7, #12]
		if (lenght < 10) {
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	dc2f      	bgt.n	8001310 <max7219_Send_float+0x1d4>
			max7219_num(0, 255);
 80012b0:	21ff      	movs	r1, #255	; 0xff
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff fc26 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 80012b8:	21ff      	movs	r1, #255	; 0xff
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fc22 	bl	8000b04 <max7219_num>
			max7219_num(2, 255);
 80012c0:	21ff      	movs	r1, #255	; 0xff
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7ff fc1e 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 80012c8:	7efb      	ldrb	r3, [r7, #27]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <max7219_Send_float+0x19c>
				max7219_num(3, 255);
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	2003      	movs	r0, #3
 80012d2:	f7ff fc17 	bl	8000b04 <max7219_num>
 80012d6:	e003      	b.n	80012e0 <max7219_Send_float+0x1a4>
				max7219_num(3, 254);
 80012d8:	21fe      	movs	r1, #254	; 0xfe
 80012da:	2003      	movs	r0, #3
 80012dc:	f7ff fc12 	bl	8000b04 <max7219_num>
			max7219_num_point(4, BCD_Arr[4]);
 80012e0:	7c3b      	ldrb	r3, [r7, #16]
 80012e2:	4619      	mov	r1, r3
 80012e4:	2004      	movs	r0, #4
 80012e6:	f7ff fc79 	bl	8000bdc <max7219_num_point>
			max7219_num(5, BCD_Arr[3]);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	4619      	mov	r1, r3
 80012ee:	2005      	movs	r0, #5
 80012f0:	f7ff fc08 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	4619      	mov	r1, r3
 80012f8:	2006      	movs	r0, #6
 80012fa:	f7ff fc03 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80012fe:	7b3b      	ldrb	r3, [r7, #12]
 8001300:	4619      	mov	r1, r3
 8001302:	2007      	movs	r0, #7
 8001304:	f7ff fbfe 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8001308:	4843      	ldr	r0, [pc, #268]	; (8001418 <max7219_Send_float+0x2dc>)
 800130a:	f7ff fbbb 	bl	8000a84 <max7219_send_symbol>
}
 800130e:	e17c      	b.n	800160a <max7219_Send_float+0x4ce>
		} else if (lenght < 100) {
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b63      	cmp	r3, #99	; 0x63
 8001314:	dc2e      	bgt.n	8001374 <max7219_Send_float+0x238>
			max7219_num(0, 255);
 8001316:	21ff      	movs	r1, #255	; 0xff
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff fbf3 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 800131e:	21ff      	movs	r1, #255	; 0xff
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff fbef 	bl	8000b04 <max7219_num>
			max7219_num(2, 255);
 8001326:	21ff      	movs	r1, #255	; 0xff
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff fbeb 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 800132e:	7efb      	ldrb	r3, [r7, #27]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <max7219_Send_float+0x202>
				max7219_num(3, 255);
 8001334:	21ff      	movs	r1, #255	; 0xff
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff fbe4 	bl	8000b04 <max7219_num>
 800133c:	e003      	b.n	8001346 <max7219_Send_float+0x20a>
				max7219_num(3, 254);
 800133e:	21fe      	movs	r1, #254	; 0xfe
 8001340:	2003      	movs	r0, #3
 8001342:	f7ff fbdf 	bl	8000b04 <max7219_num>
			max7219_num_point(4, 255);
 8001346:	21ff      	movs	r1, #255	; 0xff
 8001348:	2004      	movs	r0, #4
 800134a:	f7ff fc47 	bl	8000bdc <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	4619      	mov	r1, r3
 8001352:	2005      	movs	r0, #5
 8001354:	f7ff fbd6 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	4619      	mov	r1, r3
 800135c:	2006      	movs	r0, #6
 800135e:	f7ff fbd1 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001362:	7b3b      	ldrb	r3, [r7, #12]
 8001364:	4619      	mov	r1, r3
 8001366:	2007      	movs	r0, #7
 8001368:	f7ff fbcc 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 800136c:	482a      	ldr	r0, [pc, #168]	; (8001418 <max7219_Send_float+0x2dc>)
 800136e:	f7ff fb89 	bl	8000a84 <max7219_send_symbol>
}
 8001372:	e14a      	b.n	800160a <max7219_Send_float+0x4ce>
		} else if (lenght < 1000) {
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800137a:	da2f      	bge.n	80013dc <max7219_Send_float+0x2a0>
			max7219_num(0, 255);
 800137c:	21ff      	movs	r1, #255	; 0xff
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fbc0 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 8001384:	21ff      	movs	r1, #255	; 0xff
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff fbbc 	bl	8000b04 <max7219_num>
			max7219_num(2, 255);
 800138c:	21ff      	movs	r1, #255	; 0xff
 800138e:	2002      	movs	r0, #2
 8001390:	f7ff fbb8 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 8001394:	7efb      	ldrb	r3, [r7, #27]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <max7219_Send_float+0x268>
				max7219_num(3, 255);
 800139a:	21ff      	movs	r1, #255	; 0xff
 800139c:	2003      	movs	r0, #3
 800139e:	f7ff fbb1 	bl	8000b04 <max7219_num>
 80013a2:	e003      	b.n	80013ac <max7219_Send_float+0x270>
				max7219_num(3, 254);
 80013a4:	21fe      	movs	r1, #254	; 0xfe
 80013a6:	2003      	movs	r0, #3
 80013a8:	f7ff fbac 	bl	8000b04 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2004      	movs	r0, #4
 80013b2:	f7ff fc13 	bl	8000bdc <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2005      	movs	r0, #5
 80013bc:	f7ff fba2 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	4619      	mov	r1, r3
 80013c4:	2006      	movs	r0, #6
 80013c6:	f7ff fb9d 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80013ca:	7b3b      	ldrb	r3, [r7, #12]
 80013cc:	4619      	mov	r1, r3
 80013ce:	2007      	movs	r0, #7
 80013d0:	f7ff fb98 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 80013d4:	4810      	ldr	r0, [pc, #64]	; (8001418 <max7219_Send_float+0x2dc>)
 80013d6:	f7ff fb55 	bl	8000a84 <max7219_send_symbol>
}
 80013da:	e116      	b.n	800160a <max7219_Send_float+0x4ce>
		} else if (lenght < 10000) {
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f242 720f 	movw	r2, #9999	; 0x270f
 80013e2:	4293      	cmp	r3, r2
 80013e4:	dc40      	bgt.n	8001468 <max7219_Send_float+0x32c>
			max7219_num(0, 255);
 80013e6:	21ff      	movs	r1, #255	; 0xff
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fb8b 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 80013ee:	21ff      	movs	r1, #255	; 0xff
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fb87 	bl	8000b04 <max7219_num>
			max7219_num(2, 255);
 80013f6:	21ff      	movs	r1, #255	; 0xff
 80013f8:	2002      	movs	r0, #2
 80013fa:	f7ff fb83 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 80013fe:	7efb      	ldrb	r3, [r7, #27]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d015      	beq.n	8001430 <max7219_Send_float+0x2f4>
				max7219_num(3, 255);
 8001404:	21ff      	movs	r1, #255	; 0xff
 8001406:	2003      	movs	r0, #3
 8001408:	f7ff fb7c 	bl	8000b04 <max7219_num>
 800140c:	e014      	b.n	8001438 <max7219_Send_float+0x2fc>
 800140e:	bf00      	nop
 8001410:	47c35000 	.word	0x47c35000
 8001414:	c61c3fff 	.word	0xc61c3fff
 8001418:	20000028 	.word	0x20000028
 800141c:	447a0000 	.word	0x447a0000
 8001420:	ff676980 	.word	0xff676980
 8001424:	0098967f 	.word	0x0098967f
 8001428:	000f423f 	.word	0x000f423f
 800142c:	0001869f 	.word	0x0001869f
				max7219_num(3, 254);
 8001430:	21fe      	movs	r1, #254	; 0xfe
 8001432:	2003      	movs	r0, #3
 8001434:	f7ff fb66 	bl	8000b04 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	4619      	mov	r1, r3
 800143c:	2004      	movs	r0, #4
 800143e:	f7ff fbcd 	bl	8000bdc <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	4619      	mov	r1, r3
 8001446:	2005      	movs	r0, #5
 8001448:	f7ff fb5c 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 800144c:	7b7b      	ldrb	r3, [r7, #13]
 800144e:	4619      	mov	r1, r3
 8001450:	2006      	movs	r0, #6
 8001452:	f7ff fb57 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	4619      	mov	r1, r3
 800145a:	2007      	movs	r0, #7
 800145c:	f7ff fb52 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8001460:	486c      	ldr	r0, [pc, #432]	; (8001614 <max7219_Send_float+0x4d8>)
 8001462:	f7ff fb0f 	bl	8000a84 <max7219_send_symbol>
}
 8001466:	e0d0      	b.n	800160a <max7219_Send_float+0x4ce>
		} else if (lenght < 100000) {
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4a6b      	ldr	r2, [pc, #428]	; (8001618 <max7219_Send_float+0x4dc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	dc30      	bgt.n	80014d2 <max7219_Send_float+0x396>
			max7219_num(0, 255);
 8001470:	21ff      	movs	r1, #255	; 0xff
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fb46 	bl	8000b04 <max7219_num>
			max7219_num(1, 255);
 8001478:	21ff      	movs	r1, #255	; 0xff
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fb42 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 8001480:	7efb      	ldrb	r3, [r7, #27]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <max7219_Send_float+0x354>
				max7219_num(2, 255);
 8001486:	21ff      	movs	r1, #255	; 0xff
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff fb3b 	bl	8000b04 <max7219_num>
 800148e:	e003      	b.n	8001498 <max7219_Send_float+0x35c>
				max7219_num(2, 254);
 8001490:	21fe      	movs	r1, #254	; 0xfe
 8001492:	2002      	movs	r0, #2
 8001494:	f7ff fb36 	bl	8000b04 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8001498:	7c3b      	ldrb	r3, [r7, #16]
 800149a:	4619      	mov	r1, r3
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff fb31 	bl	8000b04 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	4619      	mov	r1, r3
 80014a6:	2004      	movs	r0, #4
 80014a8:	f7ff fb98 	bl	8000bdc <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	4619      	mov	r1, r3
 80014b0:	2005      	movs	r0, #5
 80014b2:	f7ff fb27 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80014b6:	7b7b      	ldrb	r3, [r7, #13]
 80014b8:	4619      	mov	r1, r3
 80014ba:	2006      	movs	r0, #6
 80014bc:	f7ff fb22 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80014c0:	7b3b      	ldrb	r3, [r7, #12]
 80014c2:	4619      	mov	r1, r3
 80014c4:	2007      	movs	r0, #7
 80014c6:	f7ff fb1d 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 80014ca:	4852      	ldr	r0, [pc, #328]	; (8001614 <max7219_Send_float+0x4d8>)
 80014cc:	f7ff fada 	bl	8000a84 <max7219_send_symbol>
}
 80014d0:	e09b      	b.n	800160a <max7219_Send_float+0x4ce>
		} else if (lenght < 1000000) {
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	4a51      	ldr	r2, [pc, #324]	; (800161c <max7219_Send_float+0x4e0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	dc31      	bgt.n	800153e <max7219_Send_float+0x402>
			max7219_num(0, 255);
 80014da:	21ff      	movs	r1, #255	; 0xff
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff fb11 	bl	8000b04 <max7219_num>
			if (positive_value == true) {
 80014e2:	7efb      	ldrb	r3, [r7, #27]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <max7219_Send_float+0x3b6>
				max7219_num(1, 255);
 80014e8:	21ff      	movs	r1, #255	; 0xff
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff fb0a 	bl	8000b04 <max7219_num>
 80014f0:	e003      	b.n	80014fa <max7219_Send_float+0x3be>
				max7219_num(1, 254);
 80014f2:	21fe      	movs	r1, #254	; 0xfe
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fb05 	bl	8000b04 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 80014fa:	7c7b      	ldrb	r3, [r7, #17]
 80014fc:	4619      	mov	r1, r3
 80014fe:	2002      	movs	r0, #2
 8001500:	f7ff fb00 	bl	8000b04 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8001504:	7c3b      	ldrb	r3, [r7, #16]
 8001506:	4619      	mov	r1, r3
 8001508:	2003      	movs	r0, #3
 800150a:	f7ff fafb 	bl	8000b04 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	4619      	mov	r1, r3
 8001512:	2004      	movs	r0, #4
 8001514:	f7ff fb62 	bl	8000bdc <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	4619      	mov	r1, r3
 800151c:	2005      	movs	r0, #5
 800151e:	f7ff faf1 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001522:	7b7b      	ldrb	r3, [r7, #13]
 8001524:	4619      	mov	r1, r3
 8001526:	2006      	movs	r0, #6
 8001528:	f7ff faec 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 800152c:	7b3b      	ldrb	r3, [r7, #12]
 800152e:	4619      	mov	r1, r3
 8001530:	2007      	movs	r0, #7
 8001532:	f7ff fae7 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8001536:	4837      	ldr	r0, [pc, #220]	; (8001614 <max7219_Send_float+0x4d8>)
 8001538:	f7ff faa4 	bl	8000a84 <max7219_send_symbol>
}
 800153c:	e065      	b.n	800160a <max7219_Send_float+0x4ce>
		} else if (lenght < 10000000) {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	4a37      	ldr	r2, [pc, #220]	; (8001620 <max7219_Send_float+0x4e4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	dc32      	bgt.n	80015ac <max7219_Send_float+0x470>
			if (positive_value == true) {
 8001546:	7efb      	ldrb	r3, [r7, #27]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <max7219_Send_float+0x41a>
				max7219_num(0, 255);
 800154c:	21ff      	movs	r1, #255	; 0xff
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fad8 	bl	8000b04 <max7219_num>
 8001554:	e003      	b.n	800155e <max7219_Send_float+0x422>
				max7219_num(0, 254);
 8001556:	21fe      	movs	r1, #254	; 0xfe
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff fad3 	bl	8000b04 <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 800155e:	7cbb      	ldrb	r3, [r7, #18]
 8001560:	4619      	mov	r1, r3
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff face 	bl	8000b04 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8001568:	7c7b      	ldrb	r3, [r7, #17]
 800156a:	4619      	mov	r1, r3
 800156c:	2002      	movs	r0, #2
 800156e:	f7ff fac9 	bl	8000b04 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8001572:	7c3b      	ldrb	r3, [r7, #16]
 8001574:	4619      	mov	r1, r3
 8001576:	2003      	movs	r0, #3
 8001578:	f7ff fac4 	bl	8000b04 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	4619      	mov	r1, r3
 8001580:	2004      	movs	r0, #4
 8001582:	f7ff fb2b 	bl	8000bdc <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	4619      	mov	r1, r3
 800158a:	2005      	movs	r0, #5
 800158c:	f7ff faba 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001590:	7b7b      	ldrb	r3, [r7, #13]
 8001592:	4619      	mov	r1, r3
 8001594:	2006      	movs	r0, #6
 8001596:	f7ff fab5 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 800159a:	7b3b      	ldrb	r3, [r7, #12]
 800159c:	4619      	mov	r1, r3
 800159e:	2007      	movs	r0, #7
 80015a0:	f7ff fab0 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 80015a4:	481b      	ldr	r0, [pc, #108]	; (8001614 <max7219_Send_float+0x4d8>)
 80015a6:	f7ff fa6d 	bl	8000a84 <max7219_send_symbol>
}
 80015aa:	e02e      	b.n	800160a <max7219_Send_float+0x4ce>
		} else if (lenght < 100000000) {
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <max7219_Send_float+0x4e8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	dc2a      	bgt.n	800160a <max7219_Send_float+0x4ce>
			max7219_num(0, BCD_Arr[7]);
 80015b4:	7cfb      	ldrb	r3, [r7, #19]
 80015b6:	4619      	mov	r1, r3
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff faa3 	bl	8000b04 <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 80015be:	7cbb      	ldrb	r3, [r7, #18]
 80015c0:	4619      	mov	r1, r3
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fa9e 	bl	8000b04 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 80015c8:	7c7b      	ldrb	r3, [r7, #17]
 80015ca:	4619      	mov	r1, r3
 80015cc:	2002      	movs	r0, #2
 80015ce:	f7ff fa99 	bl	8000b04 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 80015d2:	7c3b      	ldrb	r3, [r7, #16]
 80015d4:	4619      	mov	r1, r3
 80015d6:	2003      	movs	r0, #3
 80015d8:	f7ff fa94 	bl	8000b04 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	4619      	mov	r1, r3
 80015e0:	2004      	movs	r0, #4
 80015e2:	f7ff fafb 	bl	8000bdc <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	4619      	mov	r1, r3
 80015ea:	2005      	movs	r0, #5
 80015ec:	f7ff fa8a 	bl	8000b04 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80015f0:	7b7b      	ldrb	r3, [r7, #13]
 80015f2:	4619      	mov	r1, r3
 80015f4:	2006      	movs	r0, #6
 80015f6:	f7ff fa85 	bl	8000b04 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80015fa:	7b3b      	ldrb	r3, [r7, #12]
 80015fc:	4619      	mov	r1, r3
 80015fe:	2007      	movs	r0, #7
 8001600:	f7ff fa80 	bl	8000b04 <max7219_num>
			max7219_send_symbol(symbol);
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <max7219_Send_float+0x4d8>)
 8001606:	f7ff fa3d 	bl	8000a84 <max7219_send_symbol>
}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000028 	.word	0x20000028
 8001618:	0001869f 	.word	0x0001869f
 800161c:	000f423f 	.word	0x000f423f
 8001620:	0098967f 	.word	0x0098967f
 8001624:	05f5e0ff 	.word	0x05f5e0ff

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_MspInit+0x5c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_MspInit+0x5c>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_MspInit+0x5c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x5c>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_MspInit+0x60>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_MspInit+0x60>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000

0800168c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <HAL_SPI_MspInit+0x98>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d137      	bne.n	800171c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_SPI_MspInit+0x9c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_SPI_MspInit+0x9c>)
 80016b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_SPI_MspInit+0x9c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_SPI_MspInit+0x9c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_SPI_MspInit+0x9c>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_SPI_MspInit+0x9c>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016dc:	23a0      	movs	r3, #160	; 0xa0
 80016de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	480f      	ldr	r0, [pc, #60]	; (800172c <HAL_SPI_MspInit+0xa0>)
 80016f0:	f000 fa86 	bl	8001c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <HAL_SPI_MspInit+0xa0>)
 8001708:	f000 fa7a 	bl	8001c00 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2023      	movs	r0, #35	; 0x23
 8001712:	f000 f9c8 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001716:	2023      	movs	r0, #35	; 0x23
 8001718:	f000 f9e1 	bl	8001ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800171c:	bf00      	nop
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013000 	.word	0x40013000
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <HardFault_Handler+0x4>

08001742 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <MemManage_Handler+0x4>

08001748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <BusFault_Handler+0x4>

0800174e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <UsageFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 f87e 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <SPI1_IRQHandler+0x10>)
 800178a:	f001 f8a3 	bl	80028d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000040 	.word	0x20000040

08001798 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017a6:	e003      	b.n	80017b0 <LoopCopyDataInit>

080017a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017ae:	3104      	adds	r1, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017b0:	480a      	ldr	r0, [pc, #40]	; (80017dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017b8:	d3f6      	bcc.n	80017a8 <CopyDataInit>
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017bc:	e002      	b.n	80017c4 <LoopFillZerobss>

080017be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017c0:	f842 3b04 	str.w	r3, [r2], #4

080017c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017c8:	d3f9      	bcc.n	80017be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ca:	f7ff ffe5 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f001 fadd 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d2:	f7fe ffb5 	bl	8000740 <main>
  bx lr
 80017d6:	4770      	bx	lr
  ldr r3, =_sidata
 80017d8:	08002e28 	.word	0x08002e28
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80017e4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80017e8:	2000009c 	.word	0x2000009c

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x28>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x28>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f945 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff ff0c 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f95d 	bl	8001afa <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f925 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000000 	.word	0x20000000
 8001874:	20000008 	.word	0x20000008
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x1c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_IncTick+0x20>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_IncTick+0x20>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20000008 	.word	0x20000008
 800189c:	20000098 	.word	0x20000098

080018a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <HAL_GetTick+0x10>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000098 	.word	0x20000098

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff fff0 	bl	80018a0 <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_Delay+0x40>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffe0 	bl	80018a0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000008 	.word	0x20000008

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4906      	ldr	r1, [pc, #24]	; (8001990 <__NVIC_EnableIRQ+0x34>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff90 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff2d 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff42 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff90 	bl	80019e8 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5f 	bl	8001994 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff35 	bl	800195c <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa2 	bl	8001a4c <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d005      	beq.n	8001b36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e051      	b.n	8001bda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 020e 	bic.w	r2, r2, #14
 8001b44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <HAL_DMA_Abort_IT+0xd0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d029      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0xa0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_DMA_Abort_IT+0xd4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d022      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x9c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_DMA_Abort_IT+0xd8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d01a      	beq.n	8001baa <HAL_DMA_Abort_IT+0x96>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_DMA_Abort_IT+0xdc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d012      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x90>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_DMA_Abort_IT+0xe0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00a      	beq.n	8001b9e <HAL_DMA_Abort_IT+0x8a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <HAL_DMA_Abort_IT+0xe4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d102      	bne.n	8001b98 <HAL_DMA_Abort_IT+0x84>
 8001b92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b96:	e00e      	b.n	8001bb6 <HAL_DMA_Abort_IT+0xa2>
 8001b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b9c:	e00b      	b.n	8001bb6 <HAL_DMA_Abort_IT+0xa2>
 8001b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba2:	e008      	b.n	8001bb6 <HAL_DMA_Abort_IT+0xa2>
 8001ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba8:	e005      	b.n	8001bb6 <HAL_DMA_Abort_IT+0xa2>
 8001baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bae:	e002      	b.n	8001bb6 <HAL_DMA_Abort_IT+0xa2>
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	e000      	b.n	8001bb6 <HAL_DMA_Abort_IT+0xa2>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <HAL_DMA_Abort_IT+0xe8>)
 8001bb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3
    } 
  }
  return status;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40020008 	.word	0x40020008
 8001be8:	4002001c 	.word	0x4002001c
 8001bec:	40020030 	.word	0x40020030
 8001bf0:	40020044 	.word	0x40020044
 8001bf4:	40020058 	.word	0x40020058
 8001bf8:	4002006c 	.word	0x4002006c
 8001bfc:	40020000 	.word	0x40020000

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b08b      	sub	sp, #44	; 0x2c
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e127      	b.n	8001e64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c14:	2201      	movs	r2, #1
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 8116 	bne.w	8001e5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b12      	cmp	r3, #18
 8001c38:	d034      	beq.n	8001ca4 <HAL_GPIO_Init+0xa4>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d80d      	bhi.n	8001c5a <HAL_GPIO_Init+0x5a>
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x9a>
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d804      	bhi.n	8001c50 <HAL_GPIO_Init+0x50>
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d031      	beq.n	8001cae <HAL_GPIO_Init+0xae>
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d01c      	beq.n	8001c88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c4e:	e048      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d043      	beq.n	8001cdc <HAL_GPIO_Init+0xdc>
 8001c54:	2b11      	cmp	r3, #17
 8001c56:	d01b      	beq.n	8001c90 <HAL_GPIO_Init+0x90>
          break;
 8001c58:	e043      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c5a:	4a89      	ldr	r2, [pc, #548]	; (8001e80 <HAL_GPIO_Init+0x280>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d026      	beq.n	8001cae <HAL_GPIO_Init+0xae>
 8001c60:	4a87      	ldr	r2, [pc, #540]	; (8001e80 <HAL_GPIO_Init+0x280>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d806      	bhi.n	8001c74 <HAL_GPIO_Init+0x74>
 8001c66:	4a87      	ldr	r2, [pc, #540]	; (8001e84 <HAL_GPIO_Init+0x284>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d020      	beq.n	8001cae <HAL_GPIO_Init+0xae>
 8001c6c:	4a86      	ldr	r2, [pc, #536]	; (8001e88 <HAL_GPIO_Init+0x288>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01d      	beq.n	8001cae <HAL_GPIO_Init+0xae>
          break;
 8001c72:	e036      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c74:	4a85      	ldr	r2, [pc, #532]	; (8001e8c <HAL_GPIO_Init+0x28c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0xae>
 8001c7a:	4a85      	ldr	r2, [pc, #532]	; (8001e90 <HAL_GPIO_Init+0x290>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d016      	beq.n	8001cae <HAL_GPIO_Init+0xae>
 8001c80:	4a84      	ldr	r2, [pc, #528]	; (8001e94 <HAL_GPIO_Init+0x294>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0xae>
          break;
 8001c86:	e02c      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	623b      	str	r3, [r7, #32]
          break;
 8001c8e:	e028      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	3304      	adds	r3, #4
 8001c96:	623b      	str	r3, [r7, #32]
          break;
 8001c98:	e023      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e01e      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	330c      	adds	r3, #12
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e019      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e012      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d105      	bne.n	8001cd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	611a      	str	r2, [r3, #16]
          break;
 8001cce:	e008      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	615a      	str	r2, [r3, #20]
          break;
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2bff      	cmp	r3, #255	; 0xff
 8001ce6:	d801      	bhi.n	8001cec <HAL_GPIO_Init+0xec>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	e001      	b.n	8001cf0 <HAL_GPIO_Init+0xf0>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2bff      	cmp	r3, #255	; 0xff
 8001cf6:	d802      	bhi.n	8001cfe <HAL_GPIO_Init+0xfe>
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x104>
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3b08      	subs	r3, #8
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	401a      	ands	r2, r3
 8001d16:	6a39      	ldr	r1, [r7, #32]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8096 	beq.w	8001e5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d32:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <HAL_GPIO_Init+0x298>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <HAL_GPIO_Init+0x298>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6193      	str	r3, [r2, #24]
 8001d3e:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <HAL_GPIO_Init+0x298>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d4a:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <HAL_GPIO_Init+0x29c>)
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x2a0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x19e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x2a4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x19a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <HAL_GPIO_Init+0x2a8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x196>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_GPIO_Init+0x2ac>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x192>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x1a0>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x1a0>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x1a0>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x1a0>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db0:	493a      	ldr	r1, [pc, #232]	; (8001e9c <HAL_GPIO_Init+0x29c>)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4938      	ldr	r1, [pc, #224]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
 8001dd6:	e006      	b.n	8001de6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd8:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	4933      	ldr	r1, [pc, #204]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df2:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	492e      	ldr	r1, [pc, #184]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
 8001dfe:	e006      	b.n	8001e0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4929      	ldr	r1, [pc, #164]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4924      	ldr	r1, [pc, #144]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	491f      	ldr	r1, [pc, #124]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	491a      	ldr	r1, [pc, #104]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60cb      	str	r3, [r1, #12]
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	4915      	ldr	r1, [pc, #84]	; (8001eb0 <HAL_GPIO_Init+0x2b0>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	3301      	adds	r3, #1
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f47f aed0 	bne.w	8001c14 <HAL_GPIO_Init+0x14>
  }
}
 8001e74:	bf00      	nop
 8001e76:	372c      	adds	r7, #44	; 0x2c
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	10210000 	.word	0x10210000
 8001e84:	10110000 	.word	0x10110000
 8001e88:	10120000 	.word	0x10120000
 8001e8c:	10310000 	.word	0x10310000
 8001e90:	10320000 	.word	0x10320000
 8001e94:	10220000 	.word	0x10220000
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40010800 	.word	0x40010800
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	40011400 	.word	0x40011400
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ed0:	e003      	b.n	8001eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e26c      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8087 	beq.w	8002012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f04:	4b92      	ldr	r3, [pc, #584]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d00c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f10:	4b8f      	ldr	r3, [pc, #572]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d112      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5e>
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06c      	beq.n	8002010 <HAL_RCC_OscConfig+0x12c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d168      	bne.n	8002010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e246      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x76>
 8001f4c:	4b80      	ldr	r3, [pc, #512]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a7f      	ldr	r2, [pc, #508]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e02e      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x98>
 8001f62:	4b7b      	ldr	r3, [pc, #492]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7a      	ldr	r2, [pc, #488]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b78      	ldr	r3, [pc, #480]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a77      	ldr	r2, [pc, #476]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xbc>
 8001f86:	4b72      	ldr	r3, [pc, #456]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a71      	ldr	r2, [pc, #452]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6e      	ldr	r2, [pc, #440]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001fa0:	4b6b      	ldr	r3, [pc, #428]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6a      	ldr	r2, [pc, #424]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a67      	ldr	r2, [pc, #412]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fc6e 	bl	80018a0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fc6a 	bl	80018a0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1fa      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe4>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fc5a 	bl	80018a0 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fc56 	bl	80018a0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1e6      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x10c>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d063      	beq.n	80020e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x18c>
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x176>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1ba      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4939      	ldr	r1, [pc, #228]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e03a      	b.n	80020e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff fc0f 	bl	80018a0 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7ff fc0b 	bl	80018a0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e19b      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4927      	ldr	r1, [pc, #156]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x270>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff fbee 	bl	80018a0 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff fbea 	bl	80018a0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e17a      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d03a      	beq.n	8002168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7ff fbce 	bl	80018a0 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff fbca 	bl	80018a0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e15a      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_RCC_OscConfig+0x26c>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002126:	2001      	movs	r0, #1
 8002128:	f000 faa8 	bl	800267c <RCC_Delay>
 800212c:	e01c      	b.n	8002168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_OscConfig+0x274>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff fbb4 	bl	80018a0 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213a:	e00f      	b.n	800215c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7ff fbb0 	bl	80018a0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d908      	bls.n	800215c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e140      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	42420000 	.word	0x42420000
 8002158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b9e      	ldr	r3, [pc, #632]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e9      	bne.n	800213c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a6 	beq.w	80022c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b97      	ldr	r3, [pc, #604]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10d      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b94      	ldr	r3, [pc, #592]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a93      	ldr	r2, [pc, #588]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b8e      	ldr	r3, [pc, #568]	; (80023dc <HAL_RCC_OscConfig+0x4f8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b8b      	ldr	r3, [pc, #556]	; (80023dc <HAL_RCC_OscConfig+0x4f8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a8a      	ldr	r2, [pc, #552]	; (80023dc <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fb71 	bl	80018a0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7ff fb6d 	bl	80018a0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0fd      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	4b81      	ldr	r3, [pc, #516]	; (80023dc <HAL_RCC_OscConfig+0x4f8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x312>
 80021e8:	4b7b      	ldr	r3, [pc, #492]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4a7a      	ldr	r2, [pc, #488]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	e02d      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x334>
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a75      	ldr	r2, [pc, #468]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	4b73      	ldr	r3, [pc, #460]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a72      	ldr	r2, [pc, #456]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6213      	str	r3, [r2, #32]
 8002216:	e01c      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x356>
 8002220:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a6c      	ldr	r2, [pc, #432]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a69      	ldr	r2, [pc, #420]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e00b      	b.n	8002252 <HAL_RCC_OscConfig+0x36e>
 800223a:	4b67      	ldr	r3, [pc, #412]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a66      	ldr	r2, [pc, #408]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4b64      	ldr	r3, [pc, #400]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a63      	ldr	r2, [pc, #396]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d015      	beq.n	8002286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb21 	bl	80018a0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7ff fb1d 	bl	80018a0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0ab      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	4b57      	ldr	r3, [pc, #348]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ee      	beq.n	8002262 <HAL_RCC_OscConfig+0x37e>
 8002284:	e014      	b.n	80022b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7ff fb0b 	bl	80018a0 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7ff fb07 	bl	80018a0 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e095      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ee      	bne.n	800228e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8081 	beq.w	80023ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022cc:	4b42      	ldr	r3, [pc, #264]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d061      	beq.n	800239c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d146      	bne.n	800236e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <HAL_RCC_OscConfig+0x4fc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fadb 	bl	80018a0 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7ff fad7 	bl	80018a0 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e067      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002314:	d108      	bne.n	8002328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002316:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	492d      	ldr	r1, [pc, #180]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a19      	ldr	r1, [r3, #32]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	430b      	orrs	r3, r1
 800233a:	4927      	ldr	r1, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x4fc>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff faab 	bl	80018a0 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234e:	f7ff faa7 	bl	80018a0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e037      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x46a>
 800236c:	e02f      	b.n	80023ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <HAL_RCC_OscConfig+0x4fc>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fa94 	bl	80018a0 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff fa90 	bl	80018a0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e020      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x498>
 800239a:	e018      	b.n	80023ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e013      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42420060 	.word	0x42420060

080023e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d0      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d910      	bls.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	4965      	ldr	r1, [pc, #404]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800244a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d040      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e073      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4936      	ldr	r1, [pc, #216]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff f9e4 	bl	80018a0 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff f9e0 	bl	80018a0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e053      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d210      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4922      	ldr	r1, [pc, #136]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4601      	mov	r1, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	5cd3      	ldrb	r3, [r2, r3]
 8002586:	fa21 f303 	lsr.w	r3, r1, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f942 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08002e10 	.word	0x08002e10
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b490      	push	{r4, r7}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025c0:	1d3c      	adds	r4, r7, #4
 80025c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025c8:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d002      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x40>
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x46>
 80025f6:	e02d      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025fa:	623b      	str	r3, [r7, #32]
      break;
 80025fc:	e02d      	b.n	800265a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	0c9b      	lsrs	r3, r3, #18
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800260a:	4413      	add	r3, r2
 800260c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002610:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	0c5b      	lsrs	r3, r3, #17
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800262a:	4413      	add	r3, r2
 800262c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002630:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002636:	fb02 f203 	mul.w	r2, r2, r3
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
 8002642:	e004      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	623b      	str	r3, [r7, #32]
      break;
 8002652:	e002      	b.n	800265a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002656:	623b      	str	r3, [r7, #32]
      break;
 8002658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265a:	6a3b      	ldr	r3, [r7, #32]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bc90      	pop	{r4, r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	08002dfc 	.word	0x08002dfc
 800266c:	08002e0c 	.word	0x08002e0c
 8002670:	40021000 	.word	0x40021000
 8002674:	007a1200 	.word	0x007a1200
 8002678:	003d0900 	.word	0x003d0900

0800267c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <RCC_Delay+0x34>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <RCC_Delay+0x38>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0a5b      	lsrs	r3, r3, #9
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002698:	bf00      	nop
  }
  while (Delay --);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	60fa      	str	r2, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f9      	bne.n	8002698 <RCC_Delay+0x1c>
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000000 	.word	0x20000000
 80026b4:	10624dd3 	.word	0x10624dd3

080026b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e076      	b.n	80027b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026da:	d009      	beq.n	80026f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
 80026e2:	e005      	b.n	80026f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe ffbe 	bl	800168c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	ea42 0103 	orr.w	r1, r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	0c1a      	lsrs	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f002 0204 	and.w	r2, r2, #4
 8002796:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_SPI_Transmit_IT+0x20>
 80027dc:	2302      	movs	r3, #2
 80027de:	e06f      	b.n	80028c0 <HAL_SPI_Transmit_IT+0x100>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_SPI_Transmit_IT+0x34>
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027f8:	e05d      	b.n	80028b6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d002      	beq.n	800280c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002806:	2302      	movs	r3, #2
 8002808:	75fb      	strb	r3, [r7, #23]
    goto error;
 800280a:	e054      	b.n	80028b6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <HAL_SPI_Transmit_IT+0x10c>)
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
 8002852:	e002      	b.n	800285a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <HAL_SPI_Transmit_IT+0x110>)
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002862:	d10f      	bne.n	8002884 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002882:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002892:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d008      	beq.n	80028b4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e000      	b.n	80028b6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80028b4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028be:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	08002b37 	.word	0x08002b37
 80028d0:	08002af1 	.word	0x08002af1

080028d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
    return;
 8002916:	e0bf      	b.n	8002a98 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_SPI_IRQHandler+0x66>
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	09db      	lsrs	r3, r3, #7
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
    return;
 8002938:	e0ae      	b.n	8002a98 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_SPI_IRQHandler+0x80>
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a2 	beq.w	8002a98 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 809b 	beq.w	8002a98 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d023      	beq.n	80029b6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b03      	cmp	r3, #3
 8002978:	d011      	beq.n	800299e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f043 0204 	orr.w	r2, r3, #4
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	e00b      	b.n	80029b6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
        return;
 80029b4:	e070      	b.n	8002a98 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d014      	beq.n	80029ec <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d050      	beq.n	8002a96 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a02:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <HAL_SPI_IRQHandler+0x14c>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d034      	beq.n	8002a8a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0203 	bic.w	r2, r2, #3
 8002a2e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d011      	beq.n	8002a5c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_SPI_IRQHandler+0x1cc>)
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff f865 	bl	8001b14 <HAL_DMA_Abort_IT>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d016      	beq.n	8002a92 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <HAL_SPI_IRQHandler+0x1cc>)
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f84f 	bl	8001b14 <HAL_DMA_Abort_IT>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002a88:	e003      	b.n	8002a92 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f813 	bl	8002ab6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002a90:	e000      	b.n	8002a94 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002a92:	bf00      	nop
    return;
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
  }
}
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	08002ac9 	.word	0x08002ac9

08002aa4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff ffe7 	bl	8002ab6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	7812      	ldrb	r2, [r2, #0]
 8002b04:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f8cd 	bl	8002cc8 <SPI_CloseTx_ISR>
  }
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	881a      	ldrh	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	1c9a      	adds	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8ab 	bl	8002cc8 <SPI_CloseTx_ISR>
  }
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b8c:	f7fe fe88 	bl	80018a0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b9c:	f7fe fe80 	bl	80018a0 <HAL_GetTick>
 8002ba0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	015b      	lsls	r3, r3, #5
 8002ba8:	0d1b      	lsrs	r3, r3, #20
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bb2:	e054      	b.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bba:	d050      	beq.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bbc:	f7fe fe70 	bl	80018a0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d902      	bls.n	8002bd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d13d      	bne.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002be0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bea:	d111      	bne.n	8002c10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf4:	d004      	beq.n	8002c00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d107      	bne.n	8002c10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c18:	d10f      	bne.n	8002c3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e017      	b.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d19b      	bne.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000000 	.word	0x20000000

08002c8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff ff6a 	bl	8002b7c <SPI_WaitFlagStateUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e000      	b.n	8002cc0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002cd0:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <SPI_CloseTx_ISR+0xbc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <SPI_CloseTx_ISR+0xc0>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0a5b      	lsrs	r3, r3, #9
 8002cdc:	2264      	movs	r2, #100	; 0x64
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce4:	f7fe fddc 	bl	80018a0 <HAL_GetTick>
 8002ce8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002cfc:	e009      	b.n	8002d12 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0eb      	beq.n	8002cea <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d20:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	2164      	movs	r1, #100	; 0x64
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffb0 	bl	8002c8c <SPI_EndRxTxTransaction>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff fea2 	bl	8002ab6 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8002d72:	e002      	b.n	8002d7a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff fe95 	bl	8002aa4 <HAL_SPI_TxCpltCallback>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000
 8002d88:	057619f1 	.word	0x057619f1

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2500      	movs	r5, #0
 8002d90:	4e0c      	ldr	r6, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1ba4      	subs	r4, r4, r6
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a5      	cmp	r5, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	f000 f822 	bl	8002de4 <_init>
 8002da0:	2500      	movs	r5, #0
 8002da2:	4e0a      	ldr	r6, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1ba4      	subs	r4, r4, r6
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a5      	cmp	r5, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002db4:	4798      	blx	r3
 8002db6:	3501      	adds	r5, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dbe:	4798      	blx	r3
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002e20 	.word	0x08002e20
 8002dc8:	08002e20 	.word	0x08002e20
 8002dcc:	08002e20 	.word	0x08002e20
 8002dd0:	08002e24 	.word	0x08002e24

08002dd4 <memset>:
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4402      	add	r2, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <_init>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr

08002df0 <_fini>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	bf00      	nop
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr
