
STM32L151CBT6A_Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f10  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08009050  08009050  00019050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a8  080093a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093b0  080093b0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080093b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001dc  08009594  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08009594  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af50  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e9a  00000000  00000000  0002b155  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  0002cff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002d908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151ec  00000000  00000000  0002e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086cd  00000000  00000000  000433a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dce4  00000000  00000000  0004ba71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037cc  00000000  00000000  000c97d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08009038 	.word	0x08009038

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08009038 	.word	0x08009038

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	d1ed      	bne.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b974 	b.w	800148c <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f806 	bl	80011bc <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__udivmoddi4>:
 80011bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	468c      	mov	ip, r1
 80011c2:	4604      	mov	r4, r0
 80011c4:	9e08      	ldr	r6, [sp, #32]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d14b      	bne.n	8001262 <__udivmoddi4+0xa6>
 80011ca:	428a      	cmp	r2, r1
 80011cc:	4615      	mov	r5, r2
 80011ce:	d967      	bls.n	80012a0 <__udivmoddi4+0xe4>
 80011d0:	fab2 f282 	clz	r2, r2
 80011d4:	b14a      	cbz	r2, 80011ea <__udivmoddi4+0x2e>
 80011d6:	f1c2 0720 	rsb	r7, r2, #32
 80011da:	fa01 f302 	lsl.w	r3, r1, r2
 80011de:	fa20 f707 	lsr.w	r7, r0, r7
 80011e2:	4095      	lsls	r5, r2
 80011e4:	ea47 0c03 	orr.w	ip, r7, r3
 80011e8:	4094      	lsls	r4, r2
 80011ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ee:	fbbc f7fe 	udiv	r7, ip, lr
 80011f2:	fa1f f885 	uxth.w	r8, r5
 80011f6:	fb0e c317 	mls	r3, lr, r7, ip
 80011fa:	fb07 f908 	mul.w	r9, r7, r8
 80011fe:	0c21      	lsrs	r1, r4, #16
 8001200:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001204:	4599      	cmp	r9, r3
 8001206:	d909      	bls.n	800121c <__udivmoddi4+0x60>
 8001208:	18eb      	adds	r3, r5, r3
 800120a:	f107 31ff 	add.w	r1, r7, #4294967295
 800120e:	f080 811c 	bcs.w	800144a <__udivmoddi4+0x28e>
 8001212:	4599      	cmp	r9, r3
 8001214:	f240 8119 	bls.w	800144a <__udivmoddi4+0x28e>
 8001218:	3f02      	subs	r7, #2
 800121a:	442b      	add	r3, r5
 800121c:	eba3 0309 	sub.w	r3, r3, r9
 8001220:	fbb3 f0fe 	udiv	r0, r3, lr
 8001224:	fb0e 3310 	mls	r3, lr, r0, r3
 8001228:	fb00 f108 	mul.w	r1, r0, r8
 800122c:	b2a4      	uxth	r4, r4
 800122e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001232:	42a1      	cmp	r1, r4
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x8e>
 8001236:	192c      	adds	r4, r5, r4
 8001238:	f100 33ff 	add.w	r3, r0, #4294967295
 800123c:	f080 8107 	bcs.w	800144e <__udivmoddi4+0x292>
 8001240:	42a1      	cmp	r1, r4
 8001242:	f240 8104 	bls.w	800144e <__udivmoddi4+0x292>
 8001246:	3802      	subs	r0, #2
 8001248:	442c      	add	r4, r5
 800124a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800124e:	2700      	movs	r7, #0
 8001250:	1a64      	subs	r4, r4, r1
 8001252:	b11e      	cbz	r6, 800125c <__udivmoddi4+0xa0>
 8001254:	2300      	movs	r3, #0
 8001256:	40d4      	lsrs	r4, r2
 8001258:	e9c6 4300 	strd	r4, r3, [r6]
 800125c:	4639      	mov	r1, r7
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	428b      	cmp	r3, r1
 8001264:	d909      	bls.n	800127a <__udivmoddi4+0xbe>
 8001266:	2e00      	cmp	r6, #0
 8001268:	f000 80ec 	beq.w	8001444 <__udivmoddi4+0x288>
 800126c:	2700      	movs	r7, #0
 800126e:	e9c6 0100 	strd	r0, r1, [r6]
 8001272:	4638      	mov	r0, r7
 8001274:	4639      	mov	r1, r7
 8001276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127a:	fab3 f783 	clz	r7, r3
 800127e:	2f00      	cmp	r7, #0
 8001280:	d148      	bne.n	8001314 <__udivmoddi4+0x158>
 8001282:	428b      	cmp	r3, r1
 8001284:	d302      	bcc.n	800128c <__udivmoddi4+0xd0>
 8001286:	4282      	cmp	r2, r0
 8001288:	f200 80fb 	bhi.w	8001482 <__udivmoddi4+0x2c6>
 800128c:	1a84      	subs	r4, r0, r2
 800128e:	eb61 0303 	sbc.w	r3, r1, r3
 8001292:	2001      	movs	r0, #1
 8001294:	469c      	mov	ip, r3
 8001296:	2e00      	cmp	r6, #0
 8001298:	d0e0      	beq.n	800125c <__udivmoddi4+0xa0>
 800129a:	e9c6 4c00 	strd	r4, ip, [r6]
 800129e:	e7dd      	b.n	800125c <__udivmoddi4+0xa0>
 80012a0:	b902      	cbnz	r2, 80012a4 <__udivmoddi4+0xe8>
 80012a2:	deff      	udf	#255	; 0xff
 80012a4:	fab2 f282 	clz	r2, r2
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	f040 808f 	bne.w	80013cc <__udivmoddi4+0x210>
 80012ae:	2701      	movs	r7, #1
 80012b0:	1b49      	subs	r1, r1, r5
 80012b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b6:	fa1f f985 	uxth.w	r9, r5
 80012ba:	fbb1 fef8 	udiv	lr, r1, r8
 80012be:	fb08 111e 	mls	r1, r8, lr, r1
 80012c2:	fb09 f00e 	mul.w	r0, r9, lr
 80012c6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012ca:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d907      	bls.n	80012e2 <__udivmoddi4+0x126>
 80012d2:	18eb      	adds	r3, r5, r3
 80012d4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012d8:	d202      	bcs.n	80012e0 <__udivmoddi4+0x124>
 80012da:	4298      	cmp	r0, r3
 80012dc:	f200 80cd 	bhi.w	800147a <__udivmoddi4+0x2be>
 80012e0:	468e      	mov	lr, r1
 80012e2:	1a1b      	subs	r3, r3, r0
 80012e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80012e8:	fb08 3310 	mls	r3, r8, r0, r3
 80012ec:	fb09 f900 	mul.w	r9, r9, r0
 80012f0:	b2a4      	uxth	r4, r4
 80012f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f6:	45a1      	cmp	r9, r4
 80012f8:	d907      	bls.n	800130a <__udivmoddi4+0x14e>
 80012fa:	192c      	adds	r4, r5, r4
 80012fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8001300:	d202      	bcs.n	8001308 <__udivmoddi4+0x14c>
 8001302:	45a1      	cmp	r9, r4
 8001304:	f200 80b6 	bhi.w	8001474 <__udivmoddi4+0x2b8>
 8001308:	4618      	mov	r0, r3
 800130a:	eba4 0409 	sub.w	r4, r4, r9
 800130e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001312:	e79e      	b.n	8001252 <__udivmoddi4+0x96>
 8001314:	f1c7 0520 	rsb	r5, r7, #32
 8001318:	40bb      	lsls	r3, r7
 800131a:	fa22 fc05 	lsr.w	ip, r2, r5
 800131e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001322:	fa21 f405 	lsr.w	r4, r1, r5
 8001326:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800132a:	fbb4 f9fe 	udiv	r9, r4, lr
 800132e:	fa1f f88c 	uxth.w	r8, ip
 8001332:	fb0e 4419 	mls	r4, lr, r9, r4
 8001336:	fa20 f305 	lsr.w	r3, r0, r5
 800133a:	40b9      	lsls	r1, r7
 800133c:	fb09 fa08 	mul.w	sl, r9, r8
 8001340:	4319      	orrs	r1, r3
 8001342:	0c0b      	lsrs	r3, r1, #16
 8001344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001348:	45a2      	cmp	sl, r4
 800134a:	fa02 f207 	lsl.w	r2, r2, r7
 800134e:	fa00 f307 	lsl.w	r3, r0, r7
 8001352:	d90b      	bls.n	800136c <__udivmoddi4+0x1b0>
 8001354:	eb1c 0404 	adds.w	r4, ip, r4
 8001358:	f109 30ff 	add.w	r0, r9, #4294967295
 800135c:	f080 8088 	bcs.w	8001470 <__udivmoddi4+0x2b4>
 8001360:	45a2      	cmp	sl, r4
 8001362:	f240 8085 	bls.w	8001470 <__udivmoddi4+0x2b4>
 8001366:	f1a9 0902 	sub.w	r9, r9, #2
 800136a:	4464      	add	r4, ip
 800136c:	eba4 040a 	sub.w	r4, r4, sl
 8001370:	fbb4 f0fe 	udiv	r0, r4, lr
 8001374:	fb0e 4410 	mls	r4, lr, r0, r4
 8001378:	fb00 fa08 	mul.w	sl, r0, r8
 800137c:	b289      	uxth	r1, r1
 800137e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001382:	45a2      	cmp	sl, r4
 8001384:	d908      	bls.n	8001398 <__udivmoddi4+0x1dc>
 8001386:	eb1c 0404 	adds.w	r4, ip, r4
 800138a:	f100 31ff 	add.w	r1, r0, #4294967295
 800138e:	d26b      	bcs.n	8001468 <__udivmoddi4+0x2ac>
 8001390:	45a2      	cmp	sl, r4
 8001392:	d969      	bls.n	8001468 <__udivmoddi4+0x2ac>
 8001394:	3802      	subs	r0, #2
 8001396:	4464      	add	r4, ip
 8001398:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800139c:	fba0 8902 	umull	r8, r9, r0, r2
 80013a0:	eba4 040a 	sub.w	r4, r4, sl
 80013a4:	454c      	cmp	r4, r9
 80013a6:	4641      	mov	r1, r8
 80013a8:	46ce      	mov	lr, r9
 80013aa:	d354      	bcc.n	8001456 <__udivmoddi4+0x29a>
 80013ac:	d051      	beq.n	8001452 <__udivmoddi4+0x296>
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	d069      	beq.n	8001486 <__udivmoddi4+0x2ca>
 80013b2:	1a5a      	subs	r2, r3, r1
 80013b4:	eb64 040e 	sbc.w	r4, r4, lr
 80013b8:	fa04 f505 	lsl.w	r5, r4, r5
 80013bc:	fa22 f307 	lsr.w	r3, r2, r7
 80013c0:	40fc      	lsrs	r4, r7
 80013c2:	431d      	orrs	r5, r3
 80013c4:	e9c6 5400 	strd	r5, r4, [r6]
 80013c8:	2700      	movs	r7, #0
 80013ca:	e747      	b.n	800125c <__udivmoddi4+0xa0>
 80013cc:	4095      	lsls	r5, r2
 80013ce:	f1c2 0320 	rsb	r3, r2, #32
 80013d2:	fa21 f003 	lsr.w	r0, r1, r3
 80013d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013da:	fbb0 f7f8 	udiv	r7, r0, r8
 80013de:	fa1f f985 	uxth.w	r9, r5
 80013e2:	fb08 0017 	mls	r0, r8, r7, r0
 80013e6:	fa24 f303 	lsr.w	r3, r4, r3
 80013ea:	4091      	lsls	r1, r2
 80013ec:	fb07 fc09 	mul.w	ip, r7, r9
 80013f0:	430b      	orrs	r3, r1
 80013f2:	0c19      	lsrs	r1, r3, #16
 80013f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f8:	458c      	cmp	ip, r1
 80013fa:	fa04 f402 	lsl.w	r4, r4, r2
 80013fe:	d907      	bls.n	8001410 <__udivmoddi4+0x254>
 8001400:	1869      	adds	r1, r5, r1
 8001402:	f107 30ff 	add.w	r0, r7, #4294967295
 8001406:	d231      	bcs.n	800146c <__udivmoddi4+0x2b0>
 8001408:	458c      	cmp	ip, r1
 800140a:	d92f      	bls.n	800146c <__udivmoddi4+0x2b0>
 800140c:	3f02      	subs	r7, #2
 800140e:	4429      	add	r1, r5
 8001410:	eba1 010c 	sub.w	r1, r1, ip
 8001414:	fbb1 f0f8 	udiv	r0, r1, r8
 8001418:	fb08 1c10 	mls	ip, r8, r0, r1
 800141c:	fb00 fe09 	mul.w	lr, r0, r9
 8001420:	b299      	uxth	r1, r3
 8001422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001426:	458e      	cmp	lr, r1
 8001428:	d907      	bls.n	800143a <__udivmoddi4+0x27e>
 800142a:	1869      	adds	r1, r5, r1
 800142c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001430:	d218      	bcs.n	8001464 <__udivmoddi4+0x2a8>
 8001432:	458e      	cmp	lr, r1
 8001434:	d916      	bls.n	8001464 <__udivmoddi4+0x2a8>
 8001436:	3802      	subs	r0, #2
 8001438:	4429      	add	r1, r5
 800143a:	eba1 010e 	sub.w	r1, r1, lr
 800143e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001442:	e73a      	b.n	80012ba <__udivmoddi4+0xfe>
 8001444:	4637      	mov	r7, r6
 8001446:	4630      	mov	r0, r6
 8001448:	e708      	b.n	800125c <__udivmoddi4+0xa0>
 800144a:	460f      	mov	r7, r1
 800144c:	e6e6      	b.n	800121c <__udivmoddi4+0x60>
 800144e:	4618      	mov	r0, r3
 8001450:	e6fb      	b.n	800124a <__udivmoddi4+0x8e>
 8001452:	4543      	cmp	r3, r8
 8001454:	d2ab      	bcs.n	80013ae <__udivmoddi4+0x1f2>
 8001456:	ebb8 0102 	subs.w	r1, r8, r2
 800145a:	eb69 020c 	sbc.w	r2, r9, ip
 800145e:	3801      	subs	r0, #1
 8001460:	4696      	mov	lr, r2
 8001462:	e7a4      	b.n	80013ae <__udivmoddi4+0x1f2>
 8001464:	4618      	mov	r0, r3
 8001466:	e7e8      	b.n	800143a <__udivmoddi4+0x27e>
 8001468:	4608      	mov	r0, r1
 800146a:	e795      	b.n	8001398 <__udivmoddi4+0x1dc>
 800146c:	4607      	mov	r7, r0
 800146e:	e7cf      	b.n	8001410 <__udivmoddi4+0x254>
 8001470:	4681      	mov	r9, r0
 8001472:	e77b      	b.n	800136c <__udivmoddi4+0x1b0>
 8001474:	3802      	subs	r0, #2
 8001476:	442c      	add	r4, r5
 8001478:	e747      	b.n	800130a <__udivmoddi4+0x14e>
 800147a:	f1ae 0e02 	sub.w	lr, lr, #2
 800147e:	442b      	add	r3, r5
 8001480:	e72f      	b.n	80012e2 <__udivmoddi4+0x126>
 8001482:	4638      	mov	r0, r7
 8001484:	e707      	b.n	8001296 <__udivmoddi4+0xda>
 8001486:	4637      	mov	r7, r6
 8001488:	e6e8      	b.n	800125c <__udivmoddi4+0xa0>
 800148a:	bf00      	nop

0800148c <__aeabi_idiv0>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001498:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800149c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80014b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014b8:	e000      	b.n	80014bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80014ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f9      	beq.n	80014ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*============SWO============*/
int _write(int file, uint8_t *ptr, int len) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e009      	b.n	8001502 <_write+0x26>
		ITM_SendChar(*ptr++);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ffca 	bl	8001490 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf1      	blt.n	80014ee <_write+0x12>
	}
	return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_ADCEx_InjectedConvCpltCallback>:
/*============SWO============*/

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

	adcValue = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1); // Значения АЦП с ноги A0
 800151c:	2101      	movs	r1, #1
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f001 fdaa 	bl	8003078 <HAL_ADCEx_InjectedGetValue>
 8001524:	4602      	mov	r2, r0
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_ADCEx_InjectedConvCpltCallback+0x34>)
 8001528:	601a      	str	r2, [r3, #0]
	adcValueVref = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2); // Значения АЦП с канала Vrefint
 800152a:	2102      	movs	r1, #2
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f001 fda3 	bl	8003078 <HAL_ADCEx_InjectedGetValue>
 8001532:	4602      	mov	r2, r0
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_ADCEx_InjectedConvCpltCallback+0x38>)
 8001536:	601a      	str	r2, [r3, #0]

	get_value_flag = 1; // Флаг, сигнализирующий о поступлении данных с АЦП
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200001fc 	.word	0x200001fc
 800154c:	20000200 	.word	0x20000200
 8001550:	20000204 	.word	0x20000204

08001554 <median>:


/*================Медиана на 3 значения со своим буфером==============*/
float median(float newVal) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	static float buf[3];
	static uint8_t count = 0;
	buf[count] = newVal;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <median+0xcc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	4a30      	ldr	r2, [pc, #192]	; (8001624 <median+0xd0>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (++count >= 3)
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <median+0xcc>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <median+0xcc>)
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <median+0xcc>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d902      	bls.n	8001584 <median+0x30>
		count = 0;
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <median+0xcc>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]

	float a = buf[0];
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <median+0xd0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	613b      	str	r3, [r7, #16]
	float b = buf[1];
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <median+0xd0>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	60fb      	str	r3, [r7, #12]
	float c = buf[2];
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <median+0xd0>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	60bb      	str	r3, [r7, #8]

	float middle;
	if ((a <= b) && (a <= c)) {
 8001596:	68f9      	ldr	r1, [r7, #12]
 8001598:	6938      	ldr	r0, [r7, #16]
 800159a:	f7ff fdb3 	bl	8001104 <__aeabi_fcmple>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d012      	beq.n	80015ca <median+0x76>
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6938      	ldr	r0, [r7, #16]
 80015a8:	f7ff fdac 	bl	8001104 <__aeabi_fcmple>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <median+0x76>
		middle = (b <= c) ? b : c;
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f7ff fda5 	bl	8001104 <__aeabi_fcmple>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <median+0x70>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	e000      	b.n	80015c6 <median+0x72>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e024      	b.n	8001614 <median+0xc0>
	} else {
		if ((b <= a) && (b <= c)) {
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fd99 	bl	8001104 <__aeabi_fcmple>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d012      	beq.n	80015fe <median+0xaa>
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7ff fd92 	bl	8001104 <__aeabi_fcmple>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <median+0xaa>
			middle = (a <= c) ? a : c;
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	6938      	ldr	r0, [r7, #16]
 80015ea:	f7ff fd8b 	bl	8001104 <__aeabi_fcmple>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <median+0xa4>
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	e000      	b.n	80015fa <median+0xa6>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <median+0xc0>
		} else {
			middle = (a <= b) ? a : b;
 80015fe:	68f9      	ldr	r1, [r7, #12]
 8001600:	6938      	ldr	r0, [r7, #16]
 8001602:	f7ff fd7f 	bl	8001104 <__aeabi_fcmple>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <median+0xbc>
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	e000      	b.n	8001612 <median+0xbe>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	617b      	str	r3, [r7, #20]
		}
	}
	return middle;
 8001614:	697b      	ldr	r3, [r7, #20]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003d8 	.word	0x200003d8
 8001624:	200003dc 	.word	0x200003dc

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162e:	f001 f832 	bl	8002696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001632:	f000 f90d 	bl	8001850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001636:	f000 fa19 	bl	8001a6c <MX_GPIO_Init>
  MX_ADC_Init();
 800163a:	f000 f959 	bl	80018f0 <MX_ADC_Init>
  MX_SPI1_Init();
 800163e:	f000 f9df 	bl	8001a00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8001642:	2064      	movs	r0, #100	; 0x64
 8001644:	f001 f896 	bl	8002774 <HAL_Delay>
	max7219_Init();
 8001648:	f000 fad8 	bl	8001bfc <max7219_Init>
	HAL_ADCEx_InjectedStart_IT(&hadc);
 800164c:	486c      	ldr	r0, [pc, #432]	; (8001800 <main+0x1d8>)
 800164e:	f001 fcbb 	bl	8002fc8 <HAL_ADCEx_InjectedStart_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (get_value_flag) {
 8001652:	4b6c      	ldr	r3, [pc, #432]	; (8001804 <main+0x1dc>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d061      	beq.n	8001720 <main+0xf8>
			get_value_flag = 0;
 800165c:	4b69      	ldr	r3, [pc, #420]	; (8001804 <main+0x1dc>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]

			float mkVcc = 1.224f / adcValueVref; // напряжение питания МК где берется из даташита 1.2 опорное напряжение для данного МК
 8001662:	4b69      	ldr	r3, [pc, #420]	; (8001808 <main+0x1e0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fb4c 	bl	8000d04 <__aeabi_ui2f>
 800166c:	4603      	mov	r3, r0
 800166e:	4619      	mov	r1, r3
 8001670:	4866      	ldr	r0, [pc, #408]	; (800180c <main+0x1e4>)
 8001672:	f7ff fc53 	bl	8000f1c <__aeabi_fdiv>
 8001676:	4603      	mov	r3, r0
 8001678:	607b      	str	r3, [r7, #4]
			volt = adcValue * mkVcc; //напряжение на входе АЦП в вольтах.
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <main+0x1e8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fb40 	bl	8000d04 <__aeabi_ui2f>
 8001684:	4603      	mov	r3, r0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fb93 	bl	8000db4 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b60      	ldr	r3, [pc, #384]	; (8001814 <main+0x1ec>)
 8001694:	601a      	str	r2, [r3, #0]
			HAL_ADCEx_InjectedStart_IT(&hadc);
 8001696:	485a      	ldr	r0, [pc, #360]	; (8001800 <main+0x1d8>)
 8001698:	f001 fc96 	bl	8002fc8 <HAL_ADCEx_InjectedStart_IT>

			/*================Фильтрация значений. Среднее арифметическое значение==============*/
			if (index_buffer >= 0 && filtration_step == 0) {
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <main+0x1f0>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d13d      	bne.n	8001720 <main+0xf8>
				filter[index_buffer] = volt;
 80016a4:	4b5d      	ldr	r3, [pc, #372]	; (800181c <main+0x1f4>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <main+0x1ec>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a5c      	ldr	r2, [pc, #368]	; (8001820 <main+0x1f8>)
 80016b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

				if (index_buffer == 99) {
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <main+0x1f4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b63      	cmp	r3, #99	; 0x63
 80016ba:	d12b      	bne.n	8001714 <main+0xec>
					for (int i = 0; i <= 99; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e010      	b.n	80016e4 <main+0xbc>
						summ = summ + filter[i];
 80016c2:	4a57      	ldr	r2, [pc, #348]	; (8001820 <main+0x1f8>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016ca:	4b56      	ldr	r3, [pc, #344]	; (8001824 <main+0x1fc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f7ff fa67 	bl	8000ba4 <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b52      	ldr	r3, [pc, #328]	; (8001824 <main+0x1fc>)
 80016dc:	601a      	str	r2, [r3, #0]
					for (int i = 0; i <= 99; i++) {
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3301      	adds	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b63      	cmp	r3, #99	; 0x63
 80016e8:	ddeb      	ble.n	80016c2 <main+0x9a>
					}
					filtered = summ / 100;
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <main+0x1fc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	494e      	ldr	r1, [pc, #312]	; (8001828 <main+0x200>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc13 	bl	8000f1c <__aeabi_fdiv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b4c      	ldr	r3, [pc, #304]	; (800182c <main+0x204>)
 80016fc:	601a      	str	r2, [r3, #0]
					filtration_step = 1;
 80016fe:	4b46      	ldr	r3, [pc, #280]	; (8001818 <main+0x1f0>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
					summ = 0;
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <main+0x1fc>)
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
					index_buffer = 0;
 800170c:	4b43      	ldr	r3, [pc, #268]	; (800181c <main+0x1f4>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e005      	b.n	8001720 <main+0xf8>
				} else {
					index_buffer++;
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <main+0x1f4>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <main+0x1f4>)
 800171e:	701a      	strb	r2, [r3, #0]
			}
			/*================Фильтрация значений. Среднее арифметическое значение==============*/

		}

		if (filtration_step == 1) {
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <main+0x1f0>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d194      	bne.n	8001652 <main+0x2a>
			if (HAL_GetTick() - T >= 25) {
 8001728:	f001 f81a 	bl	8002760 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	4b40      	ldr	r3, [pc, #256]	; (8001830 <main+0x208>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b18      	cmp	r3, #24
 8001736:	d98c      	bls.n	8001652 <main+0x2a>
				T = HAL_GetTick();
 8001738:	f001 f812 	bl	8002760 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <main+0x208>)
 8001740:	601a      	str	r2, [r3, #0]
		        /*================Фильтрация значений. Медиана на 3 значения + среднее арифметическое значение==============*/
				if (index_buffer2 >= 0) {
					filter_2[index_buffer2] = median(filtered);
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <main+0x204>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <main+0x20c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461c      	mov	r4, r3
 800174c:	4610      	mov	r0, r2
 800174e:	f7ff ff01 	bl	8001554 <median>
 8001752:	4602      	mov	r2, r0
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <main+0x210>)
 8001756:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					if (index_buffer2 == 9) {
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <main+0x20c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b09      	cmp	r3, #9
 8001760:	d128      	bne.n	80017b4 <main+0x18c>
						for (int i = 0; i <= 9; i++) {
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	e010      	b.n	800178a <main+0x162>
							summ2 = summ2 + filter_2[i];
 8001768:	4a33      	ldr	r2, [pc, #204]	; (8001838 <main+0x210>)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <main+0x214>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f7ff fa14 	bl	8000ba4 <__addsf3>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	4b2e      	ldr	r3, [pc, #184]	; (800183c <main+0x214>)
 8001782:	601a      	str	r2, [r3, #0]
						for (int i = 0; i <= 9; i++) {
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3301      	adds	r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b09      	cmp	r3, #9
 800178e:	ddeb      	ble.n	8001768 <main+0x140>
						}
						filtered2 = summ2 / 10;
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <main+0x214>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	492a      	ldr	r1, [pc, #168]	; (8001840 <main+0x218>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fbc0 	bl	8000f1c <__aeabi_fdiv>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <main+0x21c>)
 80017a2:	601a      	str	r2, [r3, #0]
						summ2 = 0;
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <main+0x214>)
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
						index_buffer2 = 0;
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <main+0x20c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e005      	b.n	80017c0 <main+0x198>
					} else {
						index_buffer2++;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <main+0x20c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <main+0x20c>)
 80017be:	701a      	strb	r2, [r3, #0]
					}
				}
				/*================Фильтрация значений. Медиана на 3 значения + среднее арифметическое значение==============*/

				//printf("adc_filtre3 = %.3f\r\n", volt - 0.002f);
				printf("adc_filtre3 = %.3f\r\n", filtered2 - 0.002f);
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <main+0x21c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4920      	ldr	r1, [pc, #128]	; (8001848 <main+0x220>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f9ea 	bl	8000ba0 <__aeabi_fsub>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe42 	bl	8000458 <__aeabi_f2d>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	481b      	ldr	r0, [pc, #108]	; (800184c <main+0x224>)
 80017de:	f004 f87b 	bl	80058d8 <iprintf>
				max7219_Send_float(filtered2 - 0.002f);
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <main+0x21c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4918      	ldr	r1, [pc, #96]	; (8001848 <main+0x220>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff f9d9 	bl	8000ba0 <__aeabi_fsub>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fb27 	bl	8001e44 <max7219_Send_float>
				filtration_step = 0;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <main+0x1f0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
		if (get_value_flag) {
 80017fc:	e729      	b.n	8001652 <main+0x2a>
 80017fe:	bf00      	nop
 8001800:	20000458 	.word	0x20000458
 8001804:	20000204 	.word	0x20000204
 8001808:	20000200 	.word	0x20000200
 800180c:	3f9cac08 	.word	0x3f9cac08
 8001810:	200001fc 	.word	0x200001fc
 8001814:	20000208 	.word	0x20000208
 8001818:	200001f8 	.word	0x200001f8
 800181c:	200003cd 	.word	0x200003cd
 8001820:	20000214 	.word	0x20000214
 8001824:	200003d0 	.word	0x200003d0
 8001828:	42c80000 	.word	0x42c80000
 800182c:	2000020c 	.word	0x2000020c
 8001830:	200003fc 	.word	0x200003fc
 8001834:	200003cc 	.word	0x200003cc
 8001838:	200003a4 	.word	0x200003a4
 800183c:	200003d4 	.word	0x200003d4
 8001840:	41200000 	.word	0x41200000
 8001844:	20000210 	.word	0x20000210
 8001848:	3b03126f 	.word	0x3b03126f
 800184c:	08009050 	.word	0x08009050

08001850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b092      	sub	sp, #72	; 0x48
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	2234      	movs	r2, #52	; 0x34
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fa02 	bl	8004c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <SystemClock_Config+0x9c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <SystemClock_Config+0x9c>)
 800187c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001880:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001882:	2303      	movs	r3, #3
 8001884:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800188a:	2301      	movs	r3, #1
 800188c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188e:	2310      	movs	r3, #16
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001892:	2302      	movs	r3, #2
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800189c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80018a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80018a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 f89d 	bl	80039ec <HAL_RCC_OscConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80018b8:	f000 f922 	bl	8001b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018bc:	230f      	movs	r3, #15
 80018be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c0:	2303      	movs	r3, #3
 80018c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018d0:	463b      	mov	r3, r7
 80018d2:	2101      	movs	r1, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fbb9 	bl	800404c <HAL_RCC_ClockConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018e0:	f000 f90e 	bl	8001b00 <Error_Handler>
  }
}
 80018e4:	bf00      	nop
 80018e6:	3748      	adds	r7, #72	; 0x48
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40007000 	.word	0x40007000

080018f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2220      	movs	r2, #32
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f003 f9ad 	bl	8004c68 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <MX_ADC_Init+0x108>)
 8001910:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <MX_ADC_Init+0x10c>)
 8001912:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001914:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <MX_ADC_Init+0x108>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <MX_ADC_Init+0x108>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001920:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <MX_ADC_Init+0x108>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <MX_ADC_Init+0x108>)
 8001928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800192c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800192e:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <MX_ADC_Init+0x108>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MX_ADC_Init+0x108>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <MX_ADC_Init+0x108>)
 800193c:	2200      	movs	r2, #0
 800193e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_ADC_Init+0x108>)
 8001942:	2200      	movs	r2, #0
 8001944:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <MX_ADC_Init+0x108>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <MX_ADC_Init+0x108>)
 8001950:	2201      	movs	r2, #1
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <MX_ADC_Init+0x108>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <MX_ADC_Init+0x108>)
 800195e:	2210      	movs	r2, #16
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <MX_ADC_Init+0x108>)
 8001964:	2200      	movs	r2, #0
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <MX_ADC_Init+0x108>)
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001970:	4821      	ldr	r0, [pc, #132]	; (80019f8 <MX_ADC_Init+0x108>)
 8001972:	f000 ff21 	bl	80027b8 <HAL_ADC_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 800197c:	f000 f8c0 	bl	8001b00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001980:	2311      	movs	r3, #17
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001984:	2301      	movs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <MX_ADC_Init+0x108>)
 8001994:	f001 f972 	bl	8002c7c <HAL_ADC_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_ADC_Init+0xb2>
  {
    Error_Handler();
 800199e:	f000 f8af 	bl	8001b00 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_384CYCLES;
 80019aa:	2307      	movs	r3, #7
 80019ac:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffset = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	617b      	str	r3, [r7, #20]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80019b6:	2310      	movs	r3, #16
 80019b8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc, &sConfigInjected) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <MX_ADC_Init+0x108>)
 80019c4:	f001 fb82 	bl	80030cc <HAL_ADCEx_InjectedConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_ADC_Init+0xe2>
  {
    Error_Handler();
 80019ce:	f000 f897 	bl	8001b00 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 80019d2:	2311      	movs	r3, #17
 80019d4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80019d6:	2302      	movs	r3, #2
 80019d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc, &sConfigInjected) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <MX_ADC_Init+0x108>)
 80019e0:	f001 fb74 	bl	80030cc <HAL_ADCEx_InjectedConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_ADC_Init+0xfe>
  {
    Error_Handler();
 80019ea:	f000 f889 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3730      	adds	r7, #48	; 0x30
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000458 	.word	0x20000458
 80019fc:	40012400 	.word	0x40012400

08001a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a34:	2208      	movs	r2, #8
 8001a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a52:	f002 fd59 	bl	8004508 <HAL_SPI_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a5c:	f000 f850 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000400 	.word	0x20000400
 8001a68:	40013000 	.word	0x40013000

08001a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_GPIO_Init+0x8c>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2102      	movs	r1, #2
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <MX_GPIO_Init+0x90>)
 8001ad0:	f001 ff74 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_GPIO_Init+0x90>)
 8001aec:	f001 fde8 	bl	80036c0 <HAL_GPIO_Init>

}
 8001af0:	bf00      	nop
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b06:	e7fe      	b.n	8001b06 <Error_Handler+0x6>

08001b08 <max7219_Transmit>:
/*----------Общение с max7219 по spi-----------------*/
///Общение с max7219 по spi(выбор регистра и отправка данных).
///(См. Datasheet MAX7219/MAX7221. Cтр.7, табл. 2).
/// \param adress - адрес регистра, в который производится отправка данных;
/// \param data - данные.
void max7219_Transmit(uint8_t adress, uint8_t data) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460a      	mov	r2, r1
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4613      	mov	r3, r2
 8001b16:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[1] = { 0 };
 8001b18:	2300      	movs	r3, #0
 8001b1a:	733b      	strb	r3, [r7, #12]
	cs_set();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <max7219_Transmit+0x50>)
 8001b1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b22:	619a      	str	r2, [r3, #24]
	tx_buffer[0] = adress;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1);
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <max7219_Transmit+0x54>)
 8001b32:	f002 fd65 	bl	8004600 <HAL_SPI_Transmit_IT>
	tx_buffer[0] = data;
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <max7219_Transmit+0x54>)
 8001b44:	f002 fd5c 	bl	8004600 <HAL_SPI_Transmit_IT>
	cs_reset();
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <max7219_Transmit+0x50>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	20000400 	.word	0x20000400

08001b60 <max7219_Shutdown>:
/*----------Общение с max7219 по spi-----------------*/

/*--------------------Режим сна----------------------*/
///Режим сна.(См. Datasheet MAX7219/MAX7221. Стр.7, табл. 3).
/// \param data - данные. 0 - Режим сна. 1 - Нормальный режим.
void max7219_Shutdown(bool data){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0C, data);
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	200c      	movs	r0, #12
 8001b70:	f7ff ffca 	bl	8001b08 <max7219_Transmit>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <max7219_Display_Test>:
/*--------------------Режим сна----------------------*/

/*-------------------Тест дисплея--------------------*/
///Тест дисплея.(См. Datasheet MAX7219/MAX7221. Стр.10, табл. 10).
/// \param data - данные. 0 - Нормальный режим. 1 - Тест дисплея.
void max7219_Display_Test(bool data){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0F, data);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f7ff ffbc 	bl	8001b08 <max7219_Transmit>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <max7219_Display_Clean>:
/*-------------------Тест дисплея--------------------*/

/*-----------------Очистка дисплея-------------------*/
///Очистка дисплея. (См. мой урок https://youtu.be/BonEEaQX8vg).
void max7219_Display_Clean(void){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	max7219_Transmit(0x01, 0x00);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f7ff ffb2 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(0x02, 0x00);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f7ff ffae 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(0x03, 0x00);
 8001bac:	2100      	movs	r1, #0
 8001bae:	2003      	movs	r0, #3
 8001bb0:	f7ff ffaa 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(0x04, 0x00);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2004      	movs	r0, #4
 8001bb8:	f7ff ffa6 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(0x05, 0x00);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2005      	movs	r0, #5
 8001bc0:	f7ff ffa2 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(0x06, 0x00);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2006      	movs	r0, #6
 8001bc8:	f7ff ff9e 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(0x07, 0x00);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2007      	movs	r0, #7
 8001bd0:	f7ff ff9a 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(0x08, 0x00);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2008      	movs	r0, #8
 8001bd8:	f7ff ff96 	bl	8001b08 <max7219_Transmit>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <max7219_Intensity>:
/*-----------------Очистка дисплея-------------------*/

/*-----------------Яркость дисплея-------------------*/
///Яркость дисплея.(См. Datasheet MAX7219/MAX7221. Стр.9, табл. 7).
/// \param data - данные. Значения от 0x00 до 0x0F.
void max7219_Intensity(uint8_t data){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
max7219_Transmit(0x0A, data);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	4619      	mov	r1, r3
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f7ff ff8a 	bl	8001b08 <max7219_Transmit>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <max7219_Init>:
/*-----------------Яркость дисплея-------------------*/

/*--------------Инициализация дисплея----------------*/
///Инициализация дисплея.
void max7219_Init(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	max7219_Transmit(0x09, 0x00); //Работа без режима декодирование
 8001c00:	2100      	movs	r1, #0
 8001c02:	2009      	movs	r0, #9
 8001c04:	f7ff ff80 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(0x0B, 0x07); //Количество используемых разрядов
 8001c08:	2107      	movs	r1, #7
 8001c0a:	200b      	movs	r0, #11
 8001c0c:	f7ff ff7c 	bl	8001b08 <max7219_Transmit>
	max7219_Intensity(0x0F); //Интенсивность свечения на максимум
 8001c10:	200f      	movs	r0, #15
 8001c12:	f7ff ffe5 	bl	8001be0 <max7219_Intensity>
	max7219_Shutdown(1); //Вывести дисплей из сна в нормальный режим работы
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff ffa2 	bl	8001b60 <max7219_Shutdown>
	max7219_Display_Test(1); //Проверка дисплея
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff ffad 	bl	8001b7c <max7219_Display_Test>
	HAL_Delay(2000); //Время на визуальный осмотр
 8001c22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c26:	f000 fda5 	bl	8002774 <HAL_Delay>
	max7219_Display_Test(0); //Перевод дисплея в нормальный режим работы
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff ffa6 	bl	8001b7c <max7219_Display_Test>
	max7219_Display_Clean(); //Очистка дисплея
 8001c30:	f7ff ffb2 	bl	8001b98 <max7219_Display_Clean>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <max7219_send_symbol>:
/*--------------Инициализация дисплея----------------*/

/*-----------Отправка символов на дисплей------------*/
///Отправка символов на дисплей. Функция вспомогательная.
/// \param *tx_buffer - Массив с данными, которые будут выводиться на дисплей.
void max7219_send_symbol(uint8_t *tx_buffer) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	max7219_Transmit(8, tx_buffer[0]);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	2008      	movs	r0, #8
 8001c48:	f7ff ff5e 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(7, tx_buffer[1]);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	2007      	movs	r0, #7
 8001c56:	f7ff ff57 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(6, tx_buffer[2]);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	2006      	movs	r0, #6
 8001c64:	f7ff ff50 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(5, tx_buffer[3]);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3303      	adds	r3, #3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	2005      	movs	r0, #5
 8001c72:	f7ff ff49 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(4, tx_buffer[4]);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2004      	movs	r0, #4
 8001c80:	f7ff ff42 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(3, tx_buffer[5]);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3305      	adds	r3, #5
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f7ff ff3b 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(2, tx_buffer[6]);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3306      	adds	r3, #6
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f7ff ff34 	bl	8001b08 <max7219_Transmit>
	max7219_Transmit(1, tx_buffer[7]);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3307      	adds	r3, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff ff2d 	bl	8001b08 <max7219_Transmit>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <max7219_num>:
/*-----------Отправка символов на дисплей------------*/

/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/
///Подготовка данных к выводу на дисплей. Цифры, минус, пробел. Функция вспомогательная.
void max7219_num(uint8_t rg, uint32_t value) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d038      	beq.n	8001d3c <max7219_num+0x84>
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d80d      	bhi.n	8001cea <max7219_num+0x32>
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d025      	beq.n	8001d1e <max7219_num+0x66>
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d804      	bhi.n	8001ce0 <max7219_num+0x28>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d017      	beq.n	8001d0a <max7219_num+0x52>
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d01a      	beq.n	8001d14 <max7219_num+0x5c>
		break;
	case 255:
		symbol[rg] = _255;
		break;
	}
}
 8001cde:	e050      	b.n	8001d82 <max7219_num+0xca>
	switch (value) {
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d021      	beq.n	8001d28 <max7219_num+0x70>
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d024      	beq.n	8001d32 <max7219_num+0x7a>
}
 8001ce8:	e04b      	b.n	8001d82 <max7219_num+0xca>
	switch (value) {
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d035      	beq.n	8001d5a <max7219_num+0xa2>
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d804      	bhi.n	8001cfc <max7219_num+0x44>
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d027      	beq.n	8001d46 <max7219_num+0x8e>
 8001cf6:	2b07      	cmp	r3, #7
 8001cf8:	d02a      	beq.n	8001d50 <max7219_num+0x98>
}
 8001cfa:	e042      	b.n	8001d82 <max7219_num+0xca>
	switch (value) {
 8001cfc:	2bfe      	cmp	r3, #254	; 0xfe
 8001cfe:	d036      	beq.n	8001d6e <max7219_num+0xb6>
 8001d00:	2bff      	cmp	r3, #255	; 0xff
 8001d02:	d039      	beq.n	8001d78 <max7219_num+0xc0>
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d02d      	beq.n	8001d64 <max7219_num+0xac>
}
 8001d08:	e03b      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _0;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <max7219_num+0xd4>)
 8001d0e:	217e      	movs	r1, #126	; 0x7e
 8001d10:	54d1      	strb	r1, [r2, r3]
		break;
 8001d12:	e036      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _1;
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <max7219_num+0xd4>)
 8001d18:	2130      	movs	r1, #48	; 0x30
 8001d1a:	54d1      	strb	r1, [r2, r3]
		break;
 8001d1c:	e031      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _2;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <max7219_num+0xd4>)
 8001d22:	216d      	movs	r1, #109	; 0x6d
 8001d24:	54d1      	strb	r1, [r2, r3]
		break;
 8001d26:	e02c      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _3;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <max7219_num+0xd4>)
 8001d2c:	2179      	movs	r1, #121	; 0x79
 8001d2e:	54d1      	strb	r1, [r2, r3]
		break;
 8001d30:	e027      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _4;
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <max7219_num+0xd4>)
 8001d36:	2133      	movs	r1, #51	; 0x33
 8001d38:	54d1      	strb	r1, [r2, r3]
		break;
 8001d3a:	e022      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _5;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <max7219_num+0xd4>)
 8001d40:	215b      	movs	r1, #91	; 0x5b
 8001d42:	54d1      	strb	r1, [r2, r3]
		break;
 8001d44:	e01d      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _6;
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <max7219_num+0xd4>)
 8001d4a:	215f      	movs	r1, #95	; 0x5f
 8001d4c:	54d1      	strb	r1, [r2, r3]
		break;
 8001d4e:	e018      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _7;
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <max7219_num+0xd4>)
 8001d54:	2170      	movs	r1, #112	; 0x70
 8001d56:	54d1      	strb	r1, [r2, r3]
		break;
 8001d58:	e013      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _8;
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <max7219_num+0xd4>)
 8001d5e:	217f      	movs	r1, #127	; 0x7f
 8001d60:	54d1      	strb	r1, [r2, r3]
		break;
 8001d62:	e00e      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _9;
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <max7219_num+0xd4>)
 8001d68:	217b      	movs	r1, #123	; 0x7b
 8001d6a:	54d1      	strb	r1, [r2, r3]
		break;
 8001d6c:	e009      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _254;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <max7219_num+0xd4>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	54d1      	strb	r1, [r2, r3]
		break;
 8001d76:	e004      	b.n	8001d82 <max7219_num+0xca>
		symbol[rg] = _255;
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <max7219_num+0xd4>)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	54d1      	strb	r1, [r2, r3]
		break;
 8001d80:	bf00      	nop
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	200003e8 	.word	0x200003e8

08001d90 <max7219_num_point>:
/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/

/*---Подготовка данных к выводу на дисплей. Цифры с точкой---*/
///Подготовка данных к выводу на дисплей. Цифры с точкой. Функция вспомогательная.
void max7219_num_point(uint8_t rg, uint32_t value) {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b09      	cmp	r3, #9
 8001da0:	d848      	bhi.n	8001e34 <max7219_num_point+0xa4>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <max7219_num_point+0x18>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001dd1 	.word	0x08001dd1
 8001dac:	08001ddb 	.word	0x08001ddb
 8001db0:	08001de5 	.word	0x08001de5
 8001db4:	08001def 	.word	0x08001def
 8001db8:	08001df9 	.word	0x08001df9
 8001dbc:	08001e03 	.word	0x08001e03
 8001dc0:	08001e0d 	.word	0x08001e0d
 8001dc4:	08001e17 	.word	0x08001e17
 8001dc8:	08001e21 	.word	0x08001e21
 8001dcc:	08001e2b 	.word	0x08001e2b
	case 0:
		symbol[rg] = _0_point;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <max7219_num_point+0xb0>)
 8001dd4:	21fe      	movs	r1, #254	; 0xfe
 8001dd6:	54d1      	strb	r1, [r2, r3]
		break;
 8001dd8:	e02c      	b.n	8001e34 <max7219_num_point+0xa4>
	case 1:
		symbol[rg] = _1_point;
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <max7219_num_point+0xb0>)
 8001dde:	21b0      	movs	r1, #176	; 0xb0
 8001de0:	54d1      	strb	r1, [r2, r3]
		break;
 8001de2:	e027      	b.n	8001e34 <max7219_num_point+0xa4>
	case 2:
		symbol[rg] = _2_point;
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <max7219_num_point+0xb0>)
 8001de8:	21ed      	movs	r1, #237	; 0xed
 8001dea:	54d1      	strb	r1, [r2, r3]
		break;
 8001dec:	e022      	b.n	8001e34 <max7219_num_point+0xa4>
	case 3:
		symbol[rg] = _3_point;
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <max7219_num_point+0xb0>)
 8001df2:	21f9      	movs	r1, #249	; 0xf9
 8001df4:	54d1      	strb	r1, [r2, r3]
		break;
 8001df6:	e01d      	b.n	8001e34 <max7219_num_point+0xa4>
	case 4:
		symbol[rg] = _4_point;
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <max7219_num_point+0xb0>)
 8001dfc:	21b3      	movs	r1, #179	; 0xb3
 8001dfe:	54d1      	strb	r1, [r2, r3]
		break;
 8001e00:	e018      	b.n	8001e34 <max7219_num_point+0xa4>
	case 5:
		symbol[rg] = _5_point;
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <max7219_num_point+0xb0>)
 8001e06:	21db      	movs	r1, #219	; 0xdb
 8001e08:	54d1      	strb	r1, [r2, r3]
		break;
 8001e0a:	e013      	b.n	8001e34 <max7219_num_point+0xa4>
	case 6:
		symbol[rg] = _6_point;
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <max7219_num_point+0xb0>)
 8001e10:	21df      	movs	r1, #223	; 0xdf
 8001e12:	54d1      	strb	r1, [r2, r3]
		break;
 8001e14:	e00e      	b.n	8001e34 <max7219_num_point+0xa4>
	case 7:
		symbol[rg] = _7_point;
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <max7219_num_point+0xb0>)
 8001e1a:	21f0      	movs	r1, #240	; 0xf0
 8001e1c:	54d1      	strb	r1, [r2, r3]
		break;
 8001e1e:	e009      	b.n	8001e34 <max7219_num_point+0xa4>
	case 8:
		symbol[rg] = _8_point;
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <max7219_num_point+0xb0>)
 8001e24:	21ff      	movs	r1, #255	; 0xff
 8001e26:	54d1      	strb	r1, [r2, r3]
		break;
 8001e28:	e004      	b.n	8001e34 <max7219_num_point+0xa4>
	case 9:
		symbol[rg] = _9_point;
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <max7219_num_point+0xb0>)
 8001e2e:	21fb      	movs	r1, #251	; 0xfb
 8001e30:	54d1      	strb	r1, [r2, r3]
		break;
 8001e32:	bf00      	nop
	}
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200003e8 	.word	0x200003e8

08001e44 <max7219_Send_float>:
///Отправка чисел с плавающей запятой на дисплей.
///Число должно быть в рамках от -9999.999 до 99999.999.
///В противном случае, на дисплее будет отображено "--------".
///Функция проверяет отправленное число на выход за рамки вывода дисплея, положительное оно или отрицательное,
///далее преобразует отправленное число в BCD код(двоично-десятичный код.) и уже после этого отправляет данные на дисплей.
void max7219_Send_float(float value) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	if (value > 99999.999f || value < -9999.999f) {
 8001e4c:	49b2      	ldr	r1, [pc, #712]	; (8002118 <max7219_Send_float+0x2d4>)
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff f96c 	bl	800112c <__aeabi_fcmpgt>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <max7219_Send_float+0x24>
 8001e5a:	49b0      	ldr	r1, [pc, #704]	; (800211c <max7219_Send_float+0x2d8>)
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff f947 	bl	80010f0 <__aeabi_fcmplt>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d023      	beq.n	8001eb0 <max7219_Send_float+0x6c>
		max7219_num(0, 254);
 8001e68:	21fe      	movs	r1, #254	; 0xfe
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff ff24 	bl	8001cb8 <max7219_num>
		max7219_num(1, 254);
 8001e70:	21fe      	movs	r1, #254	; 0xfe
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff ff20 	bl	8001cb8 <max7219_num>
		max7219_num(2, 254);
 8001e78:	21fe      	movs	r1, #254	; 0xfe
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f7ff ff1c 	bl	8001cb8 <max7219_num>
		max7219_num(3, 254);
 8001e80:	21fe      	movs	r1, #254	; 0xfe
 8001e82:	2003      	movs	r0, #3
 8001e84:	f7ff ff18 	bl	8001cb8 <max7219_num>
		max7219_num(4, 254);
 8001e88:	21fe      	movs	r1, #254	; 0xfe
 8001e8a:	2004      	movs	r0, #4
 8001e8c:	f7ff ff14 	bl	8001cb8 <max7219_num>
		max7219_num(5, 254);
 8001e90:	21fe      	movs	r1, #254	; 0xfe
 8001e92:	2005      	movs	r0, #5
 8001e94:	f7ff ff10 	bl	8001cb8 <max7219_num>
		max7219_num(6, 254);
 8001e98:	21fe      	movs	r1, #254	; 0xfe
 8001e9a:	2006      	movs	r0, #6
 8001e9c:	f7ff ff0c 	bl	8001cb8 <max7219_num>
		max7219_num(7, 254);
 8001ea0:	21fe      	movs	r1, #254	; 0xfe
 8001ea2:	2007      	movs	r0, #7
 8001ea4:	f7ff ff08 	bl	8001cb8 <max7219_num>
		max7219_send_symbol(symbol);
 8001ea8:	489d      	ldr	r0, [pc, #628]	; (8002120 <max7219_Send_float+0x2dc>)
 8001eaa:	f7ff fec5 	bl	8001c38 <max7219_send_symbol>
			max7219_num(7, BCD_Arr[0]);
			max7219_send_symbol(symbol);
		}
	}

}
 8001eae:	e230      	b.n	8002312 <max7219_Send_float+0x4ce>
		int32_t value_conv = value * 1000;
 8001eb0:	499c      	ldr	r1, [pc, #624]	; (8002124 <max7219_Send_float+0x2e0>)
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe ff7e 	bl	8000db4 <__aeabi_fmul>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f940 	bl	8001140 <__aeabi_f2iz>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	61fb      	str	r3, [r7, #28]
		value = value * 1000;
 8001ec4:	4997      	ldr	r1, [pc, #604]	; (8002124 <max7219_Send_float+0x2e0>)
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe ff74 	bl	8000db4 <__aeabi_fmul>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	607b      	str	r3, [r7, #4]
		if (value_conv < 0) {
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da05      	bge.n	8001ee2 <max7219_Send_float+0x9e>
			positive_value = false;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	76fb      	strb	r3, [r7, #27]
			value_conv = value_conv * (-1);
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	425b      	negs	r3, r3
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	e001      	b.n	8001ee6 <max7219_Send_float+0xa2>
			positive_value = true;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	76fb      	strb	r3, [r7, #27]
		uint8_t BCD_Arr[8] = { 0, };
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
		lenght = value_conv;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	617b      	str	r3, [r7, #20]
		while (value_conv >= 10000000) {
 8001ef4:	e007      	b.n	8001f06 <max7219_Send_float+0xc2>
			value_conv -= 10000000;
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	4b8b      	ldr	r3, [pc, #556]	; (8002128 <max7219_Send_float+0x2e4>)
 8001efa:	4413      	add	r3, r2
 8001efc:	61fb      	str	r3, [r7, #28]
			BCD_Arr[7]++;
 8001efe:	7cfb      	ldrb	r3, [r7, #19]
 8001f00:	3301      	adds	r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	74fb      	strb	r3, [r7, #19]
		while (value_conv >= 10000000) {
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4a88      	ldr	r2, [pc, #544]	; (800212c <max7219_Send_float+0x2e8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	dcf3      	bgt.n	8001ef6 <max7219_Send_float+0xb2>
		while (value_conv >= 1000000) {
 8001f0e:	e009      	b.n	8001f24 <max7219_Send_float+0xe0>
			value_conv -= 1000000;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8001f16:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001f1a:	61fb      	str	r3, [r7, #28]
			BCD_Arr[6]++;
 8001f1c:	7cbb      	ldrb	r3, [r7, #18]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	74bb      	strb	r3, [r7, #18]
		while (value_conv >= 1000000) {
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	4a82      	ldr	r2, [pc, #520]	; (8002130 <max7219_Send_float+0x2ec>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	dcf1      	bgt.n	8001f10 <max7219_Send_float+0xcc>
		while (value_conv >= 100000) {
 8001f2c:	e008      	b.n	8001f40 <max7219_Send_float+0xfc>
			value_conv -= 100000;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8001f34:	3ba0      	subs	r3, #160	; 0xa0
 8001f36:	61fb      	str	r3, [r7, #28]
			BCD_Arr[5]++;
 8001f38:	7c7b      	ldrb	r3, [r7, #17]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	747b      	strb	r3, [r7, #17]
		while (value_conv >= 100000) {
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4a7c      	ldr	r2, [pc, #496]	; (8002134 <max7219_Send_float+0x2f0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	dcf2      	bgt.n	8001f2e <max7219_Send_float+0xea>
		while (value_conv >= 10000) {
 8001f48:	e008      	b.n	8001f5c <max7219_Send_float+0x118>
			value_conv -= 10000;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8001f50:	3b10      	subs	r3, #16
 8001f52:	61fb      	str	r3, [r7, #28]
			BCD_Arr[4]++;
 8001f54:	7c3b      	ldrb	r3, [r7, #16]
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	743b      	strb	r3, [r7, #16]
		while (value_conv >= 10000) {
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f62:	4293      	cmp	r3, r2
 8001f64:	dcf1      	bgt.n	8001f4a <max7219_Send_float+0x106>
		while (value_conv >= 1000) {
 8001f66:	e007      	b.n	8001f78 <max7219_Send_float+0x134>
			value_conv -= 1000;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f6e:	61fb      	str	r3, [r7, #28]
			BCD_Arr[3]++;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	3301      	adds	r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	73fb      	strb	r3, [r7, #15]
		while (value_conv >= 1000) {
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f7e:	daf3      	bge.n	8001f68 <max7219_Send_float+0x124>
		while (value_conv >= 100) {
 8001f80:	e006      	b.n	8001f90 <max7219_Send_float+0x14c>
			value_conv -= 100;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b64      	subs	r3, #100	; 0x64
 8001f86:	61fb      	str	r3, [r7, #28]
			BCD_Arr[2]++;
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	73bb      	strb	r3, [r7, #14]
		while (value_conv >= 100) {
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b63      	cmp	r3, #99	; 0x63
 8001f94:	dcf5      	bgt.n	8001f82 <max7219_Send_float+0x13e>
		while (value_conv >= 10) {
 8001f96:	e006      	b.n	8001fa6 <max7219_Send_float+0x162>
			value_conv -= 10;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	3b0a      	subs	r3, #10
 8001f9c:	61fb      	str	r3, [r7, #28]
			BCD_Arr[1]++;
 8001f9e:	7b7b      	ldrb	r3, [r7, #13]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	737b      	strb	r3, [r7, #13]
		while (value_conv >= 10) {
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	2b09      	cmp	r3, #9
 8001faa:	dcf5      	bgt.n	8001f98 <max7219_Send_float+0x154>
		BCD_Arr[0] = (uint8_t) (value_conv);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	733b      	strb	r3, [r7, #12]
		if (lenght < 10) {
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	dc2f      	bgt.n	8002018 <max7219_Send_float+0x1d4>
			max7219_num(0, 255);
 8001fb8:	21ff      	movs	r1, #255	; 0xff
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fe7c 	bl	8001cb8 <max7219_num>
			max7219_num(1, 255);
 8001fc0:	21ff      	movs	r1, #255	; 0xff
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff fe78 	bl	8001cb8 <max7219_num>
			max7219_num(2, 255);
 8001fc8:	21ff      	movs	r1, #255	; 0xff
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f7ff fe74 	bl	8001cb8 <max7219_num>
			if (positive_value == true) {
 8001fd0:	7efb      	ldrb	r3, [r7, #27]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d004      	beq.n	8001fe0 <max7219_Send_float+0x19c>
				max7219_num(3, 255);
 8001fd6:	21ff      	movs	r1, #255	; 0xff
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f7ff fe6d 	bl	8001cb8 <max7219_num>
 8001fde:	e003      	b.n	8001fe8 <max7219_Send_float+0x1a4>
				max7219_num(3, 254);
 8001fe0:	21fe      	movs	r1, #254	; 0xfe
 8001fe2:	2003      	movs	r0, #3
 8001fe4:	f7ff fe68 	bl	8001cb8 <max7219_num>
			max7219_num_point(4, BCD_Arr[4]);
 8001fe8:	7c3b      	ldrb	r3, [r7, #16]
 8001fea:	4619      	mov	r1, r3
 8001fec:	2004      	movs	r0, #4
 8001fee:	f7ff fecf 	bl	8001d90 <max7219_num_point>
			max7219_num(5, BCD_Arr[3]);
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2005      	movs	r0, #5
 8001ff8:	f7ff fe5e 	bl	8001cb8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001ffc:	7b7b      	ldrb	r3, [r7, #13]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff fe59 	bl	8001cb8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8002006:	7b3b      	ldrb	r3, [r7, #12]
 8002008:	4619      	mov	r1, r3
 800200a:	2007      	movs	r0, #7
 800200c:	f7ff fe54 	bl	8001cb8 <max7219_num>
			max7219_send_symbol(symbol);
 8002010:	4843      	ldr	r0, [pc, #268]	; (8002120 <max7219_Send_float+0x2dc>)
 8002012:	f7ff fe11 	bl	8001c38 <max7219_send_symbol>
}
 8002016:	e17c      	b.n	8002312 <max7219_Send_float+0x4ce>
		} else if (lenght < 100) {
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b63      	cmp	r3, #99	; 0x63
 800201c:	dc2e      	bgt.n	800207c <max7219_Send_float+0x238>
			max7219_num(0, 255);
 800201e:	21ff      	movs	r1, #255	; 0xff
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fe49 	bl	8001cb8 <max7219_num>
			max7219_num(1, 255);
 8002026:	21ff      	movs	r1, #255	; 0xff
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff fe45 	bl	8001cb8 <max7219_num>
			max7219_num(2, 255);
 800202e:	21ff      	movs	r1, #255	; 0xff
 8002030:	2002      	movs	r0, #2
 8002032:	f7ff fe41 	bl	8001cb8 <max7219_num>
			if (positive_value == true) {
 8002036:	7efb      	ldrb	r3, [r7, #27]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <max7219_Send_float+0x202>
				max7219_num(3, 255);
 800203c:	21ff      	movs	r1, #255	; 0xff
 800203e:	2003      	movs	r0, #3
 8002040:	f7ff fe3a 	bl	8001cb8 <max7219_num>
 8002044:	e003      	b.n	800204e <max7219_Send_float+0x20a>
				max7219_num(3, 254);
 8002046:	21fe      	movs	r1, #254	; 0xfe
 8002048:	2003      	movs	r0, #3
 800204a:	f7ff fe35 	bl	8001cb8 <max7219_num>
			max7219_num_point(4, 255);
 800204e:	21ff      	movs	r1, #255	; 0xff
 8002050:	2004      	movs	r0, #4
 8002052:	f7ff fe9d 	bl	8001d90 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	4619      	mov	r1, r3
 800205a:	2005      	movs	r0, #5
 800205c:	f7ff fe2c 	bl	8001cb8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8002060:	7b7b      	ldrb	r3, [r7, #13]
 8002062:	4619      	mov	r1, r3
 8002064:	2006      	movs	r0, #6
 8002066:	f7ff fe27 	bl	8001cb8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 800206a:	7b3b      	ldrb	r3, [r7, #12]
 800206c:	4619      	mov	r1, r3
 800206e:	2007      	movs	r0, #7
 8002070:	f7ff fe22 	bl	8001cb8 <max7219_num>
			max7219_send_symbol(symbol);
 8002074:	482a      	ldr	r0, [pc, #168]	; (8002120 <max7219_Send_float+0x2dc>)
 8002076:	f7ff fddf 	bl	8001c38 <max7219_send_symbol>
}
 800207a:	e14a      	b.n	8002312 <max7219_Send_float+0x4ce>
		} else if (lenght < 1000) {
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002082:	da2f      	bge.n	80020e4 <max7219_Send_float+0x2a0>
			max7219_num(0, 255);
 8002084:	21ff      	movs	r1, #255	; 0xff
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff fe16 	bl	8001cb8 <max7219_num>
			max7219_num(1, 255);
 800208c:	21ff      	movs	r1, #255	; 0xff
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff fe12 	bl	8001cb8 <max7219_num>
			max7219_num(2, 255);
 8002094:	21ff      	movs	r1, #255	; 0xff
 8002096:	2002      	movs	r0, #2
 8002098:	f7ff fe0e 	bl	8001cb8 <max7219_num>
			if (positive_value == true) {
 800209c:	7efb      	ldrb	r3, [r7, #27]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <max7219_Send_float+0x268>
				max7219_num(3, 255);
 80020a2:	21ff      	movs	r1, #255	; 0xff
 80020a4:	2003      	movs	r0, #3
 80020a6:	f7ff fe07 	bl	8001cb8 <max7219_num>
 80020aa:	e003      	b.n	80020b4 <max7219_Send_float+0x270>
				max7219_num(3, 254);
 80020ac:	21fe      	movs	r1, #254	; 0xfe
 80020ae:	2003      	movs	r0, #3
 80020b0:	f7ff fe02 	bl	8001cb8 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	4619      	mov	r1, r3
 80020b8:	2004      	movs	r0, #4
 80020ba:	f7ff fe69 	bl	8001d90 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 80020be:	7bbb      	ldrb	r3, [r7, #14]
 80020c0:	4619      	mov	r1, r3
 80020c2:	2005      	movs	r0, #5
 80020c4:	f7ff fdf8 	bl	8001cb8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80020c8:	7b7b      	ldrb	r3, [r7, #13]
 80020ca:	4619      	mov	r1, r3
 80020cc:	2006      	movs	r0, #6
 80020ce:	f7ff fdf3 	bl	8001cb8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80020d2:	7b3b      	ldrb	r3, [r7, #12]
 80020d4:	4619      	mov	r1, r3
 80020d6:	2007      	movs	r0, #7
 80020d8:	f7ff fdee 	bl	8001cb8 <max7219_num>
			max7219_send_symbol(symbol);
 80020dc:	4810      	ldr	r0, [pc, #64]	; (8002120 <max7219_Send_float+0x2dc>)
 80020de:	f7ff fdab 	bl	8001c38 <max7219_send_symbol>
}
 80020e2:	e116      	b.n	8002312 <max7219_Send_float+0x4ce>
		} else if (lenght < 10000) {
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80020ea:	4293      	cmp	r3, r2
 80020ec:	dc40      	bgt.n	8002170 <max7219_Send_float+0x32c>
			max7219_num(0, 255);
 80020ee:	21ff      	movs	r1, #255	; 0xff
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff fde1 	bl	8001cb8 <max7219_num>
			max7219_num(1, 255);
 80020f6:	21ff      	movs	r1, #255	; 0xff
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff fddd 	bl	8001cb8 <max7219_num>
			max7219_num(2, 255);
 80020fe:	21ff      	movs	r1, #255	; 0xff
 8002100:	2002      	movs	r0, #2
 8002102:	f7ff fdd9 	bl	8001cb8 <max7219_num>
			if (positive_value == true) {
 8002106:	7efb      	ldrb	r3, [r7, #27]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <max7219_Send_float+0x2f4>
				max7219_num(3, 255);
 800210c:	21ff      	movs	r1, #255	; 0xff
 800210e:	2003      	movs	r0, #3
 8002110:	f7ff fdd2 	bl	8001cb8 <max7219_num>
 8002114:	e014      	b.n	8002140 <max7219_Send_float+0x2fc>
 8002116:	bf00      	nop
 8002118:	47c35000 	.word	0x47c35000
 800211c:	c61c3fff 	.word	0xc61c3fff
 8002120:	200003e8 	.word	0x200003e8
 8002124:	447a0000 	.word	0x447a0000
 8002128:	ff676980 	.word	0xff676980
 800212c:	0098967f 	.word	0x0098967f
 8002130:	000f423f 	.word	0x000f423f
 8002134:	0001869f 	.word	0x0001869f
				max7219_num(3, 254);
 8002138:	21fe      	movs	r1, #254	; 0xfe
 800213a:	2003      	movs	r0, #3
 800213c:	f7ff fdbc 	bl	8001cb8 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	4619      	mov	r1, r3
 8002144:	2004      	movs	r0, #4
 8002146:	f7ff fe23 	bl	8001d90 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	4619      	mov	r1, r3
 800214e:	2005      	movs	r0, #5
 8002150:	f7ff fdb2 	bl	8001cb8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	4619      	mov	r1, r3
 8002158:	2006      	movs	r0, #6
 800215a:	f7ff fdad 	bl	8001cb8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 800215e:	7b3b      	ldrb	r3, [r7, #12]
 8002160:	4619      	mov	r1, r3
 8002162:	2007      	movs	r0, #7
 8002164:	f7ff fda8 	bl	8001cb8 <max7219_num>
			max7219_send_symbol(symbol);
 8002168:	486c      	ldr	r0, [pc, #432]	; (800231c <max7219_Send_float+0x4d8>)
 800216a:	f7ff fd65 	bl	8001c38 <max7219_send_symbol>
}
 800216e:	e0d0      	b.n	8002312 <max7219_Send_float+0x4ce>
		} else if (lenght < 100000) {
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4a6b      	ldr	r2, [pc, #428]	; (8002320 <max7219_Send_float+0x4dc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	dc30      	bgt.n	80021da <max7219_Send_float+0x396>
			max7219_num(0, 255);
 8002178:	21ff      	movs	r1, #255	; 0xff
 800217a:	2000      	movs	r0, #0
 800217c:	f7ff fd9c 	bl	8001cb8 <max7219_num>
			max7219_num(1, 255);
 8002180:	21ff      	movs	r1, #255	; 0xff
 8002182:	2001      	movs	r0, #1
 8002184:	f7ff fd98 	bl	8001cb8 <max7219_num>
			if (positive_value == true) {
 8002188:	7efb      	ldrb	r3, [r7, #27]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <max7219_Send_float+0x354>
				max7219_num(2, 255);
 800218e:	21ff      	movs	r1, #255	; 0xff
 8002190:	2002      	movs	r0, #2
 8002192:	f7ff fd91 	bl	8001cb8 <max7219_num>
 8002196:	e003      	b.n	80021a0 <max7219_Send_float+0x35c>
				max7219_num(2, 254);
 8002198:	21fe      	movs	r1, #254	; 0xfe
 800219a:	2002      	movs	r0, #2
 800219c:	f7ff fd8c 	bl	8001cb8 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 80021a0:	7c3b      	ldrb	r3, [r7, #16]
 80021a2:	4619      	mov	r1, r3
 80021a4:	2003      	movs	r0, #3
 80021a6:	f7ff fd87 	bl	8001cb8 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	4619      	mov	r1, r3
 80021ae:	2004      	movs	r0, #4
 80021b0:	f7ff fdee 	bl	8001d90 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	4619      	mov	r1, r3
 80021b8:	2005      	movs	r0, #5
 80021ba:	f7ff fd7d 	bl	8001cb8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80021be:	7b7b      	ldrb	r3, [r7, #13]
 80021c0:	4619      	mov	r1, r3
 80021c2:	2006      	movs	r0, #6
 80021c4:	f7ff fd78 	bl	8001cb8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80021c8:	7b3b      	ldrb	r3, [r7, #12]
 80021ca:	4619      	mov	r1, r3
 80021cc:	2007      	movs	r0, #7
 80021ce:	f7ff fd73 	bl	8001cb8 <max7219_num>
			max7219_send_symbol(symbol);
 80021d2:	4852      	ldr	r0, [pc, #328]	; (800231c <max7219_Send_float+0x4d8>)
 80021d4:	f7ff fd30 	bl	8001c38 <max7219_send_symbol>
}
 80021d8:	e09b      	b.n	8002312 <max7219_Send_float+0x4ce>
		} else if (lenght < 1000000) {
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4a51      	ldr	r2, [pc, #324]	; (8002324 <max7219_Send_float+0x4e0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	dc31      	bgt.n	8002246 <max7219_Send_float+0x402>
			max7219_num(0, 255);
 80021e2:	21ff      	movs	r1, #255	; 0xff
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff fd67 	bl	8001cb8 <max7219_num>
			if (positive_value == true) {
 80021ea:	7efb      	ldrb	r3, [r7, #27]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <max7219_Send_float+0x3b6>
				max7219_num(1, 255);
 80021f0:	21ff      	movs	r1, #255	; 0xff
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7ff fd60 	bl	8001cb8 <max7219_num>
 80021f8:	e003      	b.n	8002202 <max7219_Send_float+0x3be>
				max7219_num(1, 254);
 80021fa:	21fe      	movs	r1, #254	; 0xfe
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7ff fd5b 	bl	8001cb8 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8002202:	7c7b      	ldrb	r3, [r7, #17]
 8002204:	4619      	mov	r1, r3
 8002206:	2002      	movs	r0, #2
 8002208:	f7ff fd56 	bl	8001cb8 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 800220c:	7c3b      	ldrb	r3, [r7, #16]
 800220e:	4619      	mov	r1, r3
 8002210:	2003      	movs	r0, #3
 8002212:	f7ff fd51 	bl	8001cb8 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	4619      	mov	r1, r3
 800221a:	2004      	movs	r0, #4
 800221c:	f7ff fdb8 	bl	8001d90 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	4619      	mov	r1, r3
 8002224:	2005      	movs	r0, #5
 8002226:	f7ff fd47 	bl	8001cb8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 800222a:	7b7b      	ldrb	r3, [r7, #13]
 800222c:	4619      	mov	r1, r3
 800222e:	2006      	movs	r0, #6
 8002230:	f7ff fd42 	bl	8001cb8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8002234:	7b3b      	ldrb	r3, [r7, #12]
 8002236:	4619      	mov	r1, r3
 8002238:	2007      	movs	r0, #7
 800223a:	f7ff fd3d 	bl	8001cb8 <max7219_num>
			max7219_send_symbol(symbol);
 800223e:	4837      	ldr	r0, [pc, #220]	; (800231c <max7219_Send_float+0x4d8>)
 8002240:	f7ff fcfa 	bl	8001c38 <max7219_send_symbol>
}
 8002244:	e065      	b.n	8002312 <max7219_Send_float+0x4ce>
		} else if (lenght < 10000000) {
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4a37      	ldr	r2, [pc, #220]	; (8002328 <max7219_Send_float+0x4e4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	dc32      	bgt.n	80022b4 <max7219_Send_float+0x470>
			if (positive_value == true) {
 800224e:	7efb      	ldrb	r3, [r7, #27]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <max7219_Send_float+0x41a>
				max7219_num(0, 255);
 8002254:	21ff      	movs	r1, #255	; 0xff
 8002256:	2000      	movs	r0, #0
 8002258:	f7ff fd2e 	bl	8001cb8 <max7219_num>
 800225c:	e003      	b.n	8002266 <max7219_Send_float+0x422>
				max7219_num(0, 254);
 800225e:	21fe      	movs	r1, #254	; 0xfe
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff fd29 	bl	8001cb8 <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 8002266:	7cbb      	ldrb	r3, [r7, #18]
 8002268:	4619      	mov	r1, r3
 800226a:	2001      	movs	r0, #1
 800226c:	f7ff fd24 	bl	8001cb8 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8002270:	7c7b      	ldrb	r3, [r7, #17]
 8002272:	4619      	mov	r1, r3
 8002274:	2002      	movs	r0, #2
 8002276:	f7ff fd1f 	bl	8001cb8 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 800227a:	7c3b      	ldrb	r3, [r7, #16]
 800227c:	4619      	mov	r1, r3
 800227e:	2003      	movs	r0, #3
 8002280:	f7ff fd1a 	bl	8001cb8 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	4619      	mov	r1, r3
 8002288:	2004      	movs	r0, #4
 800228a:	f7ff fd81 	bl	8001d90 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 800228e:	7bbb      	ldrb	r3, [r7, #14]
 8002290:	4619      	mov	r1, r3
 8002292:	2005      	movs	r0, #5
 8002294:	f7ff fd10 	bl	8001cb8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8002298:	7b7b      	ldrb	r3, [r7, #13]
 800229a:	4619      	mov	r1, r3
 800229c:	2006      	movs	r0, #6
 800229e:	f7ff fd0b 	bl	8001cb8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80022a2:	7b3b      	ldrb	r3, [r7, #12]
 80022a4:	4619      	mov	r1, r3
 80022a6:	2007      	movs	r0, #7
 80022a8:	f7ff fd06 	bl	8001cb8 <max7219_num>
			max7219_send_symbol(symbol);
 80022ac:	481b      	ldr	r0, [pc, #108]	; (800231c <max7219_Send_float+0x4d8>)
 80022ae:	f7ff fcc3 	bl	8001c38 <max7219_send_symbol>
}
 80022b2:	e02e      	b.n	8002312 <max7219_Send_float+0x4ce>
		} else if (lenght < 100000000) {
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <max7219_Send_float+0x4e8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	dc2a      	bgt.n	8002312 <max7219_Send_float+0x4ce>
			max7219_num(0, BCD_Arr[7]);
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	4619      	mov	r1, r3
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff fcf9 	bl	8001cb8 <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 80022c6:	7cbb      	ldrb	r3, [r7, #18]
 80022c8:	4619      	mov	r1, r3
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff fcf4 	bl	8001cb8 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 80022d0:	7c7b      	ldrb	r3, [r7, #17]
 80022d2:	4619      	mov	r1, r3
 80022d4:	2002      	movs	r0, #2
 80022d6:	f7ff fcef 	bl	8001cb8 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 80022da:	7c3b      	ldrb	r3, [r7, #16]
 80022dc:	4619      	mov	r1, r3
 80022de:	2003      	movs	r0, #3
 80022e0:	f7ff fcea 	bl	8001cb8 <max7219_num>
			max7219_num_point(4, BCD_Arr[3]);
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	4619      	mov	r1, r3
 80022e8:	2004      	movs	r0, #4
 80022ea:	f7ff fd51 	bl	8001d90 <max7219_num_point>
			max7219_num(5, BCD_Arr[2]);
 80022ee:	7bbb      	ldrb	r3, [r7, #14]
 80022f0:	4619      	mov	r1, r3
 80022f2:	2005      	movs	r0, #5
 80022f4:	f7ff fce0 	bl	8001cb8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	4619      	mov	r1, r3
 80022fc:	2006      	movs	r0, #6
 80022fe:	f7ff fcdb 	bl	8001cb8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8002302:	7b3b      	ldrb	r3, [r7, #12]
 8002304:	4619      	mov	r1, r3
 8002306:	2007      	movs	r0, #7
 8002308:	f7ff fcd6 	bl	8001cb8 <max7219_num>
			max7219_send_symbol(symbol);
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <max7219_Send_float+0x4d8>)
 800230e:	f7ff fc93 	bl	8001c38 <max7219_send_symbol>
}
 8002312:	bf00      	nop
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200003e8 	.word	0x200003e8
 8002320:	0001869f 	.word	0x0001869f
 8002324:	000f423f 	.word	0x000f423f
 8002328:	0098967f 	.word	0x0098967f
 800232c:	05f5e0ff 	.word	0x05f5e0ff

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_MspInit+0x58>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_MspInit+0x58>)
 800233c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002340:	6253      	str	r3, [r2, #36]	; 0x24
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_MspInit+0x58>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_MspInit+0x58>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <HAL_MspInit+0x58>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_MspInit+0x58>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_MspInit+0x58>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <HAL_MspInit+0x58>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	6253      	str	r3, [r2, #36]	; 0x24
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_MspInit+0x58>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_ADC_MspInit+0x84>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d12b      	bne.n	8002406 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_ADC_MspInit+0x88>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <HAL_ADC_MspInit+0x88>)
 80023b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_ADC_MspInit+0x88>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_ADC_MspInit+0x88>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <HAL_ADC_MspInit+0x88>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	61d3      	str	r3, [r2, #28]
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_ADC_MspInit+0x88>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023de:	2301      	movs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e2:	2303      	movs	r3, #3
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	4809      	ldr	r0, [pc, #36]	; (8002418 <HAL_ADC_MspInit+0x8c>)
 80023f2:	f001 f965 	bl	80036c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2012      	movs	r0, #18
 80023fc:	f001 f8e9 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002400:	2012      	movs	r0, #18
 8002402:	f001 f902 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40012400 	.word	0x40012400
 8002414:	40023800 	.word	0x40023800
 8002418:	40020000 	.word	0x40020000

0800241c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_SPI_MspInit+0x8c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d12f      	bne.n	800249e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_SPI_MspInit+0x90>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_SPI_MspInit+0x90>)
 8002444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002448:	6213      	str	r3, [r2, #32]
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_SPI_MspInit+0x90>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_SPI_MspInit+0x90>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4a14      	ldr	r2, [pc, #80]	; (80024ac <HAL_SPI_MspInit+0x90>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	61d3      	str	r3, [r2, #28]
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_SPI_MspInit+0x90>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800246e:	23a0      	movs	r3, #160	; 0xa0
 8002470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800247e:	2305      	movs	r3, #5
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	4619      	mov	r1, r3
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <HAL_SPI_MspInit+0x94>)
 800248a:	f001 f919 	bl	80036c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	2023      	movs	r0, #35	; 0x23
 8002494:	f001 f89d 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002498:	2023      	movs	r0, #35	; 0x23
 800249a:	f001 f8b6 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40013000 	.word	0x40013000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020000 	.word	0x40020000

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <NMI_Handler+0x4>

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <MemManage_Handler+0x4>

080024c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fa:	f000 f91f 	bl	800273c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <ADC1_IRQHandler+0x10>)
 800250a:	f000 fa9b 	bl	8002a44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000458 	.word	0x20000458

08002518 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <SPI1_IRQHandler+0x10>)
 800251e:	f002 f8f9 	bl	8004714 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000400 	.word	0x20000400

0800252c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e00a      	b.n	8002554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800253e:	f3af 8000 	nop.w
 8002542:	4601      	mov	r1, r0
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	60ba      	str	r2, [r7, #8]
 800254a:	b2ca      	uxtb	r2, r1
 800254c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbf0      	blt.n	800253e <_read+0x12>
	}

return len;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	return -1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258c:	605a      	str	r2, [r3, #4]
	return 0;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <_isatty>:

int _isatty(int file)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
	return 1;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
	return 0;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
	...

080025c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <_sbrk+0x5c>)
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <_sbrk+0x60>)
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <_sbrk+0x64>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <_sbrk+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d207      	bcs.n	8002608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f8:	f002 fb0c 	bl	8004c14 <__errno>
 80025fc:	4602      	mov	r2, r0
 80025fe:	230c      	movs	r3, #12
 8002600:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e009      	b.n	800261c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <_sbrk+0x64>)
 8002618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20008000 	.word	0x20008000
 8002628:	00000400 	.word	0x00000400
 800262c:	200003f0 	.word	0x200003f0
 8002630:	200004b8 	.word	0x200004b8

08002634 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <SystemInit+0x14>)
 800263a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800263e:	609a      	str	r2, [r3, #8]
#endif
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800264c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800264e:	e003      	b.n	8002658 <LoopCopyDataInit>

08002650 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002652:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002654:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002656:	3104      	adds	r1, #4

08002658 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002658:	480a      	ldr	r0, [pc, #40]	; (8002684 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800265c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800265e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002660:	d3f6      	bcc.n	8002650 <CopyDataInit>
  ldr r2, =_sbss
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002664:	e002      	b.n	800266c <LoopFillZerobss>

08002666 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002668:	f842 3b04 	str.w	r3, [r2], #4

0800266c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800266e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002670:	d3f9      	bcc.n	8002666 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002672:	f7ff ffdf 	bl	8002634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002676:	f002 fad3 	bl	8004c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800267a:	f7fe ffd5 	bl	8001628 <main>
  bx lr
 800267e:	4770      	bx	lr
  ldr r3, =_sidata
 8002680:	080093b8 	.word	0x080093b8
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002688:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800268c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002690:	200004b4 	.word	0x200004b4

08002694 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002694:	e7fe      	b.n	8002694 <COMP_IRQHandler>

08002696 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 ff8b 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026a6:	2000      	movs	r0, #0
 80026a8:	f000 f80e 	bl	80026c8 <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	71fb      	strb	r3, [r7, #7]
 80026b6:	e001      	b.n	80026bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026b8:	f7ff fe3a 	bl	8002330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026bc:	79fb      	ldrb	r3, [r7, #7]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_InitTick+0x68>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d022      	beq.n	8002722 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_InitTick+0x6c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_InitTick+0x68>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 ff98 	bl	8003626 <HAL_SYSTICK_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	d809      	bhi.n	8002716 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002702:	2200      	movs	r2, #0
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	f04f 30ff 	mov.w	r0, #4294967295
 800270a:	f000 ff62 	bl	80035d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <HAL_InitTick+0x70>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e007      	b.n	8002726 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e004      	b.n	8002726 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e001      	b.n	8002726 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000008 	.word	0x20000008
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_IncTick+0x1c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_IncTick+0x20>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4413      	add	r3, r2
 800274a:	4a03      	ldr	r2, [pc, #12]	; (8002758 <HAL_IncTick+0x1c>)
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	200004ac 	.word	0x200004ac
 800275c:	20000008 	.word	0x20000008

08002760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b02      	ldr	r3, [pc, #8]	; (8002770 <HAL_GetTick+0x10>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	200004ac 	.word	0x200004ac

08002774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff fff0 	bl	8002760 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d004      	beq.n	8002798 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_Delay+0x40>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002798:	bf00      	nop
 800279a:	f7ff ffe1 	bl	8002760 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d8f7      	bhi.n	800279a <HAL_Delay+0x26>
  {
  }
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008

080027b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08e      	sub	sp, #56	; 0x38
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e127      	b.n	8002a28 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d115      	bne.n	8002812 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f4:	4b8e      	ldr	r3, [pc, #568]	; (8002a30 <HAL_ADC_Init+0x278>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a8d      	ldr	r2, [pc, #564]	; (8002a30 <HAL_ADC_Init+0x278>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	4b8b      	ldr	r3, [pc, #556]	; (8002a30 <HAL_ADC_Init+0x278>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fdbd 	bl	800238c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80ff 	bne.w	8002a1e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002828:	f023 0302 	bic.w	r3, r3, #2
 800282c:	f043 0202 	orr.w	r2, r3, #2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002834:	4b7f      	ldr	r3, [pc, #508]	; (8002a34 <HAL_ADC_Init+0x27c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	497c      	ldr	r1, [pc, #496]	; (8002a34 <HAL_ADC_Init+0x27c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800284e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002856:	4619      	mov	r1, r3
 8002858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002872:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002878:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002880:	4619      	mov	r1, r3
 8002882:	2302      	movs	r3, #2
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800289a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800289c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289e:	4313      	orrs	r3, r2
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d007      	beq.n	80028ba <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80028b2:	4313      	orrs	r3, r2
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b6:	4313      	orrs	r3, r2
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d04f      	beq.n	8002968 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ce:	4313      	orrs	r3, r2
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80028da:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6912      	ldr	r2, [r2, #16]
 80028e0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80028e4:	d003      	beq.n	80028ee <HAL_ADC_Init+0x136>
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6912      	ldr	r2, [r2, #16]
 80028ea:	2a01      	cmp	r2, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_ADC_Init+0x13c>
 80028ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f2:	e000      	b.n	80028f6 <HAL_ADC_Init+0x13e>
 80028f4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80028f6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80028f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fa:	4313      	orrs	r3, r2
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d125      	bne.n	8002954 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d114      	bne.n	800293c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	3b01      	subs	r3, #1
 8002918:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800291c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	617a      	str	r2, [r7, #20]
  return result;
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	4093      	lsls	r3, r2
 8002930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	4313      	orrs	r3, r2
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
 800293a:	e00b      	b.n	8002954 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_ADC_Init+0x280>)
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002964:	430b      	orrs	r3, r1
 8002966:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <HAL_ADC_Init+0x284>)
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002978:	430b      	orrs	r3, r1
 800297a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002984:	d003      	beq.n	800298e <HAL_ADC_Init+0x1d6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d119      	bne.n	80029c2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80029a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	fa92 f2a2 	rbit	r2, r2
 80029aa:	60fa      	str	r2, [r7, #12]
  return result;
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	fab2 f282 	clz	r2, r2
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	fa03 f202 	lsl.w	r2, r3, r2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
 80029c0:	e007      	b.n	80029d2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_ADC_Init+0x288>)
 80029da:	4013      	ands	r3, r2
 80029dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10b      	bne.n	80029fa <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	f023 0303 	bic.w	r3, r3, #3
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80029f8:	e014      	b.n	8002a24 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	f023 0312 	bic.w	r3, r3, #18
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3738      	adds	r7, #56	; 0x38
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40012700 	.word	0x40012700
 8002a38:	fcfc16ff 	.word	0xfcfc16ff
 8002a3c:	c0fff18d 	.word	0xc0fff18d
 8002a40:	bf80fffe 	.word	0xbf80fffe

08002a44 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d14e      	bne.n	8002af8 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d147      	bne.n	8002af8 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d12c      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d127      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d119      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0220 	bic.w	r2, r2, #32
 8002ac2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8ab 	bl	8002c44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0212 	mvn.w	r2, #18
 8002af6:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b80      	cmp	r3, #128	; 0x80
 8002b04:	d15c      	bne.n	8002bc0 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d155      	bne.n	8002bc0 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d13a      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d12c      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d125      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11e      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d119      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b8a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7fe fcaf 	bl	8001514 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 020c 	mvn.w	r2, #12
 8002bbe:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d114      	bne.n	8002bf8 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d10d      	bne.n	8002bf8 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f834 	bl	8002c56 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0201 	mvn.w	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c06:	d119      	bne.n	8002c3c <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d112      	bne.n	8002c3c <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	f043 0202 	orr.w	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f06f 0220 	mvn.w	r2, #32
 8002c2a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f81b 	bl	8002c68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0220 	mvn.w	r2, #32
 8002c3a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x20>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e134      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x28a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d81c      	bhi.n	8002ce6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b05      	subs	r3, #5
 8002cbe:	221f      	movs	r2, #31
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4019      	ands	r1, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b05      	subs	r3, #5
 8002cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ce4:	e07e      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d81c      	bhi.n	8002d28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3b23      	subs	r3, #35	; 0x23
 8002d00:	221f      	movs	r2, #31
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	4019      	ands	r1, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	3b23      	subs	r3, #35	; 0x23
 8002d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d26:	e05d      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b12      	cmp	r3, #18
 8002d2e:	d81c      	bhi.n	8002d6a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	3b41      	subs	r3, #65	; 0x41
 8002d42:	221f      	movs	r2, #31
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	4019      	ands	r1, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b41      	subs	r3, #65	; 0x41
 8002d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
 8002d68:	e03c      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b18      	cmp	r3, #24
 8002d70:	d81c      	bhi.n	8002dac <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	3b5f      	subs	r3, #95	; 0x5f
 8002d84:	221f      	movs	r2, #31
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	4019      	ands	r1, r3
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b5f      	subs	r3, #95	; 0x5f
 8002d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	635a      	str	r2, [r3, #52]	; 0x34
 8002daa:	e01b      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b7d      	subs	r3, #125	; 0x7d
 8002dbe:	221f      	movs	r2, #31
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4019      	ands	r1, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b7d      	subs	r3, #125	; 0x7d
 8002dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b09      	cmp	r3, #9
 8002dea:	d81a      	bhi.n	8002e22 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6959      	ldr	r1, [r3, #20]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	4019      	ands	r1, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6898      	ldr	r0, [r3, #8]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	615a      	str	r2, [r3, #20]
 8002e20:	e042      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b13      	cmp	r3, #19
 8002e28:	d81c      	bhi.n	8002e64 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b1e      	subs	r3, #30
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	4019      	ands	r1, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6898      	ldr	r0, [r3, #8]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	3b1e      	subs	r3, #30
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	e021      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b1a      	cmp	r3, #26
 8002e6a:	d81c      	bhi.n	8002ea6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68d9      	ldr	r1, [r3, #12]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b3c      	subs	r3, #60	; 0x3c
 8002e7e:	2207      	movs	r2, #7
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4019      	ands	r1, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6898      	ldr	r0, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	3b3c      	subs	r3, #60	; 0x3c
 8002e98:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002ea6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d003      	beq.n	8002eb8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002eb4:	2b11      	cmp	r3, #17
 8002eb6:	d121      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_ADC_ConfigChannel+0x294>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11b      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_ADC_ConfigChannel+0x294>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_ADC_ConfigChannel+0x294>)
 8002eca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ece:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d111      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_ADC_ConfigChannel+0x298>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_ADC_ConfigChannel+0x29c>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9a      	lsrs	r2, r3, #18
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002eee:	e002      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40012700 	.word	0x40012700
 8002f14:	20000000 	.word	0x20000000
 8002f18:	431bde83 	.word	0x431bde83

08002f1c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d03c      	beq.n	8002fb4 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <ADC_Enable+0xa4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <ADC_Enable+0xa8>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	0c9a      	lsrs	r2, r3, #18
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002f5e:	e002      	b.n	8002f66 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f9      	bne.n	8002f60 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002f6c:	f7ff fbf8 	bl	8002760 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f72:	e018      	b.n	8002fa6 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002f74:	f7ff fbf4 	bl	8002760 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d911      	bls.n	8002fa6 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	f043 0210 	orr.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e007      	b.n	8002fb6 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d1df      	bne.n	8002f74 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	431bde83 	.word	0x431bde83

08002fc8 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e046      	b.n	8003070 <HAL_ADCEx_InjectedStart_IT+0xa8>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ff96 	bl	8002f1c <ADC_Enable>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d139      	bne.n	800306e <HAL_ADCEx_InjectedStart_IT+0xa6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_ADCEx_InjectedStart_IT+0x58>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0204 	mvn.w	r2, #4
 8003030:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003040:	605a      	str	r2, [r3, #4]
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)              && 
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10e      	bne.n	800306e <HAL_ADCEx_InjectedStart_IT+0xa6>
        HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)  )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)              && 
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_ADCEx_InjectedStart_IT+0xa6>
    {
      /* Enable ADC software conversion for injected channels */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_JSWSTART);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800306c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */
  switch(InjectedRank)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d009      	beq.n	80030a0 <HAL_ADCEx_InjectedGetValue+0x28>
 800308c:	2b04      	cmp	r3, #4
 800308e:	d002      	beq.n	8003096 <HAL_ADCEx_InjectedGetValue+0x1e>
 8003090:	2b02      	cmp	r3, #2
 8003092:	d00a      	beq.n	80030aa <HAL_ADCEx_InjectedGetValue+0x32>
 8003094:	e00e      	b.n	80030b4 <HAL_ADCEx_InjectedGetValue+0x3c>
  {  
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	60fb      	str	r3, [r7, #12]
      break;
 800309e:	e00e      	b.n	80030be <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a6:	60fb      	str	r3, [r7, #12]
      break;
 80030a8:	e009      	b.n	80030be <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	60fb      	str	r3, [r7, #12]
      break;
 80030b2:	e004      	b.n	80030be <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	60fb      	str	r3, [r7, #12]
      break;
 80030bc:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{   
 80030cc:	b490      	push	{r4, r7}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_ADCEx_InjectedConfigChannel+0x20>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e18f      	b.n	800340c <HAL_ADCEx_InjectedConfigChannel+0x340>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter ""InjectedNbrOfConversion".                                  */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d119      	bne.n	8003130 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10c      	bne.n	800311e <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
        MODIFY_REG(hadc->Instance->JSQR                              ,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	0d9b      	lsrs	r3, r3, #22
 800310c:	059b      	lsls	r3, r3, #22
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	03d1      	lsls	r1, r2, #15
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6453      	str	r3, [r2, #68]	; 0x44
 800311c:	e04f      	b.n	80031be <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c
        
      tmp_hal_status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	e046      	b.n	80031be <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {   
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d82a      	bhi.n	8003192 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                                     ,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	1ad2      	subs	r2, r2, r3
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	330f      	adds	r3, #15
 8003154:	221f      	movs	r2, #31
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800315e:	43db      	mvns	r3, r3
 8003160:	4019      	ands	r1, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	3b01      	subs	r3, #1
 8003168:	0518      	lsls	r0, r3, #20
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681c      	ldr	r4, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	1ad2      	subs	r2, r2, r3
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	330f      	adds	r3, #15
 8003180:	fa04 f303 	lsl.w	r3, r4, r3
 8003184:	ea40 0203 	orr.w	r2, r0, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
 8003190:	e015      	b.n	80031be <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                                sConfigInjected->InjectedNbrOfConversion)  );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	330f      	adds	r3, #15
 80031aa:	221f      	movs	r2, #31
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80031b4:	43da      	mvns	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	400a      	ands	r2, r1
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* start.                                                                   */
  /* Note: This configuration keeps the hardware feature of parameter         */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to             */
  /*       software start.                                                    */
  
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d00e      	beq.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {    
    MODIFY_REG(hadc->Instance->CR2                        ,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	e007      	b.n	80031f4 <HAL_ADCEx_InjectedConfigChannel+0x128>
               sConfigInjected->ExternalTrigInjecConv    |
               sConfigInjected->ExternalTrigInjecConvEdge  );
  }
  else
  {
    MODIFY_REG(hadc->Instance->CR2,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80031f2:	609a      	str	r2, [r3, #8]
  /* Configuration of injected group                                          */
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  if ((ADC_IS_ENABLE(hadc) == RESET))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d039      	beq.n	8003276 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
  {
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO   |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 8003210:	605a      	str	r2, [r3, #4]
                             ADC_CR1_JDISCEN  );
    
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	7d5b      	ldrb	r3, [r3, #21]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d114      	bne.n	8003244 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d108      	bne.n	8003234 <HAL_ADCEx_InjectedConfigChannel+0x168>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e007      	b.n	8003244 <HAL_ADCEx_InjectedConfigChannel+0x178>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        tmp_hal_status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	7d1b      	ldrb	r3, [r3, #20]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d114      	bne.n	8003276 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	7d5b      	ldrb	r3, [r3, #21]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <HAL_ADCEx_InjectedConfigChannel+0x19a>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	e007      	b.n	8003276 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	64da      	str	r2, [r3, #76]	; 0x4c
        
        tmp_hal_status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Channel sampling time configuration */
  /* For InjectedChannels 0 to 9 */
  if (sConfigInjected->InjectedChannel < ADC_CHANNEL_10)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b09      	cmp	r3, #9
 800327c:	d81a      	bhi.n	80032b4 <HAL_ADCEx_InjectedConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6959      	ldr	r1, [r3, #20]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	2207      	movs	r2, #7
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	4019      	ands	r1, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6898      	ldr	r0, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	fa00 f203 	lsl.w	r2, r0, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	615a      	str	r2, [r3, #20]
 80032b2:	e042      	b.n	800333a <HAL_ADCEx_InjectedConfigChannel+0x26e>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfigInjected->InjectedChannel),
               ADC_SMPR3(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  /* For InjectedChannels 10 to 19 */
  else if (sConfigInjected->InjectedChannel < ADC_CHANNEL_20)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b13      	cmp	r3, #19
 80032ba:	d81c      	bhi.n	80032f6 <HAL_ADCEx_InjectedConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6919      	ldr	r1, [r3, #16]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	3b1e      	subs	r3, #30
 80032ce:	2207      	movs	r2, #7
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4019      	ands	r1, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6898      	ldr	r0, [r3, #8]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	3b1e      	subs	r3, #30
 80032e8:	fa00 f203 	lsl.w	r2, r0, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	611a      	str	r2, [r3, #16]
 80032f4:	e021      	b.n	800333a <HAL_ADCEx_InjectedConfigChannel+0x26e>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel),
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  /* For InjectedChannels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For InjectedChannels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfigInjected->InjectedChannel <= ADC_SMPR1_CHANNEL_MAX)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b1a      	cmp	r3, #26
 80032fc:	d81c      	bhi.n	8003338 <HAL_ADCEx_InjectedConfigChannel+0x26c>
  {   
    MODIFY_REG(hadc->Instance->SMPR1,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68d9      	ldr	r1, [r3, #12]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	3b3c      	subs	r3, #60	; 0x3c
 8003310:	2207      	movs	r2, #7
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	4019      	ands	r1, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6898      	ldr	r0, [r3, #8]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	3b3c      	subs	r3, #60	; 0x3c
 800332a:	fa00 f203 	lsl.w	r2, r0, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e000      	b.n	800333a <HAL_ADCEx_InjectedConfigChannel+0x26e>
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  /* For InjectedChannels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003338:	bf00      	nop
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d011      	beq.n	8003366 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8003342:	2b03      	cmp	r3, #3
 8003344:	d01d      	beq.n	8003382 <HAL_ADCEx_InjectedConfigChannel+0x2b6>
 8003346:	2b01      	cmp	r3, #1
 8003348:	d129      	bne.n	800339e <HAL_ADCEx_InjectedConfigChannel+0x2d2>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003354:	f023 030f 	bic.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	68d1      	ldr	r1, [r2, #12]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6193      	str	r3, [r2, #24]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8003364:	e029      	b.n	80033ba <HAL_ADCEx_InjectedConfigChannel+0x2ee>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003370:	f023 030f 	bic.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	68d1      	ldr	r1, [r2, #12]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	430b      	orrs	r3, r1
 800337e:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8003380:	e01b      	b.n	80033ba <HAL_ADCEx_InjectedConfigChannel+0x2ee>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800338c:	f023 030f 	bic.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	68d1      	ldr	r1, [r2, #12]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	430b      	orrs	r3, r1
 800339a:	6213      	str	r3, [r2, #32]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800339c:	e00d      	b.n	80033ba <HAL_ADCEx_InjectedConfigChannel+0x2ee>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80033a8:	f023 030f 	bic.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	68d1      	ldr	r1, [r2, #12]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6253      	str	r3, [r2, #36]	; 0x24
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80033b8:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d003      	beq.n	80033ca <HAL_ADCEx_InjectedConfigChannel+0x2fe>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80033c6:	2b11      	cmp	r3, #17
 80033c8:	d11b      	bne.n	8003402 <HAL_ADCEx_InjectedConfigChannel+0x336>
  {
    SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80033d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033d4:	6053      	str	r3, [r2, #4]
    
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d111      	bne.n	8003402 <HAL_ADCEx_InjectedConfigChannel+0x336>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a0f      	ldr	r2, [pc, #60]	; (8003420 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0c9a      	lsrs	r2, r3, #18
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0)
 80033f4:	e002      	b.n	80033fc <HAL_ADCEx_InjectedConfigChannel+0x330>
      {
        wait_loop_index--;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f9      	bne.n	80033f6 <HAL_ADCEx_InjectedConfigChannel+0x32a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bc90      	pop	{r4, r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012700 	.word	0x40012700
 800341c:	20000000 	.word	0x20000000
 8003420:	431bde83 	.word	0x431bde83

08003424 <__NVIC_SetPriorityGrouping>:
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003440:	4013      	ands	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800344c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003456:	4a04      	ldr	r2, [pc, #16]	; (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	60d3      	str	r3, [r2, #12]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_GetPriorityGrouping>:
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <__NVIC_GetPriorityGrouping+0x18>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f003 0307 	and.w	r3, r3, #7
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_EnableIRQ>:
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db0b      	blt.n	80034b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	4906      	ldr	r1, [pc, #24]	; (80034bc <__NVIC_EnableIRQ+0x34>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2001      	movs	r0, #1
 80034aa:	fa00 f202 	lsl.w	r2, r0, r2
 80034ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <SysTick_Config>:
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003588:	d301      	bcc.n	800358e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <SysTick_Config+0x40>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003596:	210f      	movs	r1, #15
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f7ff ff90 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <SysTick_Config+0x40>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <SysTick_Config+0x40>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000e010 	.word	0xe000e010

080035bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff2d 	bl	8003424 <__NVIC_SetPriorityGrouping>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff42 	bl	800346c <__NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff90 	bl	8003514 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5f 	bl	80034c0 <__NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff35 	bl	8003488 <__NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa2 	bl	8003578 <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d005      	beq.n	8003662 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2204      	movs	r2, #4
 800365a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e029      	b.n	80036b6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 020e 	bic.w	r2, r2, #14
 8003670:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f003 021c 	and.w	r2, r3, #28
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f202 	lsl.w	r2, r1, r2
 8003694:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
    }
  }
  return status;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80036d6:	e154      	b.n	8003982 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8146 	beq.w	800397c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d00b      	beq.n	8003710 <HAL_GPIO_Init+0x50>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d007      	beq.n	8003710 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003704:	2b11      	cmp	r3, #17
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b12      	cmp	r3, #18
 800370e:	d130      	bne.n	8003772 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	2203      	movs	r2, #3
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003746:	2201      	movs	r2, #1
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 0201 	and.w	r2, r3, #1
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	2203      	movs	r2, #3
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0xf2>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b12      	cmp	r3, #18
 80037b0:	d123      	bne.n	80037fa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	08da      	lsrs	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3208      	adds	r2, #8
 80037ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	220f      	movs	r2, #15
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4013      	ands	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	08da      	lsrs	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3208      	adds	r2, #8
 80037f4:	6939      	ldr	r1, [r7, #16]
 80037f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0203 	and.w	r2, r3, #3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80a0 	beq.w	800397c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383c:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_GPIO_Init+0x2dc>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_GPIO_Init+0x2dc>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6213      	str	r3, [r2, #32]
 8003848:	4b54      	ldr	r3, [pc, #336]	; (800399c <HAL_GPIO_Init+0x2dc>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003854:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	3302      	adds	r3, #2
 800385c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003860:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	220f      	movs	r2, #15
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a4a      	ldr	r2, [pc, #296]	; (80039a4 <HAL_GPIO_Init+0x2e4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d019      	beq.n	80038b4 <HAL_GPIO_Init+0x1f4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a49      	ldr	r2, [pc, #292]	; (80039a8 <HAL_GPIO_Init+0x2e8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <HAL_GPIO_Init+0x1f0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a48      	ldr	r2, [pc, #288]	; (80039ac <HAL_GPIO_Init+0x2ec>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00d      	beq.n	80038ac <HAL_GPIO_Init+0x1ec>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a47      	ldr	r2, [pc, #284]	; (80039b0 <HAL_GPIO_Init+0x2f0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d007      	beq.n	80038a8 <HAL_GPIO_Init+0x1e8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a46      	ldr	r2, [pc, #280]	; (80039b4 <HAL_GPIO_Init+0x2f4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_GPIO_Init+0x1e4>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e008      	b.n	80038b6 <HAL_GPIO_Init+0x1f6>
 80038a4:	2305      	movs	r3, #5
 80038a6:	e006      	b.n	80038b6 <HAL_GPIO_Init+0x1f6>
 80038a8:	2303      	movs	r3, #3
 80038aa:	e004      	b.n	80038b6 <HAL_GPIO_Init+0x1f6>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e002      	b.n	80038b6 <HAL_GPIO_Init+0x1f6>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_GPIO_Init+0x1f6>
 80038b4:	2300      	movs	r3, #0
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	f002 0203 	and.w	r2, r2, #3
 80038bc:	0092      	lsls	r2, r2, #2
 80038be:	4093      	lsls	r3, r2
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038c6:	4936      	ldr	r1, [pc, #216]	; (80039a0 <HAL_GPIO_Init+0x2e0>)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	3302      	adds	r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d4:	4b38      	ldr	r3, [pc, #224]	; (80039b8 <HAL_GPIO_Init+0x2f8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038f8:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <HAL_GPIO_Init+0x2f8>)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <HAL_GPIO_Init+0x2f8>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43db      	mvns	r3, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003922:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <HAL_GPIO_Init+0x2f8>)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003928:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <HAL_GPIO_Init+0x2f8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	43db      	mvns	r3, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800394c:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <HAL_GPIO_Init+0x2f8>)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003952:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <HAL_GPIO_Init+0x2f8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	43db      	mvns	r3, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003976:	4a10      	ldr	r2, [pc, #64]	; (80039b8 <HAL_GPIO_Init+0x2f8>)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3301      	adds	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	f47f aea3 	bne.w	80036d8 <HAL_GPIO_Init+0x18>
  }
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	40023800 	.word	0x40023800
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020c00 	.word	0x40020c00
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40010400 	.word	0x40010400

080039bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
 80039c8:	4613      	mov	r3, r2
 80039ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039cc:	787b      	ldrb	r3, [r7, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80039d8:	e003      	b.n	80039e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	041a      	lsls	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	619a      	str	r2, [r3, #24]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e31d      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fe:	4b94      	ldr	r3, [pc, #592]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a08:	4b91      	ldr	r3, [pc, #580]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d07b      	beq.n	8003b16 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d006      	beq.n	8003a32 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d10f      	bne.n	8003a4a <HAL_RCC_OscConfig+0x5e>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d10b      	bne.n	8003a4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a32:	4b87      	ldr	r3, [pc, #540]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d06a      	beq.n	8003b14 <HAL_RCC_OscConfig+0x128>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d166      	bne.n	8003b14 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e2f7      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b7f      	ldr	r3, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e02d      	b.n	8003abc <HAL_RCC_OscConfig+0xd0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCC_OscConfig+0x96>
 8003a68:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a78      	ldr	r2, [pc, #480]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e01c      	b.n	8003abc <HAL_RCC_OscConfig+0xd0>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xb8>
 8003a8a:	4b71      	ldr	r3, [pc, #452]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a70      	ldr	r2, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6d      	ldr	r2, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xd0>
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a69      	ldr	r2, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b67      	ldr	r3, [pc, #412]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a66      	ldr	r2, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fe4c 	bl	8002760 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fe fe48 	bl	8002760 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e2ad      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ade:	4b5c      	ldr	r3, [pc, #368]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fe fe38 	bl	8002760 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe fe34 	bl	8002760 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e299      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b06:	4b52      	ldr	r3, [pc, #328]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d05a      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d119      	bne.n	8003b62 <HAL_RCC_OscConfig+0x176>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b34:	4b46      	ldr	r3, [pc, #280]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x160>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e276      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	493d      	ldr	r1, [pc, #244]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b60:	e03a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d020      	beq.n	8003bac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6a:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <HAL_RCC_OscConfig+0x268>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe fdf6 	bl	8002760 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fe fdf2 	bl	8002760 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e257      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	492a      	ldr	r1, [pc, #168]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
 8003baa:	e015      	b.n	8003bd8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <HAL_RCC_OscConfig+0x268>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fe fdd5 	bl	8002760 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fe fdd1 	bl	8002760 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e236      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bcc:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80b8 	beq.w	8003d56 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d170      	bne.n	8003cce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bec:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x218>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e21a      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d921      	bls.n	8003c58 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fc15 	bl	8004448 <RCC_SetFlashLatencyFromMSIRange>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e208      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4906      	ldr	r1, [pc, #24]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	4901      	ldr	r1, [pc, #4]	; (8003c50 <HAL_RCC_OscConfig+0x264>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
 8003c4e:	e020      	b.n	8003c92 <HAL_RCC_OscConfig+0x2a6>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c58:	4ba4      	ldr	r3, [pc, #656]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	49a1      	ldr	r1, [pc, #644]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c6a:	4ba0      	ldr	r3, [pc, #640]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	499c      	ldr	r1, [pc, #624]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fbe0 	bl	8004448 <RCC_SetFlashLatencyFromMSIRange>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1d3      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	0b5b      	lsrs	r3, r3, #13
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ca2:	4a92      	ldr	r2, [pc, #584]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003ca4:	6892      	ldr	r2, [r2, #8]
 8003ca6:	0912      	lsrs	r2, r2, #4
 8003ca8:	f002 020f 	and.w	r2, r2, #15
 8003cac:	4990      	ldr	r1, [pc, #576]	; (8003ef0 <HAL_RCC_OscConfig+0x504>)
 8003cae:	5c8a      	ldrb	r2, [r1, r2]
 8003cb0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cb2:	4a90      	ldr	r2, [pc, #576]	; (8003ef4 <HAL_RCC_OscConfig+0x508>)
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cb6:	4b90      	ldr	r3, [pc, #576]	; (8003ef8 <HAL_RCC_OscConfig+0x50c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fd04 	bl	80026c8 <HAL_InitTick>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d045      	beq.n	8003d56 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	e1b5      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d029      	beq.n	8003d2a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cd6:	4b89      	ldr	r3, [pc, #548]	; (8003efc <HAL_RCC_OscConfig+0x510>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fd40 	bl	8002760 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ce4:	f7fe fd3c 	bl	8002760 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1a1      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cf6:	4b7d      	ldr	r3, [pc, #500]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d02:	4b7a      	ldr	r3, [pc, #488]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	4977      	ldr	r1, [pc, #476]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d14:	4b75      	ldr	r3, [pc, #468]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	4972      	ldr	r1, [pc, #456]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d2a:	4b74      	ldr	r3, [pc, #464]	; (8003efc <HAL_RCC_OscConfig+0x510>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe fd16 	bl	8002760 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d38:	f7fe fd12 	bl	8002760 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e177      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d4a:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d030      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x514>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d70:	f7fe fcf6 	bl	8002760 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fe fcf2 	bl	8002760 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e157      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d8a:	4b58      	ldr	r3, [pc, #352]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x38c>
 8003d96:	e015      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_RCC_OscConfig+0x514>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9e:	f7fe fcdf 	bl	8002760 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fe fcdb 	bl	8002760 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e140      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db8:	4b4c      	ldr	r3, [pc, #304]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80b5 	beq.w	8003f3c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b45      	ldr	r3, [pc, #276]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b42      	ldr	r3, [pc, #264]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	4a41      	ldr	r2, [pc, #260]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6253      	str	r3, [r2, #36]	; 0x24
 8003dee:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCC_OscConfig+0x518>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d118      	bne.n	8003e3c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <HAL_RCC_OscConfig+0x518>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a3d      	ldr	r2, [pc, #244]	; (8003f04 <HAL_RCC_OscConfig+0x518>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fe fca3 	bl	8002760 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7fe fc9f 	bl	8002760 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b64      	cmp	r3, #100	; 0x64
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e104      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_RCC_OscConfig+0x518>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x466>
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	4a28      	ldr	r2, [pc, #160]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4e:	6353      	str	r3, [r2, #52]	; 0x34
 8003e50:	e02d      	b.n	8003eae <HAL_RCC_OscConfig+0x4c2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x488>
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	4a23      	ldr	r2, [pc, #140]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e64:	6353      	str	r3, [r2, #52]	; 0x34
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	4a20      	ldr	r2, [pc, #128]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e70:	6353      	str	r3, [r2, #52]	; 0x34
 8003e72:	e01c      	b.n	8003eae <HAL_RCC_OscConfig+0x4c2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x4aa>
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e86:	6353      	str	r3, [r2, #52]	; 0x34
 8003e88:	4b18      	ldr	r3, [pc, #96]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8c:	4a17      	ldr	r2, [pc, #92]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e92:	6353      	str	r3, [r2, #52]	; 0x34
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0x4c2>
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea0:	6353      	str	r3, [r2, #52]	; 0x34
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eac:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d015      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb6:	f7fe fc53 	bl	8002760 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fe fc4f 	bl	8002760 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0b2      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_OscConfig+0x500>)
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ee      	beq.n	8003ebe <HAL_RCC_OscConfig+0x4d2>
 8003ee0:	e023      	b.n	8003f2a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fc3d 	bl	8002760 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ee8:	e019      	b.n	8003f1e <HAL_RCC_OscConfig+0x532>
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	08009074 	.word	0x08009074
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20000004 	.word	0x20000004
 8003efc:	42470020 	.word	0x42470020
 8003f00:	42470680 	.word	0x42470680
 8003f04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7fe fc2a 	bl	8002760 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e08d      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f1e:	4b49      	ldr	r3, [pc, #292]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ee      	bne.n	8003f08 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f30:	4b44      	ldr	r3, [pc, #272]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	4a43      	ldr	r2, [pc, #268]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d079      	beq.n	8004038 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	d056      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d13b      	bne.n	8003fca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_RCC_OscConfig+0x65c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fe fc02 	bl	8002760 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fe fbfe 	bl	8002760 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e063      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f72:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	4319      	orrs	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	430b      	orrs	r3, r1
 8003f96:	492b      	ldr	r1, [pc, #172]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_RCC_OscConfig+0x65c>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fe fbdd 	bl	8002760 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fe fbd9 	bl	8002760 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e03e      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fbc:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x5be>
 8003fc8:	e036      	b.n	8004038 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_RCC_OscConfig+0x65c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fbc6 	bl	8002760 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fe fbc2 	bl	8002760 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e027      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fea:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x5ec>
 8003ff6:	e01f      	b.n	8004038 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e01a      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_RCC_OscConfig+0x658>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	429a      	cmp	r2, r3
 8004016:	d10d      	bne.n	8004034 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	42470060 	.word	0x42470060

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e11a      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b8f      	ldr	r3, [pc, #572]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d919      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCC_ClockConfig+0x34>
 8004074:	4b8a      	ldr	r3, [pc, #552]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a89      	ldr	r2, [pc, #548]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b87      	ldr	r3, [pc, #540]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 0201 	bic.w	r2, r3, #1
 8004088:	4985      	ldr	r1, [pc, #532]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004090:	4b83      	ldr	r3, [pc, #524]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0f9      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ae:	4b7d      	ldr	r3, [pc, #500]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	497a      	ldr	r1, [pc, #488]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 808e 	beq.w	80041ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040d6:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d121      	bne.n	8004126 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0d7      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ee:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d115      	bne.n	8004126 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0cb      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0bf      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0b7      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004126:	4b5f      	ldr	r3, [pc, #380]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 0203 	bic.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	495c      	ldr	r1, [pc, #368]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004138:	f7fe fb12 	bl	8002760 <HAL_GetTick>
 800413c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d112      	bne.n	800416c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fe fb0a 	bl	8002760 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e09b      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800415e:	4b51      	ldr	r3, [pc, #324]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	d1ee      	bne.n	8004148 <HAL_RCC_ClockConfig+0xfc>
 800416a:	e03e      	b.n	80041ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d112      	bne.n	800419a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004174:	e00a      	b.n	800418c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004176:	f7fe faf3 	bl	8002760 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	; 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e084      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800418c:	4b45      	ldr	r3, [pc, #276]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d1ee      	bne.n	8004176 <HAL_RCC_ClockConfig+0x12a>
 8004198:	e027      	b.n	80041ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d11d      	bne.n	80041de <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fe fadc 	bl	8002760 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e06d      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d1ee      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x158>
 80041c6:	e010      	b.n	80041ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fe faca 	bl	8002760 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e05b      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1ee      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ea:	4b2d      	ldr	r3, [pc, #180]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d219      	bcs.n	800422c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d105      	bne.n	800420a <HAL_RCC_ClockConfig+0x1be>
 80041fe:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 0201 	bic.w	r2, r3, #1
 8004212:	4923      	ldr	r1, [pc, #140]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <HAL_RCC_ClockConfig+0x254>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e034      	b.n	8004296 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4917      	ldr	r1, [pc, #92]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	490f      	ldr	r1, [pc, #60]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426a:	f000 f823 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800426e:	4601      	mov	r1, r0
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <HAL_RCC_ClockConfig+0x258>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <HAL_RCC_ClockConfig+0x25c>)
 800427c:	5cd3      	ldrb	r3, [r2, r3]
 800427e:	fa21 f303 	lsr.w	r3, r1, r3
 8004282:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x260>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_RCC_ClockConfig+0x264>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fa1c 	bl	80026c8 <HAL_InitTick>
 8004290:	4603      	mov	r3, r0
 8004292:	72fb      	strb	r3, [r7, #11]

  return status;
 8004294:	7afb      	ldrb	r3, [r7, #11]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	08009074 	.word	0x08009074
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000004 	.word	0x20000004

080042b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80042ba:	4b5f      	ldr	r3, [pc, #380]	; (8004438 <HAL_RCC_GetSysClockFreq+0x184>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d007      	beq.n	80042da <HAL_RCC_GetSysClockFreq+0x26>
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d008      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x2c>
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	f040 809f 	bne.w	8004412 <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b59      	ldr	r3, [pc, #356]	; (800443c <HAL_RCC_GetSysClockFreq+0x188>)
 80042d6:	613b      	str	r3, [r7, #16]
      break;
 80042d8:	e0a9      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042da:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_GetSysClockFreq+0x18c>)
 80042dc:	613b      	str	r3, [r7, #16]
      break;
 80042de:	e0a6      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	0c9b      	lsrs	r3, r3, #18
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	4a56      	ldr	r2, [pc, #344]	; (8004444 <HAL_RCC_GetSysClockFreq+0x190>)
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	0d9b      	lsrs	r3, r3, #22
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fa:	4b4f      	ldr	r3, [pc, #316]	; (8004438 <HAL_RCC_GetSysClockFreq+0x184>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d041      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	461d      	mov	r5, r3
 800430a:	f04f 0600 	mov.w	r6, #0
 800430e:	4629      	mov	r1, r5
 8004310:	4632      	mov	r2, r6
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	f04f 0400 	mov.w	r4, #0
 800431a:	0154      	lsls	r4, r2, #5
 800431c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004320:	014b      	lsls	r3, r1, #5
 8004322:	4619      	mov	r1, r3
 8004324:	4622      	mov	r2, r4
 8004326:	1b49      	subs	r1, r1, r5
 8004328:	eb62 0206 	sbc.w	r2, r2, r6
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	0194      	lsls	r4, r2, #6
 8004336:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800433a:	018b      	lsls	r3, r1, #6
 800433c:	1a5b      	subs	r3, r3, r1
 800433e:	eb64 0402 	sbc.w	r4, r4, r2
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	00e2      	lsls	r2, r4, #3
 800434c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004350:	00d9      	lsls	r1, r3, #3
 8004352:	460b      	mov	r3, r1
 8004354:	4614      	mov	r4, r2
 8004356:	195b      	adds	r3, r3, r5
 8004358:	eb44 0406 	adc.w	r4, r4, r6
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	0262      	lsls	r2, r4, #9
 8004366:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800436a:	0259      	lsls	r1, r3, #9
 800436c:	460b      	mov	r3, r1
 800436e:	4614      	mov	r4, r2
 8004370:	4618      	mov	r0, r3
 8004372:	4621      	mov	r1, r4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f04f 0400 	mov.w	r4, #0
 800437a:	461a      	mov	r2, r3
 800437c:	4623      	mov	r3, r4
 800437e:	f7fc ff05 	bl	800118c <__aeabi_uldivmod>
 8004382:	4603      	mov	r3, r0
 8004384:	460c      	mov	r4, r1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e040      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	461d      	mov	r5, r3
 800438e:	f04f 0600 	mov.w	r6, #0
 8004392:	4629      	mov	r1, r5
 8004394:	4632      	mov	r2, r6
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	f04f 0400 	mov.w	r4, #0
 800439e:	0154      	lsls	r4, r2, #5
 80043a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043a4:	014b      	lsls	r3, r1, #5
 80043a6:	4619      	mov	r1, r3
 80043a8:	4622      	mov	r2, r4
 80043aa:	1b49      	subs	r1, r1, r5
 80043ac:	eb62 0206 	sbc.w	r2, r2, r6
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	0194      	lsls	r4, r2, #6
 80043ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043be:	018b      	lsls	r3, r1, #6
 80043c0:	1a5b      	subs	r3, r3, r1
 80043c2:	eb64 0402 	sbc.w	r4, r4, r2
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	00e2      	lsls	r2, r4, #3
 80043d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043d4:	00d9      	lsls	r1, r3, #3
 80043d6:	460b      	mov	r3, r1
 80043d8:	4614      	mov	r4, r2
 80043da:	195b      	adds	r3, r3, r5
 80043dc:	eb44 0406 	adc.w	r4, r4, r6
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	02a2      	lsls	r2, r4, #10
 80043ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043ee:	0299      	lsls	r1, r3, #10
 80043f0:	460b      	mov	r3, r1
 80043f2:	4614      	mov	r4, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	4621      	mov	r1, r4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f04f 0400 	mov.w	r4, #0
 80043fe:	461a      	mov	r2, r3
 8004400:	4623      	mov	r3, r4
 8004402:	f7fc fec3 	bl	800118c <__aeabi_uldivmod>
 8004406:	4603      	mov	r3, r0
 8004408:	460c      	mov	r4, r1
 800440a:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	613b      	str	r3, [r7, #16]
      break;
 8004410:	e00d      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004412:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCC_GetSysClockFreq+0x184>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	0b5b      	lsrs	r3, r3, #13
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	613b      	str	r3, [r7, #16]
      break;
 800442c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442e:	693b      	ldr	r3, [r7, #16]
}
 8004430:	4618      	mov	r0, r3
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004438:	40023800 	.word	0x40023800
 800443c:	00f42400 	.word	0x00f42400
 8004440:	007a1200 	.word	0x007a1200
 8004444:	08009068 	.word	0x08009068

08004448 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d12c      	bne.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004460:	4b26      	ldr	r3, [pc, #152]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800446c:	4b24      	ldr	r3, [pc, #144]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e016      	b.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004478:	4b20      	ldr	r3, [pc, #128]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	4a1f      	ldr	r2, [pc, #124]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004482:	6253      	str	r3, [r2, #36]	; 0x24
 8004484:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004498:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80044ac:	d105      	bne.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x72>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044b4:	d101      	bne.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80044b6:	2301      	movs	r3, #1
 80044b8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0f      	ldr	r2, [pc, #60]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c6:	f043 0304 	orr.w	r3, r3, #4
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 0201 	bic.w	r2, r3, #1
 80044d4:	490b      	ldr	r1, [pc, #44]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d001      	beq.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	40007000 	.word	0x40007000
 8004504:	40023c00 	.word	0x40023c00

08004508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e06e      	b.n	80045f8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452a:	d009      	beq.n	8004540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
 8004532:	e005      	b.n	8004540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd ff5e 	bl	800241c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1a      	lsrs	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f002 0204 	and.w	r2, r2, #4
 80045e6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_SPI_Transmit_IT+0x20>
 800461c:	2302      	movs	r3, #2
 800461e:	e06f      	b.n	8004700 <HAL_SPI_Transmit_IT+0x100>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit_IT+0x34>
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004638:	e05d      	b.n	80046f6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d002      	beq.n	800464c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004646:	2302      	movs	r3, #2
 8004648:	75fb      	strb	r3, [r7, #23]
    goto error;
 800464a:	e054      	b.n	80046f6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2203      	movs	r2, #3
 8004650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_SPI_Transmit_IT+0x10c>)
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
 8004692:	e002      	b.n	800469a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <HAL_SPI_Transmit_IT+0x110>)
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a2:	d10f      	bne.n	80046c4 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80046d2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d008      	beq.n	80046f4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e000      	b.n	80046f6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80046f4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004700:	4618      	mov	r0, r3
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	08004977 	.word	0x08004977
 8004710:	08004931 	.word	0x08004931

08004714 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10f      	bne.n	8004758 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
    return;
 8004756:	e0bf      	b.n	80048d8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_SPI_IRQHandler+0x66>
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	09db      	lsrs	r3, r3, #7
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
    return;
 8004778:	e0ae      	b.n	80048d8 <HAL_SPI_IRQHandler+0x1c4>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_SPI_IRQHandler+0x80>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80a2 	beq.w	80048d8 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 809b 	beq.w	80048d8 <HAL_SPI_IRQHandler+0x1c4>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d023      	beq.n	80047f6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d011      	beq.n	80047de <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	f043 0204 	orr.w	r2, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	e00b      	b.n	80047f6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	693b      	ldr	r3, [r7, #16]
        return;
 80047f4:	e070      	b.n	80048d8 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d014      	beq.n	800482c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	f043 0201 	orr.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	2b00      	cmp	r3, #0
 8004832:	d050      	beq.n	80048d6 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004842:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <HAL_SPI_IRQHandler+0x14c>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d034      	beq.n	80048ca <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0203 	bic.w	r2, r2, #3
 800486e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d011      	beq.n	800489c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487c:	4a18      	ldr	r2, [pc, #96]	; (80048e0 <HAL_SPI_IRQHandler+0x1cc>)
 800487e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe feda 	bl	800363e <HAL_DMA_Abort_IT>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <HAL_SPI_IRQHandler+0x1cc>)
 80048aa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fe fec4 	bl	800363e <HAL_DMA_Abort_IT>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80048c8:	e003      	b.n	80048d2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f813 	bl	80048f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048d0:	e000      	b.n	80048d4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80048d2:	bf00      	nop
    return;
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
  }
}
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	08004909 	.word	0x08004909

080048e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff ffe7 	bl	80048f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8f1 	bl	8004b50 <SPI_CloseTx_ISR>
  }
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	1c9a      	adds	r2, r3, #2
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f8cf 	bl	8004b50 <SPI_CloseTx_ISR>
  }
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049cc:	f7fd fec8 	bl	8002760 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	4413      	add	r3, r2
 80049da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049dc:	f7fd fec0 	bl	8002760 <HAL_GetTick>
 80049e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049e2:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	015b      	lsls	r3, r3, #5
 80049e8:	0d1b      	lsrs	r3, r3, #20
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049f2:	e054      	b.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d050      	beq.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049fc:	f7fd feb0 	bl	8002760 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d902      	bls.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d13d      	bne.n	8004a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2a:	d111      	bne.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a34:	d004      	beq.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	d107      	bne.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a58:	d10f      	bne.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e017      	b.n	8004abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d19b      	bne.n	80049f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000000 	.word	0x20000000

08004acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <SPI_EndRxTxTransaction+0x7c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <SPI_EndRxTxTransaction+0x80>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0d5b      	lsrs	r3, r3, #21
 8004ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af6:	d112      	bne.n	8004b1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2200      	movs	r2, #0
 8004b00:	2180      	movs	r1, #128	; 0x80
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff ff5a 	bl	80049bc <SPI_WaitFlagStateUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d016      	beq.n	8004b3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e00f      	b.n	8004b3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b80      	cmp	r3, #128	; 0x80
 8004b36:	d0f2      	beq.n	8004b1e <SPI_EndRxTxTransaction+0x52>
 8004b38:	e000      	b.n	8004b3c <SPI_EndRxTxTransaction+0x70>
        break;
 8004b3a:	bf00      	nop
  }

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	165e9f81 	.word	0x165e9f81

08004b50 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004b58:	4b2c      	ldr	r3, [pc, #176]	; (8004c0c <SPI_CloseTx_ISR+0xbc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <SPI_CloseTx_ISR+0xc0>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	0a5b      	lsrs	r3, r3, #9
 8004b64:	2264      	movs	r2, #100	; 0x64
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b6c:	f7fd fdf8 	bl	8002760 <HAL_GetTick>
 8004b70:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b84:	e009      	b.n	8004b9a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0eb      	beq.n	8004b72 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ba8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	2164      	movs	r1, #100	; 0x64
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ff8c 	bl	8004acc <SPI_EndRxTxTransaction>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	f043 0220 	orr.w	r2, r3, #32
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fe7e 	bl	80048f6 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004bfa:	e002      	b.n	8004c02 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff fe71 	bl	80048e4 <HAL_SPI_TxCpltCallback>
}
 8004c02:	bf00      	nop
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	057619f1 	.word	0x057619f1

08004c14 <__errno>:
 8004c14:	4b01      	ldr	r3, [pc, #4]	; (8004c1c <__errno+0x8>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <__libc_init_array>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	2500      	movs	r5, #0
 8004c24:	4e0c      	ldr	r6, [pc, #48]	; (8004c58 <__libc_init_array+0x38>)
 8004c26:	4c0d      	ldr	r4, [pc, #52]	; (8004c5c <__libc_init_array+0x3c>)
 8004c28:	1ba4      	subs	r4, r4, r6
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	42a5      	cmp	r5, r4
 8004c2e:	d109      	bne.n	8004c44 <__libc_init_array+0x24>
 8004c30:	f004 fa02 	bl	8009038 <_init>
 8004c34:	2500      	movs	r5, #0
 8004c36:	4e0a      	ldr	r6, [pc, #40]	; (8004c60 <__libc_init_array+0x40>)
 8004c38:	4c0a      	ldr	r4, [pc, #40]	; (8004c64 <__libc_init_array+0x44>)
 8004c3a:	1ba4      	subs	r4, r4, r6
 8004c3c:	10a4      	asrs	r4, r4, #2
 8004c3e:	42a5      	cmp	r5, r4
 8004c40:	d105      	bne.n	8004c4e <__libc_init_array+0x2e>
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c48:	4798      	blx	r3
 8004c4a:	3501      	adds	r5, #1
 8004c4c:	e7ee      	b.n	8004c2c <__libc_init_array+0xc>
 8004c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c52:	4798      	blx	r3
 8004c54:	3501      	adds	r5, #1
 8004c56:	e7f2      	b.n	8004c3e <__libc_init_array+0x1e>
 8004c58:	080093b0 	.word	0x080093b0
 8004c5c:	080093b0 	.word	0x080093b0
 8004c60:	080093b0 	.word	0x080093b0
 8004c64:	080093b4 	.word	0x080093b4

08004c68 <memset>:
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4402      	add	r2, r0
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <memset+0xa>
 8004c70:	4770      	bx	lr
 8004c72:	f803 1b01 	strb.w	r1, [r3], #1
 8004c76:	e7f9      	b.n	8004c6c <memset+0x4>

08004c78 <__cvt>:
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7e:	461e      	mov	r6, r3
 8004c80:	bfbb      	ittet	lt
 8004c82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	461e      	movlt	r6, r3
 8004c88:	2300      	movge	r3, #0
 8004c8a:	232d      	movlt	r3, #45	; 0x2d
 8004c8c:	b088      	sub	sp, #32
 8004c8e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004c90:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004c94:	f027 0720 	bic.w	r7, r7, #32
 8004c98:	2f46      	cmp	r7, #70	; 0x46
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004c9e:	700b      	strb	r3, [r1, #0]
 8004ca0:	d004      	beq.n	8004cac <__cvt+0x34>
 8004ca2:	2f45      	cmp	r7, #69	; 0x45
 8004ca4:	d100      	bne.n	8004ca8 <__cvt+0x30>
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e000      	b.n	8004cae <__cvt+0x36>
 8004cac:	2303      	movs	r3, #3
 8004cae:	aa07      	add	r2, sp, #28
 8004cb0:	9204      	str	r2, [sp, #16]
 8004cb2:	aa06      	add	r2, sp, #24
 8004cb4:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004cb8:	e9cd 3500 	strd	r3, r5, [sp]
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4633      	mov	r3, r6
 8004cc0:	f001 fd96 	bl	80067f0 <_dtoa_r>
 8004cc4:	2f47      	cmp	r7, #71	; 0x47
 8004cc6:	4680      	mov	r8, r0
 8004cc8:	d102      	bne.n	8004cd0 <__cvt+0x58>
 8004cca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ccc:	07db      	lsls	r3, r3, #31
 8004cce:	d526      	bpl.n	8004d1e <__cvt+0xa6>
 8004cd0:	2f46      	cmp	r7, #70	; 0x46
 8004cd2:	eb08 0905 	add.w	r9, r8, r5
 8004cd6:	d111      	bne.n	8004cfc <__cvt+0x84>
 8004cd8:	f898 3000 	ldrb.w	r3, [r8]
 8004cdc:	2b30      	cmp	r3, #48	; 0x30
 8004cde:	d10a      	bne.n	8004cf6 <__cvt+0x7e>
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	f7fb fe76 	bl	80009d8 <__aeabi_dcmpeq>
 8004cec:	b918      	cbnz	r0, 8004cf6 <__cvt+0x7e>
 8004cee:	f1c5 0501 	rsb	r5, r5, #1
 8004cf2:	f8ca 5000 	str.w	r5, [sl]
 8004cf6:	f8da 3000 	ldr.w	r3, [sl]
 8004cfa:	4499      	add	r9, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2300      	movs	r3, #0
 8004d00:	4620      	mov	r0, r4
 8004d02:	4631      	mov	r1, r6
 8004d04:	f7fb fe68 	bl	80009d8 <__aeabi_dcmpeq>
 8004d08:	b938      	cbnz	r0, 8004d1a <__cvt+0xa2>
 8004d0a:	2230      	movs	r2, #48	; 0x30
 8004d0c:	9b07      	ldr	r3, [sp, #28]
 8004d0e:	454b      	cmp	r3, r9
 8004d10:	d205      	bcs.n	8004d1e <__cvt+0xa6>
 8004d12:	1c59      	adds	r1, r3, #1
 8004d14:	9107      	str	r1, [sp, #28]
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e7f8      	b.n	8004d0c <__cvt+0x94>
 8004d1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d1e:	4640      	mov	r0, r8
 8004d20:	9b07      	ldr	r3, [sp, #28]
 8004d22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d24:	eba3 0308 	sub.w	r3, r3, r8
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	b008      	add	sp, #32
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004d30 <__exponent>:
 8004d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d32:	2900      	cmp	r1, #0
 8004d34:	bfb4      	ite	lt
 8004d36:	232d      	movlt	r3, #45	; 0x2d
 8004d38:	232b      	movge	r3, #43	; 0x2b
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	bfb8      	it	lt
 8004d3e:	4249      	neglt	r1, r1
 8004d40:	2909      	cmp	r1, #9
 8004d42:	f804 2b02 	strb.w	r2, [r4], #2
 8004d46:	7043      	strb	r3, [r0, #1]
 8004d48:	dd21      	ble.n	8004d8e <__exponent+0x5e>
 8004d4a:	f10d 0307 	add.w	r3, sp, #7
 8004d4e:	461f      	mov	r7, r3
 8004d50:	260a      	movs	r6, #10
 8004d52:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d56:	fb06 1115 	mls	r1, r6, r5, r1
 8004d5a:	2d09      	cmp	r5, #9
 8004d5c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004d60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d64:	f103 32ff 	add.w	r2, r3, #4294967295
 8004d68:	4629      	mov	r1, r5
 8004d6a:	dc09      	bgt.n	8004d80 <__exponent+0x50>
 8004d6c:	3130      	adds	r1, #48	; 0x30
 8004d6e:	3b02      	subs	r3, #2
 8004d70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d74:	42bb      	cmp	r3, r7
 8004d76:	4622      	mov	r2, r4
 8004d78:	d304      	bcc.n	8004d84 <__exponent+0x54>
 8004d7a:	1a10      	subs	r0, r2, r0
 8004d7c:	b003      	add	sp, #12
 8004d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d80:	4613      	mov	r3, r2
 8004d82:	e7e6      	b.n	8004d52 <__exponent+0x22>
 8004d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d88:	f804 2b01 	strb.w	r2, [r4], #1
 8004d8c:	e7f2      	b.n	8004d74 <__exponent+0x44>
 8004d8e:	2330      	movs	r3, #48	; 0x30
 8004d90:	4419      	add	r1, r3
 8004d92:	7083      	strb	r3, [r0, #2]
 8004d94:	1d02      	adds	r2, r0, #4
 8004d96:	70c1      	strb	r1, [r0, #3]
 8004d98:	e7ef      	b.n	8004d7a <__exponent+0x4a>
	...

08004d9c <_printf_float>:
 8004d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da0:	b091      	sub	sp, #68	; 0x44
 8004da2:	460c      	mov	r4, r1
 8004da4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004da6:	4693      	mov	fp, r2
 8004da8:	461e      	mov	r6, r3
 8004daa:	4605      	mov	r5, r0
 8004dac:	f002 fecc 	bl	8007b48 <_localeconv_r>
 8004db0:	6803      	ldr	r3, [r0, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	9309      	str	r3, [sp, #36]	; 0x24
 8004db6:	f7fb f9e3 	bl	8000180 <strlen>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	900a      	str	r0, [sp, #40]	; 0x28
 8004dc2:	3307      	adds	r3, #7
 8004dc4:	f023 0307 	bic.w	r3, r3, #7
 8004dc8:	f103 0208 	add.w	r2, r3, #8
 8004dcc:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004dd0:	f8d4 a000 	ldr.w	sl, [r4]
 8004dd4:	603a      	str	r2, [r7, #0]
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dde:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004de2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dec:	4ba6      	ldr	r3, [pc, #664]	; (8005088 <_printf_float+0x2ec>)
 8004dee:	4638      	mov	r0, r7
 8004df0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004df2:	f7fb fe23 	bl	8000a3c <__aeabi_dcmpun>
 8004df6:	bb68      	cbnz	r0, 8004e54 <_printf_float+0xb8>
 8004df8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfc:	4ba2      	ldr	r3, [pc, #648]	; (8005088 <_printf_float+0x2ec>)
 8004dfe:	4638      	mov	r0, r7
 8004e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e02:	f7fb fdfd 	bl	8000a00 <__aeabi_dcmple>
 8004e06:	bb28      	cbnz	r0, 8004e54 <_printf_float+0xb8>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	4649      	mov	r1, r9
 8004e10:	f7fb fdec 	bl	80009ec <__aeabi_dcmplt>
 8004e14:	b110      	cbz	r0, 8004e1c <_printf_float+0x80>
 8004e16:	232d      	movs	r3, #45	; 0x2d
 8004e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e1c:	4f9b      	ldr	r7, [pc, #620]	; (800508c <_printf_float+0x2f0>)
 8004e1e:	4b9c      	ldr	r3, [pc, #624]	; (8005090 <_printf_float+0x2f4>)
 8004e20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e24:	bf98      	it	ls
 8004e26:	461f      	movls	r7, r3
 8004e28:	2303      	movs	r3, #3
 8004e2a:	f04f 0900 	mov.w	r9, #0
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	f02a 0304 	bic.w	r3, sl, #4
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	9600      	str	r6, [sp, #0]
 8004e38:	465b      	mov	r3, fp
 8004e3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 f9e2 	bl	8005208 <_printf_common>
 8004e44:	3001      	adds	r0, #1
 8004e46:	f040 8090 	bne.w	8004f6a <_printf_float+0x1ce>
 8004e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4e:	b011      	add	sp, #68	; 0x44
 8004e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e54:	463a      	mov	r2, r7
 8004e56:	464b      	mov	r3, r9
 8004e58:	4638      	mov	r0, r7
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	f7fb fdee 	bl	8000a3c <__aeabi_dcmpun>
 8004e60:	b110      	cbz	r0, 8004e68 <_printf_float+0xcc>
 8004e62:	4f8c      	ldr	r7, [pc, #560]	; (8005094 <_printf_float+0x2f8>)
 8004e64:	4b8c      	ldr	r3, [pc, #560]	; (8005098 <_printf_float+0x2fc>)
 8004e66:	e7db      	b.n	8004e20 <_printf_float+0x84>
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004e6e:	1c59      	adds	r1, r3, #1
 8004e70:	a80d      	add	r0, sp, #52	; 0x34
 8004e72:	a90e      	add	r1, sp, #56	; 0x38
 8004e74:	d140      	bne.n	8004ef8 <_printf_float+0x15c>
 8004e76:	2306      	movs	r3, #6
 8004e78:	6063      	str	r3, [r4, #4]
 8004e7a:	f04f 0c00 	mov.w	ip, #0
 8004e7e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004e82:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004e86:	6863      	ldr	r3, [r4, #4]
 8004e88:	6022      	str	r2, [r4, #0]
 8004e8a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	463a      	mov	r2, r7
 8004e92:	464b      	mov	r3, r9
 8004e94:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f7ff feed 	bl	8004c78 <__cvt>
 8004e9e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004ea2:	2b47      	cmp	r3, #71	; 0x47
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	d109      	bne.n	8004ebc <_printf_float+0x120>
 8004ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eaa:	1cd8      	adds	r0, r3, #3
 8004eac:	db02      	blt.n	8004eb4 <_printf_float+0x118>
 8004eae:	6862      	ldr	r2, [r4, #4]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	dd47      	ble.n	8004f44 <_printf_float+0x1a8>
 8004eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8004eb8:	fa5f f888 	uxtb.w	r8, r8
 8004ebc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004ec0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ec2:	d824      	bhi.n	8004f0e <_printf_float+0x172>
 8004ec4:	3901      	subs	r1, #1
 8004ec6:	4642      	mov	r2, r8
 8004ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ecc:	910d      	str	r1, [sp, #52]	; 0x34
 8004ece:	f7ff ff2f 	bl	8004d30 <__exponent>
 8004ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ed4:	4681      	mov	r9, r0
 8004ed6:	1813      	adds	r3, r2, r0
 8004ed8:	2a01      	cmp	r2, #1
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	dc02      	bgt.n	8004ee4 <_printf_float+0x148>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	07d1      	lsls	r1, r2, #31
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_float+0x14c>
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0a2      	beq.n	8004e36 <_printf_float+0x9a>
 8004ef0:	232d      	movs	r3, #45	; 0x2d
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef6:	e79e      	b.n	8004e36 <_printf_float+0x9a>
 8004ef8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004efc:	f000 816e 	beq.w	80051dc <_printf_float+0x440>
 8004f00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f04:	d1b9      	bne.n	8004e7a <_printf_float+0xde>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1b7      	bne.n	8004e7a <_printf_float+0xde>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e7b4      	b.n	8004e78 <_printf_float+0xdc>
 8004f0e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004f12:	d119      	bne.n	8004f48 <_printf_float+0x1ac>
 8004f14:	2900      	cmp	r1, #0
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	dd0c      	ble.n	8004f34 <_printf_float+0x198>
 8004f1a:	6121      	str	r1, [r4, #16]
 8004f1c:	b913      	cbnz	r3, 8004f24 <_printf_float+0x188>
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	07d2      	lsls	r2, r2, #31
 8004f22:	d502      	bpl.n	8004f2a <_printf_float+0x18e>
 8004f24:	3301      	adds	r3, #1
 8004f26:	440b      	add	r3, r1
 8004f28:	6123      	str	r3, [r4, #16]
 8004f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f2c:	f04f 0900 	mov.w	r9, #0
 8004f30:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f32:	e7d9      	b.n	8004ee8 <_printf_float+0x14c>
 8004f34:	b913      	cbnz	r3, 8004f3c <_printf_float+0x1a0>
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	07d0      	lsls	r0, r2, #31
 8004f3a:	d501      	bpl.n	8004f40 <_printf_float+0x1a4>
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	e7f3      	b.n	8004f28 <_printf_float+0x18c>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e7f1      	b.n	8004f28 <_printf_float+0x18c>
 8004f44:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004f48:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	db05      	blt.n	8004f5c <_printf_float+0x1c0>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	6123      	str	r3, [r4, #16]
 8004f54:	07d1      	lsls	r1, r2, #31
 8004f56:	d5e8      	bpl.n	8004f2a <_printf_float+0x18e>
 8004f58:	3301      	adds	r3, #1
 8004f5a:	e7e5      	b.n	8004f28 <_printf_float+0x18c>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bfcc      	ite	gt
 8004f60:	2301      	movgt	r3, #1
 8004f62:	f1c3 0302 	rsble	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	e7de      	b.n	8004f28 <_printf_float+0x18c>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	055a      	lsls	r2, r3, #21
 8004f6e:	d407      	bmi.n	8004f80 <_printf_float+0x1e4>
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	463a      	mov	r2, r7
 8004f74:	4659      	mov	r1, fp
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b0      	blx	r6
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d129      	bne.n	8004fd2 <_printf_float+0x236>
 8004f7e:	e764      	b.n	8004e4a <_printf_float+0xae>
 8004f80:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004f84:	f240 80d7 	bls.w	8005136 <_printf_float+0x39a>
 8004f88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f7fb fd22 	bl	80009d8 <__aeabi_dcmpeq>
 8004f94:	b388      	cbz	r0, 8004ffa <_printf_float+0x25e>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4a40      	ldr	r2, [pc, #256]	; (800509c <_printf_float+0x300>)
 8004f9a:	4659      	mov	r1, fp
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b0      	blx	r6
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	f43f af52 	beq.w	8004e4a <_printf_float+0xae>
 8004fa6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004faa:	429a      	cmp	r2, r3
 8004fac:	db02      	blt.n	8004fb4 <_printf_float+0x218>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	07d8      	lsls	r0, r3, #31
 8004fb2:	d50e      	bpl.n	8004fd2 <_printf_float+0x236>
 8004fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fb8:	4659      	mov	r1, fp
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b0      	blx	r6
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f af43 	beq.w	8004e4a <_printf_float+0xae>
 8004fc4:	2700      	movs	r7, #0
 8004fc6:	f104 081a 	add.w	r8, r4, #26
 8004fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	42bb      	cmp	r3, r7
 8004fd0:	dc09      	bgt.n	8004fe6 <_printf_float+0x24a>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	079f      	lsls	r7, r3, #30
 8004fd6:	f100 80fd 	bmi.w	80051d4 <_printf_float+0x438>
 8004fda:	68e0      	ldr	r0, [r4, #12]
 8004fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fde:	4298      	cmp	r0, r3
 8004fe0:	bfb8      	it	lt
 8004fe2:	4618      	movlt	r0, r3
 8004fe4:	e733      	b.n	8004e4e <_printf_float+0xb2>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	4642      	mov	r2, r8
 8004fea:	4659      	mov	r1, fp
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b0      	blx	r6
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	f43f af2a 	beq.w	8004e4a <_printf_float+0xae>
 8004ff6:	3701      	adds	r7, #1
 8004ff8:	e7e7      	b.n	8004fca <_printf_float+0x22e>
 8004ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dc2b      	bgt.n	8005058 <_printf_float+0x2bc>
 8005000:	2301      	movs	r3, #1
 8005002:	4a26      	ldr	r2, [pc, #152]	; (800509c <_printf_float+0x300>)
 8005004:	4659      	mov	r1, fp
 8005006:	4628      	mov	r0, r5
 8005008:	47b0      	blx	r6
 800500a:	3001      	adds	r0, #1
 800500c:	f43f af1d 	beq.w	8004e4a <_printf_float+0xae>
 8005010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005012:	b923      	cbnz	r3, 800501e <_printf_float+0x282>
 8005014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005016:	b913      	cbnz	r3, 800501e <_printf_float+0x282>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	07d9      	lsls	r1, r3, #31
 800501c:	d5d9      	bpl.n	8004fd2 <_printf_float+0x236>
 800501e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005022:	4659      	mov	r1, fp
 8005024:	4628      	mov	r0, r5
 8005026:	47b0      	blx	r6
 8005028:	3001      	adds	r0, #1
 800502a:	f43f af0e 	beq.w	8004e4a <_printf_float+0xae>
 800502e:	f04f 0800 	mov.w	r8, #0
 8005032:	f104 091a 	add.w	r9, r4, #26
 8005036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005038:	425b      	negs	r3, r3
 800503a:	4543      	cmp	r3, r8
 800503c:	dc01      	bgt.n	8005042 <_printf_float+0x2a6>
 800503e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005040:	e797      	b.n	8004f72 <_printf_float+0x1d6>
 8005042:	2301      	movs	r3, #1
 8005044:	464a      	mov	r2, r9
 8005046:	4659      	mov	r1, fp
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	3001      	adds	r0, #1
 800504e:	f43f aefc 	beq.w	8004e4a <_printf_float+0xae>
 8005052:	f108 0801 	add.w	r8, r8, #1
 8005056:	e7ee      	b.n	8005036 <_printf_float+0x29a>
 8005058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800505a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800505c:	429a      	cmp	r2, r3
 800505e:	bfa8      	it	ge
 8005060:	461a      	movge	r2, r3
 8005062:	2a00      	cmp	r2, #0
 8005064:	4690      	mov	r8, r2
 8005066:	dd07      	ble.n	8005078 <_printf_float+0x2dc>
 8005068:	4613      	mov	r3, r2
 800506a:	4659      	mov	r1, fp
 800506c:	463a      	mov	r2, r7
 800506e:	4628      	mov	r0, r5
 8005070:	47b0      	blx	r6
 8005072:	3001      	adds	r0, #1
 8005074:	f43f aee9 	beq.w	8004e4a <_printf_float+0xae>
 8005078:	f104 031a 	add.w	r3, r4, #26
 800507c:	f04f 0a00 	mov.w	sl, #0
 8005080:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005084:	930b      	str	r3, [sp, #44]	; 0x2c
 8005086:	e015      	b.n	80050b4 <_printf_float+0x318>
 8005088:	7fefffff 	.word	0x7fefffff
 800508c:	0800908c 	.word	0x0800908c
 8005090:	08009088 	.word	0x08009088
 8005094:	08009094 	.word	0x08009094
 8005098:	08009090 	.word	0x08009090
 800509c:	08009098 	.word	0x08009098
 80050a0:	2301      	movs	r3, #1
 80050a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050a4:	4659      	mov	r1, fp
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b0      	blx	r6
 80050aa:	3001      	adds	r0, #1
 80050ac:	f43f aecd 	beq.w	8004e4a <_printf_float+0xae>
 80050b0:	f10a 0a01 	add.w	sl, sl, #1
 80050b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80050b8:	eba9 0308 	sub.w	r3, r9, r8
 80050bc:	4553      	cmp	r3, sl
 80050be:	dcef      	bgt.n	80050a0 <_printf_float+0x304>
 80050c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050c4:	429a      	cmp	r2, r3
 80050c6:	444f      	add	r7, r9
 80050c8:	db14      	blt.n	80050f4 <_printf_float+0x358>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	07da      	lsls	r2, r3, #31
 80050ce:	d411      	bmi.n	80050f4 <_printf_float+0x358>
 80050d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050d4:	eba3 0209 	sub.w	r2, r3, r9
 80050d8:	eba3 0901 	sub.w	r9, r3, r1
 80050dc:	4591      	cmp	r9, r2
 80050de:	bfa8      	it	ge
 80050e0:	4691      	movge	r9, r2
 80050e2:	f1b9 0f00 	cmp.w	r9, #0
 80050e6:	dc0d      	bgt.n	8005104 <_printf_float+0x368>
 80050e8:	2700      	movs	r7, #0
 80050ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050ee:	f104 081a 	add.w	r8, r4, #26
 80050f2:	e018      	b.n	8005126 <_printf_float+0x38a>
 80050f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050f8:	4659      	mov	r1, fp
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b0      	blx	r6
 80050fe:	3001      	adds	r0, #1
 8005100:	d1e6      	bne.n	80050d0 <_printf_float+0x334>
 8005102:	e6a2      	b.n	8004e4a <_printf_float+0xae>
 8005104:	464b      	mov	r3, r9
 8005106:	463a      	mov	r2, r7
 8005108:	4659      	mov	r1, fp
 800510a:	4628      	mov	r0, r5
 800510c:	47b0      	blx	r6
 800510e:	3001      	adds	r0, #1
 8005110:	d1ea      	bne.n	80050e8 <_printf_float+0x34c>
 8005112:	e69a      	b.n	8004e4a <_printf_float+0xae>
 8005114:	2301      	movs	r3, #1
 8005116:	4642      	mov	r2, r8
 8005118:	4659      	mov	r1, fp
 800511a:	4628      	mov	r0, r5
 800511c:	47b0      	blx	r6
 800511e:	3001      	adds	r0, #1
 8005120:	f43f ae93 	beq.w	8004e4a <_printf_float+0xae>
 8005124:	3701      	adds	r7, #1
 8005126:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	eba3 0309 	sub.w	r3, r3, r9
 8005130:	42bb      	cmp	r3, r7
 8005132:	dcef      	bgt.n	8005114 <_printf_float+0x378>
 8005134:	e74d      	b.n	8004fd2 <_printf_float+0x236>
 8005136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005138:	2a01      	cmp	r2, #1
 800513a:	dc01      	bgt.n	8005140 <_printf_float+0x3a4>
 800513c:	07db      	lsls	r3, r3, #31
 800513e:	d538      	bpl.n	80051b2 <_printf_float+0x416>
 8005140:	2301      	movs	r3, #1
 8005142:	463a      	mov	r2, r7
 8005144:	4659      	mov	r1, fp
 8005146:	4628      	mov	r0, r5
 8005148:	47b0      	blx	r6
 800514a:	3001      	adds	r0, #1
 800514c:	f43f ae7d 	beq.w	8004e4a <_printf_float+0xae>
 8005150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005154:	4659      	mov	r1, fp
 8005156:	4628      	mov	r0, r5
 8005158:	47b0      	blx	r6
 800515a:	3001      	adds	r0, #1
 800515c:	f107 0701 	add.w	r7, r7, #1
 8005160:	f43f ae73 	beq.w	8004e4a <_printf_float+0xae>
 8005164:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800516a:	2200      	movs	r2, #0
 800516c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005170:	2300      	movs	r3, #0
 8005172:	f7fb fc31 	bl	80009d8 <__aeabi_dcmpeq>
 8005176:	b9c0      	cbnz	r0, 80051aa <_printf_float+0x40e>
 8005178:	4643      	mov	r3, r8
 800517a:	463a      	mov	r2, r7
 800517c:	4659      	mov	r1, fp
 800517e:	4628      	mov	r0, r5
 8005180:	47b0      	blx	r6
 8005182:	3001      	adds	r0, #1
 8005184:	d10d      	bne.n	80051a2 <_printf_float+0x406>
 8005186:	e660      	b.n	8004e4a <_printf_float+0xae>
 8005188:	2301      	movs	r3, #1
 800518a:	4642      	mov	r2, r8
 800518c:	4659      	mov	r1, fp
 800518e:	4628      	mov	r0, r5
 8005190:	47b0      	blx	r6
 8005192:	3001      	adds	r0, #1
 8005194:	f43f ae59 	beq.w	8004e4a <_printf_float+0xae>
 8005198:	3701      	adds	r7, #1
 800519a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800519c:	3b01      	subs	r3, #1
 800519e:	42bb      	cmp	r3, r7
 80051a0:	dcf2      	bgt.n	8005188 <_printf_float+0x3ec>
 80051a2:	464b      	mov	r3, r9
 80051a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051a8:	e6e4      	b.n	8004f74 <_printf_float+0x1d8>
 80051aa:	2700      	movs	r7, #0
 80051ac:	f104 081a 	add.w	r8, r4, #26
 80051b0:	e7f3      	b.n	800519a <_printf_float+0x3fe>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e7e1      	b.n	800517a <_printf_float+0x3de>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4642      	mov	r2, r8
 80051ba:	4659      	mov	r1, fp
 80051bc:	4628      	mov	r0, r5
 80051be:	47b0      	blx	r6
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f ae42 	beq.w	8004e4a <_printf_float+0xae>
 80051c6:	3701      	adds	r7, #1
 80051c8:	68e3      	ldr	r3, [r4, #12]
 80051ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	42bb      	cmp	r3, r7
 80051d0:	dcf1      	bgt.n	80051b6 <_printf_float+0x41a>
 80051d2:	e702      	b.n	8004fda <_printf_float+0x23e>
 80051d4:	2700      	movs	r7, #0
 80051d6:	f104 0819 	add.w	r8, r4, #25
 80051da:	e7f5      	b.n	80051c8 <_printf_float+0x42c>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f43f ae94 	beq.w	8004f0a <_printf_float+0x16e>
 80051e2:	f04f 0c00 	mov.w	ip, #0
 80051e6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80051ea:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80051ee:	6022      	str	r2, [r4, #0]
 80051f0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80051f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	463a      	mov	r2, r7
 80051fc:	464b      	mov	r3, r9
 80051fe:	4628      	mov	r0, r5
 8005200:	f7ff fd3a 	bl	8004c78 <__cvt>
 8005204:	4607      	mov	r7, r0
 8005206:	e64f      	b.n	8004ea8 <_printf_float+0x10c>

08005208 <_printf_common>:
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	4691      	mov	r9, r2
 800520e:	461f      	mov	r7, r3
 8005210:	688a      	ldr	r2, [r1, #8]
 8005212:	690b      	ldr	r3, [r1, #16]
 8005214:	4606      	mov	r6, r0
 8005216:	4293      	cmp	r3, r2
 8005218:	bfb8      	it	lt
 800521a:	4613      	movlt	r3, r2
 800521c:	f8c9 3000 	str.w	r3, [r9]
 8005220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005224:	460c      	mov	r4, r1
 8005226:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800522a:	b112      	cbz	r2, 8005232 <_printf_common+0x2a>
 800522c:	3301      	adds	r3, #1
 800522e:	f8c9 3000 	str.w	r3, [r9]
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	0699      	lsls	r1, r3, #26
 8005236:	bf42      	ittt	mi
 8005238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800523c:	3302      	addmi	r3, #2
 800523e:	f8c9 3000 	strmi.w	r3, [r9]
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	f015 0506 	ands.w	r5, r5, #6
 8005248:	d107      	bne.n	800525a <_printf_common+0x52>
 800524a:	f104 0a19 	add.w	sl, r4, #25
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	f8d9 2000 	ldr.w	r2, [r9]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	42ab      	cmp	r3, r5
 8005258:	dc29      	bgt.n	80052ae <_printf_common+0xa6>
 800525a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	3300      	adds	r3, #0
 8005262:	bf18      	it	ne
 8005264:	2301      	movne	r3, #1
 8005266:	0692      	lsls	r2, r2, #26
 8005268:	d42e      	bmi.n	80052c8 <_printf_common+0xc0>
 800526a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800526e:	4639      	mov	r1, r7
 8005270:	4630      	mov	r0, r6
 8005272:	47c0      	blx	r8
 8005274:	3001      	adds	r0, #1
 8005276:	d021      	beq.n	80052bc <_printf_common+0xb4>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	68e5      	ldr	r5, [r4, #12]
 800527c:	f003 0306 	and.w	r3, r3, #6
 8005280:	2b04      	cmp	r3, #4
 8005282:	bf18      	it	ne
 8005284:	2500      	movne	r5, #0
 8005286:	f8d9 2000 	ldr.w	r2, [r9]
 800528a:	f04f 0900 	mov.w	r9, #0
 800528e:	bf08      	it	eq
 8005290:	1aad      	subeq	r5, r5, r2
 8005292:	68a3      	ldr	r3, [r4, #8]
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	bf08      	it	eq
 8005298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800529c:	4293      	cmp	r3, r2
 800529e:	bfc4      	itt	gt
 80052a0:	1a9b      	subgt	r3, r3, r2
 80052a2:	18ed      	addgt	r5, r5, r3
 80052a4:	341a      	adds	r4, #26
 80052a6:	454d      	cmp	r5, r9
 80052a8:	d11a      	bne.n	80052e0 <_printf_common+0xd8>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e008      	b.n	80052c0 <_printf_common+0xb8>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4652      	mov	r2, sl
 80052b2:	4639      	mov	r1, r7
 80052b4:	4630      	mov	r0, r6
 80052b6:	47c0      	blx	r8
 80052b8:	3001      	adds	r0, #1
 80052ba:	d103      	bne.n	80052c4 <_printf_common+0xbc>
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295
 80052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c4:	3501      	adds	r5, #1
 80052c6:	e7c2      	b.n	800524e <_printf_common+0x46>
 80052c8:	2030      	movs	r0, #48	; 0x30
 80052ca:	18e1      	adds	r1, r4, r3
 80052cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d6:	4422      	add	r2, r4
 80052d8:	3302      	adds	r3, #2
 80052da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052de:	e7c4      	b.n	800526a <_printf_common+0x62>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4622      	mov	r2, r4
 80052e4:	4639      	mov	r1, r7
 80052e6:	4630      	mov	r0, r6
 80052e8:	47c0      	blx	r8
 80052ea:	3001      	adds	r0, #1
 80052ec:	d0e6      	beq.n	80052bc <_printf_common+0xb4>
 80052ee:	f109 0901 	add.w	r9, r9, #1
 80052f2:	e7d8      	b.n	80052a6 <_printf_common+0x9e>

080052f4 <_printf_i>:
 80052f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052fc:	460c      	mov	r4, r1
 80052fe:	7e09      	ldrb	r1, [r1, #24]
 8005300:	b085      	sub	sp, #20
 8005302:	296e      	cmp	r1, #110	; 0x6e
 8005304:	4617      	mov	r7, r2
 8005306:	4606      	mov	r6, r0
 8005308:	4698      	mov	r8, r3
 800530a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800530c:	f000 80b3 	beq.w	8005476 <_printf_i+0x182>
 8005310:	d822      	bhi.n	8005358 <_printf_i+0x64>
 8005312:	2963      	cmp	r1, #99	; 0x63
 8005314:	d036      	beq.n	8005384 <_printf_i+0x90>
 8005316:	d80a      	bhi.n	800532e <_printf_i+0x3a>
 8005318:	2900      	cmp	r1, #0
 800531a:	f000 80b9 	beq.w	8005490 <_printf_i+0x19c>
 800531e:	2958      	cmp	r1, #88	; 0x58
 8005320:	f000 8083 	beq.w	800542a <_printf_i+0x136>
 8005324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800532c:	e032      	b.n	8005394 <_printf_i+0xa0>
 800532e:	2964      	cmp	r1, #100	; 0x64
 8005330:	d001      	beq.n	8005336 <_printf_i+0x42>
 8005332:	2969      	cmp	r1, #105	; 0x69
 8005334:	d1f6      	bne.n	8005324 <_printf_i+0x30>
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	0605      	lsls	r5, r0, #24
 800533c:	f103 0104 	add.w	r1, r3, #4
 8005340:	d52a      	bpl.n	8005398 <_printf_i+0xa4>
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da03      	bge.n	8005352 <_printf_i+0x5e>
 800534a:	222d      	movs	r2, #45	; 0x2d
 800534c:	425b      	negs	r3, r3
 800534e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005352:	486f      	ldr	r0, [pc, #444]	; (8005510 <_printf_i+0x21c>)
 8005354:	220a      	movs	r2, #10
 8005356:	e039      	b.n	80053cc <_printf_i+0xd8>
 8005358:	2973      	cmp	r1, #115	; 0x73
 800535a:	f000 809d 	beq.w	8005498 <_printf_i+0x1a4>
 800535e:	d808      	bhi.n	8005372 <_printf_i+0x7e>
 8005360:	296f      	cmp	r1, #111	; 0x6f
 8005362:	d020      	beq.n	80053a6 <_printf_i+0xb2>
 8005364:	2970      	cmp	r1, #112	; 0x70
 8005366:	d1dd      	bne.n	8005324 <_printf_i+0x30>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	e003      	b.n	800537a <_printf_i+0x86>
 8005372:	2975      	cmp	r1, #117	; 0x75
 8005374:	d017      	beq.n	80053a6 <_printf_i+0xb2>
 8005376:	2978      	cmp	r1, #120	; 0x78
 8005378:	d1d4      	bne.n	8005324 <_printf_i+0x30>
 800537a:	2378      	movs	r3, #120	; 0x78
 800537c:	4865      	ldr	r0, [pc, #404]	; (8005514 <_printf_i+0x220>)
 800537e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005382:	e055      	b.n	8005430 <_printf_i+0x13c>
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800538a:	1d19      	adds	r1, r3, #4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6011      	str	r1, [r2, #0]
 8005390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005394:	2301      	movs	r3, #1
 8005396:	e08c      	b.n	80054b2 <_printf_i+0x1be>
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800539e:	6011      	str	r1, [r2, #0]
 80053a0:	bf18      	it	ne
 80053a2:	b21b      	sxthne	r3, r3
 80053a4:	e7cf      	b.n	8005346 <_printf_i+0x52>
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	6825      	ldr	r5, [r4, #0]
 80053aa:	1d18      	adds	r0, r3, #4
 80053ac:	6010      	str	r0, [r2, #0]
 80053ae:	0628      	lsls	r0, r5, #24
 80053b0:	d501      	bpl.n	80053b6 <_printf_i+0xc2>
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	e002      	b.n	80053bc <_printf_i+0xc8>
 80053b6:	0668      	lsls	r0, r5, #25
 80053b8:	d5fb      	bpl.n	80053b2 <_printf_i+0xbe>
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	296f      	cmp	r1, #111	; 0x6f
 80053be:	bf14      	ite	ne
 80053c0:	220a      	movne	r2, #10
 80053c2:	2208      	moveq	r2, #8
 80053c4:	4852      	ldr	r0, [pc, #328]	; (8005510 <_printf_i+0x21c>)
 80053c6:	2100      	movs	r1, #0
 80053c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053cc:	6865      	ldr	r5, [r4, #4]
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	60a5      	str	r5, [r4, #8]
 80053d2:	f2c0 8095 	blt.w	8005500 <_printf_i+0x20c>
 80053d6:	6821      	ldr	r1, [r4, #0]
 80053d8:	f021 0104 	bic.w	r1, r1, #4
 80053dc:	6021      	str	r1, [r4, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d13d      	bne.n	800545e <_printf_i+0x16a>
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	f040 808e 	bne.w	8005504 <_printf_i+0x210>
 80053e8:	4665      	mov	r5, ip
 80053ea:	2a08      	cmp	r2, #8
 80053ec:	d10b      	bne.n	8005406 <_printf_i+0x112>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	07db      	lsls	r3, r3, #31
 80053f2:	d508      	bpl.n	8005406 <_printf_i+0x112>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bfde      	ittt	le
 80053fc:	2330      	movle	r3, #48	; 0x30
 80053fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005402:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005406:	ebac 0305 	sub.w	r3, ip, r5
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	f8cd 8000 	str.w	r8, [sp]
 8005410:	463b      	mov	r3, r7
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff fef6 	bl	8005208 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	d14d      	bne.n	80054bc <_printf_i+0x1c8>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b005      	add	sp, #20
 8005426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800542a:	4839      	ldr	r0, [pc, #228]	; (8005510 <_printf_i+0x21c>)
 800542c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005430:	6813      	ldr	r3, [r2, #0]
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	1d1d      	adds	r5, r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6015      	str	r5, [r2, #0]
 800543a:	060a      	lsls	r2, r1, #24
 800543c:	d50b      	bpl.n	8005456 <_printf_i+0x162>
 800543e:	07ca      	lsls	r2, r1, #31
 8005440:	bf44      	itt	mi
 8005442:	f041 0120 	orrmi.w	r1, r1, #32
 8005446:	6021      	strmi	r1, [r4, #0]
 8005448:	b91b      	cbnz	r3, 8005452 <_printf_i+0x15e>
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	f022 0220 	bic.w	r2, r2, #32
 8005450:	6022      	str	r2, [r4, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	e7b7      	b.n	80053c6 <_printf_i+0xd2>
 8005456:	064d      	lsls	r5, r1, #25
 8005458:	bf48      	it	mi
 800545a:	b29b      	uxthmi	r3, r3
 800545c:	e7ef      	b.n	800543e <_printf_i+0x14a>
 800545e:	4665      	mov	r5, ip
 8005460:	fbb3 f1f2 	udiv	r1, r3, r2
 8005464:	fb02 3311 	mls	r3, r2, r1, r3
 8005468:	5cc3      	ldrb	r3, [r0, r3]
 800546a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800546e:	460b      	mov	r3, r1
 8005470:	2900      	cmp	r1, #0
 8005472:	d1f5      	bne.n	8005460 <_printf_i+0x16c>
 8005474:	e7b9      	b.n	80053ea <_printf_i+0xf6>
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	6825      	ldr	r5, [r4, #0]
 800547a:	1d18      	adds	r0, r3, #4
 800547c:	6961      	ldr	r1, [r4, #20]
 800547e:	6010      	str	r0, [r2, #0]
 8005480:	0628      	lsls	r0, r5, #24
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	d501      	bpl.n	800548a <_printf_i+0x196>
 8005486:	6019      	str	r1, [r3, #0]
 8005488:	e002      	b.n	8005490 <_printf_i+0x19c>
 800548a:	066a      	lsls	r2, r5, #25
 800548c:	d5fb      	bpl.n	8005486 <_printf_i+0x192>
 800548e:	8019      	strh	r1, [r3, #0]
 8005490:	2300      	movs	r3, #0
 8005492:	4665      	mov	r5, ip
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	e7b9      	b.n	800540c <_printf_i+0x118>
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	1d19      	adds	r1, r3, #4
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	681d      	ldr	r5, [r3, #0]
 80054a0:	6862      	ldr	r2, [r4, #4]
 80054a2:	2100      	movs	r1, #0
 80054a4:	4628      	mov	r0, r5
 80054a6:	f002 fb77 	bl	8007b98 <memchr>
 80054aa:	b108      	cbz	r0, 80054b0 <_printf_i+0x1bc>
 80054ac:	1b40      	subs	r0, r0, r5
 80054ae:	6060      	str	r0, [r4, #4]
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	2300      	movs	r3, #0
 80054b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ba:	e7a7      	b.n	800540c <_printf_i+0x118>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	462a      	mov	r2, r5
 80054c0:	4639      	mov	r1, r7
 80054c2:	4630      	mov	r0, r6
 80054c4:	47c0      	blx	r8
 80054c6:	3001      	adds	r0, #1
 80054c8:	d0aa      	beq.n	8005420 <_printf_i+0x12c>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	079b      	lsls	r3, r3, #30
 80054ce:	d413      	bmi.n	80054f8 <_printf_i+0x204>
 80054d0:	68e0      	ldr	r0, [r4, #12]
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	4298      	cmp	r0, r3
 80054d6:	bfb8      	it	lt
 80054d8:	4618      	movlt	r0, r3
 80054da:	e7a3      	b.n	8005424 <_printf_i+0x130>
 80054dc:	2301      	movs	r3, #1
 80054de:	464a      	mov	r2, r9
 80054e0:	4639      	mov	r1, r7
 80054e2:	4630      	mov	r0, r6
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d09a      	beq.n	8005420 <_printf_i+0x12c>
 80054ea:	3501      	adds	r5, #1
 80054ec:	68e3      	ldr	r3, [r4, #12]
 80054ee:	9a03      	ldr	r2, [sp, #12]
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	42ab      	cmp	r3, r5
 80054f4:	dcf2      	bgt.n	80054dc <_printf_i+0x1e8>
 80054f6:	e7eb      	b.n	80054d0 <_printf_i+0x1dc>
 80054f8:	2500      	movs	r5, #0
 80054fa:	f104 0919 	add.w	r9, r4, #25
 80054fe:	e7f5      	b.n	80054ec <_printf_i+0x1f8>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ac      	bne.n	800545e <_printf_i+0x16a>
 8005504:	7803      	ldrb	r3, [r0, #0]
 8005506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800550a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550e:	e76c      	b.n	80053ea <_printf_i+0xf6>
 8005510:	0800909a 	.word	0x0800909a
 8005514:	080090ab 	.word	0x080090ab

08005518 <_scanf_float>:
 8005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	469a      	mov	sl, r3
 800551e:	688b      	ldr	r3, [r1, #8]
 8005520:	4616      	mov	r6, r2
 8005522:	1e5a      	subs	r2, r3, #1
 8005524:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005528:	bf88      	it	hi
 800552a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800552e:	b087      	sub	sp, #28
 8005530:	bf85      	ittet	hi
 8005532:	189b      	addhi	r3, r3, r2
 8005534:	9301      	strhi	r3, [sp, #4]
 8005536:	2300      	movls	r3, #0
 8005538:	f240 135d 	movwhi	r3, #349	; 0x15d
 800553c:	4688      	mov	r8, r1
 800553e:	f04f 0b00 	mov.w	fp, #0
 8005542:	bf8c      	ite	hi
 8005544:	608b      	strhi	r3, [r1, #8]
 8005546:	9301      	strls	r3, [sp, #4]
 8005548:	680b      	ldr	r3, [r1, #0]
 800554a:	4607      	mov	r7, r0
 800554c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005550:	f848 3b1c 	str.w	r3, [r8], #28
 8005554:	460c      	mov	r4, r1
 8005556:	4645      	mov	r5, r8
 8005558:	465a      	mov	r2, fp
 800555a:	46d9      	mov	r9, fp
 800555c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005560:	f8cd b008 	str.w	fp, [sp, #8]
 8005564:	68a1      	ldr	r1, [r4, #8]
 8005566:	b181      	cbz	r1, 800558a <_scanf_float+0x72>
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b49      	cmp	r3, #73	; 0x49
 800556e:	d071      	beq.n	8005654 <_scanf_float+0x13c>
 8005570:	d84d      	bhi.n	800560e <_scanf_float+0xf6>
 8005572:	2b39      	cmp	r3, #57	; 0x39
 8005574:	d840      	bhi.n	80055f8 <_scanf_float+0xe0>
 8005576:	2b31      	cmp	r3, #49	; 0x31
 8005578:	f080 8088 	bcs.w	800568c <_scanf_float+0x174>
 800557c:	2b2d      	cmp	r3, #45	; 0x2d
 800557e:	f000 8090 	beq.w	80056a2 <_scanf_float+0x18a>
 8005582:	d815      	bhi.n	80055b0 <_scanf_float+0x98>
 8005584:	2b2b      	cmp	r3, #43	; 0x2b
 8005586:	f000 808c 	beq.w	80056a2 <_scanf_float+0x18a>
 800558a:	f1b9 0f00 	cmp.w	r9, #0
 800558e:	d003      	beq.n	8005598 <_scanf_float+0x80>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	3a01      	subs	r2, #1
 800559a:	2a01      	cmp	r2, #1
 800559c:	f200 80ea 	bhi.w	8005774 <_scanf_float+0x25c>
 80055a0:	4545      	cmp	r5, r8
 80055a2:	f200 80dc 	bhi.w	800575e <_scanf_float+0x246>
 80055a6:	2601      	movs	r6, #1
 80055a8:	4630      	mov	r0, r6
 80055aa:	b007      	add	sp, #28
 80055ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b0:	2b2e      	cmp	r3, #46	; 0x2e
 80055b2:	f000 809f 	beq.w	80056f4 <_scanf_float+0x1dc>
 80055b6:	2b30      	cmp	r3, #48	; 0x30
 80055b8:	d1e7      	bne.n	800558a <_scanf_float+0x72>
 80055ba:	6820      	ldr	r0, [r4, #0]
 80055bc:	f410 7f80 	tst.w	r0, #256	; 0x100
 80055c0:	d064      	beq.n	800568c <_scanf_float+0x174>
 80055c2:	9b01      	ldr	r3, [sp, #4]
 80055c4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80055c8:	6020      	str	r0, [r4, #0]
 80055ca:	f109 0901 	add.w	r9, r9, #1
 80055ce:	b11b      	cbz	r3, 80055d8 <_scanf_float+0xc0>
 80055d0:	3b01      	subs	r3, #1
 80055d2:	3101      	adds	r1, #1
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	60a1      	str	r1, [r4, #8]
 80055d8:	68a3      	ldr	r3, [r4, #8]
 80055da:	3b01      	subs	r3, #1
 80055dc:	60a3      	str	r3, [r4, #8]
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	3301      	adds	r3, #1
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	6873      	ldr	r3, [r6, #4]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	6073      	str	r3, [r6, #4]
 80055ec:	f340 80ac 	ble.w	8005748 <_scanf_float+0x230>
 80055f0:	6833      	ldr	r3, [r6, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	6033      	str	r3, [r6, #0]
 80055f6:	e7b5      	b.n	8005564 <_scanf_float+0x4c>
 80055f8:	2b45      	cmp	r3, #69	; 0x45
 80055fa:	f000 8085 	beq.w	8005708 <_scanf_float+0x1f0>
 80055fe:	2b46      	cmp	r3, #70	; 0x46
 8005600:	d06a      	beq.n	80056d8 <_scanf_float+0x1c0>
 8005602:	2b41      	cmp	r3, #65	; 0x41
 8005604:	d1c1      	bne.n	800558a <_scanf_float+0x72>
 8005606:	2a01      	cmp	r2, #1
 8005608:	d1bf      	bne.n	800558a <_scanf_float+0x72>
 800560a:	2202      	movs	r2, #2
 800560c:	e046      	b.n	800569c <_scanf_float+0x184>
 800560e:	2b65      	cmp	r3, #101	; 0x65
 8005610:	d07a      	beq.n	8005708 <_scanf_float+0x1f0>
 8005612:	d818      	bhi.n	8005646 <_scanf_float+0x12e>
 8005614:	2b54      	cmp	r3, #84	; 0x54
 8005616:	d066      	beq.n	80056e6 <_scanf_float+0x1ce>
 8005618:	d811      	bhi.n	800563e <_scanf_float+0x126>
 800561a:	2b4e      	cmp	r3, #78	; 0x4e
 800561c:	d1b5      	bne.n	800558a <_scanf_float+0x72>
 800561e:	2a00      	cmp	r2, #0
 8005620:	d146      	bne.n	80056b0 <_scanf_float+0x198>
 8005622:	f1b9 0f00 	cmp.w	r9, #0
 8005626:	d145      	bne.n	80056b4 <_scanf_float+0x19c>
 8005628:	6821      	ldr	r1, [r4, #0]
 800562a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800562e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005632:	d13f      	bne.n	80056b4 <_scanf_float+0x19c>
 8005634:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005638:	6021      	str	r1, [r4, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	e02e      	b.n	800569c <_scanf_float+0x184>
 800563e:	2b59      	cmp	r3, #89	; 0x59
 8005640:	d01e      	beq.n	8005680 <_scanf_float+0x168>
 8005642:	2b61      	cmp	r3, #97	; 0x61
 8005644:	e7de      	b.n	8005604 <_scanf_float+0xec>
 8005646:	2b6e      	cmp	r3, #110	; 0x6e
 8005648:	d0e9      	beq.n	800561e <_scanf_float+0x106>
 800564a:	d815      	bhi.n	8005678 <_scanf_float+0x160>
 800564c:	2b66      	cmp	r3, #102	; 0x66
 800564e:	d043      	beq.n	80056d8 <_scanf_float+0x1c0>
 8005650:	2b69      	cmp	r3, #105	; 0x69
 8005652:	d19a      	bne.n	800558a <_scanf_float+0x72>
 8005654:	f1bb 0f00 	cmp.w	fp, #0
 8005658:	d138      	bne.n	80056cc <_scanf_float+0x1b4>
 800565a:	f1b9 0f00 	cmp.w	r9, #0
 800565e:	d197      	bne.n	8005590 <_scanf_float+0x78>
 8005660:	6821      	ldr	r1, [r4, #0]
 8005662:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005666:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800566a:	d195      	bne.n	8005598 <_scanf_float+0x80>
 800566c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005670:	6021      	str	r1, [r4, #0]
 8005672:	f04f 0b01 	mov.w	fp, #1
 8005676:	e011      	b.n	800569c <_scanf_float+0x184>
 8005678:	2b74      	cmp	r3, #116	; 0x74
 800567a:	d034      	beq.n	80056e6 <_scanf_float+0x1ce>
 800567c:	2b79      	cmp	r3, #121	; 0x79
 800567e:	d184      	bne.n	800558a <_scanf_float+0x72>
 8005680:	f1bb 0f07 	cmp.w	fp, #7
 8005684:	d181      	bne.n	800558a <_scanf_float+0x72>
 8005686:	f04f 0b08 	mov.w	fp, #8
 800568a:	e007      	b.n	800569c <_scanf_float+0x184>
 800568c:	eb12 0f0b 	cmn.w	r2, fp
 8005690:	f47f af7b 	bne.w	800558a <_scanf_float+0x72>
 8005694:	6821      	ldr	r1, [r4, #0]
 8005696:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800569a:	6021      	str	r1, [r4, #0]
 800569c:	702b      	strb	r3, [r5, #0]
 800569e:	3501      	adds	r5, #1
 80056a0:	e79a      	b.n	80055d8 <_scanf_float+0xc0>
 80056a2:	6821      	ldr	r1, [r4, #0]
 80056a4:	0608      	lsls	r0, r1, #24
 80056a6:	f57f af70 	bpl.w	800558a <_scanf_float+0x72>
 80056aa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056ae:	e7f4      	b.n	800569a <_scanf_float+0x182>
 80056b0:	2a02      	cmp	r2, #2
 80056b2:	d047      	beq.n	8005744 <_scanf_float+0x22c>
 80056b4:	f1bb 0f01 	cmp.w	fp, #1
 80056b8:	d003      	beq.n	80056c2 <_scanf_float+0x1aa>
 80056ba:	f1bb 0f04 	cmp.w	fp, #4
 80056be:	f47f af64 	bne.w	800558a <_scanf_float+0x72>
 80056c2:	f10b 0b01 	add.w	fp, fp, #1
 80056c6:	fa5f fb8b 	uxtb.w	fp, fp
 80056ca:	e7e7      	b.n	800569c <_scanf_float+0x184>
 80056cc:	f1bb 0f03 	cmp.w	fp, #3
 80056d0:	d0f7      	beq.n	80056c2 <_scanf_float+0x1aa>
 80056d2:	f1bb 0f05 	cmp.w	fp, #5
 80056d6:	e7f2      	b.n	80056be <_scanf_float+0x1a6>
 80056d8:	f1bb 0f02 	cmp.w	fp, #2
 80056dc:	f47f af55 	bne.w	800558a <_scanf_float+0x72>
 80056e0:	f04f 0b03 	mov.w	fp, #3
 80056e4:	e7da      	b.n	800569c <_scanf_float+0x184>
 80056e6:	f1bb 0f06 	cmp.w	fp, #6
 80056ea:	f47f af4e 	bne.w	800558a <_scanf_float+0x72>
 80056ee:	f04f 0b07 	mov.w	fp, #7
 80056f2:	e7d3      	b.n	800569c <_scanf_float+0x184>
 80056f4:	6821      	ldr	r1, [r4, #0]
 80056f6:	0588      	lsls	r0, r1, #22
 80056f8:	f57f af47 	bpl.w	800558a <_scanf_float+0x72>
 80056fc:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005700:	6021      	str	r1, [r4, #0]
 8005702:	f8cd 9008 	str.w	r9, [sp, #8]
 8005706:	e7c9      	b.n	800569c <_scanf_float+0x184>
 8005708:	6821      	ldr	r1, [r4, #0]
 800570a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800570e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005712:	d006      	beq.n	8005722 <_scanf_float+0x20a>
 8005714:	0548      	lsls	r0, r1, #21
 8005716:	f57f af38 	bpl.w	800558a <_scanf_float+0x72>
 800571a:	f1b9 0f00 	cmp.w	r9, #0
 800571e:	f43f af3b 	beq.w	8005598 <_scanf_float+0x80>
 8005722:	0588      	lsls	r0, r1, #22
 8005724:	bf58      	it	pl
 8005726:	9802      	ldrpl	r0, [sp, #8]
 8005728:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800572c:	bf58      	it	pl
 800572e:	eba9 0000 	subpl.w	r0, r9, r0
 8005732:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005736:	bf58      	it	pl
 8005738:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800573c:	6021      	str	r1, [r4, #0]
 800573e:	f04f 0900 	mov.w	r9, #0
 8005742:	e7ab      	b.n	800569c <_scanf_float+0x184>
 8005744:	2203      	movs	r2, #3
 8005746:	e7a9      	b.n	800569c <_scanf_float+0x184>
 8005748:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800574c:	4631      	mov	r1, r6
 800574e:	4638      	mov	r0, r7
 8005750:	9205      	str	r2, [sp, #20]
 8005752:	4798      	blx	r3
 8005754:	9a05      	ldr	r2, [sp, #20]
 8005756:	2800      	cmp	r0, #0
 8005758:	f43f af04 	beq.w	8005564 <_scanf_float+0x4c>
 800575c:	e715      	b.n	800558a <_scanf_float+0x72>
 800575e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005762:	4632      	mov	r2, r6
 8005764:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005768:	4638      	mov	r0, r7
 800576a:	4798      	blx	r3
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	3b01      	subs	r3, #1
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	e715      	b.n	80055a0 <_scanf_float+0x88>
 8005774:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005778:	2b06      	cmp	r3, #6
 800577a:	d80a      	bhi.n	8005792 <_scanf_float+0x27a>
 800577c:	f1bb 0f02 	cmp.w	fp, #2
 8005780:	d967      	bls.n	8005852 <_scanf_float+0x33a>
 8005782:	f1ab 0b03 	sub.w	fp, fp, #3
 8005786:	fa5f fb8b 	uxtb.w	fp, fp
 800578a:	eba5 0b0b 	sub.w	fp, r5, fp
 800578e:	455d      	cmp	r5, fp
 8005790:	d14a      	bne.n	8005828 <_scanf_float+0x310>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	05da      	lsls	r2, r3, #23
 8005796:	d51f      	bpl.n	80057d8 <_scanf_float+0x2c0>
 8005798:	055b      	lsls	r3, r3, #21
 800579a:	d467      	bmi.n	800586c <_scanf_float+0x354>
 800579c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	2965      	cmp	r1, #101	; 0x65
 80057a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80057a8:	f105 3bff 	add.w	fp, r5, #4294967295
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	d00d      	beq.n	80057cc <_scanf_float+0x2b4>
 80057b0:	2945      	cmp	r1, #69	; 0x45
 80057b2:	d00b      	beq.n	80057cc <_scanf_float+0x2b4>
 80057b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057b8:	4632      	mov	r2, r6
 80057ba:	4638      	mov	r0, r7
 80057bc:	4798      	blx	r3
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	f1a5 0b02 	sub.w	fp, r5, #2
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057d0:	4632      	mov	r2, r6
 80057d2:	4638      	mov	r0, r7
 80057d4:	4798      	blx	r3
 80057d6:	465d      	mov	r5, fp
 80057d8:	6826      	ldr	r6, [r4, #0]
 80057da:	f016 0610 	ands.w	r6, r6, #16
 80057de:	d176      	bne.n	80058ce <_scanf_float+0x3b6>
 80057e0:	702e      	strb	r6, [r5, #0]
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ec:	d141      	bne.n	8005872 <_scanf_float+0x35a>
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	eba9 0303 	sub.w	r3, r9, r3
 80057f4:	425a      	negs	r2, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d148      	bne.n	800588c <_scanf_float+0x374>
 80057fa:	4641      	mov	r1, r8
 80057fc:	2200      	movs	r2, #0
 80057fe:	4638      	mov	r0, r7
 8005800:	f000 feca 	bl	8006598 <_strtod_r>
 8005804:	6825      	ldr	r5, [r4, #0]
 8005806:	4680      	mov	r8, r0
 8005808:	f015 0f02 	tst.w	r5, #2
 800580c:	4689      	mov	r9, r1
 800580e:	f8da 3000 	ldr.w	r3, [sl]
 8005812:	d046      	beq.n	80058a2 <_scanf_float+0x38a>
 8005814:	1d1a      	adds	r2, r3, #4
 8005816:	f8ca 2000 	str.w	r2, [sl]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	e9c3 8900 	strd	r8, r9, [r3]
 8005820:	68e3      	ldr	r3, [r4, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60e3      	str	r3, [r4, #12]
 8005826:	e6bf      	b.n	80055a8 <_scanf_float+0x90>
 8005828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800582c:	4632      	mov	r2, r6
 800582e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005832:	4638      	mov	r0, r7
 8005834:	4798      	blx	r3
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	3b01      	subs	r3, #1
 800583a:	6123      	str	r3, [r4, #16]
 800583c:	e7a7      	b.n	800578e <_scanf_float+0x276>
 800583e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005842:	4632      	mov	r2, r6
 8005844:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005848:	4638      	mov	r0, r7
 800584a:	4798      	blx	r3
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	3b01      	subs	r3, #1
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	4545      	cmp	r5, r8
 8005854:	d8f3      	bhi.n	800583e <_scanf_float+0x326>
 8005856:	e6a6      	b.n	80055a6 <_scanf_float+0x8e>
 8005858:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800585c:	4632      	mov	r2, r6
 800585e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005862:	4638      	mov	r0, r7
 8005864:	4798      	blx	r3
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	3b01      	subs	r3, #1
 800586a:	6123      	str	r3, [r4, #16]
 800586c:	4545      	cmp	r5, r8
 800586e:	d8f3      	bhi.n	8005858 <_scanf_float+0x340>
 8005870:	e699      	b.n	80055a6 <_scanf_float+0x8e>
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0c0      	beq.n	80057fa <_scanf_float+0x2e2>
 8005878:	9904      	ldr	r1, [sp, #16]
 800587a:	230a      	movs	r3, #10
 800587c:	4632      	mov	r2, r6
 800587e:	3101      	adds	r1, #1
 8005880:	4638      	mov	r0, r7
 8005882:	f000 ff15 	bl	80066b0 <_strtol_r>
 8005886:	9b03      	ldr	r3, [sp, #12]
 8005888:	9d04      	ldr	r5, [sp, #16]
 800588a:	1ac2      	subs	r2, r0, r3
 800588c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005890:	429d      	cmp	r5, r3
 8005892:	bf28      	it	cs
 8005894:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005898:	490e      	ldr	r1, [pc, #56]	; (80058d4 <_scanf_float+0x3bc>)
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f838 	bl	8005910 <siprintf>
 80058a0:	e7ab      	b.n	80057fa <_scanf_float+0x2e2>
 80058a2:	1d1f      	adds	r7, r3, #4
 80058a4:	f015 0504 	ands.w	r5, r5, #4
 80058a8:	f8ca 7000 	str.w	r7, [sl]
 80058ac:	d1b5      	bne.n	800581a <_scanf_float+0x302>
 80058ae:	681f      	ldr	r7, [r3, #0]
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	f7fb f8c2 	bl	8000a3c <__aeabi_dcmpun>
 80058b8:	b120      	cbz	r0, 80058c4 <_scanf_float+0x3ac>
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f824 	bl	8005908 <nanf>
 80058c0:	6038      	str	r0, [r7, #0]
 80058c2:	e7ad      	b.n	8005820 <_scanf_float+0x308>
 80058c4:	4640      	mov	r0, r8
 80058c6:	4649      	mov	r1, r9
 80058c8:	f7fb f916 	bl	8000af8 <__aeabi_d2f>
 80058cc:	e7f8      	b.n	80058c0 <_scanf_float+0x3a8>
 80058ce:	2600      	movs	r6, #0
 80058d0:	e66a      	b.n	80055a8 <_scanf_float+0x90>
 80058d2:	bf00      	nop
 80058d4:	080090bc 	.word	0x080090bc

080058d8 <iprintf>:
 80058d8:	b40f      	push	{r0, r1, r2, r3}
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <iprintf+0x2c>)
 80058dc:	b513      	push	{r0, r1, r4, lr}
 80058de:	681c      	ldr	r4, [r3, #0]
 80058e0:	b124      	cbz	r4, 80058ec <iprintf+0x14>
 80058e2:	69a3      	ldr	r3, [r4, #24]
 80058e4:	b913      	cbnz	r3, 80058ec <iprintf+0x14>
 80058e6:	4620      	mov	r0, r4
 80058e8:	f001 fd76 	bl	80073d8 <__sinit>
 80058ec:	ab05      	add	r3, sp, #20
 80058ee:	9a04      	ldr	r2, [sp, #16]
 80058f0:	68a1      	ldr	r1, [r4, #8]
 80058f2:	4620      	mov	r0, r4
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	f002 ff8f 	bl	8008818 <_vfiprintf_r>
 80058fa:	b002      	add	sp, #8
 80058fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005900:	b004      	add	sp, #16
 8005902:	4770      	bx	lr
 8005904:	2000000c 	.word	0x2000000c

08005908 <nanf>:
 8005908:	4800      	ldr	r0, [pc, #0]	; (800590c <nanf+0x4>)
 800590a:	4770      	bx	lr
 800590c:	7fc00000 	.word	0x7fc00000

08005910 <siprintf>:
 8005910:	b40e      	push	{r1, r2, r3}
 8005912:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005916:	b500      	push	{lr}
 8005918:	b09c      	sub	sp, #112	; 0x70
 800591a:	ab1d      	add	r3, sp, #116	; 0x74
 800591c:	9002      	str	r0, [sp, #8]
 800591e:	9006      	str	r0, [sp, #24]
 8005920:	9107      	str	r1, [sp, #28]
 8005922:	9104      	str	r1, [sp, #16]
 8005924:	4808      	ldr	r0, [pc, #32]	; (8005948 <siprintf+0x38>)
 8005926:	4909      	ldr	r1, [pc, #36]	; (800594c <siprintf+0x3c>)
 8005928:	f853 2b04 	ldr.w	r2, [r3], #4
 800592c:	9105      	str	r1, [sp, #20]
 800592e:	6800      	ldr	r0, [r0, #0]
 8005930:	a902      	add	r1, sp, #8
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	f002 fe50 	bl	80085d8 <_svfiprintf_r>
 8005938:	2200      	movs	r2, #0
 800593a:	9b02      	ldr	r3, [sp, #8]
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	b01c      	add	sp, #112	; 0x70
 8005940:	f85d eb04 	ldr.w	lr, [sp], #4
 8005944:	b003      	add	sp, #12
 8005946:	4770      	bx	lr
 8005948:	2000000c 	.word	0x2000000c
 800594c:	ffff0208 	.word	0xffff0208

08005950 <sulp>:
 8005950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005954:	460f      	mov	r7, r1
 8005956:	4690      	mov	r8, r2
 8005958:	f002 fc02 	bl	8008160 <__ulp>
 800595c:	4604      	mov	r4, r0
 800595e:	460d      	mov	r5, r1
 8005960:	f1b8 0f00 	cmp.w	r8, #0
 8005964:	d011      	beq.n	800598a <sulp+0x3a>
 8005966:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800596a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800596e:	2b00      	cmp	r3, #0
 8005970:	dd0b      	ble.n	800598a <sulp+0x3a>
 8005972:	2400      	movs	r4, #0
 8005974:	051b      	lsls	r3, r3, #20
 8005976:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800597a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800597e:	4622      	mov	r2, r4
 8005980:	462b      	mov	r3, r5
 8005982:	f7fa fdc1 	bl	8000508 <__aeabi_dmul>
 8005986:	4604      	mov	r4, r0
 8005988:	460d      	mov	r5, r1
 800598a:	4620      	mov	r0, r4
 800598c:	4629      	mov	r1, r5
 800598e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005992:	0000      	movs	r0, r0
 8005994:	0000      	movs	r0, r0
	...

08005998 <_strtod_l>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	461f      	mov	r7, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	b0a1      	sub	sp, #132	; 0x84
 80059a2:	4683      	mov	fp, r0
 80059a4:	4638      	mov	r0, r7
 80059a6:	460e      	mov	r6, r1
 80059a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80059aa:	931c      	str	r3, [sp, #112]	; 0x70
 80059ac:	f002 f8c9 	bl	8007b42 <__localeconv_l>
 80059b0:	4680      	mov	r8, r0
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	f7fa fbe4 	bl	8000180 <strlen>
 80059b8:	f04f 0900 	mov.w	r9, #0
 80059bc:	4604      	mov	r4, r0
 80059be:	f04f 0a00 	mov.w	sl, #0
 80059c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80059c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059c6:	781a      	ldrb	r2, [r3, #0]
 80059c8:	2a0d      	cmp	r2, #13
 80059ca:	d832      	bhi.n	8005a32 <_strtod_l+0x9a>
 80059cc:	2a09      	cmp	r2, #9
 80059ce:	d236      	bcs.n	8005a3e <_strtod_l+0xa6>
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	d03e      	beq.n	8005a52 <_strtod_l+0xba>
 80059d4:	2300      	movs	r3, #0
 80059d6:	930d      	str	r3, [sp, #52]	; 0x34
 80059d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80059da:	782b      	ldrb	r3, [r5, #0]
 80059dc:	2b30      	cmp	r3, #48	; 0x30
 80059de:	f040 80ac 	bne.w	8005b3a <_strtod_l+0x1a2>
 80059e2:	786b      	ldrb	r3, [r5, #1]
 80059e4:	2b58      	cmp	r3, #88	; 0x58
 80059e6:	d001      	beq.n	80059ec <_strtod_l+0x54>
 80059e8:	2b78      	cmp	r3, #120	; 0x78
 80059ea:	d167      	bne.n	8005abc <_strtod_l+0x124>
 80059ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ee:	9702      	str	r7, [sp, #8]
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	ab1c      	add	r3, sp, #112	; 0x70
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4a89      	ldr	r2, [pc, #548]	; (8005c1c <_strtod_l+0x284>)
 80059f8:	ab1d      	add	r3, sp, #116	; 0x74
 80059fa:	a91b      	add	r1, sp, #108	; 0x6c
 80059fc:	4658      	mov	r0, fp
 80059fe:	f001 fdc5 	bl	800758c <__gethex>
 8005a02:	f010 0407 	ands.w	r4, r0, #7
 8005a06:	4606      	mov	r6, r0
 8005a08:	d005      	beq.n	8005a16 <_strtod_l+0x7e>
 8005a0a:	2c06      	cmp	r4, #6
 8005a0c:	d12b      	bne.n	8005a66 <_strtod_l+0xce>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	3501      	adds	r5, #1
 8005a12:	951b      	str	r5, [sp, #108]	; 0x6c
 8005a14:	930d      	str	r3, [sp, #52]	; 0x34
 8005a16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f040 85a6 	bne.w	800656a <_strtod_l+0xbd2>
 8005a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a20:	b1e3      	cbz	r3, 8005a5c <_strtod_l+0xc4>
 8005a22:	464a      	mov	r2, r9
 8005a24:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	b021      	add	sp, #132	; 0x84
 8005a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a32:	2a2b      	cmp	r2, #43	; 0x2b
 8005a34:	d015      	beq.n	8005a62 <_strtod_l+0xca>
 8005a36:	2a2d      	cmp	r2, #45	; 0x2d
 8005a38:	d004      	beq.n	8005a44 <_strtod_l+0xac>
 8005a3a:	2a20      	cmp	r2, #32
 8005a3c:	d1ca      	bne.n	80059d4 <_strtod_l+0x3c>
 8005a3e:	3301      	adds	r3, #1
 8005a40:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a42:	e7bf      	b.n	80059c4 <_strtod_l+0x2c>
 8005a44:	2201      	movs	r2, #1
 8005a46:	920d      	str	r2, [sp, #52]	; 0x34
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1c2      	bne.n	80059d8 <_strtod_l+0x40>
 8005a52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a54:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 8585 	bne.w	8006566 <_strtod_l+0xbce>
 8005a5c:	464a      	mov	r2, r9
 8005a5e:	4653      	mov	r3, sl
 8005a60:	e7e2      	b.n	8005a28 <_strtod_l+0x90>
 8005a62:	2200      	movs	r2, #0
 8005a64:	e7ef      	b.n	8005a46 <_strtod_l+0xae>
 8005a66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005a68:	b13a      	cbz	r2, 8005a7a <_strtod_l+0xe2>
 8005a6a:	2135      	movs	r1, #53	; 0x35
 8005a6c:	a81e      	add	r0, sp, #120	; 0x78
 8005a6e:	f002 fc6a 	bl	8008346 <__copybits>
 8005a72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a74:	4658      	mov	r0, fp
 8005a76:	f002 f8dc 	bl	8007c32 <_Bfree>
 8005a7a:	3c01      	subs	r4, #1
 8005a7c:	2c04      	cmp	r4, #4
 8005a7e:	d806      	bhi.n	8005a8e <_strtod_l+0xf6>
 8005a80:	e8df f004 	tbb	[pc, r4]
 8005a84:	1714030a 	.word	0x1714030a
 8005a88:	0a          	.byte	0x0a
 8005a89:	00          	.byte	0x00
 8005a8a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005a8e:	0731      	lsls	r1, r6, #28
 8005a90:	d5c1      	bpl.n	8005a16 <_strtod_l+0x7e>
 8005a92:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005a96:	e7be      	b.n	8005a16 <_strtod_l+0x7e>
 8005a98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005a9a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005a9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005aa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005aa6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005aaa:	e7f0      	b.n	8005a8e <_strtod_l+0xf6>
 8005aac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005c20 <_strtod_l+0x288>
 8005ab0:	e7ed      	b.n	8005a8e <_strtod_l+0xf6>
 8005ab2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005ab6:	f04f 39ff 	mov.w	r9, #4294967295
 8005aba:	e7e8      	b.n	8005a8e <_strtod_l+0xf6>
 8005abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d0f9      	beq.n	8005abc <_strtod_l+0x124>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0a4      	beq.n	8005a16 <_strtod_l+0x7e>
 8005acc:	2301      	movs	r3, #1
 8005ace:	2500      	movs	r5, #0
 8005ad0:	220a      	movs	r2, #10
 8005ad2:	9307      	str	r3, [sp, #28]
 8005ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ad6:	9506      	str	r5, [sp, #24]
 8005ad8:	9308      	str	r3, [sp, #32]
 8005ada:	9504      	str	r5, [sp, #16]
 8005adc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005ade:	7807      	ldrb	r7, [r0, #0]
 8005ae0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005ae4:	b2d9      	uxtb	r1, r3
 8005ae6:	2909      	cmp	r1, #9
 8005ae8:	d929      	bls.n	8005b3e <_strtod_l+0x1a6>
 8005aea:	4622      	mov	r2, r4
 8005aec:	f8d8 1000 	ldr.w	r1, [r8]
 8005af0:	f002 fffb 	bl	8008aea <strncmp>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d031      	beq.n	8005b5c <_strtod_l+0x1c4>
 8005af8:	2000      	movs	r0, #0
 8005afa:	463b      	mov	r3, r7
 8005afc:	4602      	mov	r2, r0
 8005afe:	9c04      	ldr	r4, [sp, #16]
 8005b00:	9005      	str	r0, [sp, #20]
 8005b02:	2b65      	cmp	r3, #101	; 0x65
 8005b04:	d001      	beq.n	8005b0a <_strtod_l+0x172>
 8005b06:	2b45      	cmp	r3, #69	; 0x45
 8005b08:	d114      	bne.n	8005b34 <_strtod_l+0x19c>
 8005b0a:	b924      	cbnz	r4, 8005b16 <_strtod_l+0x17e>
 8005b0c:	b910      	cbnz	r0, 8005b14 <_strtod_l+0x17c>
 8005b0e:	9b07      	ldr	r3, [sp, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d09e      	beq.n	8005a52 <_strtod_l+0xba>
 8005b14:	2400      	movs	r4, #0
 8005b16:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005b18:	1c73      	adds	r3, r6, #1
 8005b1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b1c:	7873      	ldrb	r3, [r6, #1]
 8005b1e:	2b2b      	cmp	r3, #43	; 0x2b
 8005b20:	d078      	beq.n	8005c14 <_strtod_l+0x27c>
 8005b22:	2b2d      	cmp	r3, #45	; 0x2d
 8005b24:	d070      	beq.n	8005c08 <_strtod_l+0x270>
 8005b26:	f04f 0c00 	mov.w	ip, #0
 8005b2a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005b2e:	2f09      	cmp	r7, #9
 8005b30:	d97c      	bls.n	8005c2c <_strtod_l+0x294>
 8005b32:	961b      	str	r6, [sp, #108]	; 0x6c
 8005b34:	f04f 0e00 	mov.w	lr, #0
 8005b38:	e09a      	b.n	8005c70 <_strtod_l+0x2d8>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e7c7      	b.n	8005ace <_strtod_l+0x136>
 8005b3e:	9904      	ldr	r1, [sp, #16]
 8005b40:	3001      	adds	r0, #1
 8005b42:	2908      	cmp	r1, #8
 8005b44:	bfd7      	itett	le
 8005b46:	9906      	ldrle	r1, [sp, #24]
 8005b48:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005b4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b50:	9306      	strle	r3, [sp, #24]
 8005b52:	9b04      	ldr	r3, [sp, #16]
 8005b54:	901b      	str	r0, [sp, #108]	; 0x6c
 8005b56:	3301      	adds	r3, #1
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	e7bf      	b.n	8005adc <_strtod_l+0x144>
 8005b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b5e:	191a      	adds	r2, r3, r4
 8005b60:	921b      	str	r2, [sp, #108]	; 0x6c
 8005b62:	9a04      	ldr	r2, [sp, #16]
 8005b64:	5d1b      	ldrb	r3, [r3, r4]
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d037      	beq.n	8005bda <_strtod_l+0x242>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	9c04      	ldr	r4, [sp, #16]
 8005b6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005b72:	2909      	cmp	r1, #9
 8005b74:	d913      	bls.n	8005b9e <_strtod_l+0x206>
 8005b76:	2101      	movs	r1, #1
 8005b78:	9105      	str	r1, [sp, #20]
 8005b7a:	e7c2      	b.n	8005b02 <_strtod_l+0x16a>
 8005b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b7e:	3001      	adds	r0, #1
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	921b      	str	r2, [sp, #108]	; 0x6c
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	2b30      	cmp	r3, #48	; 0x30
 8005b88:	d0f8      	beq.n	8005b7c <_strtod_l+0x1e4>
 8005b8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005b8e:	2a08      	cmp	r2, #8
 8005b90:	f200 84f0 	bhi.w	8006574 <_strtod_l+0xbdc>
 8005b94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005b96:	9208      	str	r2, [sp, #32]
 8005b98:	4602      	mov	r2, r0
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005ba2:	f100 0101 	add.w	r1, r0, #1
 8005ba6:	d012      	beq.n	8005bce <_strtod_l+0x236>
 8005ba8:	440a      	add	r2, r1
 8005baa:	270a      	movs	r7, #10
 8005bac:	4621      	mov	r1, r4
 8005bae:	eb00 0c04 	add.w	ip, r0, r4
 8005bb2:	458c      	cmp	ip, r1
 8005bb4:	d113      	bne.n	8005bde <_strtod_l+0x246>
 8005bb6:	1821      	adds	r1, r4, r0
 8005bb8:	2908      	cmp	r1, #8
 8005bba:	f104 0401 	add.w	r4, r4, #1
 8005bbe:	4404      	add	r4, r0
 8005bc0:	dc19      	bgt.n	8005bf6 <_strtod_l+0x25e>
 8005bc2:	210a      	movs	r1, #10
 8005bc4:	9b06      	ldr	r3, [sp, #24]
 8005bc6:	fb01 e303 	mla	r3, r1, r3, lr
 8005bca:	9306      	str	r3, [sp, #24]
 8005bcc:	2100      	movs	r1, #0
 8005bce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bd0:	1c58      	adds	r0, r3, #1
 8005bd2:	901b      	str	r0, [sp, #108]	; 0x6c
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	e7c9      	b.n	8005b6e <_strtod_l+0x1d6>
 8005bda:	9804      	ldr	r0, [sp, #16]
 8005bdc:	e7d3      	b.n	8005b86 <_strtod_l+0x1ee>
 8005bde:	2908      	cmp	r1, #8
 8005be0:	f101 0101 	add.w	r1, r1, #1
 8005be4:	dc03      	bgt.n	8005bee <_strtod_l+0x256>
 8005be6:	9b06      	ldr	r3, [sp, #24]
 8005be8:	437b      	muls	r3, r7
 8005bea:	9306      	str	r3, [sp, #24]
 8005bec:	e7e1      	b.n	8005bb2 <_strtod_l+0x21a>
 8005bee:	2910      	cmp	r1, #16
 8005bf0:	bfd8      	it	le
 8005bf2:	437d      	mulle	r5, r7
 8005bf4:	e7dd      	b.n	8005bb2 <_strtod_l+0x21a>
 8005bf6:	2c10      	cmp	r4, #16
 8005bf8:	bfdc      	itt	le
 8005bfa:	210a      	movle	r1, #10
 8005bfc:	fb01 e505 	mlale	r5, r1, r5, lr
 8005c00:	e7e4      	b.n	8005bcc <_strtod_l+0x234>
 8005c02:	2301      	movs	r3, #1
 8005c04:	9305      	str	r3, [sp, #20]
 8005c06:	e781      	b.n	8005b0c <_strtod_l+0x174>
 8005c08:	f04f 0c01 	mov.w	ip, #1
 8005c0c:	1cb3      	adds	r3, r6, #2
 8005c0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c10:	78b3      	ldrb	r3, [r6, #2]
 8005c12:	e78a      	b.n	8005b2a <_strtod_l+0x192>
 8005c14:	f04f 0c00 	mov.w	ip, #0
 8005c18:	e7f8      	b.n	8005c0c <_strtod_l+0x274>
 8005c1a:	bf00      	nop
 8005c1c:	080090c4 	.word	0x080090c4
 8005c20:	7ff00000 	.word	0x7ff00000
 8005c24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c26:	1c5f      	adds	r7, r3, #1
 8005c28:	971b      	str	r7, [sp, #108]	; 0x6c
 8005c2a:	785b      	ldrb	r3, [r3, #1]
 8005c2c:	2b30      	cmp	r3, #48	; 0x30
 8005c2e:	d0f9      	beq.n	8005c24 <_strtod_l+0x28c>
 8005c30:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005c34:	2f08      	cmp	r7, #8
 8005c36:	f63f af7d 	bhi.w	8005b34 <_strtod_l+0x19c>
 8005c3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005c3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c40:	9309      	str	r3, [sp, #36]	; 0x24
 8005c42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c44:	1c5f      	adds	r7, r3, #1
 8005c46:	971b      	str	r7, [sp, #108]	; 0x6c
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005c4e:	f1b8 0f09 	cmp.w	r8, #9
 8005c52:	d937      	bls.n	8005cc4 <_strtod_l+0x32c>
 8005c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c56:	1a7f      	subs	r7, r7, r1
 8005c58:	2f08      	cmp	r7, #8
 8005c5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005c5e:	dc37      	bgt.n	8005cd0 <_strtod_l+0x338>
 8005c60:	45be      	cmp	lr, r7
 8005c62:	bfa8      	it	ge
 8005c64:	46be      	movge	lr, r7
 8005c66:	f1bc 0f00 	cmp.w	ip, #0
 8005c6a:	d001      	beq.n	8005c70 <_strtod_l+0x2d8>
 8005c6c:	f1ce 0e00 	rsb	lr, lr, #0
 8005c70:	2c00      	cmp	r4, #0
 8005c72:	d151      	bne.n	8005d18 <_strtod_l+0x380>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	f47f aece 	bne.w	8005a16 <_strtod_l+0x7e>
 8005c7a:	9a07      	ldr	r2, [sp, #28]
 8005c7c:	2a00      	cmp	r2, #0
 8005c7e:	f47f aeca 	bne.w	8005a16 <_strtod_l+0x7e>
 8005c82:	9a05      	ldr	r2, [sp, #20]
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	f47f aee4 	bne.w	8005a52 <_strtod_l+0xba>
 8005c8a:	2b4e      	cmp	r3, #78	; 0x4e
 8005c8c:	d027      	beq.n	8005cde <_strtod_l+0x346>
 8005c8e:	dc21      	bgt.n	8005cd4 <_strtod_l+0x33c>
 8005c90:	2b49      	cmp	r3, #73	; 0x49
 8005c92:	f47f aede 	bne.w	8005a52 <_strtod_l+0xba>
 8005c96:	49a4      	ldr	r1, [pc, #656]	; (8005f28 <_strtod_l+0x590>)
 8005c98:	a81b      	add	r0, sp, #108	; 0x6c
 8005c9a:	f001 feab 	bl	80079f4 <__match>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f43f aed7 	beq.w	8005a52 <_strtod_l+0xba>
 8005ca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ca6:	49a1      	ldr	r1, [pc, #644]	; (8005f2c <_strtod_l+0x594>)
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	a81b      	add	r0, sp, #108	; 0x6c
 8005cac:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cae:	f001 fea1 	bl	80079f4 <__match>
 8005cb2:	b910      	cbnz	r0, 8005cba <_strtod_l+0x322>
 8005cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005f40 <_strtod_l+0x5a8>
 8005cbe:	f04f 0900 	mov.w	r9, #0
 8005cc2:	e6a8      	b.n	8005a16 <_strtod_l+0x7e>
 8005cc4:	210a      	movs	r1, #10
 8005cc6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005cca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005cce:	e7b8      	b.n	8005c42 <_strtod_l+0x2aa>
 8005cd0:	46be      	mov	lr, r7
 8005cd2:	e7c8      	b.n	8005c66 <_strtod_l+0x2ce>
 8005cd4:	2b69      	cmp	r3, #105	; 0x69
 8005cd6:	d0de      	beq.n	8005c96 <_strtod_l+0x2fe>
 8005cd8:	2b6e      	cmp	r3, #110	; 0x6e
 8005cda:	f47f aeba 	bne.w	8005a52 <_strtod_l+0xba>
 8005cde:	4994      	ldr	r1, [pc, #592]	; (8005f30 <_strtod_l+0x598>)
 8005ce0:	a81b      	add	r0, sp, #108	; 0x6c
 8005ce2:	f001 fe87 	bl	80079f4 <__match>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f43f aeb3 	beq.w	8005a52 <_strtod_l+0xba>
 8005cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b28      	cmp	r3, #40	; 0x28
 8005cf2:	d10e      	bne.n	8005d12 <_strtod_l+0x37a>
 8005cf4:	aa1e      	add	r2, sp, #120	; 0x78
 8005cf6:	498f      	ldr	r1, [pc, #572]	; (8005f34 <_strtod_l+0x59c>)
 8005cf8:	a81b      	add	r0, sp, #108	; 0x6c
 8005cfa:	f001 fe8f 	bl	8007a1c <__hexnan>
 8005cfe:	2805      	cmp	r0, #5
 8005d00:	d107      	bne.n	8005d12 <_strtod_l+0x37a>
 8005d02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d04:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005d08:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005d0c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005d10:	e681      	b.n	8005a16 <_strtod_l+0x7e>
 8005d12:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005f48 <_strtod_l+0x5b0>
 8005d16:	e7d2      	b.n	8005cbe <_strtod_l+0x326>
 8005d18:	ebae 0302 	sub.w	r3, lr, r2
 8005d1c:	9307      	str	r3, [sp, #28]
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	9806      	ldr	r0, [sp, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bf08      	it	eq
 8005d26:	4623      	moveq	r3, r4
 8005d28:	2c10      	cmp	r4, #16
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	46a0      	mov	r8, r4
 8005d2e:	bfa8      	it	ge
 8005d30:	f04f 0810 	movge.w	r8, #16
 8005d34:	f7fa fb6e 	bl	8000414 <__aeabi_ui2d>
 8005d38:	2c09      	cmp	r4, #9
 8005d3a:	4681      	mov	r9, r0
 8005d3c:	468a      	mov	sl, r1
 8005d3e:	dc13      	bgt.n	8005d68 <_strtod_l+0x3d0>
 8005d40:	9b07      	ldr	r3, [sp, #28]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f43f ae67 	beq.w	8005a16 <_strtod_l+0x7e>
 8005d48:	9b07      	ldr	r3, [sp, #28]
 8005d4a:	dd7e      	ble.n	8005e4a <_strtod_l+0x4b2>
 8005d4c:	2b16      	cmp	r3, #22
 8005d4e:	dc65      	bgt.n	8005e1c <_strtod_l+0x484>
 8005d50:	4a79      	ldr	r2, [pc, #484]	; (8005f38 <_strtod_l+0x5a0>)
 8005d52:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005d56:	464a      	mov	r2, r9
 8005d58:	e9de 0100 	ldrd	r0, r1, [lr]
 8005d5c:	4653      	mov	r3, sl
 8005d5e:	f7fa fbd3 	bl	8000508 <__aeabi_dmul>
 8005d62:	4681      	mov	r9, r0
 8005d64:	468a      	mov	sl, r1
 8005d66:	e656      	b.n	8005a16 <_strtod_l+0x7e>
 8005d68:	4b73      	ldr	r3, [pc, #460]	; (8005f38 <_strtod_l+0x5a0>)
 8005d6a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d72:	f7fa fbc9 	bl	8000508 <__aeabi_dmul>
 8005d76:	4606      	mov	r6, r0
 8005d78:	4628      	mov	r0, r5
 8005d7a:	460f      	mov	r7, r1
 8005d7c:	f7fa fb4a 	bl	8000414 <__aeabi_ui2d>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4630      	mov	r0, r6
 8005d86:	4639      	mov	r1, r7
 8005d88:	f7fa fa08 	bl	800019c <__adddf3>
 8005d8c:	2c0f      	cmp	r4, #15
 8005d8e:	4681      	mov	r9, r0
 8005d90:	468a      	mov	sl, r1
 8005d92:	ddd5      	ble.n	8005d40 <_strtod_l+0x3a8>
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	eba4 0808 	sub.w	r8, r4, r8
 8005d9a:	4498      	add	r8, r3
 8005d9c:	f1b8 0f00 	cmp.w	r8, #0
 8005da0:	f340 809a 	ble.w	8005ed8 <_strtod_l+0x540>
 8005da4:	f018 030f 	ands.w	r3, r8, #15
 8005da8:	d00a      	beq.n	8005dc0 <_strtod_l+0x428>
 8005daa:	4963      	ldr	r1, [pc, #396]	; (8005f38 <_strtod_l+0x5a0>)
 8005dac:	464a      	mov	r2, r9
 8005dae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005db6:	4653      	mov	r3, sl
 8005db8:	f7fa fba6 	bl	8000508 <__aeabi_dmul>
 8005dbc:	4681      	mov	r9, r0
 8005dbe:	468a      	mov	sl, r1
 8005dc0:	f038 080f 	bics.w	r8, r8, #15
 8005dc4:	d077      	beq.n	8005eb6 <_strtod_l+0x51e>
 8005dc6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005dca:	dd4b      	ble.n	8005e64 <_strtod_l+0x4cc>
 8005dcc:	f04f 0800 	mov.w	r8, #0
 8005dd0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005dd4:	f8cd 8020 	str.w	r8, [sp, #32]
 8005dd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ddc:	2322      	movs	r3, #34	; 0x22
 8005dde:	f04f 0900 	mov.w	r9, #0
 8005de2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005f40 <_strtod_l+0x5a8>
 8005de6:	f8cb 3000 	str.w	r3, [fp]
 8005dea:	9b08      	ldr	r3, [sp, #32]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f43f ae12 	beq.w	8005a16 <_strtod_l+0x7e>
 8005df2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005df4:	4658      	mov	r0, fp
 8005df6:	f001 ff1c 	bl	8007c32 <_Bfree>
 8005dfa:	9906      	ldr	r1, [sp, #24]
 8005dfc:	4658      	mov	r0, fp
 8005dfe:	f001 ff18 	bl	8007c32 <_Bfree>
 8005e02:	9904      	ldr	r1, [sp, #16]
 8005e04:	4658      	mov	r0, fp
 8005e06:	f001 ff14 	bl	8007c32 <_Bfree>
 8005e0a:	9908      	ldr	r1, [sp, #32]
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f001 ff10 	bl	8007c32 <_Bfree>
 8005e12:	4641      	mov	r1, r8
 8005e14:	4658      	mov	r0, fp
 8005e16:	f001 ff0c 	bl	8007c32 <_Bfree>
 8005e1a:	e5fc      	b.n	8005a16 <_strtod_l+0x7e>
 8005e1c:	9a07      	ldr	r2, [sp, #28]
 8005e1e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005e22:	4293      	cmp	r3, r2
 8005e24:	dbb6      	blt.n	8005d94 <_strtod_l+0x3fc>
 8005e26:	4d44      	ldr	r5, [pc, #272]	; (8005f38 <_strtod_l+0x5a0>)
 8005e28:	f1c4 040f 	rsb	r4, r4, #15
 8005e2c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005e30:	464a      	mov	r2, r9
 8005e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e36:	4653      	mov	r3, sl
 8005e38:	f7fa fb66 	bl	8000508 <__aeabi_dmul>
 8005e3c:	9b07      	ldr	r3, [sp, #28]
 8005e3e:	1b1c      	subs	r4, r3, r4
 8005e40:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005e44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e48:	e789      	b.n	8005d5e <_strtod_l+0x3c6>
 8005e4a:	f113 0f16 	cmn.w	r3, #22
 8005e4e:	dba1      	blt.n	8005d94 <_strtod_l+0x3fc>
 8005e50:	4a39      	ldr	r2, [pc, #228]	; (8005f38 <_strtod_l+0x5a0>)
 8005e52:	4648      	mov	r0, r9
 8005e54:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005e58:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	f7fa fc7d 	bl	800075c <__aeabi_ddiv>
 8005e62:	e77e      	b.n	8005d62 <_strtod_l+0x3ca>
 8005e64:	2300      	movs	r3, #0
 8005e66:	4648      	mov	r0, r9
 8005e68:	4651      	mov	r1, sl
 8005e6a:	461d      	mov	r5, r3
 8005e6c:	4e33      	ldr	r6, [pc, #204]	; (8005f3c <_strtod_l+0x5a4>)
 8005e6e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005e72:	f1b8 0f01 	cmp.w	r8, #1
 8005e76:	dc21      	bgt.n	8005ebc <_strtod_l+0x524>
 8005e78:	b10b      	cbz	r3, 8005e7e <_strtod_l+0x4e6>
 8005e7a:	4681      	mov	r9, r0
 8005e7c:	468a      	mov	sl, r1
 8005e7e:	4b2f      	ldr	r3, [pc, #188]	; (8005f3c <_strtod_l+0x5a4>)
 8005e80:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005e84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005e88:	464a      	mov	r2, r9
 8005e8a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005e8e:	4653      	mov	r3, sl
 8005e90:	f7fa fb3a 	bl	8000508 <__aeabi_dmul>
 8005e94:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <_strtod_l+0x5a8>)
 8005e96:	460a      	mov	r2, r1
 8005e98:	400b      	ands	r3, r1
 8005e9a:	492a      	ldr	r1, [pc, #168]	; (8005f44 <_strtod_l+0x5ac>)
 8005e9c:	4681      	mov	r9, r0
 8005e9e:	428b      	cmp	r3, r1
 8005ea0:	d894      	bhi.n	8005dcc <_strtod_l+0x434>
 8005ea2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ea6:	428b      	cmp	r3, r1
 8005ea8:	bf86      	itte	hi
 8005eaa:	f04f 39ff 	movhi.w	r9, #4294967295
 8005eae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005f4c <_strtod_l+0x5b4>
 8005eb2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9305      	str	r3, [sp, #20]
 8005eba:	e07b      	b.n	8005fb4 <_strtod_l+0x61c>
 8005ebc:	f018 0f01 	tst.w	r8, #1
 8005ec0:	d006      	beq.n	8005ed0 <_strtod_l+0x538>
 8005ec2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa fb1d 	bl	8000508 <__aeabi_dmul>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ed6:	e7cc      	b.n	8005e72 <_strtod_l+0x4da>
 8005ed8:	d0ed      	beq.n	8005eb6 <_strtod_l+0x51e>
 8005eda:	f1c8 0800 	rsb	r8, r8, #0
 8005ede:	f018 020f 	ands.w	r2, r8, #15
 8005ee2:	d00a      	beq.n	8005efa <_strtod_l+0x562>
 8005ee4:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <_strtod_l+0x5a0>)
 8005ee6:	4648      	mov	r0, r9
 8005ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eec:	4651      	mov	r1, sl
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa fc33 	bl	800075c <__aeabi_ddiv>
 8005ef6:	4681      	mov	r9, r0
 8005ef8:	468a      	mov	sl, r1
 8005efa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005efe:	d0da      	beq.n	8005eb6 <_strtod_l+0x51e>
 8005f00:	f1b8 0f1f 	cmp.w	r8, #31
 8005f04:	dd24      	ble.n	8005f50 <_strtod_l+0x5b8>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f0e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005f12:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f16:	2322      	movs	r3, #34	; 0x22
 8005f18:	f04f 0900 	mov.w	r9, #0
 8005f1c:	f04f 0a00 	mov.w	sl, #0
 8005f20:	f8cb 3000 	str.w	r3, [fp]
 8005f24:	e761      	b.n	8005dea <_strtod_l+0x452>
 8005f26:	bf00      	nop
 8005f28:	0800908d 	.word	0x0800908d
 8005f2c:	0800911b 	.word	0x0800911b
 8005f30:	08009095 	.word	0x08009095
 8005f34:	080090d8 	.word	0x080090d8
 8005f38:	080091c0 	.word	0x080091c0
 8005f3c:	08009198 	.word	0x08009198
 8005f40:	7ff00000 	.word	0x7ff00000
 8005f44:	7ca00000 	.word	0x7ca00000
 8005f48:	fff80000 	.word	0xfff80000
 8005f4c:	7fefffff 	.word	0x7fefffff
 8005f50:	f018 0310 	ands.w	r3, r8, #16
 8005f54:	bf18      	it	ne
 8005f56:	236a      	movne	r3, #106	; 0x6a
 8005f58:	4648      	mov	r0, r9
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	4651      	mov	r1, sl
 8005f5e:	2300      	movs	r3, #0
 8005f60:	4da1      	ldr	r5, [pc, #644]	; (80061e8 <_strtod_l+0x850>)
 8005f62:	f1b8 0f00 	cmp.w	r8, #0
 8005f66:	f300 8113 	bgt.w	8006190 <_strtod_l+0x7f8>
 8005f6a:	b10b      	cbz	r3, 8005f70 <_strtod_l+0x5d8>
 8005f6c:	4681      	mov	r9, r0
 8005f6e:	468a      	mov	sl, r1
 8005f70:	9b05      	ldr	r3, [sp, #20]
 8005f72:	b1bb      	cbz	r3, 8005fa4 <_strtod_l+0x60c>
 8005f74:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005f78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	4651      	mov	r1, sl
 8005f80:	dd10      	ble.n	8005fa4 <_strtod_l+0x60c>
 8005f82:	2b1f      	cmp	r3, #31
 8005f84:	f340 8110 	ble.w	80061a8 <_strtod_l+0x810>
 8005f88:	2b34      	cmp	r3, #52	; 0x34
 8005f8a:	bfd8      	it	le
 8005f8c:	f04f 32ff 	movle.w	r2, #4294967295
 8005f90:	f04f 0900 	mov.w	r9, #0
 8005f94:	bfcf      	iteee	gt
 8005f96:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005f9a:	3b20      	suble	r3, #32
 8005f9c:	fa02 f303 	lslle.w	r3, r2, r3
 8005fa0:	ea03 0a01 	andle.w	sl, r3, r1
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4648      	mov	r0, r9
 8005faa:	4651      	mov	r1, sl
 8005fac:	f7fa fd14 	bl	80009d8 <__aeabi_dcmpeq>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d1a8      	bne.n	8005f06 <_strtod_l+0x56e>
 8005fb4:	9b06      	ldr	r3, [sp, #24]
 8005fb6:	9a04      	ldr	r2, [sp, #16]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	9908      	ldr	r1, [sp, #32]
 8005fbc:	4623      	mov	r3, r4
 8005fbe:	4658      	mov	r0, fp
 8005fc0:	f001 fe89 	bl	8007cd6 <__s2b>
 8005fc4:	9008      	str	r0, [sp, #32]
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f43f af00 	beq.w	8005dcc <_strtod_l+0x434>
 8005fcc:	9a07      	ldr	r2, [sp, #28]
 8005fce:	9b07      	ldr	r3, [sp, #28]
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	f1c3 0300 	rsb	r3, r3, #0
 8005fd6:	bfa8      	it	ge
 8005fd8:	2300      	movge	r3, #0
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	930e      	str	r3, [sp, #56]	; 0x38
 8005fe0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005fe4:	9316      	str	r3, [sp, #88]	; 0x58
 8005fe6:	f8cd 8010 	str.w	r8, [sp, #16]
 8005fea:	9b08      	ldr	r3, [sp, #32]
 8005fec:	4658      	mov	r0, fp
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	f001 fdeb 	bl	8007bca <_Balloc>
 8005ff4:	9006      	str	r0, [sp, #24]
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f43f aef0 	beq.w	8005ddc <_strtod_l+0x444>
 8005ffc:	9b08      	ldr	r3, [sp, #32]
 8005ffe:	300c      	adds	r0, #12
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	f103 010c 	add.w	r1, r3, #12
 8006006:	3202      	adds	r2, #2
 8006008:	0092      	lsls	r2, r2, #2
 800600a:	f001 fdd3 	bl	8007bb4 <memcpy>
 800600e:	ab1e      	add	r3, sp, #120	; 0x78
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	ab1d      	add	r3, sp, #116	; 0x74
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	464a      	mov	r2, r9
 8006018:	4653      	mov	r3, sl
 800601a:	4658      	mov	r0, fp
 800601c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006020:	f002 f914 	bl	800824c <__d2b>
 8006024:	901c      	str	r0, [sp, #112]	; 0x70
 8006026:	2800      	cmp	r0, #0
 8006028:	f43f aed8 	beq.w	8005ddc <_strtod_l+0x444>
 800602c:	2101      	movs	r1, #1
 800602e:	4658      	mov	r0, fp
 8006030:	f001 fedd 	bl	8007dee <__i2b>
 8006034:	9004      	str	r0, [sp, #16]
 8006036:	4603      	mov	r3, r0
 8006038:	2800      	cmp	r0, #0
 800603a:	f43f aecf 	beq.w	8005ddc <_strtod_l+0x444>
 800603e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006040:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006042:	2d00      	cmp	r5, #0
 8006044:	bfab      	itete	ge
 8006046:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006048:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800604a:	18ee      	addge	r6, r5, r3
 800604c:	1b5c      	sublt	r4, r3, r5
 800604e:	9b05      	ldr	r3, [sp, #20]
 8006050:	bfa8      	it	ge
 8006052:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006054:	eba5 0503 	sub.w	r5, r5, r3
 8006058:	4415      	add	r5, r2
 800605a:	4b64      	ldr	r3, [pc, #400]	; (80061ec <_strtod_l+0x854>)
 800605c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006060:	bfb8      	it	lt
 8006062:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006064:	429d      	cmp	r5, r3
 8006066:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800606a:	f280 80af 	bge.w	80061cc <_strtod_l+0x834>
 800606e:	1b5b      	subs	r3, r3, r5
 8006070:	2b1f      	cmp	r3, #31
 8006072:	eba2 0203 	sub.w	r2, r2, r3
 8006076:	f04f 0701 	mov.w	r7, #1
 800607a:	f300 809c 	bgt.w	80061b6 <_strtod_l+0x81e>
 800607e:	2500      	movs	r5, #0
 8006080:	fa07 f303 	lsl.w	r3, r7, r3
 8006084:	930f      	str	r3, [sp, #60]	; 0x3c
 8006086:	18b7      	adds	r7, r6, r2
 8006088:	9b05      	ldr	r3, [sp, #20]
 800608a:	42be      	cmp	r6, r7
 800608c:	4414      	add	r4, r2
 800608e:	441c      	add	r4, r3
 8006090:	4633      	mov	r3, r6
 8006092:	bfa8      	it	ge
 8006094:	463b      	movge	r3, r7
 8006096:	42a3      	cmp	r3, r4
 8006098:	bfa8      	it	ge
 800609a:	4623      	movge	r3, r4
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfc2      	ittt	gt
 80060a0:	1aff      	subgt	r7, r7, r3
 80060a2:	1ae4      	subgt	r4, r4, r3
 80060a4:	1af6      	subgt	r6, r6, r3
 80060a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a8:	b1bb      	cbz	r3, 80060da <_strtod_l+0x742>
 80060aa:	461a      	mov	r2, r3
 80060ac:	9904      	ldr	r1, [sp, #16]
 80060ae:	4658      	mov	r0, fp
 80060b0:	f001 ff3c 	bl	8007f2c <__pow5mult>
 80060b4:	9004      	str	r0, [sp, #16]
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f43f ae90 	beq.w	8005ddc <_strtod_l+0x444>
 80060bc:	4601      	mov	r1, r0
 80060be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80060c0:	4658      	mov	r0, fp
 80060c2:	f001 fe9d 	bl	8007e00 <__multiply>
 80060c6:	9009      	str	r0, [sp, #36]	; 0x24
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f43f ae87 	beq.w	8005ddc <_strtod_l+0x444>
 80060ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060d0:	4658      	mov	r0, fp
 80060d2:	f001 fdae 	bl	8007c32 <_Bfree>
 80060d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d8:	931c      	str	r3, [sp, #112]	; 0x70
 80060da:	2f00      	cmp	r7, #0
 80060dc:	dc7a      	bgt.n	80061d4 <_strtod_l+0x83c>
 80060de:	9b07      	ldr	r3, [sp, #28]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dd08      	ble.n	80060f6 <_strtod_l+0x75e>
 80060e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80060e6:	9906      	ldr	r1, [sp, #24]
 80060e8:	4658      	mov	r0, fp
 80060ea:	f001 ff1f 	bl	8007f2c <__pow5mult>
 80060ee:	9006      	str	r0, [sp, #24]
 80060f0:	2800      	cmp	r0, #0
 80060f2:	f43f ae73 	beq.w	8005ddc <_strtod_l+0x444>
 80060f6:	2c00      	cmp	r4, #0
 80060f8:	dd08      	ble.n	800610c <_strtod_l+0x774>
 80060fa:	4622      	mov	r2, r4
 80060fc:	9906      	ldr	r1, [sp, #24]
 80060fe:	4658      	mov	r0, fp
 8006100:	f001 ff62 	bl	8007fc8 <__lshift>
 8006104:	9006      	str	r0, [sp, #24]
 8006106:	2800      	cmp	r0, #0
 8006108:	f43f ae68 	beq.w	8005ddc <_strtod_l+0x444>
 800610c:	2e00      	cmp	r6, #0
 800610e:	dd08      	ble.n	8006122 <_strtod_l+0x78a>
 8006110:	4632      	mov	r2, r6
 8006112:	9904      	ldr	r1, [sp, #16]
 8006114:	4658      	mov	r0, fp
 8006116:	f001 ff57 	bl	8007fc8 <__lshift>
 800611a:	9004      	str	r0, [sp, #16]
 800611c:	2800      	cmp	r0, #0
 800611e:	f43f ae5d 	beq.w	8005ddc <_strtod_l+0x444>
 8006122:	9a06      	ldr	r2, [sp, #24]
 8006124:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006126:	4658      	mov	r0, fp
 8006128:	f001 ffbc 	bl	80080a4 <__mdiff>
 800612c:	4680      	mov	r8, r0
 800612e:	2800      	cmp	r0, #0
 8006130:	f43f ae54 	beq.w	8005ddc <_strtod_l+0x444>
 8006134:	2400      	movs	r4, #0
 8006136:	68c3      	ldr	r3, [r0, #12]
 8006138:	9904      	ldr	r1, [sp, #16]
 800613a:	60c4      	str	r4, [r0, #12]
 800613c:	930c      	str	r3, [sp, #48]	; 0x30
 800613e:	f001 ff97 	bl	8008070 <__mcmp>
 8006142:	42a0      	cmp	r0, r4
 8006144:	da54      	bge.n	80061f0 <_strtod_l+0x858>
 8006146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006148:	b9f3      	cbnz	r3, 8006188 <_strtod_l+0x7f0>
 800614a:	f1b9 0f00 	cmp.w	r9, #0
 800614e:	d11b      	bne.n	8006188 <_strtod_l+0x7f0>
 8006150:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006154:	b9c3      	cbnz	r3, 8006188 <_strtod_l+0x7f0>
 8006156:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800615a:	0d1b      	lsrs	r3, r3, #20
 800615c:	051b      	lsls	r3, r3, #20
 800615e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006162:	d911      	bls.n	8006188 <_strtod_l+0x7f0>
 8006164:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006168:	b91b      	cbnz	r3, 8006172 <_strtod_l+0x7da>
 800616a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800616e:	2b01      	cmp	r3, #1
 8006170:	dd0a      	ble.n	8006188 <_strtod_l+0x7f0>
 8006172:	4641      	mov	r1, r8
 8006174:	2201      	movs	r2, #1
 8006176:	4658      	mov	r0, fp
 8006178:	f001 ff26 	bl	8007fc8 <__lshift>
 800617c:	9904      	ldr	r1, [sp, #16]
 800617e:	4680      	mov	r8, r0
 8006180:	f001 ff76 	bl	8008070 <__mcmp>
 8006184:	2800      	cmp	r0, #0
 8006186:	dc68      	bgt.n	800625a <_strtod_l+0x8c2>
 8006188:	9b05      	ldr	r3, [sp, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d172      	bne.n	8006274 <_strtod_l+0x8dc>
 800618e:	e630      	b.n	8005df2 <_strtod_l+0x45a>
 8006190:	f018 0f01 	tst.w	r8, #1
 8006194:	d004      	beq.n	80061a0 <_strtod_l+0x808>
 8006196:	e9d5 2300 	ldrd	r2, r3, [r5]
 800619a:	f7fa f9b5 	bl	8000508 <__aeabi_dmul>
 800619e:	2301      	movs	r3, #1
 80061a0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80061a4:	3508      	adds	r5, #8
 80061a6:	e6dc      	b.n	8005f62 <_strtod_l+0x5ca>
 80061a8:	f04f 32ff 	mov.w	r2, #4294967295
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	ea03 0909 	and.w	r9, r3, r9
 80061b4:	e6f6      	b.n	8005fa4 <_strtod_l+0x60c>
 80061b6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80061ba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80061be:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80061c2:	35e2      	adds	r5, #226	; 0xe2
 80061c4:	fa07 f505 	lsl.w	r5, r7, r5
 80061c8:	970f      	str	r7, [sp, #60]	; 0x3c
 80061ca:	e75c      	b.n	8006086 <_strtod_l+0x6ee>
 80061cc:	2301      	movs	r3, #1
 80061ce:	2500      	movs	r5, #0
 80061d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d2:	e758      	b.n	8006086 <_strtod_l+0x6ee>
 80061d4:	463a      	mov	r2, r7
 80061d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061d8:	4658      	mov	r0, fp
 80061da:	f001 fef5 	bl	8007fc8 <__lshift>
 80061de:	901c      	str	r0, [sp, #112]	; 0x70
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f47f af7c 	bne.w	80060de <_strtod_l+0x746>
 80061e6:	e5f9      	b.n	8005ddc <_strtod_l+0x444>
 80061e8:	080090f0 	.word	0x080090f0
 80061ec:	fffffc02 	.word	0xfffffc02
 80061f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80061f4:	f040 8089 	bne.w	800630a <_strtod_l+0x972>
 80061f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061fa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80061fe:	b342      	cbz	r2, 8006252 <_strtod_l+0x8ba>
 8006200:	4aaf      	ldr	r2, [pc, #700]	; (80064c0 <_strtod_l+0xb28>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d156      	bne.n	80062b4 <_strtod_l+0x91c>
 8006206:	9b05      	ldr	r3, [sp, #20]
 8006208:	4648      	mov	r0, r9
 800620a:	b1eb      	cbz	r3, 8006248 <_strtod_l+0x8b0>
 800620c:	4653      	mov	r3, sl
 800620e:	4aad      	ldr	r2, [pc, #692]	; (80064c4 <_strtod_l+0xb2c>)
 8006210:	f04f 31ff 	mov.w	r1, #4294967295
 8006214:	401a      	ands	r2, r3
 8006216:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800621a:	d818      	bhi.n	800624e <_strtod_l+0x8b6>
 800621c:	0d12      	lsrs	r2, r2, #20
 800621e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006222:	fa01 f303 	lsl.w	r3, r1, r3
 8006226:	4298      	cmp	r0, r3
 8006228:	d144      	bne.n	80062b4 <_strtod_l+0x91c>
 800622a:	4ba7      	ldr	r3, [pc, #668]	; (80064c8 <_strtod_l+0xb30>)
 800622c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800622e:	429a      	cmp	r2, r3
 8006230:	d102      	bne.n	8006238 <_strtod_l+0x8a0>
 8006232:	3001      	adds	r0, #1
 8006234:	f43f add2 	beq.w	8005ddc <_strtod_l+0x444>
 8006238:	4ba2      	ldr	r3, [pc, #648]	; (80064c4 <_strtod_l+0xb2c>)
 800623a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800623c:	f04f 0900 	mov.w	r9, #0
 8006240:	401a      	ands	r2, r3
 8006242:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006246:	e79f      	b.n	8006188 <_strtod_l+0x7f0>
 8006248:	f04f 33ff 	mov.w	r3, #4294967295
 800624c:	e7eb      	b.n	8006226 <_strtod_l+0x88e>
 800624e:	460b      	mov	r3, r1
 8006250:	e7e9      	b.n	8006226 <_strtod_l+0x88e>
 8006252:	bb7b      	cbnz	r3, 80062b4 <_strtod_l+0x91c>
 8006254:	f1b9 0f00 	cmp.w	r9, #0
 8006258:	d12c      	bne.n	80062b4 <_strtod_l+0x91c>
 800625a:	9905      	ldr	r1, [sp, #20]
 800625c:	4653      	mov	r3, sl
 800625e:	4a99      	ldr	r2, [pc, #612]	; (80064c4 <_strtod_l+0xb2c>)
 8006260:	b1f1      	cbz	r1, 80062a0 <_strtod_l+0x908>
 8006262:	ea02 010a 	and.w	r1, r2, sl
 8006266:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800626a:	dc19      	bgt.n	80062a0 <_strtod_l+0x908>
 800626c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006270:	f77f ae51 	ble.w	8005f16 <_strtod_l+0x57e>
 8006274:	2300      	movs	r3, #0
 8006276:	4a95      	ldr	r2, [pc, #596]	; (80064cc <_strtod_l+0xb34>)
 8006278:	4648      	mov	r0, r9
 800627a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800627e:	4651      	mov	r1, sl
 8006280:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006284:	f7fa f940 	bl	8000508 <__aeabi_dmul>
 8006288:	4681      	mov	r9, r0
 800628a:	468a      	mov	sl, r1
 800628c:	2900      	cmp	r1, #0
 800628e:	f47f adb0 	bne.w	8005df2 <_strtod_l+0x45a>
 8006292:	2800      	cmp	r0, #0
 8006294:	f47f adad 	bne.w	8005df2 <_strtod_l+0x45a>
 8006298:	2322      	movs	r3, #34	; 0x22
 800629a:	f8cb 3000 	str.w	r3, [fp]
 800629e:	e5a8      	b.n	8005df2 <_strtod_l+0x45a>
 80062a0:	4013      	ands	r3, r2
 80062a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80062a6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80062aa:	f04f 39ff 	mov.w	r9, #4294967295
 80062ae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80062b2:	e769      	b.n	8006188 <_strtod_l+0x7f0>
 80062b4:	b19d      	cbz	r5, 80062de <_strtod_l+0x946>
 80062b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b8:	421d      	tst	r5, r3
 80062ba:	f43f af65 	beq.w	8006188 <_strtod_l+0x7f0>
 80062be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062c0:	9a05      	ldr	r2, [sp, #20]
 80062c2:	4648      	mov	r0, r9
 80062c4:	4651      	mov	r1, sl
 80062c6:	b173      	cbz	r3, 80062e6 <_strtod_l+0x94e>
 80062c8:	f7ff fb42 	bl	8005950 <sulp>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062d4:	f7f9 ff62 	bl	800019c <__adddf3>
 80062d8:	4681      	mov	r9, r0
 80062da:	468a      	mov	sl, r1
 80062dc:	e754      	b.n	8006188 <_strtod_l+0x7f0>
 80062de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062e0:	ea13 0f09 	tst.w	r3, r9
 80062e4:	e7e9      	b.n	80062ba <_strtod_l+0x922>
 80062e6:	f7ff fb33 	bl	8005950 <sulp>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062f2:	f7f9 ff51 	bl	8000198 <__aeabi_dsub>
 80062f6:	2200      	movs	r2, #0
 80062f8:	2300      	movs	r3, #0
 80062fa:	4681      	mov	r9, r0
 80062fc:	468a      	mov	sl, r1
 80062fe:	f7fa fb6b 	bl	80009d8 <__aeabi_dcmpeq>
 8006302:	2800      	cmp	r0, #0
 8006304:	f47f ae07 	bne.w	8005f16 <_strtod_l+0x57e>
 8006308:	e73e      	b.n	8006188 <_strtod_l+0x7f0>
 800630a:	9904      	ldr	r1, [sp, #16]
 800630c:	4640      	mov	r0, r8
 800630e:	f001 ffec 	bl	80082ea <__ratio>
 8006312:	2200      	movs	r2, #0
 8006314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006318:	4606      	mov	r6, r0
 800631a:	460f      	mov	r7, r1
 800631c:	f7fa fb70 	bl	8000a00 <__aeabi_dcmple>
 8006320:	2800      	cmp	r0, #0
 8006322:	d075      	beq.n	8006410 <_strtod_l+0xa78>
 8006324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d047      	beq.n	80063ba <_strtod_l+0xa22>
 800632a:	2600      	movs	r6, #0
 800632c:	4f68      	ldr	r7, [pc, #416]	; (80064d0 <_strtod_l+0xb38>)
 800632e:	4d68      	ldr	r5, [pc, #416]	; (80064d0 <_strtod_l+0xb38>)
 8006330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006332:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006336:	0d1b      	lsrs	r3, r3, #20
 8006338:	051b      	lsls	r3, r3, #20
 800633a:	930f      	str	r3, [sp, #60]	; 0x3c
 800633c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800633e:	4b65      	ldr	r3, [pc, #404]	; (80064d4 <_strtod_l+0xb3c>)
 8006340:	429a      	cmp	r2, r3
 8006342:	f040 80cf 	bne.w	80064e4 <_strtod_l+0xb4c>
 8006346:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800634a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800634e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006350:	4648      	mov	r0, r9
 8006352:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006356:	4651      	mov	r1, sl
 8006358:	f001 ff02 	bl	8008160 <__ulp>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4630      	mov	r0, r6
 8006362:	4639      	mov	r1, r7
 8006364:	f7fa f8d0 	bl	8000508 <__aeabi_dmul>
 8006368:	464a      	mov	r2, r9
 800636a:	4653      	mov	r3, sl
 800636c:	f7f9 ff16 	bl	800019c <__adddf3>
 8006370:	460b      	mov	r3, r1
 8006372:	4954      	ldr	r1, [pc, #336]	; (80064c4 <_strtod_l+0xb2c>)
 8006374:	4a58      	ldr	r2, [pc, #352]	; (80064d8 <_strtod_l+0xb40>)
 8006376:	4019      	ands	r1, r3
 8006378:	4291      	cmp	r1, r2
 800637a:	4681      	mov	r9, r0
 800637c:	d95e      	bls.n	800643c <_strtod_l+0xaa4>
 800637e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006380:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006384:	4293      	cmp	r3, r2
 8006386:	d103      	bne.n	8006390 <_strtod_l+0x9f8>
 8006388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800638a:	3301      	adds	r3, #1
 800638c:	f43f ad26 	beq.w	8005ddc <_strtod_l+0x444>
 8006390:	f04f 39ff 	mov.w	r9, #4294967295
 8006394:	f8df a130 	ldr.w	sl, [pc, #304]	; 80064c8 <_strtod_l+0xb30>
 8006398:	991c      	ldr	r1, [sp, #112]	; 0x70
 800639a:	4658      	mov	r0, fp
 800639c:	f001 fc49 	bl	8007c32 <_Bfree>
 80063a0:	9906      	ldr	r1, [sp, #24]
 80063a2:	4658      	mov	r0, fp
 80063a4:	f001 fc45 	bl	8007c32 <_Bfree>
 80063a8:	9904      	ldr	r1, [sp, #16]
 80063aa:	4658      	mov	r0, fp
 80063ac:	f001 fc41 	bl	8007c32 <_Bfree>
 80063b0:	4641      	mov	r1, r8
 80063b2:	4658      	mov	r0, fp
 80063b4:	f001 fc3d 	bl	8007c32 <_Bfree>
 80063b8:	e617      	b.n	8005fea <_strtod_l+0x652>
 80063ba:	f1b9 0f00 	cmp.w	r9, #0
 80063be:	d119      	bne.n	80063f4 <_strtod_l+0xa5c>
 80063c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c6:	b9e3      	cbnz	r3, 8006402 <_strtod_l+0xa6a>
 80063c8:	2200      	movs	r2, #0
 80063ca:	4b41      	ldr	r3, [pc, #260]	; (80064d0 <_strtod_l+0xb38>)
 80063cc:	4630      	mov	r0, r6
 80063ce:	4639      	mov	r1, r7
 80063d0:	f7fa fb0c 	bl	80009ec <__aeabi_dcmplt>
 80063d4:	b9c8      	cbnz	r0, 800640a <_strtod_l+0xa72>
 80063d6:	2200      	movs	r2, #0
 80063d8:	4b40      	ldr	r3, [pc, #256]	; (80064dc <_strtod_l+0xb44>)
 80063da:	4630      	mov	r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	f7fa f893 	bl	8000508 <__aeabi_dmul>
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80063ea:	9418      	str	r4, [sp, #96]	; 0x60
 80063ec:	9319      	str	r3, [sp, #100]	; 0x64
 80063ee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80063f2:	e79d      	b.n	8006330 <_strtod_l+0x998>
 80063f4:	f1b9 0f01 	cmp.w	r9, #1
 80063f8:	d103      	bne.n	8006402 <_strtod_l+0xa6a>
 80063fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f43f ad8a 	beq.w	8005f16 <_strtod_l+0x57e>
 8006402:	2600      	movs	r6, #0
 8006404:	4f36      	ldr	r7, [pc, #216]	; (80064e0 <_strtod_l+0xb48>)
 8006406:	2400      	movs	r4, #0
 8006408:	e791      	b.n	800632e <_strtod_l+0x996>
 800640a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800640c:	4d33      	ldr	r5, [pc, #204]	; (80064dc <_strtod_l+0xb44>)
 800640e:	e7ea      	b.n	80063e6 <_strtod_l+0xa4e>
 8006410:	4b32      	ldr	r3, [pc, #200]	; (80064dc <_strtod_l+0xb44>)
 8006412:	2200      	movs	r2, #0
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7fa f876 	bl	8000508 <__aeabi_dmul>
 800641c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800641e:	4604      	mov	r4, r0
 8006420:	460d      	mov	r5, r1
 8006422:	b933      	cbnz	r3, 8006432 <_strtod_l+0xa9a>
 8006424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006428:	9010      	str	r0, [sp, #64]	; 0x40
 800642a:	9311      	str	r3, [sp, #68]	; 0x44
 800642c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006430:	e77e      	b.n	8006330 <_strtod_l+0x998>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800643a:	e7f7      	b.n	800642c <_strtod_l+0xa94>
 800643c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006440:	9b05      	ldr	r3, [sp, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1a8      	bne.n	8006398 <_strtod_l+0xa00>
 8006446:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800644a:	0d1b      	lsrs	r3, r3, #20
 800644c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800644e:	051b      	lsls	r3, r3, #20
 8006450:	429a      	cmp	r2, r3
 8006452:	4656      	mov	r6, sl
 8006454:	d1a0      	bne.n	8006398 <_strtod_l+0xa00>
 8006456:	4629      	mov	r1, r5
 8006458:	4620      	mov	r0, r4
 800645a:	f7fa fb05 	bl	8000a68 <__aeabi_d2iz>
 800645e:	f7f9 ffe9 	bl	8000434 <__aeabi_i2d>
 8006462:	460b      	mov	r3, r1
 8006464:	4602      	mov	r2, r0
 8006466:	4629      	mov	r1, r5
 8006468:	4620      	mov	r0, r4
 800646a:	f7f9 fe95 	bl	8000198 <__aeabi_dsub>
 800646e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006470:	4604      	mov	r4, r0
 8006472:	460d      	mov	r5, r1
 8006474:	b933      	cbnz	r3, 8006484 <_strtod_l+0xaec>
 8006476:	f1b9 0f00 	cmp.w	r9, #0
 800647a:	d103      	bne.n	8006484 <_strtod_l+0xaec>
 800647c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006480:	2e00      	cmp	r6, #0
 8006482:	d06a      	beq.n	800655a <_strtod_l+0xbc2>
 8006484:	a30a      	add	r3, pc, #40	; (adr r3, 80064b0 <_strtod_l+0xb18>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	4620      	mov	r0, r4
 800648c:	4629      	mov	r1, r5
 800648e:	f7fa faad 	bl	80009ec <__aeabi_dcmplt>
 8006492:	2800      	cmp	r0, #0
 8006494:	f47f acad 	bne.w	8005df2 <_strtod_l+0x45a>
 8006498:	a307      	add	r3, pc, #28	; (adr r3, 80064b8 <_strtod_l+0xb20>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa fac1 	bl	8000a28 <__aeabi_dcmpgt>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	f43f af76 	beq.w	8006398 <_strtod_l+0xa00>
 80064ac:	e4a1      	b.n	8005df2 <_strtod_l+0x45a>
 80064ae:	bf00      	nop
 80064b0:	94a03595 	.word	0x94a03595
 80064b4:	3fdfffff 	.word	0x3fdfffff
 80064b8:	35afe535 	.word	0x35afe535
 80064bc:	3fe00000 	.word	0x3fe00000
 80064c0:	000fffff 	.word	0x000fffff
 80064c4:	7ff00000 	.word	0x7ff00000
 80064c8:	7fefffff 	.word	0x7fefffff
 80064cc:	39500000 	.word	0x39500000
 80064d0:	3ff00000 	.word	0x3ff00000
 80064d4:	7fe00000 	.word	0x7fe00000
 80064d8:	7c9fffff 	.word	0x7c9fffff
 80064dc:	3fe00000 	.word	0x3fe00000
 80064e0:	bff00000 	.word	0xbff00000
 80064e4:	9b05      	ldr	r3, [sp, #20]
 80064e6:	b313      	cbz	r3, 800652e <_strtod_l+0xb96>
 80064e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80064ee:	d81e      	bhi.n	800652e <_strtod_l+0xb96>
 80064f0:	a325      	add	r3, pc, #148	; (adr r3, 8006588 <_strtod_l+0xbf0>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7fa fa81 	bl	8000a00 <__aeabi_dcmple>
 80064fe:	b190      	cbz	r0, 8006526 <_strtod_l+0xb8e>
 8006500:	4629      	mov	r1, r5
 8006502:	4620      	mov	r0, r4
 8006504:	f7fa fad8 	bl	8000ab8 <__aeabi_d2uiz>
 8006508:	2800      	cmp	r0, #0
 800650a:	bf08      	it	eq
 800650c:	2001      	moveq	r0, #1
 800650e:	f7f9 ff81 	bl	8000414 <__aeabi_ui2d>
 8006512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006514:	4604      	mov	r4, r0
 8006516:	460d      	mov	r5, r1
 8006518:	b9d3      	cbnz	r3, 8006550 <_strtod_l+0xbb8>
 800651a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800651e:	9012      	str	r0, [sp, #72]	; 0x48
 8006520:	9313      	str	r3, [sp, #76]	; 0x4c
 8006522:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006528:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800652c:	1a9f      	subs	r7, r3, r2
 800652e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006532:	f001 fe15 	bl	8008160 <__ulp>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4630      	mov	r0, r6
 800653c:	4639      	mov	r1, r7
 800653e:	f7f9 ffe3 	bl	8000508 <__aeabi_dmul>
 8006542:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006546:	f7f9 fe29 	bl	800019c <__adddf3>
 800654a:	4681      	mov	r9, r0
 800654c:	468a      	mov	sl, r1
 800654e:	e777      	b.n	8006440 <_strtod_l+0xaa8>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006558:	e7e3      	b.n	8006522 <_strtod_l+0xb8a>
 800655a:	a30d      	add	r3, pc, #52	; (adr r3, 8006590 <_strtod_l+0xbf8>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7fa fa44 	bl	80009ec <__aeabi_dcmplt>
 8006564:	e79f      	b.n	80064a6 <_strtod_l+0xb0e>
 8006566:	2300      	movs	r3, #0
 8006568:	930d      	str	r3, [sp, #52]	; 0x34
 800656a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800656c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	f7ff ba55 	b.w	8005a1e <_strtod_l+0x86>
 8006574:	2b65      	cmp	r3, #101	; 0x65
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f43f ab42 	beq.w	8005c02 <_strtod_l+0x26a>
 800657e:	2101      	movs	r1, #1
 8006580:	4614      	mov	r4, r2
 8006582:	9105      	str	r1, [sp, #20]
 8006584:	f7ff babf 	b.w	8005b06 <_strtod_l+0x16e>
 8006588:	ffc00000 	.word	0xffc00000
 800658c:	41dfffff 	.word	0x41dfffff
 8006590:	94a03595 	.word	0x94a03595
 8006594:	3fcfffff 	.word	0x3fcfffff

08006598 <_strtod_r>:
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <_strtod_r+0x18>)
 800659a:	b410      	push	{r4}
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4c05      	ldr	r4, [pc, #20]	; (80065b4 <_strtod_r+0x1c>)
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bf08      	it	eq
 80065a6:	4623      	moveq	r3, r4
 80065a8:	bc10      	pop	{r4}
 80065aa:	f7ff b9f5 	b.w	8005998 <_strtod_l>
 80065ae:	bf00      	nop
 80065b0:	2000000c 	.word	0x2000000c
 80065b4:	20000070 	.word	0x20000070

080065b8 <_strtol_l.isra.0>:
 80065b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	4680      	mov	r8, r0
 80065be:	4689      	mov	r9, r1
 80065c0:	4692      	mov	sl, r2
 80065c2:	461e      	mov	r6, r3
 80065c4:	460f      	mov	r7, r1
 80065c6:	463d      	mov	r5, r7
 80065c8:	9808      	ldr	r0, [sp, #32]
 80065ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065ce:	f001 fab5 	bl	8007b3c <__locale_ctype_ptr_l>
 80065d2:	4420      	add	r0, r4
 80065d4:	7843      	ldrb	r3, [r0, #1]
 80065d6:	f013 0308 	ands.w	r3, r3, #8
 80065da:	d132      	bne.n	8006642 <_strtol_l.isra.0+0x8a>
 80065dc:	2c2d      	cmp	r4, #45	; 0x2d
 80065de:	d132      	bne.n	8006646 <_strtol_l.isra.0+0x8e>
 80065e0:	2201      	movs	r2, #1
 80065e2:	787c      	ldrb	r4, [r7, #1]
 80065e4:	1cbd      	adds	r5, r7, #2
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d05d      	beq.n	80066a6 <_strtol_l.isra.0+0xee>
 80065ea:	2e10      	cmp	r6, #16
 80065ec:	d109      	bne.n	8006602 <_strtol_l.isra.0+0x4a>
 80065ee:	2c30      	cmp	r4, #48	; 0x30
 80065f0:	d107      	bne.n	8006602 <_strtol_l.isra.0+0x4a>
 80065f2:	782b      	ldrb	r3, [r5, #0]
 80065f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065f8:	2b58      	cmp	r3, #88	; 0x58
 80065fa:	d14f      	bne.n	800669c <_strtol_l.isra.0+0xe4>
 80065fc:	2610      	movs	r6, #16
 80065fe:	786c      	ldrb	r4, [r5, #1]
 8006600:	3502      	adds	r5, #2
 8006602:	2a00      	cmp	r2, #0
 8006604:	bf14      	ite	ne
 8006606:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800660a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800660e:	2700      	movs	r7, #0
 8006610:	fbb1 fcf6 	udiv	ip, r1, r6
 8006614:	4638      	mov	r0, r7
 8006616:	fb06 1e1c 	mls	lr, r6, ip, r1
 800661a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800661e:	2b09      	cmp	r3, #9
 8006620:	d817      	bhi.n	8006652 <_strtol_l.isra.0+0x9a>
 8006622:	461c      	mov	r4, r3
 8006624:	42a6      	cmp	r6, r4
 8006626:	dd23      	ble.n	8006670 <_strtol_l.isra.0+0xb8>
 8006628:	1c7b      	adds	r3, r7, #1
 800662a:	d007      	beq.n	800663c <_strtol_l.isra.0+0x84>
 800662c:	4584      	cmp	ip, r0
 800662e:	d31c      	bcc.n	800666a <_strtol_l.isra.0+0xb2>
 8006630:	d101      	bne.n	8006636 <_strtol_l.isra.0+0x7e>
 8006632:	45a6      	cmp	lr, r4
 8006634:	db19      	blt.n	800666a <_strtol_l.isra.0+0xb2>
 8006636:	2701      	movs	r7, #1
 8006638:	fb00 4006 	mla	r0, r0, r6, r4
 800663c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006640:	e7eb      	b.n	800661a <_strtol_l.isra.0+0x62>
 8006642:	462f      	mov	r7, r5
 8006644:	e7bf      	b.n	80065c6 <_strtol_l.isra.0+0xe>
 8006646:	2c2b      	cmp	r4, #43	; 0x2b
 8006648:	bf04      	itt	eq
 800664a:	1cbd      	addeq	r5, r7, #2
 800664c:	787c      	ldrbeq	r4, [r7, #1]
 800664e:	461a      	mov	r2, r3
 8006650:	e7c9      	b.n	80065e6 <_strtol_l.isra.0+0x2e>
 8006652:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006656:	2b19      	cmp	r3, #25
 8006658:	d801      	bhi.n	800665e <_strtol_l.isra.0+0xa6>
 800665a:	3c37      	subs	r4, #55	; 0x37
 800665c:	e7e2      	b.n	8006624 <_strtol_l.isra.0+0x6c>
 800665e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006662:	2b19      	cmp	r3, #25
 8006664:	d804      	bhi.n	8006670 <_strtol_l.isra.0+0xb8>
 8006666:	3c57      	subs	r4, #87	; 0x57
 8006668:	e7dc      	b.n	8006624 <_strtol_l.isra.0+0x6c>
 800666a:	f04f 37ff 	mov.w	r7, #4294967295
 800666e:	e7e5      	b.n	800663c <_strtol_l.isra.0+0x84>
 8006670:	1c7b      	adds	r3, r7, #1
 8006672:	d108      	bne.n	8006686 <_strtol_l.isra.0+0xce>
 8006674:	2322      	movs	r3, #34	; 0x22
 8006676:	4608      	mov	r0, r1
 8006678:	f8c8 3000 	str.w	r3, [r8]
 800667c:	f1ba 0f00 	cmp.w	sl, #0
 8006680:	d107      	bne.n	8006692 <_strtol_l.isra.0+0xda>
 8006682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006686:	b102      	cbz	r2, 800668a <_strtol_l.isra.0+0xd2>
 8006688:	4240      	negs	r0, r0
 800668a:	f1ba 0f00 	cmp.w	sl, #0
 800668e:	d0f8      	beq.n	8006682 <_strtol_l.isra.0+0xca>
 8006690:	b10f      	cbz	r7, 8006696 <_strtol_l.isra.0+0xde>
 8006692:	f105 39ff 	add.w	r9, r5, #4294967295
 8006696:	f8ca 9000 	str.w	r9, [sl]
 800669a:	e7f2      	b.n	8006682 <_strtol_l.isra.0+0xca>
 800669c:	2430      	movs	r4, #48	; 0x30
 800669e:	2e00      	cmp	r6, #0
 80066a0:	d1af      	bne.n	8006602 <_strtol_l.isra.0+0x4a>
 80066a2:	2608      	movs	r6, #8
 80066a4:	e7ad      	b.n	8006602 <_strtol_l.isra.0+0x4a>
 80066a6:	2c30      	cmp	r4, #48	; 0x30
 80066a8:	d0a3      	beq.n	80065f2 <_strtol_l.isra.0+0x3a>
 80066aa:	260a      	movs	r6, #10
 80066ac:	e7a9      	b.n	8006602 <_strtol_l.isra.0+0x4a>
	...

080066b0 <_strtol_r>:
 80066b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066b2:	4c06      	ldr	r4, [pc, #24]	; (80066cc <_strtol_r+0x1c>)
 80066b4:	4d06      	ldr	r5, [pc, #24]	; (80066d0 <_strtol_r+0x20>)
 80066b6:	6824      	ldr	r4, [r4, #0]
 80066b8:	6a24      	ldr	r4, [r4, #32]
 80066ba:	2c00      	cmp	r4, #0
 80066bc:	bf08      	it	eq
 80066be:	462c      	moveq	r4, r5
 80066c0:	9400      	str	r4, [sp, #0]
 80066c2:	f7ff ff79 	bl	80065b8 <_strtol_l.isra.0>
 80066c6:	b003      	add	sp, #12
 80066c8:	bd30      	pop	{r4, r5, pc}
 80066ca:	bf00      	nop
 80066cc:	2000000c 	.word	0x2000000c
 80066d0:	20000070 	.word	0x20000070

080066d4 <quorem>:
 80066d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	6903      	ldr	r3, [r0, #16]
 80066da:	690c      	ldr	r4, [r1, #16]
 80066dc:	4680      	mov	r8, r0
 80066de:	42a3      	cmp	r3, r4
 80066e0:	f2c0 8084 	blt.w	80067ec <quorem+0x118>
 80066e4:	3c01      	subs	r4, #1
 80066e6:	f101 0714 	add.w	r7, r1, #20
 80066ea:	f100 0614 	add.w	r6, r0, #20
 80066ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80066f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80066f6:	3501      	adds	r5, #1
 80066f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80066fc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006700:	eb06 030c 	add.w	r3, r6, ip
 8006704:	eb07 090c 	add.w	r9, r7, ip
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	b39d      	cbz	r5, 8006774 <quorem+0xa0>
 800670c:	f04f 0a00 	mov.w	sl, #0
 8006710:	4638      	mov	r0, r7
 8006712:	46b6      	mov	lr, r6
 8006714:	46d3      	mov	fp, sl
 8006716:	f850 2b04 	ldr.w	r2, [r0], #4
 800671a:	b293      	uxth	r3, r2
 800671c:	fb05 a303 	mla	r3, r5, r3, sl
 8006720:	0c12      	lsrs	r2, r2, #16
 8006722:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006726:	fb05 a202 	mla	r2, r5, r2, sl
 800672a:	b29b      	uxth	r3, r3
 800672c:	ebab 0303 	sub.w	r3, fp, r3
 8006730:	f8de b000 	ldr.w	fp, [lr]
 8006734:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006738:	fa1f fb8b 	uxth.w	fp, fp
 800673c:	445b      	add	r3, fp
 800673e:	fa1f fb82 	uxth.w	fp, r2
 8006742:	f8de 2000 	ldr.w	r2, [lr]
 8006746:	4581      	cmp	r9, r0
 8006748:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800674c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006750:	b29b      	uxth	r3, r3
 8006752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006756:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800675a:	f84e 3b04 	str.w	r3, [lr], #4
 800675e:	d2da      	bcs.n	8006716 <quorem+0x42>
 8006760:	f856 300c 	ldr.w	r3, [r6, ip]
 8006764:	b933      	cbnz	r3, 8006774 <quorem+0xa0>
 8006766:	9b01      	ldr	r3, [sp, #4]
 8006768:	3b04      	subs	r3, #4
 800676a:	429e      	cmp	r6, r3
 800676c:	461a      	mov	r2, r3
 800676e:	d331      	bcc.n	80067d4 <quorem+0x100>
 8006770:	f8c8 4010 	str.w	r4, [r8, #16]
 8006774:	4640      	mov	r0, r8
 8006776:	f001 fc7b 	bl	8008070 <__mcmp>
 800677a:	2800      	cmp	r0, #0
 800677c:	db26      	blt.n	80067cc <quorem+0xf8>
 800677e:	4630      	mov	r0, r6
 8006780:	f04f 0c00 	mov.w	ip, #0
 8006784:	3501      	adds	r5, #1
 8006786:	f857 1b04 	ldr.w	r1, [r7], #4
 800678a:	f8d0 e000 	ldr.w	lr, [r0]
 800678e:	b28b      	uxth	r3, r1
 8006790:	ebac 0303 	sub.w	r3, ip, r3
 8006794:	fa1f f28e 	uxth.w	r2, lr
 8006798:	4413      	add	r3, r2
 800679a:	0c0a      	lsrs	r2, r1, #16
 800679c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067aa:	45b9      	cmp	r9, r7
 80067ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067b0:	f840 3b04 	str.w	r3, [r0], #4
 80067b4:	d2e7      	bcs.n	8006786 <quorem+0xb2>
 80067b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80067ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80067be:	b92a      	cbnz	r2, 80067cc <quorem+0xf8>
 80067c0:	3b04      	subs	r3, #4
 80067c2:	429e      	cmp	r6, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	d30b      	bcc.n	80067e0 <quorem+0x10c>
 80067c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80067cc:	4628      	mov	r0, r5
 80067ce:	b003      	add	sp, #12
 80067d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	3b04      	subs	r3, #4
 80067d8:	2a00      	cmp	r2, #0
 80067da:	d1c9      	bne.n	8006770 <quorem+0x9c>
 80067dc:	3c01      	subs	r4, #1
 80067de:	e7c4      	b.n	800676a <quorem+0x96>
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	3b04      	subs	r3, #4
 80067e4:	2a00      	cmp	r2, #0
 80067e6:	d1ef      	bne.n	80067c8 <quorem+0xf4>
 80067e8:	3c01      	subs	r4, #1
 80067ea:	e7ea      	b.n	80067c2 <quorem+0xee>
 80067ec:	2000      	movs	r0, #0
 80067ee:	e7ee      	b.n	80067ce <quorem+0xfa>

080067f0 <_dtoa_r>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	4616      	mov	r6, r2
 80067f6:	461f      	mov	r7, r3
 80067f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067fa:	b095      	sub	sp, #84	; 0x54
 80067fc:	4604      	mov	r4, r0
 80067fe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006802:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006806:	b93d      	cbnz	r5, 8006818 <_dtoa_r+0x28>
 8006808:	2010      	movs	r0, #16
 800680a:	f001 f9ab 	bl	8007b64 <malloc>
 800680e:	6260      	str	r0, [r4, #36]	; 0x24
 8006810:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006814:	6005      	str	r5, [r0, #0]
 8006816:	60c5      	str	r5, [r0, #12]
 8006818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800681a:	6819      	ldr	r1, [r3, #0]
 800681c:	b151      	cbz	r1, 8006834 <_dtoa_r+0x44>
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	2301      	movs	r3, #1
 8006822:	4093      	lsls	r3, r2
 8006824:	604a      	str	r2, [r1, #4]
 8006826:	608b      	str	r3, [r1, #8]
 8006828:	4620      	mov	r0, r4
 800682a:	f001 fa02 	bl	8007c32 <_Bfree>
 800682e:	2200      	movs	r2, #0
 8006830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	1e3b      	subs	r3, r7, #0
 8006836:	bfaf      	iteee	ge
 8006838:	2300      	movge	r3, #0
 800683a:	2201      	movlt	r2, #1
 800683c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006840:	9303      	strlt	r3, [sp, #12]
 8006842:	bfac      	ite	ge
 8006844:	f8c8 3000 	strge.w	r3, [r8]
 8006848:	f8c8 2000 	strlt.w	r2, [r8]
 800684c:	4bae      	ldr	r3, [pc, #696]	; (8006b08 <_dtoa_r+0x318>)
 800684e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006852:	ea33 0308 	bics.w	r3, r3, r8
 8006856:	d11b      	bne.n	8006890 <_dtoa_r+0xa0>
 8006858:	f242 730f 	movw	r3, #9999	; 0x270f
 800685c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	9b02      	ldr	r3, [sp, #8]
 8006862:	b923      	cbnz	r3, 800686e <_dtoa_r+0x7e>
 8006864:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006868:	2800      	cmp	r0, #0
 800686a:	f000 8545 	beq.w	80072f8 <_dtoa_r+0xb08>
 800686e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006870:	b953      	cbnz	r3, 8006888 <_dtoa_r+0x98>
 8006872:	4ba6      	ldr	r3, [pc, #664]	; (8006b0c <_dtoa_r+0x31c>)
 8006874:	e021      	b.n	80068ba <_dtoa_r+0xca>
 8006876:	4ba6      	ldr	r3, [pc, #664]	; (8006b10 <_dtoa_r+0x320>)
 8006878:	9306      	str	r3, [sp, #24]
 800687a:	3308      	adds	r3, #8
 800687c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	9806      	ldr	r0, [sp, #24]
 8006882:	b015      	add	sp, #84	; 0x54
 8006884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006888:	4ba0      	ldr	r3, [pc, #640]	; (8006b0c <_dtoa_r+0x31c>)
 800688a:	9306      	str	r3, [sp, #24]
 800688c:	3303      	adds	r3, #3
 800688e:	e7f5      	b.n	800687c <_dtoa_r+0x8c>
 8006890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7fa f89c 	bl	80009d8 <__aeabi_dcmpeq>
 80068a0:	4682      	mov	sl, r0
 80068a2:	b160      	cbz	r0, 80068be <_dtoa_r+0xce>
 80068a4:	2301      	movs	r3, #1
 80068a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8520 	beq.w	80072f2 <_dtoa_r+0xb02>
 80068b2:	4b98      	ldr	r3, [pc, #608]	; (8006b14 <_dtoa_r+0x324>)
 80068b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	9306      	str	r3, [sp, #24]
 80068bc:	e7e0      	b.n	8006880 <_dtoa_r+0x90>
 80068be:	ab12      	add	r3, sp, #72	; 0x48
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	ab13      	add	r3, sp, #76	; 0x4c
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4632      	mov	r2, r6
 80068c8:	463b      	mov	r3, r7
 80068ca:	4620      	mov	r0, r4
 80068cc:	f001 fcbe 	bl	800824c <__d2b>
 80068d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80068d4:	4683      	mov	fp, r0
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	d07d      	beq.n	80069d6 <_dtoa_r+0x1e6>
 80068da:	46b0      	mov	r8, r6
 80068dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068e0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80068e4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80068e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80068f0:	2200      	movs	r2, #0
 80068f2:	4b89      	ldr	r3, [pc, #548]	; (8006b18 <_dtoa_r+0x328>)
 80068f4:	4640      	mov	r0, r8
 80068f6:	4649      	mov	r1, r9
 80068f8:	f7f9 fc4e 	bl	8000198 <__aeabi_dsub>
 80068fc:	a37c      	add	r3, pc, #496	; (adr r3, 8006af0 <_dtoa_r+0x300>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f7f9 fe01 	bl	8000508 <__aeabi_dmul>
 8006906:	a37c      	add	r3, pc, #496	; (adr r3, 8006af8 <_dtoa_r+0x308>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f7f9 fc46 	bl	800019c <__adddf3>
 8006910:	4606      	mov	r6, r0
 8006912:	4628      	mov	r0, r5
 8006914:	460f      	mov	r7, r1
 8006916:	f7f9 fd8d 	bl	8000434 <__aeabi_i2d>
 800691a:	a379      	add	r3, pc, #484	; (adr r3, 8006b00 <_dtoa_r+0x310>)
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f7f9 fdf2 	bl	8000508 <__aeabi_dmul>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4630      	mov	r0, r6
 800692a:	4639      	mov	r1, r7
 800692c:	f7f9 fc36 	bl	800019c <__adddf3>
 8006930:	4606      	mov	r6, r0
 8006932:	460f      	mov	r7, r1
 8006934:	f7fa f898 	bl	8000a68 <__aeabi_d2iz>
 8006938:	2200      	movs	r2, #0
 800693a:	4682      	mov	sl, r0
 800693c:	2300      	movs	r3, #0
 800693e:	4630      	mov	r0, r6
 8006940:	4639      	mov	r1, r7
 8006942:	f7fa f853 	bl	80009ec <__aeabi_dcmplt>
 8006946:	b148      	cbz	r0, 800695c <_dtoa_r+0x16c>
 8006948:	4650      	mov	r0, sl
 800694a:	f7f9 fd73 	bl	8000434 <__aeabi_i2d>
 800694e:	4632      	mov	r2, r6
 8006950:	463b      	mov	r3, r7
 8006952:	f7fa f841 	bl	80009d8 <__aeabi_dcmpeq>
 8006956:	b908      	cbnz	r0, 800695c <_dtoa_r+0x16c>
 8006958:	f10a 3aff 	add.w	sl, sl, #4294967295
 800695c:	f1ba 0f16 	cmp.w	sl, #22
 8006960:	d85a      	bhi.n	8006a18 <_dtoa_r+0x228>
 8006962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006966:	496d      	ldr	r1, [pc, #436]	; (8006b1c <_dtoa_r+0x32c>)
 8006968:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800696c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006970:	f7fa f85a 	bl	8000a28 <__aeabi_dcmpgt>
 8006974:	2800      	cmp	r0, #0
 8006976:	d051      	beq.n	8006a1c <_dtoa_r+0x22c>
 8006978:	2300      	movs	r3, #0
 800697a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697e:	930d      	str	r3, [sp, #52]	; 0x34
 8006980:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006982:	1b5d      	subs	r5, r3, r5
 8006984:	1e6b      	subs	r3, r5, #1
 8006986:	9307      	str	r3, [sp, #28]
 8006988:	bf43      	ittte	mi
 800698a:	2300      	movmi	r3, #0
 800698c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006990:	9307      	strmi	r3, [sp, #28]
 8006992:	f04f 0900 	movpl.w	r9, #0
 8006996:	f1ba 0f00 	cmp.w	sl, #0
 800699a:	db41      	blt.n	8006a20 <_dtoa_r+0x230>
 800699c:	9b07      	ldr	r3, [sp, #28]
 800699e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80069a2:	4453      	add	r3, sl
 80069a4:	9307      	str	r3, [sp, #28]
 80069a6:	2300      	movs	r3, #0
 80069a8:	9308      	str	r3, [sp, #32]
 80069aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069ac:	2b09      	cmp	r3, #9
 80069ae:	f200 808f 	bhi.w	8006ad0 <_dtoa_r+0x2e0>
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	bfc4      	itt	gt
 80069b6:	3b04      	subgt	r3, #4
 80069b8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80069ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069bc:	bfc8      	it	gt
 80069be:	2500      	movgt	r5, #0
 80069c0:	f1a3 0302 	sub.w	r3, r3, #2
 80069c4:	bfd8      	it	le
 80069c6:	2501      	movle	r5, #1
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	f200 808d 	bhi.w	8006ae8 <_dtoa_r+0x2f8>
 80069ce:	e8df f003 	tbb	[pc, r3]
 80069d2:	7d7b      	.short	0x7d7b
 80069d4:	6f2f      	.short	0x6f2f
 80069d6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80069da:	441d      	add	r5, r3
 80069dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80069e0:	2820      	cmp	r0, #32
 80069e2:	dd13      	ble.n	8006a0c <_dtoa_r+0x21c>
 80069e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80069e8:	9b02      	ldr	r3, [sp, #8]
 80069ea:	fa08 f800 	lsl.w	r8, r8, r0
 80069ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80069f2:	fa23 f000 	lsr.w	r0, r3, r0
 80069f6:	ea48 0000 	orr.w	r0, r8, r0
 80069fa:	f7f9 fd0b 	bl	8000414 <__aeabi_ui2d>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4680      	mov	r8, r0
 8006a02:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006a06:	3d01      	subs	r5, #1
 8006a08:	9310      	str	r3, [sp, #64]	; 0x40
 8006a0a:	e771      	b.n	80068f0 <_dtoa_r+0x100>
 8006a0c:	9b02      	ldr	r3, [sp, #8]
 8006a0e:	f1c0 0020 	rsb	r0, r0, #32
 8006a12:	fa03 f000 	lsl.w	r0, r3, r0
 8006a16:	e7f0      	b.n	80069fa <_dtoa_r+0x20a>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e7b0      	b.n	800697e <_dtoa_r+0x18e>
 8006a1c:	900d      	str	r0, [sp, #52]	; 0x34
 8006a1e:	e7af      	b.n	8006980 <_dtoa_r+0x190>
 8006a20:	f1ca 0300 	rsb	r3, sl, #0
 8006a24:	9308      	str	r3, [sp, #32]
 8006a26:	2300      	movs	r3, #0
 8006a28:	eba9 090a 	sub.w	r9, r9, sl
 8006a2c:	930c      	str	r3, [sp, #48]	; 0x30
 8006a2e:	e7bc      	b.n	80069aa <_dtoa_r+0x1ba>
 8006a30:	2301      	movs	r3, #1
 8006a32:	9309      	str	r3, [sp, #36]	; 0x24
 8006a34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dd74      	ble.n	8006b24 <_dtoa_r+0x334>
 8006a3a:	4698      	mov	r8, r3
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a42:	6072      	str	r2, [r6, #4]
 8006a44:	2204      	movs	r2, #4
 8006a46:	f102 0014 	add.w	r0, r2, #20
 8006a4a:	4298      	cmp	r0, r3
 8006a4c:	6871      	ldr	r1, [r6, #4]
 8006a4e:	d96e      	bls.n	8006b2e <_dtoa_r+0x33e>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f001 f8ba 	bl	8007bca <_Balloc>
 8006a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a58:	6030      	str	r0, [r6, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f1b8 0f0e 	cmp.w	r8, #14
 8006a60:	9306      	str	r3, [sp, #24]
 8006a62:	f200 80ed 	bhi.w	8006c40 <_dtoa_r+0x450>
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	f000 80ea 	beq.w	8006c40 <_dtoa_r+0x450>
 8006a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a70:	f1ba 0f00 	cmp.w	sl, #0
 8006a74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006a78:	dd77      	ble.n	8006b6a <_dtoa_r+0x37a>
 8006a7a:	4a28      	ldr	r2, [pc, #160]	; (8006b1c <_dtoa_r+0x32c>)
 8006a7c:	f00a 030f 	and.w	r3, sl, #15
 8006a80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006a84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a88:	06f0      	lsls	r0, r6, #27
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a92:	d568      	bpl.n	8006b66 <_dtoa_r+0x376>
 8006a94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a98:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <_dtoa_r+0x330>)
 8006a9a:	2503      	movs	r5, #3
 8006a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006aa0:	f7f9 fe5c 	bl	800075c <__aeabi_ddiv>
 8006aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa8:	f006 060f 	and.w	r6, r6, #15
 8006aac:	4f1c      	ldr	r7, [pc, #112]	; (8006b20 <_dtoa_r+0x330>)
 8006aae:	e04f      	b.n	8006b50 <_dtoa_r+0x360>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ab6:	4453      	add	r3, sl
 8006ab8:	f103 0801 	add.w	r8, r3, #1
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	4643      	mov	r3, r8
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	bfb8      	it	lt
 8006ac4:	2301      	movlt	r3, #1
 8006ac6:	e7ba      	b.n	8006a3e <_dtoa_r+0x24e>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e7b2      	b.n	8006a32 <_dtoa_r+0x242>
 8006acc:	2300      	movs	r3, #0
 8006ace:	e7f0      	b.n	8006ab2 <_dtoa_r+0x2c2>
 8006ad0:	2501      	movs	r5, #1
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9509      	str	r5, [sp, #36]	; 0x24
 8006ad6:	931e      	str	r3, [sp, #120]	; 0x78
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	2200      	movs	r2, #0
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	4698      	mov	r8, r3
 8006ae2:	2312      	movs	r3, #18
 8006ae4:	921f      	str	r2, [sp, #124]	; 0x7c
 8006ae6:	e7aa      	b.n	8006a3e <_dtoa_r+0x24e>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	9309      	str	r3, [sp, #36]	; 0x24
 8006aec:	e7f4      	b.n	8006ad8 <_dtoa_r+0x2e8>
 8006aee:	bf00      	nop
 8006af0:	636f4361 	.word	0x636f4361
 8006af4:	3fd287a7 	.word	0x3fd287a7
 8006af8:	8b60c8b3 	.word	0x8b60c8b3
 8006afc:	3fc68a28 	.word	0x3fc68a28
 8006b00:	509f79fb 	.word	0x509f79fb
 8006b04:	3fd34413 	.word	0x3fd34413
 8006b08:	7ff00000 	.word	0x7ff00000
 8006b0c:	08009121 	.word	0x08009121
 8006b10:	08009118 	.word	0x08009118
 8006b14:	08009099 	.word	0x08009099
 8006b18:	3ff80000 	.word	0x3ff80000
 8006b1c:	080091c0 	.word	0x080091c0
 8006b20:	08009198 	.word	0x08009198
 8006b24:	2301      	movs	r3, #1
 8006b26:	9304      	str	r3, [sp, #16]
 8006b28:	4698      	mov	r8, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	e7da      	b.n	8006ae4 <_dtoa_r+0x2f4>
 8006b2e:	3101      	adds	r1, #1
 8006b30:	6071      	str	r1, [r6, #4]
 8006b32:	0052      	lsls	r2, r2, #1
 8006b34:	e787      	b.n	8006a46 <_dtoa_r+0x256>
 8006b36:	07f1      	lsls	r1, r6, #31
 8006b38:	d508      	bpl.n	8006b4c <_dtoa_r+0x35c>
 8006b3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b42:	f7f9 fce1 	bl	8000508 <__aeabi_dmul>
 8006b46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b4a:	3501      	adds	r5, #1
 8006b4c:	1076      	asrs	r6, r6, #1
 8006b4e:	3708      	adds	r7, #8
 8006b50:	2e00      	cmp	r6, #0
 8006b52:	d1f0      	bne.n	8006b36 <_dtoa_r+0x346>
 8006b54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5c:	f7f9 fdfe 	bl	800075c <__aeabi_ddiv>
 8006b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b64:	e01b      	b.n	8006b9e <_dtoa_r+0x3ae>
 8006b66:	2502      	movs	r5, #2
 8006b68:	e7a0      	b.n	8006aac <_dtoa_r+0x2bc>
 8006b6a:	f000 80a4 	beq.w	8006cb6 <_dtoa_r+0x4c6>
 8006b6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b72:	f1ca 0600 	rsb	r6, sl, #0
 8006b76:	4ba0      	ldr	r3, [pc, #640]	; (8006df8 <_dtoa_r+0x608>)
 8006b78:	f006 020f 	and.w	r2, r6, #15
 8006b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fcc0 	bl	8000508 <__aeabi_dmul>
 8006b88:	2502      	movs	r5, #2
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b90:	4f9a      	ldr	r7, [pc, #616]	; (8006dfc <_dtoa_r+0x60c>)
 8006b92:	1136      	asrs	r6, r6, #4
 8006b94:	2e00      	cmp	r6, #0
 8006b96:	f040 8083 	bne.w	8006ca0 <_dtoa_r+0x4b0>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e0      	bne.n	8006b60 <_dtoa_r+0x370>
 8006b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 808a 	beq.w	8006cba <_dtoa_r+0x4ca>
 8006ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006baa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4b92      	ldr	r3, [pc, #584]	; (8006e00 <_dtoa_r+0x610>)
 8006bb6:	f7f9 ff19 	bl	80009ec <__aeabi_dcmplt>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d07d      	beq.n	8006cba <_dtoa_r+0x4ca>
 8006bbe:	f1b8 0f00 	cmp.w	r8, #0
 8006bc2:	d07a      	beq.n	8006cba <_dtoa_r+0x4ca>
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	dd36      	ble.n	8006c38 <_dtoa_r+0x448>
 8006bca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4b8c      	ldr	r3, [pc, #560]	; (8006e04 <_dtoa_r+0x614>)
 8006bd2:	f7f9 fc99 	bl	8000508 <__aeabi_dmul>
 8006bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bda:	9e04      	ldr	r6, [sp, #16]
 8006bdc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006be0:	3501      	adds	r5, #1
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7f9 fc26 	bl	8000434 <__aeabi_i2d>
 8006be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bec:	f7f9 fc8c 	bl	8000508 <__aeabi_dmul>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4b85      	ldr	r3, [pc, #532]	; (8006e08 <_dtoa_r+0x618>)
 8006bf4:	f7f9 fad2 	bl	800019c <__adddf3>
 8006bf8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006bfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c00:	950b      	str	r5, [sp, #44]	; 0x2c
 8006c02:	2e00      	cmp	r6, #0
 8006c04:	d15c      	bne.n	8006cc0 <_dtoa_r+0x4d0>
 8006c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	4b7f      	ldr	r3, [pc, #508]	; (8006e0c <_dtoa_r+0x61c>)
 8006c0e:	f7f9 fac3 	bl	8000198 <__aeabi_dsub>
 8006c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c14:	462b      	mov	r3, r5
 8006c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c1a:	f7f9 ff05 	bl	8000a28 <__aeabi_dcmpgt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f040 8281 	bne.w	8007126 <_dtoa_r+0x936>
 8006c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006c2e:	f7f9 fedd 	bl	80009ec <__aeabi_dcmplt>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f040 8275 	bne.w	8007122 <_dtoa_r+0x932>
 8006c38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006c3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f2c0 814b 	blt.w	8006ede <_dtoa_r+0x6ee>
 8006c48:	f1ba 0f0e 	cmp.w	sl, #14
 8006c4c:	f300 8147 	bgt.w	8006ede <_dtoa_r+0x6ee>
 8006c50:	4b69      	ldr	r3, [pc, #420]	; (8006df8 <_dtoa_r+0x608>)
 8006c52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f280 80d7 	bge.w	8006e14 <_dtoa_r+0x624>
 8006c66:	f1b8 0f00 	cmp.w	r8, #0
 8006c6a:	f300 80d3 	bgt.w	8006e14 <_dtoa_r+0x624>
 8006c6e:	f040 8257 	bne.w	8007120 <_dtoa_r+0x930>
 8006c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c76:	2200      	movs	r2, #0
 8006c78:	4b64      	ldr	r3, [pc, #400]	; (8006e0c <_dtoa_r+0x61c>)
 8006c7a:	f7f9 fc45 	bl	8000508 <__aeabi_dmul>
 8006c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c82:	f7f9 fec7 	bl	8000a14 <__aeabi_dcmpge>
 8006c86:	4646      	mov	r6, r8
 8006c88:	4647      	mov	r7, r8
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f040 822d 	bne.w	80070ea <_dtoa_r+0x8fa>
 8006c90:	9b06      	ldr	r3, [sp, #24]
 8006c92:	9a06      	ldr	r2, [sp, #24]
 8006c94:	1c5d      	adds	r5, r3, #1
 8006c96:	2331      	movs	r3, #49	; 0x31
 8006c98:	f10a 0a01 	add.w	sl, sl, #1
 8006c9c:	7013      	strb	r3, [r2, #0]
 8006c9e:	e228      	b.n	80070f2 <_dtoa_r+0x902>
 8006ca0:	07f2      	lsls	r2, r6, #31
 8006ca2:	d505      	bpl.n	8006cb0 <_dtoa_r+0x4c0>
 8006ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca8:	f7f9 fc2e 	bl	8000508 <__aeabi_dmul>
 8006cac:	2301      	movs	r3, #1
 8006cae:	3501      	adds	r5, #1
 8006cb0:	1076      	asrs	r6, r6, #1
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	e76e      	b.n	8006b94 <_dtoa_r+0x3a4>
 8006cb6:	2502      	movs	r5, #2
 8006cb8:	e771      	b.n	8006b9e <_dtoa_r+0x3ae>
 8006cba:	4657      	mov	r7, sl
 8006cbc:	4646      	mov	r6, r8
 8006cbe:	e790      	b.n	8006be2 <_dtoa_r+0x3f2>
 8006cc0:	4b4d      	ldr	r3, [pc, #308]	; (8006df8 <_dtoa_r+0x608>)
 8006cc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006cc6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d048      	beq.n	8006d62 <_dtoa_r+0x572>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	494e      	ldr	r1, [pc, #312]	; (8006e10 <_dtoa_r+0x620>)
 8006cd8:	f7f9 fd40 	bl	800075c <__aeabi_ddiv>
 8006cdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ce0:	f7f9 fa5a 	bl	8000198 <__aeabi_dsub>
 8006ce4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ce8:	9d06      	ldr	r5, [sp, #24]
 8006cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cee:	f7f9 febb 	bl	8000a68 <__aeabi_d2iz>
 8006cf2:	9011      	str	r0, [sp, #68]	; 0x44
 8006cf4:	f7f9 fb9e 	bl	8000434 <__aeabi_i2d>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d00:	f7f9 fa4a 	bl	8000198 <__aeabi_dsub>
 8006d04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d0a:	3330      	adds	r3, #48	; 0x30
 8006d0c:	f805 3b01 	strb.w	r3, [r5], #1
 8006d10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d14:	f7f9 fe6a 	bl	80009ec <__aeabi_dcmplt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d163      	bne.n	8006de4 <_dtoa_r+0x5f4>
 8006d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d20:	2000      	movs	r0, #0
 8006d22:	4937      	ldr	r1, [pc, #220]	; (8006e00 <_dtoa_r+0x610>)
 8006d24:	f7f9 fa38 	bl	8000198 <__aeabi_dsub>
 8006d28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d2c:	f7f9 fe5e 	bl	80009ec <__aeabi_dcmplt>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f040 80b5 	bne.w	8006ea0 <_dtoa_r+0x6b0>
 8006d36:	9b06      	ldr	r3, [sp, #24]
 8006d38:	1aeb      	subs	r3, r5, r3
 8006d3a:	429e      	cmp	r6, r3
 8006d3c:	f77f af7c 	ble.w	8006c38 <_dtoa_r+0x448>
 8006d40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d44:	2200      	movs	r2, #0
 8006d46:	4b2f      	ldr	r3, [pc, #188]	; (8006e04 <_dtoa_r+0x614>)
 8006d48:	f7f9 fbde 	bl	8000508 <__aeabi_dmul>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d56:	4b2b      	ldr	r3, [pc, #172]	; (8006e04 <_dtoa_r+0x614>)
 8006d58:	f7f9 fbd6 	bl	8000508 <__aeabi_dmul>
 8006d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d60:	e7c3      	b.n	8006cea <_dtoa_r+0x4fa>
 8006d62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d66:	f7f9 fbcf 	bl	8000508 <__aeabi_dmul>
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d70:	199d      	adds	r5, r3, r6
 8006d72:	461e      	mov	r6, r3
 8006d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d78:	f7f9 fe76 	bl	8000a68 <__aeabi_d2iz>
 8006d7c:	9011      	str	r0, [sp, #68]	; 0x44
 8006d7e:	f7f9 fb59 	bl	8000434 <__aeabi_i2d>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d8a:	f7f9 fa05 	bl	8000198 <__aeabi_dsub>
 8006d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d94:	3330      	adds	r3, #48	; 0x30
 8006d96:	f806 3b01 	strb.w	r3, [r6], #1
 8006d9a:	42ae      	cmp	r6, r5
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	d124      	bne.n	8006dec <_dtoa_r+0x5fc>
 8006da2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006da6:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <_dtoa_r+0x620>)
 8006da8:	f7f9 f9f8 	bl	800019c <__adddf3>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db4:	f7f9 fe38 	bl	8000a28 <__aeabi_dcmpgt>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d171      	bne.n	8006ea0 <_dtoa_r+0x6b0>
 8006dbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	4913      	ldr	r1, [pc, #76]	; (8006e10 <_dtoa_r+0x620>)
 8006dc4:	f7f9 f9e8 	bl	8000198 <__aeabi_dsub>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd0:	f7f9 fe0c 	bl	80009ec <__aeabi_dcmplt>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f43f af2f 	beq.w	8006c38 <_dtoa_r+0x448>
 8006dda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006dde:	1e6a      	subs	r2, r5, #1
 8006de0:	2b30      	cmp	r3, #48	; 0x30
 8006de2:	d001      	beq.n	8006de8 <_dtoa_r+0x5f8>
 8006de4:	46ba      	mov	sl, r7
 8006de6:	e04a      	b.n	8006e7e <_dtoa_r+0x68e>
 8006de8:	4615      	mov	r5, r2
 8006dea:	e7f6      	b.n	8006dda <_dtoa_r+0x5ea>
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <_dtoa_r+0x614>)
 8006dee:	f7f9 fb8b 	bl	8000508 <__aeabi_dmul>
 8006df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df6:	e7bd      	b.n	8006d74 <_dtoa_r+0x584>
 8006df8:	080091c0 	.word	0x080091c0
 8006dfc:	08009198 	.word	0x08009198
 8006e00:	3ff00000 	.word	0x3ff00000
 8006e04:	40240000 	.word	0x40240000
 8006e08:	401c0000 	.word	0x401c0000
 8006e0c:	40140000 	.word	0x40140000
 8006e10:	3fe00000 	.word	0x3fe00000
 8006e14:	9d06      	ldr	r5, [sp, #24]
 8006e16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e1e:	4630      	mov	r0, r6
 8006e20:	4639      	mov	r1, r7
 8006e22:	f7f9 fc9b 	bl	800075c <__aeabi_ddiv>
 8006e26:	f7f9 fe1f 	bl	8000a68 <__aeabi_d2iz>
 8006e2a:	4681      	mov	r9, r0
 8006e2c:	f7f9 fb02 	bl	8000434 <__aeabi_i2d>
 8006e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e34:	f7f9 fb68 	bl	8000508 <__aeabi_dmul>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	4639      	mov	r1, r7
 8006e40:	f7f9 f9aa 	bl	8000198 <__aeabi_dsub>
 8006e44:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006e48:	f805 6b01 	strb.w	r6, [r5], #1
 8006e4c:	9e06      	ldr	r6, [sp, #24]
 8006e4e:	4602      	mov	r2, r0
 8006e50:	1bae      	subs	r6, r5, r6
 8006e52:	45b0      	cmp	r8, r6
 8006e54:	460b      	mov	r3, r1
 8006e56:	d135      	bne.n	8006ec4 <_dtoa_r+0x6d4>
 8006e58:	f7f9 f9a0 	bl	800019c <__adddf3>
 8006e5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e60:	4606      	mov	r6, r0
 8006e62:	460f      	mov	r7, r1
 8006e64:	f7f9 fde0 	bl	8000a28 <__aeabi_dcmpgt>
 8006e68:	b9c8      	cbnz	r0, 8006e9e <_dtoa_r+0x6ae>
 8006e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	f7f9 fdb1 	bl	80009d8 <__aeabi_dcmpeq>
 8006e76:	b110      	cbz	r0, 8006e7e <_dtoa_r+0x68e>
 8006e78:	f019 0f01 	tst.w	r9, #1
 8006e7c:	d10f      	bne.n	8006e9e <_dtoa_r+0x6ae>
 8006e7e:	4659      	mov	r1, fp
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 fed6 	bl	8007c32 <_Bfree>
 8006e86:	2300      	movs	r3, #0
 8006e88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e8a:	702b      	strb	r3, [r5, #0]
 8006e8c:	f10a 0301 	add.w	r3, sl, #1
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f43f acf3 	beq.w	8006880 <_dtoa_r+0x90>
 8006e9a:	601d      	str	r5, [r3, #0]
 8006e9c:	e4f0      	b.n	8006880 <_dtoa_r+0x90>
 8006e9e:	4657      	mov	r7, sl
 8006ea0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ea4:	1e6b      	subs	r3, r5, #1
 8006ea6:	2a39      	cmp	r2, #57	; 0x39
 8006ea8:	d106      	bne.n	8006eb8 <_dtoa_r+0x6c8>
 8006eaa:	9a06      	ldr	r2, [sp, #24]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d107      	bne.n	8006ec0 <_dtoa_r+0x6d0>
 8006eb0:	2330      	movs	r3, #48	; 0x30
 8006eb2:	7013      	strb	r3, [r2, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	3701      	adds	r7, #1
 8006eb8:	781a      	ldrb	r2, [r3, #0]
 8006eba:	3201      	adds	r2, #1
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	e791      	b.n	8006de4 <_dtoa_r+0x5f4>
 8006ec0:	461d      	mov	r5, r3
 8006ec2:	e7ed      	b.n	8006ea0 <_dtoa_r+0x6b0>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4b99      	ldr	r3, [pc, #612]	; (800712c <_dtoa_r+0x93c>)
 8006ec8:	f7f9 fb1e 	bl	8000508 <__aeabi_dmul>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	460f      	mov	r7, r1
 8006ed4:	f7f9 fd80 	bl	80009d8 <__aeabi_dcmpeq>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d09e      	beq.n	8006e1a <_dtoa_r+0x62a>
 8006edc:	e7cf      	b.n	8006e7e <_dtoa_r+0x68e>
 8006ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee0:	2a00      	cmp	r2, #0
 8006ee2:	f000 8088 	beq.w	8006ff6 <_dtoa_r+0x806>
 8006ee6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ee8:	2a01      	cmp	r2, #1
 8006eea:	dc6d      	bgt.n	8006fc8 <_dtoa_r+0x7d8>
 8006eec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006eee:	2a00      	cmp	r2, #0
 8006ef0:	d066      	beq.n	8006fc0 <_dtoa_r+0x7d0>
 8006ef2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ef6:	464d      	mov	r5, r9
 8006ef8:	9e08      	ldr	r6, [sp, #32]
 8006efa:	9a07      	ldr	r2, [sp, #28]
 8006efc:	2101      	movs	r1, #1
 8006efe:	441a      	add	r2, r3
 8006f00:	4620      	mov	r0, r4
 8006f02:	4499      	add	r9, r3
 8006f04:	9207      	str	r2, [sp, #28]
 8006f06:	f000 ff72 	bl	8007dee <__i2b>
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	dd0b      	ble.n	8006f28 <_dtoa_r+0x738>
 8006f10:	9b07      	ldr	r3, [sp, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dd08      	ble.n	8006f28 <_dtoa_r+0x738>
 8006f16:	42ab      	cmp	r3, r5
 8006f18:	bfa8      	it	ge
 8006f1a:	462b      	movge	r3, r5
 8006f1c:	9a07      	ldr	r2, [sp, #28]
 8006f1e:	eba9 0903 	sub.w	r9, r9, r3
 8006f22:	1aed      	subs	r5, r5, r3
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	9307      	str	r3, [sp, #28]
 8006f28:	9b08      	ldr	r3, [sp, #32]
 8006f2a:	b1eb      	cbz	r3, 8006f68 <_dtoa_r+0x778>
 8006f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d065      	beq.n	8006ffe <_dtoa_r+0x80e>
 8006f32:	b18e      	cbz	r6, 8006f58 <_dtoa_r+0x768>
 8006f34:	4639      	mov	r1, r7
 8006f36:	4632      	mov	r2, r6
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 fff7 	bl	8007f2c <__pow5mult>
 8006f3e:	465a      	mov	r2, fp
 8006f40:	4601      	mov	r1, r0
 8006f42:	4607      	mov	r7, r0
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 ff5b 	bl	8007e00 <__multiply>
 8006f4a:	4659      	mov	r1, fp
 8006f4c:	900a      	str	r0, [sp, #40]	; 0x28
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 fe6f 	bl	8007c32 <_Bfree>
 8006f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f56:	469b      	mov	fp, r3
 8006f58:	9b08      	ldr	r3, [sp, #32]
 8006f5a:	1b9a      	subs	r2, r3, r6
 8006f5c:	d004      	beq.n	8006f68 <_dtoa_r+0x778>
 8006f5e:	4659      	mov	r1, fp
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 ffe3 	bl	8007f2c <__pow5mult>
 8006f66:	4683      	mov	fp, r0
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 ff3f 	bl	8007dee <__i2b>
 8006f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f72:	4606      	mov	r6, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 81c6 	beq.w	8007306 <_dtoa_r+0xb16>
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 ffd4 	bl	8007f2c <__pow5mult>
 8006f84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f86:	4606      	mov	r6, r0
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	dc3e      	bgt.n	800700a <_dtoa_r+0x81a>
 8006f8c:	9b02      	ldr	r3, [sp, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d137      	bne.n	8007002 <_dtoa_r+0x812>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d134      	bne.n	8007006 <_dtoa_r+0x816>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fa2:	0d1b      	lsrs	r3, r3, #20
 8006fa4:	051b      	lsls	r3, r3, #20
 8006fa6:	b12b      	cbz	r3, 8006fb4 <_dtoa_r+0x7c4>
 8006fa8:	9b07      	ldr	r3, [sp, #28]
 8006faa:	f109 0901 	add.w	r9, r9, #1
 8006fae:	3301      	adds	r3, #1
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	9308      	str	r3, [sp, #32]
 8006fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d128      	bne.n	800700e <_dtoa_r+0x81e>
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	e02e      	b.n	800701e <_dtoa_r+0x82e>
 8006fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fc6:	e796      	b.n	8006ef6 <_dtoa_r+0x706>
 8006fc8:	9b08      	ldr	r3, [sp, #32]
 8006fca:	f108 36ff 	add.w	r6, r8, #4294967295
 8006fce:	42b3      	cmp	r3, r6
 8006fd0:	bfb7      	itett	lt
 8006fd2:	9b08      	ldrlt	r3, [sp, #32]
 8006fd4:	1b9e      	subge	r6, r3, r6
 8006fd6:	1af2      	sublt	r2, r6, r3
 8006fd8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006fda:	bfbf      	itttt	lt
 8006fdc:	9608      	strlt	r6, [sp, #32]
 8006fde:	189b      	addlt	r3, r3, r2
 8006fe0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006fe2:	2600      	movlt	r6, #0
 8006fe4:	f1b8 0f00 	cmp.w	r8, #0
 8006fe8:	bfb9      	ittee	lt
 8006fea:	eba9 0508 	sublt.w	r5, r9, r8
 8006fee:	2300      	movlt	r3, #0
 8006ff0:	464d      	movge	r5, r9
 8006ff2:	4643      	movge	r3, r8
 8006ff4:	e781      	b.n	8006efa <_dtoa_r+0x70a>
 8006ff6:	9e08      	ldr	r6, [sp, #32]
 8006ff8:	464d      	mov	r5, r9
 8006ffa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ffc:	e786      	b.n	8006f0c <_dtoa_r+0x71c>
 8006ffe:	9a08      	ldr	r2, [sp, #32]
 8007000:	e7ad      	b.n	8006f5e <_dtoa_r+0x76e>
 8007002:	2300      	movs	r3, #0
 8007004:	e7d6      	b.n	8006fb4 <_dtoa_r+0x7c4>
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	e7d4      	b.n	8006fb4 <_dtoa_r+0x7c4>
 800700a:	2300      	movs	r3, #0
 800700c:	9308      	str	r3, [sp, #32]
 800700e:	6933      	ldr	r3, [r6, #16]
 8007010:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007014:	6918      	ldr	r0, [r3, #16]
 8007016:	f000 fe9c 	bl	8007d52 <__hi0bits>
 800701a:	f1c0 0020 	rsb	r0, r0, #32
 800701e:	9b07      	ldr	r3, [sp, #28]
 8007020:	4418      	add	r0, r3
 8007022:	f010 001f 	ands.w	r0, r0, #31
 8007026:	d047      	beq.n	80070b8 <_dtoa_r+0x8c8>
 8007028:	f1c0 0320 	rsb	r3, r0, #32
 800702c:	2b04      	cmp	r3, #4
 800702e:	dd3b      	ble.n	80070a8 <_dtoa_r+0x8b8>
 8007030:	9b07      	ldr	r3, [sp, #28]
 8007032:	f1c0 001c 	rsb	r0, r0, #28
 8007036:	4481      	add	r9, r0
 8007038:	4405      	add	r5, r0
 800703a:	4403      	add	r3, r0
 800703c:	9307      	str	r3, [sp, #28]
 800703e:	f1b9 0f00 	cmp.w	r9, #0
 8007042:	dd05      	ble.n	8007050 <_dtoa_r+0x860>
 8007044:	4659      	mov	r1, fp
 8007046:	464a      	mov	r2, r9
 8007048:	4620      	mov	r0, r4
 800704a:	f000 ffbd 	bl	8007fc8 <__lshift>
 800704e:	4683      	mov	fp, r0
 8007050:	9b07      	ldr	r3, [sp, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dd05      	ble.n	8007062 <_dtoa_r+0x872>
 8007056:	4631      	mov	r1, r6
 8007058:	461a      	mov	r2, r3
 800705a:	4620      	mov	r0, r4
 800705c:	f000 ffb4 	bl	8007fc8 <__lshift>
 8007060:	4606      	mov	r6, r0
 8007062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007064:	b353      	cbz	r3, 80070bc <_dtoa_r+0x8cc>
 8007066:	4631      	mov	r1, r6
 8007068:	4658      	mov	r0, fp
 800706a:	f001 f801 	bl	8008070 <__mcmp>
 800706e:	2800      	cmp	r0, #0
 8007070:	da24      	bge.n	80070bc <_dtoa_r+0x8cc>
 8007072:	2300      	movs	r3, #0
 8007074:	4659      	mov	r1, fp
 8007076:	220a      	movs	r2, #10
 8007078:	4620      	mov	r0, r4
 800707a:	f000 fdf1 	bl	8007c60 <__multadd>
 800707e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007080:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007084:	4683      	mov	fp, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8144 	beq.w	8007314 <_dtoa_r+0xb24>
 800708c:	2300      	movs	r3, #0
 800708e:	4639      	mov	r1, r7
 8007090:	220a      	movs	r2, #10
 8007092:	4620      	mov	r0, r4
 8007094:	f000 fde4 	bl	8007c60 <__multadd>
 8007098:	9b04      	ldr	r3, [sp, #16]
 800709a:	4607      	mov	r7, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	dc4d      	bgt.n	800713c <_dtoa_r+0x94c>
 80070a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	dd4a      	ble.n	800713c <_dtoa_r+0x94c>
 80070a6:	e011      	b.n	80070cc <_dtoa_r+0x8dc>
 80070a8:	d0c9      	beq.n	800703e <_dtoa_r+0x84e>
 80070aa:	9a07      	ldr	r2, [sp, #28]
 80070ac:	331c      	adds	r3, #28
 80070ae:	441a      	add	r2, r3
 80070b0:	4499      	add	r9, r3
 80070b2:	441d      	add	r5, r3
 80070b4:	4613      	mov	r3, r2
 80070b6:	e7c1      	b.n	800703c <_dtoa_r+0x84c>
 80070b8:	4603      	mov	r3, r0
 80070ba:	e7f6      	b.n	80070aa <_dtoa_r+0x8ba>
 80070bc:	f1b8 0f00 	cmp.w	r8, #0
 80070c0:	dc36      	bgt.n	8007130 <_dtoa_r+0x940>
 80070c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	dd33      	ble.n	8007130 <_dtoa_r+0x940>
 80070c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80070cc:	9b04      	ldr	r3, [sp, #16]
 80070ce:	b963      	cbnz	r3, 80070ea <_dtoa_r+0x8fa>
 80070d0:	4631      	mov	r1, r6
 80070d2:	2205      	movs	r2, #5
 80070d4:	4620      	mov	r0, r4
 80070d6:	f000 fdc3 	bl	8007c60 <__multadd>
 80070da:	4601      	mov	r1, r0
 80070dc:	4606      	mov	r6, r0
 80070de:	4658      	mov	r0, fp
 80070e0:	f000 ffc6 	bl	8008070 <__mcmp>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f73f add3 	bgt.w	8006c90 <_dtoa_r+0x4a0>
 80070ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070ec:	9d06      	ldr	r5, [sp, #24]
 80070ee:	ea6f 0a03 	mvn.w	sl, r3
 80070f2:	f04f 0900 	mov.w	r9, #0
 80070f6:	4631      	mov	r1, r6
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 fd9a 	bl	8007c32 <_Bfree>
 80070fe:	2f00      	cmp	r7, #0
 8007100:	f43f aebd 	beq.w	8006e7e <_dtoa_r+0x68e>
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	d005      	beq.n	8007116 <_dtoa_r+0x926>
 800710a:	45b9      	cmp	r9, r7
 800710c:	d003      	beq.n	8007116 <_dtoa_r+0x926>
 800710e:	4649      	mov	r1, r9
 8007110:	4620      	mov	r0, r4
 8007112:	f000 fd8e 	bl	8007c32 <_Bfree>
 8007116:	4639      	mov	r1, r7
 8007118:	4620      	mov	r0, r4
 800711a:	f000 fd8a 	bl	8007c32 <_Bfree>
 800711e:	e6ae      	b.n	8006e7e <_dtoa_r+0x68e>
 8007120:	2600      	movs	r6, #0
 8007122:	4637      	mov	r7, r6
 8007124:	e7e1      	b.n	80070ea <_dtoa_r+0x8fa>
 8007126:	46ba      	mov	sl, r7
 8007128:	4637      	mov	r7, r6
 800712a:	e5b1      	b.n	8006c90 <_dtoa_r+0x4a0>
 800712c:	40240000 	.word	0x40240000
 8007130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007132:	f8cd 8010 	str.w	r8, [sp, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 80f3 	beq.w	8007322 <_dtoa_r+0xb32>
 800713c:	2d00      	cmp	r5, #0
 800713e:	dd05      	ble.n	800714c <_dtoa_r+0x95c>
 8007140:	4639      	mov	r1, r7
 8007142:	462a      	mov	r2, r5
 8007144:	4620      	mov	r0, r4
 8007146:	f000 ff3f 	bl	8007fc8 <__lshift>
 800714a:	4607      	mov	r7, r0
 800714c:	9b08      	ldr	r3, [sp, #32]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04c      	beq.n	80071ec <_dtoa_r+0x9fc>
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4620      	mov	r0, r4
 8007156:	f000 fd38 	bl	8007bca <_Balloc>
 800715a:	4605      	mov	r5, r0
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	f107 010c 	add.w	r1, r7, #12
 8007162:	3202      	adds	r2, #2
 8007164:	0092      	lsls	r2, r2, #2
 8007166:	300c      	adds	r0, #12
 8007168:	f000 fd24 	bl	8007bb4 <memcpy>
 800716c:	2201      	movs	r2, #1
 800716e:	4629      	mov	r1, r5
 8007170:	4620      	mov	r0, r4
 8007172:	f000 ff29 	bl	8007fc8 <__lshift>
 8007176:	46b9      	mov	r9, r7
 8007178:	4607      	mov	r7, r0
 800717a:	9b06      	ldr	r3, [sp, #24]
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	9b02      	ldr	r3, [sp, #8]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	9308      	str	r3, [sp, #32]
 8007186:	4631      	mov	r1, r6
 8007188:	4658      	mov	r0, fp
 800718a:	f7ff faa3 	bl	80066d4 <quorem>
 800718e:	4649      	mov	r1, r9
 8007190:	4605      	mov	r5, r0
 8007192:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007196:	4658      	mov	r0, fp
 8007198:	f000 ff6a 	bl	8008070 <__mcmp>
 800719c:	463a      	mov	r2, r7
 800719e:	9002      	str	r0, [sp, #8]
 80071a0:	4631      	mov	r1, r6
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 ff7e 	bl	80080a4 <__mdiff>
 80071a8:	68c3      	ldr	r3, [r0, #12]
 80071aa:	4602      	mov	r2, r0
 80071ac:	bb03      	cbnz	r3, 80071f0 <_dtoa_r+0xa00>
 80071ae:	4601      	mov	r1, r0
 80071b0:	9009      	str	r0, [sp, #36]	; 0x24
 80071b2:	4658      	mov	r0, fp
 80071b4:	f000 ff5c 	bl	8008070 <__mcmp>
 80071b8:	4603      	mov	r3, r0
 80071ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071bc:	4611      	mov	r1, r2
 80071be:	4620      	mov	r0, r4
 80071c0:	9309      	str	r3, [sp, #36]	; 0x24
 80071c2:	f000 fd36 	bl	8007c32 <_Bfree>
 80071c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c8:	b9a3      	cbnz	r3, 80071f4 <_dtoa_r+0xa04>
 80071ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80071cc:	b992      	cbnz	r2, 80071f4 <_dtoa_r+0xa04>
 80071ce:	9a08      	ldr	r2, [sp, #32]
 80071d0:	b982      	cbnz	r2, 80071f4 <_dtoa_r+0xa04>
 80071d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80071d6:	d029      	beq.n	800722c <_dtoa_r+0xa3c>
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	dd01      	ble.n	80071e2 <_dtoa_r+0x9f2>
 80071de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80071e2:	9b07      	ldr	r3, [sp, #28]
 80071e4:	1c5d      	adds	r5, r3, #1
 80071e6:	f883 8000 	strb.w	r8, [r3]
 80071ea:	e784      	b.n	80070f6 <_dtoa_r+0x906>
 80071ec:	4638      	mov	r0, r7
 80071ee:	e7c2      	b.n	8007176 <_dtoa_r+0x986>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7e3      	b.n	80071bc <_dtoa_r+0x9cc>
 80071f4:	9a02      	ldr	r2, [sp, #8]
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	db04      	blt.n	8007204 <_dtoa_r+0xa14>
 80071fa:	d123      	bne.n	8007244 <_dtoa_r+0xa54>
 80071fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80071fe:	bb0a      	cbnz	r2, 8007244 <_dtoa_r+0xa54>
 8007200:	9a08      	ldr	r2, [sp, #32]
 8007202:	b9fa      	cbnz	r2, 8007244 <_dtoa_r+0xa54>
 8007204:	2b00      	cmp	r3, #0
 8007206:	ddec      	ble.n	80071e2 <_dtoa_r+0x9f2>
 8007208:	4659      	mov	r1, fp
 800720a:	2201      	movs	r2, #1
 800720c:	4620      	mov	r0, r4
 800720e:	f000 fedb 	bl	8007fc8 <__lshift>
 8007212:	4631      	mov	r1, r6
 8007214:	4683      	mov	fp, r0
 8007216:	f000 ff2b 	bl	8008070 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	dc03      	bgt.n	8007226 <_dtoa_r+0xa36>
 800721e:	d1e0      	bne.n	80071e2 <_dtoa_r+0x9f2>
 8007220:	f018 0f01 	tst.w	r8, #1
 8007224:	d0dd      	beq.n	80071e2 <_dtoa_r+0x9f2>
 8007226:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800722a:	d1d8      	bne.n	80071de <_dtoa_r+0x9ee>
 800722c:	9b07      	ldr	r3, [sp, #28]
 800722e:	9a07      	ldr	r2, [sp, #28]
 8007230:	1c5d      	adds	r5, r3, #1
 8007232:	2339      	movs	r3, #57	; 0x39
 8007234:	7013      	strb	r3, [r2, #0]
 8007236:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800723a:	1e6a      	subs	r2, r5, #1
 800723c:	2b39      	cmp	r3, #57	; 0x39
 800723e:	d04d      	beq.n	80072dc <_dtoa_r+0xaec>
 8007240:	3301      	adds	r3, #1
 8007242:	e052      	b.n	80072ea <_dtoa_r+0xafa>
 8007244:	9a07      	ldr	r2, [sp, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f102 0501 	add.w	r5, r2, #1
 800724c:	dd06      	ble.n	800725c <_dtoa_r+0xa6c>
 800724e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007252:	d0eb      	beq.n	800722c <_dtoa_r+0xa3c>
 8007254:	f108 0801 	add.w	r8, r8, #1
 8007258:	9b07      	ldr	r3, [sp, #28]
 800725a:	e7c4      	b.n	80071e6 <_dtoa_r+0x9f6>
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	1aeb      	subs	r3, r5, r3
 8007262:	4293      	cmp	r3, r2
 8007264:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007268:	d021      	beq.n	80072ae <_dtoa_r+0xabe>
 800726a:	4659      	mov	r1, fp
 800726c:	2300      	movs	r3, #0
 800726e:	220a      	movs	r2, #10
 8007270:	4620      	mov	r0, r4
 8007272:	f000 fcf5 	bl	8007c60 <__multadd>
 8007276:	45b9      	cmp	r9, r7
 8007278:	4683      	mov	fp, r0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	f04f 020a 	mov.w	r2, #10
 8007282:	4649      	mov	r1, r9
 8007284:	4620      	mov	r0, r4
 8007286:	d105      	bne.n	8007294 <_dtoa_r+0xaa4>
 8007288:	f000 fcea 	bl	8007c60 <__multadd>
 800728c:	4681      	mov	r9, r0
 800728e:	4607      	mov	r7, r0
 8007290:	9507      	str	r5, [sp, #28]
 8007292:	e778      	b.n	8007186 <_dtoa_r+0x996>
 8007294:	f000 fce4 	bl	8007c60 <__multadd>
 8007298:	4639      	mov	r1, r7
 800729a:	4681      	mov	r9, r0
 800729c:	2300      	movs	r3, #0
 800729e:	220a      	movs	r2, #10
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 fcdd 	bl	8007c60 <__multadd>
 80072a6:	4607      	mov	r7, r0
 80072a8:	e7f2      	b.n	8007290 <_dtoa_r+0xaa0>
 80072aa:	f04f 0900 	mov.w	r9, #0
 80072ae:	4659      	mov	r1, fp
 80072b0:	2201      	movs	r2, #1
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 fe88 	bl	8007fc8 <__lshift>
 80072b8:	4631      	mov	r1, r6
 80072ba:	4683      	mov	fp, r0
 80072bc:	f000 fed8 	bl	8008070 <__mcmp>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	dcb8      	bgt.n	8007236 <_dtoa_r+0xa46>
 80072c4:	d102      	bne.n	80072cc <_dtoa_r+0xadc>
 80072c6:	f018 0f01 	tst.w	r8, #1
 80072ca:	d1b4      	bne.n	8007236 <_dtoa_r+0xa46>
 80072cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80072d0:	1e6a      	subs	r2, r5, #1
 80072d2:	2b30      	cmp	r3, #48	; 0x30
 80072d4:	f47f af0f 	bne.w	80070f6 <_dtoa_r+0x906>
 80072d8:	4615      	mov	r5, r2
 80072da:	e7f7      	b.n	80072cc <_dtoa_r+0xadc>
 80072dc:	9b06      	ldr	r3, [sp, #24]
 80072de:	4293      	cmp	r3, r2
 80072e0:	d105      	bne.n	80072ee <_dtoa_r+0xafe>
 80072e2:	2331      	movs	r3, #49	; 0x31
 80072e4:	9a06      	ldr	r2, [sp, #24]
 80072e6:	f10a 0a01 	add.w	sl, sl, #1
 80072ea:	7013      	strb	r3, [r2, #0]
 80072ec:	e703      	b.n	80070f6 <_dtoa_r+0x906>
 80072ee:	4615      	mov	r5, r2
 80072f0:	e7a1      	b.n	8007236 <_dtoa_r+0xa46>
 80072f2:	4b17      	ldr	r3, [pc, #92]	; (8007350 <_dtoa_r+0xb60>)
 80072f4:	f7ff bae1 	b.w	80068ba <_dtoa_r+0xca>
 80072f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f47f aabb 	bne.w	8006876 <_dtoa_r+0x86>
 8007300:	4b14      	ldr	r3, [pc, #80]	; (8007354 <_dtoa_r+0xb64>)
 8007302:	f7ff bada 	b.w	80068ba <_dtoa_r+0xca>
 8007306:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007308:	2b01      	cmp	r3, #1
 800730a:	f77f ae3f 	ble.w	8006f8c <_dtoa_r+0x79c>
 800730e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007310:	9308      	str	r3, [sp, #32]
 8007312:	e653      	b.n	8006fbc <_dtoa_r+0x7cc>
 8007314:	9b04      	ldr	r3, [sp, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	dc03      	bgt.n	8007322 <_dtoa_r+0xb32>
 800731a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800731c:	2b02      	cmp	r3, #2
 800731e:	f73f aed5 	bgt.w	80070cc <_dtoa_r+0x8dc>
 8007322:	9d06      	ldr	r5, [sp, #24]
 8007324:	4631      	mov	r1, r6
 8007326:	4658      	mov	r0, fp
 8007328:	f7ff f9d4 	bl	80066d4 <quorem>
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007332:	f805 8b01 	strb.w	r8, [r5], #1
 8007336:	9a04      	ldr	r2, [sp, #16]
 8007338:	1aeb      	subs	r3, r5, r3
 800733a:	429a      	cmp	r2, r3
 800733c:	ddb5      	ble.n	80072aa <_dtoa_r+0xaba>
 800733e:	4659      	mov	r1, fp
 8007340:	2300      	movs	r3, #0
 8007342:	220a      	movs	r2, #10
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fc8b 	bl	8007c60 <__multadd>
 800734a:	4683      	mov	fp, r0
 800734c:	e7ea      	b.n	8007324 <_dtoa_r+0xb34>
 800734e:	bf00      	nop
 8007350:	08009098 	.word	0x08009098
 8007354:	08009118 	.word	0x08009118

08007358 <std>:
 8007358:	2300      	movs	r3, #0
 800735a:	b510      	push	{r4, lr}
 800735c:	4604      	mov	r4, r0
 800735e:	e9c0 3300 	strd	r3, r3, [r0]
 8007362:	6083      	str	r3, [r0, #8]
 8007364:	8181      	strh	r1, [r0, #12]
 8007366:	6643      	str	r3, [r0, #100]	; 0x64
 8007368:	81c2      	strh	r2, [r0, #14]
 800736a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800736e:	6183      	str	r3, [r0, #24]
 8007370:	4619      	mov	r1, r3
 8007372:	2208      	movs	r2, #8
 8007374:	305c      	adds	r0, #92	; 0x5c
 8007376:	f7fd fc77 	bl	8004c68 <memset>
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <std+0x38>)
 800737c:	6224      	str	r4, [r4, #32]
 800737e:	6263      	str	r3, [r4, #36]	; 0x24
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <std+0x3c>)
 8007382:	62a3      	str	r3, [r4, #40]	; 0x28
 8007384:	4b04      	ldr	r3, [pc, #16]	; (8007398 <std+0x40>)
 8007386:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <std+0x44>)
 800738a:	6323      	str	r3, [r4, #48]	; 0x30
 800738c:	bd10      	pop	{r4, pc}
 800738e:	bf00      	nop
 8007390:	08008a65 	.word	0x08008a65
 8007394:	08008a87 	.word	0x08008a87
 8007398:	08008abf 	.word	0x08008abf
 800739c:	08008ae3 	.word	0x08008ae3

080073a0 <_cleanup_r>:
 80073a0:	4901      	ldr	r1, [pc, #4]	; (80073a8 <_cleanup_r+0x8>)
 80073a2:	f000 b885 	b.w	80074b0 <_fwalk_reent>
 80073a6:	bf00      	nop
 80073a8:	08008dfd 	.word	0x08008dfd

080073ac <__sfmoreglue>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	2568      	movs	r5, #104	; 0x68
 80073b0:	1e4a      	subs	r2, r1, #1
 80073b2:	4355      	muls	r5, r2
 80073b4:	460e      	mov	r6, r1
 80073b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ba:	f001 f859 	bl	8008470 <_malloc_r>
 80073be:	4604      	mov	r4, r0
 80073c0:	b140      	cbz	r0, 80073d4 <__sfmoreglue+0x28>
 80073c2:	2100      	movs	r1, #0
 80073c4:	e9c0 1600 	strd	r1, r6, [r0]
 80073c8:	300c      	adds	r0, #12
 80073ca:	60a0      	str	r0, [r4, #8]
 80073cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073d0:	f7fd fc4a 	bl	8004c68 <memset>
 80073d4:	4620      	mov	r0, r4
 80073d6:	bd70      	pop	{r4, r5, r6, pc}

080073d8 <__sinit>:
 80073d8:	6983      	ldr	r3, [r0, #24]
 80073da:	b510      	push	{r4, lr}
 80073dc:	4604      	mov	r4, r0
 80073de:	bb33      	cbnz	r3, 800742e <__sinit+0x56>
 80073e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80073e4:	6503      	str	r3, [r0, #80]	; 0x50
 80073e6:	4b12      	ldr	r3, [pc, #72]	; (8007430 <__sinit+0x58>)
 80073e8:	4a12      	ldr	r2, [pc, #72]	; (8007434 <__sinit+0x5c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6282      	str	r2, [r0, #40]	; 0x28
 80073ee:	4298      	cmp	r0, r3
 80073f0:	bf04      	itt	eq
 80073f2:	2301      	moveq	r3, #1
 80073f4:	6183      	streq	r3, [r0, #24]
 80073f6:	f000 f81f 	bl	8007438 <__sfp>
 80073fa:	6060      	str	r0, [r4, #4]
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 f81b 	bl	8007438 <__sfp>
 8007402:	60a0      	str	r0, [r4, #8]
 8007404:	4620      	mov	r0, r4
 8007406:	f000 f817 	bl	8007438 <__sfp>
 800740a:	2200      	movs	r2, #0
 800740c:	60e0      	str	r0, [r4, #12]
 800740e:	2104      	movs	r1, #4
 8007410:	6860      	ldr	r0, [r4, #4]
 8007412:	f7ff ffa1 	bl	8007358 <std>
 8007416:	2201      	movs	r2, #1
 8007418:	2109      	movs	r1, #9
 800741a:	68a0      	ldr	r0, [r4, #8]
 800741c:	f7ff ff9c 	bl	8007358 <std>
 8007420:	2202      	movs	r2, #2
 8007422:	2112      	movs	r1, #18
 8007424:	68e0      	ldr	r0, [r4, #12]
 8007426:	f7ff ff97 	bl	8007358 <std>
 800742a:	2301      	movs	r3, #1
 800742c:	61a3      	str	r3, [r4, #24]
 800742e:	bd10      	pop	{r4, pc}
 8007430:	08009084 	.word	0x08009084
 8007434:	080073a1 	.word	0x080073a1

08007438 <__sfp>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <__sfp+0x70>)
 800743c:	4607      	mov	r7, r0
 800743e:	681e      	ldr	r6, [r3, #0]
 8007440:	69b3      	ldr	r3, [r6, #24]
 8007442:	b913      	cbnz	r3, 800744a <__sfp+0x12>
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff ffc7 	bl	80073d8 <__sinit>
 800744a:	3648      	adds	r6, #72	; 0x48
 800744c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007450:	3b01      	subs	r3, #1
 8007452:	d503      	bpl.n	800745c <__sfp+0x24>
 8007454:	6833      	ldr	r3, [r6, #0]
 8007456:	b133      	cbz	r3, 8007466 <__sfp+0x2e>
 8007458:	6836      	ldr	r6, [r6, #0]
 800745a:	e7f7      	b.n	800744c <__sfp+0x14>
 800745c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007460:	b16d      	cbz	r5, 800747e <__sfp+0x46>
 8007462:	3468      	adds	r4, #104	; 0x68
 8007464:	e7f4      	b.n	8007450 <__sfp+0x18>
 8007466:	2104      	movs	r1, #4
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff ff9f 	bl	80073ac <__sfmoreglue>
 800746e:	6030      	str	r0, [r6, #0]
 8007470:	2800      	cmp	r0, #0
 8007472:	d1f1      	bne.n	8007458 <__sfp+0x20>
 8007474:	230c      	movs	r3, #12
 8007476:	4604      	mov	r4, r0
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4620      	mov	r0, r4
 800747c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800747e:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <__sfp+0x74>)
 8007480:	6665      	str	r5, [r4, #100]	; 0x64
 8007482:	e9c4 5500 	strd	r5, r5, [r4]
 8007486:	60a5      	str	r5, [r4, #8]
 8007488:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800748c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007490:	2208      	movs	r2, #8
 8007492:	4629      	mov	r1, r5
 8007494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007498:	f7fd fbe6 	bl	8004c68 <memset>
 800749c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074a4:	e7e9      	b.n	800747a <__sfp+0x42>
 80074a6:	bf00      	nop
 80074a8:	08009084 	.word	0x08009084
 80074ac:	ffff0001 	.word	0xffff0001

080074b0 <_fwalk_reent>:
 80074b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	2600      	movs	r6, #0
 80074ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074be:	b914      	cbnz	r4, 80074c6 <_fwalk_reent+0x16>
 80074c0:	4630      	mov	r0, r6
 80074c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80074ca:	3f01      	subs	r7, #1
 80074cc:	d501      	bpl.n	80074d2 <_fwalk_reent+0x22>
 80074ce:	6824      	ldr	r4, [r4, #0]
 80074d0:	e7f5      	b.n	80074be <_fwalk_reent+0xe>
 80074d2:	89ab      	ldrh	r3, [r5, #12]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d907      	bls.n	80074e8 <_fwalk_reent+0x38>
 80074d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074dc:	3301      	adds	r3, #1
 80074de:	d003      	beq.n	80074e8 <_fwalk_reent+0x38>
 80074e0:	4629      	mov	r1, r5
 80074e2:	4640      	mov	r0, r8
 80074e4:	47c8      	blx	r9
 80074e6:	4306      	orrs	r6, r0
 80074e8:	3568      	adds	r5, #104	; 0x68
 80074ea:	e7ee      	b.n	80074ca <_fwalk_reent+0x1a>

080074ec <rshift>:
 80074ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ee:	6906      	ldr	r6, [r0, #16]
 80074f0:	114b      	asrs	r3, r1, #5
 80074f2:	429e      	cmp	r6, r3
 80074f4:	f100 0414 	add.w	r4, r0, #20
 80074f8:	dd31      	ble.n	800755e <rshift+0x72>
 80074fa:	f011 011f 	ands.w	r1, r1, #31
 80074fe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007502:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007506:	d108      	bne.n	800751a <rshift+0x2e>
 8007508:	4621      	mov	r1, r4
 800750a:	42b2      	cmp	r2, r6
 800750c:	460b      	mov	r3, r1
 800750e:	d211      	bcs.n	8007534 <rshift+0x48>
 8007510:	f852 3b04 	ldr.w	r3, [r2], #4
 8007514:	f841 3b04 	str.w	r3, [r1], #4
 8007518:	e7f7      	b.n	800750a <rshift+0x1e>
 800751a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800751e:	4623      	mov	r3, r4
 8007520:	f1c1 0c20 	rsb	ip, r1, #32
 8007524:	40cd      	lsrs	r5, r1
 8007526:	3204      	adds	r2, #4
 8007528:	42b2      	cmp	r2, r6
 800752a:	4617      	mov	r7, r2
 800752c:	d30d      	bcc.n	800754a <rshift+0x5e>
 800752e:	601d      	str	r5, [r3, #0]
 8007530:	b105      	cbz	r5, 8007534 <rshift+0x48>
 8007532:	3304      	adds	r3, #4
 8007534:	42a3      	cmp	r3, r4
 8007536:	eba3 0204 	sub.w	r2, r3, r4
 800753a:	bf08      	it	eq
 800753c:	2300      	moveq	r3, #0
 800753e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007542:	6102      	str	r2, [r0, #16]
 8007544:	bf08      	it	eq
 8007546:	6143      	streq	r3, [r0, #20]
 8007548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754a:	683f      	ldr	r7, [r7, #0]
 800754c:	fa07 f70c 	lsl.w	r7, r7, ip
 8007550:	433d      	orrs	r5, r7
 8007552:	f843 5b04 	str.w	r5, [r3], #4
 8007556:	f852 5b04 	ldr.w	r5, [r2], #4
 800755a:	40cd      	lsrs	r5, r1
 800755c:	e7e4      	b.n	8007528 <rshift+0x3c>
 800755e:	4623      	mov	r3, r4
 8007560:	e7e8      	b.n	8007534 <rshift+0x48>

08007562 <__hexdig_fun>:
 8007562:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007566:	2b09      	cmp	r3, #9
 8007568:	d802      	bhi.n	8007570 <__hexdig_fun+0xe>
 800756a:	3820      	subs	r0, #32
 800756c:	b2c0      	uxtb	r0, r0
 800756e:	4770      	bx	lr
 8007570:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007574:	2b05      	cmp	r3, #5
 8007576:	d801      	bhi.n	800757c <__hexdig_fun+0x1a>
 8007578:	3847      	subs	r0, #71	; 0x47
 800757a:	e7f7      	b.n	800756c <__hexdig_fun+0xa>
 800757c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007580:	2b05      	cmp	r3, #5
 8007582:	d801      	bhi.n	8007588 <__hexdig_fun+0x26>
 8007584:	3827      	subs	r0, #39	; 0x27
 8007586:	e7f1      	b.n	800756c <__hexdig_fun+0xa>
 8007588:	2000      	movs	r0, #0
 800758a:	4770      	bx	lr

0800758c <__gethex>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	b08b      	sub	sp, #44	; 0x2c
 8007592:	9002      	str	r0, [sp, #8]
 8007594:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007596:	468a      	mov	sl, r1
 8007598:	4690      	mov	r8, r2
 800759a:	9306      	str	r3, [sp, #24]
 800759c:	f000 fad1 	bl	8007b42 <__localeconv_l>
 80075a0:	6803      	ldr	r3, [r0, #0]
 80075a2:	f04f 0b00 	mov.w	fp, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	9303      	str	r3, [sp, #12]
 80075aa:	f7f8 fde9 	bl	8000180 <strlen>
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	9001      	str	r0, [sp, #4]
 80075b2:	4403      	add	r3, r0
 80075b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80075b8:	9307      	str	r3, [sp, #28]
 80075ba:	f8da 3000 	ldr.w	r3, [sl]
 80075be:	3302      	adds	r3, #2
 80075c0:	461f      	mov	r7, r3
 80075c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075c6:	2830      	cmp	r0, #48	; 0x30
 80075c8:	d06c      	beq.n	80076a4 <__gethex+0x118>
 80075ca:	f7ff ffca 	bl	8007562 <__hexdig_fun>
 80075ce:	4604      	mov	r4, r0
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d16a      	bne.n	80076aa <__gethex+0x11e>
 80075d4:	9a01      	ldr	r2, [sp, #4]
 80075d6:	9903      	ldr	r1, [sp, #12]
 80075d8:	4638      	mov	r0, r7
 80075da:	f001 fa86 	bl	8008aea <strncmp>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d166      	bne.n	80076b0 <__gethex+0x124>
 80075e2:	9b01      	ldr	r3, [sp, #4]
 80075e4:	5cf8      	ldrb	r0, [r7, r3]
 80075e6:	18fe      	adds	r6, r7, r3
 80075e8:	f7ff ffbb 	bl	8007562 <__hexdig_fun>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d062      	beq.n	80076b6 <__gethex+0x12a>
 80075f0:	4633      	mov	r3, r6
 80075f2:	7818      	ldrb	r0, [r3, #0]
 80075f4:	461f      	mov	r7, r3
 80075f6:	2830      	cmp	r0, #48	; 0x30
 80075f8:	f103 0301 	add.w	r3, r3, #1
 80075fc:	d0f9      	beq.n	80075f2 <__gethex+0x66>
 80075fe:	f7ff ffb0 	bl	8007562 <__hexdig_fun>
 8007602:	fab0 f580 	clz	r5, r0
 8007606:	4634      	mov	r4, r6
 8007608:	f04f 0b01 	mov.w	fp, #1
 800760c:	096d      	lsrs	r5, r5, #5
 800760e:	463a      	mov	r2, r7
 8007610:	4616      	mov	r6, r2
 8007612:	7830      	ldrb	r0, [r6, #0]
 8007614:	3201      	adds	r2, #1
 8007616:	f7ff ffa4 	bl	8007562 <__hexdig_fun>
 800761a:	2800      	cmp	r0, #0
 800761c:	d1f8      	bne.n	8007610 <__gethex+0x84>
 800761e:	9a01      	ldr	r2, [sp, #4]
 8007620:	9903      	ldr	r1, [sp, #12]
 8007622:	4630      	mov	r0, r6
 8007624:	f001 fa61 	bl	8008aea <strncmp>
 8007628:	b950      	cbnz	r0, 8007640 <__gethex+0xb4>
 800762a:	b954      	cbnz	r4, 8007642 <__gethex+0xb6>
 800762c:	9b01      	ldr	r3, [sp, #4]
 800762e:	18f4      	adds	r4, r6, r3
 8007630:	4622      	mov	r2, r4
 8007632:	4616      	mov	r6, r2
 8007634:	7830      	ldrb	r0, [r6, #0]
 8007636:	3201      	adds	r2, #1
 8007638:	f7ff ff93 	bl	8007562 <__hexdig_fun>
 800763c:	2800      	cmp	r0, #0
 800763e:	d1f8      	bne.n	8007632 <__gethex+0xa6>
 8007640:	b10c      	cbz	r4, 8007646 <__gethex+0xba>
 8007642:	1ba4      	subs	r4, r4, r6
 8007644:	00a4      	lsls	r4, r4, #2
 8007646:	7833      	ldrb	r3, [r6, #0]
 8007648:	2b50      	cmp	r3, #80	; 0x50
 800764a:	d001      	beq.n	8007650 <__gethex+0xc4>
 800764c:	2b70      	cmp	r3, #112	; 0x70
 800764e:	d140      	bne.n	80076d2 <__gethex+0x146>
 8007650:	7873      	ldrb	r3, [r6, #1]
 8007652:	2b2b      	cmp	r3, #43	; 0x2b
 8007654:	d031      	beq.n	80076ba <__gethex+0x12e>
 8007656:	2b2d      	cmp	r3, #45	; 0x2d
 8007658:	d033      	beq.n	80076c2 <__gethex+0x136>
 800765a:	f04f 0900 	mov.w	r9, #0
 800765e:	1c71      	adds	r1, r6, #1
 8007660:	7808      	ldrb	r0, [r1, #0]
 8007662:	f7ff ff7e 	bl	8007562 <__hexdig_fun>
 8007666:	1e43      	subs	r3, r0, #1
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b18      	cmp	r3, #24
 800766c:	d831      	bhi.n	80076d2 <__gethex+0x146>
 800766e:	f1a0 0210 	sub.w	r2, r0, #16
 8007672:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007676:	f7ff ff74 	bl	8007562 <__hexdig_fun>
 800767a:	1e43      	subs	r3, r0, #1
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b18      	cmp	r3, #24
 8007680:	d922      	bls.n	80076c8 <__gethex+0x13c>
 8007682:	f1b9 0f00 	cmp.w	r9, #0
 8007686:	d000      	beq.n	800768a <__gethex+0xfe>
 8007688:	4252      	negs	r2, r2
 800768a:	4414      	add	r4, r2
 800768c:	f8ca 1000 	str.w	r1, [sl]
 8007690:	b30d      	cbz	r5, 80076d6 <__gethex+0x14a>
 8007692:	f1bb 0f00 	cmp.w	fp, #0
 8007696:	bf0c      	ite	eq
 8007698:	2706      	moveq	r7, #6
 800769a:	2700      	movne	r7, #0
 800769c:	4638      	mov	r0, r7
 800769e:	b00b      	add	sp, #44	; 0x2c
 80076a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a4:	f10b 0b01 	add.w	fp, fp, #1
 80076a8:	e78a      	b.n	80075c0 <__gethex+0x34>
 80076aa:	2500      	movs	r5, #0
 80076ac:	462c      	mov	r4, r5
 80076ae:	e7ae      	b.n	800760e <__gethex+0x82>
 80076b0:	463e      	mov	r6, r7
 80076b2:	2501      	movs	r5, #1
 80076b4:	e7c7      	b.n	8007646 <__gethex+0xba>
 80076b6:	4604      	mov	r4, r0
 80076b8:	e7fb      	b.n	80076b2 <__gethex+0x126>
 80076ba:	f04f 0900 	mov.w	r9, #0
 80076be:	1cb1      	adds	r1, r6, #2
 80076c0:	e7ce      	b.n	8007660 <__gethex+0xd4>
 80076c2:	f04f 0901 	mov.w	r9, #1
 80076c6:	e7fa      	b.n	80076be <__gethex+0x132>
 80076c8:	230a      	movs	r3, #10
 80076ca:	fb03 0202 	mla	r2, r3, r2, r0
 80076ce:	3a10      	subs	r2, #16
 80076d0:	e7cf      	b.n	8007672 <__gethex+0xe6>
 80076d2:	4631      	mov	r1, r6
 80076d4:	e7da      	b.n	800768c <__gethex+0x100>
 80076d6:	4629      	mov	r1, r5
 80076d8:	1bf3      	subs	r3, r6, r7
 80076da:	3b01      	subs	r3, #1
 80076dc:	2b07      	cmp	r3, #7
 80076de:	dc49      	bgt.n	8007774 <__gethex+0x1e8>
 80076e0:	9802      	ldr	r0, [sp, #8]
 80076e2:	f000 fa72 	bl	8007bca <_Balloc>
 80076e6:	f04f 0b00 	mov.w	fp, #0
 80076ea:	4605      	mov	r5, r0
 80076ec:	46da      	mov	sl, fp
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	f100 0914 	add.w	r9, r0, #20
 80076f4:	f1c3 0301 	rsb	r3, r3, #1
 80076f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	42b7      	cmp	r7, r6
 8007700:	d33b      	bcc.n	800777a <__gethex+0x1ee>
 8007702:	9804      	ldr	r0, [sp, #16]
 8007704:	f840 ab04 	str.w	sl, [r0], #4
 8007708:	eba0 0009 	sub.w	r0, r0, r9
 800770c:	1080      	asrs	r0, r0, #2
 800770e:	6128      	str	r0, [r5, #16]
 8007710:	0147      	lsls	r7, r0, #5
 8007712:	4650      	mov	r0, sl
 8007714:	f000 fb1d 	bl	8007d52 <__hi0bits>
 8007718:	f8d8 6000 	ldr.w	r6, [r8]
 800771c:	1a3f      	subs	r7, r7, r0
 800771e:	42b7      	cmp	r7, r6
 8007720:	dd64      	ble.n	80077ec <__gethex+0x260>
 8007722:	1bbf      	subs	r7, r7, r6
 8007724:	4639      	mov	r1, r7
 8007726:	4628      	mov	r0, r5
 8007728:	f000 fe27 	bl	800837a <__any_on>
 800772c:	4682      	mov	sl, r0
 800772e:	b178      	cbz	r0, 8007750 <__gethex+0x1c4>
 8007730:	f04f 0a01 	mov.w	sl, #1
 8007734:	1e7b      	subs	r3, r7, #1
 8007736:	1159      	asrs	r1, r3, #5
 8007738:	f003 021f 	and.w	r2, r3, #31
 800773c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007740:	fa0a f202 	lsl.w	r2, sl, r2
 8007744:	420a      	tst	r2, r1
 8007746:	d003      	beq.n	8007750 <__gethex+0x1c4>
 8007748:	4553      	cmp	r3, sl
 800774a:	dc46      	bgt.n	80077da <__gethex+0x24e>
 800774c:	f04f 0a02 	mov.w	sl, #2
 8007750:	4639      	mov	r1, r7
 8007752:	4628      	mov	r0, r5
 8007754:	f7ff feca 	bl	80074ec <rshift>
 8007758:	443c      	add	r4, r7
 800775a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800775e:	42a3      	cmp	r3, r4
 8007760:	da52      	bge.n	8007808 <__gethex+0x27c>
 8007762:	4629      	mov	r1, r5
 8007764:	9802      	ldr	r0, [sp, #8]
 8007766:	f000 fa64 	bl	8007c32 <_Bfree>
 800776a:	2300      	movs	r3, #0
 800776c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800776e:	27a3      	movs	r7, #163	; 0xa3
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	e793      	b.n	800769c <__gethex+0x110>
 8007774:	3101      	adds	r1, #1
 8007776:	105b      	asrs	r3, r3, #1
 8007778:	e7b0      	b.n	80076dc <__gethex+0x150>
 800777a:	1e73      	subs	r3, r6, #1
 800777c:	9305      	str	r3, [sp, #20]
 800777e:	9a07      	ldr	r2, [sp, #28]
 8007780:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007784:	4293      	cmp	r3, r2
 8007786:	d018      	beq.n	80077ba <__gethex+0x22e>
 8007788:	f1bb 0f20 	cmp.w	fp, #32
 800778c:	d107      	bne.n	800779e <__gethex+0x212>
 800778e:	9b04      	ldr	r3, [sp, #16]
 8007790:	f8c3 a000 	str.w	sl, [r3]
 8007794:	f04f 0a00 	mov.w	sl, #0
 8007798:	46d3      	mov	fp, sl
 800779a:	3304      	adds	r3, #4
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80077a2:	f7ff fede 	bl	8007562 <__hexdig_fun>
 80077a6:	f000 000f 	and.w	r0, r0, #15
 80077aa:	fa00 f00b 	lsl.w	r0, r0, fp
 80077ae:	ea4a 0a00 	orr.w	sl, sl, r0
 80077b2:	f10b 0b04 	add.w	fp, fp, #4
 80077b6:	9b05      	ldr	r3, [sp, #20]
 80077b8:	e00d      	b.n	80077d6 <__gethex+0x24a>
 80077ba:	9b05      	ldr	r3, [sp, #20]
 80077bc:	9a08      	ldr	r2, [sp, #32]
 80077be:	4413      	add	r3, r2
 80077c0:	42bb      	cmp	r3, r7
 80077c2:	d3e1      	bcc.n	8007788 <__gethex+0x1fc>
 80077c4:	4618      	mov	r0, r3
 80077c6:	9a01      	ldr	r2, [sp, #4]
 80077c8:	9903      	ldr	r1, [sp, #12]
 80077ca:	9309      	str	r3, [sp, #36]	; 0x24
 80077cc:	f001 f98d 	bl	8008aea <strncmp>
 80077d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d1d8      	bne.n	8007788 <__gethex+0x1fc>
 80077d6:	461e      	mov	r6, r3
 80077d8:	e791      	b.n	80076fe <__gethex+0x172>
 80077da:	1eb9      	subs	r1, r7, #2
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 fdcc 	bl	800837a <__any_on>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d0b2      	beq.n	800774c <__gethex+0x1c0>
 80077e6:	f04f 0a03 	mov.w	sl, #3
 80077ea:	e7b1      	b.n	8007750 <__gethex+0x1c4>
 80077ec:	da09      	bge.n	8007802 <__gethex+0x276>
 80077ee:	1bf7      	subs	r7, r6, r7
 80077f0:	4629      	mov	r1, r5
 80077f2:	463a      	mov	r2, r7
 80077f4:	9802      	ldr	r0, [sp, #8]
 80077f6:	f000 fbe7 	bl	8007fc8 <__lshift>
 80077fa:	4605      	mov	r5, r0
 80077fc:	1be4      	subs	r4, r4, r7
 80077fe:	f100 0914 	add.w	r9, r0, #20
 8007802:	f04f 0a00 	mov.w	sl, #0
 8007806:	e7a8      	b.n	800775a <__gethex+0x1ce>
 8007808:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800780c:	42a0      	cmp	r0, r4
 800780e:	dd6b      	ble.n	80078e8 <__gethex+0x35c>
 8007810:	1b04      	subs	r4, r0, r4
 8007812:	42a6      	cmp	r6, r4
 8007814:	dc2e      	bgt.n	8007874 <__gethex+0x2e8>
 8007816:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d022      	beq.n	8007864 <__gethex+0x2d8>
 800781e:	2b03      	cmp	r3, #3
 8007820:	d024      	beq.n	800786c <__gethex+0x2e0>
 8007822:	2b01      	cmp	r3, #1
 8007824:	d115      	bne.n	8007852 <__gethex+0x2c6>
 8007826:	42a6      	cmp	r6, r4
 8007828:	d113      	bne.n	8007852 <__gethex+0x2c6>
 800782a:	2e01      	cmp	r6, #1
 800782c:	dc0b      	bgt.n	8007846 <__gethex+0x2ba>
 800782e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007832:	9a06      	ldr	r2, [sp, #24]
 8007834:	2762      	movs	r7, #98	; 0x62
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	2301      	movs	r3, #1
 800783a:	612b      	str	r3, [r5, #16]
 800783c:	f8c9 3000 	str.w	r3, [r9]
 8007840:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007842:	601d      	str	r5, [r3, #0]
 8007844:	e72a      	b.n	800769c <__gethex+0x110>
 8007846:	1e71      	subs	r1, r6, #1
 8007848:	4628      	mov	r0, r5
 800784a:	f000 fd96 	bl	800837a <__any_on>
 800784e:	2800      	cmp	r0, #0
 8007850:	d1ed      	bne.n	800782e <__gethex+0x2a2>
 8007852:	4629      	mov	r1, r5
 8007854:	9802      	ldr	r0, [sp, #8]
 8007856:	f000 f9ec 	bl	8007c32 <_Bfree>
 800785a:	2300      	movs	r3, #0
 800785c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800785e:	2750      	movs	r7, #80	; 0x50
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	e71b      	b.n	800769c <__gethex+0x110>
 8007864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0e1      	beq.n	800782e <__gethex+0x2a2>
 800786a:	e7f2      	b.n	8007852 <__gethex+0x2c6>
 800786c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1dd      	bne.n	800782e <__gethex+0x2a2>
 8007872:	e7ee      	b.n	8007852 <__gethex+0x2c6>
 8007874:	1e67      	subs	r7, r4, #1
 8007876:	f1ba 0f00 	cmp.w	sl, #0
 800787a:	d132      	bne.n	80078e2 <__gethex+0x356>
 800787c:	b127      	cbz	r7, 8007888 <__gethex+0x2fc>
 800787e:	4639      	mov	r1, r7
 8007880:	4628      	mov	r0, r5
 8007882:	f000 fd7a 	bl	800837a <__any_on>
 8007886:	4682      	mov	sl, r0
 8007888:	2301      	movs	r3, #1
 800788a:	117a      	asrs	r2, r7, #5
 800788c:	f007 071f 	and.w	r7, r7, #31
 8007890:	fa03 f707 	lsl.w	r7, r3, r7
 8007894:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007898:	4621      	mov	r1, r4
 800789a:	421f      	tst	r7, r3
 800789c:	f04f 0702 	mov.w	r7, #2
 80078a0:	4628      	mov	r0, r5
 80078a2:	bf18      	it	ne
 80078a4:	f04a 0a02 	orrne.w	sl, sl, #2
 80078a8:	1b36      	subs	r6, r6, r4
 80078aa:	f7ff fe1f 	bl	80074ec <rshift>
 80078ae:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80078b2:	f1ba 0f00 	cmp.w	sl, #0
 80078b6:	d048      	beq.n	800794a <__gethex+0x3be>
 80078b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d015      	beq.n	80078ec <__gethex+0x360>
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d017      	beq.n	80078f4 <__gethex+0x368>
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d109      	bne.n	80078dc <__gethex+0x350>
 80078c8:	f01a 0f02 	tst.w	sl, #2
 80078cc:	d006      	beq.n	80078dc <__gethex+0x350>
 80078ce:	f8d9 3000 	ldr.w	r3, [r9]
 80078d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80078d6:	f01a 0f01 	tst.w	sl, #1
 80078da:	d10e      	bne.n	80078fa <__gethex+0x36e>
 80078dc:	f047 0710 	orr.w	r7, r7, #16
 80078e0:	e033      	b.n	800794a <__gethex+0x3be>
 80078e2:	f04f 0a01 	mov.w	sl, #1
 80078e6:	e7cf      	b.n	8007888 <__gethex+0x2fc>
 80078e8:	2701      	movs	r7, #1
 80078ea:	e7e2      	b.n	80078b2 <__gethex+0x326>
 80078ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ee:	f1c3 0301 	rsb	r3, r3, #1
 80078f2:	9315      	str	r3, [sp, #84]	; 0x54
 80078f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <__gethex+0x350>
 80078fa:	f04f 0c00 	mov.w	ip, #0
 80078fe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007902:	f105 0314 	add.w	r3, r5, #20
 8007906:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800790a:	eb03 010a 	add.w	r1, r3, sl
 800790e:	4618      	mov	r0, r3
 8007910:	f853 2b04 	ldr.w	r2, [r3], #4
 8007914:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007918:	d01c      	beq.n	8007954 <__gethex+0x3c8>
 800791a:	3201      	adds	r2, #1
 800791c:	6002      	str	r2, [r0, #0]
 800791e:	2f02      	cmp	r7, #2
 8007920:	f105 0314 	add.w	r3, r5, #20
 8007924:	d138      	bne.n	8007998 <__gethex+0x40c>
 8007926:	f8d8 2000 	ldr.w	r2, [r8]
 800792a:	3a01      	subs	r2, #1
 800792c:	42b2      	cmp	r2, r6
 800792e:	d10a      	bne.n	8007946 <__gethex+0x3ba>
 8007930:	2201      	movs	r2, #1
 8007932:	1171      	asrs	r1, r6, #5
 8007934:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007938:	f006 061f 	and.w	r6, r6, #31
 800793c:	fa02 f606 	lsl.w	r6, r2, r6
 8007940:	421e      	tst	r6, r3
 8007942:	bf18      	it	ne
 8007944:	4617      	movne	r7, r2
 8007946:	f047 0720 	orr.w	r7, r7, #32
 800794a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800794c:	601d      	str	r5, [r3, #0]
 800794e:	9b06      	ldr	r3, [sp, #24]
 8007950:	601c      	str	r4, [r3, #0]
 8007952:	e6a3      	b.n	800769c <__gethex+0x110>
 8007954:	4299      	cmp	r1, r3
 8007956:	f843 cc04 	str.w	ip, [r3, #-4]
 800795a:	d8d8      	bhi.n	800790e <__gethex+0x382>
 800795c:	68ab      	ldr	r3, [r5, #8]
 800795e:	4599      	cmp	r9, r3
 8007960:	db12      	blt.n	8007988 <__gethex+0x3fc>
 8007962:	6869      	ldr	r1, [r5, #4]
 8007964:	9802      	ldr	r0, [sp, #8]
 8007966:	3101      	adds	r1, #1
 8007968:	f000 f92f 	bl	8007bca <_Balloc>
 800796c:	4683      	mov	fp, r0
 800796e:	692a      	ldr	r2, [r5, #16]
 8007970:	f105 010c 	add.w	r1, r5, #12
 8007974:	3202      	adds	r2, #2
 8007976:	0092      	lsls	r2, r2, #2
 8007978:	300c      	adds	r0, #12
 800797a:	f000 f91b 	bl	8007bb4 <memcpy>
 800797e:	4629      	mov	r1, r5
 8007980:	9802      	ldr	r0, [sp, #8]
 8007982:	f000 f956 	bl	8007c32 <_Bfree>
 8007986:	465d      	mov	r5, fp
 8007988:	692b      	ldr	r3, [r5, #16]
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	612a      	str	r2, [r5, #16]
 800798e:	2201      	movs	r2, #1
 8007990:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007994:	615a      	str	r2, [r3, #20]
 8007996:	e7c2      	b.n	800791e <__gethex+0x392>
 8007998:	692a      	ldr	r2, [r5, #16]
 800799a:	454a      	cmp	r2, r9
 800799c:	dd0b      	ble.n	80079b6 <__gethex+0x42a>
 800799e:	2101      	movs	r1, #1
 80079a0:	4628      	mov	r0, r5
 80079a2:	f7ff fda3 	bl	80074ec <rshift>
 80079a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079aa:	3401      	adds	r4, #1
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	f6ff aed8 	blt.w	8007762 <__gethex+0x1d6>
 80079b2:	2701      	movs	r7, #1
 80079b4:	e7c7      	b.n	8007946 <__gethex+0x3ba>
 80079b6:	f016 061f 	ands.w	r6, r6, #31
 80079ba:	d0fa      	beq.n	80079b2 <__gethex+0x426>
 80079bc:	449a      	add	sl, r3
 80079be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80079c2:	f000 f9c6 	bl	8007d52 <__hi0bits>
 80079c6:	f1c6 0620 	rsb	r6, r6, #32
 80079ca:	42b0      	cmp	r0, r6
 80079cc:	dbe7      	blt.n	800799e <__gethex+0x412>
 80079ce:	e7f0      	b.n	80079b2 <__gethex+0x426>

080079d0 <L_shift>:
 80079d0:	f1c2 0208 	rsb	r2, r2, #8
 80079d4:	0092      	lsls	r2, r2, #2
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	f1c2 0620 	rsb	r6, r2, #32
 80079dc:	6843      	ldr	r3, [r0, #4]
 80079de:	6804      	ldr	r4, [r0, #0]
 80079e0:	fa03 f506 	lsl.w	r5, r3, r6
 80079e4:	432c      	orrs	r4, r5
 80079e6:	40d3      	lsrs	r3, r2
 80079e8:	6004      	str	r4, [r0, #0]
 80079ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80079ee:	4288      	cmp	r0, r1
 80079f0:	d3f4      	bcc.n	80079dc <L_shift+0xc>
 80079f2:	bd70      	pop	{r4, r5, r6, pc}

080079f4 <__match>:
 80079f4:	b530      	push	{r4, r5, lr}
 80079f6:	6803      	ldr	r3, [r0, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079fe:	b914      	cbnz	r4, 8007a06 <__match+0x12>
 8007a00:	6003      	str	r3, [r0, #0]
 8007a02:	2001      	movs	r0, #1
 8007a04:	bd30      	pop	{r4, r5, pc}
 8007a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a0e:	2d19      	cmp	r5, #25
 8007a10:	bf98      	it	ls
 8007a12:	3220      	addls	r2, #32
 8007a14:	42a2      	cmp	r2, r4
 8007a16:	d0f0      	beq.n	80079fa <__match+0x6>
 8007a18:	2000      	movs	r0, #0
 8007a1a:	e7f3      	b.n	8007a04 <__match+0x10>

08007a1c <__hexnan>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	2500      	movs	r5, #0
 8007a22:	680b      	ldr	r3, [r1, #0]
 8007a24:	4682      	mov	sl, r0
 8007a26:	115f      	asrs	r7, r3, #5
 8007a28:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007a2c:	f013 031f 	ands.w	r3, r3, #31
 8007a30:	bf18      	it	ne
 8007a32:	3704      	addne	r7, #4
 8007a34:	1f3e      	subs	r6, r7, #4
 8007a36:	4690      	mov	r8, r2
 8007a38:	46b1      	mov	r9, r6
 8007a3a:	4634      	mov	r4, r6
 8007a3c:	46ab      	mov	fp, r5
 8007a3e:	b087      	sub	sp, #28
 8007a40:	6801      	ldr	r1, [r0, #0]
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	f847 5c04 	str.w	r5, [r7, #-4]
 8007a48:	9502      	str	r5, [sp, #8]
 8007a4a:	784a      	ldrb	r2, [r1, #1]
 8007a4c:	1c4b      	adds	r3, r1, #1
 8007a4e:	9303      	str	r3, [sp, #12]
 8007a50:	b342      	cbz	r2, 8007aa4 <__hexnan+0x88>
 8007a52:	4610      	mov	r0, r2
 8007a54:	9105      	str	r1, [sp, #20]
 8007a56:	9204      	str	r2, [sp, #16]
 8007a58:	f7ff fd83 	bl	8007562 <__hexdig_fun>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d143      	bne.n	8007ae8 <__hexnan+0xcc>
 8007a60:	9a04      	ldr	r2, [sp, #16]
 8007a62:	9905      	ldr	r1, [sp, #20]
 8007a64:	2a20      	cmp	r2, #32
 8007a66:	d818      	bhi.n	8007a9a <__hexnan+0x7e>
 8007a68:	9b02      	ldr	r3, [sp, #8]
 8007a6a:	459b      	cmp	fp, r3
 8007a6c:	dd13      	ble.n	8007a96 <__hexnan+0x7a>
 8007a6e:	454c      	cmp	r4, r9
 8007a70:	d206      	bcs.n	8007a80 <__hexnan+0x64>
 8007a72:	2d07      	cmp	r5, #7
 8007a74:	dc04      	bgt.n	8007a80 <__hexnan+0x64>
 8007a76:	462a      	mov	r2, r5
 8007a78:	4649      	mov	r1, r9
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff ffa8 	bl	80079d0 <L_shift>
 8007a80:	4544      	cmp	r4, r8
 8007a82:	d944      	bls.n	8007b0e <__hexnan+0xf2>
 8007a84:	2300      	movs	r3, #0
 8007a86:	f1a4 0904 	sub.w	r9, r4, #4
 8007a8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a8e:	461d      	mov	r5, r3
 8007a90:	464c      	mov	r4, r9
 8007a92:	f8cd b008 	str.w	fp, [sp, #8]
 8007a96:	9903      	ldr	r1, [sp, #12]
 8007a98:	e7d7      	b.n	8007a4a <__hexnan+0x2e>
 8007a9a:	2a29      	cmp	r2, #41	; 0x29
 8007a9c:	d14a      	bne.n	8007b34 <__hexnan+0x118>
 8007a9e:	3102      	adds	r1, #2
 8007aa0:	f8ca 1000 	str.w	r1, [sl]
 8007aa4:	f1bb 0f00 	cmp.w	fp, #0
 8007aa8:	d044      	beq.n	8007b34 <__hexnan+0x118>
 8007aaa:	454c      	cmp	r4, r9
 8007aac:	d206      	bcs.n	8007abc <__hexnan+0xa0>
 8007aae:	2d07      	cmp	r5, #7
 8007ab0:	dc04      	bgt.n	8007abc <__hexnan+0xa0>
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7ff ff8a 	bl	80079d0 <L_shift>
 8007abc:	4544      	cmp	r4, r8
 8007abe:	d928      	bls.n	8007b12 <__hexnan+0xf6>
 8007ac0:	4643      	mov	r3, r8
 8007ac2:	f854 2b04 	ldr.w	r2, [r4], #4
 8007ac6:	42a6      	cmp	r6, r4
 8007ac8:	f843 2b04 	str.w	r2, [r3], #4
 8007acc:	d2f9      	bcs.n	8007ac2 <__hexnan+0xa6>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f843 2b04 	str.w	r2, [r3], #4
 8007ad4:	429e      	cmp	r6, r3
 8007ad6:	d2fb      	bcs.n	8007ad0 <__hexnan+0xb4>
 8007ad8:	6833      	ldr	r3, [r6, #0]
 8007ada:	b91b      	cbnz	r3, 8007ae4 <__hexnan+0xc8>
 8007adc:	4546      	cmp	r6, r8
 8007ade:	d127      	bne.n	8007b30 <__hexnan+0x114>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	6033      	str	r3, [r6, #0]
 8007ae4:	2005      	movs	r0, #5
 8007ae6:	e026      	b.n	8007b36 <__hexnan+0x11a>
 8007ae8:	3501      	adds	r5, #1
 8007aea:	2d08      	cmp	r5, #8
 8007aec:	f10b 0b01 	add.w	fp, fp, #1
 8007af0:	dd06      	ble.n	8007b00 <__hexnan+0xe4>
 8007af2:	4544      	cmp	r4, r8
 8007af4:	d9cf      	bls.n	8007a96 <__hexnan+0x7a>
 8007af6:	2300      	movs	r3, #0
 8007af8:	2501      	movs	r5, #1
 8007afa:	f844 3c04 	str.w	r3, [r4, #-4]
 8007afe:	3c04      	subs	r4, #4
 8007b00:	6822      	ldr	r2, [r4, #0]
 8007b02:	f000 000f 	and.w	r0, r0, #15
 8007b06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b0a:	6020      	str	r0, [r4, #0]
 8007b0c:	e7c3      	b.n	8007a96 <__hexnan+0x7a>
 8007b0e:	2508      	movs	r5, #8
 8007b10:	e7c1      	b.n	8007a96 <__hexnan+0x7a>
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0df      	beq.n	8007ad8 <__hexnan+0xbc>
 8007b18:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1c:	f1c3 0320 	rsb	r3, r3, #32
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
 8007b24:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007b28:	401a      	ands	r2, r3
 8007b2a:	f847 2c04 	str.w	r2, [r7, #-4]
 8007b2e:	e7d3      	b.n	8007ad8 <__hexnan+0xbc>
 8007b30:	3e04      	subs	r6, #4
 8007b32:	e7d1      	b.n	8007ad8 <__hexnan+0xbc>
 8007b34:	2004      	movs	r0, #4
 8007b36:	b007      	add	sp, #28
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b3c <__locale_ctype_ptr_l>:
 8007b3c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007b40:	4770      	bx	lr

08007b42 <__localeconv_l>:
 8007b42:	30f0      	adds	r0, #240	; 0xf0
 8007b44:	4770      	bx	lr
	...

08007b48 <_localeconv_r>:
 8007b48:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <_localeconv_r+0x14>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6a18      	ldr	r0, [r3, #32]
 8007b4e:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <_localeconv_r+0x18>)
 8007b50:	2800      	cmp	r0, #0
 8007b52:	bf08      	it	eq
 8007b54:	4618      	moveq	r0, r3
 8007b56:	30f0      	adds	r0, #240	; 0xf0
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	2000000c 	.word	0x2000000c
 8007b60:	20000070 	.word	0x20000070

08007b64 <malloc>:
 8007b64:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <malloc+0xc>)
 8007b66:	4601      	mov	r1, r0
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	f000 bc81 	b.w	8008470 <_malloc_r>
 8007b6e:	bf00      	nop
 8007b70:	2000000c 	.word	0x2000000c

08007b74 <__ascii_mbtowc>:
 8007b74:	b082      	sub	sp, #8
 8007b76:	b901      	cbnz	r1, 8007b7a <__ascii_mbtowc+0x6>
 8007b78:	a901      	add	r1, sp, #4
 8007b7a:	b142      	cbz	r2, 8007b8e <__ascii_mbtowc+0x1a>
 8007b7c:	b14b      	cbz	r3, 8007b92 <__ascii_mbtowc+0x1e>
 8007b7e:	7813      	ldrb	r3, [r2, #0]
 8007b80:	600b      	str	r3, [r1, #0]
 8007b82:	7812      	ldrb	r2, [r2, #0]
 8007b84:	1c10      	adds	r0, r2, #0
 8007b86:	bf18      	it	ne
 8007b88:	2001      	movne	r0, #1
 8007b8a:	b002      	add	sp, #8
 8007b8c:	4770      	bx	lr
 8007b8e:	4610      	mov	r0, r2
 8007b90:	e7fb      	b.n	8007b8a <__ascii_mbtowc+0x16>
 8007b92:	f06f 0001 	mvn.w	r0, #1
 8007b96:	e7f8      	b.n	8007b8a <__ascii_mbtowc+0x16>

08007b98 <memchr>:
 8007b98:	b510      	push	{r4, lr}
 8007b9a:	b2c9      	uxtb	r1, r1
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4290      	cmp	r0, r2
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	d101      	bne.n	8007ba8 <memchr+0x10>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e003      	b.n	8007bb0 <memchr+0x18>
 8007ba8:	781c      	ldrb	r4, [r3, #0]
 8007baa:	3001      	adds	r0, #1
 8007bac:	428c      	cmp	r4, r1
 8007bae:	d1f6      	bne.n	8007b9e <memchr+0x6>
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	bd10      	pop	{r4, pc}

08007bb4 <memcpy>:
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	1e43      	subs	r3, r0, #1
 8007bb8:	440a      	add	r2, r1
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	d100      	bne.n	8007bc0 <memcpy+0xc>
 8007bbe:	bd10      	pop	{r4, pc}
 8007bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bc8:	e7f7      	b.n	8007bba <memcpy+0x6>

08007bca <_Balloc>:
 8007bca:	b570      	push	{r4, r5, r6, lr}
 8007bcc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bce:	4604      	mov	r4, r0
 8007bd0:	460e      	mov	r6, r1
 8007bd2:	b93d      	cbnz	r5, 8007be4 <_Balloc+0x1a>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f7ff ffc5 	bl	8007b64 <malloc>
 8007bda:	6260      	str	r0, [r4, #36]	; 0x24
 8007bdc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007be0:	6005      	str	r5, [r0, #0]
 8007be2:	60c5      	str	r5, [r0, #12]
 8007be4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007be6:	68eb      	ldr	r3, [r5, #12]
 8007be8:	b183      	cbz	r3, 8007c0c <_Balloc+0x42>
 8007bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007bf2:	b9b8      	cbnz	r0, 8007c24 <_Balloc+0x5a>
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	fa01 f506 	lsl.w	r5, r1, r6
 8007bfa:	1d6a      	adds	r2, r5, #5
 8007bfc:	0092      	lsls	r2, r2, #2
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 fbdc 	bl	80083bc <_calloc_r>
 8007c04:	b160      	cbz	r0, 8007c20 <_Balloc+0x56>
 8007c06:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007c0a:	e00e      	b.n	8007c2a <_Balloc+0x60>
 8007c0c:	2221      	movs	r2, #33	; 0x21
 8007c0e:	2104      	movs	r1, #4
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 fbd3 	bl	80083bc <_calloc_r>
 8007c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c18:	60e8      	str	r0, [r5, #12]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e4      	bne.n	8007bea <_Balloc+0x20>
 8007c20:	2000      	movs	r0, #0
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	6802      	ldr	r2, [r0, #0]
 8007c26:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c30:	e7f7      	b.n	8007c22 <_Balloc+0x58>

08007c32 <_Bfree>:
 8007c32:	b570      	push	{r4, r5, r6, lr}
 8007c34:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c36:	4606      	mov	r6, r0
 8007c38:	460d      	mov	r5, r1
 8007c3a:	b93c      	cbnz	r4, 8007c4c <_Bfree+0x1a>
 8007c3c:	2010      	movs	r0, #16
 8007c3e:	f7ff ff91 	bl	8007b64 <malloc>
 8007c42:	6270      	str	r0, [r6, #36]	; 0x24
 8007c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c48:	6004      	str	r4, [r0, #0]
 8007c4a:	60c4      	str	r4, [r0, #12]
 8007c4c:	b13d      	cbz	r5, 8007c5e <_Bfree+0x2c>
 8007c4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c50:	686a      	ldr	r2, [r5, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c58:	6029      	str	r1, [r5, #0]
 8007c5a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}

08007c60 <__multadd>:
 8007c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c64:	461f      	mov	r7, r3
 8007c66:	4606      	mov	r6, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	690d      	ldr	r5, [r1, #16]
 8007c6e:	f101 0c14 	add.w	ip, r1, #20
 8007c72:	f8dc 0000 	ldr.w	r0, [ip]
 8007c76:	3301      	adds	r3, #1
 8007c78:	b281      	uxth	r1, r0
 8007c7a:	fb02 7101 	mla	r1, r2, r1, r7
 8007c7e:	0c00      	lsrs	r0, r0, #16
 8007c80:	0c0f      	lsrs	r7, r1, #16
 8007c82:	fb02 7000 	mla	r0, r2, r0, r7
 8007c86:	b289      	uxth	r1, r1
 8007c88:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007c8c:	429d      	cmp	r5, r3
 8007c8e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007c92:	f84c 1b04 	str.w	r1, [ip], #4
 8007c96:	dcec      	bgt.n	8007c72 <__multadd+0x12>
 8007c98:	b1d7      	cbz	r7, 8007cd0 <__multadd+0x70>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	42ab      	cmp	r3, r5
 8007c9e:	dc12      	bgt.n	8007cc6 <__multadd+0x66>
 8007ca0:	6861      	ldr	r1, [r4, #4]
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	3101      	adds	r1, #1
 8007ca6:	f7ff ff90 	bl	8007bca <_Balloc>
 8007caa:	4680      	mov	r8, r0
 8007cac:	6922      	ldr	r2, [r4, #16]
 8007cae:	f104 010c 	add.w	r1, r4, #12
 8007cb2:	3202      	adds	r2, #2
 8007cb4:	0092      	lsls	r2, r2, #2
 8007cb6:	300c      	adds	r0, #12
 8007cb8:	f7ff ff7c 	bl	8007bb4 <memcpy>
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7ff ffb7 	bl	8007c32 <_Bfree>
 8007cc4:	4644      	mov	r4, r8
 8007cc6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cca:	3501      	adds	r5, #1
 8007ccc:	615f      	str	r7, [r3, #20]
 8007cce:	6125      	str	r5, [r4, #16]
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007cd6 <__s2b>:
 8007cd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cda:	4615      	mov	r5, r2
 8007cdc:	2209      	movs	r2, #9
 8007cde:	461f      	mov	r7, r3
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ce8:	4606      	mov	r6, r0
 8007cea:	2201      	movs	r2, #1
 8007cec:	2100      	movs	r1, #0
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	db20      	blt.n	8007d34 <__s2b+0x5e>
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f7ff ff69 	bl	8007bca <_Balloc>
 8007cf8:	9b08      	ldr	r3, [sp, #32]
 8007cfa:	2d09      	cmp	r5, #9
 8007cfc:	6143      	str	r3, [r0, #20]
 8007cfe:	f04f 0301 	mov.w	r3, #1
 8007d02:	6103      	str	r3, [r0, #16]
 8007d04:	dd19      	ble.n	8007d3a <__s2b+0x64>
 8007d06:	f104 0809 	add.w	r8, r4, #9
 8007d0a:	46c1      	mov	r9, r8
 8007d0c:	442c      	add	r4, r5
 8007d0e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007d12:	4601      	mov	r1, r0
 8007d14:	3b30      	subs	r3, #48	; 0x30
 8007d16:	220a      	movs	r2, #10
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f7ff ffa1 	bl	8007c60 <__multadd>
 8007d1e:	45a1      	cmp	r9, r4
 8007d20:	d1f5      	bne.n	8007d0e <__s2b+0x38>
 8007d22:	eb08 0405 	add.w	r4, r8, r5
 8007d26:	3c08      	subs	r4, #8
 8007d28:	1b2d      	subs	r5, r5, r4
 8007d2a:	1963      	adds	r3, r4, r5
 8007d2c:	42bb      	cmp	r3, r7
 8007d2e:	db07      	blt.n	8007d40 <__s2b+0x6a>
 8007d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d34:	0052      	lsls	r2, r2, #1
 8007d36:	3101      	adds	r1, #1
 8007d38:	e7d9      	b.n	8007cee <__s2b+0x18>
 8007d3a:	340a      	adds	r4, #10
 8007d3c:	2509      	movs	r5, #9
 8007d3e:	e7f3      	b.n	8007d28 <__s2b+0x52>
 8007d40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d44:	4601      	mov	r1, r0
 8007d46:	3b30      	subs	r3, #48	; 0x30
 8007d48:	220a      	movs	r2, #10
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f7ff ff88 	bl	8007c60 <__multadd>
 8007d50:	e7eb      	b.n	8007d2a <__s2b+0x54>

08007d52 <__hi0bits>:
 8007d52:	0c02      	lsrs	r2, r0, #16
 8007d54:	0412      	lsls	r2, r2, #16
 8007d56:	4603      	mov	r3, r0
 8007d58:	b9b2      	cbnz	r2, 8007d88 <__hi0bits+0x36>
 8007d5a:	0403      	lsls	r3, r0, #16
 8007d5c:	2010      	movs	r0, #16
 8007d5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d62:	bf04      	itt	eq
 8007d64:	021b      	lsleq	r3, r3, #8
 8007d66:	3008      	addeq	r0, #8
 8007d68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d6c:	bf04      	itt	eq
 8007d6e:	011b      	lsleq	r3, r3, #4
 8007d70:	3004      	addeq	r0, #4
 8007d72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d76:	bf04      	itt	eq
 8007d78:	009b      	lsleq	r3, r3, #2
 8007d7a:	3002      	addeq	r0, #2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	db06      	blt.n	8007d8e <__hi0bits+0x3c>
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	d503      	bpl.n	8007d8c <__hi0bits+0x3a>
 8007d84:	3001      	adds	r0, #1
 8007d86:	4770      	bx	lr
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e7e8      	b.n	8007d5e <__hi0bits+0xc>
 8007d8c:	2020      	movs	r0, #32
 8007d8e:	4770      	bx	lr

08007d90 <__lo0bits>:
 8007d90:	6803      	ldr	r3, [r0, #0]
 8007d92:	4601      	mov	r1, r0
 8007d94:	f013 0207 	ands.w	r2, r3, #7
 8007d98:	d00b      	beq.n	8007db2 <__lo0bits+0x22>
 8007d9a:	07da      	lsls	r2, r3, #31
 8007d9c:	d423      	bmi.n	8007de6 <__lo0bits+0x56>
 8007d9e:	0798      	lsls	r0, r3, #30
 8007da0:	bf49      	itett	mi
 8007da2:	085b      	lsrmi	r3, r3, #1
 8007da4:	089b      	lsrpl	r3, r3, #2
 8007da6:	2001      	movmi	r0, #1
 8007da8:	600b      	strmi	r3, [r1, #0]
 8007daa:	bf5c      	itt	pl
 8007dac:	600b      	strpl	r3, [r1, #0]
 8007dae:	2002      	movpl	r0, #2
 8007db0:	4770      	bx	lr
 8007db2:	b298      	uxth	r0, r3
 8007db4:	b9a8      	cbnz	r0, 8007de2 <__lo0bits+0x52>
 8007db6:	2010      	movs	r0, #16
 8007db8:	0c1b      	lsrs	r3, r3, #16
 8007dba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007dbe:	bf04      	itt	eq
 8007dc0:	0a1b      	lsreq	r3, r3, #8
 8007dc2:	3008      	addeq	r0, #8
 8007dc4:	071a      	lsls	r2, r3, #28
 8007dc6:	bf04      	itt	eq
 8007dc8:	091b      	lsreq	r3, r3, #4
 8007dca:	3004      	addeq	r0, #4
 8007dcc:	079a      	lsls	r2, r3, #30
 8007dce:	bf04      	itt	eq
 8007dd0:	089b      	lsreq	r3, r3, #2
 8007dd2:	3002      	addeq	r0, #2
 8007dd4:	07da      	lsls	r2, r3, #31
 8007dd6:	d402      	bmi.n	8007dde <__lo0bits+0x4e>
 8007dd8:	085b      	lsrs	r3, r3, #1
 8007dda:	d006      	beq.n	8007dea <__lo0bits+0x5a>
 8007ddc:	3001      	adds	r0, #1
 8007dde:	600b      	str	r3, [r1, #0]
 8007de0:	4770      	bx	lr
 8007de2:	4610      	mov	r0, r2
 8007de4:	e7e9      	b.n	8007dba <__lo0bits+0x2a>
 8007de6:	2000      	movs	r0, #0
 8007de8:	4770      	bx	lr
 8007dea:	2020      	movs	r0, #32
 8007dec:	4770      	bx	lr

08007dee <__i2b>:
 8007dee:	b510      	push	{r4, lr}
 8007df0:	460c      	mov	r4, r1
 8007df2:	2101      	movs	r1, #1
 8007df4:	f7ff fee9 	bl	8007bca <_Balloc>
 8007df8:	2201      	movs	r2, #1
 8007dfa:	6144      	str	r4, [r0, #20]
 8007dfc:	6102      	str	r2, [r0, #16]
 8007dfe:	bd10      	pop	{r4, pc}

08007e00 <__multiply>:
 8007e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	4614      	mov	r4, r2
 8007e06:	690a      	ldr	r2, [r1, #16]
 8007e08:	6923      	ldr	r3, [r4, #16]
 8007e0a:	4688      	mov	r8, r1
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	bfbe      	ittt	lt
 8007e10:	460b      	movlt	r3, r1
 8007e12:	46a0      	movlt	r8, r4
 8007e14:	461c      	movlt	r4, r3
 8007e16:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e1a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e22:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e26:	eb07 0609 	add.w	r6, r7, r9
 8007e2a:	42b3      	cmp	r3, r6
 8007e2c:	bfb8      	it	lt
 8007e2e:	3101      	addlt	r1, #1
 8007e30:	f7ff fecb 	bl	8007bca <_Balloc>
 8007e34:	f100 0514 	add.w	r5, r0, #20
 8007e38:	462b      	mov	r3, r5
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007e40:	4573      	cmp	r3, lr
 8007e42:	d316      	bcc.n	8007e72 <__multiply+0x72>
 8007e44:	f104 0214 	add.w	r2, r4, #20
 8007e48:	f108 0114 	add.w	r1, r8, #20
 8007e4c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007e50:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	9b00      	ldr	r3, [sp, #0]
 8007e58:	9201      	str	r2, [sp, #4]
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d80c      	bhi.n	8007e78 <__multiply+0x78>
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	dd03      	ble.n	8007e6a <__multiply+0x6a>
 8007e62:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d05d      	beq.n	8007f26 <__multiply+0x126>
 8007e6a:	6106      	str	r6, [r0, #16]
 8007e6c:	b003      	add	sp, #12
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	f843 2b04 	str.w	r2, [r3], #4
 8007e76:	e7e3      	b.n	8007e40 <__multiply+0x40>
 8007e78:	f8b2 b000 	ldrh.w	fp, [r2]
 8007e7c:	f1bb 0f00 	cmp.w	fp, #0
 8007e80:	d023      	beq.n	8007eca <__multiply+0xca>
 8007e82:	4689      	mov	r9, r1
 8007e84:	46ac      	mov	ip, r5
 8007e86:	f04f 0800 	mov.w	r8, #0
 8007e8a:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e8e:	f8dc a000 	ldr.w	sl, [ip]
 8007e92:	b2a3      	uxth	r3, r4
 8007e94:	fa1f fa8a 	uxth.w	sl, sl
 8007e98:	fb0b a303 	mla	r3, fp, r3, sl
 8007e9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ea0:	f8dc 4000 	ldr.w	r4, [ip]
 8007ea4:	4443      	add	r3, r8
 8007ea6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007eaa:	fb0b 840a 	mla	r4, fp, sl, r8
 8007eae:	46e2      	mov	sl, ip
 8007eb0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007eba:	454f      	cmp	r7, r9
 8007ebc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007ec0:	f84a 3b04 	str.w	r3, [sl], #4
 8007ec4:	d82b      	bhi.n	8007f1e <__multiply+0x11e>
 8007ec6:	f8cc 8004 	str.w	r8, [ip, #4]
 8007eca:	9b01      	ldr	r3, [sp, #4]
 8007ecc:	3204      	adds	r2, #4
 8007ece:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007ed2:	f1ba 0f00 	cmp.w	sl, #0
 8007ed6:	d020      	beq.n	8007f1a <__multiply+0x11a>
 8007ed8:	4689      	mov	r9, r1
 8007eda:	46a8      	mov	r8, r5
 8007edc:	f04f 0b00 	mov.w	fp, #0
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	f8b9 c000 	ldrh.w	ip, [r9]
 8007ee6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ef0:	46c4      	mov	ip, r8
 8007ef2:	445c      	add	r4, fp
 8007ef4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007ef8:	f84c 3b04 	str.w	r3, [ip], #4
 8007efc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f00:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007f04:	0c1b      	lsrs	r3, r3, #16
 8007f06:	fb0a b303 	mla	r3, sl, r3, fp
 8007f0a:	454f      	cmp	r7, r9
 8007f0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007f10:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007f14:	d805      	bhi.n	8007f22 <__multiply+0x122>
 8007f16:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f1a:	3504      	adds	r5, #4
 8007f1c:	e79b      	b.n	8007e56 <__multiply+0x56>
 8007f1e:	46d4      	mov	ip, sl
 8007f20:	e7b3      	b.n	8007e8a <__multiply+0x8a>
 8007f22:	46e0      	mov	r8, ip
 8007f24:	e7dd      	b.n	8007ee2 <__multiply+0xe2>
 8007f26:	3e01      	subs	r6, #1
 8007f28:	e799      	b.n	8007e5e <__multiply+0x5e>
	...

08007f2c <__pow5mult>:
 8007f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f30:	4615      	mov	r5, r2
 8007f32:	f012 0203 	ands.w	r2, r2, #3
 8007f36:	4606      	mov	r6, r0
 8007f38:	460f      	mov	r7, r1
 8007f3a:	d007      	beq.n	8007f4c <__pow5mult+0x20>
 8007f3c:	4c21      	ldr	r4, [pc, #132]	; (8007fc4 <__pow5mult+0x98>)
 8007f3e:	3a01      	subs	r2, #1
 8007f40:	2300      	movs	r3, #0
 8007f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f46:	f7ff fe8b 	bl	8007c60 <__multadd>
 8007f4a:	4607      	mov	r7, r0
 8007f4c:	10ad      	asrs	r5, r5, #2
 8007f4e:	d035      	beq.n	8007fbc <__pow5mult+0x90>
 8007f50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f52:	b93c      	cbnz	r4, 8007f64 <__pow5mult+0x38>
 8007f54:	2010      	movs	r0, #16
 8007f56:	f7ff fe05 	bl	8007b64 <malloc>
 8007f5a:	6270      	str	r0, [r6, #36]	; 0x24
 8007f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f60:	6004      	str	r4, [r0, #0]
 8007f62:	60c4      	str	r4, [r0, #12]
 8007f64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f6c:	b94c      	cbnz	r4, 8007f82 <__pow5mult+0x56>
 8007f6e:	f240 2171 	movw	r1, #625	; 0x271
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7ff ff3b 	bl	8007dee <__i2b>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	f04f 0800 	mov.w	r8, #0
 8007f86:	07eb      	lsls	r3, r5, #31
 8007f88:	d50a      	bpl.n	8007fa0 <__pow5mult+0x74>
 8007f8a:	4639      	mov	r1, r7
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff ff36 	bl	8007e00 <__multiply>
 8007f94:	4681      	mov	r9, r0
 8007f96:	4639      	mov	r1, r7
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7ff fe4a 	bl	8007c32 <_Bfree>
 8007f9e:	464f      	mov	r7, r9
 8007fa0:	106d      	asrs	r5, r5, #1
 8007fa2:	d00b      	beq.n	8007fbc <__pow5mult+0x90>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	b938      	cbnz	r0, 8007fb8 <__pow5mult+0x8c>
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4621      	mov	r1, r4
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff ff27 	bl	8007e00 <__multiply>
 8007fb2:	6020      	str	r0, [r4, #0]
 8007fb4:	f8c0 8000 	str.w	r8, [r0]
 8007fb8:	4604      	mov	r4, r0
 8007fba:	e7e4      	b.n	8007f86 <__pow5mult+0x5a>
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fc2:	bf00      	nop
 8007fc4:	08009288 	.word	0x08009288

08007fc8 <__lshift>:
 8007fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	460c      	mov	r4, r1
 8007fce:	4607      	mov	r7, r0
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fd8:	eb0a 0903 	add.w	r9, sl, r3
 8007fdc:	6849      	ldr	r1, [r1, #4]
 8007fde:	68a3      	ldr	r3, [r4, #8]
 8007fe0:	f109 0501 	add.w	r5, r9, #1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	db32      	blt.n	800804e <__lshift+0x86>
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f7ff fdee 	bl	8007bca <_Balloc>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f100 0114 	add.w	r1, r0, #20
 8007ff8:	4553      	cmp	r3, sl
 8007ffa:	db2b      	blt.n	8008054 <__lshift+0x8c>
 8007ffc:	6920      	ldr	r0, [r4, #16]
 8007ffe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008002:	f104 0314 	add.w	r3, r4, #20
 8008006:	f016 021f 	ands.w	r2, r6, #31
 800800a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800800e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008012:	d025      	beq.n	8008060 <__lshift+0x98>
 8008014:	2000      	movs	r0, #0
 8008016:	f1c2 0e20 	rsb	lr, r2, #32
 800801a:	468a      	mov	sl, r1
 800801c:	681e      	ldr	r6, [r3, #0]
 800801e:	4096      	lsls	r6, r2
 8008020:	4330      	orrs	r0, r6
 8008022:	f84a 0b04 	str.w	r0, [sl], #4
 8008026:	f853 0b04 	ldr.w	r0, [r3], #4
 800802a:	459c      	cmp	ip, r3
 800802c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008030:	d814      	bhi.n	800805c <__lshift+0x94>
 8008032:	6048      	str	r0, [r1, #4]
 8008034:	b108      	cbz	r0, 800803a <__lshift+0x72>
 8008036:	f109 0502 	add.w	r5, r9, #2
 800803a:	3d01      	subs	r5, #1
 800803c:	4638      	mov	r0, r7
 800803e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008042:	4621      	mov	r1, r4
 8008044:	f7ff fdf5 	bl	8007c32 <_Bfree>
 8008048:	4640      	mov	r0, r8
 800804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804e:	3101      	adds	r1, #1
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	e7c7      	b.n	8007fe4 <__lshift+0x1c>
 8008054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008058:	3301      	adds	r3, #1
 800805a:	e7cd      	b.n	8007ff8 <__lshift+0x30>
 800805c:	4651      	mov	r1, sl
 800805e:	e7dc      	b.n	800801a <__lshift+0x52>
 8008060:	3904      	subs	r1, #4
 8008062:	f853 2b04 	ldr.w	r2, [r3], #4
 8008066:	459c      	cmp	ip, r3
 8008068:	f841 2f04 	str.w	r2, [r1, #4]!
 800806c:	d8f9      	bhi.n	8008062 <__lshift+0x9a>
 800806e:	e7e4      	b.n	800803a <__lshift+0x72>

08008070 <__mcmp>:
 8008070:	6903      	ldr	r3, [r0, #16]
 8008072:	690a      	ldr	r2, [r1, #16]
 8008074:	b530      	push	{r4, r5, lr}
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	d10c      	bne.n	8008094 <__mcmp+0x24>
 800807a:	0092      	lsls	r2, r2, #2
 800807c:	3014      	adds	r0, #20
 800807e:	3114      	adds	r1, #20
 8008080:	1884      	adds	r4, r0, r2
 8008082:	4411      	add	r1, r2
 8008084:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800808c:	4295      	cmp	r5, r2
 800808e:	d003      	beq.n	8008098 <__mcmp+0x28>
 8008090:	d305      	bcc.n	800809e <__mcmp+0x2e>
 8008092:	2301      	movs	r3, #1
 8008094:	4618      	mov	r0, r3
 8008096:	bd30      	pop	{r4, r5, pc}
 8008098:	42a0      	cmp	r0, r4
 800809a:	d3f3      	bcc.n	8008084 <__mcmp+0x14>
 800809c:	e7fa      	b.n	8008094 <__mcmp+0x24>
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	e7f7      	b.n	8008094 <__mcmp+0x24>

080080a4 <__mdiff>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	460d      	mov	r5, r1
 80080aa:	4607      	mov	r7, r0
 80080ac:	4611      	mov	r1, r2
 80080ae:	4628      	mov	r0, r5
 80080b0:	4614      	mov	r4, r2
 80080b2:	f7ff ffdd 	bl	8008070 <__mcmp>
 80080b6:	1e06      	subs	r6, r0, #0
 80080b8:	d108      	bne.n	80080cc <__mdiff+0x28>
 80080ba:	4631      	mov	r1, r6
 80080bc:	4638      	mov	r0, r7
 80080be:	f7ff fd84 	bl	8007bca <_Balloc>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80080c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080cc:	bfa4      	itt	ge
 80080ce:	4623      	movge	r3, r4
 80080d0:	462c      	movge	r4, r5
 80080d2:	4638      	mov	r0, r7
 80080d4:	6861      	ldr	r1, [r4, #4]
 80080d6:	bfa6      	itte	ge
 80080d8:	461d      	movge	r5, r3
 80080da:	2600      	movge	r6, #0
 80080dc:	2601      	movlt	r6, #1
 80080de:	f7ff fd74 	bl	8007bca <_Balloc>
 80080e2:	f04f 0e00 	mov.w	lr, #0
 80080e6:	60c6      	str	r6, [r0, #12]
 80080e8:	692b      	ldr	r3, [r5, #16]
 80080ea:	6926      	ldr	r6, [r4, #16]
 80080ec:	f104 0214 	add.w	r2, r4, #20
 80080f0:	f105 0914 	add.w	r9, r5, #20
 80080f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80080f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80080fc:	f100 0114 	add.w	r1, r0, #20
 8008100:	f852 ab04 	ldr.w	sl, [r2], #4
 8008104:	f859 5b04 	ldr.w	r5, [r9], #4
 8008108:	fa1f f38a 	uxth.w	r3, sl
 800810c:	4473      	add	r3, lr
 800810e:	b2ac      	uxth	r4, r5
 8008110:	1b1b      	subs	r3, r3, r4
 8008112:	0c2c      	lsrs	r4, r5, #16
 8008114:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008118:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800811c:	b29b      	uxth	r3, r3
 800811e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008122:	45c8      	cmp	r8, r9
 8008124:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008128:	4694      	mov	ip, r2
 800812a:	f841 4b04 	str.w	r4, [r1], #4
 800812e:	d8e7      	bhi.n	8008100 <__mdiff+0x5c>
 8008130:	45bc      	cmp	ip, r7
 8008132:	d304      	bcc.n	800813e <__mdiff+0x9a>
 8008134:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008138:	b183      	cbz	r3, 800815c <__mdiff+0xb8>
 800813a:	6106      	str	r6, [r0, #16]
 800813c:	e7c4      	b.n	80080c8 <__mdiff+0x24>
 800813e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008142:	b2a2      	uxth	r2, r4
 8008144:	4472      	add	r2, lr
 8008146:	1413      	asrs	r3, r2, #16
 8008148:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800814c:	b292      	uxth	r2, r2
 800814e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008152:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008156:	f841 2b04 	str.w	r2, [r1], #4
 800815a:	e7e9      	b.n	8008130 <__mdiff+0x8c>
 800815c:	3e01      	subs	r6, #1
 800815e:	e7e9      	b.n	8008134 <__mdiff+0x90>

08008160 <__ulp>:
 8008160:	4b10      	ldr	r3, [pc, #64]	; (80081a4 <__ulp+0x44>)
 8008162:	400b      	ands	r3, r1
 8008164:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008168:	2b00      	cmp	r3, #0
 800816a:	dd02      	ble.n	8008172 <__ulp+0x12>
 800816c:	2000      	movs	r0, #0
 800816e:	4619      	mov	r1, r3
 8008170:	4770      	bx	lr
 8008172:	425b      	negs	r3, r3
 8008174:	151b      	asrs	r3, r3, #20
 8008176:	2b13      	cmp	r3, #19
 8008178:	f04f 0000 	mov.w	r0, #0
 800817c:	f04f 0100 	mov.w	r1, #0
 8008180:	dc04      	bgt.n	800818c <__ulp+0x2c>
 8008182:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008186:	fa42 f103 	asr.w	r1, r2, r3
 800818a:	4770      	bx	lr
 800818c:	2201      	movs	r2, #1
 800818e:	3b14      	subs	r3, #20
 8008190:	2b1e      	cmp	r3, #30
 8008192:	bfce      	itee	gt
 8008194:	4613      	movgt	r3, r2
 8008196:	f1c3 031f 	rsble	r3, r3, #31
 800819a:	fa02 f303 	lslle.w	r3, r2, r3
 800819e:	4618      	mov	r0, r3
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	7ff00000 	.word	0x7ff00000

080081a8 <__b2d>:
 80081a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ac:	6907      	ldr	r7, [r0, #16]
 80081ae:	f100 0914 	add.w	r9, r0, #20
 80081b2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80081b6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80081ba:	f1a7 0804 	sub.w	r8, r7, #4
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff fdc7 	bl	8007d52 <__hi0bits>
 80081c4:	f1c0 0320 	rsb	r3, r0, #32
 80081c8:	280a      	cmp	r0, #10
 80081ca:	600b      	str	r3, [r1, #0]
 80081cc:	491e      	ldr	r1, [pc, #120]	; (8008248 <__b2d+0xa0>)
 80081ce:	dc17      	bgt.n	8008200 <__b2d+0x58>
 80081d0:	45c1      	cmp	r9, r8
 80081d2:	bf28      	it	cs
 80081d4:	2200      	movcs	r2, #0
 80081d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80081da:	fa26 f30c 	lsr.w	r3, r6, ip
 80081de:	bf38      	it	cc
 80081e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80081e4:	ea43 0501 	orr.w	r5, r3, r1
 80081e8:	f100 0315 	add.w	r3, r0, #21
 80081ec:	fa06 f303 	lsl.w	r3, r6, r3
 80081f0:	fa22 f20c 	lsr.w	r2, r2, ip
 80081f4:	ea43 0402 	orr.w	r4, r3, r2
 80081f8:	4620      	mov	r0, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008200:	45c1      	cmp	r9, r8
 8008202:	bf3a      	itte	cc
 8008204:	f1a7 0808 	subcc.w	r8, r7, #8
 8008208:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800820c:	2200      	movcs	r2, #0
 800820e:	f1b0 030b 	subs.w	r3, r0, #11
 8008212:	d015      	beq.n	8008240 <__b2d+0x98>
 8008214:	409e      	lsls	r6, r3
 8008216:	f1c3 0720 	rsb	r7, r3, #32
 800821a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800821e:	fa22 f107 	lsr.w	r1, r2, r7
 8008222:	45c8      	cmp	r8, r9
 8008224:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008228:	ea46 0501 	orr.w	r5, r6, r1
 800822c:	bf94      	ite	ls
 800822e:	2100      	movls	r1, #0
 8008230:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008234:	fa02 f003 	lsl.w	r0, r2, r3
 8008238:	40f9      	lsrs	r1, r7
 800823a:	ea40 0401 	orr.w	r4, r0, r1
 800823e:	e7db      	b.n	80081f8 <__b2d+0x50>
 8008240:	ea46 0501 	orr.w	r5, r6, r1
 8008244:	4614      	mov	r4, r2
 8008246:	e7d7      	b.n	80081f8 <__b2d+0x50>
 8008248:	3ff00000 	.word	0x3ff00000

0800824c <__d2b>:
 800824c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008250:	461c      	mov	r4, r3
 8008252:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008256:	2101      	movs	r1, #1
 8008258:	4690      	mov	r8, r2
 800825a:	f7ff fcb6 	bl	8007bca <_Balloc>
 800825e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008262:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008266:	4607      	mov	r7, r0
 8008268:	bb34      	cbnz	r4, 80082b8 <__d2b+0x6c>
 800826a:	9201      	str	r2, [sp, #4]
 800826c:	f1b8 0200 	subs.w	r2, r8, #0
 8008270:	d027      	beq.n	80082c2 <__d2b+0x76>
 8008272:	a802      	add	r0, sp, #8
 8008274:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008278:	f7ff fd8a 	bl	8007d90 <__lo0bits>
 800827c:	9900      	ldr	r1, [sp, #0]
 800827e:	b1f0      	cbz	r0, 80082be <__d2b+0x72>
 8008280:	9a01      	ldr	r2, [sp, #4]
 8008282:	f1c0 0320 	rsb	r3, r0, #32
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	430b      	orrs	r3, r1
 800828c:	40c2      	lsrs	r2, r0
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	9201      	str	r2, [sp, #4]
 8008292:	9b01      	ldr	r3, [sp, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	bf14      	ite	ne
 8008298:	2102      	movne	r1, #2
 800829a:	2101      	moveq	r1, #1
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	6139      	str	r1, [r7, #16]
 80082a0:	b1c4      	cbz	r4, 80082d4 <__d2b+0x88>
 80082a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80082a6:	4404      	add	r4, r0
 80082a8:	6034      	str	r4, [r6, #0]
 80082aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082ae:	6028      	str	r0, [r5, #0]
 80082b0:	4638      	mov	r0, r7
 80082b2:	b002      	add	sp, #8
 80082b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80082bc:	e7d5      	b.n	800826a <__d2b+0x1e>
 80082be:	6179      	str	r1, [r7, #20]
 80082c0:	e7e7      	b.n	8008292 <__d2b+0x46>
 80082c2:	a801      	add	r0, sp, #4
 80082c4:	f7ff fd64 	bl	8007d90 <__lo0bits>
 80082c8:	2101      	movs	r1, #1
 80082ca:	9b01      	ldr	r3, [sp, #4]
 80082cc:	6139      	str	r1, [r7, #16]
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	3020      	adds	r0, #32
 80082d2:	e7e5      	b.n	80082a0 <__d2b+0x54>
 80082d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80082dc:	6030      	str	r0, [r6, #0]
 80082de:	6918      	ldr	r0, [r3, #16]
 80082e0:	f7ff fd37 	bl	8007d52 <__hi0bits>
 80082e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80082e8:	e7e1      	b.n	80082ae <__d2b+0x62>

080082ea <__ratio>:
 80082ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ee:	4688      	mov	r8, r1
 80082f0:	4669      	mov	r1, sp
 80082f2:	4681      	mov	r9, r0
 80082f4:	f7ff ff58 	bl	80081a8 <__b2d>
 80082f8:	468b      	mov	fp, r1
 80082fa:	4606      	mov	r6, r0
 80082fc:	460f      	mov	r7, r1
 80082fe:	4640      	mov	r0, r8
 8008300:	a901      	add	r1, sp, #4
 8008302:	f7ff ff51 	bl	80081a8 <__b2d>
 8008306:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800830a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800830e:	460d      	mov	r5, r1
 8008310:	eba3 0c02 	sub.w	ip, r3, r2
 8008314:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800831e:	2b00      	cmp	r3, #0
 8008320:	bfd5      	itete	le
 8008322:	460a      	movle	r2, r1
 8008324:	463a      	movgt	r2, r7
 8008326:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800832a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800832e:	bfd8      	it	le
 8008330:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008334:	462b      	mov	r3, r5
 8008336:	4602      	mov	r2, r0
 8008338:	4659      	mov	r1, fp
 800833a:	4630      	mov	r0, r6
 800833c:	f7f8 fa0e 	bl	800075c <__aeabi_ddiv>
 8008340:	b003      	add	sp, #12
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008346 <__copybits>:
 8008346:	3901      	subs	r1, #1
 8008348:	b510      	push	{r4, lr}
 800834a:	1149      	asrs	r1, r1, #5
 800834c:	6914      	ldr	r4, [r2, #16]
 800834e:	3101      	adds	r1, #1
 8008350:	f102 0314 	add.w	r3, r2, #20
 8008354:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008358:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800835c:	42a3      	cmp	r3, r4
 800835e:	4602      	mov	r2, r0
 8008360:	d303      	bcc.n	800836a <__copybits+0x24>
 8008362:	2300      	movs	r3, #0
 8008364:	428a      	cmp	r2, r1
 8008366:	d305      	bcc.n	8008374 <__copybits+0x2e>
 8008368:	bd10      	pop	{r4, pc}
 800836a:	f853 2b04 	ldr.w	r2, [r3], #4
 800836e:	f840 2b04 	str.w	r2, [r0], #4
 8008372:	e7f3      	b.n	800835c <__copybits+0x16>
 8008374:	f842 3b04 	str.w	r3, [r2], #4
 8008378:	e7f4      	b.n	8008364 <__copybits+0x1e>

0800837a <__any_on>:
 800837a:	f100 0214 	add.w	r2, r0, #20
 800837e:	6900      	ldr	r0, [r0, #16]
 8008380:	114b      	asrs	r3, r1, #5
 8008382:	4298      	cmp	r0, r3
 8008384:	b510      	push	{r4, lr}
 8008386:	db11      	blt.n	80083ac <__any_on+0x32>
 8008388:	dd0a      	ble.n	80083a0 <__any_on+0x26>
 800838a:	f011 011f 	ands.w	r1, r1, #31
 800838e:	d007      	beq.n	80083a0 <__any_on+0x26>
 8008390:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008394:	fa24 f001 	lsr.w	r0, r4, r1
 8008398:	fa00 f101 	lsl.w	r1, r0, r1
 800839c:	428c      	cmp	r4, r1
 800839e:	d10b      	bne.n	80083b8 <__any_on+0x3e>
 80083a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d803      	bhi.n	80083b0 <__any_on+0x36>
 80083a8:	2000      	movs	r0, #0
 80083aa:	bd10      	pop	{r4, pc}
 80083ac:	4603      	mov	r3, r0
 80083ae:	e7f7      	b.n	80083a0 <__any_on+0x26>
 80083b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083b4:	2900      	cmp	r1, #0
 80083b6:	d0f5      	beq.n	80083a4 <__any_on+0x2a>
 80083b8:	2001      	movs	r0, #1
 80083ba:	e7f6      	b.n	80083aa <__any_on+0x30>

080083bc <_calloc_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	fb02 f401 	mul.w	r4, r2, r1
 80083c2:	4621      	mov	r1, r4
 80083c4:	f000 f854 	bl	8008470 <_malloc_r>
 80083c8:	4605      	mov	r5, r0
 80083ca:	b118      	cbz	r0, 80083d4 <_calloc_r+0x18>
 80083cc:	4622      	mov	r2, r4
 80083ce:	2100      	movs	r1, #0
 80083d0:	f7fc fc4a 	bl	8004c68 <memset>
 80083d4:	4628      	mov	r0, r5
 80083d6:	bd38      	pop	{r3, r4, r5, pc}

080083d8 <_free_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4605      	mov	r5, r0
 80083dc:	2900      	cmp	r1, #0
 80083de:	d043      	beq.n	8008468 <_free_r+0x90>
 80083e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e4:	1f0c      	subs	r4, r1, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bfb8      	it	lt
 80083ea:	18e4      	addlt	r4, r4, r3
 80083ec:	f000 fdbf 	bl	8008f6e <__malloc_lock>
 80083f0:	4a1e      	ldr	r2, [pc, #120]	; (800846c <_free_r+0x94>)
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	4610      	mov	r0, r2
 80083f6:	b933      	cbnz	r3, 8008406 <_free_r+0x2e>
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	6014      	str	r4, [r2, #0]
 80083fc:	4628      	mov	r0, r5
 80083fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008402:	f000 bdb5 	b.w	8008f70 <__malloc_unlock>
 8008406:	42a3      	cmp	r3, r4
 8008408:	d90b      	bls.n	8008422 <_free_r+0x4a>
 800840a:	6821      	ldr	r1, [r4, #0]
 800840c:	1862      	adds	r2, r4, r1
 800840e:	4293      	cmp	r3, r2
 8008410:	bf01      	itttt	eq
 8008412:	681a      	ldreq	r2, [r3, #0]
 8008414:	685b      	ldreq	r3, [r3, #4]
 8008416:	1852      	addeq	r2, r2, r1
 8008418:	6022      	streq	r2, [r4, #0]
 800841a:	6063      	str	r3, [r4, #4]
 800841c:	6004      	str	r4, [r0, #0]
 800841e:	e7ed      	b.n	80083fc <_free_r+0x24>
 8008420:	4613      	mov	r3, r2
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	b10a      	cbz	r2, 800842a <_free_r+0x52>
 8008426:	42a2      	cmp	r2, r4
 8008428:	d9fa      	bls.n	8008420 <_free_r+0x48>
 800842a:	6819      	ldr	r1, [r3, #0]
 800842c:	1858      	adds	r0, r3, r1
 800842e:	42a0      	cmp	r0, r4
 8008430:	d10b      	bne.n	800844a <_free_r+0x72>
 8008432:	6820      	ldr	r0, [r4, #0]
 8008434:	4401      	add	r1, r0
 8008436:	1858      	adds	r0, r3, r1
 8008438:	4282      	cmp	r2, r0
 800843a:	6019      	str	r1, [r3, #0]
 800843c:	d1de      	bne.n	80083fc <_free_r+0x24>
 800843e:	6810      	ldr	r0, [r2, #0]
 8008440:	6852      	ldr	r2, [r2, #4]
 8008442:	4401      	add	r1, r0
 8008444:	6019      	str	r1, [r3, #0]
 8008446:	605a      	str	r2, [r3, #4]
 8008448:	e7d8      	b.n	80083fc <_free_r+0x24>
 800844a:	d902      	bls.n	8008452 <_free_r+0x7a>
 800844c:	230c      	movs	r3, #12
 800844e:	602b      	str	r3, [r5, #0]
 8008450:	e7d4      	b.n	80083fc <_free_r+0x24>
 8008452:	6820      	ldr	r0, [r4, #0]
 8008454:	1821      	adds	r1, r4, r0
 8008456:	428a      	cmp	r2, r1
 8008458:	bf01      	itttt	eq
 800845a:	6811      	ldreq	r1, [r2, #0]
 800845c:	6852      	ldreq	r2, [r2, #4]
 800845e:	1809      	addeq	r1, r1, r0
 8008460:	6021      	streq	r1, [r4, #0]
 8008462:	6062      	str	r2, [r4, #4]
 8008464:	605c      	str	r4, [r3, #4]
 8008466:	e7c9      	b.n	80083fc <_free_r+0x24>
 8008468:	bd38      	pop	{r3, r4, r5, pc}
 800846a:	bf00      	nop
 800846c:	200003f4 	.word	0x200003f4

08008470 <_malloc_r>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	1ccd      	adds	r5, r1, #3
 8008474:	f025 0503 	bic.w	r5, r5, #3
 8008478:	3508      	adds	r5, #8
 800847a:	2d0c      	cmp	r5, #12
 800847c:	bf38      	it	cc
 800847e:	250c      	movcc	r5, #12
 8008480:	2d00      	cmp	r5, #0
 8008482:	4606      	mov	r6, r0
 8008484:	db01      	blt.n	800848a <_malloc_r+0x1a>
 8008486:	42a9      	cmp	r1, r5
 8008488:	d903      	bls.n	8008492 <_malloc_r+0x22>
 800848a:	230c      	movs	r3, #12
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	2000      	movs	r0, #0
 8008490:	bd70      	pop	{r4, r5, r6, pc}
 8008492:	f000 fd6c 	bl	8008f6e <__malloc_lock>
 8008496:	4a21      	ldr	r2, [pc, #132]	; (800851c <_malloc_r+0xac>)
 8008498:	6814      	ldr	r4, [r2, #0]
 800849a:	4621      	mov	r1, r4
 800849c:	b991      	cbnz	r1, 80084c4 <_malloc_r+0x54>
 800849e:	4c20      	ldr	r4, [pc, #128]	; (8008520 <_malloc_r+0xb0>)
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	b91b      	cbnz	r3, 80084ac <_malloc_r+0x3c>
 80084a4:	4630      	mov	r0, r6
 80084a6:	f000 facd 	bl	8008a44 <_sbrk_r>
 80084aa:	6020      	str	r0, [r4, #0]
 80084ac:	4629      	mov	r1, r5
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 fac8 	bl	8008a44 <_sbrk_r>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d124      	bne.n	8008502 <_malloc_r+0x92>
 80084b8:	230c      	movs	r3, #12
 80084ba:	4630      	mov	r0, r6
 80084bc:	6033      	str	r3, [r6, #0]
 80084be:	f000 fd57 	bl	8008f70 <__malloc_unlock>
 80084c2:	e7e4      	b.n	800848e <_malloc_r+0x1e>
 80084c4:	680b      	ldr	r3, [r1, #0]
 80084c6:	1b5b      	subs	r3, r3, r5
 80084c8:	d418      	bmi.n	80084fc <_malloc_r+0x8c>
 80084ca:	2b0b      	cmp	r3, #11
 80084cc:	d90f      	bls.n	80084ee <_malloc_r+0x7e>
 80084ce:	600b      	str	r3, [r1, #0]
 80084d0:	18cc      	adds	r4, r1, r3
 80084d2:	50cd      	str	r5, [r1, r3]
 80084d4:	4630      	mov	r0, r6
 80084d6:	f000 fd4b 	bl	8008f70 <__malloc_unlock>
 80084da:	f104 000b 	add.w	r0, r4, #11
 80084de:	1d23      	adds	r3, r4, #4
 80084e0:	f020 0007 	bic.w	r0, r0, #7
 80084e4:	1ac3      	subs	r3, r0, r3
 80084e6:	d0d3      	beq.n	8008490 <_malloc_r+0x20>
 80084e8:	425a      	negs	r2, r3
 80084ea:	50e2      	str	r2, [r4, r3]
 80084ec:	e7d0      	b.n	8008490 <_malloc_r+0x20>
 80084ee:	684b      	ldr	r3, [r1, #4]
 80084f0:	428c      	cmp	r4, r1
 80084f2:	bf16      	itet	ne
 80084f4:	6063      	strne	r3, [r4, #4]
 80084f6:	6013      	streq	r3, [r2, #0]
 80084f8:	460c      	movne	r4, r1
 80084fa:	e7eb      	b.n	80084d4 <_malloc_r+0x64>
 80084fc:	460c      	mov	r4, r1
 80084fe:	6849      	ldr	r1, [r1, #4]
 8008500:	e7cc      	b.n	800849c <_malloc_r+0x2c>
 8008502:	1cc4      	adds	r4, r0, #3
 8008504:	f024 0403 	bic.w	r4, r4, #3
 8008508:	42a0      	cmp	r0, r4
 800850a:	d005      	beq.n	8008518 <_malloc_r+0xa8>
 800850c:	1a21      	subs	r1, r4, r0
 800850e:	4630      	mov	r0, r6
 8008510:	f000 fa98 	bl	8008a44 <_sbrk_r>
 8008514:	3001      	adds	r0, #1
 8008516:	d0cf      	beq.n	80084b8 <_malloc_r+0x48>
 8008518:	6025      	str	r5, [r4, #0]
 800851a:	e7db      	b.n	80084d4 <_malloc_r+0x64>
 800851c:	200003f4 	.word	0x200003f4
 8008520:	200003f8 	.word	0x200003f8

08008524 <__ssputs_r>:
 8008524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008528:	688e      	ldr	r6, [r1, #8]
 800852a:	4682      	mov	sl, r0
 800852c:	429e      	cmp	r6, r3
 800852e:	460c      	mov	r4, r1
 8008530:	4690      	mov	r8, r2
 8008532:	4699      	mov	r9, r3
 8008534:	d837      	bhi.n	80085a6 <__ssputs_r+0x82>
 8008536:	898a      	ldrh	r2, [r1, #12]
 8008538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800853c:	d031      	beq.n	80085a2 <__ssputs_r+0x7e>
 800853e:	2302      	movs	r3, #2
 8008540:	6825      	ldr	r5, [r4, #0]
 8008542:	6909      	ldr	r1, [r1, #16]
 8008544:	1a6f      	subs	r7, r5, r1
 8008546:	6965      	ldr	r5, [r4, #20]
 8008548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800854c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008550:	f109 0301 	add.w	r3, r9, #1
 8008554:	443b      	add	r3, r7
 8008556:	429d      	cmp	r5, r3
 8008558:	bf38      	it	cc
 800855a:	461d      	movcc	r5, r3
 800855c:	0553      	lsls	r3, r2, #21
 800855e:	d530      	bpl.n	80085c2 <__ssputs_r+0x9e>
 8008560:	4629      	mov	r1, r5
 8008562:	f7ff ff85 	bl	8008470 <_malloc_r>
 8008566:	4606      	mov	r6, r0
 8008568:	b950      	cbnz	r0, 8008580 <__ssputs_r+0x5c>
 800856a:	230c      	movs	r3, #12
 800856c:	f04f 30ff 	mov.w	r0, #4294967295
 8008570:	f8ca 3000 	str.w	r3, [sl]
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008580:	463a      	mov	r2, r7
 8008582:	6921      	ldr	r1, [r4, #16]
 8008584:	f7ff fb16 	bl	8007bb4 <memcpy>
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800858e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008592:	81a3      	strh	r3, [r4, #12]
 8008594:	6126      	str	r6, [r4, #16]
 8008596:	443e      	add	r6, r7
 8008598:	6026      	str	r6, [r4, #0]
 800859a:	464e      	mov	r6, r9
 800859c:	6165      	str	r5, [r4, #20]
 800859e:	1bed      	subs	r5, r5, r7
 80085a0:	60a5      	str	r5, [r4, #8]
 80085a2:	454e      	cmp	r6, r9
 80085a4:	d900      	bls.n	80085a8 <__ssputs_r+0x84>
 80085a6:	464e      	mov	r6, r9
 80085a8:	4632      	mov	r2, r6
 80085aa:	4641      	mov	r1, r8
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	f000 fcc5 	bl	8008f3c <memmove>
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	2000      	movs	r0, #0
 80085b6:	1b9b      	subs	r3, r3, r6
 80085b8:	60a3      	str	r3, [r4, #8]
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	441e      	add	r6, r3
 80085be:	6026      	str	r6, [r4, #0]
 80085c0:	e7dc      	b.n	800857c <__ssputs_r+0x58>
 80085c2:	462a      	mov	r2, r5
 80085c4:	f000 fcd5 	bl	8008f72 <_realloc_r>
 80085c8:	4606      	mov	r6, r0
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d1e2      	bne.n	8008594 <__ssputs_r+0x70>
 80085ce:	6921      	ldr	r1, [r4, #16]
 80085d0:	4650      	mov	r0, sl
 80085d2:	f7ff ff01 	bl	80083d8 <_free_r>
 80085d6:	e7c8      	b.n	800856a <__ssputs_r+0x46>

080085d8 <_svfiprintf_r>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	461d      	mov	r5, r3
 80085de:	898b      	ldrh	r3, [r1, #12]
 80085e0:	b09d      	sub	sp, #116	; 0x74
 80085e2:	061f      	lsls	r7, r3, #24
 80085e4:	4680      	mov	r8, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	4616      	mov	r6, r2
 80085ea:	d50f      	bpl.n	800860c <_svfiprintf_r+0x34>
 80085ec:	690b      	ldr	r3, [r1, #16]
 80085ee:	b96b      	cbnz	r3, 800860c <_svfiprintf_r+0x34>
 80085f0:	2140      	movs	r1, #64	; 0x40
 80085f2:	f7ff ff3d 	bl	8008470 <_malloc_r>
 80085f6:	6020      	str	r0, [r4, #0]
 80085f8:	6120      	str	r0, [r4, #16]
 80085fa:	b928      	cbnz	r0, 8008608 <_svfiprintf_r+0x30>
 80085fc:	230c      	movs	r3, #12
 80085fe:	f8c8 3000 	str.w	r3, [r8]
 8008602:	f04f 30ff 	mov.w	r0, #4294967295
 8008606:	e0c8      	b.n	800879a <_svfiprintf_r+0x1c2>
 8008608:	2340      	movs	r3, #64	; 0x40
 800860a:	6163      	str	r3, [r4, #20]
 800860c:	2300      	movs	r3, #0
 800860e:	9309      	str	r3, [sp, #36]	; 0x24
 8008610:	2320      	movs	r3, #32
 8008612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008616:	2330      	movs	r3, #48	; 0x30
 8008618:	f04f 0b01 	mov.w	fp, #1
 800861c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008620:	9503      	str	r5, [sp, #12]
 8008622:	4637      	mov	r7, r6
 8008624:	463d      	mov	r5, r7
 8008626:	f815 3b01 	ldrb.w	r3, [r5], #1
 800862a:	b10b      	cbz	r3, 8008630 <_svfiprintf_r+0x58>
 800862c:	2b25      	cmp	r3, #37	; 0x25
 800862e:	d13e      	bne.n	80086ae <_svfiprintf_r+0xd6>
 8008630:	ebb7 0a06 	subs.w	sl, r7, r6
 8008634:	d00b      	beq.n	800864e <_svfiprintf_r+0x76>
 8008636:	4653      	mov	r3, sl
 8008638:	4632      	mov	r2, r6
 800863a:	4621      	mov	r1, r4
 800863c:	4640      	mov	r0, r8
 800863e:	f7ff ff71 	bl	8008524 <__ssputs_r>
 8008642:	3001      	adds	r0, #1
 8008644:	f000 80a4 	beq.w	8008790 <_svfiprintf_r+0x1b8>
 8008648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864a:	4453      	add	r3, sl
 800864c:	9309      	str	r3, [sp, #36]	; 0x24
 800864e:	783b      	ldrb	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 809d 	beq.w	8008790 <_svfiprintf_r+0x1b8>
 8008656:	2300      	movs	r3, #0
 8008658:	f04f 32ff 	mov.w	r2, #4294967295
 800865c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008668:	931a      	str	r3, [sp, #104]	; 0x68
 800866a:	462f      	mov	r7, r5
 800866c:	2205      	movs	r2, #5
 800866e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008672:	4850      	ldr	r0, [pc, #320]	; (80087b4 <_svfiprintf_r+0x1dc>)
 8008674:	f7ff fa90 	bl	8007b98 <memchr>
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	b9d0      	cbnz	r0, 80086b2 <_svfiprintf_r+0xda>
 800867c:	06d9      	lsls	r1, r3, #27
 800867e:	bf44      	itt	mi
 8008680:	2220      	movmi	r2, #32
 8008682:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008686:	071a      	lsls	r2, r3, #28
 8008688:	bf44      	itt	mi
 800868a:	222b      	movmi	r2, #43	; 0x2b
 800868c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008690:	782a      	ldrb	r2, [r5, #0]
 8008692:	2a2a      	cmp	r2, #42	; 0x2a
 8008694:	d015      	beq.n	80086c2 <_svfiprintf_r+0xea>
 8008696:	462f      	mov	r7, r5
 8008698:	2000      	movs	r0, #0
 800869a:	250a      	movs	r5, #10
 800869c:	9a07      	ldr	r2, [sp, #28]
 800869e:	4639      	mov	r1, r7
 80086a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a4:	3b30      	subs	r3, #48	; 0x30
 80086a6:	2b09      	cmp	r3, #9
 80086a8:	d94d      	bls.n	8008746 <_svfiprintf_r+0x16e>
 80086aa:	b1b8      	cbz	r0, 80086dc <_svfiprintf_r+0x104>
 80086ac:	e00f      	b.n	80086ce <_svfiprintf_r+0xf6>
 80086ae:	462f      	mov	r7, r5
 80086b0:	e7b8      	b.n	8008624 <_svfiprintf_r+0x4c>
 80086b2:	4a40      	ldr	r2, [pc, #256]	; (80087b4 <_svfiprintf_r+0x1dc>)
 80086b4:	463d      	mov	r5, r7
 80086b6:	1a80      	subs	r0, r0, r2
 80086b8:	fa0b f000 	lsl.w	r0, fp, r0
 80086bc:	4318      	orrs	r0, r3
 80086be:	9004      	str	r0, [sp, #16]
 80086c0:	e7d3      	b.n	800866a <_svfiprintf_r+0x92>
 80086c2:	9a03      	ldr	r2, [sp, #12]
 80086c4:	1d11      	adds	r1, r2, #4
 80086c6:	6812      	ldr	r2, [r2, #0]
 80086c8:	9103      	str	r1, [sp, #12]
 80086ca:	2a00      	cmp	r2, #0
 80086cc:	db01      	blt.n	80086d2 <_svfiprintf_r+0xfa>
 80086ce:	9207      	str	r2, [sp, #28]
 80086d0:	e004      	b.n	80086dc <_svfiprintf_r+0x104>
 80086d2:	4252      	negs	r2, r2
 80086d4:	f043 0302 	orr.w	r3, r3, #2
 80086d8:	9207      	str	r2, [sp, #28]
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	783b      	ldrb	r3, [r7, #0]
 80086de:	2b2e      	cmp	r3, #46	; 0x2e
 80086e0:	d10c      	bne.n	80086fc <_svfiprintf_r+0x124>
 80086e2:	787b      	ldrb	r3, [r7, #1]
 80086e4:	2b2a      	cmp	r3, #42	; 0x2a
 80086e6:	d133      	bne.n	8008750 <_svfiprintf_r+0x178>
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	3702      	adds	r7, #2
 80086ec:	1d1a      	adds	r2, r3, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	9203      	str	r2, [sp, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfb8      	it	lt
 80086f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	4d2e      	ldr	r5, [pc, #184]	; (80087b8 <_svfiprintf_r+0x1e0>)
 80086fe:	2203      	movs	r2, #3
 8008700:	7839      	ldrb	r1, [r7, #0]
 8008702:	4628      	mov	r0, r5
 8008704:	f7ff fa48 	bl	8007b98 <memchr>
 8008708:	b138      	cbz	r0, 800871a <_svfiprintf_r+0x142>
 800870a:	2340      	movs	r3, #64	; 0x40
 800870c:	1b40      	subs	r0, r0, r5
 800870e:	fa03 f000 	lsl.w	r0, r3, r0
 8008712:	9b04      	ldr	r3, [sp, #16]
 8008714:	3701      	adds	r7, #1
 8008716:	4303      	orrs	r3, r0
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	7839      	ldrb	r1, [r7, #0]
 800871c:	2206      	movs	r2, #6
 800871e:	4827      	ldr	r0, [pc, #156]	; (80087bc <_svfiprintf_r+0x1e4>)
 8008720:	1c7e      	adds	r6, r7, #1
 8008722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008726:	f7ff fa37 	bl	8007b98 <memchr>
 800872a:	2800      	cmp	r0, #0
 800872c:	d038      	beq.n	80087a0 <_svfiprintf_r+0x1c8>
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <_svfiprintf_r+0x1e8>)
 8008730:	bb13      	cbnz	r3, 8008778 <_svfiprintf_r+0x1a0>
 8008732:	9b03      	ldr	r3, [sp, #12]
 8008734:	3307      	adds	r3, #7
 8008736:	f023 0307 	bic.w	r3, r3, #7
 800873a:	3308      	adds	r3, #8
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008740:	444b      	add	r3, r9
 8008742:	9309      	str	r3, [sp, #36]	; 0x24
 8008744:	e76d      	b.n	8008622 <_svfiprintf_r+0x4a>
 8008746:	fb05 3202 	mla	r2, r5, r2, r3
 800874a:	2001      	movs	r0, #1
 800874c:	460f      	mov	r7, r1
 800874e:	e7a6      	b.n	800869e <_svfiprintf_r+0xc6>
 8008750:	2300      	movs	r3, #0
 8008752:	250a      	movs	r5, #10
 8008754:	4619      	mov	r1, r3
 8008756:	3701      	adds	r7, #1
 8008758:	9305      	str	r3, [sp, #20]
 800875a:	4638      	mov	r0, r7
 800875c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008760:	3a30      	subs	r2, #48	; 0x30
 8008762:	2a09      	cmp	r2, #9
 8008764:	d903      	bls.n	800876e <_svfiprintf_r+0x196>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0c8      	beq.n	80086fc <_svfiprintf_r+0x124>
 800876a:	9105      	str	r1, [sp, #20]
 800876c:	e7c6      	b.n	80086fc <_svfiprintf_r+0x124>
 800876e:	fb05 2101 	mla	r1, r5, r1, r2
 8008772:	2301      	movs	r3, #1
 8008774:	4607      	mov	r7, r0
 8008776:	e7f0      	b.n	800875a <_svfiprintf_r+0x182>
 8008778:	ab03      	add	r3, sp, #12
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	4622      	mov	r2, r4
 800877e:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <_svfiprintf_r+0x1ec>)
 8008780:	a904      	add	r1, sp, #16
 8008782:	4640      	mov	r0, r8
 8008784:	f7fc fb0a 	bl	8004d9c <_printf_float>
 8008788:	f1b0 3fff 	cmp.w	r0, #4294967295
 800878c:	4681      	mov	r9, r0
 800878e:	d1d6      	bne.n	800873e <_svfiprintf_r+0x166>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	065b      	lsls	r3, r3, #25
 8008794:	f53f af35 	bmi.w	8008602 <_svfiprintf_r+0x2a>
 8008798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800879a:	b01d      	add	sp, #116	; 0x74
 800879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a0:	ab03      	add	r3, sp, #12
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	4622      	mov	r2, r4
 80087a6:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <_svfiprintf_r+0x1ec>)
 80087a8:	a904      	add	r1, sp, #16
 80087aa:	4640      	mov	r0, r8
 80087ac:	f7fc fda2 	bl	80052f4 <_printf_i>
 80087b0:	e7ea      	b.n	8008788 <_svfiprintf_r+0x1b0>
 80087b2:	bf00      	nop
 80087b4:	08009294 	.word	0x08009294
 80087b8:	0800929a 	.word	0x0800929a
 80087bc:	0800929e 	.word	0x0800929e
 80087c0:	08004d9d 	.word	0x08004d9d
 80087c4:	08008525 	.word	0x08008525

080087c8 <__sfputc_r>:
 80087c8:	6893      	ldr	r3, [r2, #8]
 80087ca:	b410      	push	{r4}
 80087cc:	3b01      	subs	r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	6093      	str	r3, [r2, #8]
 80087d2:	da07      	bge.n	80087e4 <__sfputc_r+0x1c>
 80087d4:	6994      	ldr	r4, [r2, #24]
 80087d6:	42a3      	cmp	r3, r4
 80087d8:	db01      	blt.n	80087de <__sfputc_r+0x16>
 80087da:	290a      	cmp	r1, #10
 80087dc:	d102      	bne.n	80087e4 <__sfputc_r+0x1c>
 80087de:	bc10      	pop	{r4}
 80087e0:	f000 b996 	b.w	8008b10 <__swbuf_r>
 80087e4:	6813      	ldr	r3, [r2, #0]
 80087e6:	1c58      	adds	r0, r3, #1
 80087e8:	6010      	str	r0, [r2, #0]
 80087ea:	7019      	strb	r1, [r3, #0]
 80087ec:	4608      	mov	r0, r1
 80087ee:	bc10      	pop	{r4}
 80087f0:	4770      	bx	lr

080087f2 <__sfputs_r>:
 80087f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f4:	4606      	mov	r6, r0
 80087f6:	460f      	mov	r7, r1
 80087f8:	4614      	mov	r4, r2
 80087fa:	18d5      	adds	r5, r2, r3
 80087fc:	42ac      	cmp	r4, r5
 80087fe:	d101      	bne.n	8008804 <__sfputs_r+0x12>
 8008800:	2000      	movs	r0, #0
 8008802:	e007      	b.n	8008814 <__sfputs_r+0x22>
 8008804:	463a      	mov	r2, r7
 8008806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff ffdc 	bl	80087c8 <__sfputc_r>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d1f3      	bne.n	80087fc <__sfputs_r+0xa>
 8008814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008818 <_vfiprintf_r>:
 8008818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	460c      	mov	r4, r1
 800881e:	b09d      	sub	sp, #116	; 0x74
 8008820:	4617      	mov	r7, r2
 8008822:	461d      	mov	r5, r3
 8008824:	4606      	mov	r6, r0
 8008826:	b118      	cbz	r0, 8008830 <_vfiprintf_r+0x18>
 8008828:	6983      	ldr	r3, [r0, #24]
 800882a:	b90b      	cbnz	r3, 8008830 <_vfiprintf_r+0x18>
 800882c:	f7fe fdd4 	bl	80073d8 <__sinit>
 8008830:	4b7c      	ldr	r3, [pc, #496]	; (8008a24 <_vfiprintf_r+0x20c>)
 8008832:	429c      	cmp	r4, r3
 8008834:	d158      	bne.n	80088e8 <_vfiprintf_r+0xd0>
 8008836:	6874      	ldr	r4, [r6, #4]
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	0718      	lsls	r0, r3, #28
 800883c:	d55e      	bpl.n	80088fc <_vfiprintf_r+0xe4>
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d05b      	beq.n	80088fc <_vfiprintf_r+0xe4>
 8008844:	2300      	movs	r3, #0
 8008846:	9309      	str	r3, [sp, #36]	; 0x24
 8008848:	2320      	movs	r3, #32
 800884a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800884e:	2330      	movs	r3, #48	; 0x30
 8008850:	f04f 0b01 	mov.w	fp, #1
 8008854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008858:	9503      	str	r5, [sp, #12]
 800885a:	46b8      	mov	r8, r7
 800885c:	4645      	mov	r5, r8
 800885e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008862:	b10b      	cbz	r3, 8008868 <_vfiprintf_r+0x50>
 8008864:	2b25      	cmp	r3, #37	; 0x25
 8008866:	d154      	bne.n	8008912 <_vfiprintf_r+0xfa>
 8008868:	ebb8 0a07 	subs.w	sl, r8, r7
 800886c:	d00b      	beq.n	8008886 <_vfiprintf_r+0x6e>
 800886e:	4653      	mov	r3, sl
 8008870:	463a      	mov	r2, r7
 8008872:	4621      	mov	r1, r4
 8008874:	4630      	mov	r0, r6
 8008876:	f7ff ffbc 	bl	80087f2 <__sfputs_r>
 800887a:	3001      	adds	r0, #1
 800887c:	f000 80c2 	beq.w	8008a04 <_vfiprintf_r+0x1ec>
 8008880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008882:	4453      	add	r3, sl
 8008884:	9309      	str	r3, [sp, #36]	; 0x24
 8008886:	f898 3000 	ldrb.w	r3, [r8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 80ba 	beq.w	8008a04 <_vfiprintf_r+0x1ec>
 8008890:	2300      	movs	r3, #0
 8008892:	f04f 32ff 	mov.w	r2, #4294967295
 8008896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	9307      	str	r3, [sp, #28]
 800889e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088a2:	931a      	str	r3, [sp, #104]	; 0x68
 80088a4:	46a8      	mov	r8, r5
 80088a6:	2205      	movs	r2, #5
 80088a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80088ac:	485e      	ldr	r0, [pc, #376]	; (8008a28 <_vfiprintf_r+0x210>)
 80088ae:	f7ff f973 	bl	8007b98 <memchr>
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	bb78      	cbnz	r0, 8008916 <_vfiprintf_r+0xfe>
 80088b6:	06d9      	lsls	r1, r3, #27
 80088b8:	bf44      	itt	mi
 80088ba:	2220      	movmi	r2, #32
 80088bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088c0:	071a      	lsls	r2, r3, #28
 80088c2:	bf44      	itt	mi
 80088c4:	222b      	movmi	r2, #43	; 0x2b
 80088c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088ca:	782a      	ldrb	r2, [r5, #0]
 80088cc:	2a2a      	cmp	r2, #42	; 0x2a
 80088ce:	d02a      	beq.n	8008926 <_vfiprintf_r+0x10e>
 80088d0:	46a8      	mov	r8, r5
 80088d2:	2000      	movs	r0, #0
 80088d4:	250a      	movs	r5, #10
 80088d6:	9a07      	ldr	r2, [sp, #28]
 80088d8:	4641      	mov	r1, r8
 80088da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088de:	3b30      	subs	r3, #48	; 0x30
 80088e0:	2b09      	cmp	r3, #9
 80088e2:	d969      	bls.n	80089b8 <_vfiprintf_r+0x1a0>
 80088e4:	b360      	cbz	r0, 8008940 <_vfiprintf_r+0x128>
 80088e6:	e024      	b.n	8008932 <_vfiprintf_r+0x11a>
 80088e8:	4b50      	ldr	r3, [pc, #320]	; (8008a2c <_vfiprintf_r+0x214>)
 80088ea:	429c      	cmp	r4, r3
 80088ec:	d101      	bne.n	80088f2 <_vfiprintf_r+0xda>
 80088ee:	68b4      	ldr	r4, [r6, #8]
 80088f0:	e7a2      	b.n	8008838 <_vfiprintf_r+0x20>
 80088f2:	4b4f      	ldr	r3, [pc, #316]	; (8008a30 <_vfiprintf_r+0x218>)
 80088f4:	429c      	cmp	r4, r3
 80088f6:	bf08      	it	eq
 80088f8:	68f4      	ldreq	r4, [r6, #12]
 80088fa:	e79d      	b.n	8008838 <_vfiprintf_r+0x20>
 80088fc:	4621      	mov	r1, r4
 80088fe:	4630      	mov	r0, r6
 8008900:	f000 f978 	bl	8008bf4 <__swsetup_r>
 8008904:	2800      	cmp	r0, #0
 8008906:	d09d      	beq.n	8008844 <_vfiprintf_r+0x2c>
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	b01d      	add	sp, #116	; 0x74
 800890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008912:	46a8      	mov	r8, r5
 8008914:	e7a2      	b.n	800885c <_vfiprintf_r+0x44>
 8008916:	4a44      	ldr	r2, [pc, #272]	; (8008a28 <_vfiprintf_r+0x210>)
 8008918:	4645      	mov	r5, r8
 800891a:	1a80      	subs	r0, r0, r2
 800891c:	fa0b f000 	lsl.w	r0, fp, r0
 8008920:	4318      	orrs	r0, r3
 8008922:	9004      	str	r0, [sp, #16]
 8008924:	e7be      	b.n	80088a4 <_vfiprintf_r+0x8c>
 8008926:	9a03      	ldr	r2, [sp, #12]
 8008928:	1d11      	adds	r1, r2, #4
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	9103      	str	r1, [sp, #12]
 800892e:	2a00      	cmp	r2, #0
 8008930:	db01      	blt.n	8008936 <_vfiprintf_r+0x11e>
 8008932:	9207      	str	r2, [sp, #28]
 8008934:	e004      	b.n	8008940 <_vfiprintf_r+0x128>
 8008936:	4252      	negs	r2, r2
 8008938:	f043 0302 	orr.w	r3, r3, #2
 800893c:	9207      	str	r2, [sp, #28]
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	f898 3000 	ldrb.w	r3, [r8]
 8008944:	2b2e      	cmp	r3, #46	; 0x2e
 8008946:	d10e      	bne.n	8008966 <_vfiprintf_r+0x14e>
 8008948:	f898 3001 	ldrb.w	r3, [r8, #1]
 800894c:	2b2a      	cmp	r3, #42	; 0x2a
 800894e:	d138      	bne.n	80089c2 <_vfiprintf_r+0x1aa>
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	f108 0802 	add.w	r8, r8, #2
 8008956:	1d1a      	adds	r2, r3, #4
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	9203      	str	r2, [sp, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfb8      	it	lt
 8008960:	f04f 33ff 	movlt.w	r3, #4294967295
 8008964:	9305      	str	r3, [sp, #20]
 8008966:	4d33      	ldr	r5, [pc, #204]	; (8008a34 <_vfiprintf_r+0x21c>)
 8008968:	2203      	movs	r2, #3
 800896a:	f898 1000 	ldrb.w	r1, [r8]
 800896e:	4628      	mov	r0, r5
 8008970:	f7ff f912 	bl	8007b98 <memchr>
 8008974:	b140      	cbz	r0, 8008988 <_vfiprintf_r+0x170>
 8008976:	2340      	movs	r3, #64	; 0x40
 8008978:	1b40      	subs	r0, r0, r5
 800897a:	fa03 f000 	lsl.w	r0, r3, r0
 800897e:	9b04      	ldr	r3, [sp, #16]
 8008980:	f108 0801 	add.w	r8, r8, #1
 8008984:	4303      	orrs	r3, r0
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	f898 1000 	ldrb.w	r1, [r8]
 800898c:	2206      	movs	r2, #6
 800898e:	482a      	ldr	r0, [pc, #168]	; (8008a38 <_vfiprintf_r+0x220>)
 8008990:	f108 0701 	add.w	r7, r8, #1
 8008994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008998:	f7ff f8fe 	bl	8007b98 <memchr>
 800899c:	2800      	cmp	r0, #0
 800899e:	d037      	beq.n	8008a10 <_vfiprintf_r+0x1f8>
 80089a0:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <_vfiprintf_r+0x224>)
 80089a2:	bb1b      	cbnz	r3, 80089ec <_vfiprintf_r+0x1d4>
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	3307      	adds	r3, #7
 80089a8:	f023 0307 	bic.w	r3, r3, #7
 80089ac:	3308      	adds	r3, #8
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b2:	444b      	add	r3, r9
 80089b4:	9309      	str	r3, [sp, #36]	; 0x24
 80089b6:	e750      	b.n	800885a <_vfiprintf_r+0x42>
 80089b8:	fb05 3202 	mla	r2, r5, r2, r3
 80089bc:	2001      	movs	r0, #1
 80089be:	4688      	mov	r8, r1
 80089c0:	e78a      	b.n	80088d8 <_vfiprintf_r+0xc0>
 80089c2:	2300      	movs	r3, #0
 80089c4:	250a      	movs	r5, #10
 80089c6:	4619      	mov	r1, r3
 80089c8:	f108 0801 	add.w	r8, r8, #1
 80089cc:	9305      	str	r3, [sp, #20]
 80089ce:	4640      	mov	r0, r8
 80089d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d4:	3a30      	subs	r2, #48	; 0x30
 80089d6:	2a09      	cmp	r2, #9
 80089d8:	d903      	bls.n	80089e2 <_vfiprintf_r+0x1ca>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0c3      	beq.n	8008966 <_vfiprintf_r+0x14e>
 80089de:	9105      	str	r1, [sp, #20]
 80089e0:	e7c1      	b.n	8008966 <_vfiprintf_r+0x14e>
 80089e2:	fb05 2101 	mla	r1, r5, r1, r2
 80089e6:	2301      	movs	r3, #1
 80089e8:	4680      	mov	r8, r0
 80089ea:	e7f0      	b.n	80089ce <_vfiprintf_r+0x1b6>
 80089ec:	ab03      	add	r3, sp, #12
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	4622      	mov	r2, r4
 80089f2:	4b13      	ldr	r3, [pc, #76]	; (8008a40 <_vfiprintf_r+0x228>)
 80089f4:	a904      	add	r1, sp, #16
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7fc f9d0 	bl	8004d9c <_printf_float>
 80089fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a00:	4681      	mov	r9, r0
 8008a02:	d1d5      	bne.n	80089b0 <_vfiprintf_r+0x198>
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	065b      	lsls	r3, r3, #25
 8008a08:	f53f af7e 	bmi.w	8008908 <_vfiprintf_r+0xf0>
 8008a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0e:	e77d      	b.n	800890c <_vfiprintf_r+0xf4>
 8008a10:	ab03      	add	r3, sp, #12
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	4622      	mov	r2, r4
 8008a16:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <_vfiprintf_r+0x228>)
 8008a18:	a904      	add	r1, sp, #16
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7fc fc6a 	bl	80052f4 <_printf_i>
 8008a20:	e7ec      	b.n	80089fc <_vfiprintf_r+0x1e4>
 8008a22:	bf00      	nop
 8008a24:	08009148 	.word	0x08009148
 8008a28:	08009294 	.word	0x08009294
 8008a2c:	08009168 	.word	0x08009168
 8008a30:	08009128 	.word	0x08009128
 8008a34:	0800929a 	.word	0x0800929a
 8008a38:	0800929e 	.word	0x0800929e
 8008a3c:	08004d9d 	.word	0x08004d9d
 8008a40:	080087f3 	.word	0x080087f3

08008a44 <_sbrk_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	2300      	movs	r3, #0
 8008a48:	4c05      	ldr	r4, [pc, #20]	; (8008a60 <_sbrk_r+0x1c>)
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	f7f9 fdba 	bl	80025c8 <_sbrk>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_sbrk_r+0x1a>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_sbrk_r+0x1a>
 8008a5c:	602b      	str	r3, [r5, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	200004b0 	.word	0x200004b0

08008a64 <__sread>:
 8008a64:	b510      	push	{r4, lr}
 8008a66:	460c      	mov	r4, r1
 8008a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a6c:	f000 faa8 	bl	8008fc0 <_read_r>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	bfab      	itete	ge
 8008a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a76:	89a3      	ldrhlt	r3, [r4, #12]
 8008a78:	181b      	addge	r3, r3, r0
 8008a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a7e:	bfac      	ite	ge
 8008a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a82:	81a3      	strhlt	r3, [r4, #12]
 8008a84:	bd10      	pop	{r4, pc}

08008a86 <__swrite>:
 8008a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8a:	461f      	mov	r7, r3
 8008a8c:	898b      	ldrh	r3, [r1, #12]
 8008a8e:	4605      	mov	r5, r0
 8008a90:	05db      	lsls	r3, r3, #23
 8008a92:	460c      	mov	r4, r1
 8008a94:	4616      	mov	r6, r2
 8008a96:	d505      	bpl.n	8008aa4 <__swrite+0x1e>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa0:	f000 f9d6 	bl	8008e50 <_lseek_r>
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	4632      	mov	r2, r6
 8008aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aac:	81a3      	strh	r3, [r4, #12]
 8008aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab2:	463b      	mov	r3, r7
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aba:	f000 b889 	b.w	8008bd0 <_write_r>

08008abe <__sseek>:
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac6:	f000 f9c3 	bl	8008e50 <_lseek_r>
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	bf15      	itete	ne
 8008ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ada:	81a3      	strheq	r3, [r4, #12]
 8008adc:	bf18      	it	ne
 8008ade:	81a3      	strhne	r3, [r4, #12]
 8008ae0:	bd10      	pop	{r4, pc}

08008ae2 <__sclose>:
 8008ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae6:	f000 b8f3 	b.w	8008cd0 <_close_r>

08008aea <strncmp>:
 8008aea:	b510      	push	{r4, lr}
 8008aec:	b16a      	cbz	r2, 8008b0a <strncmp+0x20>
 8008aee:	3901      	subs	r1, #1
 8008af0:	1884      	adds	r4, r0, r2
 8008af2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008af6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d103      	bne.n	8008b06 <strncmp+0x1c>
 8008afe:	42a0      	cmp	r0, r4
 8008b00:	d001      	beq.n	8008b06 <strncmp+0x1c>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f5      	bne.n	8008af2 <strncmp+0x8>
 8008b06:	1a98      	subs	r0, r3, r2
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	e7fc      	b.n	8008b08 <strncmp+0x1e>
	...

08008b10 <__swbuf_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	460e      	mov	r6, r1
 8008b14:	4614      	mov	r4, r2
 8008b16:	4605      	mov	r5, r0
 8008b18:	b118      	cbz	r0, 8008b22 <__swbuf_r+0x12>
 8008b1a:	6983      	ldr	r3, [r0, #24]
 8008b1c:	b90b      	cbnz	r3, 8008b22 <__swbuf_r+0x12>
 8008b1e:	f7fe fc5b 	bl	80073d8 <__sinit>
 8008b22:	4b21      	ldr	r3, [pc, #132]	; (8008ba8 <__swbuf_r+0x98>)
 8008b24:	429c      	cmp	r4, r3
 8008b26:	d12a      	bne.n	8008b7e <__swbuf_r+0x6e>
 8008b28:	686c      	ldr	r4, [r5, #4]
 8008b2a:	69a3      	ldr	r3, [r4, #24]
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	071a      	lsls	r2, r3, #28
 8008b32:	d52e      	bpl.n	8008b92 <__swbuf_r+0x82>
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	b363      	cbz	r3, 8008b92 <__swbuf_r+0x82>
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	6820      	ldr	r0, [r4, #0]
 8008b3c:	b2f6      	uxtb	r6, r6
 8008b3e:	1ac0      	subs	r0, r0, r3
 8008b40:	6963      	ldr	r3, [r4, #20]
 8008b42:	4637      	mov	r7, r6
 8008b44:	4283      	cmp	r3, r0
 8008b46:	dc04      	bgt.n	8008b52 <__swbuf_r+0x42>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 f956 	bl	8008dfc <_fflush_r>
 8008b50:	bb28      	cbnz	r0, 8008b9e <__swbuf_r+0x8e>
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	3001      	adds	r0, #1
 8008b56:	3b01      	subs	r3, #1
 8008b58:	60a3      	str	r3, [r4, #8]
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	6022      	str	r2, [r4, #0]
 8008b60:	701e      	strb	r6, [r3, #0]
 8008b62:	6963      	ldr	r3, [r4, #20]
 8008b64:	4283      	cmp	r3, r0
 8008b66:	d004      	beq.n	8008b72 <__swbuf_r+0x62>
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	07db      	lsls	r3, r3, #31
 8008b6c:	d519      	bpl.n	8008ba2 <__swbuf_r+0x92>
 8008b6e:	2e0a      	cmp	r6, #10
 8008b70:	d117      	bne.n	8008ba2 <__swbuf_r+0x92>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f941 	bl	8008dfc <_fflush_r>
 8008b7a:	b190      	cbz	r0, 8008ba2 <__swbuf_r+0x92>
 8008b7c:	e00f      	b.n	8008b9e <__swbuf_r+0x8e>
 8008b7e:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <__swbuf_r+0x9c>)
 8008b80:	429c      	cmp	r4, r3
 8008b82:	d101      	bne.n	8008b88 <__swbuf_r+0x78>
 8008b84:	68ac      	ldr	r4, [r5, #8]
 8008b86:	e7d0      	b.n	8008b2a <__swbuf_r+0x1a>
 8008b88:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <__swbuf_r+0xa0>)
 8008b8a:	429c      	cmp	r4, r3
 8008b8c:	bf08      	it	eq
 8008b8e:	68ec      	ldreq	r4, [r5, #12]
 8008b90:	e7cb      	b.n	8008b2a <__swbuf_r+0x1a>
 8008b92:	4621      	mov	r1, r4
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 f82d 	bl	8008bf4 <__swsetup_r>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0cc      	beq.n	8008b38 <__swbuf_r+0x28>
 8008b9e:	f04f 37ff 	mov.w	r7, #4294967295
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	08009148 	.word	0x08009148
 8008bac:	08009168 	.word	0x08009168
 8008bb0:	08009128 	.word	0x08009128

08008bb4 <__ascii_wctomb>:
 8008bb4:	b149      	cbz	r1, 8008bca <__ascii_wctomb+0x16>
 8008bb6:	2aff      	cmp	r2, #255	; 0xff
 8008bb8:	bf8b      	itete	hi
 8008bba:	238a      	movhi	r3, #138	; 0x8a
 8008bbc:	700a      	strbls	r2, [r1, #0]
 8008bbe:	6003      	strhi	r3, [r0, #0]
 8008bc0:	2001      	movls	r0, #1
 8008bc2:	bf88      	it	hi
 8008bc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008bc8:	4770      	bx	lr
 8008bca:	4608      	mov	r0, r1
 8008bcc:	4770      	bx	lr
	...

08008bd0 <_write_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4c05      	ldr	r4, [pc, #20]	; (8008bf0 <_write_r+0x20>)
 8008bdc:	6022      	str	r2, [r4, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f7f8 fc7c 	bl	80014dc <_write>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_write_r+0x1e>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_write_r+0x1e>
 8008bec:	602b      	str	r3, [r5, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	200004b0 	.word	0x200004b0

08008bf4 <__swsetup_r>:
 8008bf4:	4b32      	ldr	r3, [pc, #200]	; (8008cc0 <__swsetup_r+0xcc>)
 8008bf6:	b570      	push	{r4, r5, r6, lr}
 8008bf8:	681d      	ldr	r5, [r3, #0]
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	b125      	cbz	r5, 8008c0a <__swsetup_r+0x16>
 8008c00:	69ab      	ldr	r3, [r5, #24]
 8008c02:	b913      	cbnz	r3, 8008c0a <__swsetup_r+0x16>
 8008c04:	4628      	mov	r0, r5
 8008c06:	f7fe fbe7 	bl	80073d8 <__sinit>
 8008c0a:	4b2e      	ldr	r3, [pc, #184]	; (8008cc4 <__swsetup_r+0xd0>)
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	d10f      	bne.n	8008c30 <__swsetup_r+0x3c>
 8008c10:	686c      	ldr	r4, [r5, #4]
 8008c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	0715      	lsls	r5, r2, #28
 8008c1a:	d42c      	bmi.n	8008c76 <__swsetup_r+0x82>
 8008c1c:	06d0      	lsls	r0, r2, #27
 8008c1e:	d411      	bmi.n	8008c44 <__swsetup_r+0x50>
 8008c20:	2209      	movs	r2, #9
 8008c22:	6032      	str	r2, [r6, #0]
 8008c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c28:	81a3      	strh	r3, [r4, #12]
 8008c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2e:	e03e      	b.n	8008cae <__swsetup_r+0xba>
 8008c30:	4b25      	ldr	r3, [pc, #148]	; (8008cc8 <__swsetup_r+0xd4>)
 8008c32:	429c      	cmp	r4, r3
 8008c34:	d101      	bne.n	8008c3a <__swsetup_r+0x46>
 8008c36:	68ac      	ldr	r4, [r5, #8]
 8008c38:	e7eb      	b.n	8008c12 <__swsetup_r+0x1e>
 8008c3a:	4b24      	ldr	r3, [pc, #144]	; (8008ccc <__swsetup_r+0xd8>)
 8008c3c:	429c      	cmp	r4, r3
 8008c3e:	bf08      	it	eq
 8008c40:	68ec      	ldreq	r4, [r5, #12]
 8008c42:	e7e6      	b.n	8008c12 <__swsetup_r+0x1e>
 8008c44:	0751      	lsls	r1, r2, #29
 8008c46:	d512      	bpl.n	8008c6e <__swsetup_r+0x7a>
 8008c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c4a:	b141      	cbz	r1, 8008c5e <__swsetup_r+0x6a>
 8008c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c50:	4299      	cmp	r1, r3
 8008c52:	d002      	beq.n	8008c5a <__swsetup_r+0x66>
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff fbbf 	bl	80083d8 <_free_r>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	2300      	movs	r3, #0
 8008c68:	6063      	str	r3, [r4, #4]
 8008c6a:	6923      	ldr	r3, [r4, #16]
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f043 0308 	orr.w	r3, r3, #8
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	b94b      	cbnz	r3, 8008c8e <__swsetup_r+0x9a>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c84:	d003      	beq.n	8008c8e <__swsetup_r+0x9a>
 8008c86:	4621      	mov	r1, r4
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f000 f917 	bl	8008ebc <__smakebuf_r>
 8008c8e:	89a2      	ldrh	r2, [r4, #12]
 8008c90:	f012 0301 	ands.w	r3, r2, #1
 8008c94:	d00c      	beq.n	8008cb0 <__swsetup_r+0xbc>
 8008c96:	2300      	movs	r3, #0
 8008c98:	60a3      	str	r3, [r4, #8]
 8008c9a:	6963      	ldr	r3, [r4, #20]
 8008c9c:	425b      	negs	r3, r3
 8008c9e:	61a3      	str	r3, [r4, #24]
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	b953      	cbnz	r3, 8008cba <__swsetup_r+0xc6>
 8008ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008cac:	d1ba      	bne.n	8008c24 <__swsetup_r+0x30>
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	0792      	lsls	r2, r2, #30
 8008cb2:	bf58      	it	pl
 8008cb4:	6963      	ldrpl	r3, [r4, #20]
 8008cb6:	60a3      	str	r3, [r4, #8]
 8008cb8:	e7f2      	b.n	8008ca0 <__swsetup_r+0xac>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e7f7      	b.n	8008cae <__swsetup_r+0xba>
 8008cbe:	bf00      	nop
 8008cc0:	2000000c 	.word	0x2000000c
 8008cc4:	08009148 	.word	0x08009148
 8008cc8:	08009168 	.word	0x08009168
 8008ccc:	08009128 	.word	0x08009128

08008cd0 <_close_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	4c05      	ldr	r4, [pc, #20]	; (8008cec <_close_r+0x1c>)
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	f7f9 fc43 	bl	8002566 <_close>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_close_r+0x1a>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_close_r+0x1a>
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	200004b0 	.word	0x200004b0

08008cf0 <__sflush_r>:
 8008cf0:	898a      	ldrh	r2, [r1, #12]
 8008cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	0710      	lsls	r0, r2, #28
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	d458      	bmi.n	8008db0 <__sflush_r+0xc0>
 8008cfe:	684b      	ldr	r3, [r1, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	dc05      	bgt.n	8008d10 <__sflush_r+0x20>
 8008d04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	dc02      	bgt.n	8008d10 <__sflush_r+0x20>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	d0f9      	beq.n	8008d0a <__sflush_r+0x1a>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d1c:	682f      	ldr	r7, [r5, #0]
 8008d1e:	6a21      	ldr	r1, [r4, #32]
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	d032      	beq.n	8008d8a <__sflush_r+0x9a>
 8008d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	075a      	lsls	r2, r3, #29
 8008d2a:	d505      	bpl.n	8008d38 <__sflush_r+0x48>
 8008d2c:	6863      	ldr	r3, [r4, #4]
 8008d2e:	1ac0      	subs	r0, r0, r3
 8008d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d32:	b10b      	cbz	r3, 8008d38 <__sflush_r+0x48>
 8008d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d36:	1ac0      	subs	r0, r0, r3
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d3e:	6a21      	ldr	r1, [r4, #32]
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b0      	blx	r6
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	d106      	bne.n	8008d58 <__sflush_r+0x68>
 8008d4a:	6829      	ldr	r1, [r5, #0]
 8008d4c:	291d      	cmp	r1, #29
 8008d4e:	d848      	bhi.n	8008de2 <__sflush_r+0xf2>
 8008d50:	4a29      	ldr	r2, [pc, #164]	; (8008df8 <__sflush_r+0x108>)
 8008d52:	40ca      	lsrs	r2, r1
 8008d54:	07d6      	lsls	r6, r2, #31
 8008d56:	d544      	bpl.n	8008de2 <__sflush_r+0xf2>
 8008d58:	2200      	movs	r2, #0
 8008d5a:	6062      	str	r2, [r4, #4]
 8008d5c:	6922      	ldr	r2, [r4, #16]
 8008d5e:	04d9      	lsls	r1, r3, #19
 8008d60:	6022      	str	r2, [r4, #0]
 8008d62:	d504      	bpl.n	8008d6e <__sflush_r+0x7e>
 8008d64:	1c42      	adds	r2, r0, #1
 8008d66:	d101      	bne.n	8008d6c <__sflush_r+0x7c>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b903      	cbnz	r3, 8008d6e <__sflush_r+0x7e>
 8008d6c:	6560      	str	r0, [r4, #84]	; 0x54
 8008d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d70:	602f      	str	r7, [r5, #0]
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d0c9      	beq.n	8008d0a <__sflush_r+0x1a>
 8008d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d7a:	4299      	cmp	r1, r3
 8008d7c:	d002      	beq.n	8008d84 <__sflush_r+0x94>
 8008d7e:	4628      	mov	r0, r5
 8008d80:	f7ff fb2a 	bl	80083d8 <_free_r>
 8008d84:	2000      	movs	r0, #0
 8008d86:	6360      	str	r0, [r4, #52]	; 0x34
 8008d88:	e7c0      	b.n	8008d0c <__sflush_r+0x1c>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	47b0      	blx	r6
 8008d90:	1c41      	adds	r1, r0, #1
 8008d92:	d1c8      	bne.n	8008d26 <__sflush_r+0x36>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0c5      	beq.n	8008d26 <__sflush_r+0x36>
 8008d9a:	2b1d      	cmp	r3, #29
 8008d9c:	d001      	beq.n	8008da2 <__sflush_r+0xb2>
 8008d9e:	2b16      	cmp	r3, #22
 8008da0:	d101      	bne.n	8008da6 <__sflush_r+0xb6>
 8008da2:	602f      	str	r7, [r5, #0]
 8008da4:	e7b1      	b.n	8008d0a <__sflush_r+0x1a>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dac:	81a3      	strh	r3, [r4, #12]
 8008dae:	e7ad      	b.n	8008d0c <__sflush_r+0x1c>
 8008db0:	690f      	ldr	r7, [r1, #16]
 8008db2:	2f00      	cmp	r7, #0
 8008db4:	d0a9      	beq.n	8008d0a <__sflush_r+0x1a>
 8008db6:	0793      	lsls	r3, r2, #30
 8008db8:	bf18      	it	ne
 8008dba:	2300      	movne	r3, #0
 8008dbc:	680e      	ldr	r6, [r1, #0]
 8008dbe:	bf08      	it	eq
 8008dc0:	694b      	ldreq	r3, [r1, #20]
 8008dc2:	eba6 0807 	sub.w	r8, r6, r7
 8008dc6:	600f      	str	r7, [r1, #0]
 8008dc8:	608b      	str	r3, [r1, #8]
 8008dca:	f1b8 0f00 	cmp.w	r8, #0
 8008dce:	dd9c      	ble.n	8008d0a <__sflush_r+0x1a>
 8008dd0:	4643      	mov	r3, r8
 8008dd2:	463a      	mov	r2, r7
 8008dd4:	6a21      	ldr	r1, [r4, #32]
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dda:	47b0      	blx	r6
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	dc06      	bgt.n	8008dee <__sflush_r+0xfe>
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dec:	e78e      	b.n	8008d0c <__sflush_r+0x1c>
 8008dee:	4407      	add	r7, r0
 8008df0:	eba8 0800 	sub.w	r8, r8, r0
 8008df4:	e7e9      	b.n	8008dca <__sflush_r+0xda>
 8008df6:	bf00      	nop
 8008df8:	20400001 	.word	0x20400001

08008dfc <_fflush_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	690b      	ldr	r3, [r1, #16]
 8008e00:	4605      	mov	r5, r0
 8008e02:	460c      	mov	r4, r1
 8008e04:	b1db      	cbz	r3, 8008e3e <_fflush_r+0x42>
 8008e06:	b118      	cbz	r0, 8008e10 <_fflush_r+0x14>
 8008e08:	6983      	ldr	r3, [r0, #24]
 8008e0a:	b90b      	cbnz	r3, 8008e10 <_fflush_r+0x14>
 8008e0c:	f7fe fae4 	bl	80073d8 <__sinit>
 8008e10:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <_fflush_r+0x48>)
 8008e12:	429c      	cmp	r4, r3
 8008e14:	d109      	bne.n	8008e2a <_fflush_r+0x2e>
 8008e16:	686c      	ldr	r4, [r5, #4]
 8008e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e1c:	b17b      	cbz	r3, 8008e3e <_fflush_r+0x42>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4628      	mov	r0, r5
 8008e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e26:	f7ff bf63 	b.w	8008cf0 <__sflush_r>
 8008e2a:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <_fflush_r+0x4c>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	d101      	bne.n	8008e34 <_fflush_r+0x38>
 8008e30:	68ac      	ldr	r4, [r5, #8]
 8008e32:	e7f1      	b.n	8008e18 <_fflush_r+0x1c>
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <_fflush_r+0x50>)
 8008e36:	429c      	cmp	r4, r3
 8008e38:	bf08      	it	eq
 8008e3a:	68ec      	ldreq	r4, [r5, #12]
 8008e3c:	e7ec      	b.n	8008e18 <_fflush_r+0x1c>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	bd38      	pop	{r3, r4, r5, pc}
 8008e42:	bf00      	nop
 8008e44:	08009148 	.word	0x08009148
 8008e48:	08009168 	.word	0x08009168
 8008e4c:	08009128 	.word	0x08009128

08008e50 <_lseek_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4605      	mov	r5, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4c05      	ldr	r4, [pc, #20]	; (8008e70 <_lseek_r+0x20>)
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f7f9 fba5 	bl	80025ae <_lseek>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_lseek_r+0x1e>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_lseek_r+0x1e>
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	200004b0 	.word	0x200004b0

08008e74 <__swhatbuf_r>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	460e      	mov	r6, r1
 8008e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7c:	b096      	sub	sp, #88	; 0x58
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	4614      	mov	r4, r2
 8008e82:	461d      	mov	r5, r3
 8008e84:	da07      	bge.n	8008e96 <__swhatbuf_r+0x22>
 8008e86:	2300      	movs	r3, #0
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	89b3      	ldrh	r3, [r6, #12]
 8008e8c:	061a      	lsls	r2, r3, #24
 8008e8e:	d410      	bmi.n	8008eb2 <__swhatbuf_r+0x3e>
 8008e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e94:	e00e      	b.n	8008eb4 <__swhatbuf_r+0x40>
 8008e96:	466a      	mov	r2, sp
 8008e98:	f000 f8a4 	bl	8008fe4 <_fstat_r>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	dbf2      	blt.n	8008e86 <__swhatbuf_r+0x12>
 8008ea0:	9a01      	ldr	r2, [sp, #4]
 8008ea2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ea6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008eaa:	425a      	negs	r2, r3
 8008eac:	415a      	adcs	r2, r3
 8008eae:	602a      	str	r2, [r5, #0]
 8008eb0:	e7ee      	b.n	8008e90 <__swhatbuf_r+0x1c>
 8008eb2:	2340      	movs	r3, #64	; 0x40
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	b016      	add	sp, #88	; 0x58
 8008eba:	bd70      	pop	{r4, r5, r6, pc}

08008ebc <__smakebuf_r>:
 8008ebc:	898b      	ldrh	r3, [r1, #12]
 8008ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ec0:	079d      	lsls	r5, r3, #30
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	d507      	bpl.n	8008ed8 <__smakebuf_r+0x1c>
 8008ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	6163      	str	r3, [r4, #20]
 8008ed4:	b002      	add	sp, #8
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	ab01      	add	r3, sp, #4
 8008eda:	466a      	mov	r2, sp
 8008edc:	f7ff ffca 	bl	8008e74 <__swhatbuf_r>
 8008ee0:	9900      	ldr	r1, [sp, #0]
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff fac3 	bl	8008470 <_malloc_r>
 8008eea:	b948      	cbnz	r0, 8008f00 <__smakebuf_r+0x44>
 8008eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ef0:	059a      	lsls	r2, r3, #22
 8008ef2:	d4ef      	bmi.n	8008ed4 <__smakebuf_r+0x18>
 8008ef4:	f023 0303 	bic.w	r3, r3, #3
 8008ef8:	f043 0302 	orr.w	r3, r3, #2
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	e7e3      	b.n	8008ec8 <__smakebuf_r+0xc>
 8008f00:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <__smakebuf_r+0x7c>)
 8008f02:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	6020      	str	r0, [r4, #0]
 8008f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	9b00      	ldr	r3, [sp, #0]
 8008f10:	6120      	str	r0, [r4, #16]
 8008f12:	6163      	str	r3, [r4, #20]
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	b15b      	cbz	r3, 8008f30 <__smakebuf_r+0x74>
 8008f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f000 f873 	bl	8009008 <_isatty_r>
 8008f22:	b128      	cbz	r0, 8008f30 <__smakebuf_r+0x74>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f023 0303 	bic.w	r3, r3, #3
 8008f2a:	f043 0301 	orr.w	r3, r3, #1
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	431d      	orrs	r5, r3
 8008f34:	81a5      	strh	r5, [r4, #12]
 8008f36:	e7cd      	b.n	8008ed4 <__smakebuf_r+0x18>
 8008f38:	080073a1 	.word	0x080073a1

08008f3c <memmove>:
 8008f3c:	4288      	cmp	r0, r1
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	eb01 0302 	add.w	r3, r1, r2
 8008f44:	d807      	bhi.n	8008f56 <memmove+0x1a>
 8008f46:	1e42      	subs	r2, r0, #1
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	d00a      	beq.n	8008f62 <memmove+0x26>
 8008f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f50:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f54:	e7f8      	b.n	8008f48 <memmove+0xc>
 8008f56:	4283      	cmp	r3, r0
 8008f58:	d9f5      	bls.n	8008f46 <memmove+0xa>
 8008f5a:	1881      	adds	r1, r0, r2
 8008f5c:	1ad2      	subs	r2, r2, r3
 8008f5e:	42d3      	cmn	r3, r2
 8008f60:	d100      	bne.n	8008f64 <memmove+0x28>
 8008f62:	bd10      	pop	{r4, pc}
 8008f64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f6c:	e7f7      	b.n	8008f5e <memmove+0x22>

08008f6e <__malloc_lock>:
 8008f6e:	4770      	bx	lr

08008f70 <__malloc_unlock>:
 8008f70:	4770      	bx	lr

08008f72 <_realloc_r>:
 8008f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f74:	4607      	mov	r7, r0
 8008f76:	4614      	mov	r4, r2
 8008f78:	460e      	mov	r6, r1
 8008f7a:	b921      	cbnz	r1, 8008f86 <_realloc_r+0x14>
 8008f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f80:	4611      	mov	r1, r2
 8008f82:	f7ff ba75 	b.w	8008470 <_malloc_r>
 8008f86:	b922      	cbnz	r2, 8008f92 <_realloc_r+0x20>
 8008f88:	f7ff fa26 	bl	80083d8 <_free_r>
 8008f8c:	4625      	mov	r5, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f92:	f000 f849 	bl	8009028 <_malloc_usable_size_r>
 8008f96:	42a0      	cmp	r0, r4
 8008f98:	d20f      	bcs.n	8008fba <_realloc_r+0x48>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f7ff fa67 	bl	8008470 <_malloc_r>
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d0f2      	beq.n	8008f8e <_realloc_r+0x1c>
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4622      	mov	r2, r4
 8008fac:	f7fe fe02 	bl	8007bb4 <memcpy>
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f7ff fa10 	bl	80083d8 <_free_r>
 8008fb8:	e7e9      	b.n	8008f8e <_realloc_r+0x1c>
 8008fba:	4635      	mov	r5, r6
 8008fbc:	e7e7      	b.n	8008f8e <_realloc_r+0x1c>
	...

08008fc0 <_read_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4c05      	ldr	r4, [pc, #20]	; (8008fe0 <_read_r+0x20>)
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7f9 faac 	bl	800252c <_read>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_read_r+0x1e>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_read_r+0x1e>
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	200004b0 	.word	0x200004b0

08008fe4 <_fstat_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4c06      	ldr	r4, [pc, #24]	; (8009004 <_fstat_r+0x20>)
 8008fea:	4605      	mov	r5, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	4611      	mov	r1, r2
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	f7f9 fac3 	bl	800257c <_fstat>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d102      	bne.n	8009000 <_fstat_r+0x1c>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	b103      	cbz	r3, 8009000 <_fstat_r+0x1c>
 8008ffe:	602b      	str	r3, [r5, #0]
 8009000:	bd38      	pop	{r3, r4, r5, pc}
 8009002:	bf00      	nop
 8009004:	200004b0 	.word	0x200004b0

08009008 <_isatty_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	2300      	movs	r3, #0
 800900c:	4c05      	ldr	r4, [pc, #20]	; (8009024 <_isatty_r+0x1c>)
 800900e:	4605      	mov	r5, r0
 8009010:	4608      	mov	r0, r1
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	f7f9 fac1 	bl	800259a <_isatty>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_isatty_r+0x1a>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	b103      	cbz	r3, 8009022 <_isatty_r+0x1a>
 8009020:	602b      	str	r3, [r5, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	200004b0 	.word	0x200004b0

08009028 <_malloc_usable_size_r>:
 8009028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800902c:	1f18      	subs	r0, r3, #4
 800902e:	2b00      	cmp	r3, #0
 8009030:	bfbc      	itt	lt
 8009032:	580b      	ldrlt	r3, [r1, r0]
 8009034:	18c0      	addlt	r0, r0, r3
 8009036:	4770      	bx	lr

08009038 <_init>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr

08009044 <_fini>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr
