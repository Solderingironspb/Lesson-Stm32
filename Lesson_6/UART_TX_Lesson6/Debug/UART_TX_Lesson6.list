
UART_TX_Lesson6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003658  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08003768  08003768  00013768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  20000000  080039c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000fc  20000200  08003bc0  00020200  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002fc  08003bc0  000202fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007d4a  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000195c  00000000  00000000  00027f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b6e  00000000  00000000  000298cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005e8  00000000  00000000  0002c440  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007f0  00000000  00000000  0002ca28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003279  00000000  00000000  0002d218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000238c  00000000  00000000  00030491  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003281d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000016f4  00000000  00000000  0003289c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08003750 	.word	0x08003750

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08003750 	.word	0x08003750

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_InitTick+0x3c>)
{
 8000a84:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a86:	7818      	ldrb	r0, [r3, #0]
 8000a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_InitTick+0x40>)
 8000a92:	6810      	ldr	r0, [r2, #0]
 8000a94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a98:	f000 f88e 	bl	8000bb8 <HAL_SYSTICK_Config>
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	b958      	cbnz	r0, 8000ab8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa0:	2d0f      	cmp	r5, #15
 8000aa2:	d809      	bhi.n	8000ab8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	4629      	mov	r1, r5
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f842 	bl	8000b34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_InitTick+0x44>)
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	601d      	str	r5, [r3, #0]
 8000ab6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ab8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000aba:	bd38      	pop	{r3, r4, r5, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	2000002c 	.word	0x2000002c
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x20>)
{
 8000aca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ace:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad6:	f000 f81b 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff ffd0 	bl	8000a80 <HAL_InitTick>
  HAL_MspInit();
 8000ae0:	f000 ffd8 	bl	8001a94 <HAL_MspInit>
}
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	bd08      	pop	{r3, pc}
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <HAL_IncTick+0x10>)
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <HAL_IncTick+0x14>)
 8000af0:	6811      	ldr	r1, [r2, #0]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	440b      	add	r3, r1
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000228 	.word	0x20000228
 8000b00:	20000000 	.word	0x20000000

08000b04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b04:	4b01      	ldr	r3, [pc, #4]	; (8000b0c <HAL_GetTick+0x8>)
 8000b06:	6818      	ldr	r0, [r3, #0]
}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000228 	.word	0x20000228

08000b10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b12:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	0c1b      	lsrs	r3, r3, #16
 8000b22:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b2a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b2c:	60d3      	str	r3, [r2, #12]
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b36:	b530      	push	{r4, r5, lr}
 8000b38:	68dc      	ldr	r4, [r3, #12]
 8000b3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	bf28      	it	cs
 8000b48:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b50:	bf98      	it	ls
 8000b52:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	fa05 f303 	lsl.w	r3, r5, r3
 8000b58:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5c:	bf88      	it	hi
 8000b5e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4019      	ands	r1, r3
 8000b62:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	fa05 f404 	lsl.w	r4, r5, r4
 8000b68:	3c01      	subs	r4, #1
 8000b6a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6e:	ea42 0201 	orr.w	r2, r2, r1
 8000b72:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	bfa9      	itett	ge
 8000b78:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	4b06      	ldrlt	r3, [pc, #24]	; (8000b98 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	b2d2      	uxtbge	r2, r2
 8000b80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	bfbb      	ittet	lt
 8000b86:	f000 000f 	andlt.w	r0, r0, #15
 8000b8a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	541a      	strblt	r2, [r3, r0]
 8000b92:	bd30      	pop	{r4, r5, pc}
 8000b94:	e000ed00 	.word	0xe000ed00
 8000b98:	e000ed14 	.word	0xe000ed14

08000b9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	db08      	blt.n	8000bb2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	0942      	lsrs	r2, r0, #5
 8000ba4:	f000 001f 	and.w	r0, r0, #31
 8000ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <HAL_NVIC_EnableIRQ+0x18>)
 8000bae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	3801      	subs	r0, #1
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bbe:	d20a      	bcs.n	8000bd6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000be4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000be6:	b330      	cbz	r0, 8000c36 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000be8:	2214      	movs	r2, #20
 8000bea:	6801      	ldr	r1, [r0, #0]
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bee:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bf0:	440b      	add	r3, r1
 8000bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000bfc:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000bfe:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000c00:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c02:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000c06:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c08:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c0a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c0e:	4323      	orrs	r3, r4
 8000c10:	6904      	ldr	r4, [r0, #16]
 8000c12:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c14:	6944      	ldr	r4, [r0, #20]
 8000c16:	4323      	orrs	r3, r4
 8000c18:	6984      	ldr	r4, [r0, #24]
 8000c1a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c1c:	69c4      	ldr	r4, [r0, #28]
 8000c1e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000c20:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c22:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c24:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c26:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000c28:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c2c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c2e:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
}
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	bf00      	nop
 8000c3c:	bffdfff8 	.word	0xbffdfff8
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c46:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000c4a:	2c01      	cmp	r4, #1
 8000c4c:	d035      	beq.n	8000cba <HAL_DMA_Start_IT+0x76>
 8000c4e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c50:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000c54:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	f04f 0600 	mov.w	r6, #0
 8000c5e:	f04f 0402 	mov.w	r4, #2
 8000c62:	d128      	bne.n	8000cb6 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c64:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c68:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c6a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000c6c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c6e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000c70:	f026 0601 	bic.w	r6, r6, #1
 8000c74:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c76:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000c78:	40bd      	lsls	r5, r7
 8000c7a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000c7c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c7e:	6843      	ldr	r3, [r0, #4]
 8000c80:	6805      	ldr	r5, [r0, #0]
 8000c82:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000c84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000c86:	bf0b      	itete	eq
 8000c88:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000c8a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000c8c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000c8e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000c90:	b14b      	cbz	r3, 8000ca6 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c98:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c9a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c9c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	602b      	str	r3, [r5, #0]
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	f023 0304 	bic.w	r3, r3, #4
 8000cac:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	f043 030a 	orr.w	r3, r3, #10
 8000cb4:	e7f0      	b.n	8000c98 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000cb6:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000cba:	2002      	movs	r0, #2
}
 8000cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000cc0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000cc4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d003      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000cce:	2001      	movs	r0, #1
 8000cd0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd2:	6803      	ldr	r3, [r0, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	f022 020e 	bic.w	r2, r2, #14
 8000cda:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ce4:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_DMA_Abort_IT+0x88>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d01f      	beq.n	8000d2a <HAL_DMA_Abort_IT+0x6a>
 8000cea:	3214      	adds	r2, #20
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d01e      	beq.n	8000d2e <HAL_DMA_Abort_IT+0x6e>
 8000cf0:	3214      	adds	r2, #20
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d01d      	beq.n	8000d32 <HAL_DMA_Abort_IT+0x72>
 8000cf6:	3214      	adds	r2, #20
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d01d      	beq.n	8000d38 <HAL_DMA_Abort_IT+0x78>
 8000cfc:	3214      	adds	r2, #20
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d01d      	beq.n	8000d3e <HAL_DMA_Abort_IT+0x7e>
 8000d02:	3214      	adds	r2, #20
 8000d04:	4293      	cmp	r3, r2
 8000d06:	bf0c      	ite	eq
 8000d08:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000d0c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8000d12:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d14:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d16:	2301      	movs	r3, #1
 8000d18:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8000d1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000d1e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000d22:	b17b      	cbz	r3, 8000d44 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8000d24:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d26:	4620      	mov	r0, r4
 8000d28:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e7f0      	b.n	8000d10 <HAL_DMA_Abort_IT+0x50>
 8000d2e:	2310      	movs	r3, #16
 8000d30:	e7ee      	b.n	8000d10 <HAL_DMA_Abort_IT+0x50>
 8000d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d36:	e7eb      	b.n	8000d10 <HAL_DMA_Abort_IT+0x50>
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	e7e8      	b.n	8000d10 <HAL_DMA_Abort_IT+0x50>
 8000d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d42:	e7e5      	b.n	8000d10 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000d44:	4618      	mov	r0, r3
}
 8000d46:	bd10      	pop	{r4, pc}
 8000d48:	40020008 	.word	0x40020008
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_DMA_IRQHandler>:
{
 8000d50:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d52:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d54:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d56:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d58:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d5a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000d60:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d62:	d032      	beq.n	8000dca <HAL_DMA_IRQHandler+0x7a>
 8000d64:	074d      	lsls	r5, r1, #29
 8000d66:	d530      	bpl.n	8000dca <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d6c:	bf5e      	ittt	pl
 8000d6e:	681a      	ldrpl	r2, [r3, #0]
 8000d70:	f022 0204 	bicpl.w	r2, r2, #4
 8000d74:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d76:	4a3e      	ldr	r2, [pc, #248]	; (8000e70 <HAL_DMA_IRQHandler+0x120>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d019      	beq.n	8000db0 <HAL_DMA_IRQHandler+0x60>
 8000d7c:	3214      	adds	r2, #20
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d018      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x64>
 8000d82:	3214      	adds	r2, #20
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d017      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x68>
 8000d88:	3214      	adds	r2, #20
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d017      	beq.n	8000dbe <HAL_DMA_IRQHandler+0x6e>
 8000d8e:	3214      	adds	r2, #20
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d017      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x74>
 8000d94:	3214      	adds	r2, #20
 8000d96:	4293      	cmp	r3, r2
 8000d98:	bf0c      	ite	eq
 8000d9a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000d9e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000da2:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <HAL_DMA_IRQHandler+0x124>)
 8000da4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000da6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d05e      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x11a>
}
 8000dac:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000dae:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000db0:	2304      	movs	r3, #4
 8000db2:	e7f6      	b.n	8000da2 <HAL_DMA_IRQHandler+0x52>
 8000db4:	2340      	movs	r3, #64	; 0x40
 8000db6:	e7f4      	b.n	8000da2 <HAL_DMA_IRQHandler+0x52>
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	e7f1      	b.n	8000da2 <HAL_DMA_IRQHandler+0x52>
 8000dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc2:	e7ee      	b.n	8000da2 <HAL_DMA_IRQHandler+0x52>
 8000dc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dc8:	e7eb      	b.n	8000da2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000dca:	2502      	movs	r5, #2
 8000dcc:	4095      	lsls	r5, r2
 8000dce:	4225      	tst	r5, r4
 8000dd0:	d035      	beq.n	8000e3e <HAL_DMA_IRQHandler+0xee>
 8000dd2:	078d      	lsls	r5, r1, #30
 8000dd4:	d533      	bpl.n	8000e3e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	0694      	lsls	r4, r2, #26
 8000dda:	d406      	bmi.n	8000dea <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f022 020a 	bic.w	r2, r2, #10
 8000de2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000de4:	2201      	movs	r2, #1
 8000de6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000dea:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <HAL_DMA_IRQHandler+0x120>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d019      	beq.n	8000e24 <HAL_DMA_IRQHandler+0xd4>
 8000df0:	3214      	adds	r2, #20
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d018      	beq.n	8000e28 <HAL_DMA_IRQHandler+0xd8>
 8000df6:	3214      	adds	r2, #20
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d017      	beq.n	8000e2c <HAL_DMA_IRQHandler+0xdc>
 8000dfc:	3214      	adds	r2, #20
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d017      	beq.n	8000e32 <HAL_DMA_IRQHandler+0xe2>
 8000e02:	3214      	adds	r2, #20
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d017      	beq.n	8000e38 <HAL_DMA_IRQHandler+0xe8>
 8000e08:	3214      	adds	r2, #20
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	bf0c      	ite	eq
 8000e0e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000e12:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_DMA_IRQHandler+0x124>)
 8000e18:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000e20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e22:	e7c1      	b.n	8000da8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e24:	2302      	movs	r3, #2
 8000e26:	e7f6      	b.n	8000e16 <HAL_DMA_IRQHandler+0xc6>
 8000e28:	2320      	movs	r3, #32
 8000e2a:	e7f4      	b.n	8000e16 <HAL_DMA_IRQHandler+0xc6>
 8000e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e30:	e7f1      	b.n	8000e16 <HAL_DMA_IRQHandler+0xc6>
 8000e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e36:	e7ee      	b.n	8000e16 <HAL_DMA_IRQHandler+0xc6>
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	e7eb      	b.n	8000e16 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e3e:	2508      	movs	r5, #8
 8000e40:	4095      	lsls	r5, r2
 8000e42:	4225      	tst	r5, r4
 8000e44:	d011      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x11a>
 8000e46:	0709      	lsls	r1, r1, #28
 8000e48:	d50f      	bpl.n	8000e6a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	f021 010e 	bic.w	r1, r1, #14
 8000e50:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e52:	2301      	movs	r3, #1
 8000e54:	fa03 f202 	lsl.w	r2, r3, r2
 8000e58:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e5a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000e60:	2300      	movs	r3, #0
 8000e62:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000e66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e68:	e79e      	b.n	8000da8 <HAL_DMA_IRQHandler+0x58>
}
 8000e6a:	bc70      	pop	{r4, r5, r6}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40020008 	.word	0x40020008
 8000e74:	40020000 	.word	0x40020000

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000e7e:	4626      	mov	r6, r4
 8000e80:	4b66      	ldr	r3, [pc, #408]	; (800101c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e82:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800102c <HAL_GPIO_Init+0x1b4>
 8000e86:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001030 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	680a      	ldr	r2, [r1, #0]
 8000e8c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000e90:	d102      	bne.n	8000e98 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000e92:	b003      	add	sp, #12
 8000e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000e98:	f04f 0801 	mov.w	r8, #1
 8000e9c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000ea4:	4590      	cmp	r8, r2
 8000ea6:	d17f      	bne.n	8000fa8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000ea8:	684d      	ldr	r5, [r1, #4]
 8000eaa:	2d12      	cmp	r5, #18
 8000eac:	f000 80aa 	beq.w	8001004 <HAL_GPIO_Init+0x18c>
 8000eb0:	f200 8083 	bhi.w	8000fba <HAL_GPIO_Init+0x142>
 8000eb4:	2d02      	cmp	r5, #2
 8000eb6:	f000 80a2 	beq.w	8000ffe <HAL_GPIO_Init+0x186>
 8000eba:	d877      	bhi.n	8000fac <HAL_GPIO_Init+0x134>
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	f000 8089 	beq.w	8000fd4 <HAL_GPIO_Init+0x15c>
 8000ec2:	2d01      	cmp	r5, #1
 8000ec4:	f000 8099 	beq.w	8000ffa <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ecc:	2aff      	cmp	r2, #255	; 0xff
 8000ece:	bf93      	iteet	ls
 8000ed0:	4682      	movls	sl, r0
 8000ed2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000ed6:	3d08      	subhi	r5, #8
 8000ed8:	f8d0 b000 	ldrls.w	fp, [r0]
 8000edc:	bf92      	itee	ls
 8000ede:	00b5      	lslls	r5, r6, #2
 8000ee0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000ee4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ee6:	fa09 f805 	lsl.w	r8, r9, r5
 8000eea:	ea2b 0808 	bic.w	r8, fp, r8
 8000eee:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef2:	bf88      	it	hi
 8000ef4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ef8:	ea48 0505 	orr.w	r5, r8, r5
 8000efc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f00:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f04:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f08:	d04e      	beq.n	8000fa8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0a:	4d45      	ldr	r5, [pc, #276]	; (8001020 <HAL_GPIO_Init+0x1a8>)
 8000f0c:	4f44      	ldr	r7, [pc, #272]	; (8001020 <HAL_GPIO_Init+0x1a8>)
 8000f0e:	69ad      	ldr	r5, [r5, #24]
 8000f10:	f026 0803 	bic.w	r8, r6, #3
 8000f14:	f045 0501 	orr.w	r5, r5, #1
 8000f18:	61bd      	str	r5, [r7, #24]
 8000f1a:	69bd      	ldr	r5, [r7, #24]
 8000f1c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000f20:	f005 0501 	and.w	r5, r5, #1
 8000f24:	9501      	str	r5, [sp, #4]
 8000f26:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f2a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f30:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000f34:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f38:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f3c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f40:	4d38      	ldr	r5, [pc, #224]	; (8001024 <HAL_GPIO_Init+0x1ac>)
 8000f42:	42a8      	cmp	r0, r5
 8000f44:	d063      	beq.n	800100e <HAL_GPIO_Init+0x196>
 8000f46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f4a:	42a8      	cmp	r0, r5
 8000f4c:	d061      	beq.n	8001012 <HAL_GPIO_Init+0x19a>
 8000f4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f52:	42a8      	cmp	r0, r5
 8000f54:	d05f      	beq.n	8001016 <HAL_GPIO_Init+0x19e>
 8000f56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f5a:	42a8      	cmp	r0, r5
 8000f5c:	bf0c      	ite	eq
 8000f5e:	2503      	moveq	r5, #3
 8000f60:	2504      	movne	r5, #4
 8000f62:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f66:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000f6a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000f6e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f70:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000f74:	bf14      	ite	ne
 8000f76:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f78:	4395      	biceq	r5, r2
 8000f7a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000f7c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000f82:	bf14      	ite	ne
 8000f84:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f86:	4395      	biceq	r5, r2
 8000f88:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f8a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f90:	bf14      	ite	ne
 8000f92:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f94:	4395      	biceq	r5, r2
 8000f96:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f98:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f9e:	bf14      	ite	ne
 8000fa0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fa2:	ea25 0202 	biceq.w	r2, r5, r2
 8000fa6:	60da      	str	r2, [r3, #12]
	position++;
 8000fa8:	3601      	adds	r6, #1
 8000faa:	e76e      	b.n	8000e8a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000fac:	2d03      	cmp	r5, #3
 8000fae:	d022      	beq.n	8000ff6 <HAL_GPIO_Init+0x17e>
 8000fb0:	2d11      	cmp	r5, #17
 8000fb2:	d189      	bne.n	8000ec8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb4:	68cc      	ldr	r4, [r1, #12]
 8000fb6:	3404      	adds	r4, #4
          break;
 8000fb8:	e786      	b.n	8000ec8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000fba:	4f1b      	ldr	r7, [pc, #108]	; (8001028 <HAL_GPIO_Init+0x1b0>)
 8000fbc:	42bd      	cmp	r5, r7
 8000fbe:	d009      	beq.n	8000fd4 <HAL_GPIO_Init+0x15c>
 8000fc0:	d812      	bhi.n	8000fe8 <HAL_GPIO_Init+0x170>
 8000fc2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001034 <HAL_GPIO_Init+0x1bc>
 8000fc6:	454d      	cmp	r5, r9
 8000fc8:	d004      	beq.n	8000fd4 <HAL_GPIO_Init+0x15c>
 8000fca:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000fce:	454d      	cmp	r5, r9
 8000fd0:	f47f af7a 	bne.w	8000ec8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fd4:	688c      	ldr	r4, [r1, #8]
 8000fd6:	b1c4      	cbz	r4, 800100a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000fda:	bf0c      	ite	eq
 8000fdc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000fe0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe4:	2408      	movs	r4, #8
 8000fe6:	e76f      	b.n	8000ec8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000fe8:	4575      	cmp	r5, lr
 8000fea:	d0f3      	beq.n	8000fd4 <HAL_GPIO_Init+0x15c>
 8000fec:	4565      	cmp	r5, ip
 8000fee:	d0f1      	beq.n	8000fd4 <HAL_GPIO_Init+0x15c>
 8000ff0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001038 <HAL_GPIO_Init+0x1c0>
 8000ff4:	e7eb      	b.n	8000fce <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	e766      	b.n	8000ec8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ffa:	68cc      	ldr	r4, [r1, #12]
          break;
 8000ffc:	e764      	b.n	8000ec8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ffe:	68cc      	ldr	r4, [r1, #12]
 8001000:	3408      	adds	r4, #8
          break;
 8001002:	e761      	b.n	8000ec8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001004:	68cc      	ldr	r4, [r1, #12]
 8001006:	340c      	adds	r4, #12
          break;
 8001008:	e75e      	b.n	8000ec8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800100a:	2404      	movs	r4, #4
 800100c:	e75c      	b.n	8000ec8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800100e:	2500      	movs	r5, #0
 8001010:	e7a7      	b.n	8000f62 <HAL_GPIO_Init+0xea>
 8001012:	2501      	movs	r5, #1
 8001014:	e7a5      	b.n	8000f62 <HAL_GPIO_Init+0xea>
 8001016:	2502      	movs	r5, #2
 8001018:	e7a3      	b.n	8000f62 <HAL_GPIO_Init+0xea>
 800101a:	bf00      	nop
 800101c:	40010400 	.word	0x40010400
 8001020:	40021000 	.word	0x40021000
 8001024:	40010800 	.word	0x40010800
 8001028:	10210000 	.word	0x10210000
 800102c:	10310000 	.word	0x10310000
 8001030:	10320000 	.word	0x10320000
 8001034:	10110000 	.word	0x10110000
 8001038:	10220000 	.word	0x10220000

0800103c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800103c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001040:	4605      	mov	r5, r0
 8001042:	b908      	cbnz	r0, 8001048 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001044:	2001      	movs	r0, #1
 8001046:	e03c      	b.n	80010c2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001048:	6803      	ldr	r3, [r0, #0]
 800104a:	07db      	lsls	r3, r3, #31
 800104c:	d410      	bmi.n	8001070 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	079f      	lsls	r7, r3, #30
 8001052:	d45d      	bmi.n	8001110 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	0719      	lsls	r1, r3, #28
 8001058:	f100 8094 	bmi.w	8001184 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	075a      	lsls	r2, r3, #29
 8001060:	f100 80be 	bmi.w	80011e0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001064:	69e8      	ldr	r0, [r5, #28]
 8001066:	2800      	cmp	r0, #0
 8001068:	f040 812c 	bne.w	80012c4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800106c:	2000      	movs	r0, #0
 800106e:	e028      	b.n	80010c2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001070:	4c8f      	ldr	r4, [pc, #572]	; (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001072:	6863      	ldr	r3, [r4, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b04      	cmp	r3, #4
 800107a:	d007      	beq.n	800108c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800107c:	6863      	ldr	r3, [r4, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d109      	bne.n	800109a <HAL_RCC_OscConfig+0x5e>
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	03de      	lsls	r6, r3, #15
 800108a:	d506      	bpl.n	800109a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	039c      	lsls	r4, r3, #14
 8001090:	d5dd      	bpl.n	800104e <HAL_RCC_OscConfig+0x12>
 8001092:	686b      	ldr	r3, [r5, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1da      	bne.n	800104e <HAL_RCC_OscConfig+0x12>
 8001098:	e7d4      	b.n	8001044 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109a:	686b      	ldr	r3, [r5, #4]
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a0:	d112      	bne.n	80010c8 <HAL_RCC_OscConfig+0x8c>
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010aa:	f7ff fd2b 	bl	8000b04 <HAL_GetTick>
 80010ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	0398      	lsls	r0, r3, #14
 80010b4:	d4cb      	bmi.n	800104e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b6:	f7ff fd25 	bl	8000b04 <HAL_GetTick>
 80010ba:	1b80      	subs	r0, r0, r6
 80010bc:	2864      	cmp	r0, #100	; 0x64
 80010be:	d9f7      	bls.n	80010b0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80010c0:	2003      	movs	r0, #3
}
 80010c2:	b002      	add	sp, #8
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c8:	b99b      	cbnz	r3, 80010f2 <HAL_RCC_OscConfig+0xb6>
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d0:	6023      	str	r3, [r4, #0]
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010da:	f7ff fd13 	bl	8000b04 <HAL_GetTick>
 80010de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	0399      	lsls	r1, r3, #14
 80010e4:	d5b3      	bpl.n	800104e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e6:	f7ff fd0d 	bl	8000b04 <HAL_GetTick>
 80010ea:	1b80      	subs	r0, r0, r6
 80010ec:	2864      	cmp	r0, #100	; 0x64
 80010ee:	d9f7      	bls.n	80010e0 <HAL_RCC_OscConfig+0xa4>
 80010f0:	e7e6      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	d103      	bne.n	8001102 <HAL_RCC_OscConfig+0xc6>
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fe:	6023      	str	r3, [r4, #0]
 8001100:	e7cf      	b.n	80010a2 <HAL_RCC_OscConfig+0x66>
 8001102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001106:	6023      	str	r3, [r4, #0]
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	e7cb      	b.n	80010a8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001110:	4c67      	ldr	r4, [pc, #412]	; (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001112:	6863      	ldr	r3, [r4, #4]
 8001114:	f013 0f0c 	tst.w	r3, #12
 8001118:	d007      	beq.n	800112a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800111a:	6863      	ldr	r3, [r4, #4]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b08      	cmp	r3, #8
 8001122:	d110      	bne.n	8001146 <HAL_RCC_OscConfig+0x10a>
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	03da      	lsls	r2, r3, #15
 8001128:	d40d      	bmi.n	8001146 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	079b      	lsls	r3, r3, #30
 800112e:	d502      	bpl.n	8001136 <HAL_RCC_OscConfig+0xfa>
 8001130:	692b      	ldr	r3, [r5, #16]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d186      	bne.n	8001044 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	696a      	ldr	r2, [r5, #20]
 800113a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800113e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001142:	6023      	str	r3, [r4, #0]
 8001144:	e786      	b.n	8001054 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001146:	692a      	ldr	r2, [r5, #16]
 8001148:	4b5a      	ldr	r3, [pc, #360]	; (80012b4 <HAL_RCC_OscConfig+0x278>)
 800114a:	b16a      	cbz	r2, 8001168 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001150:	f7ff fcd8 	bl	8000b04 <HAL_GetTick>
 8001154:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	079f      	lsls	r7, r3, #30
 800115a:	d4ec      	bmi.n	8001136 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fcd2 	bl	8000b04 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2802      	cmp	r0, #2
 8001164:	d9f7      	bls.n	8001156 <HAL_RCC_OscConfig+0x11a>
 8001166:	e7ab      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001168:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800116a:	f7ff fccb 	bl	8000b04 <HAL_GetTick>
 800116e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	0798      	lsls	r0, r3, #30
 8001174:	f57f af6e 	bpl.w	8001054 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001178:	f7ff fcc4 	bl	8000b04 <HAL_GetTick>
 800117c:	1b80      	subs	r0, r0, r6
 800117e:	2802      	cmp	r0, #2
 8001180:	d9f6      	bls.n	8001170 <HAL_RCC_OscConfig+0x134>
 8001182:	e79d      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001184:	69aa      	ldr	r2, [r5, #24]
 8001186:	4c4a      	ldr	r4, [pc, #296]	; (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001188:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <HAL_RCC_OscConfig+0x27c>)
 800118a:	b1da      	cbz	r2, 80011c4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001190:	f7ff fcb8 	bl	8000b04 <HAL_GetTick>
 8001194:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001198:	079b      	lsls	r3, r3, #30
 800119a:	d50d      	bpl.n	80011b8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800119c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_OscConfig+0x280>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011a8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80011aa:	bf00      	nop
  }
  while (Delay --);
 80011ac:	9b01      	ldr	r3, [sp, #4]
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	9201      	str	r2, [sp, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f9      	bne.n	80011aa <HAL_RCC_OscConfig+0x16e>
 80011b6:	e751      	b.n	800105c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fca4 	bl	8000b04 <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2802      	cmp	r0, #2
 80011c0:	d9e9      	bls.n	8001196 <HAL_RCC_OscConfig+0x15a>
 80011c2:	e77d      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80011c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011c6:	f7ff fc9d 	bl	8000b04 <HAL_GetTick>
 80011ca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011ce:	079f      	lsls	r7, r3, #30
 80011d0:	f57f af44 	bpl.w	800105c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc96 	bl	8000b04 <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	2802      	cmp	r0, #2
 80011dc:	d9f6      	bls.n	80011cc <HAL_RCC_OscConfig+0x190>
 80011de:	e76f      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e0:	4c33      	ldr	r4, [pc, #204]	; (80012b0 <HAL_RCC_OscConfig+0x274>)
 80011e2:	69e3      	ldr	r3, [r4, #28]
 80011e4:	00d8      	lsls	r0, r3, #3
 80011e6:	d424      	bmi.n	8001232 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80011e8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	69e3      	ldr	r3, [r4, #28]
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	61e3      	str	r3, [r4, #28]
 80011f2:	69e3      	ldr	r3, [r4, #28]
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fc:	4e30      	ldr	r6, [pc, #192]	; (80012c0 <HAL_RCC_OscConfig+0x284>)
 80011fe:	6833      	ldr	r3, [r6, #0]
 8001200:	05d9      	lsls	r1, r3, #23
 8001202:	d518      	bpl.n	8001236 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001204:	68eb      	ldr	r3, [r5, #12]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d126      	bne.n	8001258 <HAL_RCC_OscConfig+0x21c>
 800120a:	6a23      	ldr	r3, [r4, #32]
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001212:	f7ff fc77 	bl	8000b04 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800121a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	6a23      	ldr	r3, [r4, #32]
 800121e:	079b      	lsls	r3, r3, #30
 8001220:	d53f      	bpl.n	80012a2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001222:	2f00      	cmp	r7, #0
 8001224:	f43f af1e 	beq.w	8001064 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001228:	69e3      	ldr	r3, [r4, #28]
 800122a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800122e:	61e3      	str	r3, [r4, #28]
 8001230:	e718      	b.n	8001064 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001232:	2700      	movs	r7, #0
 8001234:	e7e2      	b.n	80011fc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001236:	6833      	ldr	r3, [r6, #0]
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800123e:	f7ff fc61 	bl	8000b04 <HAL_GetTick>
 8001242:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	6833      	ldr	r3, [r6, #0]
 8001246:	05da      	lsls	r2, r3, #23
 8001248:	d4dc      	bmi.n	8001204 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fc5b 	bl	8000b04 <HAL_GetTick>
 800124e:	eba0 0008 	sub.w	r0, r0, r8
 8001252:	2864      	cmp	r0, #100	; 0x64
 8001254:	d9f6      	bls.n	8001244 <HAL_RCC_OscConfig+0x208>
 8001256:	e733      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	b9ab      	cbnz	r3, 8001286 <HAL_RCC_OscConfig+0x24a>
 800125a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6223      	str	r3, [r4, #32]
 8001266:	6a23      	ldr	r3, [r4, #32]
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800126e:	f7ff fc49 	bl	8000b04 <HAL_GetTick>
 8001272:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001274:	6a23      	ldr	r3, [r4, #32]
 8001276:	0798      	lsls	r0, r3, #30
 8001278:	d5d3      	bpl.n	8001222 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff fc43 	bl	8000b04 <HAL_GetTick>
 800127e:	1b80      	subs	r0, r0, r6
 8001280:	4540      	cmp	r0, r8
 8001282:	d9f7      	bls.n	8001274 <HAL_RCC_OscConfig+0x238>
 8001284:	e71c      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001286:	2b05      	cmp	r3, #5
 8001288:	6a23      	ldr	r3, [r4, #32]
 800128a:	d103      	bne.n	8001294 <HAL_RCC_OscConfig+0x258>
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6223      	str	r3, [r4, #32]
 8001292:	e7ba      	b.n	800120a <HAL_RCC_OscConfig+0x1ce>
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6223      	str	r3, [r4, #32]
 800129a:	6a23      	ldr	r3, [r4, #32]
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	e7b6      	b.n	8001210 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fc2f 	bl	8000b04 <HAL_GetTick>
 80012a6:	eba0 0008 	sub.w	r0, r0, r8
 80012aa:	42b0      	cmp	r0, r6
 80012ac:	d9b6      	bls.n	800121c <HAL_RCC_OscConfig+0x1e0>
 80012ae:	e707      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
 80012b0:	40021000 	.word	0x40021000
 80012b4:	42420000 	.word	0x42420000
 80012b8:	42420480 	.word	0x42420480
 80012bc:	2000002c 	.word	0x2000002c
 80012c0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c4:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <HAL_RCC_OscConfig+0x334>)
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	461c      	mov	r4, r3
 80012ca:	f002 020c 	and.w	r2, r2, #12
 80012ce:	2a08      	cmp	r2, #8
 80012d0:	d03d      	beq.n	800134e <HAL_RCC_OscConfig+0x312>
 80012d2:	2300      	movs	r3, #0
 80012d4:	4e27      	ldr	r6, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80012d8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012da:	d12b      	bne.n	8001334 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc12 	bl	8000b04 <HAL_GetTick>
 80012e0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	0199      	lsls	r1, r3, #6
 80012e6:	d41f      	bmi.n	8001328 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012e8:	6a2b      	ldr	r3, [r5, #32]
 80012ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ee:	d105      	bne.n	80012fc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012f0:	6862      	ldr	r2, [r4, #4]
 80012f2:	68a9      	ldr	r1, [r5, #8]
 80012f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80012f8:	430a      	orrs	r2, r1
 80012fa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80012fe:	6862      	ldr	r2, [r4, #4]
 8001300:	430b      	orrs	r3, r1
 8001302:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001306:	4313      	orrs	r3, r2
 8001308:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800130a:	2301      	movs	r3, #1
 800130c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800130e:	f7ff fbf9 	bl	8000b04 <HAL_GetTick>
 8001312:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	019a      	lsls	r2, r3, #6
 8001318:	f53f aea8 	bmi.w	800106c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fbf2 	bl	8000b04 <HAL_GetTick>
 8001320:	1b40      	subs	r0, r0, r5
 8001322:	2802      	cmp	r0, #2
 8001324:	d9f6      	bls.n	8001314 <HAL_RCC_OscConfig+0x2d8>
 8001326:	e6cb      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fbec 	bl	8000b04 <HAL_GetTick>
 800132c:	1bc0      	subs	r0, r0, r7
 800132e:	2802      	cmp	r0, #2
 8001330:	d9d7      	bls.n	80012e2 <HAL_RCC_OscConfig+0x2a6>
 8001332:	e6c5      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001334:	f7ff fbe6 	bl	8000b04 <HAL_GetTick>
 8001338:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	019b      	lsls	r3, r3, #6
 800133e:	f57f ae95 	bpl.w	800106c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fbdf 	bl	8000b04 <HAL_GetTick>
 8001346:	1b40      	subs	r0, r0, r5
 8001348:	2802      	cmp	r0, #2
 800134a:	d9f6      	bls.n	800133a <HAL_RCC_OscConfig+0x2fe>
 800134c:	e6b8      	b.n	80010c0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800134e:	2801      	cmp	r0, #1
 8001350:	f43f aeb7 	beq.w	80010c2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001354:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	6a2b      	ldr	r3, [r5, #32]
 8001358:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800135c:	429a      	cmp	r2, r3
 800135e:	f47f ae71 	bne.w	8001044 <HAL_RCC_OscConfig+0x8>
 8001362:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001364:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001368:	1ac0      	subs	r0, r0, r3
 800136a:	bf18      	it	ne
 800136c:	2001      	movne	r0, #1
 800136e:	e6a8      	b.n	80010c2 <HAL_RCC_OscConfig+0x86>
 8001370:	40021000 	.word	0x40021000
 8001374:	42420060 	.word	0x42420060

08001378 <HAL_RCC_GetSysClockFreq>:
{
 8001378:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800137c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800137e:	ac02      	add	r4, sp, #8
 8001380:	f103 0510 	add.w	r5, r3, #16
 8001384:	4622      	mov	r2, r4
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	6859      	ldr	r1, [r3, #4]
 800138a:	3308      	adds	r3, #8
 800138c:	c203      	stmia	r2!, {r0, r1}
 800138e:	42ab      	cmp	r3, r5
 8001390:	4614      	mov	r4, r2
 8001392:	d1f7      	bne.n	8001384 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001394:	2301      	movs	r3, #1
 8001396:	f88d 3004 	strb.w	r3, [sp, #4]
 800139a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800139c:	4911      	ldr	r1, [pc, #68]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800139e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80013a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013a4:	f003 020c 	and.w	r2, r3, #12
 80013a8:	2a08      	cmp	r2, #8
 80013aa:	d117      	bne.n	80013dc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80013b0:	a806      	add	r0, sp, #24
 80013b2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013b4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ba:	d50c      	bpl.n	80013d6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013c6:	aa06      	add	r2, sp, #24
 80013c8:	4413      	add	r3, r2
 80013ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80013d2:	b007      	add	sp, #28
 80013d4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_RCC_GetSysClockFreq+0x74>)
 80013d8:	4350      	muls	r0, r2
 80013da:	e7fa      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80013de:	e7f8      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80013e0:	08003768 	.word	0x08003768
 80013e4:	40021000 	.word	0x40021000
 80013e8:	007a1200 	.word	0x007a1200
 80013ec:	003d0900 	.word	0x003d0900

080013f0 <HAL_RCC_ClockConfig>:
{
 80013f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80013f6:	4604      	mov	r4, r0
 80013f8:	b910      	cbnz	r0, 8001400 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
 80013fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001400:	4a45      	ldr	r2, [pc, #276]	; (8001518 <HAL_RCC_ClockConfig+0x128>)
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	428b      	cmp	r3, r1
 800140a:	d329      	bcc.n	8001460 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	6821      	ldr	r1, [r4, #0]
 800140e:	078e      	lsls	r6, r1, #30
 8001410:	d431      	bmi.n	8001476 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001412:	07ca      	lsls	r2, r1, #31
 8001414:	d444      	bmi.n	80014a0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001416:	4a40      	ldr	r2, [pc, #256]	; (8001518 <HAL_RCC_ClockConfig+0x128>)
 8001418:	6813      	ldr	r3, [r2, #0]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	429d      	cmp	r5, r3
 8001420:	d367      	bcc.n	80014f2 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	4d3d      	ldr	r5, [pc, #244]	; (800151c <HAL_RCC_ClockConfig+0x12c>)
 8001426:	f012 0f04 	tst.w	r2, #4
 800142a:	d16e      	bne.n	800150a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142c:	0713      	lsls	r3, r2, #28
 800142e:	d506      	bpl.n	800143e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001430:	686b      	ldr	r3, [r5, #4]
 8001432:	6922      	ldr	r2, [r4, #16]
 8001434:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001438:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800143c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800143e:	f7ff ff9b 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001442:	686b      	ldr	r3, [r5, #4]
 8001444:	4a36      	ldr	r2, [pc, #216]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
 8001446:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	40d8      	lsrs	r0, r3
 800144e:	4b35      	ldr	r3, [pc, #212]	; (8001524 <HAL_RCC_ClockConfig+0x134>)
 8001450:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <HAL_RCC_ClockConfig+0x138>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	f7ff fb13 	bl	8000a80 <HAL_InitTick>
  return HAL_OK;
 800145a:	2000      	movs	r0, #0
 800145c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	f023 0307 	bic.w	r3, r3, #7
 8001466:	430b      	orrs	r3, r1
 8001468:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	4299      	cmp	r1, r3
 8001472:	d1c2      	bne.n	80013fa <HAL_RCC_ClockConfig+0xa>
 8001474:	e7ca      	b.n	800140c <HAL_RCC_ClockConfig+0x1c>
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800147c:	bf1e      	ittt	ne
 800147e:	685a      	ldrne	r2, [r3, #4]
 8001480:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001484:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	bf42      	ittt	mi
 800148a:	685a      	ldrmi	r2, [r3, #4]
 800148c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001490:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	68a0      	ldr	r0, [r4, #8]
 8001496:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800149a:	4302      	orrs	r2, r0
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	e7b8      	b.n	8001412 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a0:	6862      	ldr	r2, [r4, #4]
 80014a2:	4e1e      	ldr	r6, [pc, #120]	; (800151c <HAL_RCC_ClockConfig+0x12c>)
 80014a4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a8:	d11b      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	d0a4      	beq.n	80013fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b0:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80014be:	f7ff fb21 	bl	8000b04 <HAL_GetTick>
 80014c2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c4:	6873      	ldr	r3, [r6, #4]
 80014c6:	6862      	ldr	r2, [r4, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014d0:	d0a1      	beq.n	8001416 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d2:	f7ff fb17 	bl	8000b04 <HAL_GetTick>
 80014d6:	1bc0      	subs	r0, r0, r7
 80014d8:	4540      	cmp	r0, r8
 80014da:	d9f3      	bls.n	80014c4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80014dc:	2003      	movs	r0, #3
}
 80014de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e2:	2a02      	cmp	r2, #2
 80014e4:	d102      	bne.n	80014ec <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014ea:	e7e0      	b.n	80014ae <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	f013 0f02 	tst.w	r3, #2
 80014f0:	e7dd      	b.n	80014ae <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	6813      	ldr	r3, [r2, #0]
 80014f4:	f023 0307 	bic.w	r3, r3, #7
 80014f8:	432b      	orrs	r3, r5
 80014fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	429d      	cmp	r5, r3
 8001504:	f47f af79 	bne.w	80013fa <HAL_RCC_ClockConfig+0xa>
 8001508:	e78b      	b.n	8001422 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150a:	686b      	ldr	r3, [r5, #4]
 800150c:	68e1      	ldr	r1, [r4, #12]
 800150e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001512:	430b      	orrs	r3, r1
 8001514:	606b      	str	r3, [r5, #4]
 8001516:	e789      	b.n	800142c <HAL_RCC_ClockConfig+0x3c>
 8001518:	40022000 	.word	0x40022000
 800151c:	40021000 	.word	0x40021000
 8001520:	08003778 	.word	0x08003778
 8001524:	2000002c 	.word	0x2000002c
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x14>)
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800153a:	6810      	ldr	r0, [r2, #0]
}
 800153c:	40d8      	lsrs	r0, r3
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	08003788 	.word	0x08003788
 8001548:	2000002c 	.word	0x2000002c

0800154c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x14>)
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800155a:	6810      	ldr	r0, [r2, #0]
}
 800155c:	40d8      	lsrs	r0, r3
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	08003788 	.word	0x08003788
 8001568:	2000002c 	.word	0x2000002c

0800156c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001574:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001576:	695a      	ldr	r2, [r3, #20]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800157e:	2320      	movs	r3, #32
 8001580:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001584:	4770      	bx	lr
	...

08001588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001588:	b538      	push	{r3, r4, r5, lr}
 800158a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800158c:	6803      	ldr	r3, [r0, #0]
 800158e:	68c1      	ldr	r1, [r0, #12]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	2419      	movs	r4, #25
 8001594:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001598:	430a      	orrs	r2, r1
 800159a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800159c:	6882      	ldr	r2, [r0, #8]
 800159e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80015a0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015a2:	4302      	orrs	r2, r0
 80015a4:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80015a6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80015aa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015ae:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	69a9      	ldr	r1, [r5, #24]
 80015b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80015bc:	430a      	orrs	r2, r1
 80015be:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <UART_SetConfig+0x70>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d114      	bne.n	80015f0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015c6:	f7ff ffc1 	bl	800154c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015ca:	4360      	muls	r0, r4
 80015cc:	686c      	ldr	r4, [r5, #4]
 80015ce:	2264      	movs	r2, #100	; 0x64
 80015d0:	00a4      	lsls	r4, r4, #2
 80015d2:	fbb0 f0f4 	udiv	r0, r0, r4
 80015d6:	fbb0 f4f2 	udiv	r4, r0, r2
 80015da:	fb02 0314 	mls	r3, r2, r4, r0
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	3332      	adds	r3, #50	; 0x32
 80015e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80015e6:	6829      	ldr	r1, [r5, #0]
 80015e8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80015ec:	608b      	str	r3, [r1, #8]
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80015f0:	f7ff ff9c 	bl	800152c <HAL_RCC_GetPCLK1Freq>
 80015f4:	e7e9      	b.n	80015ca <UART_SetConfig+0x42>
 80015f6:	bf00      	nop
 80015f8:	40013800 	.word	0x40013800

080015fc <HAL_UART_Init>:
{
 80015fc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80015fe:	4604      	mov	r4, r0
 8001600:	b340      	cbz	r0, 8001654 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001602:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001606:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800160a:	b91b      	cbnz	r3, 8001614 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800160c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001610:	f000 fa62 	bl	8001ad8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001614:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001616:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001618:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800161c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800161e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001624:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001626:	f7ff ffaf 	bl	8001588 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800162a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800162c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800163c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001644:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001646:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001648:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800164a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800164e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001652:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001654:	2001      	movs	r0, #1
}
 8001656:	bd10      	pop	{r4, pc}

08001658 <HAL_UART_Transmit_DMA>:
{
 8001658:	b538      	push	{r3, r4, r5, lr}
 800165a:	4604      	mov	r4, r0
 800165c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800165e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001662:	2a20      	cmp	r2, #32
 8001664:	d12a      	bne.n	80016bc <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8001666:	b339      	cbz	r1, 80016b8 <HAL_UART_Transmit_DMA+0x60>
 8001668:	b333      	cbz	r3, 80016b8 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800166a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800166e:	2a01      	cmp	r2, #1
 8001670:	d024      	beq.n	80016bc <HAL_UART_Transmit_DMA+0x64>
 8001672:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001674:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001676:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800167a:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 800167c:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800167e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001680:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001682:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8001688:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800168a:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800168c:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8001690:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001692:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <HAL_UART_Transmit_DMA+0x70>)
 8001696:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001698:	6822      	ldr	r2, [r4, #0]
 800169a:	3204      	adds	r2, #4
 800169c:	f7ff fad2 	bl	8000c44 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80016a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016a4:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 80016a6:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80016a8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80016aa:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80016ac:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80016b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b4:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80016b6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80016bc:	2002      	movs	r0, #2
}
 80016be:	bd38      	pop	{r3, r4, r5, pc}
 80016c0:	080016cf 	.word	0x080016cf
 80016c4:	080016fd 	.word	0x080016fd
 80016c8:	08001787 	.word	0x08001787

080016cc <HAL_UART_TxCpltCallback>:
 80016cc:	4770      	bx	lr

080016ce <UART_DMATransmitCplt>:
{
 80016ce:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f013 0320 	ands.w	r3, r3, #32
 80016da:	d10a      	bne.n	80016f2 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 80016dc:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016e6:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80016f2:	4610      	mov	r0, r2
 80016f4:	f7ff ffea 	bl	80016cc <HAL_UART_TxCpltCallback>
 80016f8:	bd08      	pop	{r3, pc}

080016fa <HAL_UART_TxHalfCpltCallback>:
 80016fa:	4770      	bx	lr

080016fc <UART_DMATxHalfCplt>:
{
 80016fc:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80016fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001700:	f7ff fffb 	bl	80016fa <HAL_UART_TxHalfCpltCallback>
 8001704:	bd08      	pop	{r3, pc}

08001706 <HAL_UART_RxCpltCallback>:
 8001706:	4770      	bx	lr

08001708 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001708:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800170c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800170e:	2b22      	cmp	r3, #34	; 0x22
 8001710:	d136      	bne.n	8001780 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001712:	6883      	ldr	r3, [r0, #8]
 8001714:	6901      	ldr	r1, [r0, #16]
 8001716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800171a:	6802      	ldr	r2, [r0, #0]
 800171c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800171e:	d123      	bne.n	8001768 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001720:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001722:	b9e9      	cbnz	r1, 8001760 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001728:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800172c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800172e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001730:	3c01      	subs	r4, #1
 8001732:	b2a4      	uxth	r4, r4
 8001734:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001736:	b98c      	cbnz	r4, 800175c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	f022 0220 	bic.w	r2, r2, #32
 8001740:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001748:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001752:	2320      	movs	r3, #32
 8001754:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001758:	f7ff ffd5 	bl	8001706 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800175c:	2000      	movs	r0, #0
}
 800175e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f823 2b01 	strh.w	r2, [r3], #1
 8001766:	e7e1      	b.n	800172c <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001768:	b921      	cbnz	r1, 8001774 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	6852      	ldr	r2, [r2, #4]
 800176e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e7dc      	b.n	800172e <UART_Receive_IT+0x26>
 8001774:	6852      	ldr	r2, [r2, #4]
 8001776:	1c59      	adds	r1, r3, #1
 8001778:	6281      	str	r1, [r0, #40]	; 0x28
 800177a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800177e:	e7f7      	b.n	8001770 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001780:	2002      	movs	r0, #2
 8001782:	bd10      	pop	{r4, pc}

08001784 <HAL_UART_ErrorCallback>:
 8001784:	4770      	bx	lr

08001786 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001786:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8001788:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800178a:	680b      	ldr	r3, [r1, #0]
 800178c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800178e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001792:	2821      	cmp	r0, #33	; 0x21
 8001794:	d10a      	bne.n	80017ac <UART_DMAError+0x26>
 8001796:	0612      	lsls	r2, r2, #24
 8001798:	d508      	bpl.n	80017ac <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 800179a:	2200      	movs	r2, #0
 800179c:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80017a4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80017a6:	2220      	movs	r2, #32
 80017a8:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017ac:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80017ae:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80017b2:	2a22      	cmp	r2, #34	; 0x22
 80017b4:	d106      	bne.n	80017c4 <UART_DMAError+0x3e>
 80017b6:	065b      	lsls	r3, r3, #25
 80017b8:	d504      	bpl.n	80017c4 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 80017ba:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 80017bc:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 80017be:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80017c0:	f7ff fed4 	bl	800156c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80017c4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80017c6:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80017ce:	f7ff ffd9 	bl	8001784 <HAL_UART_ErrorCallback>
 80017d2:	bd08      	pop	{r3, pc}

080017d4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017d4:	6803      	ldr	r3, [r0, #0]
{
 80017d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017d8:	681a      	ldr	r2, [r3, #0]
{
 80017da:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80017dc:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017de:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017e0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80017e2:	d107      	bne.n	80017f4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017e4:	0696      	lsls	r6, r2, #26
 80017e6:	d55a      	bpl.n	800189e <HAL_UART_IRQHandler+0xca>
 80017e8:	068d      	lsls	r5, r1, #26
 80017ea:	d558      	bpl.n	800189e <HAL_UART_IRQHandler+0xca>
}
 80017ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80017f0:	f7ff bf8a 	b.w	8001708 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017f4:	f015 0501 	ands.w	r5, r5, #1
 80017f8:	d102      	bne.n	8001800 <HAL_UART_IRQHandler+0x2c>
 80017fa:	f411 7f90 	tst.w	r1, #288	; 0x120
 80017fe:	d04e      	beq.n	800189e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001800:	07d3      	lsls	r3, r2, #31
 8001802:	d505      	bpl.n	8001810 <HAL_UART_IRQHandler+0x3c>
 8001804:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001806:	bf42      	ittt	mi
 8001808:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800180a:	f043 0301 	orrmi.w	r3, r3, #1
 800180e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001810:	0750      	lsls	r0, r2, #29
 8001812:	d504      	bpl.n	800181e <HAL_UART_IRQHandler+0x4a>
 8001814:	b11d      	cbz	r5, 800181e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001816:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800181e:	0793      	lsls	r3, r2, #30
 8001820:	d504      	bpl.n	800182c <HAL_UART_IRQHandler+0x58>
 8001822:	b11d      	cbz	r5, 800182c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800182c:	0716      	lsls	r6, r2, #28
 800182e:	d504      	bpl.n	800183a <HAL_UART_IRQHandler+0x66>
 8001830:	b11d      	cbz	r5, 800183a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001832:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800183a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d066      	beq.n	800190e <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001840:	0695      	lsls	r5, r2, #26
 8001842:	d504      	bpl.n	800184e <HAL_UART_IRQHandler+0x7a>
 8001844:	0688      	lsls	r0, r1, #26
 8001846:	d502      	bpl.n	800184e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff ff5d 	bl	8001708 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800184e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001850:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001852:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001856:	0711      	lsls	r1, r2, #28
 8001858:	d402      	bmi.n	8001860 <HAL_UART_IRQHandler+0x8c>
 800185a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800185e:	d01a      	beq.n	8001896 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001860:	f7ff fe84 	bl	800156c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	0652      	lsls	r2, r2, #25
 800186a:	d510      	bpl.n	800188e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800186c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800186e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001874:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001876:	b150      	cbz	r0, 800188e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_UART_IRQHandler+0x13c>)
 800187a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800187c:	f7ff fa20 	bl	8000cc0 <HAL_DMA_Abort_IT>
 8001880:	2800      	cmp	r0, #0
 8001882:	d044      	beq.n	800190e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001884:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800188a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800188c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff ff78 	bl	8001784 <HAL_UART_ErrorCallback>
 8001894:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001896:	f7ff ff75 	bl	8001784 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800189c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800189e:	0616      	lsls	r6, r2, #24
 80018a0:	d527      	bpl.n	80018f2 <HAL_UART_IRQHandler+0x11e>
 80018a2:	060d      	lsls	r5, r1, #24
 80018a4:	d525      	bpl.n	80018f2 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80018a6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80018aa:	2a21      	cmp	r2, #33	; 0x21
 80018ac:	d12f      	bne.n	800190e <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018ae:	68a2      	ldr	r2, [r4, #8]
 80018b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80018b4:	6a22      	ldr	r2, [r4, #32]
 80018b6:	d117      	bne.n	80018e8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018b8:	8811      	ldrh	r1, [r2, #0]
 80018ba:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80018be:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80018c0:	6921      	ldr	r1, [r4, #16]
 80018c2:	b979      	cbnz	r1, 80018e4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80018c4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80018c6:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80018c8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80018ca:	3a01      	subs	r2, #1
 80018cc:	b292      	uxth	r2, r2
 80018ce:	84e2      	strh	r2, [r4, #38]	; 0x26
 80018d0:	b9ea      	cbnz	r2, 800190e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80018e4:	3201      	adds	r2, #1
 80018e6:	e7ee      	b.n	80018c6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80018e8:	1c51      	adds	r1, r2, #1
 80018ea:	6221      	str	r1, [r4, #32]
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	e7ea      	b.n	80018c8 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018f2:	0650      	lsls	r0, r2, #25
 80018f4:	d50b      	bpl.n	800190e <HAL_UART_IRQHandler+0x13a>
 80018f6:	064a      	lsls	r2, r1, #25
 80018f8:	d509      	bpl.n	800190e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018fa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80018fc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001902:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001904:	2320      	movs	r3, #32
 8001906:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800190a:	f7ff fedf 	bl	80016cc <HAL_UART_TxCpltCallback>
 800190e:	bd70      	pop	{r4, r5, r6, pc}
 8001910:	08001915 	.word	0x08001915

08001914 <UART_DMAAbortOnError>:
{
 8001914:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001916:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001918:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800191a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800191c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800191e:	f7ff ff31 	bl	8001784 <HAL_UART_ErrorCallback>
 8001922:	bd08      	pop	{r3, pc}

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b510      	push	{r4, lr}
 8001926:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001928:	2228      	movs	r2, #40	; 0x28
 800192a:	2100      	movs	r1, #0
 800192c:	a806      	add	r0, sp, #24
 800192e:	f000 f9d5 	bl	8001cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001932:	2100      	movs	r1, #0
 8001934:	2214      	movs	r2, #20
 8001936:	a801      	add	r0, sp, #4
 8001938:	f000 f9d0 	bl	8001cdc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001940:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001942:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001944:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001946:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001948:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800194e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001950:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001952:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001954:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	f7ff fb71 	bl	800103c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800195c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001960:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001962:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001964:	4621      	mov	r1, r4
 8001966:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001970:	f7ff fd3e 	bl	80013f0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001974:	b010      	add	sp, #64	; 0x40
 8001976:	bd10      	pop	{r4, pc}

08001978 <main>:
{
 8001978:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  HAL_Init();
 800197a:	f7ff f8a5 	bl	8000ac8 <HAL_Init>
  SystemClock_Config();
 800197e:	f7ff ffd1 	bl	8001924 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <main+0xfc>)
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001984:	200e      	movs	r0, #14
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 8001988:	4c3b      	ldr	r4, [pc, #236]	; (8001a78 <main+0x100>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	619a      	str	r2, [r3, #24]
 8001990:	699a      	ldr	r2, [r3, #24]
			HAL_UART_Transmit_DMA(&huart1, tx_buffer1, sizeof tx_buffer1/sizeof tx_buffer1[0]);
 8001992:	4627      	mov	r7, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001994:	f002 0220 	and.w	r2, r2, #32
 8001998:	9202      	str	r2, [sp, #8]
 800199a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	699a      	ldr	r2, [r3, #24]
	T = HAL_GetTick();
 800199e:	4e37      	ldr	r6, [pc, #220]	; (8001a7c <main+0x104>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	f042 0204 	orr.w	r2, r2, #4
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	699a      	ldr	r2, [r3, #24]
	queue = 1;
 80019a8:	4d35      	ldr	r5, [pc, #212]	; (8001a80 <main+0x108>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	f002 0204 	and.w	r2, r2, #4
 80019ae:	9203      	str	r2, [sp, #12]
 80019b0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b2:	695a      	ldr	r2, [r3, #20]
			HAL_UART_Transmit_DMA(&huart1, tx_buffer1, sizeof tx_buffer1/sizeof tx_buffer1[0]);
 80019b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001a88 <main+0x110>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c0:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80019c2:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80019cc:	f7ff f8b2 	bl	8000b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80019d0:	200e      	movs	r0, #14
 80019d2:	f7ff f8e3 	bl	8000b9c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 80019d6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019da:	482a      	ldr	r0, [pc, #168]	; (8001a84 <main+0x10c>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019dc:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80019de:	e884 0009 	stmia.w	r4, {r0, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e4:	4620      	mov	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e8:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ea:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ec:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ee:	61e3      	str	r3, [r4, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f0:	6162      	str	r2, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019f2:	f7ff fe03 	bl	80015fc <HAL_UART_Init>
	T = HAL_GetTick();
 80019f6:	f7ff f885 	bl	8000b04 <HAL_GetTick>
	queue = 1;
 80019fa:	2301      	movs	r3, #1
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, sizeof tx_buffer/sizeof tx_buffer[0]);
 80019fc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001a8c <main+0x114>
	T = HAL_GetTick();
 8001a00:	6030      	str	r0, [r6, #0]
	queue = 1;
 8001a02:	702b      	strb	r3, [r5, #0]
		if (HAL_GetTick() - T <= 1000 && queue != 255) {
 8001a04:	f7ff f87e 	bl	8000b04 <HAL_GetTick>
 8001a08:	6833      	ldr	r3, [r6, #0]
 8001a0a:	1ac0      	subs	r0, r0, r3
 8001a0c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a10:	d821      	bhi.n	8001a56 <main+0xde>
 8001a12:	782b      	ldrb	r3, [r5, #0]
 8001a14:	2bff      	cmp	r3, #255	; 0xff
 8001a16:	d01e      	beq.n	8001a56 <main+0xde>
			T = HAL_GetTick();
 8001a18:	f7ff f874 	bl	8000b04 <HAL_GetTick>
			if (queue == 1 && huart1.gState != HAL_UART_STATE_BUSY_TX){
 8001a1c:	782b      	ldrb	r3, [r5, #0]
			T = HAL_GetTick();
 8001a1e:	6030      	str	r0, [r6, #0]
			if (queue == 1 && huart1.gState != HAL_UART_STATE_BUSY_TX){
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10b      	bne.n	8001a3c <main+0xc4>
 8001a24:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001a28:	2b21      	cmp	r3, #33	; 0x21
 8001a2a:	d0eb      	beq.n	8001a04 <main+0x8c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, sizeof tx_buffer/sizeof tx_buffer[0]);
 8001a2c:	2216      	movs	r2, #22
 8001a2e:	4649      	mov	r1, r9
 8001a30:	4638      	mov	r0, r7
 8001a32:	f7ff fe11 	bl	8001658 <HAL_UART_Transmit_DMA>
			queue = 2;
 8001a36:	2302      	movs	r3, #2
			queue = 1;
 8001a38:	702b      	strb	r3, [r5, #0]
 8001a3a:	e7e3      	b.n	8001a04 <main+0x8c>
			else if (queue == 2 && huart1.gState != HAL_UART_STATE_BUSY_TX){
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d1e1      	bne.n	8001a04 <main+0x8c>
 8001a40:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001a44:	2b21      	cmp	r3, #33	; 0x21
 8001a46:	d0dd      	beq.n	8001a04 <main+0x8c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer1, sizeof tx_buffer1/sizeof tx_buffer1[0]);
 8001a48:	220d      	movs	r2, #13
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	4638      	mov	r0, r7
 8001a4e:	f7ff fe03 	bl	8001658 <HAL_UART_Transmit_DMA>
			queue = 255;
 8001a52:	23ff      	movs	r3, #255	; 0xff
 8001a54:	e7f0      	b.n	8001a38 <main+0xc0>
		else if (HAL_GetTick() - T >= 1000 && queue == 255){
 8001a56:	f7ff f855 	bl	8000b04 <HAL_GetTick>
 8001a5a:	6833      	ldr	r3, [r6, #0]
 8001a5c:	1ac0      	subs	r0, r0, r3
 8001a5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a62:	d3cf      	bcc.n	8001a04 <main+0x8c>
 8001a64:	782b      	ldrb	r3, [r5, #0]
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d1cc      	bne.n	8001a04 <main+0x8c>
			T = HAL_GetTick();
 8001a6a:	f7ff f84b 	bl	8000b04 <HAL_GetTick>
			queue = 1;
 8001a6e:	2301      	movs	r3, #1
			T = HAL_GetTick();
 8001a70:	6030      	str	r0, [r6, #0]
 8001a72:	e7e1      	b.n	8001a38 <main+0xc0>
 8001a74:	40021000 	.word	0x40021000
 8001a78:	200002b8 	.word	0x200002b8
 8001a7c:	20000270 	.word	0x20000270
 8001a80:	2000022c 	.word	0x2000022c
 8001a84:	40013800 	.word	0x40013800
 8001a88:	2000001e 	.word	0x2000001e
 8001a8c:	20000008 	.word	0x20000008

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_MspInit+0x3c>)
{
 8001a96:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	619a      	str	r2, [r3, #24]
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	f002 0201 	and.w	r2, r2, #1
 8001aa6:	9200      	str	r2, [sp, #0]
 8001aa8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ab0:	61da      	str	r2, [r3, #28]
 8001ab2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001abe:	6853      	ldr	r3, [r2, #4]
 8001ac0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	b002      	add	sp, #8
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010000 	.word	0x40010000

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	2710      	movs	r7, #16
{
 8001adc:	4606      	mov	r6, r0
 8001ade:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	463a      	mov	r2, r7
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	a802      	add	r0, sp, #8
 8001ae6:	f000 f8f9 	bl	8001cdc <memset>
  if(huart->Instance==USART1)
 8001aea:	6832      	ldr	r2, [r6, #0]
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_UART_MspInit+0xa8>)
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d143      	bne.n	8001b7a <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001af6:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001afe:	619a      	str	r2, [r3, #24]
 8001b00:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	4820      	ldr	r0, [pc, #128]	; (8001b84 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b04:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b08:	9200      	str	r2, [sp, #0]
 8001b0a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0e:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	f042 0204 	orr.w	r2, r2, #4
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001b18:	4c1b      	ldr	r4, [pc, #108]	; (8001b88 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b26:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f7ff f9a2 	bl	8000e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	4812      	ldr	r0, [pc, #72]	; (8001b84 <HAL_UART_MspInit+0xac>)
 8001b3a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b3c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f7ff f999 	bl	8000e78 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_UART_MspInit+0xb4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b48:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4a:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b4e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b52:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b54:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b56:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b58:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5a:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b5c:	f7ff f842 	bl	8000be4 <HAL_DMA_Init>
 8001b60:	b108      	cbz	r0, 8001b66 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8001b62:	f7ff ff95 	bl	8001a90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b6a:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b6c:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b6e:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	f7fe ffe0 	bl	8000b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b74:	2025      	movs	r0, #37	; 0x25
 8001b76:	f7ff f811 	bl	8000b9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b7a:	b007      	add	sp, #28
 8001b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40010800 	.word	0x40010800
 8001b88:	20000274 	.word	0x20000274
 8001b8c:	40020044 	.word	0x40020044

08001b90 <NMI_Handler>:
 8001b90:	4770      	bx	lr

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	e7fe      	b.n	8001b92 <HardFault_Handler>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	e7fe      	b.n	8001b94 <MemManage_Handler>

08001b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler>

08001b9a <SVC_Handler>:
 8001b9a:	4770      	bx	lr

08001b9c <DebugMon_Handler>:
 8001b9c:	4770      	bx	lr

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f7fe bfa4 	b.w	8000aec <HAL_IncTick>

08001ba4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ba4:	4801      	ldr	r0, [pc, #4]	; (8001bac <DMA1_Channel4_IRQHandler+0x8>)
 8001ba6:	f7ff b8d3 	b.w	8000d50 <HAL_DMA_IRQHandler>
 8001baa:	bf00      	nop
 8001bac:	20000274 	.word	0x20000274

08001bb0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bb0:	4801      	ldr	r0, [pc, #4]	; (8001bb8 <USART1_IRQHandler+0x8>)
 8001bb2:	f7ff be0f 	b.w	80017d4 <HAL_UART_IRQHandler>
 8001bb6:	bf00      	nop
 8001bb8:	200002b8 	.word	0x200002b8

08001bbc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001bbc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <_sbrk+0x2c>)
{
 8001bc0:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001bc2:	6819      	ldr	r1, [r3, #0]
 8001bc4:	b909      	cbnz	r1, 8001bca <_sbrk+0xe>
		heap_end = &end;
 8001bc6:	4909      	ldr	r1, [pc, #36]	; (8001bec <_sbrk+0x30>)
 8001bc8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001bca:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001bcc:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001bce:	4402      	add	r2, r0
 8001bd0:	428a      	cmp	r2, r1
 8001bd2:	d906      	bls.n	8001be2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001bd4:	f000 f858 	bl	8001c88 <__errno>
 8001bd8:	230c      	movs	r3, #12
 8001bda:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001be2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001be4:	bd08      	pop	{r3, pc}
 8001be6:	bf00      	nop
 8001be8:	2000021c 	.word	0x2000021c
 8001bec:	200002fc 	.word	0x200002fc

08001bf0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <SystemInit+0x40>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	f042 0201 	orr.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <SystemInit+0x44>)
 8001bfe:	400a      	ands	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c0c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c14:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001c1c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c1e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c22:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <SystemInit+0x48>)
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	f8ff0000 	.word	0xf8ff0000
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c3e:	e003      	b.n	8001c48 <LoopCopyDataInit>

08001c40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c46:	3104      	adds	r1, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c48:	480a      	ldr	r0, [pc, #40]	; (8001c74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c50:	d3f6      	bcc.n	8001c40 <CopyDataInit>
  ldr r2, =_sbss
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c54:	e002      	b.n	8001c5c <LoopFillZerobss>

08001c56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c58:	f842 3b04 	str.w	r3, [r2], #4

08001c5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c60:	d3f9      	bcc.n	8001c56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c62:	f7ff ffc5 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c66:	f000 f815 	bl	8001c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6a:	f7ff fe85 	bl	8001978 <main>
  bx lr
 8001c6e:	4770      	bx	lr
  ldr r3, =_sidata
 8001c70:	080039c0 	.word	0x080039c0
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c78:	20000200 	.word	0x20000200
  ldr r2, =_sbss
 8001c7c:	20000200 	.word	0x20000200
  ldr r3, = _ebss
 8001c80:	200002fc 	.word	0x200002fc

08001c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c84:	e7fe      	b.n	8001c84 <ADC1_2_IRQHandler>
	...

08001c88 <__errno>:
 8001c88:	4b01      	ldr	r3, [pc, #4]	; (8001c90 <__errno+0x8>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000030 	.word	0x20000030

08001c94 <__libc_init_array>:
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	2500      	movs	r5, #0
 8001c98:	4e0c      	ldr	r6, [pc, #48]	; (8001ccc <__libc_init_array+0x38>)
 8001c9a:	4c0d      	ldr	r4, [pc, #52]	; (8001cd0 <__libc_init_array+0x3c>)
 8001c9c:	1ba4      	subs	r4, r4, r6
 8001c9e:	10a4      	asrs	r4, r4, #2
 8001ca0:	42a5      	cmp	r5, r4
 8001ca2:	d109      	bne.n	8001cb8 <__libc_init_array+0x24>
 8001ca4:	f001 fd54 	bl	8003750 <_init>
 8001ca8:	2500      	movs	r5, #0
 8001caa:	4e0a      	ldr	r6, [pc, #40]	; (8001cd4 <__libc_init_array+0x40>)
 8001cac:	4c0a      	ldr	r4, [pc, #40]	; (8001cd8 <__libc_init_array+0x44>)
 8001cae:	1ba4      	subs	r4, r4, r6
 8001cb0:	10a4      	asrs	r4, r4, #2
 8001cb2:	42a5      	cmp	r5, r4
 8001cb4:	d105      	bne.n	8001cc2 <__libc_init_array+0x2e>
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cbc:	4798      	blx	r3
 8001cbe:	3501      	adds	r5, #1
 8001cc0:	e7ee      	b.n	8001ca0 <__libc_init_array+0xc>
 8001cc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cc6:	4798      	blx	r3
 8001cc8:	3501      	adds	r5, #1
 8001cca:	e7f2      	b.n	8001cb2 <__libc_init_array+0x1e>
 8001ccc:	080039b8 	.word	0x080039b8
 8001cd0:	080039b8 	.word	0x080039b8
 8001cd4:	080039b8 	.word	0x080039b8
 8001cd8:	080039bc 	.word	0x080039bc

08001cdc <memset>:
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4402      	add	r2, r0
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <memset+0xa>
 8001ce4:	4770      	bx	lr
 8001ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cea:	e7f9      	b.n	8001ce0 <memset+0x4>

08001cec <__cvt>:
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf2:	461e      	mov	r6, r3
 8001cf4:	bfbb      	ittet	lt
 8001cf6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8001cfa:	461e      	movlt	r6, r3
 8001cfc:	2300      	movge	r3, #0
 8001cfe:	232d      	movlt	r3, #45	; 0x2d
 8001d00:	b088      	sub	sp, #32
 8001d02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001d04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001d06:	f027 0720 	bic.w	r7, r7, #32
 8001d0a:	2f46      	cmp	r7, #70	; 0x46
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001d10:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8001d14:	700b      	strb	r3, [r1, #0]
 8001d16:	d004      	beq.n	8001d22 <__cvt+0x36>
 8001d18:	2f45      	cmp	r7, #69	; 0x45
 8001d1a:	d100      	bne.n	8001d1e <__cvt+0x32>
 8001d1c:	3501      	adds	r5, #1
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e000      	b.n	8001d24 <__cvt+0x38>
 8001d22:	2303      	movs	r3, #3
 8001d24:	aa07      	add	r2, sp, #28
 8001d26:	9204      	str	r2, [sp, #16]
 8001d28:	aa06      	add	r2, sp, #24
 8001d2a:	9203      	str	r2, [sp, #12]
 8001d2c:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8001d30:	4622      	mov	r2, r4
 8001d32:	4633      	mov	r3, r6
 8001d34:	f000 fba8 	bl	8002488 <_dtoa_r>
 8001d38:	2f47      	cmp	r7, #71	; 0x47
 8001d3a:	4680      	mov	r8, r0
 8001d3c:	d102      	bne.n	8001d44 <__cvt+0x58>
 8001d3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001d40:	07db      	lsls	r3, r3, #31
 8001d42:	d526      	bpl.n	8001d92 <__cvt+0xa6>
 8001d44:	2f46      	cmp	r7, #70	; 0x46
 8001d46:	eb08 0905 	add.w	r9, r8, r5
 8001d4a:	d111      	bne.n	8001d70 <__cvt+0x84>
 8001d4c:	f898 3000 	ldrb.w	r3, [r8]
 8001d50:	2b30      	cmp	r3, #48	; 0x30
 8001d52:	d10a      	bne.n	8001d6a <__cvt+0x7e>
 8001d54:	2200      	movs	r2, #0
 8001d56:	2300      	movs	r3, #0
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4631      	mov	r1, r6
 8001d5c:	f7fe fe20 	bl	80009a0 <__aeabi_dcmpeq>
 8001d60:	b918      	cbnz	r0, 8001d6a <__cvt+0x7e>
 8001d62:	f1c5 0501 	rsb	r5, r5, #1
 8001d66:	f8ca 5000 	str.w	r5, [sl]
 8001d6a:	f8da 3000 	ldr.w	r3, [sl]
 8001d6e:	4499      	add	r9, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	2300      	movs	r3, #0
 8001d74:	4620      	mov	r0, r4
 8001d76:	4631      	mov	r1, r6
 8001d78:	f7fe fe12 	bl	80009a0 <__aeabi_dcmpeq>
 8001d7c:	b938      	cbnz	r0, 8001d8e <__cvt+0xa2>
 8001d7e:	2230      	movs	r2, #48	; 0x30
 8001d80:	9b07      	ldr	r3, [sp, #28]
 8001d82:	4599      	cmp	r9, r3
 8001d84:	d905      	bls.n	8001d92 <__cvt+0xa6>
 8001d86:	1c59      	adds	r1, r3, #1
 8001d88:	9107      	str	r1, [sp, #28]
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e7f8      	b.n	8001d80 <__cvt+0x94>
 8001d8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8001d92:	4640      	mov	r0, r8
 8001d94:	9b07      	ldr	r3, [sp, #28]
 8001d96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001d98:	eba3 0308 	sub.w	r3, r3, r8
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	b008      	add	sp, #32
 8001da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001da4 <__exponent>:
 8001da4:	4603      	mov	r3, r0
 8001da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001da8:	2900      	cmp	r1, #0
 8001daa:	f803 2b02 	strb.w	r2, [r3], #2
 8001dae:	bfb6      	itet	lt
 8001db0:	222d      	movlt	r2, #45	; 0x2d
 8001db2:	222b      	movge	r2, #43	; 0x2b
 8001db4:	4249      	neglt	r1, r1
 8001db6:	2909      	cmp	r1, #9
 8001db8:	7042      	strb	r2, [r0, #1]
 8001dba:	dd21      	ble.n	8001e00 <__exponent+0x5c>
 8001dbc:	f10d 0207 	add.w	r2, sp, #7
 8001dc0:	4617      	mov	r7, r2
 8001dc2:	260a      	movs	r6, #10
 8001dc4:	fb91 f5f6 	sdiv	r5, r1, r6
 8001dc8:	fb06 1115 	mls	r1, r6, r5, r1
 8001dcc:	2d09      	cmp	r5, #9
 8001dce:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001dd2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001dd6:	f102 34ff 	add.w	r4, r2, #4294967295
 8001dda:	4629      	mov	r1, r5
 8001ddc:	dc09      	bgt.n	8001df2 <__exponent+0x4e>
 8001dde:	3130      	adds	r1, #48	; 0x30
 8001de0:	3a02      	subs	r2, #2
 8001de2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001de6:	42ba      	cmp	r2, r7
 8001de8:	461c      	mov	r4, r3
 8001dea:	d304      	bcc.n	8001df6 <__exponent+0x52>
 8001dec:	1a20      	subs	r0, r4, r0
 8001dee:	b003      	add	sp, #12
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df2:	4622      	mov	r2, r4
 8001df4:	e7e6      	b.n	8001dc4 <__exponent+0x20>
 8001df6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8001dfe:	e7f2      	b.n	8001de6 <__exponent+0x42>
 8001e00:	2230      	movs	r2, #48	; 0x30
 8001e02:	461c      	mov	r4, r3
 8001e04:	4411      	add	r1, r2
 8001e06:	f804 2b02 	strb.w	r2, [r4], #2
 8001e0a:	7059      	strb	r1, [r3, #1]
 8001e0c:	e7ee      	b.n	8001dec <__exponent+0x48>
	...

08001e10 <_printf_float>:
 8001e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e14:	b091      	sub	sp, #68	; 0x44
 8001e16:	460c      	mov	r4, r1
 8001e18:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001e1a:	4693      	mov	fp, r2
 8001e1c:	461e      	mov	r6, r3
 8001e1e:	4605      	mov	r5, r0
 8001e20:	f001 f906 	bl	8003030 <_localeconv_r>
 8001e24:	6803      	ldr	r3, [r0, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	9309      	str	r3, [sp, #36]	; 0x24
 8001e2a:	f7fe f991 	bl	8000150 <strlen>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	930e      	str	r3, [sp, #56]	; 0x38
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	900a      	str	r0, [sp, #40]	; 0x28
 8001e36:	3307      	adds	r3, #7
 8001e38:	f023 0307 	bic.w	r3, r3, #7
 8001e3c:	f103 0208 	add.w	r2, r3, #8
 8001e40:	f894 8018 	ldrb.w	r8, [r4, #24]
 8001e44:	f8d4 a000 	ldr.w	sl, [r4]
 8001e48:	603a      	str	r2, [r7, #0]
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001e52:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8001e56:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8001e58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001e5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e62:	4ba6      	ldr	r3, [pc, #664]	; (80020fc <_printf_float+0x2ec>)
 8001e64:	4638      	mov	r0, r7
 8001e66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001e68:	f7fe fdcc 	bl	8000a04 <__aeabi_dcmpun>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	f040 81f7 	bne.w	8002260 <_printf_float+0x450>
 8001e72:	f04f 32ff 	mov.w	r2, #4294967295
 8001e76:	4ba1      	ldr	r3, [pc, #644]	; (80020fc <_printf_float+0x2ec>)
 8001e78:	4638      	mov	r0, r7
 8001e7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001e7c:	f7fe fda4 	bl	80009c8 <__aeabi_dcmple>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	f040 81ed 	bne.w	8002260 <_printf_float+0x450>
 8001e86:	2200      	movs	r2, #0
 8001e88:	2300      	movs	r3, #0
 8001e8a:	4638      	mov	r0, r7
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	f7fe fd91 	bl	80009b4 <__aeabi_dcmplt>
 8001e92:	b110      	cbz	r0, 8001e9a <_printf_float+0x8a>
 8001e94:	232d      	movs	r3, #45	; 0x2d
 8001e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e9a:	4b99      	ldr	r3, [pc, #612]	; (8002100 <_printf_float+0x2f0>)
 8001e9c:	4f99      	ldr	r7, [pc, #612]	; (8002104 <_printf_float+0x2f4>)
 8001e9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001ea2:	bf98      	it	ls
 8001ea4:	461f      	movls	r7, r3
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	f04f 0900 	mov.w	r9, #0
 8001eac:	6123      	str	r3, [r4, #16]
 8001eae:	f02a 0304 	bic.w	r3, sl, #4
 8001eb2:	6023      	str	r3, [r4, #0]
 8001eb4:	9600      	str	r6, [sp, #0]
 8001eb6:	465b      	mov	r3, fp
 8001eb8:	aa0f      	add	r2, sp, #60	; 0x3c
 8001eba:	4621      	mov	r1, r4
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	f000 f9df 	bl	8002280 <_printf_common>
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	f040 809a 	bne.w	8001ffc <_printf_float+0x1ec>
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	b011      	add	sp, #68	; 0x44
 8001ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ed2:	6862      	ldr	r2, [r4, #4]
 8001ed4:	a80e      	add	r0, sp, #56	; 0x38
 8001ed6:	1c53      	adds	r3, r2, #1
 8001ed8:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8001edc:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8001ee0:	d141      	bne.n	8001f66 <_printf_float+0x156>
 8001ee2:	2206      	movs	r2, #6
 8001ee4:	6062      	str	r2, [r4, #4]
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	6863      	ldr	r3, [r4, #4]
 8001eee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8001ef2:	9005      	str	r0, [sp, #20]
 8001ef4:	9202      	str	r2, [sp, #8]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	463a      	mov	r2, r7
 8001efa:	464b      	mov	r3, r9
 8001efc:	9106      	str	r1, [sp, #24]
 8001efe:	f8cd 8010 	str.w	r8, [sp, #16]
 8001f02:	f8cd e00c 	str.w	lr, [sp, #12]
 8001f06:	4628      	mov	r0, r5
 8001f08:	f7ff fef0 	bl	8001cec <__cvt>
 8001f0c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8001f10:	2b47      	cmp	r3, #71	; 0x47
 8001f12:	4607      	mov	r7, r0
 8001f14:	d109      	bne.n	8001f2a <_printf_float+0x11a>
 8001f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f18:	1cd8      	adds	r0, r3, #3
 8001f1a:	db02      	blt.n	8001f22 <_printf_float+0x112>
 8001f1c:	6862      	ldr	r2, [r4, #4]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	dd59      	ble.n	8001fd6 <_printf_float+0x1c6>
 8001f22:	f1a8 0802 	sub.w	r8, r8, #2
 8001f26:	fa5f f888 	uxtb.w	r8, r8
 8001f2a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001f2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001f30:	d836      	bhi.n	8001fa0 <_printf_float+0x190>
 8001f32:	3901      	subs	r1, #1
 8001f34:	4642      	mov	r2, r8
 8001f36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001f3a:	910d      	str	r1, [sp, #52]	; 0x34
 8001f3c:	f7ff ff32 	bl	8001da4 <__exponent>
 8001f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001f42:	4681      	mov	r9, r0
 8001f44:	1883      	adds	r3, r0, r2
 8001f46:	2a01      	cmp	r2, #1
 8001f48:	6123      	str	r3, [r4, #16]
 8001f4a:	dc02      	bgt.n	8001f52 <_printf_float+0x142>
 8001f4c:	6822      	ldr	r2, [r4, #0]
 8001f4e:	07d1      	lsls	r1, r2, #31
 8001f50:	d501      	bpl.n	8001f56 <_printf_float+0x146>
 8001f52:	3301      	adds	r3, #1
 8001f54:	6123      	str	r3, [r4, #16]
 8001f56:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0aa      	beq.n	8001eb4 <_printf_float+0xa4>
 8001f5e:	232d      	movs	r3, #45	; 0x2d
 8001f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f64:	e7a6      	b.n	8001eb4 <_printf_float+0xa4>
 8001f66:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8001f6a:	d002      	beq.n	8001f72 <_printf_float+0x162>
 8001f6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001f70:	d1b9      	bne.n	8001ee6 <_printf_float+0xd6>
 8001f72:	b19a      	cbz	r2, 8001f9c <_printf_float+0x18c>
 8001f74:	2100      	movs	r1, #0
 8001f76:	9106      	str	r1, [sp, #24]
 8001f78:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8001f7c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001f80:	6023      	str	r3, [r4, #0]
 8001f82:	9005      	str	r0, [sp, #20]
 8001f84:	463a      	mov	r2, r7
 8001f86:	f8cd 8010 	str.w	r8, [sp, #16]
 8001f8a:	f8cd e00c 	str.w	lr, [sp, #12]
 8001f8e:	9102      	str	r1, [sp, #8]
 8001f90:	464b      	mov	r3, r9
 8001f92:	4628      	mov	r0, r5
 8001f94:	f7ff feaa 	bl	8001cec <__cvt>
 8001f98:	4607      	mov	r7, r0
 8001f9a:	e7bc      	b.n	8001f16 <_printf_float+0x106>
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	e7a1      	b.n	8001ee4 <_printf_float+0xd4>
 8001fa0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8001fa4:	d119      	bne.n	8001fda <_printf_float+0x1ca>
 8001fa6:	2900      	cmp	r1, #0
 8001fa8:	6863      	ldr	r3, [r4, #4]
 8001faa:	dd0c      	ble.n	8001fc6 <_printf_float+0x1b6>
 8001fac:	6121      	str	r1, [r4, #16]
 8001fae:	b913      	cbnz	r3, 8001fb6 <_printf_float+0x1a6>
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	07d2      	lsls	r2, r2, #31
 8001fb4:	d502      	bpl.n	8001fbc <_printf_float+0x1ac>
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	440b      	add	r3, r1
 8001fba:	6123      	str	r3, [r4, #16]
 8001fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fbe:	f04f 0900 	mov.w	r9, #0
 8001fc2:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fc4:	e7c7      	b.n	8001f56 <_printf_float+0x146>
 8001fc6:	b913      	cbnz	r3, 8001fce <_printf_float+0x1be>
 8001fc8:	6822      	ldr	r2, [r4, #0]
 8001fca:	07d0      	lsls	r0, r2, #31
 8001fcc:	d501      	bpl.n	8001fd2 <_printf_float+0x1c2>
 8001fce:	3302      	adds	r3, #2
 8001fd0:	e7f3      	b.n	8001fba <_printf_float+0x1aa>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e7f1      	b.n	8001fba <_printf_float+0x1aa>
 8001fd6:	f04f 0867 	mov.w	r8, #103	; 0x67
 8001fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	db05      	blt.n	8001fee <_printf_float+0x1de>
 8001fe2:	6822      	ldr	r2, [r4, #0]
 8001fe4:	6123      	str	r3, [r4, #16]
 8001fe6:	07d1      	lsls	r1, r2, #31
 8001fe8:	d5e8      	bpl.n	8001fbc <_printf_float+0x1ac>
 8001fea:	3301      	adds	r3, #1
 8001fec:	e7e5      	b.n	8001fba <_printf_float+0x1aa>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bfcc      	ite	gt
 8001ff2:	2301      	movgt	r3, #1
 8001ff4:	f1c3 0302 	rsble	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	e7de      	b.n	8001fba <_printf_float+0x1aa>
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	055a      	lsls	r2, r3, #21
 8002000:	d407      	bmi.n	8002012 <_printf_float+0x202>
 8002002:	6923      	ldr	r3, [r4, #16]
 8002004:	463a      	mov	r2, r7
 8002006:	4659      	mov	r1, fp
 8002008:	4628      	mov	r0, r5
 800200a:	47b0      	blx	r6
 800200c:	3001      	adds	r0, #1
 800200e:	d12a      	bne.n	8002066 <_printf_float+0x256>
 8002010:	e75a      	b.n	8001ec8 <_printf_float+0xb8>
 8002012:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002016:	f240 80dc 	bls.w	80021d2 <_printf_float+0x3c2>
 800201a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800201e:	2200      	movs	r2, #0
 8002020:	2300      	movs	r3, #0
 8002022:	f7fe fcbd 	bl	80009a0 <__aeabi_dcmpeq>
 8002026:	2800      	cmp	r0, #0
 8002028:	d039      	beq.n	800209e <_printf_float+0x28e>
 800202a:	2301      	movs	r3, #1
 800202c:	4a36      	ldr	r2, [pc, #216]	; (8002108 <_printf_float+0x2f8>)
 800202e:	4659      	mov	r1, fp
 8002030:	4628      	mov	r0, r5
 8002032:	47b0      	blx	r6
 8002034:	3001      	adds	r0, #1
 8002036:	f43f af47 	beq.w	8001ec8 <_printf_float+0xb8>
 800203a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800203c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800203e:	429a      	cmp	r2, r3
 8002040:	db02      	blt.n	8002048 <_printf_float+0x238>
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	07d8      	lsls	r0, r3, #31
 8002046:	d50e      	bpl.n	8002066 <_printf_float+0x256>
 8002048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800204a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800204c:	4659      	mov	r1, fp
 800204e:	4628      	mov	r0, r5
 8002050:	47b0      	blx	r6
 8002052:	3001      	adds	r0, #1
 8002054:	f43f af38 	beq.w	8001ec8 <_printf_float+0xb8>
 8002058:	2700      	movs	r7, #0
 800205a:	f104 081a 	add.w	r8, r4, #26
 800205e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002060:	3b01      	subs	r3, #1
 8002062:	429f      	cmp	r7, r3
 8002064:	db11      	blt.n	800208a <_printf_float+0x27a>
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	079f      	lsls	r7, r3, #30
 800206a:	d508      	bpl.n	800207e <_printf_float+0x26e>
 800206c:	2700      	movs	r7, #0
 800206e:	f104 0819 	add.w	r8, r4, #25
 8002072:	68e3      	ldr	r3, [r4, #12]
 8002074:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	429f      	cmp	r7, r3
 800207a:	f2c0 80e7 	blt.w	800224c <_printf_float+0x43c>
 800207e:	68e0      	ldr	r0, [r4, #12]
 8002080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002082:	4298      	cmp	r0, r3
 8002084:	bfb8      	it	lt
 8002086:	4618      	movlt	r0, r3
 8002088:	e720      	b.n	8001ecc <_printf_float+0xbc>
 800208a:	2301      	movs	r3, #1
 800208c:	4642      	mov	r2, r8
 800208e:	4659      	mov	r1, fp
 8002090:	4628      	mov	r0, r5
 8002092:	47b0      	blx	r6
 8002094:	3001      	adds	r0, #1
 8002096:	f43f af17 	beq.w	8001ec8 <_printf_float+0xb8>
 800209a:	3701      	adds	r7, #1
 800209c:	e7df      	b.n	800205e <_printf_float+0x24e>
 800209e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dc33      	bgt.n	800210c <_printf_float+0x2fc>
 80020a4:	2301      	movs	r3, #1
 80020a6:	4a18      	ldr	r2, [pc, #96]	; (8002108 <_printf_float+0x2f8>)
 80020a8:	4659      	mov	r1, fp
 80020aa:	4628      	mov	r0, r5
 80020ac:	47b0      	blx	r6
 80020ae:	3001      	adds	r0, #1
 80020b0:	f43f af0a 	beq.w	8001ec8 <_printf_float+0xb8>
 80020b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020b6:	b923      	cbnz	r3, 80020c2 <_printf_float+0x2b2>
 80020b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020ba:	b913      	cbnz	r3, 80020c2 <_printf_float+0x2b2>
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	07d9      	lsls	r1, r3, #31
 80020c0:	d5d1      	bpl.n	8002066 <_printf_float+0x256>
 80020c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020c6:	4659      	mov	r1, fp
 80020c8:	4628      	mov	r0, r5
 80020ca:	47b0      	blx	r6
 80020cc:	3001      	adds	r0, #1
 80020ce:	f43f aefb 	beq.w	8001ec8 <_printf_float+0xb8>
 80020d2:	f04f 0800 	mov.w	r8, #0
 80020d6:	f104 091a 	add.w	r9, r4, #26
 80020da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020dc:	425b      	negs	r3, r3
 80020de:	4598      	cmp	r8, r3
 80020e0:	db01      	blt.n	80020e6 <_printf_float+0x2d6>
 80020e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020e4:	e78e      	b.n	8002004 <_printf_float+0x1f4>
 80020e6:	2301      	movs	r3, #1
 80020e8:	464a      	mov	r2, r9
 80020ea:	4659      	mov	r1, fp
 80020ec:	4628      	mov	r0, r5
 80020ee:	47b0      	blx	r6
 80020f0:	3001      	adds	r0, #1
 80020f2:	f43f aee9 	beq.w	8001ec8 <_printf_float+0xb8>
 80020f6:	f108 0801 	add.w	r8, r8, #1
 80020fa:	e7ee      	b.n	80020da <_printf_float+0x2ca>
 80020fc:	7fefffff 	.word	0x7fefffff
 8002100:	08003790 	.word	0x08003790
 8002104:	08003794 	.word	0x08003794
 8002108:	080037a0 	.word	0x080037a0
 800210c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800210e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002110:	429a      	cmp	r2, r3
 8002112:	bfa8      	it	ge
 8002114:	461a      	movge	r2, r3
 8002116:	2a00      	cmp	r2, #0
 8002118:	4690      	mov	r8, r2
 800211a:	dc36      	bgt.n	800218a <_printf_float+0x37a>
 800211c:	f04f 0a00 	mov.w	sl, #0
 8002120:	f104 031a 	add.w	r3, r4, #26
 8002124:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002128:	930b      	str	r3, [sp, #44]	; 0x2c
 800212a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800212e:	eba9 0308 	sub.w	r3, r9, r8
 8002132:	459a      	cmp	sl, r3
 8002134:	db31      	blt.n	800219a <_printf_float+0x38a>
 8002136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800213a:	429a      	cmp	r2, r3
 800213c:	db38      	blt.n	80021b0 <_printf_float+0x3a0>
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	07da      	lsls	r2, r3, #31
 8002142:	d435      	bmi.n	80021b0 <_printf_float+0x3a0>
 8002144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002146:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002148:	eba3 0209 	sub.w	r2, r3, r9
 800214c:	eba3 0801 	sub.w	r8, r3, r1
 8002150:	4590      	cmp	r8, r2
 8002152:	bfa8      	it	ge
 8002154:	4690      	movge	r8, r2
 8002156:	f1b8 0f00 	cmp.w	r8, #0
 800215a:	dc31      	bgt.n	80021c0 <_printf_float+0x3b0>
 800215c:	2700      	movs	r7, #0
 800215e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002162:	f104 091a 	add.w	r9, r4, #26
 8002166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	eba3 0308 	sub.w	r3, r3, r8
 8002170:	429f      	cmp	r7, r3
 8002172:	f6bf af78 	bge.w	8002066 <_printf_float+0x256>
 8002176:	2301      	movs	r3, #1
 8002178:	464a      	mov	r2, r9
 800217a:	4659      	mov	r1, fp
 800217c:	4628      	mov	r0, r5
 800217e:	47b0      	blx	r6
 8002180:	3001      	adds	r0, #1
 8002182:	f43f aea1 	beq.w	8001ec8 <_printf_float+0xb8>
 8002186:	3701      	adds	r7, #1
 8002188:	e7ed      	b.n	8002166 <_printf_float+0x356>
 800218a:	4613      	mov	r3, r2
 800218c:	4659      	mov	r1, fp
 800218e:	463a      	mov	r2, r7
 8002190:	4628      	mov	r0, r5
 8002192:	47b0      	blx	r6
 8002194:	3001      	adds	r0, #1
 8002196:	d1c1      	bne.n	800211c <_printf_float+0x30c>
 8002198:	e696      	b.n	8001ec8 <_printf_float+0xb8>
 800219a:	2301      	movs	r3, #1
 800219c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800219e:	4659      	mov	r1, fp
 80021a0:	4628      	mov	r0, r5
 80021a2:	47b0      	blx	r6
 80021a4:	3001      	adds	r0, #1
 80021a6:	f43f ae8f 	beq.w	8001ec8 <_printf_float+0xb8>
 80021aa:	f10a 0a01 	add.w	sl, sl, #1
 80021ae:	e7bc      	b.n	800212a <_printf_float+0x31a>
 80021b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021b4:	4659      	mov	r1, fp
 80021b6:	4628      	mov	r0, r5
 80021b8:	47b0      	blx	r6
 80021ba:	3001      	adds	r0, #1
 80021bc:	d1c2      	bne.n	8002144 <_printf_float+0x334>
 80021be:	e683      	b.n	8001ec8 <_printf_float+0xb8>
 80021c0:	4643      	mov	r3, r8
 80021c2:	eb07 0209 	add.w	r2, r7, r9
 80021c6:	4659      	mov	r1, fp
 80021c8:	4628      	mov	r0, r5
 80021ca:	47b0      	blx	r6
 80021cc:	3001      	adds	r0, #1
 80021ce:	d1c5      	bne.n	800215c <_printf_float+0x34c>
 80021d0:	e67a      	b.n	8001ec8 <_printf_float+0xb8>
 80021d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80021d4:	2a01      	cmp	r2, #1
 80021d6:	dc01      	bgt.n	80021dc <_printf_float+0x3cc>
 80021d8:	07db      	lsls	r3, r3, #31
 80021da:	d534      	bpl.n	8002246 <_printf_float+0x436>
 80021dc:	2301      	movs	r3, #1
 80021de:	463a      	mov	r2, r7
 80021e0:	4659      	mov	r1, fp
 80021e2:	4628      	mov	r0, r5
 80021e4:	47b0      	blx	r6
 80021e6:	3001      	adds	r0, #1
 80021e8:	f43f ae6e 	beq.w	8001ec8 <_printf_float+0xb8>
 80021ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021f0:	4659      	mov	r1, fp
 80021f2:	4628      	mov	r0, r5
 80021f4:	47b0      	blx	r6
 80021f6:	3001      	adds	r0, #1
 80021f8:	f43f ae66 	beq.w	8001ec8 <_printf_float+0xb8>
 80021fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002200:	2200      	movs	r2, #0
 8002202:	2300      	movs	r3, #0
 8002204:	f7fe fbcc 	bl	80009a0 <__aeabi_dcmpeq>
 8002208:	b150      	cbz	r0, 8002220 <_printf_float+0x410>
 800220a:	2700      	movs	r7, #0
 800220c:	f104 081a 	add.w	r8, r4, #26
 8002210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002212:	3b01      	subs	r3, #1
 8002214:	429f      	cmp	r7, r3
 8002216:	db0c      	blt.n	8002232 <_printf_float+0x422>
 8002218:	464b      	mov	r3, r9
 800221a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800221e:	e6f2      	b.n	8002006 <_printf_float+0x1f6>
 8002220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002222:	1c7a      	adds	r2, r7, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	4659      	mov	r1, fp
 8002228:	4628      	mov	r0, r5
 800222a:	47b0      	blx	r6
 800222c:	3001      	adds	r0, #1
 800222e:	d1f3      	bne.n	8002218 <_printf_float+0x408>
 8002230:	e64a      	b.n	8001ec8 <_printf_float+0xb8>
 8002232:	2301      	movs	r3, #1
 8002234:	4642      	mov	r2, r8
 8002236:	4659      	mov	r1, fp
 8002238:	4628      	mov	r0, r5
 800223a:	47b0      	blx	r6
 800223c:	3001      	adds	r0, #1
 800223e:	f43f ae43 	beq.w	8001ec8 <_printf_float+0xb8>
 8002242:	3701      	adds	r7, #1
 8002244:	e7e4      	b.n	8002210 <_printf_float+0x400>
 8002246:	2301      	movs	r3, #1
 8002248:	463a      	mov	r2, r7
 800224a:	e7ec      	b.n	8002226 <_printf_float+0x416>
 800224c:	2301      	movs	r3, #1
 800224e:	4642      	mov	r2, r8
 8002250:	4659      	mov	r1, fp
 8002252:	4628      	mov	r0, r5
 8002254:	47b0      	blx	r6
 8002256:	3001      	adds	r0, #1
 8002258:	f43f ae36 	beq.w	8001ec8 <_printf_float+0xb8>
 800225c:	3701      	adds	r7, #1
 800225e:	e708      	b.n	8002072 <_printf_float+0x262>
 8002260:	463a      	mov	r2, r7
 8002262:	464b      	mov	r3, r9
 8002264:	4638      	mov	r0, r7
 8002266:	4649      	mov	r1, r9
 8002268:	f7fe fbcc 	bl	8000a04 <__aeabi_dcmpun>
 800226c:	2800      	cmp	r0, #0
 800226e:	f43f ae30 	beq.w	8001ed2 <_printf_float+0xc2>
 8002272:	4b01      	ldr	r3, [pc, #4]	; (8002278 <_printf_float+0x468>)
 8002274:	4f01      	ldr	r7, [pc, #4]	; (800227c <_printf_float+0x46c>)
 8002276:	e612      	b.n	8001e9e <_printf_float+0x8e>
 8002278:	08003798 	.word	0x08003798
 800227c:	0800379c 	.word	0x0800379c

08002280 <_printf_common>:
 8002280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002284:	4691      	mov	r9, r2
 8002286:	461f      	mov	r7, r3
 8002288:	688a      	ldr	r2, [r1, #8]
 800228a:	690b      	ldr	r3, [r1, #16]
 800228c:	4606      	mov	r6, r0
 800228e:	4293      	cmp	r3, r2
 8002290:	bfb8      	it	lt
 8002292:	4613      	movlt	r3, r2
 8002294:	f8c9 3000 	str.w	r3, [r9]
 8002298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800229c:	460c      	mov	r4, r1
 800229e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022a2:	b112      	cbz	r2, 80022aa <_printf_common+0x2a>
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c9 3000 	str.w	r3, [r9]
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	0699      	lsls	r1, r3, #26
 80022ae:	bf42      	ittt	mi
 80022b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80022b4:	3302      	addmi	r3, #2
 80022b6:	f8c9 3000 	strmi.w	r3, [r9]
 80022ba:	6825      	ldr	r5, [r4, #0]
 80022bc:	f015 0506 	ands.w	r5, r5, #6
 80022c0:	d107      	bne.n	80022d2 <_printf_common+0x52>
 80022c2:	f104 0a19 	add.w	sl, r4, #25
 80022c6:	68e3      	ldr	r3, [r4, #12]
 80022c8:	f8d9 2000 	ldr.w	r2, [r9]
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	429d      	cmp	r5, r3
 80022d0:	db2a      	blt.n	8002328 <_printf_common+0xa8>
 80022d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	3300      	adds	r3, #0
 80022da:	bf18      	it	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	0692      	lsls	r2, r2, #26
 80022e0:	d42f      	bmi.n	8002342 <_printf_common+0xc2>
 80022e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022e6:	4639      	mov	r1, r7
 80022e8:	4630      	mov	r0, r6
 80022ea:	47c0      	blx	r8
 80022ec:	3001      	adds	r0, #1
 80022ee:	d022      	beq.n	8002336 <_printf_common+0xb6>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	68e5      	ldr	r5, [r4, #12]
 80022f4:	f003 0306 	and.w	r3, r3, #6
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	bf18      	it	ne
 80022fc:	2500      	movne	r5, #0
 80022fe:	f8d9 2000 	ldr.w	r2, [r9]
 8002302:	f04f 0900 	mov.w	r9, #0
 8002306:	bf08      	it	eq
 8002308:	1aad      	subeq	r5, r5, r2
 800230a:	68a3      	ldr	r3, [r4, #8]
 800230c:	6922      	ldr	r2, [r4, #16]
 800230e:	bf08      	it	eq
 8002310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002314:	4293      	cmp	r3, r2
 8002316:	bfc4      	itt	gt
 8002318:	1a9b      	subgt	r3, r3, r2
 800231a:	18ed      	addgt	r5, r5, r3
 800231c:	341a      	adds	r4, #26
 800231e:	454d      	cmp	r5, r9
 8002320:	d11b      	bne.n	800235a <_printf_common+0xda>
 8002322:	2000      	movs	r0, #0
 8002324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002328:	2301      	movs	r3, #1
 800232a:	4652      	mov	r2, sl
 800232c:	4639      	mov	r1, r7
 800232e:	4630      	mov	r0, r6
 8002330:	47c0      	blx	r8
 8002332:	3001      	adds	r0, #1
 8002334:	d103      	bne.n	800233e <_printf_common+0xbe>
 8002336:	f04f 30ff 	mov.w	r0, #4294967295
 800233a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800233e:	3501      	adds	r5, #1
 8002340:	e7c1      	b.n	80022c6 <_printf_common+0x46>
 8002342:	2030      	movs	r0, #48	; 0x30
 8002344:	18e1      	adds	r1, r4, r3
 8002346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002350:	4422      	add	r2, r4
 8002352:	3302      	adds	r3, #2
 8002354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002358:	e7c3      	b.n	80022e2 <_printf_common+0x62>
 800235a:	2301      	movs	r3, #1
 800235c:	4622      	mov	r2, r4
 800235e:	4639      	mov	r1, r7
 8002360:	4630      	mov	r0, r6
 8002362:	47c0      	blx	r8
 8002364:	3001      	adds	r0, #1
 8002366:	d0e6      	beq.n	8002336 <_printf_common+0xb6>
 8002368:	f109 0901 	add.w	r9, r9, #1
 800236c:	e7d7      	b.n	800231e <_printf_common+0x9e>

0800236e <quorem>:
 800236e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002372:	6903      	ldr	r3, [r0, #16]
 8002374:	690c      	ldr	r4, [r1, #16]
 8002376:	4680      	mov	r8, r0
 8002378:	429c      	cmp	r4, r3
 800237a:	f300 8082 	bgt.w	8002482 <quorem+0x114>
 800237e:	3c01      	subs	r4, #1
 8002380:	f101 0714 	add.w	r7, r1, #20
 8002384:	f100 0614 	add.w	r6, r0, #20
 8002388:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800238c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002390:	3501      	adds	r5, #1
 8002392:	fbb0 f5f5 	udiv	r5, r0, r5
 8002396:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800239a:	eb06 030e 	add.w	r3, r6, lr
 800239e:	eb07 090e 	add.w	r9, r7, lr
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	b38d      	cbz	r5, 800240a <quorem+0x9c>
 80023a6:	f04f 0a00 	mov.w	sl, #0
 80023aa:	4638      	mov	r0, r7
 80023ac:	46b4      	mov	ip, r6
 80023ae:	46d3      	mov	fp, sl
 80023b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80023b4:	b293      	uxth	r3, r2
 80023b6:	fb05 a303 	mla	r3, r5, r3, sl
 80023ba:	0c12      	lsrs	r2, r2, #16
 80023bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80023c0:	fb05 a202 	mla	r2, r5, r2, sl
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	ebab 0303 	sub.w	r3, fp, r3
 80023ca:	f8bc b000 	ldrh.w	fp, [ip]
 80023ce:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80023d2:	445b      	add	r3, fp
 80023d4:	fa1f fb82 	uxth.w	fp, r2
 80023d8:	f8dc 2000 	ldr.w	r2, [ip]
 80023dc:	4581      	cmp	r9, r0
 80023de:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80023e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80023f0:	f84c 3b04 	str.w	r3, [ip], #4
 80023f4:	d2dc      	bcs.n	80023b0 <quorem+0x42>
 80023f6:	f856 300e 	ldr.w	r3, [r6, lr]
 80023fa:	b933      	cbnz	r3, 800240a <quorem+0x9c>
 80023fc:	9b01      	ldr	r3, [sp, #4]
 80023fe:	3b04      	subs	r3, #4
 8002400:	429e      	cmp	r6, r3
 8002402:	461a      	mov	r2, r3
 8002404:	d331      	bcc.n	800246a <quorem+0xfc>
 8002406:	f8c8 4010 	str.w	r4, [r8, #16]
 800240a:	4640      	mov	r0, r8
 800240c:	f001 f839 	bl	8003482 <__mcmp>
 8002410:	2800      	cmp	r0, #0
 8002412:	db26      	blt.n	8002462 <quorem+0xf4>
 8002414:	4630      	mov	r0, r6
 8002416:	f04f 0e00 	mov.w	lr, #0
 800241a:	3501      	adds	r5, #1
 800241c:	f857 1b04 	ldr.w	r1, [r7], #4
 8002420:	f8d0 c000 	ldr.w	ip, [r0]
 8002424:	b28b      	uxth	r3, r1
 8002426:	ebae 0303 	sub.w	r3, lr, r3
 800242a:	fa1f f28c 	uxth.w	r2, ip
 800242e:	4413      	add	r3, r2
 8002430:	0c0a      	lsrs	r2, r1, #16
 8002432:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002436:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800243a:	b29b      	uxth	r3, r3
 800243c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002440:	45b9      	cmp	r9, r7
 8002442:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002446:	f840 3b04 	str.w	r3, [r0], #4
 800244a:	d2e7      	bcs.n	800241c <quorem+0xae>
 800244c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002450:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002454:	b92a      	cbnz	r2, 8002462 <quorem+0xf4>
 8002456:	3b04      	subs	r3, #4
 8002458:	429e      	cmp	r6, r3
 800245a:	461a      	mov	r2, r3
 800245c:	d30b      	bcc.n	8002476 <quorem+0x108>
 800245e:	f8c8 4010 	str.w	r4, [r8, #16]
 8002462:	4628      	mov	r0, r5
 8002464:	b003      	add	sp, #12
 8002466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	3b04      	subs	r3, #4
 800246e:	2a00      	cmp	r2, #0
 8002470:	d1c9      	bne.n	8002406 <quorem+0x98>
 8002472:	3c01      	subs	r4, #1
 8002474:	e7c4      	b.n	8002400 <quorem+0x92>
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	3b04      	subs	r3, #4
 800247a:	2a00      	cmp	r2, #0
 800247c:	d1ef      	bne.n	800245e <quorem+0xf0>
 800247e:	3c01      	subs	r4, #1
 8002480:	e7ea      	b.n	8002458 <quorem+0xea>
 8002482:	2000      	movs	r0, #0
 8002484:	e7ee      	b.n	8002464 <quorem+0xf6>
	...

08002488 <_dtoa_r>:
 8002488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800248c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800248e:	b095      	sub	sp, #84	; 0x54
 8002490:	4604      	mov	r4, r0
 8002492:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002498:	b93e      	cbnz	r6, 80024aa <_dtoa_r+0x22>
 800249a:	2010      	movs	r0, #16
 800249c:	f000 fdd6 	bl	800304c <malloc>
 80024a0:	6260      	str	r0, [r4, #36]	; 0x24
 80024a2:	6046      	str	r6, [r0, #4]
 80024a4:	6086      	str	r6, [r0, #8]
 80024a6:	6006      	str	r6, [r0, #0]
 80024a8:	60c6      	str	r6, [r0, #12]
 80024aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	b151      	cbz	r1, 80024c6 <_dtoa_r+0x3e>
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	2301      	movs	r3, #1
 80024b4:	4093      	lsls	r3, r2
 80024b6:	604a      	str	r2, [r1, #4]
 80024b8:	608b      	str	r3, [r1, #8]
 80024ba:	4620      	mov	r0, r4
 80024bc:	f000 fe0d 	bl	80030da <_Bfree>
 80024c0:	2200      	movs	r2, #0
 80024c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	9b03      	ldr	r3, [sp, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bfb7      	itett	lt
 80024cc:	2301      	movlt	r3, #1
 80024ce:	2300      	movge	r3, #0
 80024d0:	602b      	strlt	r3, [r5, #0]
 80024d2:	9b03      	ldrlt	r3, [sp, #12]
 80024d4:	bfae      	itee	ge
 80024d6:	602b      	strge	r3, [r5, #0]
 80024d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80024dc:	9303      	strlt	r3, [sp, #12]
 80024de:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80024e2:	4bab      	ldr	r3, [pc, #684]	; (8002790 <_dtoa_r+0x308>)
 80024e4:	ea33 0309 	bics.w	r3, r3, r9
 80024e8:	d11b      	bne.n	8002522 <_dtoa_r+0x9a>
 80024ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80024ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	9b02      	ldr	r3, [sp, #8]
 80024f4:	b923      	cbnz	r3, 8002500 <_dtoa_r+0x78>
 80024f6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80024fa:	2800      	cmp	r0, #0
 80024fc:	f000 8583 	beq.w	8003006 <_dtoa_r+0xb7e>
 8002500:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002502:	b953      	cbnz	r3, 800251a <_dtoa_r+0x92>
 8002504:	4ba3      	ldr	r3, [pc, #652]	; (8002794 <_dtoa_r+0x30c>)
 8002506:	e021      	b.n	800254c <_dtoa_r+0xc4>
 8002508:	4ba3      	ldr	r3, [pc, #652]	; (8002798 <_dtoa_r+0x310>)
 800250a:	9306      	str	r3, [sp, #24]
 800250c:	3308      	adds	r3, #8
 800250e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	9806      	ldr	r0, [sp, #24]
 8002514:	b015      	add	sp, #84	; 0x54
 8002516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800251a:	4b9e      	ldr	r3, [pc, #632]	; (8002794 <_dtoa_r+0x30c>)
 800251c:	9306      	str	r3, [sp, #24]
 800251e:	3303      	adds	r3, #3
 8002520:	e7f5      	b.n	800250e <_dtoa_r+0x86>
 8002522:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	2300      	movs	r3, #0
 800252a:	4630      	mov	r0, r6
 800252c:	4639      	mov	r1, r7
 800252e:	f7fe fa37 	bl	80009a0 <__aeabi_dcmpeq>
 8002532:	4680      	mov	r8, r0
 8002534:	b160      	cbz	r0, 8002550 <_dtoa_r+0xc8>
 8002536:	2301      	movs	r3, #1
 8002538:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 855e 	beq.w	8003000 <_dtoa_r+0xb78>
 8002544:	4b95      	ldr	r3, [pc, #596]	; (800279c <_dtoa_r+0x314>)
 8002546:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	9306      	str	r3, [sp, #24]
 800254e:	e7e0      	b.n	8002512 <_dtoa_r+0x8a>
 8002550:	ab12      	add	r3, sp, #72	; 0x48
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	ab13      	add	r3, sp, #76	; 0x4c
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4632      	mov	r2, r6
 800255a:	463b      	mov	r3, r7
 800255c:	4620      	mov	r0, r4
 800255e:	f001 f809 	bl	8003574 <__d2b>
 8002562:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002566:	4682      	mov	sl, r0
 8002568:	2d00      	cmp	r5, #0
 800256a:	d07d      	beq.n	8002668 <_dtoa_r+0x1e0>
 800256c:	4630      	mov	r0, r6
 800256e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002572:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002576:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800257a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800257e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002582:	2200      	movs	r2, #0
 8002584:	4b86      	ldr	r3, [pc, #536]	; (80027a0 <_dtoa_r+0x318>)
 8002586:	f7fd fdef 	bl	8000168 <__aeabi_dsub>
 800258a:	a37b      	add	r3, pc, #492	; (adr r3, 8002778 <_dtoa_r+0x2f0>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f7fd ff9e 	bl	80004d0 <__aeabi_dmul>
 8002594:	a37a      	add	r3, pc, #488	; (adr r3, 8002780 <_dtoa_r+0x2f8>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fd fde7 	bl	800016c <__adddf3>
 800259e:	4606      	mov	r6, r0
 80025a0:	4628      	mov	r0, r5
 80025a2:	460f      	mov	r7, r1
 80025a4:	f7fd ff2e 	bl	8000404 <__aeabi_i2d>
 80025a8:	a377      	add	r3, pc, #476	; (adr r3, 8002788 <_dtoa_r+0x300>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fd ff8f 	bl	80004d0 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4630      	mov	r0, r6
 80025b8:	4639      	mov	r1, r7
 80025ba:	f7fd fdd7 	bl	800016c <__adddf3>
 80025be:	4606      	mov	r6, r0
 80025c0:	460f      	mov	r7, r1
 80025c2:	f7fe fa35 	bl	8000a30 <__aeabi_d2iz>
 80025c6:	2200      	movs	r2, #0
 80025c8:	4683      	mov	fp, r0
 80025ca:	2300      	movs	r3, #0
 80025cc:	4630      	mov	r0, r6
 80025ce:	4639      	mov	r1, r7
 80025d0:	f7fe f9f0 	bl	80009b4 <__aeabi_dcmplt>
 80025d4:	b158      	cbz	r0, 80025ee <_dtoa_r+0x166>
 80025d6:	4658      	mov	r0, fp
 80025d8:	f7fd ff14 	bl	8000404 <__aeabi_i2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4630      	mov	r0, r6
 80025e2:	4639      	mov	r1, r7
 80025e4:	f7fe f9dc 	bl	80009a0 <__aeabi_dcmpeq>
 80025e8:	b908      	cbnz	r0, 80025ee <_dtoa_r+0x166>
 80025ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80025ee:	f1bb 0f16 	cmp.w	fp, #22
 80025f2:	d858      	bhi.n	80026a6 <_dtoa_r+0x21e>
 80025f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80025f8:	496a      	ldr	r1, [pc, #424]	; (80027a4 <_dtoa_r+0x31c>)
 80025fa:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80025fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002602:	f7fe f9f5 	bl	80009f0 <__aeabi_dcmpgt>
 8002606:	2800      	cmp	r0, #0
 8002608:	d04f      	beq.n	80026aa <_dtoa_r+0x222>
 800260a:	2300      	movs	r3, #0
 800260c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002610:	930d      	str	r3, [sp, #52]	; 0x34
 8002612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002614:	1b5d      	subs	r5, r3, r5
 8002616:	1e6b      	subs	r3, r5, #1
 8002618:	9307      	str	r3, [sp, #28]
 800261a:	bf43      	ittte	mi
 800261c:	2300      	movmi	r3, #0
 800261e:	f1c5 0801 	rsbmi	r8, r5, #1
 8002622:	9307      	strmi	r3, [sp, #28]
 8002624:	f04f 0800 	movpl.w	r8, #0
 8002628:	f1bb 0f00 	cmp.w	fp, #0
 800262c:	db3f      	blt.n	80026ae <_dtoa_r+0x226>
 800262e:	9b07      	ldr	r3, [sp, #28]
 8002630:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002634:	445b      	add	r3, fp
 8002636:	9307      	str	r3, [sp, #28]
 8002638:	2300      	movs	r3, #0
 800263a:	9308      	str	r3, [sp, #32]
 800263c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800263e:	2b09      	cmp	r3, #9
 8002640:	f200 80b4 	bhi.w	80027ac <_dtoa_r+0x324>
 8002644:	2b05      	cmp	r3, #5
 8002646:	bfc4      	itt	gt
 8002648:	3b04      	subgt	r3, #4
 800264a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800264c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800264e:	bfc8      	it	gt
 8002650:	2600      	movgt	r6, #0
 8002652:	f1a3 0302 	sub.w	r3, r3, #2
 8002656:	bfd8      	it	le
 8002658:	2601      	movle	r6, #1
 800265a:	2b03      	cmp	r3, #3
 800265c:	f200 80b2 	bhi.w	80027c4 <_dtoa_r+0x33c>
 8002660:	e8df f003 	tbb	[pc, r3]
 8002664:	782d8684 	.word	0x782d8684
 8002668:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800266a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800266c:	441d      	add	r5, r3
 800266e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002672:	2b20      	cmp	r3, #32
 8002674:	dd11      	ble.n	800269a <_dtoa_r+0x212>
 8002676:	9a02      	ldr	r2, [sp, #8]
 8002678:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800267c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002680:	fa22 f000 	lsr.w	r0, r2, r0
 8002684:	fa09 f303 	lsl.w	r3, r9, r3
 8002688:	4318      	orrs	r0, r3
 800268a:	f7fd feab 	bl	80003e4 <__aeabi_ui2d>
 800268e:	2301      	movs	r3, #1
 8002690:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002694:	3d01      	subs	r5, #1
 8002696:	9310      	str	r3, [sp, #64]	; 0x40
 8002698:	e773      	b.n	8002582 <_dtoa_r+0xfa>
 800269a:	f1c3 0020 	rsb	r0, r3, #32
 800269e:	9b02      	ldr	r3, [sp, #8]
 80026a0:	fa03 f000 	lsl.w	r0, r3, r0
 80026a4:	e7f1      	b.n	800268a <_dtoa_r+0x202>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e7b2      	b.n	8002610 <_dtoa_r+0x188>
 80026aa:	900d      	str	r0, [sp, #52]	; 0x34
 80026ac:	e7b1      	b.n	8002612 <_dtoa_r+0x18a>
 80026ae:	f1cb 0300 	rsb	r3, fp, #0
 80026b2:	9308      	str	r3, [sp, #32]
 80026b4:	2300      	movs	r3, #0
 80026b6:	eba8 080b 	sub.w	r8, r8, fp
 80026ba:	930c      	str	r3, [sp, #48]	; 0x30
 80026bc:	e7be      	b.n	800263c <_dtoa_r+0x1b4>
 80026be:	2301      	movs	r3, #1
 80026c0:	9309      	str	r3, [sp, #36]	; 0x24
 80026c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f340 8080 	ble.w	80027ca <_dtoa_r+0x342>
 80026ca:	4699      	mov	r9, r3
 80026cc:	9304      	str	r3, [sp, #16]
 80026ce:	2200      	movs	r2, #0
 80026d0:	2104      	movs	r1, #4
 80026d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80026d4:	606a      	str	r2, [r5, #4]
 80026d6:	f101 0214 	add.w	r2, r1, #20
 80026da:	429a      	cmp	r2, r3
 80026dc:	d97a      	bls.n	80027d4 <_dtoa_r+0x34c>
 80026de:	6869      	ldr	r1, [r5, #4]
 80026e0:	4620      	mov	r0, r4
 80026e2:	f000 fcc6 	bl	8003072 <_Balloc>
 80026e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e8:	6028      	str	r0, [r5, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b9 0f0e 	cmp.w	r9, #14
 80026f0:	9306      	str	r3, [sp, #24]
 80026f2:	f200 80f0 	bhi.w	80028d6 <_dtoa_r+0x44e>
 80026f6:	2e00      	cmp	r6, #0
 80026f8:	f000 80ed 	beq.w	80028d6 <_dtoa_r+0x44e>
 80026fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002700:	f1bb 0f00 	cmp.w	fp, #0
 8002704:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002708:	dd79      	ble.n	80027fe <_dtoa_r+0x376>
 800270a:	4a26      	ldr	r2, [pc, #152]	; (80027a4 <_dtoa_r+0x31c>)
 800270c:	f00b 030f 	and.w	r3, fp, #15
 8002710:	ea4f 162b 	mov.w	r6, fp, asr #4
 8002714:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002718:	06f0      	lsls	r0, r6, #27
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002722:	d55c      	bpl.n	80027de <_dtoa_r+0x356>
 8002724:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <_dtoa_r+0x320>)
 800272a:	2503      	movs	r5, #3
 800272c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002730:	f7fd fff8 	bl	8000724 <__aeabi_ddiv>
 8002734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002738:	f006 060f 	and.w	r6, r6, #15
 800273c:	4f1a      	ldr	r7, [pc, #104]	; (80027a8 <_dtoa_r+0x320>)
 800273e:	2e00      	cmp	r6, #0
 8002740:	d14f      	bne.n	80027e2 <_dtoa_r+0x35a>
 8002742:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800274a:	f7fd ffeb 	bl	8000724 <__aeabi_ddiv>
 800274e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002752:	e06e      	b.n	8002832 <_dtoa_r+0x3aa>
 8002754:	2301      	movs	r3, #1
 8002756:	9309      	str	r3, [sp, #36]	; 0x24
 8002758:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800275a:	445b      	add	r3, fp
 800275c:	f103 0901 	add.w	r9, r3, #1
 8002760:	9304      	str	r3, [sp, #16]
 8002762:	464b      	mov	r3, r9
 8002764:	2b01      	cmp	r3, #1
 8002766:	bfb8      	it	lt
 8002768:	2301      	movlt	r3, #1
 800276a:	e7b0      	b.n	80026ce <_dtoa_r+0x246>
 800276c:	2300      	movs	r3, #0
 800276e:	e7a7      	b.n	80026c0 <_dtoa_r+0x238>
 8002770:	2300      	movs	r3, #0
 8002772:	e7f0      	b.n	8002756 <_dtoa_r+0x2ce>
 8002774:	f3af 8000 	nop.w
 8002778:	636f4361 	.word	0x636f4361
 800277c:	3fd287a7 	.word	0x3fd287a7
 8002780:	8b60c8b3 	.word	0x8b60c8b3
 8002784:	3fc68a28 	.word	0x3fc68a28
 8002788:	509f79fb 	.word	0x509f79fb
 800278c:	3fd34413 	.word	0x3fd34413
 8002790:	7ff00000 	.word	0x7ff00000
 8002794:	080037ab 	.word	0x080037ab
 8002798:	080037a2 	.word	0x080037a2
 800279c:	080037a1 	.word	0x080037a1
 80027a0:	3ff80000 	.word	0x3ff80000
 80027a4:	080037d8 	.word	0x080037d8
 80027a8:	080037b0 	.word	0x080037b0
 80027ac:	2601      	movs	r6, #1
 80027ae:	2300      	movs	r3, #0
 80027b0:	9609      	str	r6, [sp, #36]	; 0x24
 80027b2:	931e      	str	r3, [sp, #120]	; 0x78
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
 80027b8:	2200      	movs	r2, #0
 80027ba:	9304      	str	r3, [sp, #16]
 80027bc:	4699      	mov	r9, r3
 80027be:	2312      	movs	r3, #18
 80027c0:	921f      	str	r2, [sp, #124]	; 0x7c
 80027c2:	e784      	b.n	80026ce <_dtoa_r+0x246>
 80027c4:	2301      	movs	r3, #1
 80027c6:	9309      	str	r3, [sp, #36]	; 0x24
 80027c8:	e7f4      	b.n	80027b4 <_dtoa_r+0x32c>
 80027ca:	2301      	movs	r3, #1
 80027cc:	9304      	str	r3, [sp, #16]
 80027ce:	4699      	mov	r9, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	e7f5      	b.n	80027c0 <_dtoa_r+0x338>
 80027d4:	686a      	ldr	r2, [r5, #4]
 80027d6:	0049      	lsls	r1, r1, #1
 80027d8:	3201      	adds	r2, #1
 80027da:	606a      	str	r2, [r5, #4]
 80027dc:	e77b      	b.n	80026d6 <_dtoa_r+0x24e>
 80027de:	2502      	movs	r5, #2
 80027e0:	e7ac      	b.n	800273c <_dtoa_r+0x2b4>
 80027e2:	07f1      	lsls	r1, r6, #31
 80027e4:	d508      	bpl.n	80027f8 <_dtoa_r+0x370>
 80027e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80027ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027ee:	f7fd fe6f 	bl	80004d0 <__aeabi_dmul>
 80027f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80027f6:	3501      	adds	r5, #1
 80027f8:	1076      	asrs	r6, r6, #1
 80027fa:	3708      	adds	r7, #8
 80027fc:	e79f      	b.n	800273e <_dtoa_r+0x2b6>
 80027fe:	f000 80a5 	beq.w	800294c <_dtoa_r+0x4c4>
 8002802:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002806:	f1cb 0600 	rsb	r6, fp, #0
 800280a:	4ba2      	ldr	r3, [pc, #648]	; (8002a94 <_dtoa_r+0x60c>)
 800280c:	f006 020f 	and.w	r2, r6, #15
 8002810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd fe5a 	bl	80004d0 <__aeabi_dmul>
 800281c:	2502      	movs	r5, #2
 800281e:	2300      	movs	r3, #0
 8002820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002824:	4f9c      	ldr	r7, [pc, #624]	; (8002a98 <_dtoa_r+0x610>)
 8002826:	1136      	asrs	r6, r6, #4
 8002828:	2e00      	cmp	r6, #0
 800282a:	f040 8084 	bne.w	8002936 <_dtoa_r+0x4ae>
 800282e:	2b00      	cmp	r3, #0
 8002830:	d18d      	bne.n	800274e <_dtoa_r+0x2c6>
 8002832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 808b 	beq.w	8002950 <_dtoa_r+0x4c8>
 800283a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800283e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002846:	2200      	movs	r2, #0
 8002848:	4b94      	ldr	r3, [pc, #592]	; (8002a9c <_dtoa_r+0x614>)
 800284a:	f7fe f8b3 	bl	80009b4 <__aeabi_dcmplt>
 800284e:	2800      	cmp	r0, #0
 8002850:	d07e      	beq.n	8002950 <_dtoa_r+0x4c8>
 8002852:	f1b9 0f00 	cmp.w	r9, #0
 8002856:	d07b      	beq.n	8002950 <_dtoa_r+0x4c8>
 8002858:	9b04      	ldr	r3, [sp, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	dd37      	ble.n	80028ce <_dtoa_r+0x446>
 800285e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002862:	2200      	movs	r2, #0
 8002864:	4b8e      	ldr	r3, [pc, #568]	; (8002aa0 <_dtoa_r+0x618>)
 8002866:	f7fd fe33 	bl	80004d0 <__aeabi_dmul>
 800286a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800286e:	9e04      	ldr	r6, [sp, #16]
 8002870:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002874:	3501      	adds	r5, #1
 8002876:	4628      	mov	r0, r5
 8002878:	f7fd fdc4 	bl	8000404 <__aeabi_i2d>
 800287c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002880:	f7fd fe26 	bl	80004d0 <__aeabi_dmul>
 8002884:	4b87      	ldr	r3, [pc, #540]	; (8002aa4 <_dtoa_r+0x61c>)
 8002886:	2200      	movs	r2, #0
 8002888:	f7fd fc70 	bl	800016c <__adddf3>
 800288c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002892:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8002896:	950b      	str	r5, [sp, #44]	; 0x2c
 8002898:	2e00      	cmp	r6, #0
 800289a:	d15c      	bne.n	8002956 <_dtoa_r+0x4ce>
 800289c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028a0:	2200      	movs	r2, #0
 80028a2:	4b81      	ldr	r3, [pc, #516]	; (8002aa8 <_dtoa_r+0x620>)
 80028a4:	f7fd fc60 	bl	8000168 <__aeabi_dsub>
 80028a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80028aa:	462b      	mov	r3, r5
 80028ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028b0:	f7fe f89e 	bl	80009f0 <__aeabi_dcmpgt>
 80028b4:	2800      	cmp	r0, #0
 80028b6:	f040 82f7 	bne.w	8002ea8 <_dtoa_r+0xa20>
 80028ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80028c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80028c4:	f7fe f876 	bl	80009b4 <__aeabi_dcmplt>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	f040 82eb 	bne.w	8002ea4 <_dtoa_r+0xa1c>
 80028ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80028d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f2c0 8150 	blt.w	8002b7e <_dtoa_r+0x6f6>
 80028de:	f1bb 0f0e 	cmp.w	fp, #14
 80028e2:	f300 814c 	bgt.w	8002b7e <_dtoa_r+0x6f6>
 80028e6:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <_dtoa_r+0x60c>)
 80028e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80028f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f280 80da 	bge.w	8002ab0 <_dtoa_r+0x628>
 80028fc:	f1b9 0f00 	cmp.w	r9, #0
 8002900:	f300 80d6 	bgt.w	8002ab0 <_dtoa_r+0x628>
 8002904:	f040 82cd 	bne.w	8002ea2 <_dtoa_r+0xa1a>
 8002908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800290c:	2200      	movs	r2, #0
 800290e:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <_dtoa_r+0x620>)
 8002910:	f7fd fdde 	bl	80004d0 <__aeabi_dmul>
 8002914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002918:	f7fe f860 	bl	80009dc <__aeabi_dcmpge>
 800291c:	464e      	mov	r6, r9
 800291e:	464f      	mov	r7, r9
 8002920:	2800      	cmp	r0, #0
 8002922:	f040 82a4 	bne.w	8002e6e <_dtoa_r+0x9e6>
 8002926:	9b06      	ldr	r3, [sp, #24]
 8002928:	9a06      	ldr	r2, [sp, #24]
 800292a:	1c5d      	adds	r5, r3, #1
 800292c:	2331      	movs	r3, #49	; 0x31
 800292e:	f10b 0b01 	add.w	fp, fp, #1
 8002932:	7013      	strb	r3, [r2, #0]
 8002934:	e29f      	b.n	8002e76 <_dtoa_r+0x9ee>
 8002936:	07f2      	lsls	r2, r6, #31
 8002938:	d505      	bpl.n	8002946 <_dtoa_r+0x4be>
 800293a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800293e:	f7fd fdc7 	bl	80004d0 <__aeabi_dmul>
 8002942:	2301      	movs	r3, #1
 8002944:	3501      	adds	r5, #1
 8002946:	1076      	asrs	r6, r6, #1
 8002948:	3708      	adds	r7, #8
 800294a:	e76d      	b.n	8002828 <_dtoa_r+0x3a0>
 800294c:	2502      	movs	r5, #2
 800294e:	e770      	b.n	8002832 <_dtoa_r+0x3aa>
 8002950:	465f      	mov	r7, fp
 8002952:	464e      	mov	r6, r9
 8002954:	e78f      	b.n	8002876 <_dtoa_r+0x3ee>
 8002956:	9a06      	ldr	r2, [sp, #24]
 8002958:	4b4e      	ldr	r3, [pc, #312]	; (8002a94 <_dtoa_r+0x60c>)
 800295a:	4432      	add	r2, r6
 800295c:	9211      	str	r2, [sp, #68]	; 0x44
 800295e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002960:	1e71      	subs	r1, r6, #1
 8002962:	2a00      	cmp	r2, #0
 8002964:	d048      	beq.n	80029f8 <_dtoa_r+0x570>
 8002966:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	2000      	movs	r0, #0
 8002970:	494e      	ldr	r1, [pc, #312]	; (8002aac <_dtoa_r+0x624>)
 8002972:	f7fd fed7 	bl	8000724 <__aeabi_ddiv>
 8002976:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800297a:	f7fd fbf5 	bl	8000168 <__aeabi_dsub>
 800297e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002982:	9d06      	ldr	r5, [sp, #24]
 8002984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002988:	f7fe f852 	bl	8000a30 <__aeabi_d2iz>
 800298c:	4606      	mov	r6, r0
 800298e:	f7fd fd39 	bl	8000404 <__aeabi_i2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800299a:	f7fd fbe5 	bl	8000168 <__aeabi_dsub>
 800299e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80029a2:	3630      	adds	r6, #48	; 0x30
 80029a4:	f805 6b01 	strb.w	r6, [r5], #1
 80029a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029ac:	f7fe f802 	bl	80009b4 <__aeabi_dcmplt>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d164      	bne.n	8002a7e <_dtoa_r+0x5f6>
 80029b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80029b8:	2000      	movs	r0, #0
 80029ba:	4938      	ldr	r1, [pc, #224]	; (8002a9c <_dtoa_r+0x614>)
 80029bc:	f7fd fbd4 	bl	8000168 <__aeabi_dsub>
 80029c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80029c4:	f7fd fff6 	bl	80009b4 <__aeabi_dcmplt>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	f040 80b9 	bne.w	8002b40 <_dtoa_r+0x6b8>
 80029ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029d0:	429d      	cmp	r5, r3
 80029d2:	f43f af7c 	beq.w	80028ce <_dtoa_r+0x446>
 80029d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80029da:	2200      	movs	r2, #0
 80029dc:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <_dtoa_r+0x618>)
 80029de:	f7fd fd77 	bl	80004d0 <__aeabi_dmul>
 80029e2:	2200      	movs	r2, #0
 80029e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80029e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <_dtoa_r+0x618>)
 80029ee:	f7fd fd6f 	bl	80004d0 <__aeabi_dmul>
 80029f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029f6:	e7c5      	b.n	8002984 <_dtoa_r+0x4fc>
 80029f8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80029fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a04:	f7fd fd64 	bl	80004d0 <__aeabi_dmul>
 8002a08:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002a0c:	9d06      	ldr	r5, [sp, #24]
 8002a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a12:	f7fe f80d 	bl	8000a30 <__aeabi_d2iz>
 8002a16:	4606      	mov	r6, r0
 8002a18:	f7fd fcf4 	bl	8000404 <__aeabi_i2d>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a24:	f7fd fba0 	bl	8000168 <__aeabi_dsub>
 8002a28:	3630      	adds	r6, #48	; 0x30
 8002a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8002a30:	42ab      	cmp	r3, r5
 8002a32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	d124      	bne.n	8002a86 <_dtoa_r+0x5fe>
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <_dtoa_r+0x624>)
 8002a3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002a42:	f7fd fb93 	bl	800016c <__adddf3>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a4e:	f7fd ffcf 	bl	80009f0 <__aeabi_dcmpgt>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d174      	bne.n	8002b40 <_dtoa_r+0x6b8>
 8002a56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	4913      	ldr	r1, [pc, #76]	; (8002aac <_dtoa_r+0x624>)
 8002a5e:	f7fd fb83 	bl	8000168 <__aeabi_dsub>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a6a:	f7fd ffa3 	bl	80009b4 <__aeabi_dcmplt>
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	f43f af2d 	beq.w	80028ce <_dtoa_r+0x446>
 8002a74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002a78:	1e6a      	subs	r2, r5, #1
 8002a7a:	2b30      	cmp	r3, #48	; 0x30
 8002a7c:	d001      	beq.n	8002a82 <_dtoa_r+0x5fa>
 8002a7e:	46bb      	mov	fp, r7
 8002a80:	e04d      	b.n	8002b1e <_dtoa_r+0x696>
 8002a82:	4615      	mov	r5, r2
 8002a84:	e7f6      	b.n	8002a74 <_dtoa_r+0x5ec>
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <_dtoa_r+0x618>)
 8002a88:	f7fd fd22 	bl	80004d0 <__aeabi_dmul>
 8002a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a90:	e7bd      	b.n	8002a0e <_dtoa_r+0x586>
 8002a92:	bf00      	nop
 8002a94:	080037d8 	.word	0x080037d8
 8002a98:	080037b0 	.word	0x080037b0
 8002a9c:	3ff00000 	.word	0x3ff00000
 8002aa0:	40240000 	.word	0x40240000
 8002aa4:	401c0000 	.word	0x401c0000
 8002aa8:	40140000 	.word	0x40140000
 8002aac:	3fe00000 	.word	0x3fe00000
 8002ab0:	9d06      	ldr	r5, [sp, #24]
 8002ab2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002ab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002aba:	4630      	mov	r0, r6
 8002abc:	4639      	mov	r1, r7
 8002abe:	f7fd fe31 	bl	8000724 <__aeabi_ddiv>
 8002ac2:	f7fd ffb5 	bl	8000a30 <__aeabi_d2iz>
 8002ac6:	4680      	mov	r8, r0
 8002ac8:	f7fd fc9c 	bl	8000404 <__aeabi_i2d>
 8002acc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ad0:	f7fd fcfe 	bl	80004d0 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4630      	mov	r0, r6
 8002ada:	4639      	mov	r1, r7
 8002adc:	f7fd fb44 	bl	8000168 <__aeabi_dsub>
 8002ae0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8002ae4:	f805 6b01 	strb.w	r6, [r5], #1
 8002ae8:	9e06      	ldr	r6, [sp, #24]
 8002aea:	4602      	mov	r2, r0
 8002aec:	1bae      	subs	r6, r5, r6
 8002aee:	45b1      	cmp	r9, r6
 8002af0:	460b      	mov	r3, r1
 8002af2:	d137      	bne.n	8002b64 <_dtoa_r+0x6dc>
 8002af4:	f7fd fb3a 	bl	800016c <__adddf3>
 8002af8:	4606      	mov	r6, r0
 8002afa:	460f      	mov	r7, r1
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002b04:	f7fd ff56 	bl	80009b4 <__aeabi_dcmplt>
 8002b08:	b9c8      	cbnz	r0, 8002b3e <_dtoa_r+0x6b6>
 8002b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002b0e:	4632      	mov	r2, r6
 8002b10:	463b      	mov	r3, r7
 8002b12:	f7fd ff45 	bl	80009a0 <__aeabi_dcmpeq>
 8002b16:	b110      	cbz	r0, 8002b1e <_dtoa_r+0x696>
 8002b18:	f018 0f01 	tst.w	r8, #1
 8002b1c:	d10f      	bne.n	8002b3e <_dtoa_r+0x6b6>
 8002b1e:	4651      	mov	r1, sl
 8002b20:	4620      	mov	r0, r4
 8002b22:	f000 fada 	bl	80030da <_Bfree>
 8002b26:	2300      	movs	r3, #0
 8002b28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b2a:	702b      	strb	r3, [r5, #0]
 8002b2c:	f10b 0301 	add.w	r3, fp, #1
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f43f acec 	beq.w	8002512 <_dtoa_r+0x8a>
 8002b3a:	601d      	str	r5, [r3, #0]
 8002b3c:	e4e9      	b.n	8002512 <_dtoa_r+0x8a>
 8002b3e:	465f      	mov	r7, fp
 8002b40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002b44:	1e6b      	subs	r3, r5, #1
 8002b46:	2a39      	cmp	r2, #57	; 0x39
 8002b48:	d106      	bne.n	8002b58 <_dtoa_r+0x6d0>
 8002b4a:	9a06      	ldr	r2, [sp, #24]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <_dtoa_r+0x6d8>
 8002b50:	2330      	movs	r3, #48	; 0x30
 8002b52:	7013      	strb	r3, [r2, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	3701      	adds	r7, #1
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	3201      	adds	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e78e      	b.n	8002a7e <_dtoa_r+0x5f6>
 8002b60:	461d      	mov	r5, r3
 8002b62:	e7ed      	b.n	8002b40 <_dtoa_r+0x6b8>
 8002b64:	2200      	movs	r2, #0
 8002b66:	4bb5      	ldr	r3, [pc, #724]	; (8002e3c <_dtoa_r+0x9b4>)
 8002b68:	f7fd fcb2 	bl	80004d0 <__aeabi_dmul>
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4606      	mov	r6, r0
 8002b72:	460f      	mov	r7, r1
 8002b74:	f7fd ff14 	bl	80009a0 <__aeabi_dcmpeq>
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d09c      	beq.n	8002ab6 <_dtoa_r+0x62e>
 8002b7c:	e7cf      	b.n	8002b1e <_dtoa_r+0x696>
 8002b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b80:	2a00      	cmp	r2, #0
 8002b82:	f000 8129 	beq.w	8002dd8 <_dtoa_r+0x950>
 8002b86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002b88:	2a01      	cmp	r2, #1
 8002b8a:	f300 810e 	bgt.w	8002daa <_dtoa_r+0x922>
 8002b8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002b90:	2a00      	cmp	r2, #0
 8002b92:	f000 8106 	beq.w	8002da2 <_dtoa_r+0x91a>
 8002b96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002b9a:	4645      	mov	r5, r8
 8002b9c:	9e08      	ldr	r6, [sp, #32]
 8002b9e:	9a07      	ldr	r2, [sp, #28]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	441a      	add	r2, r3
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4498      	add	r8, r3
 8002ba8:	9207      	str	r2, [sp, #28]
 8002baa:	f000 fb36 	bl	800321a <__i2b>
 8002bae:	4607      	mov	r7, r0
 8002bb0:	2d00      	cmp	r5, #0
 8002bb2:	dd0b      	ble.n	8002bcc <_dtoa_r+0x744>
 8002bb4:	9b07      	ldr	r3, [sp, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	dd08      	ble.n	8002bcc <_dtoa_r+0x744>
 8002bba:	42ab      	cmp	r3, r5
 8002bbc:	bfa8      	it	ge
 8002bbe:	462b      	movge	r3, r5
 8002bc0:	9a07      	ldr	r2, [sp, #28]
 8002bc2:	eba8 0803 	sub.w	r8, r8, r3
 8002bc6:	1aed      	subs	r5, r5, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	9307      	str	r3, [sp, #28]
 8002bcc:	9b08      	ldr	r3, [sp, #32]
 8002bce:	b1fb      	cbz	r3, 8002c10 <_dtoa_r+0x788>
 8002bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8104 	beq.w	8002de0 <_dtoa_r+0x958>
 8002bd8:	2e00      	cmp	r6, #0
 8002bda:	dd11      	ble.n	8002c00 <_dtoa_r+0x778>
 8002bdc:	4639      	mov	r1, r7
 8002bde:	4632      	mov	r2, r6
 8002be0:	4620      	mov	r0, r4
 8002be2:	f000 fbaf 	bl	8003344 <__pow5mult>
 8002be6:	4652      	mov	r2, sl
 8002be8:	4601      	mov	r1, r0
 8002bea:	4607      	mov	r7, r0
 8002bec:	4620      	mov	r0, r4
 8002bee:	f000 fb1d 	bl	800322c <__multiply>
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	900a      	str	r0, [sp, #40]	; 0x28
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f000 fa6f 	bl	80030da <_Bfree>
 8002bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bfe:	469a      	mov	sl, r3
 8002c00:	9b08      	ldr	r3, [sp, #32]
 8002c02:	1b9a      	subs	r2, r3, r6
 8002c04:	d004      	beq.n	8002c10 <_dtoa_r+0x788>
 8002c06:	4651      	mov	r1, sl
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f000 fb9b 	bl	8003344 <__pow5mult>
 8002c0e:	4682      	mov	sl, r0
 8002c10:	2101      	movs	r1, #1
 8002c12:	4620      	mov	r0, r4
 8002c14:	f000 fb01 	bl	800321a <__i2b>
 8002c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c1a:	4606      	mov	r6, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f340 80e1 	ble.w	8002de4 <_dtoa_r+0x95c>
 8002c22:	461a      	mov	r2, r3
 8002c24:	4601      	mov	r1, r0
 8002c26:	4620      	mov	r0, r4
 8002c28:	f000 fb8c 	bl	8003344 <__pow5mult>
 8002c2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002c2e:	4606      	mov	r6, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f340 80da 	ble.w	8002dea <_dtoa_r+0x962>
 8002c36:	2300      	movs	r3, #0
 8002c38:	9308      	str	r3, [sp, #32]
 8002c3a:	6933      	ldr	r3, [r6, #16]
 8002c3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002c40:	6918      	ldr	r0, [r3, #16]
 8002c42:	f000 fa9c 	bl	800317e <__hi0bits>
 8002c46:	f1c0 0020 	rsb	r0, r0, #32
 8002c4a:	9b07      	ldr	r3, [sp, #28]
 8002c4c:	4418      	add	r0, r3
 8002c4e:	f010 001f 	ands.w	r0, r0, #31
 8002c52:	f000 80f0 	beq.w	8002e36 <_dtoa_r+0x9ae>
 8002c56:	f1c0 0320 	rsb	r3, r0, #32
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	f340 80e2 	ble.w	8002e24 <_dtoa_r+0x99c>
 8002c60:	9b07      	ldr	r3, [sp, #28]
 8002c62:	f1c0 001c 	rsb	r0, r0, #28
 8002c66:	4480      	add	r8, r0
 8002c68:	4405      	add	r5, r0
 8002c6a:	4403      	add	r3, r0
 8002c6c:	9307      	str	r3, [sp, #28]
 8002c6e:	f1b8 0f00 	cmp.w	r8, #0
 8002c72:	dd05      	ble.n	8002c80 <_dtoa_r+0x7f8>
 8002c74:	4651      	mov	r1, sl
 8002c76:	4642      	mov	r2, r8
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f000 fbb1 	bl	80033e0 <__lshift>
 8002c7e:	4682      	mov	sl, r0
 8002c80:	9b07      	ldr	r3, [sp, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	dd05      	ble.n	8002c92 <_dtoa_r+0x80a>
 8002c86:	4631      	mov	r1, r6
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f000 fba8 	bl	80033e0 <__lshift>
 8002c90:	4606      	mov	r6, r0
 8002c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80d3 	beq.w	8002e40 <_dtoa_r+0x9b8>
 8002c9a:	4631      	mov	r1, r6
 8002c9c:	4650      	mov	r0, sl
 8002c9e:	f000 fbf0 	bl	8003482 <__mcmp>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	f280 80cc 	bge.w	8002e40 <_dtoa_r+0x9b8>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4651      	mov	r1, sl
 8002cac:	220a      	movs	r2, #10
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f000 fa2a 	bl	8003108 <__multadd>
 8002cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002cba:	4682      	mov	sl, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 81a9 	beq.w	8003014 <_dtoa_r+0xb8c>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	4639      	mov	r1, r7
 8002cc6:	220a      	movs	r2, #10
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f000 fa1d 	bl	8003108 <__multadd>
 8002cce:	9b04      	ldr	r3, [sp, #16]
 8002cd0:	4607      	mov	r7, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dc03      	bgt.n	8002cde <_dtoa_r+0x856>
 8002cd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	f300 80b9 	bgt.w	8002e50 <_dtoa_r+0x9c8>
 8002cde:	2d00      	cmp	r5, #0
 8002ce0:	dd05      	ble.n	8002cee <_dtoa_r+0x866>
 8002ce2:	4639      	mov	r1, r7
 8002ce4:	462a      	mov	r2, r5
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f000 fb7a 	bl	80033e0 <__lshift>
 8002cec:	4607      	mov	r7, r0
 8002cee:	9b08      	ldr	r3, [sp, #32]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8110 	beq.w	8002f16 <_dtoa_r+0xa8e>
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f000 f9ba 	bl	8003072 <_Balloc>
 8002cfe:	4605      	mov	r5, r0
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	f107 010c 	add.w	r1, r7, #12
 8002d06:	3202      	adds	r2, #2
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	300c      	adds	r0, #12
 8002d0c:	f000 f9a6 	bl	800305c <memcpy>
 8002d10:	2201      	movs	r2, #1
 8002d12:	4629      	mov	r1, r5
 8002d14:	4620      	mov	r0, r4
 8002d16:	f000 fb63 	bl	80033e0 <__lshift>
 8002d1a:	9707      	str	r7, [sp, #28]
 8002d1c:	4607      	mov	r7, r0
 8002d1e:	9b02      	ldr	r3, [sp, #8]
 8002d20:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	9308      	str	r3, [sp, #32]
 8002d2a:	4631      	mov	r1, r6
 8002d2c:	4650      	mov	r0, sl
 8002d2e:	f7ff fb1e 	bl	800236e <quorem>
 8002d32:	9907      	ldr	r1, [sp, #28]
 8002d34:	4605      	mov	r5, r0
 8002d36:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002d3a:	4650      	mov	r0, sl
 8002d3c:	f000 fba1 	bl	8003482 <__mcmp>
 8002d40:	463a      	mov	r2, r7
 8002d42:	9002      	str	r0, [sp, #8]
 8002d44:	4631      	mov	r1, r6
 8002d46:	4620      	mov	r0, r4
 8002d48:	f000 fbb5 	bl	80034b6 <__mdiff>
 8002d4c:	68c3      	ldr	r3, [r0, #12]
 8002d4e:	4602      	mov	r2, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 80e2 	bne.w	8002f1a <_dtoa_r+0xa92>
 8002d56:	4601      	mov	r1, r0
 8002d58:	9009      	str	r0, [sp, #36]	; 0x24
 8002d5a:	4650      	mov	r0, sl
 8002d5c:	f000 fb91 	bl	8003482 <__mcmp>
 8002d60:	4603      	mov	r3, r0
 8002d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d64:	4611      	mov	r1, r2
 8002d66:	4620      	mov	r0, r4
 8002d68:	9309      	str	r3, [sp, #36]	; 0x24
 8002d6a:	f000 f9b6 	bl	80030da <_Bfree>
 8002d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 80d4 	bne.w	8002f1e <_dtoa_r+0xa96>
 8002d76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	f040 80d0 	bne.w	8002f1e <_dtoa_r+0xa96>
 8002d7e:	9a08      	ldr	r2, [sp, #32]
 8002d80:	2a00      	cmp	r2, #0
 8002d82:	f040 80cc 	bne.w	8002f1e <_dtoa_r+0xa96>
 8002d86:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8002d8a:	f000 80e8 	beq.w	8002f5e <_dtoa_r+0xad6>
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	dd01      	ble.n	8002d98 <_dtoa_r+0x910>
 8002d94:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8002d98:	f108 0501 	add.w	r5, r8, #1
 8002d9c:	f888 9000 	strb.w	r9, [r8]
 8002da0:	e06b      	b.n	8002e7a <_dtoa_r+0x9f2>
 8002da2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002da4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002da8:	e6f7      	b.n	8002b9a <_dtoa_r+0x712>
 8002daa:	9b08      	ldr	r3, [sp, #32]
 8002dac:	f109 36ff 	add.w	r6, r9, #4294967295
 8002db0:	42b3      	cmp	r3, r6
 8002db2:	bfb7      	itett	lt
 8002db4:	9b08      	ldrlt	r3, [sp, #32]
 8002db6:	1b9e      	subge	r6, r3, r6
 8002db8:	1af2      	sublt	r2, r6, r3
 8002dba:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8002dbc:	bfbf      	itttt	lt
 8002dbe:	9608      	strlt	r6, [sp, #32]
 8002dc0:	189b      	addlt	r3, r3, r2
 8002dc2:	930c      	strlt	r3, [sp, #48]	; 0x30
 8002dc4:	2600      	movlt	r6, #0
 8002dc6:	f1b9 0f00 	cmp.w	r9, #0
 8002dca:	bfb9      	ittee	lt
 8002dcc:	eba8 0509 	sublt.w	r5, r8, r9
 8002dd0:	2300      	movlt	r3, #0
 8002dd2:	4645      	movge	r5, r8
 8002dd4:	464b      	movge	r3, r9
 8002dd6:	e6e2      	b.n	8002b9e <_dtoa_r+0x716>
 8002dd8:	9e08      	ldr	r6, [sp, #32]
 8002dda:	4645      	mov	r5, r8
 8002ddc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002dde:	e6e7      	b.n	8002bb0 <_dtoa_r+0x728>
 8002de0:	9a08      	ldr	r2, [sp, #32]
 8002de2:	e710      	b.n	8002c06 <_dtoa_r+0x77e>
 8002de4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	dc18      	bgt.n	8002e1c <_dtoa_r+0x994>
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	b9b3      	cbnz	r3, 8002e1c <_dtoa_r+0x994>
 8002dee:	9b03      	ldr	r3, [sp, #12]
 8002df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df4:	b9a3      	cbnz	r3, 8002e20 <_dtoa_r+0x998>
 8002df6:	9b03      	ldr	r3, [sp, #12]
 8002df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dfc:	0d1b      	lsrs	r3, r3, #20
 8002dfe:	051b      	lsls	r3, r3, #20
 8002e00:	b12b      	cbz	r3, 8002e0e <_dtoa_r+0x986>
 8002e02:	9b07      	ldr	r3, [sp, #28]
 8002e04:	f108 0801 	add.w	r8, r8, #1
 8002e08:	3301      	adds	r3, #1
 8002e0a:	9307      	str	r3, [sp, #28]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	9308      	str	r3, [sp, #32]
 8002e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f47f af11 	bne.w	8002c3a <_dtoa_r+0x7b2>
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e716      	b.n	8002c4a <_dtoa_r+0x7c2>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e7f6      	b.n	8002e0e <_dtoa_r+0x986>
 8002e20:	9b02      	ldr	r3, [sp, #8]
 8002e22:	e7f4      	b.n	8002e0e <_dtoa_r+0x986>
 8002e24:	f43f af23 	beq.w	8002c6e <_dtoa_r+0x7e6>
 8002e28:	9a07      	ldr	r2, [sp, #28]
 8002e2a:	331c      	adds	r3, #28
 8002e2c:	441a      	add	r2, r3
 8002e2e:	4498      	add	r8, r3
 8002e30:	441d      	add	r5, r3
 8002e32:	4613      	mov	r3, r2
 8002e34:	e71a      	b.n	8002c6c <_dtoa_r+0x7e4>
 8002e36:	4603      	mov	r3, r0
 8002e38:	e7f6      	b.n	8002e28 <_dtoa_r+0x9a0>
 8002e3a:	bf00      	nop
 8002e3c:	40240000 	.word	0x40240000
 8002e40:	f1b9 0f00 	cmp.w	r9, #0
 8002e44:	dc33      	bgt.n	8002eae <_dtoa_r+0xa26>
 8002e46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	dd30      	ble.n	8002eae <_dtoa_r+0xa26>
 8002e4c:	f8cd 9010 	str.w	r9, [sp, #16]
 8002e50:	9b04      	ldr	r3, [sp, #16]
 8002e52:	b963      	cbnz	r3, 8002e6e <_dtoa_r+0x9e6>
 8002e54:	4631      	mov	r1, r6
 8002e56:	2205      	movs	r2, #5
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f000 f955 	bl	8003108 <__multadd>
 8002e5e:	4601      	mov	r1, r0
 8002e60:	4606      	mov	r6, r0
 8002e62:	4650      	mov	r0, sl
 8002e64:	f000 fb0d 	bl	8003482 <__mcmp>
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	f73f ad5c 	bgt.w	8002926 <_dtoa_r+0x49e>
 8002e6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e70:	9d06      	ldr	r5, [sp, #24]
 8002e72:	ea6f 0b03 	mvn.w	fp, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	9307      	str	r3, [sp, #28]
 8002e7a:	4631      	mov	r1, r6
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f000 f92c 	bl	80030da <_Bfree>
 8002e82:	2f00      	cmp	r7, #0
 8002e84:	f43f ae4b 	beq.w	8002b1e <_dtoa_r+0x696>
 8002e88:	9b07      	ldr	r3, [sp, #28]
 8002e8a:	b12b      	cbz	r3, 8002e98 <_dtoa_r+0xa10>
 8002e8c:	42bb      	cmp	r3, r7
 8002e8e:	d003      	beq.n	8002e98 <_dtoa_r+0xa10>
 8002e90:	4619      	mov	r1, r3
 8002e92:	4620      	mov	r0, r4
 8002e94:	f000 f921 	bl	80030da <_Bfree>
 8002e98:	4639      	mov	r1, r7
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f000 f91d 	bl	80030da <_Bfree>
 8002ea0:	e63d      	b.n	8002b1e <_dtoa_r+0x696>
 8002ea2:	2600      	movs	r6, #0
 8002ea4:	4637      	mov	r7, r6
 8002ea6:	e7e2      	b.n	8002e6e <_dtoa_r+0x9e6>
 8002ea8:	46bb      	mov	fp, r7
 8002eaa:	4637      	mov	r7, r6
 8002eac:	e53b      	b.n	8002926 <_dtoa_r+0x49e>
 8002eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eb0:	f8cd 9010 	str.w	r9, [sp, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f af12 	bne.w	8002cde <_dtoa_r+0x856>
 8002eba:	9d06      	ldr	r5, [sp, #24]
 8002ebc:	4631      	mov	r1, r6
 8002ebe:	4650      	mov	r0, sl
 8002ec0:	f7ff fa55 	bl	800236e <quorem>
 8002ec4:	9b06      	ldr	r3, [sp, #24]
 8002ec6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002eca:	f805 9b01 	strb.w	r9, [r5], #1
 8002ece:	9a04      	ldr	r2, [sp, #16]
 8002ed0:	1aeb      	subs	r3, r5, r3
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	f300 8081 	bgt.w	8002fda <_dtoa_r+0xb52>
 8002ed8:	9b06      	ldr	r3, [sp, #24]
 8002eda:	2a01      	cmp	r2, #1
 8002edc:	bfac      	ite	ge
 8002ede:	189b      	addge	r3, r3, r2
 8002ee0:	3301      	addlt	r3, #1
 8002ee2:	4698      	mov	r8, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9307      	str	r3, [sp, #28]
 8002ee8:	4651      	mov	r1, sl
 8002eea:	2201      	movs	r2, #1
 8002eec:	4620      	mov	r0, r4
 8002eee:	f000 fa77 	bl	80033e0 <__lshift>
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	4682      	mov	sl, r0
 8002ef6:	f000 fac4 	bl	8003482 <__mcmp>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	dc34      	bgt.n	8002f68 <_dtoa_r+0xae0>
 8002efe:	d102      	bne.n	8002f06 <_dtoa_r+0xa7e>
 8002f00:	f019 0f01 	tst.w	r9, #1
 8002f04:	d130      	bne.n	8002f68 <_dtoa_r+0xae0>
 8002f06:	4645      	mov	r5, r8
 8002f08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002f0c:	1e6a      	subs	r2, r5, #1
 8002f0e:	2b30      	cmp	r3, #48	; 0x30
 8002f10:	d1b3      	bne.n	8002e7a <_dtoa_r+0x9f2>
 8002f12:	4615      	mov	r5, r2
 8002f14:	e7f8      	b.n	8002f08 <_dtoa_r+0xa80>
 8002f16:	4638      	mov	r0, r7
 8002f18:	e6ff      	b.n	8002d1a <_dtoa_r+0x892>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e722      	b.n	8002d64 <_dtoa_r+0x8dc>
 8002f1e:	9a02      	ldr	r2, [sp, #8]
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	db04      	blt.n	8002f2e <_dtoa_r+0xaa6>
 8002f24:	d128      	bne.n	8002f78 <_dtoa_r+0xaf0>
 8002f26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002f28:	bb32      	cbnz	r2, 8002f78 <_dtoa_r+0xaf0>
 8002f2a:	9a08      	ldr	r2, [sp, #32]
 8002f2c:	bb22      	cbnz	r2, 8002f78 <_dtoa_r+0xaf0>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f77f af32 	ble.w	8002d98 <_dtoa_r+0x910>
 8002f34:	4651      	mov	r1, sl
 8002f36:	2201      	movs	r2, #1
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f000 fa51 	bl	80033e0 <__lshift>
 8002f3e:	4631      	mov	r1, r6
 8002f40:	4682      	mov	sl, r0
 8002f42:	f000 fa9e 	bl	8003482 <__mcmp>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	dc05      	bgt.n	8002f56 <_dtoa_r+0xace>
 8002f4a:	f47f af25 	bne.w	8002d98 <_dtoa_r+0x910>
 8002f4e:	f019 0f01 	tst.w	r9, #1
 8002f52:	f43f af21 	beq.w	8002d98 <_dtoa_r+0x910>
 8002f56:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8002f5a:	f47f af1b 	bne.w	8002d94 <_dtoa_r+0x90c>
 8002f5e:	2339      	movs	r3, #57	; 0x39
 8002f60:	f108 0801 	add.w	r8, r8, #1
 8002f64:	f808 3c01 	strb.w	r3, [r8, #-1]
 8002f68:	4645      	mov	r5, r8
 8002f6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002f6e:	1e6a      	subs	r2, r5, #1
 8002f70:	2b39      	cmp	r3, #57	; 0x39
 8002f72:	d03a      	beq.n	8002fea <_dtoa_r+0xb62>
 8002f74:	3301      	adds	r3, #1
 8002f76:	e03f      	b.n	8002ff8 <_dtoa_r+0xb70>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f108 0501 	add.w	r5, r8, #1
 8002f7e:	dd05      	ble.n	8002f8c <_dtoa_r+0xb04>
 8002f80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8002f84:	d0eb      	beq.n	8002f5e <_dtoa_r+0xad6>
 8002f86:	f109 0901 	add.w	r9, r9, #1
 8002f8a:	e707      	b.n	8002d9c <_dtoa_r+0x914>
 8002f8c:	9b06      	ldr	r3, [sp, #24]
 8002f8e:	9a04      	ldr	r2, [sp, #16]
 8002f90:	1aeb      	subs	r3, r5, r3
 8002f92:	4293      	cmp	r3, r2
 8002f94:	46a8      	mov	r8, r5
 8002f96:	f805 9c01 	strb.w	r9, [r5, #-1]
 8002f9a:	d0a5      	beq.n	8002ee8 <_dtoa_r+0xa60>
 8002f9c:	4651      	mov	r1, sl
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	220a      	movs	r2, #10
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f000 f8b0 	bl	8003108 <__multadd>
 8002fa8:	9b07      	ldr	r3, [sp, #28]
 8002faa:	4682      	mov	sl, r0
 8002fac:	42bb      	cmp	r3, r7
 8002fae:	f04f 020a 	mov.w	r2, #10
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	9907      	ldr	r1, [sp, #28]
 8002fb8:	4620      	mov	r0, r4
 8002fba:	d104      	bne.n	8002fc6 <_dtoa_r+0xb3e>
 8002fbc:	f000 f8a4 	bl	8003108 <__multadd>
 8002fc0:	9007      	str	r0, [sp, #28]
 8002fc2:	4607      	mov	r7, r0
 8002fc4:	e6b1      	b.n	8002d2a <_dtoa_r+0x8a2>
 8002fc6:	f000 f89f 	bl	8003108 <__multadd>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	9007      	str	r0, [sp, #28]
 8002fce:	220a      	movs	r2, #10
 8002fd0:	4639      	mov	r1, r7
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f000 f898 	bl	8003108 <__multadd>
 8002fd8:	e7f3      	b.n	8002fc2 <_dtoa_r+0xb3a>
 8002fda:	4651      	mov	r1, sl
 8002fdc:	2300      	movs	r3, #0
 8002fde:	220a      	movs	r2, #10
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f000 f891 	bl	8003108 <__multadd>
 8002fe6:	4682      	mov	sl, r0
 8002fe8:	e768      	b.n	8002ebc <_dtoa_r+0xa34>
 8002fea:	9b06      	ldr	r3, [sp, #24]
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d105      	bne.n	8002ffc <_dtoa_r+0xb74>
 8002ff0:	2331      	movs	r3, #49	; 0x31
 8002ff2:	9a06      	ldr	r2, [sp, #24]
 8002ff4:	f10b 0b01 	add.w	fp, fp, #1
 8002ff8:	7013      	strb	r3, [r2, #0]
 8002ffa:	e73e      	b.n	8002e7a <_dtoa_r+0x9f2>
 8002ffc:	4615      	mov	r5, r2
 8002ffe:	e7b4      	b.n	8002f6a <_dtoa_r+0xae2>
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <_dtoa_r+0xba0>)
 8003002:	f7ff baa3 	b.w	800254c <_dtoa_r+0xc4>
 8003006:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f aa7d 	bne.w	8002508 <_dtoa_r+0x80>
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <_dtoa_r+0xba4>)
 8003010:	f7ff ba9c 	b.w	800254c <_dtoa_r+0xc4>
 8003014:	9b04      	ldr	r3, [sp, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f73f af4f 	bgt.w	8002eba <_dtoa_r+0xa32>
 800301c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800301e:	2b02      	cmp	r3, #2
 8003020:	f77f af4b 	ble.w	8002eba <_dtoa_r+0xa32>
 8003024:	e714      	b.n	8002e50 <_dtoa_r+0x9c8>
 8003026:	bf00      	nop
 8003028:	080037a0 	.word	0x080037a0
 800302c:	080037a2 	.word	0x080037a2

08003030 <_localeconv_r>:
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <_localeconv_r+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6a18      	ldr	r0, [r3, #32]
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <_localeconv_r+0x18>)
 8003038:	2800      	cmp	r0, #0
 800303a:	bf08      	it	eq
 800303c:	4618      	moveq	r0, r3
 800303e:	30f0      	adds	r0, #240	; 0xf0
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000030 	.word	0x20000030
 8003048:	20000094 	.word	0x20000094

0800304c <malloc>:
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <malloc+0xc>)
 800304e:	4601      	mov	r1, r0
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	f000 baed 	b.w	8003630 <_malloc_r>
 8003056:	bf00      	nop
 8003058:	20000030 	.word	0x20000030

0800305c <memcpy>:
 800305c:	b510      	push	{r4, lr}
 800305e:	1e43      	subs	r3, r0, #1
 8003060:	440a      	add	r2, r1
 8003062:	4291      	cmp	r1, r2
 8003064:	d100      	bne.n	8003068 <memcpy+0xc>
 8003066:	bd10      	pop	{r4, pc}
 8003068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800306c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003070:	e7f7      	b.n	8003062 <memcpy+0x6>

08003072 <_Balloc>:
 8003072:	b570      	push	{r4, r5, r6, lr}
 8003074:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003076:	4604      	mov	r4, r0
 8003078:	460e      	mov	r6, r1
 800307a:	b93d      	cbnz	r5, 800308c <_Balloc+0x1a>
 800307c:	2010      	movs	r0, #16
 800307e:	f7ff ffe5 	bl	800304c <malloc>
 8003082:	6260      	str	r0, [r4, #36]	; 0x24
 8003084:	6045      	str	r5, [r0, #4]
 8003086:	6085      	str	r5, [r0, #8]
 8003088:	6005      	str	r5, [r0, #0]
 800308a:	60c5      	str	r5, [r0, #12]
 800308c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800308e:	68eb      	ldr	r3, [r5, #12]
 8003090:	b183      	cbz	r3, 80030b4 <_Balloc+0x42>
 8003092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800309a:	b9b8      	cbnz	r0, 80030cc <_Balloc+0x5a>
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f506 	lsl.w	r5, r1, r6
 80030a2:	1d6a      	adds	r2, r5, #5
 80030a4:	0092      	lsls	r2, r2, #2
 80030a6:	4620      	mov	r0, r4
 80030a8:	f000 fab3 	bl	8003612 <_calloc_r>
 80030ac:	b160      	cbz	r0, 80030c8 <_Balloc+0x56>
 80030ae:	6046      	str	r6, [r0, #4]
 80030b0:	6085      	str	r5, [r0, #8]
 80030b2:	e00e      	b.n	80030d2 <_Balloc+0x60>
 80030b4:	2221      	movs	r2, #33	; 0x21
 80030b6:	2104      	movs	r1, #4
 80030b8:	4620      	mov	r0, r4
 80030ba:	f000 faaa 	bl	8003612 <_calloc_r>
 80030be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030c0:	60e8      	str	r0, [r5, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e4      	bne.n	8003092 <_Balloc+0x20>
 80030c8:	2000      	movs	r0, #0
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	6802      	ldr	r2, [r0, #0]
 80030ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80030d2:	2300      	movs	r3, #0
 80030d4:	6103      	str	r3, [r0, #16]
 80030d6:	60c3      	str	r3, [r0, #12]
 80030d8:	bd70      	pop	{r4, r5, r6, pc}

080030da <_Bfree>:
 80030da:	b570      	push	{r4, r5, r6, lr}
 80030dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80030de:	4606      	mov	r6, r0
 80030e0:	460d      	mov	r5, r1
 80030e2:	b93c      	cbnz	r4, 80030f4 <_Bfree+0x1a>
 80030e4:	2010      	movs	r0, #16
 80030e6:	f7ff ffb1 	bl	800304c <malloc>
 80030ea:	6270      	str	r0, [r6, #36]	; 0x24
 80030ec:	6044      	str	r4, [r0, #4]
 80030ee:	6084      	str	r4, [r0, #8]
 80030f0:	6004      	str	r4, [r0, #0]
 80030f2:	60c4      	str	r4, [r0, #12]
 80030f4:	b13d      	cbz	r5, 8003106 <_Bfree+0x2c>
 80030f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80030f8:	686a      	ldr	r2, [r5, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003100:	6029      	str	r1, [r5, #0]
 8003102:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003106:	bd70      	pop	{r4, r5, r6, pc}

08003108 <__multadd>:
 8003108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800310c:	461f      	mov	r7, r3
 800310e:	4606      	mov	r6, r0
 8003110:	460c      	mov	r4, r1
 8003112:	2300      	movs	r3, #0
 8003114:	690d      	ldr	r5, [r1, #16]
 8003116:	f101 0e14 	add.w	lr, r1, #20
 800311a:	f8de 0000 	ldr.w	r0, [lr]
 800311e:	3301      	adds	r3, #1
 8003120:	b281      	uxth	r1, r0
 8003122:	fb02 7101 	mla	r1, r2, r1, r7
 8003126:	0c00      	lsrs	r0, r0, #16
 8003128:	0c0f      	lsrs	r7, r1, #16
 800312a:	fb02 7000 	mla	r0, r2, r0, r7
 800312e:	b289      	uxth	r1, r1
 8003130:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003134:	429d      	cmp	r5, r3
 8003136:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800313a:	f84e 1b04 	str.w	r1, [lr], #4
 800313e:	dcec      	bgt.n	800311a <__multadd+0x12>
 8003140:	b1d7      	cbz	r7, 8003178 <__multadd+0x70>
 8003142:	68a3      	ldr	r3, [r4, #8]
 8003144:	429d      	cmp	r5, r3
 8003146:	db12      	blt.n	800316e <__multadd+0x66>
 8003148:	6861      	ldr	r1, [r4, #4]
 800314a:	4630      	mov	r0, r6
 800314c:	3101      	adds	r1, #1
 800314e:	f7ff ff90 	bl	8003072 <_Balloc>
 8003152:	4680      	mov	r8, r0
 8003154:	6922      	ldr	r2, [r4, #16]
 8003156:	f104 010c 	add.w	r1, r4, #12
 800315a:	3202      	adds	r2, #2
 800315c:	0092      	lsls	r2, r2, #2
 800315e:	300c      	adds	r0, #12
 8003160:	f7ff ff7c 	bl	800305c <memcpy>
 8003164:	4621      	mov	r1, r4
 8003166:	4630      	mov	r0, r6
 8003168:	f7ff ffb7 	bl	80030da <_Bfree>
 800316c:	4644      	mov	r4, r8
 800316e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003172:	3501      	adds	r5, #1
 8003174:	615f      	str	r7, [r3, #20]
 8003176:	6125      	str	r5, [r4, #16]
 8003178:	4620      	mov	r0, r4
 800317a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800317e <__hi0bits>:
 800317e:	0c02      	lsrs	r2, r0, #16
 8003180:	0412      	lsls	r2, r2, #16
 8003182:	4603      	mov	r3, r0
 8003184:	b9b2      	cbnz	r2, 80031b4 <__hi0bits+0x36>
 8003186:	0403      	lsls	r3, r0, #16
 8003188:	2010      	movs	r0, #16
 800318a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800318e:	bf04      	itt	eq
 8003190:	021b      	lsleq	r3, r3, #8
 8003192:	3008      	addeq	r0, #8
 8003194:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003198:	bf04      	itt	eq
 800319a:	011b      	lsleq	r3, r3, #4
 800319c:	3004      	addeq	r0, #4
 800319e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80031a2:	bf04      	itt	eq
 80031a4:	009b      	lsleq	r3, r3, #2
 80031a6:	3002      	addeq	r0, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db06      	blt.n	80031ba <__hi0bits+0x3c>
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	d503      	bpl.n	80031b8 <__hi0bits+0x3a>
 80031b0:	3001      	adds	r0, #1
 80031b2:	4770      	bx	lr
 80031b4:	2000      	movs	r0, #0
 80031b6:	e7e8      	b.n	800318a <__hi0bits+0xc>
 80031b8:	2020      	movs	r0, #32
 80031ba:	4770      	bx	lr

080031bc <__lo0bits>:
 80031bc:	6803      	ldr	r3, [r0, #0]
 80031be:	4601      	mov	r1, r0
 80031c0:	f013 0207 	ands.w	r2, r3, #7
 80031c4:	d00b      	beq.n	80031de <__lo0bits+0x22>
 80031c6:	07da      	lsls	r2, r3, #31
 80031c8:	d423      	bmi.n	8003212 <__lo0bits+0x56>
 80031ca:	0798      	lsls	r0, r3, #30
 80031cc:	bf49      	itett	mi
 80031ce:	085b      	lsrmi	r3, r3, #1
 80031d0:	089b      	lsrpl	r3, r3, #2
 80031d2:	2001      	movmi	r0, #1
 80031d4:	600b      	strmi	r3, [r1, #0]
 80031d6:	bf5c      	itt	pl
 80031d8:	600b      	strpl	r3, [r1, #0]
 80031da:	2002      	movpl	r0, #2
 80031dc:	4770      	bx	lr
 80031de:	b298      	uxth	r0, r3
 80031e0:	b9a8      	cbnz	r0, 800320e <__lo0bits+0x52>
 80031e2:	2010      	movs	r0, #16
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80031ea:	bf04      	itt	eq
 80031ec:	0a1b      	lsreq	r3, r3, #8
 80031ee:	3008      	addeq	r0, #8
 80031f0:	071a      	lsls	r2, r3, #28
 80031f2:	bf04      	itt	eq
 80031f4:	091b      	lsreq	r3, r3, #4
 80031f6:	3004      	addeq	r0, #4
 80031f8:	079a      	lsls	r2, r3, #30
 80031fa:	bf04      	itt	eq
 80031fc:	089b      	lsreq	r3, r3, #2
 80031fe:	3002      	addeq	r0, #2
 8003200:	07da      	lsls	r2, r3, #31
 8003202:	d402      	bmi.n	800320a <__lo0bits+0x4e>
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	d006      	beq.n	8003216 <__lo0bits+0x5a>
 8003208:	3001      	adds	r0, #1
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	4770      	bx	lr
 800320e:	4610      	mov	r0, r2
 8003210:	e7e9      	b.n	80031e6 <__lo0bits+0x2a>
 8003212:	2000      	movs	r0, #0
 8003214:	4770      	bx	lr
 8003216:	2020      	movs	r0, #32
 8003218:	4770      	bx	lr

0800321a <__i2b>:
 800321a:	b510      	push	{r4, lr}
 800321c:	460c      	mov	r4, r1
 800321e:	2101      	movs	r1, #1
 8003220:	f7ff ff27 	bl	8003072 <_Balloc>
 8003224:	2201      	movs	r2, #1
 8003226:	6144      	str	r4, [r0, #20]
 8003228:	6102      	str	r2, [r0, #16]
 800322a:	bd10      	pop	{r4, pc}

0800322c <__multiply>:
 800322c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003230:	4614      	mov	r4, r2
 8003232:	690a      	ldr	r2, [r1, #16]
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	4689      	mov	r9, r1
 8003238:	429a      	cmp	r2, r3
 800323a:	bfbe      	ittt	lt
 800323c:	460b      	movlt	r3, r1
 800323e:	46a1      	movlt	r9, r4
 8003240:	461c      	movlt	r4, r3
 8003242:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003246:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800324a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800324e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003252:	eb07 060a 	add.w	r6, r7, sl
 8003256:	429e      	cmp	r6, r3
 8003258:	bfc8      	it	gt
 800325a:	3101      	addgt	r1, #1
 800325c:	f7ff ff09 	bl	8003072 <_Balloc>
 8003260:	f100 0514 	add.w	r5, r0, #20
 8003264:	462b      	mov	r3, r5
 8003266:	2200      	movs	r2, #0
 8003268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800326c:	4543      	cmp	r3, r8
 800326e:	d316      	bcc.n	800329e <__multiply+0x72>
 8003270:	f104 0214 	add.w	r2, r4, #20
 8003274:	f109 0114 	add.w	r1, r9, #20
 8003278:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800327c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	9c01      	ldr	r4, [sp, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	4294      	cmp	r4, r2
 8003288:	d80c      	bhi.n	80032a4 <__multiply+0x78>
 800328a:	2e00      	cmp	r6, #0
 800328c:	dd03      	ble.n	8003296 <__multiply+0x6a>
 800328e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003292:	2b00      	cmp	r3, #0
 8003294:	d054      	beq.n	8003340 <__multiply+0x114>
 8003296:	6106      	str	r6, [r0, #16]
 8003298:	b003      	add	sp, #12
 800329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800329e:	f843 2b04 	str.w	r2, [r3], #4
 80032a2:	e7e3      	b.n	800326c <__multiply+0x40>
 80032a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80032a8:	3204      	adds	r2, #4
 80032aa:	f1ba 0f00 	cmp.w	sl, #0
 80032ae:	d020      	beq.n	80032f2 <__multiply+0xc6>
 80032b0:	46ae      	mov	lr, r5
 80032b2:	4689      	mov	r9, r1
 80032b4:	f04f 0c00 	mov.w	ip, #0
 80032b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80032bc:	f8be b000 	ldrh.w	fp, [lr]
 80032c0:	b2a3      	uxth	r3, r4
 80032c2:	fb0a b303 	mla	r3, sl, r3, fp
 80032c6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80032ca:	f8de 4000 	ldr.w	r4, [lr]
 80032ce:	4463      	add	r3, ip
 80032d0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80032d4:	fb0a c40b 	mla	r4, sl, fp, ip
 80032d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80032dc:	b29b      	uxth	r3, r3
 80032de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80032e2:	454f      	cmp	r7, r9
 80032e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80032e8:	f84e 3b04 	str.w	r3, [lr], #4
 80032ec:	d8e4      	bhi.n	80032b8 <__multiply+0x8c>
 80032ee:	f8ce c000 	str.w	ip, [lr]
 80032f2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80032f6:	f1b9 0f00 	cmp.w	r9, #0
 80032fa:	d01f      	beq.n	800333c <__multiply+0x110>
 80032fc:	46ae      	mov	lr, r5
 80032fe:	468c      	mov	ip, r1
 8003300:	f04f 0a00 	mov.w	sl, #0
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	f8bc 4000 	ldrh.w	r4, [ip]
 800330a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800330e:	b29b      	uxth	r3, r3
 8003310:	fb09 b404 	mla	r4, r9, r4, fp
 8003314:	44a2      	add	sl, r4
 8003316:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800331a:	f84e 3b04 	str.w	r3, [lr], #4
 800331e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003322:	f8be 4000 	ldrh.w	r4, [lr]
 8003326:	0c1b      	lsrs	r3, r3, #16
 8003328:	fb09 4303 	mla	r3, r9, r3, r4
 800332c:	4567      	cmp	r7, ip
 800332e:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003336:	d8e6      	bhi.n	8003306 <__multiply+0xda>
 8003338:	f8ce 3000 	str.w	r3, [lr]
 800333c:	3504      	adds	r5, #4
 800333e:	e7a0      	b.n	8003282 <__multiply+0x56>
 8003340:	3e01      	subs	r6, #1
 8003342:	e7a2      	b.n	800328a <__multiply+0x5e>

08003344 <__pow5mult>:
 8003344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003348:	4615      	mov	r5, r2
 800334a:	f012 0203 	ands.w	r2, r2, #3
 800334e:	4606      	mov	r6, r0
 8003350:	460f      	mov	r7, r1
 8003352:	d007      	beq.n	8003364 <__pow5mult+0x20>
 8003354:	4c21      	ldr	r4, [pc, #132]	; (80033dc <__pow5mult+0x98>)
 8003356:	3a01      	subs	r2, #1
 8003358:	2300      	movs	r3, #0
 800335a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800335e:	f7ff fed3 	bl	8003108 <__multadd>
 8003362:	4607      	mov	r7, r0
 8003364:	10ad      	asrs	r5, r5, #2
 8003366:	d035      	beq.n	80033d4 <__pow5mult+0x90>
 8003368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800336a:	b93c      	cbnz	r4, 800337c <__pow5mult+0x38>
 800336c:	2010      	movs	r0, #16
 800336e:	f7ff fe6d 	bl	800304c <malloc>
 8003372:	6270      	str	r0, [r6, #36]	; 0x24
 8003374:	6044      	str	r4, [r0, #4]
 8003376:	6084      	str	r4, [r0, #8]
 8003378:	6004      	str	r4, [r0, #0]
 800337a:	60c4      	str	r4, [r0, #12]
 800337c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003384:	b94c      	cbnz	r4, 800339a <__pow5mult+0x56>
 8003386:	f240 2171 	movw	r1, #625	; 0x271
 800338a:	4630      	mov	r0, r6
 800338c:	f7ff ff45 	bl	800321a <__i2b>
 8003390:	2300      	movs	r3, #0
 8003392:	4604      	mov	r4, r0
 8003394:	f8c8 0008 	str.w	r0, [r8, #8]
 8003398:	6003      	str	r3, [r0, #0]
 800339a:	f04f 0800 	mov.w	r8, #0
 800339e:	07eb      	lsls	r3, r5, #31
 80033a0:	d50a      	bpl.n	80033b8 <__pow5mult+0x74>
 80033a2:	4639      	mov	r1, r7
 80033a4:	4622      	mov	r2, r4
 80033a6:	4630      	mov	r0, r6
 80033a8:	f7ff ff40 	bl	800322c <__multiply>
 80033ac:	4681      	mov	r9, r0
 80033ae:	4639      	mov	r1, r7
 80033b0:	4630      	mov	r0, r6
 80033b2:	f7ff fe92 	bl	80030da <_Bfree>
 80033b6:	464f      	mov	r7, r9
 80033b8:	106d      	asrs	r5, r5, #1
 80033ba:	d00b      	beq.n	80033d4 <__pow5mult+0x90>
 80033bc:	6820      	ldr	r0, [r4, #0]
 80033be:	b938      	cbnz	r0, 80033d0 <__pow5mult+0x8c>
 80033c0:	4622      	mov	r2, r4
 80033c2:	4621      	mov	r1, r4
 80033c4:	4630      	mov	r0, r6
 80033c6:	f7ff ff31 	bl	800322c <__multiply>
 80033ca:	6020      	str	r0, [r4, #0]
 80033cc:	f8c0 8000 	str.w	r8, [r0]
 80033d0:	4604      	mov	r4, r0
 80033d2:	e7e4      	b.n	800339e <__pow5mult+0x5a>
 80033d4:	4638      	mov	r0, r7
 80033d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033da:	bf00      	nop
 80033dc:	080038a0 	.word	0x080038a0

080033e0 <__lshift>:
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	460c      	mov	r4, r1
 80033e6:	4607      	mov	r7, r0
 80033e8:	4616      	mov	r6, r2
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80033f0:	eb0a 0903 	add.w	r9, sl, r3
 80033f4:	6849      	ldr	r1, [r1, #4]
 80033f6:	68a3      	ldr	r3, [r4, #8]
 80033f8:	f109 0501 	add.w	r5, r9, #1
 80033fc:	42ab      	cmp	r3, r5
 80033fe:	db31      	blt.n	8003464 <__lshift+0x84>
 8003400:	4638      	mov	r0, r7
 8003402:	f7ff fe36 	bl	8003072 <_Balloc>
 8003406:	2200      	movs	r2, #0
 8003408:	4680      	mov	r8, r0
 800340a:	4611      	mov	r1, r2
 800340c:	f100 0314 	add.w	r3, r0, #20
 8003410:	4552      	cmp	r2, sl
 8003412:	db2a      	blt.n	800346a <__lshift+0x8a>
 8003414:	6920      	ldr	r0, [r4, #16]
 8003416:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800341a:	f104 0114 	add.w	r1, r4, #20
 800341e:	f016 021f 	ands.w	r2, r6, #31
 8003422:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003426:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800342a:	d022      	beq.n	8003472 <__lshift+0x92>
 800342c:	2000      	movs	r0, #0
 800342e:	f1c2 0c20 	rsb	ip, r2, #32
 8003432:	680e      	ldr	r6, [r1, #0]
 8003434:	4096      	lsls	r6, r2
 8003436:	4330      	orrs	r0, r6
 8003438:	f843 0b04 	str.w	r0, [r3], #4
 800343c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003440:	458e      	cmp	lr, r1
 8003442:	fa20 f00c 	lsr.w	r0, r0, ip
 8003446:	d8f4      	bhi.n	8003432 <__lshift+0x52>
 8003448:	6018      	str	r0, [r3, #0]
 800344a:	b108      	cbz	r0, 8003450 <__lshift+0x70>
 800344c:	f109 0502 	add.w	r5, r9, #2
 8003450:	3d01      	subs	r5, #1
 8003452:	4638      	mov	r0, r7
 8003454:	f8c8 5010 	str.w	r5, [r8, #16]
 8003458:	4621      	mov	r1, r4
 800345a:	f7ff fe3e 	bl	80030da <_Bfree>
 800345e:	4640      	mov	r0, r8
 8003460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003464:	3101      	adds	r1, #1
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	e7c8      	b.n	80033fc <__lshift+0x1c>
 800346a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800346e:	3201      	adds	r2, #1
 8003470:	e7ce      	b.n	8003410 <__lshift+0x30>
 8003472:	3b04      	subs	r3, #4
 8003474:	f851 2b04 	ldr.w	r2, [r1], #4
 8003478:	458e      	cmp	lr, r1
 800347a:	f843 2f04 	str.w	r2, [r3, #4]!
 800347e:	d8f9      	bhi.n	8003474 <__lshift+0x94>
 8003480:	e7e6      	b.n	8003450 <__lshift+0x70>

08003482 <__mcmp>:
 8003482:	6903      	ldr	r3, [r0, #16]
 8003484:	690a      	ldr	r2, [r1, #16]
 8003486:	b530      	push	{r4, r5, lr}
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	d10c      	bne.n	80034a6 <__mcmp+0x24>
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	3014      	adds	r0, #20
 8003490:	3114      	adds	r1, #20
 8003492:	1884      	adds	r4, r0, r2
 8003494:	4411      	add	r1, r2
 8003496:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800349a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800349e:	4295      	cmp	r5, r2
 80034a0:	d003      	beq.n	80034aa <__mcmp+0x28>
 80034a2:	d305      	bcc.n	80034b0 <__mcmp+0x2e>
 80034a4:	2301      	movs	r3, #1
 80034a6:	4618      	mov	r0, r3
 80034a8:	bd30      	pop	{r4, r5, pc}
 80034aa:	42a0      	cmp	r0, r4
 80034ac:	d3f3      	bcc.n	8003496 <__mcmp+0x14>
 80034ae:	e7fa      	b.n	80034a6 <__mcmp+0x24>
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295
 80034b4:	e7f7      	b.n	80034a6 <__mcmp+0x24>

080034b6 <__mdiff>:
 80034b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ba:	460d      	mov	r5, r1
 80034bc:	4607      	mov	r7, r0
 80034be:	4611      	mov	r1, r2
 80034c0:	4628      	mov	r0, r5
 80034c2:	4614      	mov	r4, r2
 80034c4:	f7ff ffdd 	bl	8003482 <__mcmp>
 80034c8:	1e06      	subs	r6, r0, #0
 80034ca:	d108      	bne.n	80034de <__mdiff+0x28>
 80034cc:	4631      	mov	r1, r6
 80034ce:	4638      	mov	r0, r7
 80034d0:	f7ff fdcf 	bl	8003072 <_Balloc>
 80034d4:	2301      	movs	r3, #1
 80034d6:	6146      	str	r6, [r0, #20]
 80034d8:	6103      	str	r3, [r0, #16]
 80034da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034de:	bfa4      	itt	ge
 80034e0:	4623      	movge	r3, r4
 80034e2:	462c      	movge	r4, r5
 80034e4:	4638      	mov	r0, r7
 80034e6:	6861      	ldr	r1, [r4, #4]
 80034e8:	bfa6      	itte	ge
 80034ea:	461d      	movge	r5, r3
 80034ec:	2600      	movge	r6, #0
 80034ee:	2601      	movlt	r6, #1
 80034f0:	f7ff fdbf 	bl	8003072 <_Balloc>
 80034f4:	f04f 0c00 	mov.w	ip, #0
 80034f8:	60c6      	str	r6, [r0, #12]
 80034fa:	692b      	ldr	r3, [r5, #16]
 80034fc:	6926      	ldr	r6, [r4, #16]
 80034fe:	f104 0214 	add.w	r2, r4, #20
 8003502:	f105 0914 	add.w	r9, r5, #20
 8003506:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800350a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800350e:	f100 0114 	add.w	r1, r0, #20
 8003512:	f852 ab04 	ldr.w	sl, [r2], #4
 8003516:	f859 5b04 	ldr.w	r5, [r9], #4
 800351a:	fa1f f38a 	uxth.w	r3, sl
 800351e:	4463      	add	r3, ip
 8003520:	b2ac      	uxth	r4, r5
 8003522:	1b1b      	subs	r3, r3, r4
 8003524:	0c2c      	lsrs	r4, r5, #16
 8003526:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800352a:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800352e:	b29b      	uxth	r3, r3
 8003530:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003534:	45c8      	cmp	r8, r9
 8003536:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800353a:	4696      	mov	lr, r2
 800353c:	f841 4b04 	str.w	r4, [r1], #4
 8003540:	d8e7      	bhi.n	8003512 <__mdiff+0x5c>
 8003542:	45be      	cmp	lr, r7
 8003544:	d305      	bcc.n	8003552 <__mdiff+0x9c>
 8003546:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800354a:	b18b      	cbz	r3, 8003570 <__mdiff+0xba>
 800354c:	6106      	str	r6, [r0, #16]
 800354e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003552:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003556:	b2a2      	uxth	r2, r4
 8003558:	4462      	add	r2, ip
 800355a:	1413      	asrs	r3, r2, #16
 800355c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003560:	b292      	uxth	r2, r2
 8003562:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003566:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800356a:	f841 2b04 	str.w	r2, [r1], #4
 800356e:	e7e8      	b.n	8003542 <__mdiff+0x8c>
 8003570:	3e01      	subs	r6, #1
 8003572:	e7e8      	b.n	8003546 <__mdiff+0x90>

08003574 <__d2b>:
 8003574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003578:	461c      	mov	r4, r3
 800357a:	2101      	movs	r1, #1
 800357c:	4690      	mov	r8, r2
 800357e:	9e08      	ldr	r6, [sp, #32]
 8003580:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003582:	f7ff fd76 	bl	8003072 <_Balloc>
 8003586:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800358a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800358e:	4607      	mov	r7, r0
 8003590:	bb34      	cbnz	r4, 80035e0 <__d2b+0x6c>
 8003592:	9201      	str	r2, [sp, #4]
 8003594:	f1b8 0f00 	cmp.w	r8, #0
 8003598:	d027      	beq.n	80035ea <__d2b+0x76>
 800359a:	a802      	add	r0, sp, #8
 800359c:	f840 8d08 	str.w	r8, [r0, #-8]!
 80035a0:	f7ff fe0c 	bl	80031bc <__lo0bits>
 80035a4:	9900      	ldr	r1, [sp, #0]
 80035a6:	b1f0      	cbz	r0, 80035e6 <__d2b+0x72>
 80035a8:	9a01      	ldr	r2, [sp, #4]
 80035aa:	f1c0 0320 	rsb	r3, r0, #32
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	430b      	orrs	r3, r1
 80035b4:	40c2      	lsrs	r2, r0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	9b01      	ldr	r3, [sp, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2102      	movne	r1, #2
 80035c2:	2101      	moveq	r1, #1
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	6139      	str	r1, [r7, #16]
 80035c8:	b1c4      	cbz	r4, 80035fc <__d2b+0x88>
 80035ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80035ce:	4404      	add	r4, r0
 80035d0:	6034      	str	r4, [r6, #0]
 80035d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80035d6:	6028      	str	r0, [r5, #0]
 80035d8:	4638      	mov	r0, r7
 80035da:	b002      	add	sp, #8
 80035dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035e4:	e7d5      	b.n	8003592 <__d2b+0x1e>
 80035e6:	6179      	str	r1, [r7, #20]
 80035e8:	e7e7      	b.n	80035ba <__d2b+0x46>
 80035ea:	a801      	add	r0, sp, #4
 80035ec:	f7ff fde6 	bl	80031bc <__lo0bits>
 80035f0:	2101      	movs	r1, #1
 80035f2:	9b01      	ldr	r3, [sp, #4]
 80035f4:	6139      	str	r1, [r7, #16]
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	3020      	adds	r0, #32
 80035fa:	e7e5      	b.n	80035c8 <__d2b+0x54>
 80035fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003600:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003604:	6030      	str	r0, [r6, #0]
 8003606:	6918      	ldr	r0, [r3, #16]
 8003608:	f7ff fdb9 	bl	800317e <__hi0bits>
 800360c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003610:	e7e1      	b.n	80035d6 <__d2b+0x62>

08003612 <_calloc_r>:
 8003612:	b538      	push	{r3, r4, r5, lr}
 8003614:	fb02 f401 	mul.w	r4, r2, r1
 8003618:	4621      	mov	r1, r4
 800361a:	f000 f809 	bl	8003630 <_malloc_r>
 800361e:	4605      	mov	r5, r0
 8003620:	b118      	cbz	r0, 800362a <_calloc_r+0x18>
 8003622:	4622      	mov	r2, r4
 8003624:	2100      	movs	r1, #0
 8003626:	f7fe fb59 	bl	8001cdc <memset>
 800362a:	4628      	mov	r0, r5
 800362c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003630 <_malloc_r>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	1ccd      	adds	r5, r1, #3
 8003634:	f025 0503 	bic.w	r5, r5, #3
 8003638:	3508      	adds	r5, #8
 800363a:	2d0c      	cmp	r5, #12
 800363c:	bf38      	it	cc
 800363e:	250c      	movcc	r5, #12
 8003640:	2d00      	cmp	r5, #0
 8003642:	4606      	mov	r6, r0
 8003644:	db01      	blt.n	800364a <_malloc_r+0x1a>
 8003646:	42a9      	cmp	r1, r5
 8003648:	d903      	bls.n	8003652 <_malloc_r+0x22>
 800364a:	230c      	movs	r3, #12
 800364c:	6033      	str	r3, [r6, #0]
 800364e:	2000      	movs	r0, #0
 8003650:	bd70      	pop	{r4, r5, r6, pc}
 8003652:	f000 f86d 	bl	8003730 <__malloc_lock>
 8003656:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <_malloc_r+0xb4>)
 8003658:	6814      	ldr	r4, [r2, #0]
 800365a:	4621      	mov	r1, r4
 800365c:	b991      	cbnz	r1, 8003684 <_malloc_r+0x54>
 800365e:	4c22      	ldr	r4, [pc, #136]	; (80036e8 <_malloc_r+0xb8>)
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	b91b      	cbnz	r3, 800366c <_malloc_r+0x3c>
 8003664:	4630      	mov	r0, r6
 8003666:	f000 f841 	bl	80036ec <_sbrk_r>
 800366a:	6020      	str	r0, [r4, #0]
 800366c:	4629      	mov	r1, r5
 800366e:	4630      	mov	r0, r6
 8003670:	f000 f83c 	bl	80036ec <_sbrk_r>
 8003674:	1c43      	adds	r3, r0, #1
 8003676:	d126      	bne.n	80036c6 <_malloc_r+0x96>
 8003678:	230c      	movs	r3, #12
 800367a:	4630      	mov	r0, r6
 800367c:	6033      	str	r3, [r6, #0]
 800367e:	f000 f858 	bl	8003732 <__malloc_unlock>
 8003682:	e7e4      	b.n	800364e <_malloc_r+0x1e>
 8003684:	680b      	ldr	r3, [r1, #0]
 8003686:	1b5b      	subs	r3, r3, r5
 8003688:	d41a      	bmi.n	80036c0 <_malloc_r+0x90>
 800368a:	2b0b      	cmp	r3, #11
 800368c:	d90f      	bls.n	80036ae <_malloc_r+0x7e>
 800368e:	600b      	str	r3, [r1, #0]
 8003690:	18cc      	adds	r4, r1, r3
 8003692:	50cd      	str	r5, [r1, r3]
 8003694:	4630      	mov	r0, r6
 8003696:	f000 f84c 	bl	8003732 <__malloc_unlock>
 800369a:	f104 000b 	add.w	r0, r4, #11
 800369e:	1d23      	adds	r3, r4, #4
 80036a0:	f020 0007 	bic.w	r0, r0, #7
 80036a4:	1ac3      	subs	r3, r0, r3
 80036a6:	d01b      	beq.n	80036e0 <_malloc_r+0xb0>
 80036a8:	425a      	negs	r2, r3
 80036aa:	50e2      	str	r2, [r4, r3]
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
 80036ae:	428c      	cmp	r4, r1
 80036b0:	bf0b      	itete	eq
 80036b2:	6863      	ldreq	r3, [r4, #4]
 80036b4:	684b      	ldrne	r3, [r1, #4]
 80036b6:	6013      	streq	r3, [r2, #0]
 80036b8:	6063      	strne	r3, [r4, #4]
 80036ba:	bf18      	it	ne
 80036bc:	460c      	movne	r4, r1
 80036be:	e7e9      	b.n	8003694 <_malloc_r+0x64>
 80036c0:	460c      	mov	r4, r1
 80036c2:	6849      	ldr	r1, [r1, #4]
 80036c4:	e7ca      	b.n	800365c <_malloc_r+0x2c>
 80036c6:	1cc4      	adds	r4, r0, #3
 80036c8:	f024 0403 	bic.w	r4, r4, #3
 80036cc:	42a0      	cmp	r0, r4
 80036ce:	d005      	beq.n	80036dc <_malloc_r+0xac>
 80036d0:	1a21      	subs	r1, r4, r0
 80036d2:	4630      	mov	r0, r6
 80036d4:	f000 f80a 	bl	80036ec <_sbrk_r>
 80036d8:	3001      	adds	r0, #1
 80036da:	d0cd      	beq.n	8003678 <_malloc_r+0x48>
 80036dc:	6025      	str	r5, [r4, #0]
 80036de:	e7d9      	b.n	8003694 <_malloc_r+0x64>
 80036e0:	bd70      	pop	{r4, r5, r6, pc}
 80036e2:	bf00      	nop
 80036e4:	20000220 	.word	0x20000220
 80036e8:	20000224 	.word	0x20000224

080036ec <_sbrk_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	2300      	movs	r3, #0
 80036f0:	4c05      	ldr	r4, [pc, #20]	; (8003708 <_sbrk_r+0x1c>)
 80036f2:	4605      	mov	r5, r0
 80036f4:	4608      	mov	r0, r1
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	f7fe fa60 	bl	8001bbc <_sbrk>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d102      	bne.n	8003706 <_sbrk_r+0x1a>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	b103      	cbz	r3, 8003706 <_sbrk_r+0x1a>
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	200002f8 	.word	0x200002f8

0800370c <__ascii_mbtowc>:
 800370c:	b082      	sub	sp, #8
 800370e:	b901      	cbnz	r1, 8003712 <__ascii_mbtowc+0x6>
 8003710:	a901      	add	r1, sp, #4
 8003712:	b142      	cbz	r2, 8003726 <__ascii_mbtowc+0x1a>
 8003714:	b14b      	cbz	r3, 800372a <__ascii_mbtowc+0x1e>
 8003716:	7813      	ldrb	r3, [r2, #0]
 8003718:	600b      	str	r3, [r1, #0]
 800371a:	7812      	ldrb	r2, [r2, #0]
 800371c:	1c10      	adds	r0, r2, #0
 800371e:	bf18      	it	ne
 8003720:	2001      	movne	r0, #1
 8003722:	b002      	add	sp, #8
 8003724:	4770      	bx	lr
 8003726:	4610      	mov	r0, r2
 8003728:	e7fb      	b.n	8003722 <__ascii_mbtowc+0x16>
 800372a:	f06f 0001 	mvn.w	r0, #1
 800372e:	e7f8      	b.n	8003722 <__ascii_mbtowc+0x16>

08003730 <__malloc_lock>:
 8003730:	4770      	bx	lr

08003732 <__malloc_unlock>:
 8003732:	4770      	bx	lr

08003734 <__ascii_wctomb>:
 8003734:	b149      	cbz	r1, 800374a <__ascii_wctomb+0x16>
 8003736:	2aff      	cmp	r2, #255	; 0xff
 8003738:	bf8b      	itete	hi
 800373a:	238a      	movhi	r3, #138	; 0x8a
 800373c:	700a      	strbls	r2, [r1, #0]
 800373e:	6003      	strhi	r3, [r0, #0]
 8003740:	2001      	movls	r0, #1
 8003742:	bf88      	it	hi
 8003744:	f04f 30ff 	movhi.w	r0, #4294967295
 8003748:	4770      	bx	lr
 800374a:	4608      	mov	r0, r1
 800374c:	4770      	bx	lr
	...

08003750 <_init>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr

0800375c <_fini>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr
