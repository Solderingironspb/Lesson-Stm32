
encoder_nvic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002774  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a4  080028a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028a4  080028a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a4  080028a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  080028b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080028b8  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000661e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001532  00000000  00000000  00026653  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  00027b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00028250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001609c  00000000  00000000  000288f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061e1  00000000  00000000  0003e98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d824  00000000  00000000  00044b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2391  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019dc  00000000  00000000  000c240c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002868 	.word	0x08002868

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002868 	.word	0x08002868

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f800 	bl	800216c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000030 	.word	0x20000030

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000030 	.word	0x20000030

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000478:	2300      	movs	r3, #0
 800047a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000482:	2b02      	cmp	r3, #2
 8000484:	d005      	beq.n	8000492 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2204      	movs	r2, #4
 800048a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800048c:	2301      	movs	r3, #1
 800048e:	73fb      	strb	r3, [r7, #15]
 8000490:	e051      	b.n	8000536 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f022 020e 	bic.w	r2, r2, #14
 80004a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f022 0201 	bic.w	r2, r2, #1
 80004b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a22      	ldr	r2, [pc, #136]	; (8000540 <HAL_DMA_Abort_IT+0xd0>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d029      	beq.n	8000510 <HAL_DMA_Abort_IT+0xa0>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a20      	ldr	r2, [pc, #128]	; (8000544 <HAL_DMA_Abort_IT+0xd4>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d022      	beq.n	800050c <HAL_DMA_Abort_IT+0x9c>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1f      	ldr	r2, [pc, #124]	; (8000548 <HAL_DMA_Abort_IT+0xd8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d01a      	beq.n	8000506 <HAL_DMA_Abort_IT+0x96>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1d      	ldr	r2, [pc, #116]	; (800054c <HAL_DMA_Abort_IT+0xdc>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d012      	beq.n	8000500 <HAL_DMA_Abort_IT+0x90>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <HAL_DMA_Abort_IT+0xe0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d00a      	beq.n	80004fa <HAL_DMA_Abort_IT+0x8a>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1a      	ldr	r2, [pc, #104]	; (8000554 <HAL_DMA_Abort_IT+0xe4>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d102      	bne.n	80004f4 <HAL_DMA_Abort_IT+0x84>
 80004ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004f2:	e00e      	b.n	8000512 <HAL_DMA_Abort_IT+0xa2>
 80004f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004f8:	e00b      	b.n	8000512 <HAL_DMA_Abort_IT+0xa2>
 80004fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004fe:	e008      	b.n	8000512 <HAL_DMA_Abort_IT+0xa2>
 8000500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000504:	e005      	b.n	8000512 <HAL_DMA_Abort_IT+0xa2>
 8000506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050a:	e002      	b.n	8000512 <HAL_DMA_Abort_IT+0xa2>
 800050c:	2310      	movs	r3, #16
 800050e:	e000      	b.n	8000512 <HAL_DMA_Abort_IT+0xa2>
 8000510:	2301      	movs	r3, #1
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <HAL_DMA_Abort_IT+0xe8>)
 8000514:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2201      	movs	r2, #1
 800051a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052a:	2b00      	cmp	r3, #0
 800052c:	d003      	beq.n	8000536 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	4798      	blx	r3
    } 
  }
  return status;
 8000536:	7bfb      	ldrb	r3, [r7, #15]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40020008 	.word	0x40020008
 8000544:	4002001c 	.word	0x4002001c
 8000548:	40020030 	.word	0x40020030
 800054c:	40020044 	.word	0x40020044
 8000550:	40020058 	.word	0x40020058
 8000554:	4002006c 	.word	0x4002006c
 8000558:	40020000 	.word	0x40020000

0800055c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800055c:	b480      	push	{r7}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000566:	2300      	movs	r3, #0
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800056e:	e127      	b.n	80007c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000570:	2201      	movs	r2, #1
 8000572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	69fa      	ldr	r2, [r7, #28]
 8000580:	4013      	ands	r3, r2
 8000582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000584:	69ba      	ldr	r2, [r7, #24]
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	429a      	cmp	r2, r3
 800058a:	f040 8116 	bne.w	80007ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	2b12      	cmp	r3, #18
 8000594:	d034      	beq.n	8000600 <HAL_GPIO_Init+0xa4>
 8000596:	2b12      	cmp	r3, #18
 8000598:	d80d      	bhi.n	80005b6 <HAL_GPIO_Init+0x5a>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d02b      	beq.n	80005f6 <HAL_GPIO_Init+0x9a>
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d804      	bhi.n	80005ac <HAL_GPIO_Init+0x50>
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d031      	beq.n	800060a <HAL_GPIO_Init+0xae>
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d01c      	beq.n	80005e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80005aa:	e048      	b.n	800063e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d043      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
 80005b0:	2b11      	cmp	r3, #17
 80005b2:	d01b      	beq.n	80005ec <HAL_GPIO_Init+0x90>
          break;
 80005b4:	e043      	b.n	800063e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80005b6:	4a89      	ldr	r2, [pc, #548]	; (80007dc <HAL_GPIO_Init+0x280>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d026      	beq.n	800060a <HAL_GPIO_Init+0xae>
 80005bc:	4a87      	ldr	r2, [pc, #540]	; (80007dc <HAL_GPIO_Init+0x280>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d806      	bhi.n	80005d0 <HAL_GPIO_Init+0x74>
 80005c2:	4a87      	ldr	r2, [pc, #540]	; (80007e0 <HAL_GPIO_Init+0x284>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d020      	beq.n	800060a <HAL_GPIO_Init+0xae>
 80005c8:	4a86      	ldr	r2, [pc, #536]	; (80007e4 <HAL_GPIO_Init+0x288>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d01d      	beq.n	800060a <HAL_GPIO_Init+0xae>
          break;
 80005ce:	e036      	b.n	800063e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80005d0:	4a85      	ldr	r2, [pc, #532]	; (80007e8 <HAL_GPIO_Init+0x28c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d019      	beq.n	800060a <HAL_GPIO_Init+0xae>
 80005d6:	4a85      	ldr	r2, [pc, #532]	; (80007ec <HAL_GPIO_Init+0x290>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d016      	beq.n	800060a <HAL_GPIO_Init+0xae>
 80005dc:	4a84      	ldr	r2, [pc, #528]	; (80007f0 <HAL_GPIO_Init+0x294>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d013      	beq.n	800060a <HAL_GPIO_Init+0xae>
          break;
 80005e2:	e02c      	b.n	800063e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	623b      	str	r3, [r7, #32]
          break;
 80005ea:	e028      	b.n	800063e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	3304      	adds	r3, #4
 80005f2:	623b      	str	r3, [r7, #32]
          break;
 80005f4:	e023      	b.n	800063e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	3308      	adds	r3, #8
 80005fc:	623b      	str	r3, [r7, #32]
          break;
 80005fe:	e01e      	b.n	800063e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	330c      	adds	r3, #12
 8000606:	623b      	str	r3, [r7, #32]
          break;
 8000608:	e019      	b.n	800063e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d102      	bne.n	8000618 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000612:	2304      	movs	r3, #4
 8000614:	623b      	str	r3, [r7, #32]
          break;
 8000616:	e012      	b.n	800063e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d105      	bne.n	800062c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000620:	2308      	movs	r3, #8
 8000622:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	69fa      	ldr	r2, [r7, #28]
 8000628:	611a      	str	r2, [r3, #16]
          break;
 800062a:	e008      	b.n	800063e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800062c:	2308      	movs	r3, #8
 800062e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	69fa      	ldr	r2, [r7, #28]
 8000634:	615a      	str	r2, [r3, #20]
          break;
 8000636:	e002      	b.n	800063e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
          break;
 800063c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	2bff      	cmp	r3, #255	; 0xff
 8000642:	d801      	bhi.n	8000648 <HAL_GPIO_Init+0xec>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	e001      	b.n	800064c <HAL_GPIO_Init+0xf0>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3304      	adds	r3, #4
 800064c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	2bff      	cmp	r3, #255	; 0xff
 8000652:	d802      	bhi.n	800065a <HAL_GPIO_Init+0xfe>
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	e002      	b.n	8000660 <HAL_GPIO_Init+0x104>
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	3b08      	subs	r3, #8
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	210f      	movs	r1, #15
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43db      	mvns	r3, r3
 8000670:	401a      	ands	r2, r3
 8000672:	6a39      	ldr	r1, [r7, #32]
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	431a      	orrs	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	2b00      	cmp	r3, #0
 800068a:	f000 8096 	beq.w	80007ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800068e:	4b59      	ldr	r3, [pc, #356]	; (80007f4 <HAL_GPIO_Init+0x298>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a58      	ldr	r2, [pc, #352]	; (80007f4 <HAL_GPIO_Init+0x298>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <HAL_GPIO_Init+0x298>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80006a6:	4a54      	ldr	r2, [pc, #336]	; (80007f8 <HAL_GPIO_Init+0x29c>)
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	3302      	adds	r3, #2
 80006ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	f003 0303 	and.w	r3, r3, #3
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	220f      	movs	r2, #15
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	43db      	mvns	r3, r3
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4013      	ands	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a4b      	ldr	r2, [pc, #300]	; (80007fc <HAL_GPIO_Init+0x2a0>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d013      	beq.n	80006fa <HAL_GPIO_Init+0x19e>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a4a      	ldr	r2, [pc, #296]	; (8000800 <HAL_GPIO_Init+0x2a4>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d00d      	beq.n	80006f6 <HAL_GPIO_Init+0x19a>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a49      	ldr	r2, [pc, #292]	; (8000804 <HAL_GPIO_Init+0x2a8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d007      	beq.n	80006f2 <HAL_GPIO_Init+0x196>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a48      	ldr	r2, [pc, #288]	; (8000808 <HAL_GPIO_Init+0x2ac>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d101      	bne.n	80006ee <HAL_GPIO_Init+0x192>
 80006ea:	2303      	movs	r3, #3
 80006ec:	e006      	b.n	80006fc <HAL_GPIO_Init+0x1a0>
 80006ee:	2304      	movs	r3, #4
 80006f0:	e004      	b.n	80006fc <HAL_GPIO_Init+0x1a0>
 80006f2:	2302      	movs	r3, #2
 80006f4:	e002      	b.n	80006fc <HAL_GPIO_Init+0x1a0>
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <HAL_GPIO_Init+0x1a0>
 80006fa:	2300      	movs	r3, #0
 80006fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006fe:	f002 0203 	and.w	r2, r2, #3
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	4093      	lsls	r3, r2
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	4313      	orrs	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800070c:	493a      	ldr	r1, [pc, #232]	; (80007f8 <HAL_GPIO_Init+0x29c>)
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	089b      	lsrs	r3, r3, #2
 8000712:	3302      	adds	r3, #2
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <HAL_GPIO_Init+0x2b0>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4938      	ldr	r1, [pc, #224]	; (800080c <HAL_GPIO_Init+0x2b0>)
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	4313      	orrs	r3, r2
 8000730:	600b      	str	r3, [r1, #0]
 8000732:	e006      	b.n	8000742 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000734:	4b35      	ldr	r3, [pc, #212]	; (800080c <HAL_GPIO_Init+0x2b0>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	43db      	mvns	r3, r3
 800073c:	4933      	ldr	r1, [pc, #204]	; (800080c <HAL_GPIO_Init+0x2b0>)
 800073e:	4013      	ands	r3, r2
 8000740:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074a:	2b00      	cmp	r3, #0
 800074c:	d006      	beq.n	800075c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <HAL_GPIO_Init+0x2b0>)
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	492e      	ldr	r1, [pc, #184]	; (800080c <HAL_GPIO_Init+0x2b0>)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	4313      	orrs	r3, r2
 8000758:	604b      	str	r3, [r1, #4]
 800075a:	e006      	b.n	800076a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <HAL_GPIO_Init+0x2b0>)
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	43db      	mvns	r3, r3
 8000764:	4929      	ldr	r1, [pc, #164]	; (800080c <HAL_GPIO_Init+0x2b0>)
 8000766:	4013      	ands	r3, r2
 8000768:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d006      	beq.n	8000784 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <HAL_GPIO_Init+0x2b0>)
 8000778:	689a      	ldr	r2, [r3, #8]
 800077a:	4924      	ldr	r1, [pc, #144]	; (800080c <HAL_GPIO_Init+0x2b0>)
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	4313      	orrs	r3, r2
 8000780:	608b      	str	r3, [r1, #8]
 8000782:	e006      	b.n	8000792 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <HAL_GPIO_Init+0x2b0>)
 8000786:	689a      	ldr	r2, [r3, #8]
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	43db      	mvns	r3, r3
 800078c:	491f      	ldr	r1, [pc, #124]	; (800080c <HAL_GPIO_Init+0x2b0>)
 800078e:	4013      	ands	r3, r2
 8000790:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d006      	beq.n	80007ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <HAL_GPIO_Init+0x2b0>)
 80007a0:	68da      	ldr	r2, [r3, #12]
 80007a2:	491a      	ldr	r1, [pc, #104]	; (800080c <HAL_GPIO_Init+0x2b0>)
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	60cb      	str	r3, [r1, #12]
 80007aa:	e006      	b.n	80007ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_GPIO_Init+0x2b0>)
 80007ae:	68da      	ldr	r2, [r3, #12]
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4915      	ldr	r1, [pc, #84]	; (800080c <HAL_GPIO_Init+0x2b0>)
 80007b6:	4013      	ands	r3, r2
 80007b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	3301      	adds	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	fa22 f303 	lsr.w	r3, r2, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f47f aed0 	bne.w	8000570 <HAL_GPIO_Init+0x14>
  }
}
 80007d0:	bf00      	nop
 80007d2:	372c      	adds	r7, #44	; 0x2c
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	10210000 	.word	0x10210000
 80007e0:	10110000 	.word	0x10110000
 80007e4:	10120000 	.word	0x10120000
 80007e8:	10310000 	.word	0x10310000
 80007ec:	10320000 	.word	0x10320000
 80007f0:	10220000 	.word	0x10220000
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010000 	.word	0x40010000
 80007fc:	40010800 	.word	0x40010800
 8000800:	40010c00 	.word	0x40010c00
 8000804:	40011000 	.word	0x40011000
 8000808:	40011400 	.word	0x40011400
 800080c:	40010400 	.word	0x40010400

08000810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
 800081c:	4613      	mov	r3, r2
 800081e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000820:	787b      	ldrb	r3, [r7, #1]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000826:	887a      	ldrh	r2, [r7, #2]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800082c:	e003      	b.n	8000836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	041a      	lsls	r2, r3, #16
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	611a      	str	r2, [r3, #16]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	4013      	ands	r3, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000858:	88fb      	ldrh	r3, [r7, #6]
 800085a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f806 	bl	8000870 <HAL_GPIO_EXTI_Callback>
  }
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40010400 	.word	0x40010400

08000870 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e26c      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 8087 	beq.w	80009b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008a4:	4b92      	ldr	r3, [pc, #584]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 030c 	and.w	r3, r3, #12
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d00c      	beq.n	80008ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008b0:	4b8f      	ldr	r3, [pc, #572]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 030c 	and.w	r3, r3, #12
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d112      	bne.n	80008e2 <HAL_RCC_OscConfig+0x5e>
 80008bc:	4b8c      	ldr	r3, [pc, #560]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c8:	d10b      	bne.n	80008e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ca:	4b89      	ldr	r3, [pc, #548]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d06c      	beq.n	80009b0 <HAL_RCC_OscConfig+0x12c>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d168      	bne.n	80009b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e246      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ea:	d106      	bne.n	80008fa <HAL_RCC_OscConfig+0x76>
 80008ec:	4b80      	ldr	r3, [pc, #512]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a7f      	ldr	r2, [pc, #508]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80008f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	e02e      	b.n	8000958 <HAL_RCC_OscConfig+0xd4>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10c      	bne.n	800091c <HAL_RCC_OscConfig+0x98>
 8000902:	4b7b      	ldr	r3, [pc, #492]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a7a      	ldr	r2, [pc, #488]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	4b78      	ldr	r3, [pc, #480]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a77      	ldr	r2, [pc, #476]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e01d      	b.n	8000958 <HAL_RCC_OscConfig+0xd4>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000924:	d10c      	bne.n	8000940 <HAL_RCC_OscConfig+0xbc>
 8000926:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a71      	ldr	r2, [pc, #452]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 800092c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	4b6f      	ldr	r3, [pc, #444]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a6e      	ldr	r2, [pc, #440]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e00b      	b.n	8000958 <HAL_RCC_OscConfig+0xd4>
 8000940:	4b6b      	ldr	r3, [pc, #428]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a6a      	ldr	r2, [pc, #424]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b68      	ldr	r3, [pc, #416]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a67      	ldr	r2, [pc, #412]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d013      	beq.n	8000988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000960:	f7ff fc4c 	bl	80001fc <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000966:	e008      	b.n	800097a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000968:	f7ff fc48 	bl	80001fc <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b64      	cmp	r3, #100	; 0x64
 8000974:	d901      	bls.n	800097a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e1fa      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097a:	4b5d      	ldr	r3, [pc, #372]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f0      	beq.n	8000968 <HAL_RCC_OscConfig+0xe4>
 8000986:	e014      	b.n	80009b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000988:	f7ff fc38 	bl	80001fc <HAL_GetTick>
 800098c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800098e:	e008      	b.n	80009a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000990:	f7ff fc34 	bl	80001fc <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b64      	cmp	r3, #100	; 0x64
 800099c:	d901      	bls.n	80009a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e1e6      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f0      	bne.n	8000990 <HAL_RCC_OscConfig+0x10c>
 80009ae:	e000      	b.n	80009b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d063      	beq.n	8000a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009be:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 030c 	and.w	r3, r3, #12
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d00b      	beq.n	80009e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009ca:	4b49      	ldr	r3, [pc, #292]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 030c 	and.w	r3, r3, #12
 80009d2:	2b08      	cmp	r3, #8
 80009d4:	d11c      	bne.n	8000a10 <HAL_RCC_OscConfig+0x18c>
 80009d6:	4b46      	ldr	r3, [pc, #280]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d116      	bne.n	8000a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e2:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d005      	beq.n	80009fa <HAL_RCC_OscConfig+0x176>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d001      	beq.n	80009fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e1ba      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009fa:	4b3d      	ldr	r3, [pc, #244]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	4939      	ldr	r1, [pc, #228]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a0e:	e03a      	b.n	8000a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d020      	beq.n	8000a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <HAL_RCC_OscConfig+0x270>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1e:	f7ff fbed 	bl	80001fc <HAL_GetTick>
 8000a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a24:	e008      	b.n	8000a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a26:	f7ff fbe9 	bl	80001fc <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d901      	bls.n	8000a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a34:	2303      	movs	r3, #3
 8000a36:	e19b      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0f0      	beq.n	8000a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	4927      	ldr	r1, [pc, #156]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	4313      	orrs	r3, r2
 8000a56:	600b      	str	r3, [r1, #0]
 8000a58:	e015      	b.n	8000a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <HAL_RCC_OscConfig+0x270>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a60:	f7ff fbcc 	bl	80001fc <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a66:	e008      	b.n	8000a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a68:	f7ff fbc8 	bl	80001fc <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e17a      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f0      	bne.n	8000a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d03a      	beq.n	8000b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d019      	beq.n	8000ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_RCC_OscConfig+0x274>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa0:	f7ff fbac 	bl	80001fc <HAL_GetTick>
 8000aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa6:	e008      	b.n	8000aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fba8 	bl	80001fc <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d901      	bls.n	8000aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e15a      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f0      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 faa8 	bl	800101c <RCC_Delay>
 8000acc:	e01c      	b.n	8000b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_RCC_OscConfig+0x274>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fb92 	bl	80001fc <HAL_GetTick>
 8000ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ada:	e00f      	b.n	8000afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000adc:	f7ff fb8e 	bl	80001fc <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d908      	bls.n	8000afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e140      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	42420000 	.word	0x42420000
 8000af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000afc:	4b9e      	ldr	r3, [pc, #632]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1e9      	bne.n	8000adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f000 80a6 	beq.w	8000c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b1a:	4b97      	ldr	r3, [pc, #604]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10d      	bne.n	8000b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b94      	ldr	r3, [pc, #592]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a93      	ldr	r2, [pc, #588]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b91      	ldr	r3, [pc, #580]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b42:	4b8e      	ldr	r3, [pc, #568]	; (8000d7c <HAL_RCC_OscConfig+0x4f8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d118      	bne.n	8000b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4e:	4b8b      	ldr	r3, [pc, #556]	; (8000d7c <HAL_RCC_OscConfig+0x4f8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a8a      	ldr	r2, [pc, #552]	; (8000d7c <HAL_RCC_OscConfig+0x4f8>)
 8000b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b5a:	f7ff fb4f 	bl	80001fc <HAL_GetTick>
 8000b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b60:	e008      	b.n	8000b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b62:	f7ff fb4b 	bl	80001fc <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b64      	cmp	r3, #100	; 0x64
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e0fd      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b74:	4b81      	ldr	r3, [pc, #516]	; (8000d7c <HAL_RCC_OscConfig+0x4f8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f0      	beq.n	8000b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d106      	bne.n	8000b96 <HAL_RCC_OscConfig+0x312>
 8000b88:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4a7a      	ldr	r2, [pc, #488]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6213      	str	r3, [r2, #32]
 8000b94:	e02d      	b.n	8000bf2 <HAL_RCC_OscConfig+0x36e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x334>
 8000b9e:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	4a75      	ldr	r2, [pc, #468]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000ba4:	f023 0301 	bic.w	r3, r3, #1
 8000ba8:	6213      	str	r3, [r2, #32]
 8000baa:	4b73      	ldr	r3, [pc, #460]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	4a72      	ldr	r2, [pc, #456]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000bb0:	f023 0304 	bic.w	r3, r3, #4
 8000bb4:	6213      	str	r3, [r2, #32]
 8000bb6:	e01c      	b.n	8000bf2 <HAL_RCC_OscConfig+0x36e>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	d10c      	bne.n	8000bda <HAL_RCC_OscConfig+0x356>
 8000bc0:	4b6d      	ldr	r3, [pc, #436]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	4a6c      	ldr	r2, [pc, #432]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6213      	str	r3, [r2, #32]
 8000bcc:	4b6a      	ldr	r3, [pc, #424]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000bce:	6a1b      	ldr	r3, [r3, #32]
 8000bd0:	4a69      	ldr	r2, [pc, #420]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6213      	str	r3, [r2, #32]
 8000bd8:	e00b      	b.n	8000bf2 <HAL_RCC_OscConfig+0x36e>
 8000bda:	4b67      	ldr	r3, [pc, #412]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000bdc:	6a1b      	ldr	r3, [r3, #32]
 8000bde:	4a66      	ldr	r2, [pc, #408]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000be0:	f023 0301 	bic.w	r3, r3, #1
 8000be4:	6213      	str	r3, [r2, #32]
 8000be6:	4b64      	ldr	r3, [pc, #400]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	4a63      	ldr	r2, [pc, #396]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000bec:	f023 0304 	bic.w	r3, r3, #4
 8000bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d015      	beq.n	8000c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bfa:	f7ff faff 	bl	80001fc <HAL_GetTick>
 8000bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c00:	e00a      	b.n	8000c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c02:	f7ff fafb 	bl	80001fc <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d901      	bls.n	8000c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c14:	2303      	movs	r3, #3
 8000c16:	e0ab      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c18:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0ee      	beq.n	8000c02 <HAL_RCC_OscConfig+0x37e>
 8000c24:	e014      	b.n	8000c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c26:	f7ff fae9 	bl	80001fc <HAL_GetTick>
 8000c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c2c:	e00a      	b.n	8000c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c2e:	f7ff fae5 	bl	80001fc <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d901      	bls.n	8000c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e095      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c44:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1ee      	bne.n	8000c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d105      	bne.n	8000c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c56:	4b48      	ldr	r3, [pc, #288]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 8081 	beq.w	8000d6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c6c:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d061      	beq.n	8000d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d146      	bne.n	8000d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c80:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <HAL_RCC_OscConfig+0x4fc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c86:	f7ff fab9 	bl	80001fc <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c8e:	f7ff fab5 	bl	80001fc <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e067      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f0      	bne.n	8000c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb4:	d108      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	492d      	ldr	r1, [pc, #180]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a19      	ldr	r1, [r3, #32]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	4927      	ldr	r1, [pc, #156]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_RCC_OscConfig+0x4fc>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fa89 	bl	80001fc <HAL_GetTick>
 8000cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cee:	f7ff fa85 	bl	80001fc <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e037      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f0      	beq.n	8000cee <HAL_RCC_OscConfig+0x46a>
 8000d0c:	e02f      	b.n	8000d6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_RCC_OscConfig+0x4fc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fa72 	bl	80001fc <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d1c:	f7ff fa6e 	bl	80001fc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e020      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f0      	bne.n	8000d1c <HAL_RCC_OscConfig+0x498>
 8000d3a:	e018      	b.n	8000d6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d101      	bne.n	8000d48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e013      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_RCC_OscConfig+0x4f4>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d106      	bne.n	8000d6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d001      	beq.n	8000d6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40007000 	.word	0x40007000
 8000d80:	42420060 	.word	0x42420060

08000d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e0d0      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d98:	4b6a      	ldr	r3, [pc, #424]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d910      	bls.n	8000dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da6:	4b67      	ldr	r3, [pc, #412]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 0207 	bic.w	r2, r3, #7
 8000dae:	4965      	ldr	r1, [pc, #404]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db6:	4b63      	ldr	r3, [pc, #396]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e0b8      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d020      	beq.n	8000e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000de0:	4b59      	ldr	r3, [pc, #356]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000df8:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a52      	ldr	r2, [pc, #328]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e04:	4b50      	ldr	r3, [pc, #320]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	494d      	ldr	r1, [pc, #308]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d040      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d107      	bne.n	8000e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	4b47      	ldr	r3, [pc, #284]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d115      	bne.n	8000e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e07f      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d107      	bne.n	8000e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d109      	bne.n	8000e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e073      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e06b      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f023 0203 	bic.w	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4936      	ldr	r1, [pc, #216]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e74:	f7ff f9c2 	bl	80001fc <HAL_GetTick>
 8000e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e7a:	e00a      	b.n	8000e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7c:	f7ff f9be 	bl	80001fc <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e053      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 020c 	and.w	r2, r3, #12
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d1eb      	bne.n	8000e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d210      	bcs.n	8000ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 0207 	bic.w	r2, r3, #7
 8000eba:	4922      	ldr	r1, [pc, #136]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d001      	beq.n	8000ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e032      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d008      	beq.n	8000ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	4916      	ldr	r1, [pc, #88]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d009      	beq.n	8000f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	490e      	ldr	r1, [pc, #56]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f12:	f000 f821 	bl	8000f58 <HAL_RCC_GetSysClockFreq>
 8000f16:	4601      	mov	r1, r0
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_RCC_ClockConfig+0x1c8>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_RCC_ClockConfig+0x1cc>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_RCC_ClockConfig+0x1d0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f920 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	08002894 	.word	0x08002894
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000000 	.word	0x20000000

08000f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f58:	b490      	push	{r4, r7}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f60:	1d3c      	adds	r4, r7, #4
 8000f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d002      	beq.n	8000f98 <HAL_RCC_GetSysClockFreq+0x40>
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d003      	beq.n	8000f9e <HAL_RCC_GetSysClockFreq+0x46>
 8000f96:	e02d      	b.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f9a:	623b      	str	r3, [r7, #32]
      break;
 8000f9c:	e02d      	b.n	8000ffa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	0c9b      	lsrs	r3, r3, #18
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000faa:	4413      	add	r3, r2
 8000fac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	0c5b      	lsrs	r3, r3, #17
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fca:	4413      	add	r3, r2
 8000fcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000fd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fd6:	fb02 f203 	mul.w	r2, r2, r3
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe2:	e004      	b.n	8000fee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	623b      	str	r3, [r7, #32]
      break;
 8000ff2:	e002      	b.n	8000ffa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ff6:	623b      	str	r3, [r7, #32]
      break;
 8000ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bc90      	pop	{r4, r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	08002880 	.word	0x08002880
 800100c:	08002890 	.word	0x08002890
 8001010:	40021000 	.word	0x40021000
 8001014:	007a1200 	.word	0x007a1200
 8001018:	003d0900 	.word	0x003d0900

0800101c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <RCC_Delay+0x34>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <RCC_Delay+0x38>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0a5b      	lsrs	r3, r3, #9
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001038:	bf00      	nop
  }
  while (Delay --);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1e5a      	subs	r2, r3, #1
 800103e:	60fa      	str	r2, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f9      	bne.n	8001038 <RCC_Delay+0x1c>
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	10624dd3 	.word	0x10624dd3

08001058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e076      	b.n	8001158 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	2b00      	cmp	r3, #0
 8001070:	d108      	bne.n	8001084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800107a:	d009      	beq.n	8001090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
 8001082:	e005      	b.n	8001090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f001 f890 	bl	80021d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2202      	movs	r2, #2
 80010b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001114:	ea42 0103 	orr.w	r1, r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	0c1a      	lsrs	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f002 0204 	and.w	r2, r2, #4
 8001136:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	69da      	ldr	r2, [r3, #28]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001146:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	4613      	mov	r3, r2
 800116c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_SPI_Transmit_IT+0x20>
 800117c:	2302      	movs	r3, #2
 800117e:	e06f      	b.n	8001260 <HAL_SPI_Transmit_IT+0x100>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <HAL_SPI_Transmit_IT+0x34>
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001198:	e05d      	b.n	8001256 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d002      	beq.n	80011ac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80011a6:	2302      	movs	r3, #2
 80011a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80011aa:	e054      	b.n	8001256 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2203      	movs	r2, #3
 80011b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	88fa      	ldrh	r2, [r7, #6]
 80011c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	88fa      	ldrh	r2, [r7, #6]
 80011ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_SPI_Transmit_IT+0x10c>)
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
 80011f2:	e002      	b.n	80011fa <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <HAL_SPI_Transmit_IT+0x110>)
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001202:	d10f      	bne.n	8001224 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001212:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001222:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001232:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123e:	2b40      	cmp	r3, #64	; 0x40
 8001240:	d008      	beq.n	8001254 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e000      	b.n	8001256 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8001254:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800125e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001260:	4618      	mov	r0, r3
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	080014d7 	.word	0x080014d7
 8001270:	08001491 	.word	0x08001491

08001274 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	099b      	lsrs	r3, r3, #6
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10f      	bne.n	80012b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00a      	beq.n	80012b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
    return;
 80012b6:	e0bf      	b.n	8001438 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00a      	beq.n	80012da <HAL_SPI_IRQHandler+0x66>
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	09db      	lsrs	r3, r3, #7
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	4798      	blx	r3
    return;
 80012d8:	e0ae      	b.n	8001438 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	095b      	lsrs	r3, r3, #5
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <HAL_SPI_IRQHandler+0x80>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80a2 	beq.w	8001438 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 809b 	beq.w	8001438 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	099b      	lsrs	r3, r3, #6
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d023      	beq.n	8001356 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b03      	cmp	r3, #3
 8001318:	d011      	beq.n	800133e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	f043 0204 	orr.w	r2, r3, #4
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	e00b      	b.n	8001356 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
        return;
 8001354:	e070      	b.n	8001438 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d014      	beq.n	800138c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	2b00      	cmp	r3, #0
 8001392:	d050      	beq.n	8001436 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80013a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d104      	bne.n	80013c0 <HAL_SPI_IRQHandler+0x14c>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d034      	beq.n	800142a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0203 	bic.w	r2, r2, #3
 80013ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d011      	beq.n	80013fc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_SPI_IRQHandler+0x1cc>)
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f843 	bl	8000470 <HAL_DMA_Abort_IT>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001400:	2b00      	cmp	r3, #0
 8001402:	d016      	beq.n	8001432 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_SPI_IRQHandler+0x1cc>)
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f82d 	bl	8000470 <HAL_DMA_Abort_IT>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00a      	beq.n	8001432 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001428:	e003      	b.n	8001432 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f813 	bl	8001456 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001430:	e000      	b.n	8001434 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001432:	bf00      	nop
    return;
 8001434:	bf00      	nop
 8001436:	bf00      	nop
  }
}
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	08001469 	.word	0x08001469

08001444 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff ffe7 	bl	8001456 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	330c      	adds	r3, #12
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3b01      	subs	r3, #1
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f8cd 	bl	8001668 <SPI_CloseTx_ISR>
  }
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	1c9a      	adds	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001506:	b29b      	uxth	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f8ab 	bl	8001668 <SPI_CloseTx_ISR>
  }
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800152c:	f7fe fe66 	bl	80001fc <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	4413      	add	r3, r2
 800153a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800153c:	f7fe fe5e 	bl	80001fc <HAL_GetTick>
 8001540:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	015b      	lsls	r3, r3, #5
 8001548:	0d1b      	lsrs	r3, r3, #20
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001552:	e054      	b.n	80015fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155a:	d050      	beq.n	80015fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800155c:	f7fe fe4e 	bl	80001fc <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	429a      	cmp	r2, r3
 800156a:	d902      	bls.n	8001572 <SPI_WaitFlagStateUntilTimeout+0x56>
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d13d      	bne.n	80015ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001580:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800158a:	d111      	bne.n	80015b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001594:	d004      	beq.n	80015a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159e:	d107      	bne.n	80015b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b8:	d10f      	bne.n	80015da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e017      	b.n	800161e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4013      	ands	r3, r2
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	429a      	cmp	r2, r3
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	429a      	cmp	r2, r3
 800161a:	d19b      	bne.n	8001554 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008

0800162c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2200      	movs	r2, #0
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff ff6a 	bl	800151c <SPI_WaitFlagStateUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	f043 0220 	orr.w	r2, r3, #32
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e000      	b.n	8001660 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <SPI_CloseTx_ISR+0xbc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <SPI_CloseTx_ISR+0xc0>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0a5b      	lsrs	r3, r3, #9
 800167c:	2264      	movs	r2, #100	; 0x64
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001684:	f7fe fdba 	bl	80001fc <HAL_GetTick>
 8001688:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800169c:	e009      	b.n	80016b2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0eb      	beq.n	800168a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016c0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	2164      	movs	r1, #100	; 0x64
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffb0 	bl	800162c <SPI_EndRxTxTransaction>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f043 0220 	orr.w	r2, r3, #32
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10a      	bne.n	80016fc <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fea2 	bl	8001456 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8001712:	e002      	b.n	800171a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe95 	bl	8001444 <HAL_SPI_TxCpltCallback>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	057619f1 	.word	0x057619f1

0800172c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001730:	f7fe fd0c 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001734:	f000 f87a 	bl	800182c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001738:	f000 f8f4 	bl	8001924 <MX_GPIO_Init>
	MX_SPI1_Init();
 800173c:	f000 f8bc 	bl	80018b8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8001740:	2064      	movs	r0, #100	; 0x64
 8001742:	f7fe fd65 	bl	8000210 <HAL_Delay>
	max7219_Init();
 8001746:	f000 f9f1 	bl	8001b2c <max7219_Init>
	if (!(GPIOA->IDR & GPIO_PIN_2) && (!(GPIOA->IDR & GPIO_PIN_3))) {
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <main+0xf0>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <main+0x3e>
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <main+0xf0>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d103      	bne.n	800176a <main+0x3e>
		status_old = 0x00;
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <main+0xf4>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e02e      	b.n	80017c8 <main+0x9c>
	} else if ((GPIOA->IDR & GPIO_PIN_2) && (!(GPIOA->IDR & GPIO_PIN_3))) {
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <main+0xf0>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <main+0x5e>
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <main+0xf0>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <main+0x5e>
		status_old = 0x10;
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <main+0xf4>)
 8001784:	2210      	movs	r2, #16
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e01e      	b.n	80017c8 <main+0x9c>
	} else if ((GPIOA->IDR & GPIO_PIN_2) && (GPIOA->IDR & GPIO_PIN_3)) {
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <main+0xf0>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <main+0x7e>
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <main+0xf0>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <main+0x7e>
		status_old = 0x11;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <main+0xf4>)
 80017a4:	2211      	movs	r2, #17
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	e00e      	b.n	80017c8 <main+0x9c>
	} else if (!(GPIOA->IDR & GPIO_PIN_2) && (GPIOA->IDR & GPIO_PIN_3)) {
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <main+0xf0>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d108      	bne.n	80017c8 <main+0x9c>
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <main+0xf0>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <main+0x9c>
		status_old = 0x01;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <main+0xf4>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
	}

	A = 0;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <main+0xf8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	801a      	strh	r2, [r3, #0]
	max7219_Send_int32_t(A);
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <main+0xf8>)
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fa73 	bl	8001cc0 <max7219_Send_int32_t>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (send_to_display) {
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <main+0xfc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0fb      	beq.n	80017da <main+0xae>
			A >= 2500 ? A = 2500 : A;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <main+0xf8>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80017ec:	4293      	cmp	r3, r2
 80017ee:	dd03      	ble.n	80017f8 <main+0xcc>
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <main+0xf8>)
 80017f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80017f6:	801a      	strh	r2, [r3, #0]
			/*if (A >= 2500) {
			 A = 2500;
			 } else {
			 A = A;
			 }*/
			A <= 0 ? A = 0 : A;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <main+0xf8>)
 80017fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dc02      	bgt.n	8001808 <main+0xdc>
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <main+0xf8>)
 8001804:	2200      	movs	r2, #0
 8001806:	801a      	strh	r2, [r3, #0]
			/*if (A <= 0) {
			 A = 0;
			 } else {
			 A = A;
			 }*/
			max7219_Send_int32_t(A);
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <main+0xf8>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fa56 	bl	8001cc0 <max7219_Send_int32_t>
			send_to_display = 0;
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <main+0xfc>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
		if (send_to_display) {
 800181a:	e7de      	b.n	80017da <main+0xae>
 800181c:	40010800 	.word	0x40010800
 8001820:	20000098 	.word	0x20000098
 8001824:	20000034 	.word	0x20000034
 8001828:	20000036 	.word	0x20000036

0800182c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b090      	sub	sp, #64	; 0x40
 8001830:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	2228      	movs	r2, #40	; 0x28
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f001 f80c 	bl	8002858 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800184e:	2301      	movs	r3, #1
 8001850:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001856:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800185c:	2301      	movs	r3, #1
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001860:	2302      	movs	r3, #2
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800186a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f805 	bl	8000884 <HAL_RCC_OscConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0x58>
		Error_Handler();
 8001880:	f000 f8d6 	bl	8001a30 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001884:	230f      	movs	r3, #15
 8001886:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001888:	2302      	movs	r3, #2
 800188a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001894:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2102      	movs	r1, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fa70 	bl	8000d84 <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0x82>
		Error_Handler();
 80018aa:	f000 f8c1 	bl	8001a30 <Error_Handler>
	}
}
 80018ae:	bf00      	nop
 80018b0:	3740      	adds	r7, #64	; 0x40
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_SPI1_Init+0x64>)
 80018be:	4a18      	ldr	r2, [pc, #96]	; (8001920 <MX_SPI1_Init+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_SPI1_Init+0x64>)
 80018c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_SPI1_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_SPI1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_SPI1_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_SPI1_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_SPI1_Init+0x64>)
 80018e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_SPI1_Init+0x64>)
 80018ec:	2210      	movs	r2, #16
 80018ee:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MX_SPI1_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_SPI1_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <MX_SPI1_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_SPI1_Init+0x64>)
 8001904:	220a      	movs	r2, #10
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <MX_SPI1_Init+0x64>)
 800190a:	f7ff fba5 	bl	8001058 <HAL_SPI_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001914:	f000 f88c 	bl	8001a30 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000038 	.word	0x20000038
 8001920:	40013000 	.word	0x40013000

08001924 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <MX_GPIO_Init+0xfc>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <MX_GPIO_Init+0xfc>)
 800193e:	f043 0310 	orr.w	r3, r3, #16
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <MX_GPIO_Init+0xfc>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <MX_GPIO_Init+0xfc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <MX_GPIO_Init+0xfc>)
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <MX_GPIO_Init+0xfc>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <MX_GPIO_Init+0xfc>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a2c      	ldr	r2, [pc, #176]	; (8001a20 <MX_GPIO_Init+0xfc>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <MX_GPIO_Init+0xfc>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001986:	4827      	ldr	r0, [pc, #156]	; (8001a24 <MX_GPIO_Init+0x100>)
 8001988:	f7fe ff42 	bl	8000810 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2102      	movs	r1, #2
 8001990:	4825      	ldr	r0, [pc, #148]	; (8001a28 <MX_GPIO_Init+0x104>)
 8001992:	f7fe ff3d 	bl	8000810 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	481d      	ldr	r0, [pc, #116]	; (8001a24 <MX_GPIO_Init+0x100>)
 80019b0:	f7fe fdd4 	bl	800055c <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_Pin */
	GPIO_InitStruct.Pin = CS_Pin;
 80019b4:	2302      	movs	r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4619      	mov	r1, r3
 80019ca:	4817      	ldr	r0, [pc, #92]	; (8001a28 <MX_GPIO_Init+0x104>)
 80019cc:	f7fe fdc6 	bl	800055c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 80019d0:	231c      	movs	r3, #28
 80019d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_GPIO_Init+0x108>)
 80019d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	4811      	ldr	r0, [pc, #68]	; (8001a28 <MX_GPIO_Init+0x104>)
 80019e4:	f7fe fdba 	bl	800055c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	2008      	movs	r0, #8
 80019ee:	f7fe fd08 	bl	8000402 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80019f2:	2008      	movs	r0, #8
 80019f4:	f7fe fd21 	bl	800043a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2009      	movs	r0, #9
 80019fe:	f7fe fd00 	bl	8000402 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a02:	2009      	movs	r0, #9
 8001a04:	f7fe fd19 	bl	800043a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f7fe fcf8 	bl	8000402 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a12:	200a      	movs	r0, #10
 8001a14:	f7fe fd11 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	10310000 	.word	0x10310000

08001a30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <max7219_Transmit>:
/*----------Общение с max7219 по spi-----------------*/
///Общение с max7219 по spi(выбор регистра и отправка данных).
///(См. Datasheet MAX7219/MAX7221. Cтр.7, табл. 2).
/// \param adress - адрес регистра, в который производится отправка данных;
/// \param data - данные.
void max7219_Transmit(uint8_t adress, uint8_t data) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[1] = { 0 };
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	733b      	strb	r3, [r7, #12]
	cs_set();
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <max7219_Transmit+0x4c>)
 8001a52:	2202      	movs	r2, #2
 8001a54:	615a      	str	r2, [r3, #20]
	tx_buffer[0] = adress;
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1);
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4619      	mov	r1, r3
 8001a62:	480a      	ldr	r0, [pc, #40]	; (8001a8c <max7219_Transmit+0x50>)
 8001a64:	f7ff fb7c 	bl	8001160 <HAL_SPI_Transmit_IT>
	tx_buffer[0] = data;
 8001a68:	79bb      	ldrb	r3, [r7, #6]
 8001a6a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2201      	movs	r2, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <max7219_Transmit+0x50>)
 8001a76:	f7ff fb73 	bl	8001160 <HAL_SPI_Transmit_IT>
	cs_reset();
 8001a7a:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <max7219_Transmit+0x4c>)
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	611a      	str	r2, [r3, #16]
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	20000038 	.word	0x20000038

08001a90 <max7219_Shutdown>:
/*----------Общение с max7219 по spi-----------------*/

/*--------------------Режим сна----------------------*/
///Режим сна.(См. Datasheet MAX7219/MAX7221. Стр.7, табл. 3).
/// \param data - данные. 0 - Режим сна. 1 - Нормальный режим.
void max7219_Shutdown(bool data){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0C, data);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f7ff ffcc 	bl	8001a3c <max7219_Transmit>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <max7219_Display_Test>:
/*--------------------Режим сна----------------------*/

/*-------------------Тест дисплея--------------------*/
///Тест дисплея.(См. Datasheet MAX7219/MAX7221. Стр.10, табл. 10).
/// \param data - данные. 0 - Нормальный режим. 1 - Тест дисплея.
void max7219_Display_Test(bool data){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0F, data);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	200f      	movs	r0, #15
 8001abc:	f7ff ffbe 	bl	8001a3c <max7219_Transmit>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <max7219_Display_Clean>:
/*-------------------Тест дисплея--------------------*/

/*-----------------Очистка дисплея-------------------*/
///Очистка дисплея. (См. мой урок https://youtu.be/BonEEaQX8vg).
void max7219_Display_Clean(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	max7219_Transmit(0x01, 0x00);
 8001acc:	2100      	movs	r1, #0
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff ffb4 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(0x02, 0x00);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f7ff ffb0 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(0x03, 0x00);
 8001adc:	2100      	movs	r1, #0
 8001ade:	2003      	movs	r0, #3
 8001ae0:	f7ff ffac 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(0x04, 0x00);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2004      	movs	r0, #4
 8001ae8:	f7ff ffa8 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(0x05, 0x00);
 8001aec:	2100      	movs	r1, #0
 8001aee:	2005      	movs	r0, #5
 8001af0:	f7ff ffa4 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(0x06, 0x00);
 8001af4:	2100      	movs	r1, #0
 8001af6:	2006      	movs	r0, #6
 8001af8:	f7ff ffa0 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(0x07, 0x00);
 8001afc:	2100      	movs	r1, #0
 8001afe:	2007      	movs	r0, #7
 8001b00:	f7ff ff9c 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(0x08, 0x00);
 8001b04:	2100      	movs	r1, #0
 8001b06:	2008      	movs	r0, #8
 8001b08:	f7ff ff98 	bl	8001a3c <max7219_Transmit>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <max7219_Intensity>:
/*-----------------Очистка дисплея-------------------*/

/*-----------------Яркость дисплея-------------------*/
///Яркость дисплея.(См. Datasheet MAX7219/MAX7221. Стр.9, табл. 7).
/// \param data - данные. Значения от 0x00 до 0x0F.
void max7219_Intensity(uint8_t data){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
max7219_Transmit(0x0A, data);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	200a      	movs	r0, #10
 8001b20:	f7ff ff8c 	bl	8001a3c <max7219_Transmit>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <max7219_Init>:
/*-----------------Яркость дисплея-------------------*/

/*--------------Инициализация дисплея----------------*/
///Инициализация дисплея.
void max7219_Init(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	max7219_Transmit(0x09, 0x00); //Работа без режима декодирование
 8001b30:	2100      	movs	r1, #0
 8001b32:	2009      	movs	r0, #9
 8001b34:	f7ff ff82 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(0x0B, 0x07); //Количество используемых разрядов
 8001b38:	2107      	movs	r1, #7
 8001b3a:	200b      	movs	r0, #11
 8001b3c:	f7ff ff7e 	bl	8001a3c <max7219_Transmit>
	max7219_Intensity(0x0F); //Интенсивность свечения на максимум
 8001b40:	200f      	movs	r0, #15
 8001b42:	f7ff ffe5 	bl	8001b10 <max7219_Intensity>
	max7219_Shutdown(1); //Вывести дисплей из сна в нормальный режим работы
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff ffa2 	bl	8001a90 <max7219_Shutdown>
	max7219_Display_Test(1); //Проверка дисплея
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff ffad 	bl	8001aac <max7219_Display_Test>
	HAL_Delay(2000); //Время на визуальный осмотр
 8001b52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b56:	f7fe fb5b 	bl	8000210 <HAL_Delay>
	max7219_Display_Test(0); //Перевод дисплея в нормальный режим работы
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff ffa6 	bl	8001aac <max7219_Display_Test>
	max7219_Display_Clean(); //Очистка дисплея
 8001b60:	f7ff ffb2 	bl	8001ac8 <max7219_Display_Clean>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <max7219_send_symbol>:
/*--------------Инициализация дисплея----------------*/

/*-----------Отправка символов на дисплей------------*/
///Отправка символов на дисплей. Функция вспомогательная.
/// \param *tx_buffer - Массив с данными, которые будут выводиться на дисплей.
void max7219_send_symbol(uint8_t *tx_buffer) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	max7219_Transmit(8, tx_buffer[0]);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	2008      	movs	r0, #8
 8001b78:	f7ff ff60 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(7, tx_buffer[1]);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	2007      	movs	r0, #7
 8001b86:	f7ff ff59 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(6, tx_buffer[2]);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	2006      	movs	r0, #6
 8001b94:	f7ff ff52 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(5, tx_buffer[3]);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3303      	adds	r3, #3
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2005      	movs	r0, #5
 8001ba2:	f7ff ff4b 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(4, tx_buffer[4]);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	2004      	movs	r0, #4
 8001bb0:	f7ff ff44 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(3, tx_buffer[5]);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3305      	adds	r3, #5
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f7ff ff3d 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(2, tx_buffer[6]);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3306      	adds	r3, #6
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f7ff ff36 	bl	8001a3c <max7219_Transmit>
	max7219_Transmit(1, tx_buffer[7]);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3307      	adds	r3, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7ff ff2f 	bl	8001a3c <max7219_Transmit>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <max7219_num>:
/*-----------Отправка символов на дисплей------------*/

/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/
///Подготовка данных к выводу на дисплей. Цифры, минус, пробел. Функция вспомогательная.
void max7219_num(uint8_t rg, uint32_t value) {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d038      	beq.n	8001c6c <max7219_num+0x84>
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d80d      	bhi.n	8001c1a <max7219_num+0x32>
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d025      	beq.n	8001c4e <max7219_num+0x66>
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d804      	bhi.n	8001c10 <max7219_num+0x28>
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d017      	beq.n	8001c3a <max7219_num+0x52>
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d01a      	beq.n	8001c44 <max7219_num+0x5c>
		break;
	case 255:
		symbol[rg] = _255;
		break;
	}
}
 8001c0e:	e050      	b.n	8001cb2 <max7219_num+0xca>
	switch (value) {
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d021      	beq.n	8001c58 <max7219_num+0x70>
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d024      	beq.n	8001c62 <max7219_num+0x7a>
}
 8001c18:	e04b      	b.n	8001cb2 <max7219_num+0xca>
	switch (value) {
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d035      	beq.n	8001c8a <max7219_num+0xa2>
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d804      	bhi.n	8001c2c <max7219_num+0x44>
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d027      	beq.n	8001c76 <max7219_num+0x8e>
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d02a      	beq.n	8001c80 <max7219_num+0x98>
}
 8001c2a:	e042      	b.n	8001cb2 <max7219_num+0xca>
	switch (value) {
 8001c2c:	2bfe      	cmp	r3, #254	; 0xfe
 8001c2e:	d036      	beq.n	8001c9e <max7219_num+0xb6>
 8001c30:	2bff      	cmp	r3, #255	; 0xff
 8001c32:	d039      	beq.n	8001ca8 <max7219_num+0xc0>
 8001c34:	2b09      	cmp	r3, #9
 8001c36:	d02d      	beq.n	8001c94 <max7219_num+0xac>
}
 8001c38:	e03b      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _0;
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <max7219_num+0xd4>)
 8001c3e:	217e      	movs	r1, #126	; 0x7e
 8001c40:	54d1      	strb	r1, [r2, r3]
		break;
 8001c42:	e036      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _1;
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <max7219_num+0xd4>)
 8001c48:	2130      	movs	r1, #48	; 0x30
 8001c4a:	54d1      	strb	r1, [r2, r3]
		break;
 8001c4c:	e031      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _2;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <max7219_num+0xd4>)
 8001c52:	216d      	movs	r1, #109	; 0x6d
 8001c54:	54d1      	strb	r1, [r2, r3]
		break;
 8001c56:	e02c      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _3;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <max7219_num+0xd4>)
 8001c5c:	2179      	movs	r1, #121	; 0x79
 8001c5e:	54d1      	strb	r1, [r2, r3]
		break;
 8001c60:	e027      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _4;
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <max7219_num+0xd4>)
 8001c66:	2133      	movs	r1, #51	; 0x33
 8001c68:	54d1      	strb	r1, [r2, r3]
		break;
 8001c6a:	e022      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _5;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <max7219_num+0xd4>)
 8001c70:	215b      	movs	r1, #91	; 0x5b
 8001c72:	54d1      	strb	r1, [r2, r3]
		break;
 8001c74:	e01d      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _6;
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <max7219_num+0xd4>)
 8001c7a:	215f      	movs	r1, #95	; 0x5f
 8001c7c:	54d1      	strb	r1, [r2, r3]
		break;
 8001c7e:	e018      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _7;
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <max7219_num+0xd4>)
 8001c84:	2170      	movs	r1, #112	; 0x70
 8001c86:	54d1      	strb	r1, [r2, r3]
		break;
 8001c88:	e013      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _8;
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <max7219_num+0xd4>)
 8001c8e:	217f      	movs	r1, #127	; 0x7f
 8001c90:	54d1      	strb	r1, [r2, r3]
		break;
 8001c92:	e00e      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _9;
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <max7219_num+0xd4>)
 8001c98:	217b      	movs	r1, #123	; 0x7b
 8001c9a:	54d1      	strb	r1, [r2, r3]
		break;
 8001c9c:	e009      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _254;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <max7219_num+0xd4>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	54d1      	strb	r1, [r2, r3]
		break;
 8001ca6:	e004      	b.n	8001cb2 <max7219_num+0xca>
		symbol[rg] = _255;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <max7219_num+0xd4>)
 8001cac:	2100      	movs	r1, #0
 8001cae:	54d1      	strb	r1, [r2, r3]
		break;
 8001cb0:	bf00      	nop
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000028 	.word	0x20000028

08001cc0 <max7219_Send_int32_t>:
///                uint32_t/int32_t
///Единственное ограничение - число должно быть в рамках от -9999999 до 99999999.
///В противном случае, на дисплее будет отображено "--------".
///Функция проверяет отправленное число на выход за рамки вывода дисплея, положительное оно или отрицательное,
///далее преобразует отправленное число в BCD код(двоично-десятичный код.) и уже после этого отправляет данные на дисплей.
void max7219_Send_int32_t(int32_t value) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	if (value > 99999999 || value < -9999999) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4abc      	ldr	r2, [pc, #752]	; (8001fbc <max7219_Send_int32_t+0x2fc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	dc03      	bgt.n	8001cd8 <max7219_Send_int32_t+0x18>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4abb      	ldr	r2, [pc, #748]	; (8001fc0 <max7219_Send_int32_t+0x300>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	da23      	bge.n	8001d20 <max7219_Send_int32_t+0x60>
		max7219_num(0, 254);
 8001cd8:	21fe      	movs	r1, #254	; 0xfe
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7ff ff84 	bl	8001be8 <max7219_num>
		max7219_num(1, 254);
 8001ce0:	21fe      	movs	r1, #254	; 0xfe
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff ff80 	bl	8001be8 <max7219_num>
		max7219_num(2, 254);
 8001ce8:	21fe      	movs	r1, #254	; 0xfe
 8001cea:	2002      	movs	r0, #2
 8001cec:	f7ff ff7c 	bl	8001be8 <max7219_num>
		max7219_num(3, 254);
 8001cf0:	21fe      	movs	r1, #254	; 0xfe
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f7ff ff78 	bl	8001be8 <max7219_num>
		max7219_num(4, 254);
 8001cf8:	21fe      	movs	r1, #254	; 0xfe
 8001cfa:	2004      	movs	r0, #4
 8001cfc:	f7ff ff74 	bl	8001be8 <max7219_num>
		max7219_num(5, 254);
 8001d00:	21fe      	movs	r1, #254	; 0xfe
 8001d02:	2005      	movs	r0, #5
 8001d04:	f7ff ff70 	bl	8001be8 <max7219_num>
		max7219_num(6, 254);
 8001d08:	21fe      	movs	r1, #254	; 0xfe
 8001d0a:	2006      	movs	r0, #6
 8001d0c:	f7ff ff6c 	bl	8001be8 <max7219_num>
		max7219_num(7, 254);
 8001d10:	21fe      	movs	r1, #254	; 0xfe
 8001d12:	2007      	movs	r0, #7
 8001d14:	f7ff ff68 	bl	8001be8 <max7219_num>
		max7219_send_symbol(symbol);
 8001d18:	48aa      	ldr	r0, [pc, #680]	; (8001fc4 <max7219_Send_int32_t+0x304>)
 8001d1a:	f7ff ff25 	bl	8001b68 <max7219_send_symbol>
			max7219_num(6, BCD_Arr[1]);
			max7219_num(7, BCD_Arr[0]);
			max7219_send_symbol(symbol);
		}
	}
}
 8001d1e:	e218      	b.n	8002152 <max7219_Send_int32_t+0x492>
		if (value < 0) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	da05      	bge.n	8001d32 <max7219_Send_int32_t+0x72>
			positive_value = false;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
			value = value * (-1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	425b      	negs	r3, r3
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	e001      	b.n	8001d36 <max7219_Send_int32_t+0x76>
			positive_value = true;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
		uint8_t BCD_Arr[8] = { 0, };
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
		lenght = value;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	613b      	str	r3, [r7, #16]
		while (value >= 10000000) {
 8001d44:	e007      	b.n	8001d56 <max7219_Send_int32_t+0x96>
			value -= 10000000;
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4b9f      	ldr	r3, [pc, #636]	; (8001fc8 <max7219_Send_int32_t+0x308>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	607b      	str	r3, [r7, #4]
			BCD_Arr[7]++;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	3301      	adds	r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	73fb      	strb	r3, [r7, #15]
		while (value >= 10000000) {
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a9c      	ldr	r2, [pc, #624]	; (8001fcc <max7219_Send_int32_t+0x30c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	dcf3      	bgt.n	8001d46 <max7219_Send_int32_t+0x86>
		while (value >= 1000000) {
 8001d5e:	e009      	b.n	8001d74 <max7219_Send_int32_t+0xb4>
			value -= 1000000;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8001d66:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001d6a:	607b      	str	r3, [r7, #4]
			BCD_Arr[6]++;
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	73bb      	strb	r3, [r7, #14]
		while (value >= 1000000) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a96      	ldr	r2, [pc, #600]	; (8001fd0 <max7219_Send_int32_t+0x310>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	dcf1      	bgt.n	8001d60 <max7219_Send_int32_t+0xa0>
		while (value >= 100000) {
 8001d7c:	e008      	b.n	8001d90 <max7219_Send_int32_t+0xd0>
			value -= 100000;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8001d84:	3ba0      	subs	r3, #160	; 0xa0
 8001d86:	607b      	str	r3, [r7, #4]
			BCD_Arr[5]++;
 8001d88:	7b7b      	ldrb	r3, [r7, #13]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	737b      	strb	r3, [r7, #13]
		while (value >= 100000) {
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a90      	ldr	r2, [pc, #576]	; (8001fd4 <max7219_Send_int32_t+0x314>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	dcf2      	bgt.n	8001d7e <max7219_Send_int32_t+0xbe>
		while (value >= 10000) {
 8001d98:	e008      	b.n	8001dac <max7219_Send_int32_t+0xec>
			value -= 10000;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8001da0:	3b10      	subs	r3, #16
 8001da2:	607b      	str	r3, [r7, #4]
			BCD_Arr[4]++;
 8001da4:	7b3b      	ldrb	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	733b      	strb	r3, [r7, #12]
		while (value >= 10000) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f242 720f 	movw	r2, #9999	; 0x270f
 8001db2:	4293      	cmp	r3, r2
 8001db4:	dcf1      	bgt.n	8001d9a <max7219_Send_int32_t+0xda>
		while (value >= 1000) {
 8001db6:	e007      	b.n	8001dc8 <max7219_Send_int32_t+0x108>
			value -= 1000;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001dbe:	607b      	str	r3, [r7, #4]
			BCD_Arr[3]++;
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	72fb      	strb	r3, [r7, #11]
		while (value >= 1000) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dce:	daf3      	bge.n	8001db8 <max7219_Send_int32_t+0xf8>
		while (value >= 100) {
 8001dd0:	e006      	b.n	8001de0 <max7219_Send_int32_t+0x120>
			value -= 100;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3b64      	subs	r3, #100	; 0x64
 8001dd6:	607b      	str	r3, [r7, #4]
			BCD_Arr[2]++;
 8001dd8:	7abb      	ldrb	r3, [r7, #10]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	72bb      	strb	r3, [r7, #10]
		while (value >= 100) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b63      	cmp	r3, #99	; 0x63
 8001de4:	dcf5      	bgt.n	8001dd2 <max7219_Send_int32_t+0x112>
		while (value >= 10) {
 8001de6:	e006      	b.n	8001df6 <max7219_Send_int32_t+0x136>
			value -= 10;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b0a      	subs	r3, #10
 8001dec:	607b      	str	r3, [r7, #4]
			BCD_Arr[1]++;
 8001dee:	7a7b      	ldrb	r3, [r7, #9]
 8001df0:	3301      	adds	r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	727b      	strb	r3, [r7, #9]
		while (value >= 10) {
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b09      	cmp	r3, #9
 8001dfa:	dcf5      	bgt.n	8001de8 <max7219_Send_int32_t+0x128>
		BCD_Arr[0] = (uint8_t) (value);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	723b      	strb	r3, [r7, #8]
		if (lenght < 10) {
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	d82c      	bhi.n	8001e62 <max7219_Send_int32_t+0x1a2>
			max7219_num(0, 255);
 8001e08:	21ff      	movs	r1, #255	; 0xff
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff feec 	bl	8001be8 <max7219_num>
			max7219_num(1, 255);
 8001e10:	21ff      	movs	r1, #255	; 0xff
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff fee8 	bl	8001be8 <max7219_num>
			max7219_num(2, 255);
 8001e18:	21ff      	movs	r1, #255	; 0xff
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f7ff fee4 	bl	8001be8 <max7219_num>
			max7219_num(3, 255);
 8001e20:	21ff      	movs	r1, #255	; 0xff
 8001e22:	2003      	movs	r0, #3
 8001e24:	f7ff fee0 	bl	8001be8 <max7219_num>
			max7219_num(4, 255);
 8001e28:	21ff      	movs	r1, #255	; 0xff
 8001e2a:	2004      	movs	r0, #4
 8001e2c:	f7ff fedc 	bl	8001be8 <max7219_num>
			max7219_num(5, 255);
 8001e30:	21ff      	movs	r1, #255	; 0xff
 8001e32:	2005      	movs	r0, #5
 8001e34:	f7ff fed8 	bl	8001be8 <max7219_num>
			if (positive_value == true) {
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <max7219_Send_int32_t+0x188>
				max7219_num(6, 255);
 8001e3e:	21ff      	movs	r1, #255	; 0xff
 8001e40:	2006      	movs	r0, #6
 8001e42:	f7ff fed1 	bl	8001be8 <max7219_num>
 8001e46:	e003      	b.n	8001e50 <max7219_Send_int32_t+0x190>
				max7219_num(6, 254);
 8001e48:	21fe      	movs	r1, #254	; 0xfe
 8001e4a:	2006      	movs	r0, #6
 8001e4c:	f7ff fecc 	bl	8001be8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001e50:	7a3b      	ldrb	r3, [r7, #8]
 8001e52:	4619      	mov	r1, r3
 8001e54:	2007      	movs	r0, #7
 8001e56:	f7ff fec7 	bl	8001be8 <max7219_num>
			max7219_send_symbol(symbol);
 8001e5a:	485a      	ldr	r0, [pc, #360]	; (8001fc4 <max7219_Send_int32_t+0x304>)
 8001e5c:	f7ff fe84 	bl	8001b68 <max7219_send_symbol>
}
 8001e60:	e177      	b.n	8002152 <max7219_Send_int32_t+0x492>
		} else if (lenght < 100) {
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b63      	cmp	r3, #99	; 0x63
 8001e66:	d82d      	bhi.n	8001ec4 <max7219_Send_int32_t+0x204>
			max7219_num(0, 255);
 8001e68:	21ff      	movs	r1, #255	; 0xff
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff febc 	bl	8001be8 <max7219_num>
			max7219_num(1, 255);
 8001e70:	21ff      	movs	r1, #255	; 0xff
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff feb8 	bl	8001be8 <max7219_num>
			max7219_num(2, 255);
 8001e78:	21ff      	movs	r1, #255	; 0xff
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f7ff feb4 	bl	8001be8 <max7219_num>
			max7219_num(3, 255);
 8001e80:	21ff      	movs	r1, #255	; 0xff
 8001e82:	2003      	movs	r0, #3
 8001e84:	f7ff feb0 	bl	8001be8 <max7219_num>
			max7219_num(4, 255);
 8001e88:	21ff      	movs	r1, #255	; 0xff
 8001e8a:	2004      	movs	r0, #4
 8001e8c:	f7ff feac 	bl	8001be8 <max7219_num>
			if (positive_value == true) {
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <max7219_Send_int32_t+0x1e0>
				max7219_num(5, 255);
 8001e96:	21ff      	movs	r1, #255	; 0xff
 8001e98:	2005      	movs	r0, #5
 8001e9a:	f7ff fea5 	bl	8001be8 <max7219_num>
 8001e9e:	e003      	b.n	8001ea8 <max7219_Send_int32_t+0x1e8>
				max7219_num(5, 254);
 8001ea0:	21fe      	movs	r1, #254	; 0xfe
 8001ea2:	2005      	movs	r0, #5
 8001ea4:	f7ff fea0 	bl	8001be8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001ea8:	7a7b      	ldrb	r3, [r7, #9]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2006      	movs	r0, #6
 8001eae:	f7ff fe9b 	bl	8001be8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001eb2:	7a3b      	ldrb	r3, [r7, #8]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2007      	movs	r0, #7
 8001eb8:	f7ff fe96 	bl	8001be8 <max7219_num>
			max7219_send_symbol(symbol);
 8001ebc:	4841      	ldr	r0, [pc, #260]	; (8001fc4 <max7219_Send_int32_t+0x304>)
 8001ebe:	f7ff fe53 	bl	8001b68 <max7219_send_symbol>
}
 8001ec2:	e146      	b.n	8002152 <max7219_Send_int32_t+0x492>
		} else if (lenght < 1000) {
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eca:	d22e      	bcs.n	8001f2a <max7219_Send_int32_t+0x26a>
			max7219_num(0, 255);
 8001ecc:	21ff      	movs	r1, #255	; 0xff
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fe8a 	bl	8001be8 <max7219_num>
			max7219_num(1, 255);
 8001ed4:	21ff      	movs	r1, #255	; 0xff
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff fe86 	bl	8001be8 <max7219_num>
			max7219_num(2, 255);
 8001edc:	21ff      	movs	r1, #255	; 0xff
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f7ff fe82 	bl	8001be8 <max7219_num>
			max7219_num(3, 255);
 8001ee4:	21ff      	movs	r1, #255	; 0xff
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	f7ff fe7e 	bl	8001be8 <max7219_num>
			if (positive_value == true) {
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <max7219_Send_int32_t+0x23c>
				max7219_num(4, 255);
 8001ef2:	21ff      	movs	r1, #255	; 0xff
 8001ef4:	2004      	movs	r0, #4
 8001ef6:	f7ff fe77 	bl	8001be8 <max7219_num>
 8001efa:	e003      	b.n	8001f04 <max7219_Send_int32_t+0x244>
				max7219_num(4, 254);
 8001efc:	21fe      	movs	r1, #254	; 0xfe
 8001efe:	2004      	movs	r0, #4
 8001f00:	f7ff fe72 	bl	8001be8 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 8001f04:	7abb      	ldrb	r3, [r7, #10]
 8001f06:	4619      	mov	r1, r3
 8001f08:	2005      	movs	r0, #5
 8001f0a:	f7ff fe6d 	bl	8001be8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001f0e:	7a7b      	ldrb	r3, [r7, #9]
 8001f10:	4619      	mov	r1, r3
 8001f12:	2006      	movs	r0, #6
 8001f14:	f7ff fe68 	bl	8001be8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001f18:	7a3b      	ldrb	r3, [r7, #8]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	2007      	movs	r0, #7
 8001f1e:	f7ff fe63 	bl	8001be8 <max7219_num>
			max7219_send_symbol(symbol);
 8001f22:	4828      	ldr	r0, [pc, #160]	; (8001fc4 <max7219_Send_int32_t+0x304>)
 8001f24:	f7ff fe20 	bl	8001b68 <max7219_send_symbol>
}
 8001f28:	e113      	b.n	8002152 <max7219_Send_int32_t+0x492>
		} else if (lenght < 10000) {
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d82f      	bhi.n	8001f94 <max7219_Send_int32_t+0x2d4>
			max7219_num(0, 255);
 8001f34:	21ff      	movs	r1, #255	; 0xff
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fe56 	bl	8001be8 <max7219_num>
			max7219_num(1, 255);
 8001f3c:	21ff      	movs	r1, #255	; 0xff
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff fe52 	bl	8001be8 <max7219_num>
			max7219_num(2, 255);
 8001f44:	21ff      	movs	r1, #255	; 0xff
 8001f46:	2002      	movs	r0, #2
 8001f48:	f7ff fe4e 	bl	8001be8 <max7219_num>
			if (positive_value == true) {
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <max7219_Send_int32_t+0x29c>
				max7219_num(3, 255);
 8001f52:	21ff      	movs	r1, #255	; 0xff
 8001f54:	2003      	movs	r0, #3
 8001f56:	f7ff fe47 	bl	8001be8 <max7219_num>
 8001f5a:	e003      	b.n	8001f64 <max7219_Send_int32_t+0x2a4>
				max7219_num(3, 254);
 8001f5c:	21fe      	movs	r1, #254	; 0xfe
 8001f5e:	2003      	movs	r0, #3
 8001f60:	f7ff fe42 	bl	8001be8 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	4619      	mov	r1, r3
 8001f68:	2004      	movs	r0, #4
 8001f6a:	f7ff fe3d 	bl	8001be8 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 8001f6e:	7abb      	ldrb	r3, [r7, #10]
 8001f70:	4619      	mov	r1, r3
 8001f72:	2005      	movs	r0, #5
 8001f74:	f7ff fe38 	bl	8001be8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001f78:	7a7b      	ldrb	r3, [r7, #9]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	2006      	movs	r0, #6
 8001f7e:	f7ff fe33 	bl	8001be8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8001f82:	7a3b      	ldrb	r3, [r7, #8]
 8001f84:	4619      	mov	r1, r3
 8001f86:	2007      	movs	r0, #7
 8001f88:	f7ff fe2e 	bl	8001be8 <max7219_num>
			max7219_send_symbol(symbol);
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <max7219_Send_int32_t+0x304>)
 8001f8e:	f7ff fdeb 	bl	8001b68 <max7219_send_symbol>
}
 8001f92:	e0de      	b.n	8002152 <max7219_Send_int32_t+0x492>
		} else if (lenght < 100000) {
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <max7219_Send_int32_t+0x314>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d83e      	bhi.n	800201a <max7219_Send_int32_t+0x35a>
			max7219_num(0, 255);
 8001f9c:	21ff      	movs	r1, #255	; 0xff
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff fe22 	bl	8001be8 <max7219_num>
			max7219_num(1, 255);
 8001fa4:	21ff      	movs	r1, #255	; 0xff
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff fe1e 	bl	8001be8 <max7219_num>
			if (positive_value == true) {
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d012      	beq.n	8001fd8 <max7219_Send_int32_t+0x318>
				max7219_num(2, 255);
 8001fb2:	21ff      	movs	r1, #255	; 0xff
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff fe17 	bl	8001be8 <max7219_num>
 8001fba:	e011      	b.n	8001fe0 <max7219_Send_int32_t+0x320>
 8001fbc:	05f5e0ff 	.word	0x05f5e0ff
 8001fc0:	ff676981 	.word	0xff676981
 8001fc4:	20000028 	.word	0x20000028
 8001fc8:	ff676980 	.word	0xff676980
 8001fcc:	0098967f 	.word	0x0098967f
 8001fd0:	000f423f 	.word	0x000f423f
 8001fd4:	0001869f 	.word	0x0001869f
				max7219_num(2, 254);
 8001fd8:	21fe      	movs	r1, #254	; 0xfe
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f7ff fe04 	bl	8001be8 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 8001fe0:	7b3b      	ldrb	r3, [r7, #12]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f7ff fdff 	bl	8001be8 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 8001fea:	7afb      	ldrb	r3, [r7, #11]
 8001fec:	4619      	mov	r1, r3
 8001fee:	2004      	movs	r0, #4
 8001ff0:	f7ff fdfa 	bl	8001be8 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 8001ff4:	7abb      	ldrb	r3, [r7, #10]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	2005      	movs	r0, #5
 8001ffa:	f7ff fdf5 	bl	8001be8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8001ffe:	7a7b      	ldrb	r3, [r7, #9]
 8002000:	4619      	mov	r1, r3
 8002002:	2006      	movs	r0, #6
 8002004:	f7ff fdf0 	bl	8001be8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8002008:	7a3b      	ldrb	r3, [r7, #8]
 800200a:	4619      	mov	r1, r3
 800200c:	2007      	movs	r0, #7
 800200e:	f7ff fdeb 	bl	8001be8 <max7219_num>
			max7219_send_symbol(symbol);
 8002012:	4852      	ldr	r0, [pc, #328]	; (800215c <max7219_Send_int32_t+0x49c>)
 8002014:	f7ff fda8 	bl	8001b68 <max7219_send_symbol>
}
 8002018:	e09b      	b.n	8002152 <max7219_Send_int32_t+0x492>
		} else if (lenght < 1000000) {
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4a50      	ldr	r2, [pc, #320]	; (8002160 <max7219_Send_int32_t+0x4a0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d831      	bhi.n	8002086 <max7219_Send_int32_t+0x3c6>
			max7219_num(0, 255);
 8002022:	21ff      	movs	r1, #255	; 0xff
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fddf 	bl	8001be8 <max7219_num>
			if (positive_value == true) {
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <max7219_Send_int32_t+0x37a>
				max7219_num(1, 255);
 8002030:	21ff      	movs	r1, #255	; 0xff
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff fdd8 	bl	8001be8 <max7219_num>
 8002038:	e003      	b.n	8002042 <max7219_Send_int32_t+0x382>
				max7219_num(1, 254);
 800203a:	21fe      	movs	r1, #254	; 0xfe
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff fdd3 	bl	8001be8 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8002042:	7b7b      	ldrb	r3, [r7, #13]
 8002044:	4619      	mov	r1, r3
 8002046:	2002      	movs	r0, #2
 8002048:	f7ff fdce 	bl	8001be8 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 800204c:	7b3b      	ldrb	r3, [r7, #12]
 800204e:	4619      	mov	r1, r3
 8002050:	2003      	movs	r0, #3
 8002052:	f7ff fdc9 	bl	8001be8 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	4619      	mov	r1, r3
 800205a:	2004      	movs	r0, #4
 800205c:	f7ff fdc4 	bl	8001be8 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 8002060:	7abb      	ldrb	r3, [r7, #10]
 8002062:	4619      	mov	r1, r3
 8002064:	2005      	movs	r0, #5
 8002066:	f7ff fdbf 	bl	8001be8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 800206a:	7a7b      	ldrb	r3, [r7, #9]
 800206c:	4619      	mov	r1, r3
 800206e:	2006      	movs	r0, #6
 8002070:	f7ff fdba 	bl	8001be8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8002074:	7a3b      	ldrb	r3, [r7, #8]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fdb5 	bl	8001be8 <max7219_num>
			max7219_send_symbol(symbol);
 800207e:	4837      	ldr	r0, [pc, #220]	; (800215c <max7219_Send_int32_t+0x49c>)
 8002080:	f7ff fd72 	bl	8001b68 <max7219_send_symbol>
}
 8002084:	e065      	b.n	8002152 <max7219_Send_int32_t+0x492>
		} else if (lenght < 10000000) {
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4a36      	ldr	r2, [pc, #216]	; (8002164 <max7219_Send_int32_t+0x4a4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d832      	bhi.n	80020f4 <max7219_Send_int32_t+0x434>
			if (positive_value == true) {
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <max7219_Send_int32_t+0x3de>
				max7219_num(0, 255);
 8002094:	21ff      	movs	r1, #255	; 0xff
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff fda6 	bl	8001be8 <max7219_num>
 800209c:	e003      	b.n	80020a6 <max7219_Send_int32_t+0x3e6>
				max7219_num(0, 254);
 800209e:	21fe      	movs	r1, #254	; 0xfe
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fda1 	bl	8001be8 <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	4619      	mov	r1, r3
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff fd9c 	bl	8001be8 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 80020b0:	7b7b      	ldrb	r3, [r7, #13]
 80020b2:	4619      	mov	r1, r3
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7ff fd97 	bl	8001be8 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 80020ba:	7b3b      	ldrb	r3, [r7, #12]
 80020bc:	4619      	mov	r1, r3
 80020be:	2003      	movs	r0, #3
 80020c0:	f7ff fd92 	bl	8001be8 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	4619      	mov	r1, r3
 80020c8:	2004      	movs	r0, #4
 80020ca:	f7ff fd8d 	bl	8001be8 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	4619      	mov	r1, r3
 80020d2:	2005      	movs	r0, #5
 80020d4:	f7ff fd88 	bl	8001be8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 80020d8:	7a7b      	ldrb	r3, [r7, #9]
 80020da:	4619      	mov	r1, r3
 80020dc:	2006      	movs	r0, #6
 80020de:	f7ff fd83 	bl	8001be8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	4619      	mov	r1, r3
 80020e6:	2007      	movs	r0, #7
 80020e8:	f7ff fd7e 	bl	8001be8 <max7219_num>
			max7219_send_symbol(symbol);
 80020ec:	481b      	ldr	r0, [pc, #108]	; (800215c <max7219_Send_int32_t+0x49c>)
 80020ee:	f7ff fd3b 	bl	8001b68 <max7219_send_symbol>
}
 80020f2:	e02e      	b.n	8002152 <max7219_Send_int32_t+0x492>
		} else if (lenght < 100000000) {
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <max7219_Send_int32_t+0x4a8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d82a      	bhi.n	8002152 <max7219_Send_int32_t+0x492>
			max7219_num(0, BCD_Arr[7]);
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	4619      	mov	r1, r3
 8002100:	2000      	movs	r0, #0
 8002102:	f7ff fd71 	bl	8001be8 <max7219_num>
			max7219_num(1, BCD_Arr[6]);
 8002106:	7bbb      	ldrb	r3, [r7, #14]
 8002108:	4619      	mov	r1, r3
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff fd6c 	bl	8001be8 <max7219_num>
			max7219_num(2, BCD_Arr[5]);
 8002110:	7b7b      	ldrb	r3, [r7, #13]
 8002112:	4619      	mov	r1, r3
 8002114:	2002      	movs	r0, #2
 8002116:	f7ff fd67 	bl	8001be8 <max7219_num>
			max7219_num(3, BCD_Arr[4]);
 800211a:	7b3b      	ldrb	r3, [r7, #12]
 800211c:	4619      	mov	r1, r3
 800211e:	2003      	movs	r0, #3
 8002120:	f7ff fd62 	bl	8001be8 <max7219_num>
			max7219_num(4, BCD_Arr[3]);
 8002124:	7afb      	ldrb	r3, [r7, #11]
 8002126:	4619      	mov	r1, r3
 8002128:	2004      	movs	r0, #4
 800212a:	f7ff fd5d 	bl	8001be8 <max7219_num>
			max7219_num(5, BCD_Arr[2]);
 800212e:	7abb      	ldrb	r3, [r7, #10]
 8002130:	4619      	mov	r1, r3
 8002132:	2005      	movs	r0, #5
 8002134:	f7ff fd58 	bl	8001be8 <max7219_num>
			max7219_num(6, BCD_Arr[1]);
 8002138:	7a7b      	ldrb	r3, [r7, #9]
 800213a:	4619      	mov	r1, r3
 800213c:	2006      	movs	r0, #6
 800213e:	f7ff fd53 	bl	8001be8 <max7219_num>
			max7219_num(7, BCD_Arr[0]);
 8002142:	7a3b      	ldrb	r3, [r7, #8]
 8002144:	4619      	mov	r1, r3
 8002146:	2007      	movs	r0, #7
 8002148:	f7ff fd4e 	bl	8001be8 <max7219_num>
			max7219_send_symbol(symbol);
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <max7219_Send_int32_t+0x49c>)
 800214e:	f7ff fd0b 	bl	8001b68 <max7219_send_symbol>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000028 	.word	0x20000028
 8002160:	000f423f 	.word	0x000f423f
 8002164:	0098967f 	.word	0x0098967f
 8002168:	05f5e0ff 	.word	0x05f5e0ff

0800216c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_MspInit+0x5c>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <HAL_MspInit+0x5c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6193      	str	r3, [r2, #24]
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_MspInit+0x5c>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <HAL_MspInit+0x5c>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <HAL_MspInit+0x5c>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <HAL_MspInit+0x5c>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_MspInit+0x60>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_MspInit+0x60>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010000 	.word	0x40010000

080021d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HAL_SPI_MspInit+0x98>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d137      	bne.n	8002260 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_SPI_MspInit+0x9c>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_SPI_MspInit+0x9c>)
 80021f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_SPI_MspInit+0x9c>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_SPI_MspInit+0x9c>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_SPI_MspInit+0x9c>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_SPI_MspInit+0x9c>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002220:	23a0      	movs	r3, #160	; 0xa0
 8002222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	4619      	mov	r1, r3
 8002232:	480f      	ldr	r0, [pc, #60]	; (8002270 <HAL_SPI_MspInit+0xa0>)
 8002234:	f7fe f992 	bl	800055c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002238:	2340      	movs	r3, #64	; 0x40
 800223a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	4619      	mov	r1, r3
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <HAL_SPI_MspInit+0xa0>)
 800224c:	f7fe f986 	bl	800055c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	2023      	movs	r0, #35	; 0x23
 8002256:	f7fe f8d4 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800225a:	2023      	movs	r0, #35	; 0x23
 800225c:	f7fe f8ed 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40013000 	.word	0x40013000
 800226c:	40021000 	.word	0x40021000
 8002270:	40010800 	.word	0x40010800

08002274 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002284:	e7fe      	b.n	8002284 <HardFault_Handler+0x4>

08002286 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800228a:	e7fe      	b.n	800228a <MemManage_Handler+0x4>

0800228c <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002290:	e7fe      	b.n	8002290 <BusFault_Handler+0x4>

08002292 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002296:	e7fe      	b.n	8002296 <UsageFault_Handler+0x4>

08002298 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80022c0:	f7fd ff8a 	bl	80001d8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <EXTI2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line2 interrupt.
 */
void EXTI2_IRQHandler(void) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI2_IRQn 0 */
	if (!(GPIOA->IDR & GPIO_PIN_2) && (!(GPIOA->IDR & GPIO_PIN_3))) {
 80022cc:	4b8c      	ldr	r3, [pc, #560]	; (8002500 <EXTI2_IRQHandler+0x238>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <EXTI2_IRQHandler+0x24>
 80022d8:	4b89      	ldr	r3, [pc, #548]	; (8002500 <EXTI2_IRQHandler+0x238>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <EXTI2_IRQHandler+0x24>
		status = 0x00;
 80022e4:	4b87      	ldr	r3, [pc, #540]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e02e      	b.n	800234a <EXTI2_IRQHandler+0x82>
	} else if ((GPIOA->IDR & GPIO_PIN_2) && (!(GPIOA->IDR & GPIO_PIN_3))) {
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <EXTI2_IRQHandler+0x238>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <EXTI2_IRQHandler+0x44>
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <EXTI2_IRQHandler+0x238>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <EXTI2_IRQHandler+0x44>
		status = 0x10;
 8002304:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 8002306:	2210      	movs	r2, #16
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e01e      	b.n	800234a <EXTI2_IRQHandler+0x82>
	} else if ((GPIOA->IDR & GPIO_PIN_2) && (GPIOA->IDR & GPIO_PIN_3)) {
 800230c:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <EXTI2_IRQHandler+0x238>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <EXTI2_IRQHandler+0x64>
 8002318:	4b79      	ldr	r3, [pc, #484]	; (8002500 <EXTI2_IRQHandler+0x238>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <EXTI2_IRQHandler+0x64>
		status = 0x11;
 8002324:	4b77      	ldr	r3, [pc, #476]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 8002326:	2211      	movs	r2, #17
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e00e      	b.n	800234a <EXTI2_IRQHandler+0x82>
	} else if (!(GPIOA->IDR & GPIO_PIN_2) && (GPIOA->IDR & GPIO_PIN_3)) {
 800232c:	4b74      	ldr	r3, [pc, #464]	; (8002500 <EXTI2_IRQHandler+0x238>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <EXTI2_IRQHandler+0x82>
 8002338:	4b71      	ldr	r3, [pc, #452]	; (8002500 <EXTI2_IRQHandler+0x238>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <EXTI2_IRQHandler+0x82>
		status = 0x01;
 8002344:	4b6f      	ldr	r3, [pc, #444]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
	}

	if (status_old == 0x10 && status == 0x11) {
 800234a:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <EXTI2_IRQHandler+0x240>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b10      	cmp	r3, #16
 8002350:	d12a      	bne.n	80023a8 <EXTI2_IRQHandler+0xe0>
 8002352:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b11      	cmp	r3, #17
 8002358:	d126      	bne.n	80023a8 <EXTI2_IRQHandler+0xe0>
		Time = HAL_GetTick();
 800235a:	f7fd ff4f 	bl	80001fc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <EXTI2_IRQHandler+0x244>)
 8002362:	601a      	str	r2, [r3, #0]
		if (Time - Time_old < reaction) {
 8002364:	4b69      	ldr	r3, [pc, #420]	; (800250c <EXTI2_IRQHandler+0x244>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b69      	ldr	r3, [pc, #420]	; (8002510 <EXTI2_IRQHandler+0x248>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b09      	cmp	r3, #9
 8002370:	d809      	bhi.n	8002386 <EXTI2_IRQHandler+0xbe>
			A = A + scroll;
 8002372:	4b68      	ldr	r3, [pc, #416]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 8002374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002378:	b29b      	uxth	r3, r3
 800237a:	3332      	adds	r3, #50	; 0x32
 800237c:	b29b      	uxth	r3, r3
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b64      	ldr	r3, [pc, #400]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	e008      	b.n	8002398 <EXTI2_IRQHandler+0xd0>
		} else {
			A = A + 1;
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 8002388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238c:	b29b      	uxth	r3, r3
 800238e:	3301      	adds	r3, #1
 8002390:	b29b      	uxth	r3, r3
 8002392:	b21a      	sxth	r2, r3
 8002394:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 8002396:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8002398:	4b5c      	ldr	r3, [pc, #368]	; (800250c <EXTI2_IRQHandler+0x244>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a5c      	ldr	r2, [pc, #368]	; (8002510 <EXTI2_IRQHandler+0x248>)
 800239e:	6013      	str	r3, [r2, #0]
		send_to_display = 1;
 80023a0:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <EXTI2_IRQHandler+0x250>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e02d      	b.n	8002404 <EXTI2_IRQHandler+0x13c>
	} else if (status_old == 0x01 && status == 0x00) {
 80023a8:	4b57      	ldr	r3, [pc, #348]	; (8002508 <EXTI2_IRQHandler+0x240>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d129      	bne.n	8002404 <EXTI2_IRQHandler+0x13c>
 80023b0:	4b54      	ldr	r3, [pc, #336]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d125      	bne.n	8002404 <EXTI2_IRQHandler+0x13c>
		Time = HAL_GetTick();
 80023b8:	f7fd ff20 	bl	80001fc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b53      	ldr	r3, [pc, #332]	; (800250c <EXTI2_IRQHandler+0x244>)
 80023c0:	601a      	str	r2, [r3, #0]
		if (Time - Time_old < reaction) {
 80023c2:	4b52      	ldr	r3, [pc, #328]	; (800250c <EXTI2_IRQHandler+0x244>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b52      	ldr	r3, [pc, #328]	; (8002510 <EXTI2_IRQHandler+0x248>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	d809      	bhi.n	80023e4 <EXTI2_IRQHandler+0x11c>
			A = A + scroll;
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 80023d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3332      	adds	r3, #50	; 0x32
 80023da:	b29b      	uxth	r3, r3
 80023dc:	b21a      	sxth	r2, r3
 80023de:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	e008      	b.n	80023f6 <EXTI2_IRQHandler+0x12e>
		} else {
			A = A + 1;
 80023e4:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 80023e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	4b48      	ldr	r3, [pc, #288]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 80023f4:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 80023f6:	4b45      	ldr	r3, [pc, #276]	; (800250c <EXTI2_IRQHandler+0x244>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a45      	ldr	r2, [pc, #276]	; (8002510 <EXTI2_IRQHandler+0x248>)
 80023fc:	6013      	str	r3, [r2, #0]
		send_to_display = 1;
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <EXTI2_IRQHandler+0x250>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
	}

	if (status_old == 0x11 && status == 0x10) {
 8002404:	4b40      	ldr	r3, [pc, #256]	; (8002508 <EXTI2_IRQHandler+0x240>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b11      	cmp	r3, #17
 800240a:	d107      	bne.n	800241c <EXTI2_IRQHandler+0x154>
 800240c:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b10      	cmp	r3, #16
 8002412:	d103      	bne.n	800241c <EXTI2_IRQHandler+0x154>
		status_old = 0x10;
 8002414:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <EXTI2_IRQHandler+0x240>)
 8002416:	2210      	movs	r2, #16
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e068      	b.n	80024ee <EXTI2_IRQHandler+0x226>

	} else if (status_old == 0x00 && status == 0x01) {
 800241c:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <EXTI2_IRQHandler+0x240>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <EXTI2_IRQHandler+0x16c>
 8002424:	4b37      	ldr	r3, [pc, #220]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d103      	bne.n	8002434 <EXTI2_IRQHandler+0x16c>
		status_old = 0x01;
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <EXTI2_IRQHandler+0x240>)
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e05c      	b.n	80024ee <EXTI2_IRQHandler+0x226>

	}

	else if (status_old == 0x10 && status == 0x00) {
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <EXTI2_IRQHandler+0x240>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b10      	cmp	r3, #16
 800243a:	d12a      	bne.n	8002492 <EXTI2_IRQHandler+0x1ca>
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d126      	bne.n	8002492 <EXTI2_IRQHandler+0x1ca>
		Time = HAL_GetTick();
 8002444:	f7fd feda 	bl	80001fc <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <EXTI2_IRQHandler+0x244>)
 800244c:	601a      	str	r2, [r3, #0]
		if (Time - Time_old < reaction) {
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <EXTI2_IRQHandler+0x244>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <EXTI2_IRQHandler+0x248>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b09      	cmp	r3, #9
 800245a:	d809      	bhi.n	8002470 <EXTI2_IRQHandler+0x1a8>
			A = A - scroll;
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 800245e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b32      	subs	r3, #50	; 0x32
 8002466:	b29b      	uxth	r3, r3
 8002468:	b21a      	sxth	r2, r3
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	e008      	b.n	8002482 <EXTI2_IRQHandler+0x1ba>
		} else {
			A = A - 1;
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 8002472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29b      	uxth	r3, r3
 800247c:	b21a      	sxth	r2, r3
 800247e:	4b25      	ldr	r3, [pc, #148]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 8002480:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <EXTI2_IRQHandler+0x244>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <EXTI2_IRQHandler+0x248>)
 8002488:	6013      	str	r3, [r2, #0]
		send_to_display = 1;
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <EXTI2_IRQHandler+0x250>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e02d      	b.n	80024ee <EXTI2_IRQHandler+0x226>
	}

	else if (status_old == 0x01 && status == 0x11) {
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <EXTI2_IRQHandler+0x240>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d129      	bne.n	80024ee <EXTI2_IRQHandler+0x226>
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b11      	cmp	r3, #17
 80024a0:	d125      	bne.n	80024ee <EXTI2_IRQHandler+0x226>
		Time = HAL_GetTick();
 80024a2:	f7fd feab 	bl	80001fc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <EXTI2_IRQHandler+0x244>)
 80024aa:	601a      	str	r2, [r3, #0]
		if (Time - Time_old < reaction) {
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <EXTI2_IRQHandler+0x244>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <EXTI2_IRQHandler+0x248>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b09      	cmp	r3, #9
 80024b8:	d809      	bhi.n	80024ce <EXTI2_IRQHandler+0x206>
			A = A - scroll;
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 80024bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b32      	subs	r3, #50	; 0x32
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 80024ca:	801a      	strh	r2, [r3, #0]
 80024cc:	e008      	b.n	80024e0 <EXTI2_IRQHandler+0x218>
		} else {
			A = A - 1;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 80024d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b21a      	sxth	r2, r3
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <EXTI2_IRQHandler+0x24c>)
 80024de:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <EXTI2_IRQHandler+0x244>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <EXTI2_IRQHandler+0x248>)
 80024e6:	6013      	str	r3, [r2, #0]
		send_to_display = 1;
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <EXTI2_IRQHandler+0x250>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
	}
	status_old = status;
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <EXTI2_IRQHandler+0x23c>)
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <EXTI2_IRQHandler+0x240>)
 80024f4:	701a      	strb	r2, [r3, #0]
	/* USER CODE END EXTI2_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80024f6:	2004      	movs	r0, #4
 80024f8:	f7fe f9a2 	bl	8000840 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI2_IRQn 1 */

	/* USER CODE END EXTI2_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40010800 	.word	0x40010800
 8002504:	20000099 	.word	0x20000099
 8002508:	20000098 	.word	0x20000098
 800250c:	20000094 	.word	0x20000094
 8002510:	20000090 	.word	0x20000090
 8002514:	20000034 	.word	0x20000034
 8002518:	20000036 	.word	0x20000036

0800251c <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI3_IRQn 0 */
	if (!(GPIOA->IDR & GPIO_PIN_2) && (!(GPIOA->IDR & GPIO_PIN_3))) {
 8002520:	4b8c      	ldr	r3, [pc, #560]	; (8002754 <EXTI3_IRQHandler+0x238>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <EXTI3_IRQHandler+0x24>
 800252c:	4b89      	ldr	r3, [pc, #548]	; (8002754 <EXTI3_IRQHandler+0x238>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d103      	bne.n	8002540 <EXTI3_IRQHandler+0x24>
		status = 0x00;
 8002538:	4b87      	ldr	r3, [pc, #540]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e02e      	b.n	800259e <EXTI3_IRQHandler+0x82>
	} else if ((GPIOA->IDR & GPIO_PIN_2) && (!(GPIOA->IDR & GPIO_PIN_3))) {
 8002540:	4b84      	ldr	r3, [pc, #528]	; (8002754 <EXTI3_IRQHandler+0x238>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <EXTI3_IRQHandler+0x44>
 800254c:	4b81      	ldr	r3, [pc, #516]	; (8002754 <EXTI3_IRQHandler+0x238>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d103      	bne.n	8002560 <EXTI3_IRQHandler+0x44>
		status = 0x10;
 8002558:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 800255a:	2210      	movs	r2, #16
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e01e      	b.n	800259e <EXTI3_IRQHandler+0x82>
	} else if ((GPIOA->IDR & GPIO_PIN_2) && (GPIOA->IDR & GPIO_PIN_3)) {
 8002560:	4b7c      	ldr	r3, [pc, #496]	; (8002754 <EXTI3_IRQHandler+0x238>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <EXTI3_IRQHandler+0x64>
 800256c:	4b79      	ldr	r3, [pc, #484]	; (8002754 <EXTI3_IRQHandler+0x238>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <EXTI3_IRQHandler+0x64>
		status = 0x11;
 8002578:	4b77      	ldr	r3, [pc, #476]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 800257a:	2211      	movs	r2, #17
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e00e      	b.n	800259e <EXTI3_IRQHandler+0x82>
	} else if (!(GPIOA->IDR & GPIO_PIN_2) && (GPIOA->IDR & GPIO_PIN_3)) {
 8002580:	4b74      	ldr	r3, [pc, #464]	; (8002754 <EXTI3_IRQHandler+0x238>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <EXTI3_IRQHandler+0x82>
 800258c:	4b71      	ldr	r3, [pc, #452]	; (8002754 <EXTI3_IRQHandler+0x238>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <EXTI3_IRQHandler+0x82>
		status = 0x01;
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
	}

	if (status_old == 0x10 && status == 0x11) {
 800259e:	4b6f      	ldr	r3, [pc, #444]	; (800275c <EXTI3_IRQHandler+0x240>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d12a      	bne.n	80025fc <EXTI3_IRQHandler+0xe0>
 80025a6:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b11      	cmp	r3, #17
 80025ac:	d126      	bne.n	80025fc <EXTI3_IRQHandler+0xe0>
		Time = HAL_GetTick();
 80025ae:	f7fd fe25 	bl	80001fc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <EXTI3_IRQHandler+0x244>)
 80025b6:	601a      	str	r2, [r3, #0]
		if (Time - Time_old < reaction) {
 80025b8:	4b69      	ldr	r3, [pc, #420]	; (8002760 <EXTI3_IRQHandler+0x244>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b69      	ldr	r3, [pc, #420]	; (8002764 <EXTI3_IRQHandler+0x248>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d809      	bhi.n	80025da <EXTI3_IRQHandler+0xbe>
			A = A + scroll;
 80025c6:	4b68      	ldr	r3, [pc, #416]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 80025c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3332      	adds	r3, #50	; 0x32
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	4b64      	ldr	r3, [pc, #400]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	e008      	b.n	80025ec <EXTI3_IRQHandler+0xd0>
		} else {
			A = A + 1;
 80025da:	4b63      	ldr	r3, [pc, #396]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 80025dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b21a      	sxth	r2, r3
 80025e8:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 80025ea:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 80025ec:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <EXTI3_IRQHandler+0x244>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a5c      	ldr	r2, [pc, #368]	; (8002764 <EXTI3_IRQHandler+0x248>)
 80025f2:	6013      	str	r3, [r2, #0]
		send_to_display = 1;
 80025f4:	4b5d      	ldr	r3, [pc, #372]	; (800276c <EXTI3_IRQHandler+0x250>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e02d      	b.n	8002658 <EXTI3_IRQHandler+0x13c>
	} else if (status_old == 0x01 && status == 0x00) {
 80025fc:	4b57      	ldr	r3, [pc, #348]	; (800275c <EXTI3_IRQHandler+0x240>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d129      	bne.n	8002658 <EXTI3_IRQHandler+0x13c>
 8002604:	4b54      	ldr	r3, [pc, #336]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d125      	bne.n	8002658 <EXTI3_IRQHandler+0x13c>
		Time = HAL_GetTick();
 800260c:	f7fd fdf6 	bl	80001fc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	4b53      	ldr	r3, [pc, #332]	; (8002760 <EXTI3_IRQHandler+0x244>)
 8002614:	601a      	str	r2, [r3, #0]
		if (Time - Time_old < reaction) {
 8002616:	4b52      	ldr	r3, [pc, #328]	; (8002760 <EXTI3_IRQHandler+0x244>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b52      	ldr	r3, [pc, #328]	; (8002764 <EXTI3_IRQHandler+0x248>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b09      	cmp	r3, #9
 8002622:	d809      	bhi.n	8002638 <EXTI3_IRQHandler+0x11c>
			A = A + scroll;
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 8002626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262a:	b29b      	uxth	r3, r3
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	b29b      	uxth	r3, r3
 8002630:	b21a      	sxth	r2, r3
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 8002634:	801a      	strh	r2, [r3, #0]
 8002636:	e008      	b.n	800264a <EXTI3_IRQHandler+0x12e>
		} else {
			A = A + 1;
 8002638:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 800263a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263e:	b29b      	uxth	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	b29b      	uxth	r3, r3
 8002644:	b21a      	sxth	r2, r3
 8002646:	4b48      	ldr	r3, [pc, #288]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 8002648:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 800264a:	4b45      	ldr	r3, [pc, #276]	; (8002760 <EXTI3_IRQHandler+0x244>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a45      	ldr	r2, [pc, #276]	; (8002764 <EXTI3_IRQHandler+0x248>)
 8002650:	6013      	str	r3, [r2, #0]
		send_to_display = 1;
 8002652:	4b46      	ldr	r3, [pc, #280]	; (800276c <EXTI3_IRQHandler+0x250>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
	}

	if (status_old == 0x11 && status == 0x10) {
 8002658:	4b40      	ldr	r3, [pc, #256]	; (800275c <EXTI3_IRQHandler+0x240>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b11      	cmp	r3, #17
 800265e:	d107      	bne.n	8002670 <EXTI3_IRQHandler+0x154>
 8002660:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b10      	cmp	r3, #16
 8002666:	d103      	bne.n	8002670 <EXTI3_IRQHandler+0x154>
		status_old = 0x10;
 8002668:	4b3c      	ldr	r3, [pc, #240]	; (800275c <EXTI3_IRQHandler+0x240>)
 800266a:	2210      	movs	r2, #16
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e068      	b.n	8002742 <EXTI3_IRQHandler+0x226>

	} else if (status_old == 0x00 && status == 0x01) {
 8002670:	4b3a      	ldr	r3, [pc, #232]	; (800275c <EXTI3_IRQHandler+0x240>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <EXTI3_IRQHandler+0x16c>
 8002678:	4b37      	ldr	r3, [pc, #220]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d103      	bne.n	8002688 <EXTI3_IRQHandler+0x16c>
		status_old = 0x01;
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <EXTI3_IRQHandler+0x240>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e05c      	b.n	8002742 <EXTI3_IRQHandler+0x226>

	}

	else if (status_old == 0x10 && status == 0x00) {
 8002688:	4b34      	ldr	r3, [pc, #208]	; (800275c <EXTI3_IRQHandler+0x240>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b10      	cmp	r3, #16
 800268e:	d12a      	bne.n	80026e6 <EXTI3_IRQHandler+0x1ca>
 8002690:	4b31      	ldr	r3, [pc, #196]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d126      	bne.n	80026e6 <EXTI3_IRQHandler+0x1ca>
		Time = HAL_GetTick();
 8002698:	f7fd fdb0 	bl	80001fc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <EXTI3_IRQHandler+0x244>)
 80026a0:	601a      	str	r2, [r3, #0]
		if (Time - Time_old < reaction) {
 80026a2:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <EXTI3_IRQHandler+0x244>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <EXTI3_IRQHandler+0x248>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b09      	cmp	r3, #9
 80026ae:	d809      	bhi.n	80026c4 <EXTI3_IRQHandler+0x1a8>
			A = A - scroll;
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 80026b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b32      	subs	r3, #50	; 0x32
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	b21a      	sxth	r2, r3
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	e008      	b.n	80026d6 <EXTI3_IRQHandler+0x1ba>
		} else {
			A = A - 1;
 80026c4:	4b28      	ldr	r3, [pc, #160]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 80026c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	4b25      	ldr	r3, [pc, #148]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 80026d4:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <EXTI3_IRQHandler+0x244>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <EXTI3_IRQHandler+0x248>)
 80026dc:	6013      	str	r3, [r2, #0]
		send_to_display = 1;
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <EXTI3_IRQHandler+0x250>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e02d      	b.n	8002742 <EXTI3_IRQHandler+0x226>
	}

	else if (status_old == 0x01 && status == 0x11) {
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <EXTI3_IRQHandler+0x240>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d129      	bne.n	8002742 <EXTI3_IRQHandler+0x226>
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b11      	cmp	r3, #17
 80026f4:	d125      	bne.n	8002742 <EXTI3_IRQHandler+0x226>
		Time = HAL_GetTick();
 80026f6:	f7fd fd81 	bl	80001fc <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <EXTI3_IRQHandler+0x244>)
 80026fe:	601a      	str	r2, [r3, #0]
		if (Time - Time_old < reaction) {
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <EXTI3_IRQHandler+0x244>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <EXTI3_IRQHandler+0x248>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b09      	cmp	r3, #9
 800270c:	d809      	bhi.n	8002722 <EXTI3_IRQHandler+0x206>
			A = A - scroll;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 8002710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b32      	subs	r3, #50	; 0x32
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21a      	sxth	r2, r3
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	e008      	b.n	8002734 <EXTI3_IRQHandler+0x218>
		} else {
			A = A - 1;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 8002724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29b      	uxth	r3, r3
 800272e:	b21a      	sxth	r2, r3
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <EXTI3_IRQHandler+0x24c>)
 8002732:	801a      	strh	r2, [r3, #0]
		}
		Time_old = Time;
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <EXTI3_IRQHandler+0x244>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <EXTI3_IRQHandler+0x248>)
 800273a:	6013      	str	r3, [r2, #0]
		send_to_display = 1;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <EXTI3_IRQHandler+0x250>)
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
	}
	status_old = status;
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <EXTI3_IRQHandler+0x23c>)
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <EXTI3_IRQHandler+0x240>)
 8002748:	701a      	strb	r2, [r3, #0]
	/* USER CODE END EXTI3_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800274a:	2008      	movs	r0, #8
 800274c:	f7fe f878 	bl	8000840 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI3_IRQn 1 */

	/* USER CODE END EXTI3_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40010800 	.word	0x40010800
 8002758:	20000099 	.word	0x20000099
 800275c:	20000098 	.word	0x20000098
 8002760:	20000094 	.word	0x20000094
 8002764:	20000090 	.word	0x20000090
 8002768:	20000034 	.word	0x20000034
 800276c:	20000036 	.word	0x20000036

08002770 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void) {
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_IRQn 0 */
	if (GPIOA->IDR & GPIO_PIN_4) {
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <EXTI4_IRQHandler+0x2c>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <EXTI4_IRQHandler+0x1a>
		GPIOC->BRR = LED_Pin;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <EXTI4_IRQHandler+0x30>)
 8002782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002786:	615a      	str	r2, [r3, #20]
 8002788:	e003      	b.n	8002792 <EXTI4_IRQHandler+0x22>
	} else {
		GPIOC->BSRR = LED_Pin;
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <EXTI4_IRQHandler+0x30>)
 800278c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002790:	611a      	str	r2, [r3, #16]
	}
	/* USER CODE END EXTI4_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002792:	2010      	movs	r0, #16
 8002794:	f7fe f854 	bl	8000840 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI4_IRQn 1 */

	/* USER CODE END EXTI4_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40010800 	.word	0x40010800
 80027a0:	40011000 	.word	0x40011000

080027a4 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <SPI1_IRQHandler+0x10>)
 80027aa:	f7fe fd63 	bl	8001274 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000038 	.word	0x20000038

080027b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027c6:	e003      	b.n	80027d0 <LoopCopyDataInit>

080027c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027ce:	3104      	adds	r1, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027d0:	480a      	ldr	r0, [pc, #40]	; (80027fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027d8:	d3f6      	bcc.n	80027c8 <CopyDataInit>
  ldr r2, =_sbss
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027dc:	e002      	b.n	80027e4 <LoopFillZerobss>

080027de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027e0:	f842 3b04 	str.w	r3, [r2], #4

080027e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027e8:	d3f9      	bcc.n	80027de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ea:	f7ff ffe5 	bl	80027b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ee:	f000 f80f 	bl	8002810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027f2:	f7fe ff9b 	bl	800172c <main>
  bx lr
 80027f6:	4770      	bx	lr
  ldr r3, =_sidata
 80027f8:	080028ac 	.word	0x080028ac
  ldr r0, =_sdata
 80027fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002800:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002804:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002808:	2000009c 	.word	0x2000009c

0800280c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800280c:	e7fe      	b.n	800280c <ADC1_2_IRQHandler>
	...

08002810 <__libc_init_array>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	2500      	movs	r5, #0
 8002814:	4e0c      	ldr	r6, [pc, #48]	; (8002848 <__libc_init_array+0x38>)
 8002816:	4c0d      	ldr	r4, [pc, #52]	; (800284c <__libc_init_array+0x3c>)
 8002818:	1ba4      	subs	r4, r4, r6
 800281a:	10a4      	asrs	r4, r4, #2
 800281c:	42a5      	cmp	r5, r4
 800281e:	d109      	bne.n	8002834 <__libc_init_array+0x24>
 8002820:	f000 f822 	bl	8002868 <_init>
 8002824:	2500      	movs	r5, #0
 8002826:	4e0a      	ldr	r6, [pc, #40]	; (8002850 <__libc_init_array+0x40>)
 8002828:	4c0a      	ldr	r4, [pc, #40]	; (8002854 <__libc_init_array+0x44>)
 800282a:	1ba4      	subs	r4, r4, r6
 800282c:	10a4      	asrs	r4, r4, #2
 800282e:	42a5      	cmp	r5, r4
 8002830:	d105      	bne.n	800283e <__libc_init_array+0x2e>
 8002832:	bd70      	pop	{r4, r5, r6, pc}
 8002834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002838:	4798      	blx	r3
 800283a:	3501      	adds	r5, #1
 800283c:	e7ee      	b.n	800281c <__libc_init_array+0xc>
 800283e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002842:	4798      	blx	r3
 8002844:	3501      	adds	r5, #1
 8002846:	e7f2      	b.n	800282e <__libc_init_array+0x1e>
 8002848:	080028a4 	.word	0x080028a4
 800284c:	080028a4 	.word	0x080028a4
 8002850:	080028a4 	.word	0x080028a4
 8002854:	080028a8 	.word	0x080028a8

08002858 <memset>:
 8002858:	4603      	mov	r3, r0
 800285a:	4402      	add	r2, r0
 800285c:	4293      	cmp	r3, r2
 800285e:	d100      	bne.n	8002862 <memset+0xa>
 8002860:	4770      	bx	lr
 8002862:	f803 1b01 	strb.w	r1, [r3], #1
 8002866:	e7f9      	b.n	800285c <memset+0x4>

08002868 <_init>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr

08002874 <_fini>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	bf00      	nop
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr
