
My_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08007638  08007638  00017638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e8  080079e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080079e8  080079e8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079e8  080079e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079ec  080079ec  000179ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080079f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001e0  08007bd0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08007bd0  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f15  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab8  00000000  00000000  0002911e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  0002abd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000718  00000000  00000000  0002b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001805f  00000000  00000000  0002bae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070ba  00000000  00000000  00043b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008331f  00000000  00000000  0004abf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdf18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e4  00000000  00000000  000cdf94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800761c 	.word	0x0800761c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800761c 	.word	0x0800761c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000da4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00b      	beq.n	8000dc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000dac:	e000      	b.n	8000db0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000dae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000db0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f9      	beq.n	8000dae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*----------------------ITM_SendChar-------------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffca 	bl	8000d84 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <UART_MQTT_Receive_Callback>:
/*----------------------ITM_SendChar-------------------------------------------*/

void UART_MQTT_Receive_Callback(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	/*----------основные действия с входящими данными-----------*/
	switch (VARIABLE_ID) {
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <UART_MQTT_Receive_Callback+0x8c>)
 8000e0e:	785b      	ldrb	r3, [r3, #1]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d02a      	beq.n	8000e6a <UART_MQTT_Receive_Callback+0x62>
 8000e14:	2bff      	cmp	r3, #255	; 0xff
 8000e16:	d035      	beq.n	8000e84 <UART_MQTT_Receive_Callback+0x7c>
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d000      	beq.n	8000e1e <UART_MQTT_Receive_Callback+0x16>
		break;

		/*----------------здесь будет выборка по номеру переменной-----------------------*/
	}
	/*----------основные действия с входящими данными-----------*/
}
 8000e1c:	e038      	b.n	8000e90 <UART_MQTT_Receive_Callback+0x88>
		if (UART_MQTT_Checksumm_validation(esp_rx_buffer)) {
 8000e1e:	481d      	ldr	r0, [pc, #116]	; (8000e94 <UART_MQTT_Receive_Callback+0x8c>)
 8000e20:	f000 fd5f 	bl	80018e2 <UART_MQTT_Checksumm_validation>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d02f      	beq.n	8000e8a <UART_MQTT_Receive_Callback+0x82>
			LED = UART_MQTT_Receive_data_bool(esp_rx_buffer);
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <UART_MQTT_Receive_Callback+0x8c>)
 8000e2c:	f000 fd18 	bl	8001860 <UART_MQTT_Receive_data_bool>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <UART_MQTT_Receive_Callback+0x90>)
 8000e36:	701a      	strb	r2, [r3, #0]
			Time_LED = HAL_GetTick();
 8000e38:	f000 fe1c 	bl	8001a74 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <UART_MQTT_Receive_Callback+0x94>)
 8000e40:	601a      	str	r2, [r3, #0]
			if (LED) {
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <UART_MQTT_Receive_Callback+0x90>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <UART_MQTT_Receive_Callback+0x52>
				GPIOC->BSRR = (uint32_t) LED_Pin << 16u;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <UART_MQTT_Receive_Callback+0x98>)
 8000e4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e50:	611a      	str	r2, [r3, #16]
				printf("LED_on\r\n");
 8000e52:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <UART_MQTT_Receive_Callback+0x9c>)
 8000e54:	f003 f846 	bl	8003ee4 <puts>
		break;
 8000e58:	e017      	b.n	8000e8a <UART_MQTT_Receive_Callback+0x82>
				GPIOC->BSRR = LED_Pin;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <UART_MQTT_Receive_Callback+0x98>)
 8000e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e60:	611a      	str	r2, [r3, #16]
				printf("LED_off\r\n");
 8000e62:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <UART_MQTT_Receive_Callback+0xa0>)
 8000e64:	f003 f83e 	bl	8003ee4 <puts>
		break;
 8000e68:	e00f      	b.n	8000e8a <UART_MQTT_Receive_Callback+0x82>
		if (UART_MQTT_Checksumm_validation(esp_rx_buffer)) {
 8000e6a:	480a      	ldr	r0, [pc, #40]	; (8000e94 <UART_MQTT_Receive_Callback+0x8c>)
 8000e6c:	f000 fd39 	bl	80018e2 <UART_MQTT_Checksumm_validation>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <UART_MQTT_Receive_Callback+0x86>
			counter = UART_MQTT_Receive_data_float(esp_rx_buffer);
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <UART_MQTT_Receive_Callback+0x8c>)
 8000e78:	f000 fd06 	bl	8001888 <UART_MQTT_Receive_data_float>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <UART_MQTT_Receive_Callback+0xa4>)
 8000e80:	601a      	str	r2, [r3, #0]
		break;
 8000e82:	e004      	b.n	8000e8e <UART_MQTT_Receive_Callback+0x86>
		UART_MQTT_Check_net();
 8000e84:	f000 fb0a 	bl	800149c <UART_MQTT_Check_net>
		break;
 8000e88:	e002      	b.n	8000e90 <UART_MQTT_Receive_Callback+0x88>
		break;
 8000e8a:	bf00      	nop
 8000e8c:	e000      	b.n	8000e90 <UART_MQTT_Receive_Callback+0x88>
		break;
 8000e8e:	bf00      	nop
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000200 	.word	0x20000200
 8000e98:	20000360 	.word	0x20000360
 8000e9c:	20000318 	.word	0x20000318
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	08007638 	.word	0x08007638
 8000ea8:	08007640 	.word	0x08007640
 8000eac:	20000000 	.word	0x20000000

08000eb0 <HAL_UART_IDLE_Callback>:

/*#############################################################################*/
/*------------------------IDLE_Callback---------------------------------------*/
void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { //проверка, из нужного ли uart пришли данные
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_UART_IDLE_Callback+0x1c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <HAL_UART_IDLE_Callback+0x14>
		UART_MQTT_IDLE_Callback_setting();
 8000ec0:	f000 fb92 	bl	80015e8 <UART_MQTT_IDLE_Callback_setting>
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000031c 	.word	0x2000031c

08000ed0 <HAL_UART_RxCpltCallback>:
/*------------------------IDLE_Callback---------------------------------------*/

/*------------------------RxCpltCallback---------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { //проверка, из нужного ли uart пришли данные
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_UART_RxCpltCallback+0x1c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d101      	bne.n	8000ee4 <HAL_UART_RxCpltCallback+0x14>
		UART_MQTT_RxCpltCallback_setting();
 8000ee0:	f000 fbbe 	bl	8001660 <UART_MQTT_RxCpltCallback_setting>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000031c 	.word	0x2000031c

08000ef0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ef0:	b598      	push	{r3, r4, r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef4:	f000 fd66 	bl	80019c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef8:	f000 f882 	bl	8001000 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000efc:	f000 f8f0 	bl	80010e0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f00:	f000 f8c4 	bl	800108c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	LED = 0;
 8000f04:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <main+0xe8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	T = HAL_GetTick();
 8000f0a:	f000 fdb3 	bl	8001a74 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <main+0xec>)
 8000f12:	601a      	str	r2, [r3, #0]
	UART_MQTT_init();
 8000f14:	f000 fa96 	bl	8001444 <UART_MQTT_init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() - T >= 1000) {
 8000f18:	f000 fdac 	bl	8001a74 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <main+0xec>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f28:	d330      	bcc.n	8000f8c <main+0x9c>
			T = HAL_GetTick();
 8000f2a:	f000 fda3 	bl	8001a74 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <main+0xec>)
 8000f32:	601a      	str	r2, [r3, #0]
			counter = counter + 0.4256f;
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <main+0xf0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	492a      	ldr	r1, [pc, #168]	; (8000fe4 <main+0xf4>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fe1a 	bl	8000b74 <__addsf3>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <main+0xf0>)
 8000f46:	601a      	str	r2, [r3, #0]

			if (WIFI_flag && MQTT_flag) {
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <main+0xf8>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d01d      	beq.n	8000f8c <main+0x9c>
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <main+0xfc>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d019      	beq.n	8000f8c <main+0x9c>
				while (huart1.gState != HAL_UART_STATE_READY);
 8000f58:	bf00      	nop
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <main+0x100>)
 8000f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	d1f9      	bne.n	8000f5a <main+0x6a>
				UART_MQTT_Send_data_float(0x03, counter, esp_tx_buffer);
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <main+0xf0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <main+0x104>)
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 fc0a 	bl	8001788 <UART_MQTT_Send_data_float>
				printf("Counter_float = %.2f\r\n", counter);
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <main+0xf0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fa55 	bl	8000428 <__aeabi_f2d>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460c      	mov	r4, r1
 8000f82:	461a      	mov	r2, r3
 8000f84:	4623      	mov	r3, r4
 8000f86:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <main+0x108>)
 8000f88:	f002 ff38 	bl	8003dfc <iprintf>
			}

		}

		if (HAL_GetTick() - Time_LED >= 5000) {
 8000f8c:	f000 fd72 	bl	8001a74 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <main+0x10c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d9bb      	bls.n	8000f18 <main+0x28>
			Time_LED = HAL_GetTick();
 8000fa0:	f000 fd68 	bl	8001a74 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <main+0x10c>)
 8000fa8:	601a      	str	r2, [r3, #0]
			if (WIFI_flag && MQTT_flag) {
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <main+0xf8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0b2      	beq.n	8000f18 <main+0x28>
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <main+0xfc>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0ae      	beq.n	8000f18 <main+0x28>
				while (huart1.gState != HAL_UART_STATE_READY);
 8000fba:	bf00      	nop
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <main+0x100>)
 8000fbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	d1f9      	bne.n	8000fbc <main+0xcc>
				UART_MQTT_Send_data_bool(0x02, LED, esp_tx_buffer);
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <main+0xe8>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <main+0x104>)
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 fb75 	bl	80016c0 <UART_MQTT_Send_data_bool>
		if (HAL_GetTick() - T >= 1000) {
 8000fd6:	e79f      	b.n	8000f18 <main+0x28>
 8000fd8:	20000360 	.word	0x20000360
 8000fdc:	20000314 	.word	0x20000314
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	3ed9e83e 	.word	0x3ed9e83e
 8000fe8:	20000364 	.word	0x20000364
 8000fec:	20000365 	.word	0x20000365
 8000ff0:	2000031c 	.word	0x2000031c
 8000ff4:	20000300 	.word	0x20000300
 8000ff8:	0800764c 	.word	0x0800764c
 8000ffc:	20000318 	.word	0x20000318

08001000 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b090      	sub	sp, #64	; 0x40
 8001004:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	2228      	movs	r2, #40	; 0x28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f002 f8bc 	bl	800318c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800102a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800103e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4618      	mov	r0, r3
 800104a:	f001 f835 	bl	80020b8 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x58>
		Error_Handler();
 8001054:	f000 f8b0 	bl	80011b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001058:	230f      	movs	r3, #15
 800105a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001068:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2102      	movs	r1, #2
 8001072:	4618      	mov	r0, r3
 8001074:	f001 faa0 	bl	80025b8 <HAL_RCC_ClockConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x82>
		Error_Handler();
 800107e:	f000 f89b 	bl	80011b8 <Error_Handler>
	}
}
 8001082:	bf00      	nop
 8001084:	3740      	adds	r7, #64	; 0x40
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_USART1_UART_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 8001098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800109c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_USART1_UART_Init+0x4c>)
 80010c4:	f001 fc14 	bl	80028f0 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80010ce:	f000 f873 	bl	80011b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000031c 	.word	0x2000031c
 80010dc:	40013800 	.word	0x40013800

080010e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <MX_GPIO_Init+0xcc>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <MX_GPIO_Init+0xcc>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <MX_GPIO_Init+0xcc>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a26      	ldr	r2, [pc, #152]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_GPIO_Init+0xcc>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_GPIO_Init+0xcc>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_GPIO_Init+0xcc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_GPIO_Init+0xcc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_GPIO_Init+0xd0>)
 800115c:	f000 ff94 	bl	8002088 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_GPIO_Init+0xd4>)
 8001166:	f000 ff8f 	bl	8002088 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0xd0>)
 8001184:	f000 fe26 	bl	8001dd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_Pin */
	GPIO_InitStruct.Pin = RESET_Pin;
 8001188:	2302      	movs	r3, #2
 800118a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_GPIO_Init+0xd4>)
 80011a0:	f000 fe18 	bl	8001dd4 <HAL_GPIO_Init>

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40010800 	.word	0x40010800

080011b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011be:	e7fe      	b.n	80011be <Error_Handler+0x6>

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_MspInit+0x5c>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_MspInit+0x5c>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6193      	str	r3, [r2, #24]
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_MspInit+0x5c>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_MspInit+0x5c>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_MspInit+0x5c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_MspInit+0x5c>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_MspInit+0x60>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_MspInit+0x60>)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <HAL_UART_MspInit+0x9c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d139      	bne.n	80012b8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_UART_MspInit+0xa0>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_UART_MspInit+0xa0>)
 800124a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_UART_MspInit+0xa0>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_UART_MspInit+0xa0>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <HAL_UART_MspInit+0xa0>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_UART_MspInit+0xa0>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	480f      	ldr	r0, [pc, #60]	; (80012c8 <HAL_UART_MspInit+0xa4>)
 800128a:	f000 fda3 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <HAL_UART_MspInit+0xa4>)
 80012a4:	f000 fd96 	bl	8001dd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2025      	movs	r0, #37	; 0x25
 80012ae:	f000 fce4 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012b2:	2025      	movs	r0, #37	; 0x25
 80012b4:	f000 fcfd 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010800 	.word	0x40010800

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 fb9d 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <USART1_IRQHandler+0x10>)
 8001322:	f001 fc23 	bl	8002b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000031c 	.word	0x2000031c

08001330 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00a      	b.n	8001358 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001342:	f3af 8000 	nop.w
 8001346:	4601      	mov	r1, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	b2ca      	uxtb	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf0      	blt.n	8001342 <_read+0x12>
	}

return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_close>:
	}
	return len;
}

int _close(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001390:	605a      	str	r2, [r3, #4]
	return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <_isatty>:

int _isatty(int file)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	return 1;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
	return 0;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
	...

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f001 fe9c 	bl	8003138 <__errno>
 8001400:	4602      	mov	r2, r0
 8001402:	230c      	movs	r3, #12
 8001404:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20005000 	.word	0x20005000
 800142c:	00000400 	.word	0x00000400
 8001430:	200001fc 	.word	0x200001fc
 8001434:	20000370 	.word	0x20000370

08001438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <UART_MQTT_init>:
/*----------Инициализация UART_MQTT-----------------*/
/// Инициализация UART_MQTT протокола.
/// Основано на работе с UART и флагом IDLE.
/// (см. урок #9(UART, прием данных, не зная размера данных. UART_IT_IDLE. Работа с прерываниями.)
/// Ссылка на урок: https://youtu.be/2qkGNR6aKGY
void UART_MQTT_init(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	MQTT_flag = 0;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <UART_MQTT_init+0x44>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
	WIFI_flag = 0;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <UART_MQTT_init+0x48>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart_used, UART_IT_IDLE);
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <UART_MQTT_init+0x4c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <UART_MQTT_init+0x4c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0210 	orr.w	r2, r2, #16
 8001462:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart_used, esp_rx_buffer, esp_rx_buffer_size);
 8001464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001468:	490a      	ldr	r1, [pc, #40]	; (8001494 <UART_MQTT_init+0x50>)
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <UART_MQTT_init+0x4c>)
 800146c:	f001 fad1 	bl	8002a12 <HAL_UART_Receive_IT>
	UART_MQTT_RESET_HIGH();
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <UART_MQTT_init+0x54>)
 8001472:	2202      	movs	r2, #2
 8001474:	611a      	str	r2, [r3, #16]
	HAL_Delay(100);
 8001476:	2064      	movs	r0, #100	; 0x64
 8001478:	f000 fb06 	bl	8001a88 <HAL_Delay>
	UART_MQTT_RESET_LOW();
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <UART_MQTT_init+0x54>)
 800147e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001482:	611a      	str	r2, [r3, #16]
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000365 	.word	0x20000365
 800148c:	20000364 	.word	0x20000364
 8001490:	2000031c 	.word	0x2000031c
 8001494:	20000200 	.word	0x20000200
 8001498:	40010800 	.word	0x40010800

0800149c <UART_MQTT_Check_net>:
/*----------Инициализация UART_MQTT-----------------*/

/*----------Проверка подключения ESP8266 к Wifi и MQTT брокеру-----------------*/
/// Проверка подключения ESP8266 к Wifi и MQTT брокеру
void UART_MQTT_Check_net(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if (UART_MQTT_Checksumm_validation(esp_rx_buffer)) {
 80014a0:	484a      	ldr	r0, [pc, #296]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014a2:	f000 fa1e 	bl	80018e2 <UART_MQTT_Checksumm_validation>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 808c 	beq.w	80015c6 <UART_MQTT_Check_net+0x12a>
		if ((esp_rx_buffer[0] == 0xFF) && (esp_rx_buffer[1] == 0xFF) && (esp_rx_buffer[2] == 0xFF) && (esp_rx_buffer[3] == 0xBB) && (esp_rx_buffer[4] == 0xBB) && (esp_rx_buffer[5] == 0xBB)
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d11e      	bne.n	80014f4 <UART_MQTT_Check_net+0x58>
 80014b6:	4b45      	ldr	r3, [pc, #276]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	2bff      	cmp	r3, #255	; 0xff
 80014bc:	d11a      	bne.n	80014f4 <UART_MQTT_Check_net+0x58>
 80014be:	4b43      	ldr	r3, [pc, #268]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014c0:	789b      	ldrb	r3, [r3, #2]
 80014c2:	2bff      	cmp	r3, #255	; 0xff
 80014c4:	d116      	bne.n	80014f4 <UART_MQTT_Check_net+0x58>
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	2bbb      	cmp	r3, #187	; 0xbb
 80014cc:	d112      	bne.n	80014f4 <UART_MQTT_Check_net+0x58>
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014d0:	791b      	ldrb	r3, [r3, #4]
 80014d2:	2bbb      	cmp	r3, #187	; 0xbb
 80014d4:	d10e      	bne.n	80014f4 <UART_MQTT_Check_net+0x58>
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014d8:	795b      	ldrb	r3, [r3, #5]
 80014da:	2bbb      	cmp	r3, #187	; 0xbb
 80014dc:	d10a      	bne.n	80014f4 <UART_MQTT_Check_net+0x58>
				&& (esp_rx_buffer[6] == 0xBB)) {
 80014de:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014e0:	799b      	ldrb	r3, [r3, #6]
 80014e2:	2bbb      	cmp	r3, #187	; 0xbb
 80014e4:	d106      	bne.n	80014f4 <UART_MQTT_Check_net+0x58>
			WIFI_flag = 0;
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <UART_MQTT_Check_net+0x134>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
			printf("Wi_fi != OK\r\n");
 80014ec:	4839      	ldr	r0, [pc, #228]	; (80015d4 <UART_MQTT_Check_net+0x138>)
 80014ee:	f002 fcf9 	bl	8003ee4 <puts>
 80014f2:	e068      	b.n	80015c6 <UART_MQTT_Check_net+0x12a>
		} else if ((esp_rx_buffer[0] == 0xFF) && (esp_rx_buffer[1] == 0xFF) && (esp_rx_buffer[2] == 0xFF) && (esp_rx_buffer[3] == 0xAA) && (esp_rx_buffer[4] == 0xAA) && (esp_rx_buffer[5] == 0xAA)
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2bff      	cmp	r3, #255	; 0xff
 80014fa:	d11e      	bne.n	800153a <UART_MQTT_Check_net+0x9e>
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80014fe:	785b      	ldrb	r3, [r3, #1]
 8001500:	2bff      	cmp	r3, #255	; 0xff
 8001502:	d11a      	bne.n	800153a <UART_MQTT_Check_net+0x9e>
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <UART_MQTT_Check_net+0x130>)
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	2bff      	cmp	r3, #255	; 0xff
 800150a:	d116      	bne.n	800153a <UART_MQTT_Check_net+0x9e>
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <UART_MQTT_Check_net+0x130>)
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	2baa      	cmp	r3, #170	; 0xaa
 8001512:	d112      	bne.n	800153a <UART_MQTT_Check_net+0x9e>
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <UART_MQTT_Check_net+0x130>)
 8001516:	791b      	ldrb	r3, [r3, #4]
 8001518:	2baa      	cmp	r3, #170	; 0xaa
 800151a:	d10e      	bne.n	800153a <UART_MQTT_Check_net+0x9e>
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <UART_MQTT_Check_net+0x130>)
 800151e:	795b      	ldrb	r3, [r3, #5]
 8001520:	2baa      	cmp	r3, #170	; 0xaa
 8001522:	d10a      	bne.n	800153a <UART_MQTT_Check_net+0x9e>
				&& (esp_rx_buffer[6] == 0xAA)) {
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <UART_MQTT_Check_net+0x130>)
 8001526:	799b      	ldrb	r3, [r3, #6]
 8001528:	2baa      	cmp	r3, #170	; 0xaa
 800152a:	d106      	bne.n	800153a <UART_MQTT_Check_net+0x9e>
			WIFI_flag = 1;
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <UART_MQTT_Check_net+0x134>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
			printf("Wi_fi == OK\r\n");
 8001532:	4829      	ldr	r0, [pc, #164]	; (80015d8 <UART_MQTT_Check_net+0x13c>)
 8001534:	f002 fcd6 	bl	8003ee4 <puts>
 8001538:	e045      	b.n	80015c6 <UART_MQTT_Check_net+0x12a>
		} else if ((esp_rx_buffer[0] == 0xFF) && (esp_rx_buffer[1] == 0xFF) && (esp_rx_buffer[2] == 0xFF) && (esp_rx_buffer[3] == 0xDD) && (esp_rx_buffer[4] == 0xDD) && (esp_rx_buffer[5] == 0xDD)
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <UART_MQTT_Check_net+0x130>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2bff      	cmp	r3, #255	; 0xff
 8001540:	d11e      	bne.n	8001580 <UART_MQTT_Check_net+0xe4>
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <UART_MQTT_Check_net+0x130>)
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	2bff      	cmp	r3, #255	; 0xff
 8001548:	d11a      	bne.n	8001580 <UART_MQTT_Check_net+0xe4>
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <UART_MQTT_Check_net+0x130>)
 800154c:	789b      	ldrb	r3, [r3, #2]
 800154e:	2bff      	cmp	r3, #255	; 0xff
 8001550:	d116      	bne.n	8001580 <UART_MQTT_Check_net+0xe4>
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <UART_MQTT_Check_net+0x130>)
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	2bdd      	cmp	r3, #221	; 0xdd
 8001558:	d112      	bne.n	8001580 <UART_MQTT_Check_net+0xe4>
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <UART_MQTT_Check_net+0x130>)
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	2bdd      	cmp	r3, #221	; 0xdd
 8001560:	d10e      	bne.n	8001580 <UART_MQTT_Check_net+0xe4>
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <UART_MQTT_Check_net+0x130>)
 8001564:	795b      	ldrb	r3, [r3, #5]
 8001566:	2bdd      	cmp	r3, #221	; 0xdd
 8001568:	d10a      	bne.n	8001580 <UART_MQTT_Check_net+0xe4>
				&& (esp_rx_buffer[6] == 0xDD)) {
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <UART_MQTT_Check_net+0x130>)
 800156c:	799b      	ldrb	r3, [r3, #6]
 800156e:	2bdd      	cmp	r3, #221	; 0xdd
 8001570:	d106      	bne.n	8001580 <UART_MQTT_Check_net+0xe4>
			MQTT_flag = 0;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <UART_MQTT_Check_net+0x140>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
			printf("MQTT != OK\r\n");
 8001578:	4819      	ldr	r0, [pc, #100]	; (80015e0 <UART_MQTT_Check_net+0x144>)
 800157a:	f002 fcb3 	bl	8003ee4 <puts>
 800157e:	e022      	b.n	80015c6 <UART_MQTT_Check_net+0x12a>
		} else if ((esp_rx_buffer[0] == 0xFF) && (esp_rx_buffer[1] == 0xFF) && (esp_rx_buffer[2] == 0xFF) && (esp_rx_buffer[3] == 0xCC) && (esp_rx_buffer[4] == 0xCC) && (esp_rx_buffer[5] == 0xCC)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <UART_MQTT_Check_net+0x130>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2bff      	cmp	r3, #255	; 0xff
 8001586:	d11e      	bne.n	80015c6 <UART_MQTT_Check_net+0x12a>
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <UART_MQTT_Check_net+0x130>)
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	2bff      	cmp	r3, #255	; 0xff
 800158e:	d11a      	bne.n	80015c6 <UART_MQTT_Check_net+0x12a>
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <UART_MQTT_Check_net+0x130>)
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	2bff      	cmp	r3, #255	; 0xff
 8001596:	d116      	bne.n	80015c6 <UART_MQTT_Check_net+0x12a>
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <UART_MQTT_Check_net+0x130>)
 800159a:	78db      	ldrb	r3, [r3, #3]
 800159c:	2bcc      	cmp	r3, #204	; 0xcc
 800159e:	d112      	bne.n	80015c6 <UART_MQTT_Check_net+0x12a>
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	2bcc      	cmp	r3, #204	; 0xcc
 80015a6:	d10e      	bne.n	80015c6 <UART_MQTT_Check_net+0x12a>
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80015aa:	795b      	ldrb	r3, [r3, #5]
 80015ac:	2bcc      	cmp	r3, #204	; 0xcc
 80015ae:	d10a      	bne.n	80015c6 <UART_MQTT_Check_net+0x12a>
				&& (esp_rx_buffer[6] == 0xCC)) {
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <UART_MQTT_Check_net+0x130>)
 80015b2:	799b      	ldrb	r3, [r3, #6]
 80015b4:	2bcc      	cmp	r3, #204	; 0xcc
 80015b6:	d106      	bne.n	80015c6 <UART_MQTT_Check_net+0x12a>
			MQTT_flag = 1;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <UART_MQTT_Check_net+0x140>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
			printf("MQTT == OK\r\n");
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <UART_MQTT_Check_net+0x148>)
 80015c0:	f002 fc90 	bl	8003ee4 <puts>
		}
	}
}
 80015c4:	e7ff      	b.n	80015c6 <UART_MQTT_Check_net+0x12a>
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000200 	.word	0x20000200
 80015d0:	20000364 	.word	0x20000364
 80015d4:	08007664 	.word	0x08007664
 80015d8:	08007674 	.word	0x08007674
 80015dc:	20000365 	.word	0x20000365
 80015e0:	08007684 	.word	0x08007684
 80015e4:	08007690 	.word	0x08007690

080015e8 <UART_MQTT_IDLE_Callback_setting>:

/*---------Сервисная функция. HAL_UART_IDLE_Callback. Сработка флага IDLE---------*/
/// Сервисная функция. HAL_UART_IDLE_Callback. Сработка флага IDLE
/// UART_MQTT_Receive_Callback() - функция. Которую мы прописываем в main.c
/// В ней будем парсить входящие данные.
void UART_MQTT_IDLE_Callback_setting(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(&huart_used, UART_IT_IDLE);
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0210 	bic.w	r2, r2, #16
 80015fc:	60da      	str	r2, [r3, #12]
	esp_rx_buffer_len = esp_rx_buffer_size - huart_used.RxXferCount;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 8001600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001602:	b29b      	uxth	r3, r3
 8001604:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <UART_MQTT_IDLE_Callback_setting+0x70>)
 800160c:	801a      	strh	r2, [r3, #0]

	UART_MQTT_Receive_Callback();
 800160e:	f7ff fbfb 	bl	8000e08 <UART_MQTT_Receive_Callback>

	HAL_UART_AbortReceive_IT(&huart_used);
 8001612:	4810      	ldr	r0, [pc, #64]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 8001614:	f001 fa52 	bl	8002abc <HAL_UART_AbortReceive_IT>
	__HAL_UART_CLEAR_IDLEFLAG(&huart_used);
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&huart_used, UART_IT_IDLE);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0210 	orr.w	r2, r2, #16
 800163c:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart_used, esp_rx_buffer, esp_rx_buffer_size);
 800163e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001642:	4906      	ldr	r1, [pc, #24]	; (800165c <UART_MQTT_IDLE_Callback_setting+0x74>)
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <UART_MQTT_IDLE_Callback_setting+0x6c>)
 8001646:	f001 f9e4 	bl	8002a12 <HAL_UART_Receive_IT>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000031c 	.word	0x2000031c
 8001658:	20000362 	.word	0x20000362
 800165c:	20000200 	.word	0x20000200

08001660 <UART_MQTT_RxCpltCallback_setting>:
/*---------Сервисная функция. HAL_UART_IDLE_Callback. Сработка флага IDLE---------*/

/*---------Сервисная функция. RxCpltCallback. Переполнение rx буфера---------*/
/// Сервисная функция. RxCpltCallback. Переполнение rx буфера
void UART_MQTT_RxCpltCallback_setting(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(&huart_used, UART_IT_IDLE);
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <UART_MQTT_RxCpltCallback_setting+0x58>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <UART_MQTT_RxCpltCallback_setting+0x58>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0210 	bic.w	r2, r2, #16
 8001674:	60da      	str	r2, [r3, #12]
	//printf("rx_buffer is overflow\n\r");
	HAL_UART_AbortReceive_IT(&huart_used);
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <UART_MQTT_RxCpltCallback_setting+0x58>)
 8001678:	f001 fa20 	bl	8002abc <HAL_UART_AbortReceive_IT>
	__HAL_UART_CLEAR_IDLEFLAG(&huart_used);
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <UART_MQTT_RxCpltCallback_setting+0x58>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <UART_MQTT_RxCpltCallback_setting+0x58>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&huart_used, UART_IT_IDLE);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <UART_MQTT_RxCpltCallback_setting+0x58>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <UART_MQTT_RxCpltCallback_setting+0x58>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0210 	orr.w	r2, r2, #16
 80016a0:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart_used, esp_rx_buffer, esp_rx_buffer_size);
 80016a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a6:	4905      	ldr	r1, [pc, #20]	; (80016bc <UART_MQTT_RxCpltCallback_setting+0x5c>)
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <UART_MQTT_RxCpltCallback_setting+0x58>)
 80016aa:	f001 f9b2 	bl	8002a12 <HAL_UART_Receive_IT>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000031c 	.word	0x2000031c
 80016bc:	20000200 	.word	0x20000200

080016c0 <UART_MQTT_Send_data_bool>:
/*----------Отправка bool в массив-----------------*/
/// Отправка bool в tx_buffer(принимающему устройству)
/// \param VARIABLE_ID - номер переменной(должен совпадать на передающем и принимающем устройстве)
/// \param data - переменная, которую следует отправить
/// \param *tx_buffer - буфер, который используется для отправки
void UART_MQTT_Send_data_bool(uint8_t VARIABLE_ID, bool data, uint8_t *tx_buffer) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	603a      	str	r2, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	460b      	mov	r3, r1
 80016ce:	71bb      	strb	r3, [r7, #6]
	tx_buffer[0] = 0xFF;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	22ff      	movs	r2, #255	; 0xff
 80016d4:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = VARIABLE_ID;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = 0x01;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	3302      	adds	r3, #2
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
	tx_buffer[3] = 0x0;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3303      	adds	r3, #3
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
	tx_buffer[4] = 0x0;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
	tx_buffer[5] = 0x0;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3305      	adds	r3, #5
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	tx_buffer[6] = data;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3306      	adds	r3, #6
 8001702:	79ba      	ldrb	r2, [r7, #6]
 8001704:	701a      	strb	r2, [r3, #0]
	uint16_t CRC_tx_buffer = (~(tx_buffer[1] + tx_buffer[2] + tx_buffer[3] + tx_buffer[4] + tx_buffer[5] + tx_buffer[6])) + 1;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b29a      	uxth	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3302      	adds	r3, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4413      	add	r3, r2
 8001718:	b29a      	uxth	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	3303      	adds	r3, #3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b29a      	uxth	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3304      	adds	r3, #4
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4413      	add	r3, r2
 8001730:	b29a      	uxth	r2, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3305      	adds	r3, #5
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b29a      	uxth	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	3306      	adds	r3, #6
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	4413      	add	r3, r2
 8001748:	b29b      	uxth	r3, r3
 800174a:	425b      	negs	r3, r3
 800174c:	81fb      	strh	r3, [r7, #14]
	tx_buffer[7] = CRC_tx_buffer >> 8;
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	3307      	adds	r3, #7
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
	tx_buffer[8] = CRC_tx_buffer;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3308      	adds	r3, #8
 8001760:	89fa      	ldrh	r2, [r7, #14]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

	if (huart_used.gState != HAL_UART_STATE_BUSY_TX) {
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <UART_MQTT_Send_data_bool+0xc4>)
 8001768:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b21      	cmp	r3, #33	; 0x21
 8001770:	d004      	beq.n	800177c <UART_MQTT_Send_data_bool+0xbc>
		HAL_UART_Transmit_IT(&huart_used, tx_buffer, 9);
 8001772:	2209      	movs	r2, #9
 8001774:	6839      	ldr	r1, [r7, #0]
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <UART_MQTT_Send_data_bool+0xc4>)
 8001778:	f001 f907 	bl	800298a <HAL_UART_Transmit_IT>
	}
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000031c 	.word	0x2000031c

08001788 <UART_MQTT_Send_data_float>:
/*----------Отправка float в массив-----------------*/
/// Отправка float в tx_buffer(принимающему устройству)
/// \param VARIABLE_ID - номер переменной(должен совпадать на передающем и принимающем устройстве)
/// \param data - переменная, которую следует отправить
/// \param *tx_buffer - буфер, который используется для отправки
void UART_MQTT_Send_data_float(uint8_t VARIABLE_ID, float data, uint8_t *tx_buffer) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	73fb      	strb	r3, [r7, #15]
	union {
		uint32_t res;
		float f;
	} data_conv;
	data_conv.f = data;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	613b      	str	r3, [r7, #16]
	tx_buffer[0] = 0xFF;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	22ff      	movs	r2, #255	; 0xff
 800179e:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = VARIABLE_ID;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3301      	adds	r3, #1
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = 0x08;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3302      	adds	r3, #2
 80017ac:	2208      	movs	r2, #8
 80017ae:	701a      	strb	r2, [r3, #0]
	tx_buffer[3] = data_conv.res >> 24;
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	0e1a      	lsrs	r2, r3, #24
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3303      	adds	r3, #3
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
	tx_buffer[4] = data_conv.res >> 16;
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	0c1a      	lsrs	r2, r3, #16
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3304      	adds	r3, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
	tx_buffer[5] = data_conv.res >> 8;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	0a1a      	lsrs	r2, r3, #8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3305      	adds	r3, #5
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
	tx_buffer[6] = data_conv.res;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3306      	adds	r3, #6
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
	uint16_t CRC_tx_buffer = (~(tx_buffer[1] + tx_buffer[2] + tx_buffer[3] + tx_buffer[4] + tx_buffer[5] + tx_buffer[6])) + 1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3302      	adds	r3, #2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3303      	adds	r3, #3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4413      	add	r3, r2
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3305      	adds	r3, #5
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3306      	adds	r3, #6
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4413      	add	r3, r2
 8001820:	b29b      	uxth	r3, r3
 8001822:	425b      	negs	r3, r3
 8001824:	82fb      	strh	r3, [r7, #22]
	tx_buffer[7] = CRC_tx_buffer >> 8;
 8001826:	8afb      	ldrh	r3, [r7, #22]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	b29a      	uxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3307      	adds	r3, #7
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
	tx_buffer[8] = CRC_tx_buffer;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3308      	adds	r3, #8
 8001838:	8afa      	ldrh	r2, [r7, #22]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

	if (huart_used.gState != HAL_UART_STATE_BUSY_TX) {
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <UART_MQTT_Send_data_float+0xd4>)
 8001840:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b21      	cmp	r3, #33	; 0x21
 8001848:	d004      	beq.n	8001854 <UART_MQTT_Send_data_float+0xcc>
		HAL_UART_Transmit_IT(&huart_used, tx_buffer, 9);
 800184a:	2209      	movs	r2, #9
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4803      	ldr	r0, [pc, #12]	; (800185c <UART_MQTT_Send_data_float+0xd4>)
 8001850:	f001 f89b 	bl	800298a <HAL_UART_Transmit_IT>
	}
}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000031c 	.word	0x2000031c

08001860 <UART_MQTT_Receive_data_bool>:
/*----------Отправка float в массив-----------------*/

/*----------Получить данные bool из массива-----------------*/
/// Получить bool из rx_buffer(от передающего устройства)
/// \param *rx_buffer - буфер, используемый для приема данных
bool UART_MQTT_Receive_data_bool(uint8_t *rx_buffer) {
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	bool data = 0x00000000;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
	data = rx_buffer[6];
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3306      	adds	r3, #6
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf14      	ite	ne
 8001876:	2301      	movne	r3, #1
 8001878:	2300      	moveq	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
	return data;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <UART_MQTT_Receive_data_float>:
/*----------Получить данные uint32_t из массива-----------------*/

/*----------Получить данные float из массива-----------------*/
/// Получить float из rx_buffer(от передающего устройства)
/// \param *rx_buffer - буфер, используемый для приема данных
float UART_MQTT_Receive_data_float(uint8_t *rx_buffer) {
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	union {
		uint32_t res;
		float f;
	} data_conv;
	uint32_t data = 0x00000000;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
	data_conv.res = ((data | rx_buffer[3]) << 24) | ((data | rx_buffer[4]) << 16) | ((data | rx_buffer[5]) << 8) | ((data | rx_buffer[6]));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3303      	adds	r3, #3
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	061a      	lsls	r2, r3, #24
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3305      	adds	r3, #5
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	430b      	orrs	r3, r1
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3306      	adds	r3, #6
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
	float VARIABLE_float = data_conv.f;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	613b      	str	r3, [r7, #16]
	return (VARIABLE_float);
 80018d6:	693b      	ldr	r3, [r7, #16]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <UART_MQTT_Checksumm_validation>:
/*----------Получить данные float из массива-----------------*/

/*----------Проверка контрольной суммы входящего сообщения-----------------*/
/// Проверка контрольной суммы входящего сообщения
/// \param *rx_buffer - буфер, используемый для приема данных
bool UART_MQTT_Checksumm_validation(uint8_t *rx_buffer) {
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
	bool result;
	uint16_t CRC_rx_buffer = 0x0000;
 80018ea:	2300      	movs	r3, #0
 80018ec:	81bb      	strh	r3, [r7, #12]
	uint16_t CRC_check = 0x0000;
 80018ee:	2300      	movs	r3, #0
 80018f0:	817b      	strh	r3, [r7, #10]
	CRC_rx_buffer = (~(rx_buffer[1] + rx_buffer[2] + rx_buffer[3] + rx_buffer[4] + rx_buffer[5] + rx_buffer[6])) + 1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3301      	adds	r3, #1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3302      	adds	r3, #2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	4413      	add	r3, r2
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3303      	adds	r3, #3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3304      	adds	r3, #4
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4413      	add	r3, r2
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3305      	adds	r3, #5
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3306      	adds	r3, #6
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	b29b      	uxth	r3, r3
 8001936:	425b      	negs	r3, r3
 8001938:	81bb      	strh	r3, [r7, #12]
	CRC_check = (CRC_check | rx_buffer[7] << 8) | (CRC_check | rx_buffer[8]);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3307      	adds	r3, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21a      	sxth	r2, r3
 8001944:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001948:	4313      	orrs	r3, r2
 800194a:	b21a      	sxth	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3308      	adds	r3, #8
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b21b      	sxth	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	b21b      	sxth	r3, r3
 8001958:	817b      	strh	r3, [r7, #10]
	//CRC_rx_buffer == CRC_check ? result = true : result = false;
	if (CRC_rx_buffer == CRC_check) {
 800195a:	89ba      	ldrh	r2, [r7, #12]
 800195c:	897b      	ldrh	r3, [r7, #10]
 800195e:	429a      	cmp	r2, r3
 8001960:	d102      	bne.n	8001968 <UART_MQTT_Checksumm_validation+0x86>
		result = true;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e001      	b.n	800196c <UART_MQTT_Checksumm_validation+0x8a>
	} else {
		result = false;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001978:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800197a:	e003      	b.n	8001984 <LoopCopyDataInit>

0800197c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800197e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001980:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001982:	3104      	adds	r1, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001984:	480a      	ldr	r0, [pc, #40]	; (80019b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001988:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800198a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800198c:	d3f6      	bcc.n	800197c <CopyDataInit>
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001990:	e002      	b.n	8001998 <LoopFillZerobss>

08001992 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001994:	f842 3b04 	str.w	r3, [r2], #4

08001998 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800199a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800199c:	d3f9      	bcc.n	8001992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800199e:	f7ff fd4b 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a2:	f001 fbcf 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a6:	f7ff faa3 	bl	8000ef0 <main>
  bx lr
 80019aa:	4770      	bx	lr
  ldr r3, =_sidata
 80019ac:	080079f0 	.word	0x080079f0
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80019b8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80019bc:	20000370 	.word	0x20000370

080019c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_2_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_Init+0x28>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_Init+0x28>)
 80019ce:	f043 0310 	orr.w	r3, r3, #16
 80019d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d4:	2003      	movs	r0, #3
 80019d6:	f000 f945 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 f808 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e0:	f7ff fbee 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x54>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_InitTick+0x58>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f95d 	bl	8001cce <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00e      	b.n	8001a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d80a      	bhi.n	8001a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 f925 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_InitTick+0x5c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000004 	.word	0x20000004
 8001a48:	2000000c 	.word	0x2000000c
 8001a4c:	20000008 	.word	0x20000008

08001a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_IncTick+0x1c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_IncTick+0x20>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <HAL_IncTick+0x20>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	20000368 	.word	0x20000368

08001a74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_GetTick+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000368 	.word	0x20000368

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff fff0 	bl	8001a74 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d005      	beq.n	8001aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_Delay+0x40>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aae:	bf00      	nop
 8001ab0:	f7ff ffe0 	bl	8001a74 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8f7      	bhi.n	8001ab0 <HAL_Delay+0x28>
  {
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000000c 	.word	0x2000000c

08001acc <__NVIC_SetPriorityGrouping>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <__NVIC_EnableIRQ+0x34>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Config>:
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff90 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff2d 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff42 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff35 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d005      	beq.n	8001d0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e051      	b.n	8001dae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 020e 	bic.w	r2, r2, #14
 8001d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <HAL_DMA_Abort_IT+0xd0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d029      	beq.n	8001d88 <HAL_DMA_Abort_IT+0xa0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <HAL_DMA_Abort_IT+0xd4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d022      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x9c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_DMA_Abort_IT+0xd8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d01a      	beq.n	8001d7e <HAL_DMA_Abort_IT+0x96>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <HAL_DMA_Abort_IT+0xdc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d012      	beq.n	8001d78 <HAL_DMA_Abort_IT+0x90>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <HAL_DMA_Abort_IT+0xe0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00a      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x8a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_DMA_Abort_IT+0xe4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d102      	bne.n	8001d6c <HAL_DMA_Abort_IT+0x84>
 8001d66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d6a:	e00e      	b.n	8001d8a <HAL_DMA_Abort_IT+0xa2>
 8001d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d70:	e00b      	b.n	8001d8a <HAL_DMA_Abort_IT+0xa2>
 8001d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d76:	e008      	b.n	8001d8a <HAL_DMA_Abort_IT+0xa2>
 8001d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7c:	e005      	b.n	8001d8a <HAL_DMA_Abort_IT+0xa2>
 8001d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d82:	e002      	b.n	8001d8a <HAL_DMA_Abort_IT+0xa2>
 8001d84:	2310      	movs	r3, #16
 8001d86:	e000      	b.n	8001d8a <HAL_DMA_Abort_IT+0xa2>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_DMA_Abort_IT+0xe8>)
 8001d8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
    } 
  }
  return status;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40020008 	.word	0x40020008
 8001dbc:	4002001c 	.word	0x4002001c
 8001dc0:	40020030 	.word	0x40020030
 8001dc4:	40020044 	.word	0x40020044
 8001dc8:	40020058 	.word	0x40020058
 8001dcc:	4002006c 	.word	0x4002006c
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e127      	b.n	8002038 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de8:	2201      	movs	r2, #1
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8116 	bne.w	8002032 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d034      	beq.n	8001e78 <HAL_GPIO_Init+0xa4>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d80d      	bhi.n	8001e2e <HAL_GPIO_Init+0x5a>
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d02b      	beq.n	8001e6e <HAL_GPIO_Init+0x9a>
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d804      	bhi.n	8001e24 <HAL_GPIO_Init+0x50>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d031      	beq.n	8001e82 <HAL_GPIO_Init+0xae>
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d01c      	beq.n	8001e5c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e22:	e048      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d043      	beq.n	8001eb0 <HAL_GPIO_Init+0xdc>
 8001e28:	2b11      	cmp	r3, #17
 8001e2a:	d01b      	beq.n	8001e64 <HAL_GPIO_Init+0x90>
          break;
 8001e2c:	e043      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e2e:	4a89      	ldr	r2, [pc, #548]	; (8002054 <HAL_GPIO_Init+0x280>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d026      	beq.n	8001e82 <HAL_GPIO_Init+0xae>
 8001e34:	4a87      	ldr	r2, [pc, #540]	; (8002054 <HAL_GPIO_Init+0x280>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d806      	bhi.n	8001e48 <HAL_GPIO_Init+0x74>
 8001e3a:	4a87      	ldr	r2, [pc, #540]	; (8002058 <HAL_GPIO_Init+0x284>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d020      	beq.n	8001e82 <HAL_GPIO_Init+0xae>
 8001e40:	4a86      	ldr	r2, [pc, #536]	; (800205c <HAL_GPIO_Init+0x288>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01d      	beq.n	8001e82 <HAL_GPIO_Init+0xae>
          break;
 8001e46:	e036      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e48:	4a85      	ldr	r2, [pc, #532]	; (8002060 <HAL_GPIO_Init+0x28c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d019      	beq.n	8001e82 <HAL_GPIO_Init+0xae>
 8001e4e:	4a85      	ldr	r2, [pc, #532]	; (8002064 <HAL_GPIO_Init+0x290>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d016      	beq.n	8001e82 <HAL_GPIO_Init+0xae>
 8001e54:	4a84      	ldr	r2, [pc, #528]	; (8002068 <HAL_GPIO_Init+0x294>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0xae>
          break;
 8001e5a:	e02c      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e028      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e023      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	3308      	adds	r3, #8
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e01e      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e019      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e012      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	611a      	str	r2, [r3, #16]
          break;
 8001ea2:	e008      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	615a      	str	r2, [r3, #20]
          break;
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2bff      	cmp	r3, #255	; 0xff
 8001eba:	d801      	bhi.n	8001ec0 <HAL_GPIO_Init+0xec>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	e001      	b.n	8001ec4 <HAL_GPIO_Init+0xf0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2bff      	cmp	r3, #255	; 0xff
 8001eca:	d802      	bhi.n	8001ed2 <HAL_GPIO_Init+0xfe>
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x104>
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3b08      	subs	r3, #8
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	210f      	movs	r1, #15
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	401a      	ands	r2, r3
 8001eea:	6a39      	ldr	r1, [r7, #32]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8096 	beq.w	8002032 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f06:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_GPIO_Init+0x298>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_GPIO_Init+0x298>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6193      	str	r3, [r2, #24]
 8001f12:	4b56      	ldr	r3, [pc, #344]	; (800206c <HAL_GPIO_Init+0x298>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f1e:	4a54      	ldr	r2, [pc, #336]	; (8002070 <HAL_GPIO_Init+0x29c>)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <HAL_GPIO_Init+0x2a0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x19e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_GPIO_Init+0x2a4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x19a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a49      	ldr	r2, [pc, #292]	; (800207c <HAL_GPIO_Init+0x2a8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x196>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a48      	ldr	r2, [pc, #288]	; (8002080 <HAL_GPIO_Init+0x2ac>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x192>
 8001f62:	2303      	movs	r3, #3
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x1a0>
 8001f66:	2304      	movs	r3, #4
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x1a0>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x1a0>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x1a0>
 8001f72:	2300      	movs	r3, #0
 8001f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f84:	493a      	ldr	r1, [pc, #232]	; (8002070 <HAL_GPIO_Init+0x29c>)
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f9e:	4b39      	ldr	r3, [pc, #228]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4938      	ldr	r1, [pc, #224]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b35      	ldr	r3, [pc, #212]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	4933      	ldr	r1, [pc, #204]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	492e      	ldr	r1, [pc, #184]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
 8001fd2:	e006      	b.n	8001fe2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	4929      	ldr	r1, [pc, #164]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	4924      	ldr	r1, [pc, #144]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
 8001ffa:	e006      	b.n	800200a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	43db      	mvns	r3, r3
 8002004:	491f      	ldr	r1, [pc, #124]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8002006:	4013      	ands	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	491a      	ldr	r1, [pc, #104]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	60cb      	str	r3, [r1, #12]
 8002022:	e006      	b.n	8002032 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	43db      	mvns	r3, r3
 800202c:	4915      	ldr	r1, [pc, #84]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 800202e:	4013      	ands	r3, r2
 8002030:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	3301      	adds	r3, #1
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	f47f aed0 	bne.w	8001de8 <HAL_GPIO_Init+0x14>
  }
}
 8002048:	bf00      	nop
 800204a:	372c      	adds	r7, #44	; 0x2c
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	10210000 	.word	0x10210000
 8002058:	10110000 	.word	0x10110000
 800205c:	10120000 	.word	0x10120000
 8002060:	10310000 	.word	0x10310000
 8002064:	10320000 	.word	0x10320000
 8002068:	10220000 	.word	0x10220000
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	40010800 	.word	0x40010800
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40011000 	.word	0x40011000
 8002080:	40011400 	.word	0x40011400
 8002084:	40010400 	.word	0x40010400

08002088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
 8002094:	4613      	mov	r3, r2
 8002096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002098:	787b      	ldrb	r3, [r7, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a4:	e003      	b.n	80020ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a6:	887b      	ldrh	r3, [r7, #2]
 80020a8:	041a      	lsls	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e26c      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8087 	beq.w	80021e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d8:	4b92      	ldr	r3, [pc, #584]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00c      	beq.n	80020fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e4:	4b8f      	ldr	r3, [pc, #572]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d112      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
 80020f0:	4b8c      	ldr	r3, [pc, #560]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d10b      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fe:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d06c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x12c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d168      	bne.n	80021e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e246      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x76>
 8002120:	4b80      	ldr	r3, [pc, #512]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a7f      	ldr	r2, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e02e      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7a      	ldr	r2, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b78      	ldr	r3, [pc, #480]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a77      	ldr	r2, [pc, #476]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0xbc>
 800215a:	4b72      	ldr	r3, [pc, #456]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a71      	ldr	r2, [pc, #452]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002174:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6a      	ldr	r2, [pc, #424]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a67      	ldr	r2, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fc6e 	bl	8001a74 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fc6a 	bl	8001a74 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1fa      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b5d      	ldr	r3, [pc, #372]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xe4>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fc5a 	bl	8001a74 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff fc56 	bl	8001a74 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1e6      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x10c>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f2:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021fe:	4b49      	ldr	r3, [pc, #292]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1ba      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4939      	ldr	r1, [pc, #228]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_OscConfig+0x270>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fc0f 	bl	8001a74 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7ff fc0b 	bl	8001a74 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e19b      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4927      	ldr	r1, [pc, #156]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_RCC_OscConfig+0x270>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fbee 	bl	8001a74 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229c:	f7ff fbea 	bl	8001a74 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e17a      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03a      	beq.n	800233c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d019      	beq.n	8002302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_RCC_OscConfig+0x274>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7ff fbce 	bl	8001a74 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff fbca 	bl	8001a74 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e15a      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 fada 	bl	80028b4 <RCC_Delay>
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_RCC_OscConfig+0x274>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7ff fbb4 	bl	8001a74 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230e:	e00f      	b.n	8002330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff fbb0 	bl	8001a74 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d908      	bls.n	8002330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e140      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	42420000 	.word	0x42420000
 800232c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	4b9e      	ldr	r3, [pc, #632]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e9      	bne.n	8002310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a6 	beq.w	8002496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b97      	ldr	r3, [pc, #604]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b94      	ldr	r3, [pc, #592]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a93      	ldr	r2, [pc, #588]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b91      	ldr	r3, [pc, #580]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b8e      	ldr	r3, [pc, #568]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a8a      	ldr	r2, [pc, #552]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff fb71 	bl	8001a74 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7ff fb6d 	bl	8001a74 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0fd      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x312>
 80023bc:	4b7b      	ldr	r3, [pc, #492]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a7a      	ldr	r2, [pc, #488]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x334>
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b73      	ldr	r3, [pc, #460]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a72      	ldr	r2, [pc, #456]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x356>
 80023f4:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a6c      	ldr	r2, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a69      	ldr	r2, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 800240e:	4b67      	ldr	r3, [pc, #412]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a66      	ldr	r2, [pc, #408]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b64      	ldr	r3, [pc, #400]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a63      	ldr	r2, [pc, #396]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7ff fb21 	bl	8001a74 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7ff fb1d 	bl	8001a74 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0ab      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b57      	ldr	r3, [pc, #348]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x37e>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff fb0b 	bl	8001a74 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff fb07 	bl	8001a74 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e095      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b48      	ldr	r3, [pc, #288]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a47      	ldr	r2, [pc, #284]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8081 	beq.w	80025a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d061      	beq.n	8002570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d146      	bne.n	8002542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7ff fadb 	bl	8001a74 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7ff fad7 	bl	8001a74 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e067      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	492d      	ldr	r1, [pc, #180]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a19      	ldr	r1, [r3, #32]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	430b      	orrs	r3, r1
 800250e:	4927      	ldr	r1, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7ff faab 	bl	8001a74 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7ff faa7 	bl	8001a74 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e037      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x46a>
 8002540:	e02f      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fa94 	bl	8001a74 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7ff fa90 	bl	8001a74 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e020      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x498>
 800256e:	e018      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e013      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	429a      	cmp	r2, r3
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
 80025b4:	42420060 	.word	0x42420060

080025b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d0      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d910      	bls.n	80025fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4965      	ldr	r1, [pc, #404]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0b8      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800261e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	494d      	ldr	r1, [pc, #308]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d040      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d115      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07f      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e073      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06b      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4936      	ldr	r1, [pc, #216]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a8:	f7ff f9e4 	bl	8001a74 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7ff f9e0 	bl	8001a74 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e053      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d210      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4922      	ldr	r1, [pc, #136]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e032      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4916      	ldr	r1, [pc, #88]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	490e      	ldr	r1, [pc, #56]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002746:	f000 f821 	bl	800278c <HAL_RCC_GetSysClockFreq>
 800274a:	4601      	mov	r1, r0
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	fa21 f303 	lsr.w	r3, r1, r3
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1cc>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1d0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff f942 	bl	80019f0 <HAL_InitTick>

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40022000 	.word	0x40022000
 800277c:	40021000 	.word	0x40021000
 8002780:	080076b0 	.word	0x080076b0
 8002784:	20000004 	.word	0x20000004
 8002788:	20000008 	.word	0x20000008

0800278c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	b490      	push	{r4, r7}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002792:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002794:	1d3c      	adds	r4, r7, #4
 8002796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb4>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x40>
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x46>
 80027ca:	e02d      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ce:	623b      	str	r3, [r7, #32]
      break;
 80027d0:	e02d      	b.n	800282e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	0c9b      	lsrs	r3, r3, #18
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027de:	4413      	add	r3, r2
 80027e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c5b      	lsrs	r3, r3, #17
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027fe:	4413      	add	r3, r2
 8002800:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002804:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800280a:	fb02 f203 	mul.w	r2, r2, r3
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e004      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_RCC_GetSysClockFreq+0xc0>)
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	623b      	str	r3, [r7, #32]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800282a:	623b      	str	r3, [r7, #32]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	6a3b      	ldr	r3, [r7, #32]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3728      	adds	r7, #40	; 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc90      	pop	{r4, r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	0800769c 	.word	0x0800769c
 8002840:	080076ac 	.word	0x080076ac
 8002844:	40021000 	.word	0x40021000
 8002848:	007a1200 	.word	0x007a1200
 800284c:	003d0900 	.word	0x003d0900

08002850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b02      	ldr	r3, [pc, #8]	; (8002860 <HAL_RCC_GetHCLKFreq+0x10>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000004 	.word	0x20000004

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002868:	f7ff fff2 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 800286c:	4601      	mov	r1, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4a03      	ldr	r2, [pc, #12]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	080076c0 	.word	0x080076c0

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002890:	f7ff ffde 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002894:	4601      	mov	r1, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0adb      	lsrs	r3, r3, #11
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	080076c0 	.word	0x080076c0

080028b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <RCC_Delay+0x34>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <RCC_Delay+0x38>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0a5b      	lsrs	r3, r3, #9
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d0:	bf00      	nop
  }
  while (Delay --);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	60fa      	str	r2, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <RCC_Delay+0x1c>
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000004 	.word	0x20000004
 80028ec:	10624dd3 	.word	0x10624dd3

080028f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e03f      	b.n	8002982 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe fc84 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fb71 	bl	800301c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	4613      	mov	r3, r2
 8002996:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d130      	bne.n	8002a06 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_UART_Transmit_IT+0x26>
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e029      	b.n	8002a08 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Transmit_IT+0x38>
 80029be:	2302      	movs	r3, #2
 80029c0:	e022      	b.n	8002a08 <HAL_UART_Transmit_IT+0x7e>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2221      	movs	r2, #33	; 0x21
 80029e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a00:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d140      	bne.n	8002aae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_UART_Receive_IT+0x26>
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e039      	b.n	8002ab0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Receive_IT+0x38>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e032      	b.n	8002ab0 <HAL_UART_Receive_IT+0x9e>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2222      	movs	r2, #34	; 0x22
 8002a6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a88:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0220 	orr.w	r2, r2, #32
 8002aa8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ad2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02a      	beq.n	8002b48 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b00:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d013      	beq.n	8002b32 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	4a16      	ldr	r2, [pc, #88]	; (8002b68 <HAL_UART_AbortReceive_IT+0xac>)
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f8e6 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01c      	beq.n	8002b5c <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4798      	blx	r3
 8002b30:	e014      	b.n	8002b5c <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f935 	bl	8002db0 <HAL_UART_AbortReceiveCpltCallback>
 8002b46:	e009      	b.n	8002b5c <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f92a 	bl	8002db0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	08002e25 	.word	0x08002e25

08002b6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10d      	bne.n	8002bbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_UART_IRQHandler+0x52>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9b0 	bl	8002f1c <UART_Receive_IT>
      return;
 8002bbc:	e0e0      	b.n	8002d80 <HAL_UART_IRQHandler+0x214>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80b1 	beq.w	8002d28 <HAL_UART_IRQHandler+0x1bc>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <HAL_UART_IRQHandler+0x70>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80a6 	beq.w	8002d28 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_UART_IRQHandler+0x90>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_UART_IRQHandler+0xb0>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	f043 0202 	orr.w	r2, r3, #2
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_UART_IRQHandler+0xd0>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00f      	beq.n	8002c66 <HAL_UART_IRQHandler+0xfa>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <HAL_UART_IRQHandler+0xee>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	f043 0208 	orr.w	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8087 	beq.w	8002d7e <HAL_UART_IRQHandler+0x212>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_UART_IRQHandler+0x11e>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f949 	bl	8002f1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x146>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d031      	beq.n	8002d16 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f885 	bl	8002dc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d023      	beq.n	8002d0e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d013      	beq.n	8002d06 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <HAL_UART_IRQHandler+0x21c>)
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fffc 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d00:	4610      	mov	r0, r2
 8002d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	e00e      	b.n	8002d24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f849 	bl	8002d9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0c:	e00a      	b.n	8002d24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f845 	bl	8002d9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e006      	b.n	8002d24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f841 	bl	8002d9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d22:	e02c      	b.n	8002d7e <HAL_UART_IRQHandler+0x212>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	bf00      	nop
    return;
 8002d26:	e02a      	b.n	8002d7e <HAL_UART_IRQHandler+0x212>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_UART_IRQHandler+0x1d8>
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_UART_IRQHandler+0x1d8>
  {
    UART_Transmit_IT(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f886 	bl	8002e4e <UART_Transmit_IT>
    return;
 8002d42:	e01d      	b.n	8002d80 <HAL_UART_IRQHandler+0x214>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_UART_IRQHandler+0x1f4>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8c7 	bl	8002eec <UART_EndTransmit_IT>
    return;
 8002d5e:	e00f      	b.n	8002d80 <HAL_UART_IRQHandler+0x214>
  }
  /* UART_IDLE_Callback —------------------------------------------*/
  if (((isrflags & USART_SR_IDLE) != RESET) && ((cr1its & USART_CR1_IDLEIE) != RESET))
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_UART_IRQHandler+0x214>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_UART_IRQHandler+0x214>
  {
  HAL_UART_IDLE_Callback(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fe f89b 	bl	8000eb0 <HAL_UART_IDLE_Callback>
  return;
 8002d7a:	bf00      	nop
 8002d7c:	e000      	b.n	8002d80 <HAL_UART_IRQHandler+0x214>
    return;
 8002d7e:	bf00      	nop
  }
}
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	08002dfd 	.word	0x08002dfd

08002d8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002dd8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff ffc1 	bl	8002d9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ffb5 	bl	8002db0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b21      	cmp	r3, #33	; 0x21
 8002e60:	d13e      	bne.n	8002ee0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6a:	d114      	bne.n	8002e96 <UART_Transmit_IT+0x48>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d110      	bne.n	8002e96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	1c9a      	adds	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	621a      	str	r2, [r3, #32]
 8002e94:	e008      	b.n	8002ea8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	1c59      	adds	r1, r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6211      	str	r1, [r2, #32]
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10f      	bne.n	8002edc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff3d 	bl	8002d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b22      	cmp	r3, #34	; 0x22
 8002f2e:	d170      	bne.n	8003012 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d117      	bne.n	8002f6a <UART_Receive_IT+0x4e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d113      	bne.n	8002f6a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
 8002f68:	e026      	b.n	8002fb8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d007      	beq.n	8002f8e <UART_Receive_IT+0x72>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <UART_Receive_IT+0x80>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e008      	b.n	8002fae <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d120      	bne.n	800300e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0220 	bic.w	r2, r2, #32
 8002fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7fd ff63 	bl	8000ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e002      	b.n	8003014 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003056:	f023 030c 	bic.w	r3, r3, #12
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	430b      	orrs	r3, r1
 8003062:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <UART_SetConfig+0x114>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d103      	bne.n	800308c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003084:	f7ff fc02 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	e002      	b.n	8003092 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7ff fbea 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 8003090:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009a      	lsls	r2, r3, #2
 800309c:	441a      	add	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <UART_SetConfig+0x118>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	0119      	lsls	r1, r3, #4
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	009a      	lsls	r2, r3, #2
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <UART_SetConfig+0x118>)
 80030ca:	fba3 0302 	umull	r0, r3, r3, r2
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2064      	movs	r0, #100	; 0x64
 80030d2:	fb00 f303 	mul.w	r3, r0, r3
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	3332      	adds	r3, #50	; 0x32
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <UART_SetConfig+0x118>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e8:	4419      	add	r1, r3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <UART_SetConfig+0x118>)
 8003102:	fba3 0302 	umull	r0, r3, r3, r2
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2064      	movs	r0, #100	; 0x64
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	3332      	adds	r3, #50	; 0x32
 8003114:	4a07      	ldr	r2, [pc, #28]	; (8003134 <UART_SetConfig+0x118>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	440a      	add	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40013800 	.word	0x40013800
 8003134:	51eb851f 	.word	0x51eb851f

08003138 <__errno>:
 8003138:	4b01      	ldr	r3, [pc, #4]	; (8003140 <__errno+0x8>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000010 	.word	0x20000010

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	2500      	movs	r5, #0
 8003148:	4e0c      	ldr	r6, [pc, #48]	; (800317c <__libc_init_array+0x38>)
 800314a:	4c0d      	ldr	r4, [pc, #52]	; (8003180 <__libc_init_array+0x3c>)
 800314c:	1ba4      	subs	r4, r4, r6
 800314e:	10a4      	asrs	r4, r4, #2
 8003150:	42a5      	cmp	r5, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	f004 fa62 	bl	800761c <_init>
 8003158:	2500      	movs	r5, #0
 800315a:	4e0a      	ldr	r6, [pc, #40]	; (8003184 <__libc_init_array+0x40>)
 800315c:	4c0a      	ldr	r4, [pc, #40]	; (8003188 <__libc_init_array+0x44>)
 800315e:	1ba4      	subs	r4, r4, r6
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	42a5      	cmp	r5, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800316c:	4798      	blx	r3
 800316e:	3501      	adds	r5, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003176:	4798      	blx	r3
 8003178:	3501      	adds	r5, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	080079e8 	.word	0x080079e8
 8003180:	080079e8 	.word	0x080079e8
 8003184:	080079e8 	.word	0x080079e8
 8003188:	080079ec 	.word	0x080079ec

0800318c <memset>:
 800318c:	4603      	mov	r3, r0
 800318e:	4402      	add	r2, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <__cvt>:
 800319c:	2b00      	cmp	r3, #0
 800319e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a2:	461e      	mov	r6, r3
 80031a4:	bfbb      	ittet	lt
 80031a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80031aa:	461e      	movlt	r6, r3
 80031ac:	2300      	movge	r3, #0
 80031ae:	232d      	movlt	r3, #45	; 0x2d
 80031b0:	b088      	sub	sp, #32
 80031b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80031b4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80031b8:	f027 0720 	bic.w	r7, r7, #32
 80031bc:	2f46      	cmp	r7, #70	; 0x46
 80031be:	4614      	mov	r4, r2
 80031c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80031c2:	700b      	strb	r3, [r1, #0]
 80031c4:	d004      	beq.n	80031d0 <__cvt+0x34>
 80031c6:	2f45      	cmp	r7, #69	; 0x45
 80031c8:	d100      	bne.n	80031cc <__cvt+0x30>
 80031ca:	3501      	adds	r5, #1
 80031cc:	2302      	movs	r3, #2
 80031ce:	e000      	b.n	80031d2 <__cvt+0x36>
 80031d0:	2303      	movs	r3, #3
 80031d2:	aa07      	add	r2, sp, #28
 80031d4:	9204      	str	r2, [sp, #16]
 80031d6:	aa06      	add	r2, sp, #24
 80031d8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80031dc:	e9cd 3500 	strd	r3, r5, [sp]
 80031e0:	4622      	mov	r2, r4
 80031e2:	4633      	mov	r3, r6
 80031e4:	f001 feb8 	bl	8004f58 <_dtoa_r>
 80031e8:	2f47      	cmp	r7, #71	; 0x47
 80031ea:	4680      	mov	r8, r0
 80031ec:	d102      	bne.n	80031f4 <__cvt+0x58>
 80031ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031f0:	07db      	lsls	r3, r3, #31
 80031f2:	d526      	bpl.n	8003242 <__cvt+0xa6>
 80031f4:	2f46      	cmp	r7, #70	; 0x46
 80031f6:	eb08 0905 	add.w	r9, r8, r5
 80031fa:	d111      	bne.n	8003220 <__cvt+0x84>
 80031fc:	f898 3000 	ldrb.w	r3, [r8]
 8003200:	2b30      	cmp	r3, #48	; 0x30
 8003202:	d10a      	bne.n	800321a <__cvt+0x7e>
 8003204:	2200      	movs	r2, #0
 8003206:	2300      	movs	r3, #0
 8003208:	4620      	mov	r0, r4
 800320a:	4631      	mov	r1, r6
 800320c:	f7fd fbcc 	bl	80009a8 <__aeabi_dcmpeq>
 8003210:	b918      	cbnz	r0, 800321a <__cvt+0x7e>
 8003212:	f1c5 0501 	rsb	r5, r5, #1
 8003216:	f8ca 5000 	str.w	r5, [sl]
 800321a:	f8da 3000 	ldr.w	r3, [sl]
 800321e:	4499      	add	r9, r3
 8003220:	2200      	movs	r2, #0
 8003222:	2300      	movs	r3, #0
 8003224:	4620      	mov	r0, r4
 8003226:	4631      	mov	r1, r6
 8003228:	f7fd fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800322c:	b938      	cbnz	r0, 800323e <__cvt+0xa2>
 800322e:	2230      	movs	r2, #48	; 0x30
 8003230:	9b07      	ldr	r3, [sp, #28]
 8003232:	454b      	cmp	r3, r9
 8003234:	d205      	bcs.n	8003242 <__cvt+0xa6>
 8003236:	1c59      	adds	r1, r3, #1
 8003238:	9107      	str	r1, [sp, #28]
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e7f8      	b.n	8003230 <__cvt+0x94>
 800323e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003242:	4640      	mov	r0, r8
 8003244:	9b07      	ldr	r3, [sp, #28]
 8003246:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003248:	eba3 0308 	sub.w	r3, r3, r8
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	b008      	add	sp, #32
 8003250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003254 <__exponent>:
 8003254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003256:	2900      	cmp	r1, #0
 8003258:	bfb4      	ite	lt
 800325a:	232d      	movlt	r3, #45	; 0x2d
 800325c:	232b      	movge	r3, #43	; 0x2b
 800325e:	4604      	mov	r4, r0
 8003260:	bfb8      	it	lt
 8003262:	4249      	neglt	r1, r1
 8003264:	2909      	cmp	r1, #9
 8003266:	f804 2b02 	strb.w	r2, [r4], #2
 800326a:	7043      	strb	r3, [r0, #1]
 800326c:	dd21      	ble.n	80032b2 <__exponent+0x5e>
 800326e:	f10d 0307 	add.w	r3, sp, #7
 8003272:	461f      	mov	r7, r3
 8003274:	260a      	movs	r6, #10
 8003276:	fb91 f5f6 	sdiv	r5, r1, r6
 800327a:	fb06 1115 	mls	r1, r6, r5, r1
 800327e:	2d09      	cmp	r5, #9
 8003280:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003284:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003288:	f103 32ff 	add.w	r2, r3, #4294967295
 800328c:	4629      	mov	r1, r5
 800328e:	dc09      	bgt.n	80032a4 <__exponent+0x50>
 8003290:	3130      	adds	r1, #48	; 0x30
 8003292:	3b02      	subs	r3, #2
 8003294:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003298:	42bb      	cmp	r3, r7
 800329a:	4622      	mov	r2, r4
 800329c:	d304      	bcc.n	80032a8 <__exponent+0x54>
 800329e:	1a10      	subs	r0, r2, r0
 80032a0:	b003      	add	sp, #12
 80032a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a4:	4613      	mov	r3, r2
 80032a6:	e7e6      	b.n	8003276 <__exponent+0x22>
 80032a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ac:	f804 2b01 	strb.w	r2, [r4], #1
 80032b0:	e7f2      	b.n	8003298 <__exponent+0x44>
 80032b2:	2330      	movs	r3, #48	; 0x30
 80032b4:	4419      	add	r1, r3
 80032b6:	7083      	strb	r3, [r0, #2]
 80032b8:	1d02      	adds	r2, r0, #4
 80032ba:	70c1      	strb	r1, [r0, #3]
 80032bc:	e7ef      	b.n	800329e <__exponent+0x4a>
	...

080032c0 <_printf_float>:
 80032c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c4:	b091      	sub	sp, #68	; 0x44
 80032c6:	460c      	mov	r4, r1
 80032c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80032ca:	4693      	mov	fp, r2
 80032cc:	461e      	mov	r6, r3
 80032ce:	4605      	mov	r5, r0
 80032d0:	f003 f89e 	bl	8006410 <_localeconv_r>
 80032d4:	6803      	ldr	r3, [r0, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	9309      	str	r3, [sp, #36]	; 0x24
 80032da:	f7fc ff39 	bl	8000150 <strlen>
 80032de:	2300      	movs	r3, #0
 80032e0:	930e      	str	r3, [sp, #56]	; 0x38
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	900a      	str	r0, [sp, #40]	; 0x28
 80032e6:	3307      	adds	r3, #7
 80032e8:	f023 0307 	bic.w	r3, r3, #7
 80032ec:	f103 0208 	add.w	r2, r3, #8
 80032f0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80032f4:	f8d4 a000 	ldr.w	sl, [r4]
 80032f8:	603a      	str	r2, [r7, #0]
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003302:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003306:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800330a:	930b      	str	r3, [sp, #44]	; 0x2c
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	4ba6      	ldr	r3, [pc, #664]	; (80035ac <_printf_float+0x2ec>)
 8003312:	4638      	mov	r0, r7
 8003314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003316:	f7fd fb79 	bl	8000a0c <__aeabi_dcmpun>
 800331a:	bb68      	cbnz	r0, 8003378 <_printf_float+0xb8>
 800331c:	f04f 32ff 	mov.w	r2, #4294967295
 8003320:	4ba2      	ldr	r3, [pc, #648]	; (80035ac <_printf_float+0x2ec>)
 8003322:	4638      	mov	r0, r7
 8003324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003326:	f7fd fb53 	bl	80009d0 <__aeabi_dcmple>
 800332a:	bb28      	cbnz	r0, 8003378 <_printf_float+0xb8>
 800332c:	2200      	movs	r2, #0
 800332e:	2300      	movs	r3, #0
 8003330:	4638      	mov	r0, r7
 8003332:	4649      	mov	r1, r9
 8003334:	f7fd fb42 	bl	80009bc <__aeabi_dcmplt>
 8003338:	b110      	cbz	r0, 8003340 <_printf_float+0x80>
 800333a:	232d      	movs	r3, #45	; 0x2d
 800333c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003340:	4f9b      	ldr	r7, [pc, #620]	; (80035b0 <_printf_float+0x2f0>)
 8003342:	4b9c      	ldr	r3, [pc, #624]	; (80035b4 <_printf_float+0x2f4>)
 8003344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003348:	bf98      	it	ls
 800334a:	461f      	movls	r7, r3
 800334c:	2303      	movs	r3, #3
 800334e:	f04f 0900 	mov.w	r9, #0
 8003352:	6123      	str	r3, [r4, #16]
 8003354:	f02a 0304 	bic.w	r3, sl, #4
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	9600      	str	r6, [sp, #0]
 800335c:	465b      	mov	r3, fp
 800335e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003360:	4621      	mov	r1, r4
 8003362:	4628      	mov	r0, r5
 8003364:	f000 f9e2 	bl	800372c <_printf_common>
 8003368:	3001      	adds	r0, #1
 800336a:	f040 8090 	bne.w	800348e <_printf_float+0x1ce>
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	b011      	add	sp, #68	; 0x44
 8003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003378:	463a      	mov	r2, r7
 800337a:	464b      	mov	r3, r9
 800337c:	4638      	mov	r0, r7
 800337e:	4649      	mov	r1, r9
 8003380:	f7fd fb44 	bl	8000a0c <__aeabi_dcmpun>
 8003384:	b110      	cbz	r0, 800338c <_printf_float+0xcc>
 8003386:	4f8c      	ldr	r7, [pc, #560]	; (80035b8 <_printf_float+0x2f8>)
 8003388:	4b8c      	ldr	r3, [pc, #560]	; (80035bc <_printf_float+0x2fc>)
 800338a:	e7db      	b.n	8003344 <_printf_float+0x84>
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	a80d      	add	r0, sp, #52	; 0x34
 8003396:	a90e      	add	r1, sp, #56	; 0x38
 8003398:	d140      	bne.n	800341c <_printf_float+0x15c>
 800339a:	2306      	movs	r3, #6
 800339c:	6063      	str	r3, [r4, #4]
 800339e:	f04f 0c00 	mov.w	ip, #0
 80033a2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80033a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80033aa:	6863      	ldr	r3, [r4, #4]
 80033ac:	6022      	str	r2, [r4, #0]
 80033ae:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	463a      	mov	r2, r7
 80033b6:	464b      	mov	r3, r9
 80033b8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80033bc:	4628      	mov	r0, r5
 80033be:	f7ff feed 	bl	800319c <__cvt>
 80033c2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80033c6:	2b47      	cmp	r3, #71	; 0x47
 80033c8:	4607      	mov	r7, r0
 80033ca:	d109      	bne.n	80033e0 <_printf_float+0x120>
 80033cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ce:	1cd8      	adds	r0, r3, #3
 80033d0:	db02      	blt.n	80033d8 <_printf_float+0x118>
 80033d2:	6862      	ldr	r2, [r4, #4]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	dd47      	ble.n	8003468 <_printf_float+0x1a8>
 80033d8:	f1a8 0802 	sub.w	r8, r8, #2
 80033dc:	fa5f f888 	uxtb.w	r8, r8
 80033e0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80033e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033e6:	d824      	bhi.n	8003432 <_printf_float+0x172>
 80033e8:	3901      	subs	r1, #1
 80033ea:	4642      	mov	r2, r8
 80033ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033f0:	910d      	str	r1, [sp, #52]	; 0x34
 80033f2:	f7ff ff2f 	bl	8003254 <__exponent>
 80033f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033f8:	4681      	mov	r9, r0
 80033fa:	1813      	adds	r3, r2, r0
 80033fc:	2a01      	cmp	r2, #1
 80033fe:	6123      	str	r3, [r4, #16]
 8003400:	dc02      	bgt.n	8003408 <_printf_float+0x148>
 8003402:	6822      	ldr	r2, [r4, #0]
 8003404:	07d1      	lsls	r1, r2, #31
 8003406:	d501      	bpl.n	800340c <_printf_float+0x14c>
 8003408:	3301      	adds	r3, #1
 800340a:	6123      	str	r3, [r4, #16]
 800340c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0a2      	beq.n	800335a <_printf_float+0x9a>
 8003414:	232d      	movs	r3, #45	; 0x2d
 8003416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800341a:	e79e      	b.n	800335a <_printf_float+0x9a>
 800341c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003420:	f000 816e 	beq.w	8003700 <_printf_float+0x440>
 8003424:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003428:	d1b9      	bne.n	800339e <_printf_float+0xde>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1b7      	bne.n	800339e <_printf_float+0xde>
 800342e:	2301      	movs	r3, #1
 8003430:	e7b4      	b.n	800339c <_printf_float+0xdc>
 8003432:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003436:	d119      	bne.n	800346c <_printf_float+0x1ac>
 8003438:	2900      	cmp	r1, #0
 800343a:	6863      	ldr	r3, [r4, #4]
 800343c:	dd0c      	ble.n	8003458 <_printf_float+0x198>
 800343e:	6121      	str	r1, [r4, #16]
 8003440:	b913      	cbnz	r3, 8003448 <_printf_float+0x188>
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	07d2      	lsls	r2, r2, #31
 8003446:	d502      	bpl.n	800344e <_printf_float+0x18e>
 8003448:	3301      	adds	r3, #1
 800344a:	440b      	add	r3, r1
 800344c:	6123      	str	r3, [r4, #16]
 800344e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003450:	f04f 0900 	mov.w	r9, #0
 8003454:	65a3      	str	r3, [r4, #88]	; 0x58
 8003456:	e7d9      	b.n	800340c <_printf_float+0x14c>
 8003458:	b913      	cbnz	r3, 8003460 <_printf_float+0x1a0>
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	07d0      	lsls	r0, r2, #31
 800345e:	d501      	bpl.n	8003464 <_printf_float+0x1a4>
 8003460:	3302      	adds	r3, #2
 8003462:	e7f3      	b.n	800344c <_printf_float+0x18c>
 8003464:	2301      	movs	r3, #1
 8003466:	e7f1      	b.n	800344c <_printf_float+0x18c>
 8003468:	f04f 0867 	mov.w	r8, #103	; 0x67
 800346c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003470:	4293      	cmp	r3, r2
 8003472:	db05      	blt.n	8003480 <_printf_float+0x1c0>
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	6123      	str	r3, [r4, #16]
 8003478:	07d1      	lsls	r1, r2, #31
 800347a:	d5e8      	bpl.n	800344e <_printf_float+0x18e>
 800347c:	3301      	adds	r3, #1
 800347e:	e7e5      	b.n	800344c <_printf_float+0x18c>
 8003480:	2b00      	cmp	r3, #0
 8003482:	bfcc      	ite	gt
 8003484:	2301      	movgt	r3, #1
 8003486:	f1c3 0302 	rsble	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	e7de      	b.n	800344c <_printf_float+0x18c>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	055a      	lsls	r2, r3, #21
 8003492:	d407      	bmi.n	80034a4 <_printf_float+0x1e4>
 8003494:	6923      	ldr	r3, [r4, #16]
 8003496:	463a      	mov	r2, r7
 8003498:	4659      	mov	r1, fp
 800349a:	4628      	mov	r0, r5
 800349c:	47b0      	blx	r6
 800349e:	3001      	adds	r0, #1
 80034a0:	d129      	bne.n	80034f6 <_printf_float+0x236>
 80034a2:	e764      	b.n	800336e <_printf_float+0xae>
 80034a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80034a8:	f240 80d7 	bls.w	800365a <_printf_float+0x39a>
 80034ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034b0:	2200      	movs	r2, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	f7fd fa78 	bl	80009a8 <__aeabi_dcmpeq>
 80034b8:	b388      	cbz	r0, 800351e <_printf_float+0x25e>
 80034ba:	2301      	movs	r3, #1
 80034bc:	4a40      	ldr	r2, [pc, #256]	; (80035c0 <_printf_float+0x300>)
 80034be:	4659      	mov	r1, fp
 80034c0:	4628      	mov	r0, r5
 80034c2:	47b0      	blx	r6
 80034c4:	3001      	adds	r0, #1
 80034c6:	f43f af52 	beq.w	800336e <_printf_float+0xae>
 80034ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034ce:	429a      	cmp	r2, r3
 80034d0:	db02      	blt.n	80034d8 <_printf_float+0x218>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	07d8      	lsls	r0, r3, #31
 80034d6:	d50e      	bpl.n	80034f6 <_printf_float+0x236>
 80034d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034dc:	4659      	mov	r1, fp
 80034de:	4628      	mov	r0, r5
 80034e0:	47b0      	blx	r6
 80034e2:	3001      	adds	r0, #1
 80034e4:	f43f af43 	beq.w	800336e <_printf_float+0xae>
 80034e8:	2700      	movs	r7, #0
 80034ea:	f104 081a 	add.w	r8, r4, #26
 80034ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034f0:	3b01      	subs	r3, #1
 80034f2:	42bb      	cmp	r3, r7
 80034f4:	dc09      	bgt.n	800350a <_printf_float+0x24a>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	079f      	lsls	r7, r3, #30
 80034fa:	f100 80fd 	bmi.w	80036f8 <_printf_float+0x438>
 80034fe:	68e0      	ldr	r0, [r4, #12]
 8003500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003502:	4298      	cmp	r0, r3
 8003504:	bfb8      	it	lt
 8003506:	4618      	movlt	r0, r3
 8003508:	e733      	b.n	8003372 <_printf_float+0xb2>
 800350a:	2301      	movs	r3, #1
 800350c:	4642      	mov	r2, r8
 800350e:	4659      	mov	r1, fp
 8003510:	4628      	mov	r0, r5
 8003512:	47b0      	blx	r6
 8003514:	3001      	adds	r0, #1
 8003516:	f43f af2a 	beq.w	800336e <_printf_float+0xae>
 800351a:	3701      	adds	r7, #1
 800351c:	e7e7      	b.n	80034ee <_printf_float+0x22e>
 800351e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	dc2b      	bgt.n	800357c <_printf_float+0x2bc>
 8003524:	2301      	movs	r3, #1
 8003526:	4a26      	ldr	r2, [pc, #152]	; (80035c0 <_printf_float+0x300>)
 8003528:	4659      	mov	r1, fp
 800352a:	4628      	mov	r0, r5
 800352c:	47b0      	blx	r6
 800352e:	3001      	adds	r0, #1
 8003530:	f43f af1d 	beq.w	800336e <_printf_float+0xae>
 8003534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003536:	b923      	cbnz	r3, 8003542 <_printf_float+0x282>
 8003538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800353a:	b913      	cbnz	r3, 8003542 <_printf_float+0x282>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	07d9      	lsls	r1, r3, #31
 8003540:	d5d9      	bpl.n	80034f6 <_printf_float+0x236>
 8003542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003546:	4659      	mov	r1, fp
 8003548:	4628      	mov	r0, r5
 800354a:	47b0      	blx	r6
 800354c:	3001      	adds	r0, #1
 800354e:	f43f af0e 	beq.w	800336e <_printf_float+0xae>
 8003552:	f04f 0800 	mov.w	r8, #0
 8003556:	f104 091a 	add.w	r9, r4, #26
 800355a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800355c:	425b      	negs	r3, r3
 800355e:	4543      	cmp	r3, r8
 8003560:	dc01      	bgt.n	8003566 <_printf_float+0x2a6>
 8003562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003564:	e797      	b.n	8003496 <_printf_float+0x1d6>
 8003566:	2301      	movs	r3, #1
 8003568:	464a      	mov	r2, r9
 800356a:	4659      	mov	r1, fp
 800356c:	4628      	mov	r0, r5
 800356e:	47b0      	blx	r6
 8003570:	3001      	adds	r0, #1
 8003572:	f43f aefc 	beq.w	800336e <_printf_float+0xae>
 8003576:	f108 0801 	add.w	r8, r8, #1
 800357a:	e7ee      	b.n	800355a <_printf_float+0x29a>
 800357c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800357e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003580:	429a      	cmp	r2, r3
 8003582:	bfa8      	it	ge
 8003584:	461a      	movge	r2, r3
 8003586:	2a00      	cmp	r2, #0
 8003588:	4690      	mov	r8, r2
 800358a:	dd07      	ble.n	800359c <_printf_float+0x2dc>
 800358c:	4613      	mov	r3, r2
 800358e:	4659      	mov	r1, fp
 8003590:	463a      	mov	r2, r7
 8003592:	4628      	mov	r0, r5
 8003594:	47b0      	blx	r6
 8003596:	3001      	adds	r0, #1
 8003598:	f43f aee9 	beq.w	800336e <_printf_float+0xae>
 800359c:	f104 031a 	add.w	r3, r4, #26
 80035a0:	f04f 0a00 	mov.w	sl, #0
 80035a4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80035a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80035aa:	e015      	b.n	80035d8 <_printf_float+0x318>
 80035ac:	7fefffff 	.word	0x7fefffff
 80035b0:	080076d0 	.word	0x080076d0
 80035b4:	080076cc 	.word	0x080076cc
 80035b8:	080076d8 	.word	0x080076d8
 80035bc:	080076d4 	.word	0x080076d4
 80035c0:	080076dc 	.word	0x080076dc
 80035c4:	2301      	movs	r3, #1
 80035c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035c8:	4659      	mov	r1, fp
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b0      	blx	r6
 80035ce:	3001      	adds	r0, #1
 80035d0:	f43f aecd 	beq.w	800336e <_printf_float+0xae>
 80035d4:	f10a 0a01 	add.w	sl, sl, #1
 80035d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80035dc:	eba9 0308 	sub.w	r3, r9, r8
 80035e0:	4553      	cmp	r3, sl
 80035e2:	dcef      	bgt.n	80035c4 <_printf_float+0x304>
 80035e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035e8:	429a      	cmp	r2, r3
 80035ea:	444f      	add	r7, r9
 80035ec:	db14      	blt.n	8003618 <_printf_float+0x358>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	07da      	lsls	r2, r3, #31
 80035f2:	d411      	bmi.n	8003618 <_printf_float+0x358>
 80035f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035f8:	eba3 0209 	sub.w	r2, r3, r9
 80035fc:	eba3 0901 	sub.w	r9, r3, r1
 8003600:	4591      	cmp	r9, r2
 8003602:	bfa8      	it	ge
 8003604:	4691      	movge	r9, r2
 8003606:	f1b9 0f00 	cmp.w	r9, #0
 800360a:	dc0d      	bgt.n	8003628 <_printf_float+0x368>
 800360c:	2700      	movs	r7, #0
 800360e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003612:	f104 081a 	add.w	r8, r4, #26
 8003616:	e018      	b.n	800364a <_printf_float+0x38a>
 8003618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800361c:	4659      	mov	r1, fp
 800361e:	4628      	mov	r0, r5
 8003620:	47b0      	blx	r6
 8003622:	3001      	adds	r0, #1
 8003624:	d1e6      	bne.n	80035f4 <_printf_float+0x334>
 8003626:	e6a2      	b.n	800336e <_printf_float+0xae>
 8003628:	464b      	mov	r3, r9
 800362a:	463a      	mov	r2, r7
 800362c:	4659      	mov	r1, fp
 800362e:	4628      	mov	r0, r5
 8003630:	47b0      	blx	r6
 8003632:	3001      	adds	r0, #1
 8003634:	d1ea      	bne.n	800360c <_printf_float+0x34c>
 8003636:	e69a      	b.n	800336e <_printf_float+0xae>
 8003638:	2301      	movs	r3, #1
 800363a:	4642      	mov	r2, r8
 800363c:	4659      	mov	r1, fp
 800363e:	4628      	mov	r0, r5
 8003640:	47b0      	blx	r6
 8003642:	3001      	adds	r0, #1
 8003644:	f43f ae93 	beq.w	800336e <_printf_float+0xae>
 8003648:	3701      	adds	r7, #1
 800364a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	eba3 0309 	sub.w	r3, r3, r9
 8003654:	42bb      	cmp	r3, r7
 8003656:	dcef      	bgt.n	8003638 <_printf_float+0x378>
 8003658:	e74d      	b.n	80034f6 <_printf_float+0x236>
 800365a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800365c:	2a01      	cmp	r2, #1
 800365e:	dc01      	bgt.n	8003664 <_printf_float+0x3a4>
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d538      	bpl.n	80036d6 <_printf_float+0x416>
 8003664:	2301      	movs	r3, #1
 8003666:	463a      	mov	r2, r7
 8003668:	4659      	mov	r1, fp
 800366a:	4628      	mov	r0, r5
 800366c:	47b0      	blx	r6
 800366e:	3001      	adds	r0, #1
 8003670:	f43f ae7d 	beq.w	800336e <_printf_float+0xae>
 8003674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003678:	4659      	mov	r1, fp
 800367a:	4628      	mov	r0, r5
 800367c:	47b0      	blx	r6
 800367e:	3001      	adds	r0, #1
 8003680:	f107 0701 	add.w	r7, r7, #1
 8003684:	f43f ae73 	beq.w	800336e <_printf_float+0xae>
 8003688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800368c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800368e:	2200      	movs	r2, #0
 8003690:	f103 38ff 	add.w	r8, r3, #4294967295
 8003694:	2300      	movs	r3, #0
 8003696:	f7fd f987 	bl	80009a8 <__aeabi_dcmpeq>
 800369a:	b9c0      	cbnz	r0, 80036ce <_printf_float+0x40e>
 800369c:	4643      	mov	r3, r8
 800369e:	463a      	mov	r2, r7
 80036a0:	4659      	mov	r1, fp
 80036a2:	4628      	mov	r0, r5
 80036a4:	47b0      	blx	r6
 80036a6:	3001      	adds	r0, #1
 80036a8:	d10d      	bne.n	80036c6 <_printf_float+0x406>
 80036aa:	e660      	b.n	800336e <_printf_float+0xae>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4642      	mov	r2, r8
 80036b0:	4659      	mov	r1, fp
 80036b2:	4628      	mov	r0, r5
 80036b4:	47b0      	blx	r6
 80036b6:	3001      	adds	r0, #1
 80036b8:	f43f ae59 	beq.w	800336e <_printf_float+0xae>
 80036bc:	3701      	adds	r7, #1
 80036be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036c0:	3b01      	subs	r3, #1
 80036c2:	42bb      	cmp	r3, r7
 80036c4:	dcf2      	bgt.n	80036ac <_printf_float+0x3ec>
 80036c6:	464b      	mov	r3, r9
 80036c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036cc:	e6e4      	b.n	8003498 <_printf_float+0x1d8>
 80036ce:	2700      	movs	r7, #0
 80036d0:	f104 081a 	add.w	r8, r4, #26
 80036d4:	e7f3      	b.n	80036be <_printf_float+0x3fe>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e7e1      	b.n	800369e <_printf_float+0x3de>
 80036da:	2301      	movs	r3, #1
 80036dc:	4642      	mov	r2, r8
 80036de:	4659      	mov	r1, fp
 80036e0:	4628      	mov	r0, r5
 80036e2:	47b0      	blx	r6
 80036e4:	3001      	adds	r0, #1
 80036e6:	f43f ae42 	beq.w	800336e <_printf_float+0xae>
 80036ea:	3701      	adds	r7, #1
 80036ec:	68e3      	ldr	r3, [r4, #12]
 80036ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	42bb      	cmp	r3, r7
 80036f4:	dcf1      	bgt.n	80036da <_printf_float+0x41a>
 80036f6:	e702      	b.n	80034fe <_printf_float+0x23e>
 80036f8:	2700      	movs	r7, #0
 80036fa:	f104 0819 	add.w	r8, r4, #25
 80036fe:	e7f5      	b.n	80036ec <_printf_float+0x42c>
 8003700:	2b00      	cmp	r3, #0
 8003702:	f43f ae94 	beq.w	800342e <_printf_float+0x16e>
 8003706:	f04f 0c00 	mov.w	ip, #0
 800370a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800370e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003712:	6022      	str	r2, [r4, #0]
 8003714:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003718:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	463a      	mov	r2, r7
 8003720:	464b      	mov	r3, r9
 8003722:	4628      	mov	r0, r5
 8003724:	f7ff fd3a 	bl	800319c <__cvt>
 8003728:	4607      	mov	r7, r0
 800372a:	e64f      	b.n	80033cc <_printf_float+0x10c>

0800372c <_printf_common>:
 800372c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	4691      	mov	r9, r2
 8003732:	461f      	mov	r7, r3
 8003734:	688a      	ldr	r2, [r1, #8]
 8003736:	690b      	ldr	r3, [r1, #16]
 8003738:	4606      	mov	r6, r0
 800373a:	4293      	cmp	r3, r2
 800373c:	bfb8      	it	lt
 800373e:	4613      	movlt	r3, r2
 8003740:	f8c9 3000 	str.w	r3, [r9]
 8003744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003748:	460c      	mov	r4, r1
 800374a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800374e:	b112      	cbz	r2, 8003756 <_printf_common+0x2a>
 8003750:	3301      	adds	r3, #1
 8003752:	f8c9 3000 	str.w	r3, [r9]
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	0699      	lsls	r1, r3, #26
 800375a:	bf42      	ittt	mi
 800375c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003760:	3302      	addmi	r3, #2
 8003762:	f8c9 3000 	strmi.w	r3, [r9]
 8003766:	6825      	ldr	r5, [r4, #0]
 8003768:	f015 0506 	ands.w	r5, r5, #6
 800376c:	d107      	bne.n	800377e <_printf_common+0x52>
 800376e:	f104 0a19 	add.w	sl, r4, #25
 8003772:	68e3      	ldr	r3, [r4, #12]
 8003774:	f8d9 2000 	ldr.w	r2, [r9]
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	42ab      	cmp	r3, r5
 800377c:	dc29      	bgt.n	80037d2 <_printf_common+0xa6>
 800377e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	3300      	adds	r3, #0
 8003786:	bf18      	it	ne
 8003788:	2301      	movne	r3, #1
 800378a:	0692      	lsls	r2, r2, #26
 800378c:	d42e      	bmi.n	80037ec <_printf_common+0xc0>
 800378e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003792:	4639      	mov	r1, r7
 8003794:	4630      	mov	r0, r6
 8003796:	47c0      	blx	r8
 8003798:	3001      	adds	r0, #1
 800379a:	d021      	beq.n	80037e0 <_printf_common+0xb4>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	68e5      	ldr	r5, [r4, #12]
 80037a0:	f003 0306 	and.w	r3, r3, #6
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	bf18      	it	ne
 80037a8:	2500      	movne	r5, #0
 80037aa:	f8d9 2000 	ldr.w	r2, [r9]
 80037ae:	f04f 0900 	mov.w	r9, #0
 80037b2:	bf08      	it	eq
 80037b4:	1aad      	subeq	r5, r5, r2
 80037b6:	68a3      	ldr	r3, [r4, #8]
 80037b8:	6922      	ldr	r2, [r4, #16]
 80037ba:	bf08      	it	eq
 80037bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037c0:	4293      	cmp	r3, r2
 80037c2:	bfc4      	itt	gt
 80037c4:	1a9b      	subgt	r3, r3, r2
 80037c6:	18ed      	addgt	r5, r5, r3
 80037c8:	341a      	adds	r4, #26
 80037ca:	454d      	cmp	r5, r9
 80037cc:	d11a      	bne.n	8003804 <_printf_common+0xd8>
 80037ce:	2000      	movs	r0, #0
 80037d0:	e008      	b.n	80037e4 <_printf_common+0xb8>
 80037d2:	2301      	movs	r3, #1
 80037d4:	4652      	mov	r2, sl
 80037d6:	4639      	mov	r1, r7
 80037d8:	4630      	mov	r0, r6
 80037da:	47c0      	blx	r8
 80037dc:	3001      	adds	r0, #1
 80037de:	d103      	bne.n	80037e8 <_printf_common+0xbc>
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e8:	3501      	adds	r5, #1
 80037ea:	e7c2      	b.n	8003772 <_printf_common+0x46>
 80037ec:	2030      	movs	r0, #48	; 0x30
 80037ee:	18e1      	adds	r1, r4, r3
 80037f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037fa:	4422      	add	r2, r4
 80037fc:	3302      	adds	r3, #2
 80037fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003802:	e7c4      	b.n	800378e <_printf_common+0x62>
 8003804:	2301      	movs	r3, #1
 8003806:	4622      	mov	r2, r4
 8003808:	4639      	mov	r1, r7
 800380a:	4630      	mov	r0, r6
 800380c:	47c0      	blx	r8
 800380e:	3001      	adds	r0, #1
 8003810:	d0e6      	beq.n	80037e0 <_printf_common+0xb4>
 8003812:	f109 0901 	add.w	r9, r9, #1
 8003816:	e7d8      	b.n	80037ca <_printf_common+0x9e>

08003818 <_printf_i>:
 8003818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800381c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003820:	460c      	mov	r4, r1
 8003822:	7e09      	ldrb	r1, [r1, #24]
 8003824:	b085      	sub	sp, #20
 8003826:	296e      	cmp	r1, #110	; 0x6e
 8003828:	4617      	mov	r7, r2
 800382a:	4606      	mov	r6, r0
 800382c:	4698      	mov	r8, r3
 800382e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003830:	f000 80b3 	beq.w	800399a <_printf_i+0x182>
 8003834:	d822      	bhi.n	800387c <_printf_i+0x64>
 8003836:	2963      	cmp	r1, #99	; 0x63
 8003838:	d036      	beq.n	80038a8 <_printf_i+0x90>
 800383a:	d80a      	bhi.n	8003852 <_printf_i+0x3a>
 800383c:	2900      	cmp	r1, #0
 800383e:	f000 80b9 	beq.w	80039b4 <_printf_i+0x19c>
 8003842:	2958      	cmp	r1, #88	; 0x58
 8003844:	f000 8083 	beq.w	800394e <_printf_i+0x136>
 8003848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800384c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003850:	e032      	b.n	80038b8 <_printf_i+0xa0>
 8003852:	2964      	cmp	r1, #100	; 0x64
 8003854:	d001      	beq.n	800385a <_printf_i+0x42>
 8003856:	2969      	cmp	r1, #105	; 0x69
 8003858:	d1f6      	bne.n	8003848 <_printf_i+0x30>
 800385a:	6820      	ldr	r0, [r4, #0]
 800385c:	6813      	ldr	r3, [r2, #0]
 800385e:	0605      	lsls	r5, r0, #24
 8003860:	f103 0104 	add.w	r1, r3, #4
 8003864:	d52a      	bpl.n	80038bc <_printf_i+0xa4>
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	da03      	bge.n	8003876 <_printf_i+0x5e>
 800386e:	222d      	movs	r2, #45	; 0x2d
 8003870:	425b      	negs	r3, r3
 8003872:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003876:	486f      	ldr	r0, [pc, #444]	; (8003a34 <_printf_i+0x21c>)
 8003878:	220a      	movs	r2, #10
 800387a:	e039      	b.n	80038f0 <_printf_i+0xd8>
 800387c:	2973      	cmp	r1, #115	; 0x73
 800387e:	f000 809d 	beq.w	80039bc <_printf_i+0x1a4>
 8003882:	d808      	bhi.n	8003896 <_printf_i+0x7e>
 8003884:	296f      	cmp	r1, #111	; 0x6f
 8003886:	d020      	beq.n	80038ca <_printf_i+0xb2>
 8003888:	2970      	cmp	r1, #112	; 0x70
 800388a:	d1dd      	bne.n	8003848 <_printf_i+0x30>
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	f043 0320 	orr.w	r3, r3, #32
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	e003      	b.n	800389e <_printf_i+0x86>
 8003896:	2975      	cmp	r1, #117	; 0x75
 8003898:	d017      	beq.n	80038ca <_printf_i+0xb2>
 800389a:	2978      	cmp	r1, #120	; 0x78
 800389c:	d1d4      	bne.n	8003848 <_printf_i+0x30>
 800389e:	2378      	movs	r3, #120	; 0x78
 80038a0:	4865      	ldr	r0, [pc, #404]	; (8003a38 <_printf_i+0x220>)
 80038a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038a6:	e055      	b.n	8003954 <_printf_i+0x13c>
 80038a8:	6813      	ldr	r3, [r2, #0]
 80038aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ae:	1d19      	adds	r1, r3, #4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6011      	str	r1, [r2, #0]
 80038b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b8:	2301      	movs	r3, #1
 80038ba:	e08c      	b.n	80039d6 <_printf_i+0x1be>
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038c2:	6011      	str	r1, [r2, #0]
 80038c4:	bf18      	it	ne
 80038c6:	b21b      	sxthne	r3, r3
 80038c8:	e7cf      	b.n	800386a <_printf_i+0x52>
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	6825      	ldr	r5, [r4, #0]
 80038ce:	1d18      	adds	r0, r3, #4
 80038d0:	6010      	str	r0, [r2, #0]
 80038d2:	0628      	lsls	r0, r5, #24
 80038d4:	d501      	bpl.n	80038da <_printf_i+0xc2>
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	e002      	b.n	80038e0 <_printf_i+0xc8>
 80038da:	0668      	lsls	r0, r5, #25
 80038dc:	d5fb      	bpl.n	80038d6 <_printf_i+0xbe>
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	296f      	cmp	r1, #111	; 0x6f
 80038e2:	bf14      	ite	ne
 80038e4:	220a      	movne	r2, #10
 80038e6:	2208      	moveq	r2, #8
 80038e8:	4852      	ldr	r0, [pc, #328]	; (8003a34 <_printf_i+0x21c>)
 80038ea:	2100      	movs	r1, #0
 80038ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038f0:	6865      	ldr	r5, [r4, #4]
 80038f2:	2d00      	cmp	r5, #0
 80038f4:	60a5      	str	r5, [r4, #8]
 80038f6:	f2c0 8095 	blt.w	8003a24 <_printf_i+0x20c>
 80038fa:	6821      	ldr	r1, [r4, #0]
 80038fc:	f021 0104 	bic.w	r1, r1, #4
 8003900:	6021      	str	r1, [r4, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d13d      	bne.n	8003982 <_printf_i+0x16a>
 8003906:	2d00      	cmp	r5, #0
 8003908:	f040 808e 	bne.w	8003a28 <_printf_i+0x210>
 800390c:	4665      	mov	r5, ip
 800390e:	2a08      	cmp	r2, #8
 8003910:	d10b      	bne.n	800392a <_printf_i+0x112>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	07db      	lsls	r3, r3, #31
 8003916:	d508      	bpl.n	800392a <_printf_i+0x112>
 8003918:	6923      	ldr	r3, [r4, #16]
 800391a:	6862      	ldr	r2, [r4, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	bfde      	ittt	le
 8003920:	2330      	movle	r3, #48	; 0x30
 8003922:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003926:	f105 35ff 	addle.w	r5, r5, #4294967295
 800392a:	ebac 0305 	sub.w	r3, ip, r5
 800392e:	6123      	str	r3, [r4, #16]
 8003930:	f8cd 8000 	str.w	r8, [sp]
 8003934:	463b      	mov	r3, r7
 8003936:	aa03      	add	r2, sp, #12
 8003938:	4621      	mov	r1, r4
 800393a:	4630      	mov	r0, r6
 800393c:	f7ff fef6 	bl	800372c <_printf_common>
 8003940:	3001      	adds	r0, #1
 8003942:	d14d      	bne.n	80039e0 <_printf_i+0x1c8>
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	b005      	add	sp, #20
 800394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800394e:	4839      	ldr	r0, [pc, #228]	; (8003a34 <_printf_i+0x21c>)
 8003950:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003954:	6813      	ldr	r3, [r2, #0]
 8003956:	6821      	ldr	r1, [r4, #0]
 8003958:	1d1d      	adds	r5, r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6015      	str	r5, [r2, #0]
 800395e:	060a      	lsls	r2, r1, #24
 8003960:	d50b      	bpl.n	800397a <_printf_i+0x162>
 8003962:	07ca      	lsls	r2, r1, #31
 8003964:	bf44      	itt	mi
 8003966:	f041 0120 	orrmi.w	r1, r1, #32
 800396a:	6021      	strmi	r1, [r4, #0]
 800396c:	b91b      	cbnz	r3, 8003976 <_printf_i+0x15e>
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	f022 0220 	bic.w	r2, r2, #32
 8003974:	6022      	str	r2, [r4, #0]
 8003976:	2210      	movs	r2, #16
 8003978:	e7b7      	b.n	80038ea <_printf_i+0xd2>
 800397a:	064d      	lsls	r5, r1, #25
 800397c:	bf48      	it	mi
 800397e:	b29b      	uxthmi	r3, r3
 8003980:	e7ef      	b.n	8003962 <_printf_i+0x14a>
 8003982:	4665      	mov	r5, ip
 8003984:	fbb3 f1f2 	udiv	r1, r3, r2
 8003988:	fb02 3311 	mls	r3, r2, r1, r3
 800398c:	5cc3      	ldrb	r3, [r0, r3]
 800398e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003992:	460b      	mov	r3, r1
 8003994:	2900      	cmp	r1, #0
 8003996:	d1f5      	bne.n	8003984 <_printf_i+0x16c>
 8003998:	e7b9      	b.n	800390e <_printf_i+0xf6>
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	6825      	ldr	r5, [r4, #0]
 800399e:	1d18      	adds	r0, r3, #4
 80039a0:	6961      	ldr	r1, [r4, #20]
 80039a2:	6010      	str	r0, [r2, #0]
 80039a4:	0628      	lsls	r0, r5, #24
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	d501      	bpl.n	80039ae <_printf_i+0x196>
 80039aa:	6019      	str	r1, [r3, #0]
 80039ac:	e002      	b.n	80039b4 <_printf_i+0x19c>
 80039ae:	066a      	lsls	r2, r5, #25
 80039b0:	d5fb      	bpl.n	80039aa <_printf_i+0x192>
 80039b2:	8019      	strh	r1, [r3, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	4665      	mov	r5, ip
 80039b8:	6123      	str	r3, [r4, #16]
 80039ba:	e7b9      	b.n	8003930 <_printf_i+0x118>
 80039bc:	6813      	ldr	r3, [r2, #0]
 80039be:	1d19      	adds	r1, r3, #4
 80039c0:	6011      	str	r1, [r2, #0]
 80039c2:	681d      	ldr	r5, [r3, #0]
 80039c4:	6862      	ldr	r2, [r4, #4]
 80039c6:	2100      	movs	r1, #0
 80039c8:	4628      	mov	r0, r5
 80039ca:	f002 fdad 	bl	8006528 <memchr>
 80039ce:	b108      	cbz	r0, 80039d4 <_printf_i+0x1bc>
 80039d0:	1b40      	subs	r0, r0, r5
 80039d2:	6060      	str	r0, [r4, #4]
 80039d4:	6863      	ldr	r3, [r4, #4]
 80039d6:	6123      	str	r3, [r4, #16]
 80039d8:	2300      	movs	r3, #0
 80039da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039de:	e7a7      	b.n	8003930 <_printf_i+0x118>
 80039e0:	6923      	ldr	r3, [r4, #16]
 80039e2:	462a      	mov	r2, r5
 80039e4:	4639      	mov	r1, r7
 80039e6:	4630      	mov	r0, r6
 80039e8:	47c0      	blx	r8
 80039ea:	3001      	adds	r0, #1
 80039ec:	d0aa      	beq.n	8003944 <_printf_i+0x12c>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	079b      	lsls	r3, r3, #30
 80039f2:	d413      	bmi.n	8003a1c <_printf_i+0x204>
 80039f4:	68e0      	ldr	r0, [r4, #12]
 80039f6:	9b03      	ldr	r3, [sp, #12]
 80039f8:	4298      	cmp	r0, r3
 80039fa:	bfb8      	it	lt
 80039fc:	4618      	movlt	r0, r3
 80039fe:	e7a3      	b.n	8003948 <_printf_i+0x130>
 8003a00:	2301      	movs	r3, #1
 8003a02:	464a      	mov	r2, r9
 8003a04:	4639      	mov	r1, r7
 8003a06:	4630      	mov	r0, r6
 8003a08:	47c0      	blx	r8
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d09a      	beq.n	8003944 <_printf_i+0x12c>
 8003a0e:	3501      	adds	r5, #1
 8003a10:	68e3      	ldr	r3, [r4, #12]
 8003a12:	9a03      	ldr	r2, [sp, #12]
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	42ab      	cmp	r3, r5
 8003a18:	dcf2      	bgt.n	8003a00 <_printf_i+0x1e8>
 8003a1a:	e7eb      	b.n	80039f4 <_printf_i+0x1dc>
 8003a1c:	2500      	movs	r5, #0
 8003a1e:	f104 0919 	add.w	r9, r4, #25
 8003a22:	e7f5      	b.n	8003a10 <_printf_i+0x1f8>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ac      	bne.n	8003982 <_printf_i+0x16a>
 8003a28:	7803      	ldrb	r3, [r0, #0]
 8003a2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a32:	e76c      	b.n	800390e <_printf_i+0xf6>
 8003a34:	080076de 	.word	0x080076de
 8003a38:	080076ef 	.word	0x080076ef

08003a3c <_scanf_float>:
 8003a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a40:	469a      	mov	sl, r3
 8003a42:	688b      	ldr	r3, [r1, #8]
 8003a44:	4616      	mov	r6, r2
 8003a46:	1e5a      	subs	r2, r3, #1
 8003a48:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a4c:	bf88      	it	hi
 8003a4e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003a52:	b087      	sub	sp, #28
 8003a54:	bf85      	ittet	hi
 8003a56:	189b      	addhi	r3, r3, r2
 8003a58:	9301      	strhi	r3, [sp, #4]
 8003a5a:	2300      	movls	r3, #0
 8003a5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a60:	4688      	mov	r8, r1
 8003a62:	f04f 0b00 	mov.w	fp, #0
 8003a66:	bf8c      	ite	hi
 8003a68:	608b      	strhi	r3, [r1, #8]
 8003a6a:	9301      	strls	r3, [sp, #4]
 8003a6c:	680b      	ldr	r3, [r1, #0]
 8003a6e:	4607      	mov	r7, r0
 8003a70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a74:	f848 3b1c 	str.w	r3, [r8], #28
 8003a78:	460c      	mov	r4, r1
 8003a7a:	4645      	mov	r5, r8
 8003a7c:	465a      	mov	r2, fp
 8003a7e:	46d9      	mov	r9, fp
 8003a80:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003a84:	f8cd b008 	str.w	fp, [sp, #8]
 8003a88:	68a1      	ldr	r1, [r4, #8]
 8003a8a:	b181      	cbz	r1, 8003aae <_scanf_float+0x72>
 8003a8c:	6833      	ldr	r3, [r6, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b49      	cmp	r3, #73	; 0x49
 8003a92:	d071      	beq.n	8003b78 <_scanf_float+0x13c>
 8003a94:	d84d      	bhi.n	8003b32 <_scanf_float+0xf6>
 8003a96:	2b39      	cmp	r3, #57	; 0x39
 8003a98:	d840      	bhi.n	8003b1c <_scanf_float+0xe0>
 8003a9a:	2b31      	cmp	r3, #49	; 0x31
 8003a9c:	f080 8088 	bcs.w	8003bb0 <_scanf_float+0x174>
 8003aa0:	2b2d      	cmp	r3, #45	; 0x2d
 8003aa2:	f000 8090 	beq.w	8003bc6 <_scanf_float+0x18a>
 8003aa6:	d815      	bhi.n	8003ad4 <_scanf_float+0x98>
 8003aa8:	2b2b      	cmp	r3, #43	; 0x2b
 8003aaa:	f000 808c 	beq.w	8003bc6 <_scanf_float+0x18a>
 8003aae:	f1b9 0f00 	cmp.w	r9, #0
 8003ab2:	d003      	beq.n	8003abc <_scanf_float+0x80>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	3a01      	subs	r2, #1
 8003abe:	2a01      	cmp	r2, #1
 8003ac0:	f200 80ea 	bhi.w	8003c98 <_scanf_float+0x25c>
 8003ac4:	4545      	cmp	r5, r8
 8003ac6:	f200 80dc 	bhi.w	8003c82 <_scanf_float+0x246>
 8003aca:	2601      	movs	r6, #1
 8003acc:	4630      	mov	r0, r6
 8003ace:	b007      	add	sp, #28
 8003ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad6:	f000 809f 	beq.w	8003c18 <_scanf_float+0x1dc>
 8003ada:	2b30      	cmp	r3, #48	; 0x30
 8003adc:	d1e7      	bne.n	8003aae <_scanf_float+0x72>
 8003ade:	6820      	ldr	r0, [r4, #0]
 8003ae0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003ae4:	d064      	beq.n	8003bb0 <_scanf_float+0x174>
 8003ae6:	9b01      	ldr	r3, [sp, #4]
 8003ae8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003aec:	6020      	str	r0, [r4, #0]
 8003aee:	f109 0901 	add.w	r9, r9, #1
 8003af2:	b11b      	cbz	r3, 8003afc <_scanf_float+0xc0>
 8003af4:	3b01      	subs	r3, #1
 8003af6:	3101      	adds	r1, #1
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	60a1      	str	r1, [r4, #8]
 8003afc:	68a3      	ldr	r3, [r4, #8]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	60a3      	str	r3, [r4, #8]
 8003b02:	6923      	ldr	r3, [r4, #16]
 8003b04:	3301      	adds	r3, #1
 8003b06:	6123      	str	r3, [r4, #16]
 8003b08:	6873      	ldr	r3, [r6, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	6073      	str	r3, [r6, #4]
 8003b10:	f340 80ac 	ble.w	8003c6c <_scanf_float+0x230>
 8003b14:	6833      	ldr	r3, [r6, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	e7b5      	b.n	8003a88 <_scanf_float+0x4c>
 8003b1c:	2b45      	cmp	r3, #69	; 0x45
 8003b1e:	f000 8085 	beq.w	8003c2c <_scanf_float+0x1f0>
 8003b22:	2b46      	cmp	r3, #70	; 0x46
 8003b24:	d06a      	beq.n	8003bfc <_scanf_float+0x1c0>
 8003b26:	2b41      	cmp	r3, #65	; 0x41
 8003b28:	d1c1      	bne.n	8003aae <_scanf_float+0x72>
 8003b2a:	2a01      	cmp	r2, #1
 8003b2c:	d1bf      	bne.n	8003aae <_scanf_float+0x72>
 8003b2e:	2202      	movs	r2, #2
 8003b30:	e046      	b.n	8003bc0 <_scanf_float+0x184>
 8003b32:	2b65      	cmp	r3, #101	; 0x65
 8003b34:	d07a      	beq.n	8003c2c <_scanf_float+0x1f0>
 8003b36:	d818      	bhi.n	8003b6a <_scanf_float+0x12e>
 8003b38:	2b54      	cmp	r3, #84	; 0x54
 8003b3a:	d066      	beq.n	8003c0a <_scanf_float+0x1ce>
 8003b3c:	d811      	bhi.n	8003b62 <_scanf_float+0x126>
 8003b3e:	2b4e      	cmp	r3, #78	; 0x4e
 8003b40:	d1b5      	bne.n	8003aae <_scanf_float+0x72>
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	d146      	bne.n	8003bd4 <_scanf_float+0x198>
 8003b46:	f1b9 0f00 	cmp.w	r9, #0
 8003b4a:	d145      	bne.n	8003bd8 <_scanf_float+0x19c>
 8003b4c:	6821      	ldr	r1, [r4, #0]
 8003b4e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003b52:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b56:	d13f      	bne.n	8003bd8 <_scanf_float+0x19c>
 8003b58:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b5c:	6021      	str	r1, [r4, #0]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	e02e      	b.n	8003bc0 <_scanf_float+0x184>
 8003b62:	2b59      	cmp	r3, #89	; 0x59
 8003b64:	d01e      	beq.n	8003ba4 <_scanf_float+0x168>
 8003b66:	2b61      	cmp	r3, #97	; 0x61
 8003b68:	e7de      	b.n	8003b28 <_scanf_float+0xec>
 8003b6a:	2b6e      	cmp	r3, #110	; 0x6e
 8003b6c:	d0e9      	beq.n	8003b42 <_scanf_float+0x106>
 8003b6e:	d815      	bhi.n	8003b9c <_scanf_float+0x160>
 8003b70:	2b66      	cmp	r3, #102	; 0x66
 8003b72:	d043      	beq.n	8003bfc <_scanf_float+0x1c0>
 8003b74:	2b69      	cmp	r3, #105	; 0x69
 8003b76:	d19a      	bne.n	8003aae <_scanf_float+0x72>
 8003b78:	f1bb 0f00 	cmp.w	fp, #0
 8003b7c:	d138      	bne.n	8003bf0 <_scanf_float+0x1b4>
 8003b7e:	f1b9 0f00 	cmp.w	r9, #0
 8003b82:	d197      	bne.n	8003ab4 <_scanf_float+0x78>
 8003b84:	6821      	ldr	r1, [r4, #0]
 8003b86:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003b8a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b8e:	d195      	bne.n	8003abc <_scanf_float+0x80>
 8003b90:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b94:	6021      	str	r1, [r4, #0]
 8003b96:	f04f 0b01 	mov.w	fp, #1
 8003b9a:	e011      	b.n	8003bc0 <_scanf_float+0x184>
 8003b9c:	2b74      	cmp	r3, #116	; 0x74
 8003b9e:	d034      	beq.n	8003c0a <_scanf_float+0x1ce>
 8003ba0:	2b79      	cmp	r3, #121	; 0x79
 8003ba2:	d184      	bne.n	8003aae <_scanf_float+0x72>
 8003ba4:	f1bb 0f07 	cmp.w	fp, #7
 8003ba8:	d181      	bne.n	8003aae <_scanf_float+0x72>
 8003baa:	f04f 0b08 	mov.w	fp, #8
 8003bae:	e007      	b.n	8003bc0 <_scanf_float+0x184>
 8003bb0:	eb12 0f0b 	cmn.w	r2, fp
 8003bb4:	f47f af7b 	bne.w	8003aae <_scanf_float+0x72>
 8003bb8:	6821      	ldr	r1, [r4, #0]
 8003bba:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003bbe:	6021      	str	r1, [r4, #0]
 8003bc0:	702b      	strb	r3, [r5, #0]
 8003bc2:	3501      	adds	r5, #1
 8003bc4:	e79a      	b.n	8003afc <_scanf_float+0xc0>
 8003bc6:	6821      	ldr	r1, [r4, #0]
 8003bc8:	0608      	lsls	r0, r1, #24
 8003bca:	f57f af70 	bpl.w	8003aae <_scanf_float+0x72>
 8003bce:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003bd2:	e7f4      	b.n	8003bbe <_scanf_float+0x182>
 8003bd4:	2a02      	cmp	r2, #2
 8003bd6:	d047      	beq.n	8003c68 <_scanf_float+0x22c>
 8003bd8:	f1bb 0f01 	cmp.w	fp, #1
 8003bdc:	d003      	beq.n	8003be6 <_scanf_float+0x1aa>
 8003bde:	f1bb 0f04 	cmp.w	fp, #4
 8003be2:	f47f af64 	bne.w	8003aae <_scanf_float+0x72>
 8003be6:	f10b 0b01 	add.w	fp, fp, #1
 8003bea:	fa5f fb8b 	uxtb.w	fp, fp
 8003bee:	e7e7      	b.n	8003bc0 <_scanf_float+0x184>
 8003bf0:	f1bb 0f03 	cmp.w	fp, #3
 8003bf4:	d0f7      	beq.n	8003be6 <_scanf_float+0x1aa>
 8003bf6:	f1bb 0f05 	cmp.w	fp, #5
 8003bfa:	e7f2      	b.n	8003be2 <_scanf_float+0x1a6>
 8003bfc:	f1bb 0f02 	cmp.w	fp, #2
 8003c00:	f47f af55 	bne.w	8003aae <_scanf_float+0x72>
 8003c04:	f04f 0b03 	mov.w	fp, #3
 8003c08:	e7da      	b.n	8003bc0 <_scanf_float+0x184>
 8003c0a:	f1bb 0f06 	cmp.w	fp, #6
 8003c0e:	f47f af4e 	bne.w	8003aae <_scanf_float+0x72>
 8003c12:	f04f 0b07 	mov.w	fp, #7
 8003c16:	e7d3      	b.n	8003bc0 <_scanf_float+0x184>
 8003c18:	6821      	ldr	r1, [r4, #0]
 8003c1a:	0588      	lsls	r0, r1, #22
 8003c1c:	f57f af47 	bpl.w	8003aae <_scanf_float+0x72>
 8003c20:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003c24:	6021      	str	r1, [r4, #0]
 8003c26:	f8cd 9008 	str.w	r9, [sp, #8]
 8003c2a:	e7c9      	b.n	8003bc0 <_scanf_float+0x184>
 8003c2c:	6821      	ldr	r1, [r4, #0]
 8003c2e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003c32:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003c36:	d006      	beq.n	8003c46 <_scanf_float+0x20a>
 8003c38:	0548      	lsls	r0, r1, #21
 8003c3a:	f57f af38 	bpl.w	8003aae <_scanf_float+0x72>
 8003c3e:	f1b9 0f00 	cmp.w	r9, #0
 8003c42:	f43f af3b 	beq.w	8003abc <_scanf_float+0x80>
 8003c46:	0588      	lsls	r0, r1, #22
 8003c48:	bf58      	it	pl
 8003c4a:	9802      	ldrpl	r0, [sp, #8]
 8003c4c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003c50:	bf58      	it	pl
 8003c52:	eba9 0000 	subpl.w	r0, r9, r0
 8003c56:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003c5a:	bf58      	it	pl
 8003c5c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003c60:	6021      	str	r1, [r4, #0]
 8003c62:	f04f 0900 	mov.w	r9, #0
 8003c66:	e7ab      	b.n	8003bc0 <_scanf_float+0x184>
 8003c68:	2203      	movs	r2, #3
 8003c6a:	e7a9      	b.n	8003bc0 <_scanf_float+0x184>
 8003c6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c70:	4631      	mov	r1, r6
 8003c72:	4638      	mov	r0, r7
 8003c74:	9205      	str	r2, [sp, #20]
 8003c76:	4798      	blx	r3
 8003c78:	9a05      	ldr	r2, [sp, #20]
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	f43f af04 	beq.w	8003a88 <_scanf_float+0x4c>
 8003c80:	e715      	b.n	8003aae <_scanf_float+0x72>
 8003c82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c86:	4632      	mov	r2, r6
 8003c88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	4798      	blx	r3
 8003c90:	6923      	ldr	r3, [r4, #16]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	6123      	str	r3, [r4, #16]
 8003c96:	e715      	b.n	8003ac4 <_scanf_float+0x88>
 8003c98:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d80a      	bhi.n	8003cb6 <_scanf_float+0x27a>
 8003ca0:	f1bb 0f02 	cmp.w	fp, #2
 8003ca4:	d967      	bls.n	8003d76 <_scanf_float+0x33a>
 8003ca6:	f1ab 0b03 	sub.w	fp, fp, #3
 8003caa:	fa5f fb8b 	uxtb.w	fp, fp
 8003cae:	eba5 0b0b 	sub.w	fp, r5, fp
 8003cb2:	455d      	cmp	r5, fp
 8003cb4:	d14a      	bne.n	8003d4c <_scanf_float+0x310>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	05da      	lsls	r2, r3, #23
 8003cba:	d51f      	bpl.n	8003cfc <_scanf_float+0x2c0>
 8003cbc:	055b      	lsls	r3, r3, #21
 8003cbe:	d467      	bmi.n	8003d90 <_scanf_float+0x354>
 8003cc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003cc4:	6923      	ldr	r3, [r4, #16]
 8003cc6:	2965      	cmp	r1, #101	; 0x65
 8003cc8:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ccc:	f105 3bff 	add.w	fp, r5, #4294967295
 8003cd0:	6123      	str	r3, [r4, #16]
 8003cd2:	d00d      	beq.n	8003cf0 <_scanf_float+0x2b4>
 8003cd4:	2945      	cmp	r1, #69	; 0x45
 8003cd6:	d00b      	beq.n	8003cf0 <_scanf_float+0x2b4>
 8003cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4638      	mov	r0, r7
 8003ce0:	4798      	blx	r3
 8003ce2:	6923      	ldr	r3, [r4, #16]
 8003ce4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	f1a5 0b02 	sub.w	fp, r5, #2
 8003cee:	6123      	str	r3, [r4, #16]
 8003cf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cf4:	4632      	mov	r2, r6
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	4798      	blx	r3
 8003cfa:	465d      	mov	r5, fp
 8003cfc:	6826      	ldr	r6, [r4, #0]
 8003cfe:	f016 0610 	ands.w	r6, r6, #16
 8003d02:	d176      	bne.n	8003df2 <_scanf_float+0x3b6>
 8003d04:	702e      	strb	r6, [r5, #0]
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d10:	d141      	bne.n	8003d96 <_scanf_float+0x35a>
 8003d12:	9b02      	ldr	r3, [sp, #8]
 8003d14:	eba9 0303 	sub.w	r3, r9, r3
 8003d18:	425a      	negs	r2, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d148      	bne.n	8003db0 <_scanf_float+0x374>
 8003d1e:	4641      	mov	r1, r8
 8003d20:	2200      	movs	r2, #0
 8003d22:	4638      	mov	r0, r7
 8003d24:	f000 ff2c 	bl	8004b80 <_strtod_r>
 8003d28:	6825      	ldr	r5, [r4, #0]
 8003d2a:	4680      	mov	r8, r0
 8003d2c:	f015 0f02 	tst.w	r5, #2
 8003d30:	4689      	mov	r9, r1
 8003d32:	f8da 3000 	ldr.w	r3, [sl]
 8003d36:	d046      	beq.n	8003dc6 <_scanf_float+0x38a>
 8003d38:	1d1a      	adds	r2, r3, #4
 8003d3a:	f8ca 2000 	str.w	r2, [sl]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	e9c3 8900 	strd	r8, r9, [r3]
 8003d44:	68e3      	ldr	r3, [r4, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60e3      	str	r3, [r4, #12]
 8003d4a:	e6bf      	b.n	8003acc <_scanf_float+0x90>
 8003d4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d50:	4632      	mov	r2, r6
 8003d52:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d56:	4638      	mov	r0, r7
 8003d58:	4798      	blx	r3
 8003d5a:	6923      	ldr	r3, [r4, #16]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	e7a7      	b.n	8003cb2 <_scanf_float+0x276>
 8003d62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d66:	4632      	mov	r2, r6
 8003d68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	4798      	blx	r3
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	6123      	str	r3, [r4, #16]
 8003d76:	4545      	cmp	r5, r8
 8003d78:	d8f3      	bhi.n	8003d62 <_scanf_float+0x326>
 8003d7a:	e6a6      	b.n	8003aca <_scanf_float+0x8e>
 8003d7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d80:	4632      	mov	r2, r6
 8003d82:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d86:	4638      	mov	r0, r7
 8003d88:	4798      	blx	r3
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	4545      	cmp	r5, r8
 8003d92:	d8f3      	bhi.n	8003d7c <_scanf_float+0x340>
 8003d94:	e699      	b.n	8003aca <_scanf_float+0x8e>
 8003d96:	9b03      	ldr	r3, [sp, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0c0      	beq.n	8003d1e <_scanf_float+0x2e2>
 8003d9c:	9904      	ldr	r1, [sp, #16]
 8003d9e:	230a      	movs	r3, #10
 8003da0:	4632      	mov	r2, r6
 8003da2:	3101      	adds	r1, #1
 8003da4:	4638      	mov	r0, r7
 8003da6:	f000 ff77 	bl	8004c98 <_strtol_r>
 8003daa:	9b03      	ldr	r3, [sp, #12]
 8003dac:	9d04      	ldr	r5, [sp, #16]
 8003dae:	1ac2      	subs	r2, r0, r3
 8003db0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003db4:	429d      	cmp	r5, r3
 8003db6:	bf28      	it	cs
 8003db8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003dbc:	490e      	ldr	r1, [pc, #56]	; (8003df8 <_scanf_float+0x3bc>)
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f000 f89c 	bl	8003efc <siprintf>
 8003dc4:	e7ab      	b.n	8003d1e <_scanf_float+0x2e2>
 8003dc6:	1d1f      	adds	r7, r3, #4
 8003dc8:	f015 0504 	ands.w	r5, r5, #4
 8003dcc:	f8ca 7000 	str.w	r7, [sl]
 8003dd0:	d1b5      	bne.n	8003d3e <_scanf_float+0x302>
 8003dd2:	681f      	ldr	r7, [r3, #0]
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	f7fc fe18 	bl	8000a0c <__aeabi_dcmpun>
 8003ddc:	b120      	cbz	r0, 8003de8 <_scanf_float+0x3ac>
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f888 	bl	8003ef4 <nanf>
 8003de4:	6038      	str	r0, [r7, #0]
 8003de6:	e7ad      	b.n	8003d44 <_scanf_float+0x308>
 8003de8:	4640      	mov	r0, r8
 8003dea:	4649      	mov	r1, r9
 8003dec:	f7fc fe6c 	bl	8000ac8 <__aeabi_d2f>
 8003df0:	e7f8      	b.n	8003de4 <_scanf_float+0x3a8>
 8003df2:	2600      	movs	r6, #0
 8003df4:	e66a      	b.n	8003acc <_scanf_float+0x90>
 8003df6:	bf00      	nop
 8003df8:	08007700 	.word	0x08007700

08003dfc <iprintf>:
 8003dfc:	b40f      	push	{r0, r1, r2, r3}
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <iprintf+0x2c>)
 8003e00:	b513      	push	{r0, r1, r4, lr}
 8003e02:	681c      	ldr	r4, [r3, #0]
 8003e04:	b124      	cbz	r4, 8003e10 <iprintf+0x14>
 8003e06:	69a3      	ldr	r3, [r4, #24]
 8003e08:	b913      	cbnz	r3, 8003e10 <iprintf+0x14>
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f001 ff48 	bl	8005ca0 <__sinit>
 8003e10:	ab05      	add	r3, sp, #20
 8003e12:	9a04      	ldr	r2, [sp, #16]
 8003e14:	68a1      	ldr	r1, [r4, #8]
 8003e16:	4620      	mov	r0, r4
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	f003 f9c5 	bl	80071a8 <_vfiprintf_r>
 8003e1e:	b002      	add	sp, #8
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e24:	b004      	add	sp, #16
 8003e26:	4770      	bx	lr
 8003e28:	20000010 	.word	0x20000010

08003e2c <_puts_r>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	460e      	mov	r6, r1
 8003e30:	4605      	mov	r5, r0
 8003e32:	b118      	cbz	r0, 8003e3c <_puts_r+0x10>
 8003e34:	6983      	ldr	r3, [r0, #24]
 8003e36:	b90b      	cbnz	r3, 8003e3c <_puts_r+0x10>
 8003e38:	f001 ff32 	bl	8005ca0 <__sinit>
 8003e3c:	69ab      	ldr	r3, [r5, #24]
 8003e3e:	68ac      	ldr	r4, [r5, #8]
 8003e40:	b913      	cbnz	r3, 8003e48 <_puts_r+0x1c>
 8003e42:	4628      	mov	r0, r5
 8003e44:	f001 ff2c 	bl	8005ca0 <__sinit>
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <_puts_r+0xac>)
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	d117      	bne.n	8003e7e <_puts_r+0x52>
 8003e4e:	686c      	ldr	r4, [r5, #4]
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	071b      	lsls	r3, r3, #28
 8003e54:	d51d      	bpl.n	8003e92 <_puts_r+0x66>
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	b1db      	cbz	r3, 8003e92 <_puts_r+0x66>
 8003e5a:	3e01      	subs	r6, #1
 8003e5c:	68a3      	ldr	r3, [r4, #8]
 8003e5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e62:	3b01      	subs	r3, #1
 8003e64:	60a3      	str	r3, [r4, #8]
 8003e66:	b9e9      	cbnz	r1, 8003ea4 <_puts_r+0x78>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	da2e      	bge.n	8003eca <_puts_r+0x9e>
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	210a      	movs	r1, #10
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 ff23 	bl	8004cbc <__swbuf_r>
 8003e76:	3001      	adds	r0, #1
 8003e78:	d011      	beq.n	8003e9e <_puts_r+0x72>
 8003e7a:	200a      	movs	r0, #10
 8003e7c:	e011      	b.n	8003ea2 <_puts_r+0x76>
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <_puts_r+0xb0>)
 8003e80:	429c      	cmp	r4, r3
 8003e82:	d101      	bne.n	8003e88 <_puts_r+0x5c>
 8003e84:	68ac      	ldr	r4, [r5, #8]
 8003e86:	e7e3      	b.n	8003e50 <_puts_r+0x24>
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <_puts_r+0xb4>)
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	bf08      	it	eq
 8003e8e:	68ec      	ldreq	r4, [r5, #12]
 8003e90:	e7de      	b.n	8003e50 <_puts_r+0x24>
 8003e92:	4621      	mov	r1, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	f000 ff63 	bl	8004d60 <__swsetup_r>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d0dd      	beq.n	8003e5a <_puts_r+0x2e>
 8003e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da04      	bge.n	8003eb2 <_puts_r+0x86>
 8003ea8:	69a2      	ldr	r2, [r4, #24]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	dc06      	bgt.n	8003ebc <_puts_r+0x90>
 8003eae:	290a      	cmp	r1, #10
 8003eb0:	d004      	beq.n	8003ebc <_puts_r+0x90>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	6022      	str	r2, [r4, #0]
 8003eb8:	7019      	strb	r1, [r3, #0]
 8003eba:	e7cf      	b.n	8003e5c <_puts_r+0x30>
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 fefc 	bl	8004cbc <__swbuf_r>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d1c9      	bne.n	8003e5c <_puts_r+0x30>
 8003ec8:	e7e9      	b.n	8003e9e <_puts_r+0x72>
 8003eca:	200a      	movs	r0, #10
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	6022      	str	r2, [r4, #0]
 8003ed2:	7018      	strb	r0, [r3, #0]
 8003ed4:	e7e5      	b.n	8003ea2 <_puts_r+0x76>
 8003ed6:	bf00      	nop
 8003ed8:	08007788 	.word	0x08007788
 8003edc:	080077a8 	.word	0x080077a8
 8003ee0:	08007768 	.word	0x08007768

08003ee4 <puts>:
 8003ee4:	4b02      	ldr	r3, [pc, #8]	; (8003ef0 <puts+0xc>)
 8003ee6:	4601      	mov	r1, r0
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	f7ff bf9f 	b.w	8003e2c <_puts_r>
 8003eee:	bf00      	nop
 8003ef0:	20000010 	.word	0x20000010

08003ef4 <nanf>:
 8003ef4:	4800      	ldr	r0, [pc, #0]	; (8003ef8 <nanf+0x4>)
 8003ef6:	4770      	bx	lr
 8003ef8:	7fc00000 	.word	0x7fc00000

08003efc <siprintf>:
 8003efc:	b40e      	push	{r1, r2, r3}
 8003efe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f02:	b500      	push	{lr}
 8003f04:	b09c      	sub	sp, #112	; 0x70
 8003f06:	ab1d      	add	r3, sp, #116	; 0x74
 8003f08:	9002      	str	r0, [sp, #8]
 8003f0a:	9006      	str	r0, [sp, #24]
 8003f0c:	9107      	str	r1, [sp, #28]
 8003f0e:	9104      	str	r1, [sp, #16]
 8003f10:	4808      	ldr	r0, [pc, #32]	; (8003f34 <siprintf+0x38>)
 8003f12:	4909      	ldr	r1, [pc, #36]	; (8003f38 <siprintf+0x3c>)
 8003f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f18:	9105      	str	r1, [sp, #20]
 8003f1a:	6800      	ldr	r0, [r0, #0]
 8003f1c:	a902      	add	r1, sp, #8
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	f003 f822 	bl	8006f68 <_svfiprintf_r>
 8003f24:	2200      	movs	r2, #0
 8003f26:	9b02      	ldr	r3, [sp, #8]
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	b01c      	add	sp, #112	; 0x70
 8003f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f30:	b003      	add	sp, #12
 8003f32:	4770      	bx	lr
 8003f34:	20000010 	.word	0x20000010
 8003f38:	ffff0208 	.word	0xffff0208

08003f3c <sulp>:
 8003f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f40:	460f      	mov	r7, r1
 8003f42:	4690      	mov	r8, r2
 8003f44:	f002 fdd4 	bl	8006af0 <__ulp>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	460d      	mov	r5, r1
 8003f4c:	f1b8 0f00 	cmp.w	r8, #0
 8003f50:	d011      	beq.n	8003f76 <sulp+0x3a>
 8003f52:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003f56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	dd0b      	ble.n	8003f76 <sulp+0x3a>
 8003f5e:	2400      	movs	r4, #0
 8003f60:	051b      	lsls	r3, r3, #20
 8003f62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003f66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	f7fc fab3 	bl	80004d8 <__aeabi_dmul>
 8003f72:	4604      	mov	r4, r0
 8003f74:	460d      	mov	r5, r1
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003f80 <_strtod_l>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	461f      	mov	r7, r3
 8003f86:	2300      	movs	r3, #0
 8003f88:	b0a1      	sub	sp, #132	; 0x84
 8003f8a:	4683      	mov	fp, r0
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	460e      	mov	r6, r1
 8003f90:	9217      	str	r2, [sp, #92]	; 0x5c
 8003f92:	931c      	str	r3, [sp, #112]	; 0x70
 8003f94:	f002 fa39 	bl	800640a <__localeconv_l>
 8003f98:	4680      	mov	r8, r0
 8003f9a:	6800      	ldr	r0, [r0, #0]
 8003f9c:	f7fc f8d8 	bl	8000150 <strlen>
 8003fa0:	f04f 0900 	mov.w	r9, #0
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	f04f 0a00 	mov.w	sl, #0
 8003faa:	961b      	str	r6, [sp, #108]	; 0x6c
 8003fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	2a0d      	cmp	r2, #13
 8003fb2:	d832      	bhi.n	800401a <_strtod_l+0x9a>
 8003fb4:	2a09      	cmp	r2, #9
 8003fb6:	d236      	bcs.n	8004026 <_strtod_l+0xa6>
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	d03e      	beq.n	800403a <_strtod_l+0xba>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8003fc0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003fc2:	782b      	ldrb	r3, [r5, #0]
 8003fc4:	2b30      	cmp	r3, #48	; 0x30
 8003fc6:	f040 80ac 	bne.w	8004122 <_strtod_l+0x1a2>
 8003fca:	786b      	ldrb	r3, [r5, #1]
 8003fcc:	2b58      	cmp	r3, #88	; 0x58
 8003fce:	d001      	beq.n	8003fd4 <_strtod_l+0x54>
 8003fd0:	2b78      	cmp	r3, #120	; 0x78
 8003fd2:	d167      	bne.n	80040a4 <_strtod_l+0x124>
 8003fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fd6:	9702      	str	r7, [sp, #8]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	ab1c      	add	r3, sp, #112	; 0x70
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4a89      	ldr	r2, [pc, #548]	; (8004204 <_strtod_l+0x284>)
 8003fe0:	ab1d      	add	r3, sp, #116	; 0x74
 8003fe2:	a91b      	add	r1, sp, #108	; 0x6c
 8003fe4:	4658      	mov	r0, fp
 8003fe6:	f001 ff35 	bl	8005e54 <__gethex>
 8003fea:	f010 0407 	ands.w	r4, r0, #7
 8003fee:	4606      	mov	r6, r0
 8003ff0:	d005      	beq.n	8003ffe <_strtod_l+0x7e>
 8003ff2:	2c06      	cmp	r4, #6
 8003ff4:	d12b      	bne.n	800404e <_strtod_l+0xce>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	3501      	adds	r5, #1
 8003ffa:	951b      	str	r5, [sp, #108]	; 0x6c
 8003ffc:	930d      	str	r3, [sp, #52]	; 0x34
 8003ffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 85a6 	bne.w	8004b52 <_strtod_l+0xbd2>
 8004006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004008:	b1e3      	cbz	r3, 8004044 <_strtod_l+0xc4>
 800400a:	464a      	mov	r2, r9
 800400c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	b021      	add	sp, #132	; 0x84
 8004016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401a:	2a2b      	cmp	r2, #43	; 0x2b
 800401c:	d015      	beq.n	800404a <_strtod_l+0xca>
 800401e:	2a2d      	cmp	r2, #45	; 0x2d
 8004020:	d004      	beq.n	800402c <_strtod_l+0xac>
 8004022:	2a20      	cmp	r2, #32
 8004024:	d1ca      	bne.n	8003fbc <_strtod_l+0x3c>
 8004026:	3301      	adds	r3, #1
 8004028:	931b      	str	r3, [sp, #108]	; 0x6c
 800402a:	e7bf      	b.n	8003fac <_strtod_l+0x2c>
 800402c:	2201      	movs	r2, #1
 800402e:	920d      	str	r2, [sp, #52]	; 0x34
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	921b      	str	r2, [sp, #108]	; 0x6c
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1c2      	bne.n	8003fc0 <_strtod_l+0x40>
 800403a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800403c:	961b      	str	r6, [sp, #108]	; 0x6c
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 8585 	bne.w	8004b4e <_strtod_l+0xbce>
 8004044:	464a      	mov	r2, r9
 8004046:	4653      	mov	r3, sl
 8004048:	e7e2      	b.n	8004010 <_strtod_l+0x90>
 800404a:	2200      	movs	r2, #0
 800404c:	e7ef      	b.n	800402e <_strtod_l+0xae>
 800404e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004050:	b13a      	cbz	r2, 8004062 <_strtod_l+0xe2>
 8004052:	2135      	movs	r1, #53	; 0x35
 8004054:	a81e      	add	r0, sp, #120	; 0x78
 8004056:	f002 fe3e 	bl	8006cd6 <__copybits>
 800405a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800405c:	4658      	mov	r0, fp
 800405e:	f002 fab0 	bl	80065c2 <_Bfree>
 8004062:	3c01      	subs	r4, #1
 8004064:	2c04      	cmp	r4, #4
 8004066:	d806      	bhi.n	8004076 <_strtod_l+0xf6>
 8004068:	e8df f004 	tbb	[pc, r4]
 800406c:	1714030a 	.word	0x1714030a
 8004070:	0a          	.byte	0x0a
 8004071:	00          	.byte	0x00
 8004072:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004076:	0731      	lsls	r1, r6, #28
 8004078:	d5c1      	bpl.n	8003ffe <_strtod_l+0x7e>
 800407a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800407e:	e7be      	b.n	8003ffe <_strtod_l+0x7e>
 8004080:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004082:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004086:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800408a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800408e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004092:	e7f0      	b.n	8004076 <_strtod_l+0xf6>
 8004094:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004208 <_strtod_l+0x288>
 8004098:	e7ed      	b.n	8004076 <_strtod_l+0xf6>
 800409a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800409e:	f04f 39ff 	mov.w	r9, #4294967295
 80040a2:	e7e8      	b.n	8004076 <_strtod_l+0xf6>
 80040a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b30      	cmp	r3, #48	; 0x30
 80040ae:	d0f9      	beq.n	80040a4 <_strtod_l+0x124>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0a4      	beq.n	8003ffe <_strtod_l+0x7e>
 80040b4:	2301      	movs	r3, #1
 80040b6:	2500      	movs	r5, #0
 80040b8:	220a      	movs	r2, #10
 80040ba:	9307      	str	r3, [sp, #28]
 80040bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040be:	9506      	str	r5, [sp, #24]
 80040c0:	9308      	str	r3, [sp, #32]
 80040c2:	9504      	str	r5, [sp, #16]
 80040c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80040c6:	7807      	ldrb	r7, [r0, #0]
 80040c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80040cc:	b2d9      	uxtb	r1, r3
 80040ce:	2909      	cmp	r1, #9
 80040d0:	d929      	bls.n	8004126 <_strtod_l+0x1a6>
 80040d2:	4622      	mov	r2, r4
 80040d4:	f8d8 1000 	ldr.w	r1, [r8]
 80040d8:	f003 f9cf 	bl	800747a <strncmp>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d031      	beq.n	8004144 <_strtod_l+0x1c4>
 80040e0:	2000      	movs	r0, #0
 80040e2:	463b      	mov	r3, r7
 80040e4:	4602      	mov	r2, r0
 80040e6:	9c04      	ldr	r4, [sp, #16]
 80040e8:	9005      	str	r0, [sp, #20]
 80040ea:	2b65      	cmp	r3, #101	; 0x65
 80040ec:	d001      	beq.n	80040f2 <_strtod_l+0x172>
 80040ee:	2b45      	cmp	r3, #69	; 0x45
 80040f0:	d114      	bne.n	800411c <_strtod_l+0x19c>
 80040f2:	b924      	cbnz	r4, 80040fe <_strtod_l+0x17e>
 80040f4:	b910      	cbnz	r0, 80040fc <_strtod_l+0x17c>
 80040f6:	9b07      	ldr	r3, [sp, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d09e      	beq.n	800403a <_strtod_l+0xba>
 80040fc:	2400      	movs	r4, #0
 80040fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004100:	1c73      	adds	r3, r6, #1
 8004102:	931b      	str	r3, [sp, #108]	; 0x6c
 8004104:	7873      	ldrb	r3, [r6, #1]
 8004106:	2b2b      	cmp	r3, #43	; 0x2b
 8004108:	d078      	beq.n	80041fc <_strtod_l+0x27c>
 800410a:	2b2d      	cmp	r3, #45	; 0x2d
 800410c:	d070      	beq.n	80041f0 <_strtod_l+0x270>
 800410e:	f04f 0c00 	mov.w	ip, #0
 8004112:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004116:	2f09      	cmp	r7, #9
 8004118:	d97c      	bls.n	8004214 <_strtod_l+0x294>
 800411a:	961b      	str	r6, [sp, #108]	; 0x6c
 800411c:	f04f 0e00 	mov.w	lr, #0
 8004120:	e09a      	b.n	8004258 <_strtod_l+0x2d8>
 8004122:	2300      	movs	r3, #0
 8004124:	e7c7      	b.n	80040b6 <_strtod_l+0x136>
 8004126:	9904      	ldr	r1, [sp, #16]
 8004128:	3001      	adds	r0, #1
 800412a:	2908      	cmp	r1, #8
 800412c:	bfd7      	itett	le
 800412e:	9906      	ldrle	r1, [sp, #24]
 8004130:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004134:	fb02 3301 	mlale	r3, r2, r1, r3
 8004138:	9306      	strle	r3, [sp, #24]
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	901b      	str	r0, [sp, #108]	; 0x6c
 800413e:	3301      	adds	r3, #1
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	e7bf      	b.n	80040c4 <_strtod_l+0x144>
 8004144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004146:	191a      	adds	r2, r3, r4
 8004148:	921b      	str	r2, [sp, #108]	; 0x6c
 800414a:	9a04      	ldr	r2, [sp, #16]
 800414c:	5d1b      	ldrb	r3, [r3, r4]
 800414e:	2a00      	cmp	r2, #0
 8004150:	d037      	beq.n	80041c2 <_strtod_l+0x242>
 8004152:	4602      	mov	r2, r0
 8004154:	9c04      	ldr	r4, [sp, #16]
 8004156:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800415a:	2909      	cmp	r1, #9
 800415c:	d913      	bls.n	8004186 <_strtod_l+0x206>
 800415e:	2101      	movs	r1, #1
 8004160:	9105      	str	r1, [sp, #20]
 8004162:	e7c2      	b.n	80040ea <_strtod_l+0x16a>
 8004164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004166:	3001      	adds	r0, #1
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	921b      	str	r2, [sp, #108]	; 0x6c
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	2b30      	cmp	r3, #48	; 0x30
 8004170:	d0f8      	beq.n	8004164 <_strtod_l+0x1e4>
 8004172:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004176:	2a08      	cmp	r2, #8
 8004178:	f200 84f0 	bhi.w	8004b5c <_strtod_l+0xbdc>
 800417c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800417e:	9208      	str	r2, [sp, #32]
 8004180:	4602      	mov	r2, r0
 8004182:	2000      	movs	r0, #0
 8004184:	4604      	mov	r4, r0
 8004186:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800418a:	f100 0101 	add.w	r1, r0, #1
 800418e:	d012      	beq.n	80041b6 <_strtod_l+0x236>
 8004190:	440a      	add	r2, r1
 8004192:	270a      	movs	r7, #10
 8004194:	4621      	mov	r1, r4
 8004196:	eb00 0c04 	add.w	ip, r0, r4
 800419a:	458c      	cmp	ip, r1
 800419c:	d113      	bne.n	80041c6 <_strtod_l+0x246>
 800419e:	1821      	adds	r1, r4, r0
 80041a0:	2908      	cmp	r1, #8
 80041a2:	f104 0401 	add.w	r4, r4, #1
 80041a6:	4404      	add	r4, r0
 80041a8:	dc19      	bgt.n	80041de <_strtod_l+0x25e>
 80041aa:	210a      	movs	r1, #10
 80041ac:	9b06      	ldr	r3, [sp, #24]
 80041ae:	fb01 e303 	mla	r3, r1, r3, lr
 80041b2:	9306      	str	r3, [sp, #24]
 80041b4:	2100      	movs	r1, #0
 80041b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041b8:	1c58      	adds	r0, r3, #1
 80041ba:	901b      	str	r0, [sp, #108]	; 0x6c
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	4608      	mov	r0, r1
 80041c0:	e7c9      	b.n	8004156 <_strtod_l+0x1d6>
 80041c2:	9804      	ldr	r0, [sp, #16]
 80041c4:	e7d3      	b.n	800416e <_strtod_l+0x1ee>
 80041c6:	2908      	cmp	r1, #8
 80041c8:	f101 0101 	add.w	r1, r1, #1
 80041cc:	dc03      	bgt.n	80041d6 <_strtod_l+0x256>
 80041ce:	9b06      	ldr	r3, [sp, #24]
 80041d0:	437b      	muls	r3, r7
 80041d2:	9306      	str	r3, [sp, #24]
 80041d4:	e7e1      	b.n	800419a <_strtod_l+0x21a>
 80041d6:	2910      	cmp	r1, #16
 80041d8:	bfd8      	it	le
 80041da:	437d      	mulle	r5, r7
 80041dc:	e7dd      	b.n	800419a <_strtod_l+0x21a>
 80041de:	2c10      	cmp	r4, #16
 80041e0:	bfdc      	itt	le
 80041e2:	210a      	movle	r1, #10
 80041e4:	fb01 e505 	mlale	r5, r1, r5, lr
 80041e8:	e7e4      	b.n	80041b4 <_strtod_l+0x234>
 80041ea:	2301      	movs	r3, #1
 80041ec:	9305      	str	r3, [sp, #20]
 80041ee:	e781      	b.n	80040f4 <_strtod_l+0x174>
 80041f0:	f04f 0c01 	mov.w	ip, #1
 80041f4:	1cb3      	adds	r3, r6, #2
 80041f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80041f8:	78b3      	ldrb	r3, [r6, #2]
 80041fa:	e78a      	b.n	8004112 <_strtod_l+0x192>
 80041fc:	f04f 0c00 	mov.w	ip, #0
 8004200:	e7f8      	b.n	80041f4 <_strtod_l+0x274>
 8004202:	bf00      	nop
 8004204:	08007708 	.word	0x08007708
 8004208:	7ff00000 	.word	0x7ff00000
 800420c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800420e:	1c5f      	adds	r7, r3, #1
 8004210:	971b      	str	r7, [sp, #108]	; 0x6c
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d0f9      	beq.n	800420c <_strtod_l+0x28c>
 8004218:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800421c:	2f08      	cmp	r7, #8
 800421e:	f63f af7d 	bhi.w	800411c <_strtod_l+0x19c>
 8004222:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004228:	9309      	str	r3, [sp, #36]	; 0x24
 800422a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800422c:	1c5f      	adds	r7, r3, #1
 800422e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004236:	f1b8 0f09 	cmp.w	r8, #9
 800423a:	d937      	bls.n	80042ac <_strtod_l+0x32c>
 800423c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800423e:	1a7f      	subs	r7, r7, r1
 8004240:	2f08      	cmp	r7, #8
 8004242:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004246:	dc37      	bgt.n	80042b8 <_strtod_l+0x338>
 8004248:	45be      	cmp	lr, r7
 800424a:	bfa8      	it	ge
 800424c:	46be      	movge	lr, r7
 800424e:	f1bc 0f00 	cmp.w	ip, #0
 8004252:	d001      	beq.n	8004258 <_strtod_l+0x2d8>
 8004254:	f1ce 0e00 	rsb	lr, lr, #0
 8004258:	2c00      	cmp	r4, #0
 800425a:	d151      	bne.n	8004300 <_strtod_l+0x380>
 800425c:	2800      	cmp	r0, #0
 800425e:	f47f aece 	bne.w	8003ffe <_strtod_l+0x7e>
 8004262:	9a07      	ldr	r2, [sp, #28]
 8004264:	2a00      	cmp	r2, #0
 8004266:	f47f aeca 	bne.w	8003ffe <_strtod_l+0x7e>
 800426a:	9a05      	ldr	r2, [sp, #20]
 800426c:	2a00      	cmp	r2, #0
 800426e:	f47f aee4 	bne.w	800403a <_strtod_l+0xba>
 8004272:	2b4e      	cmp	r3, #78	; 0x4e
 8004274:	d027      	beq.n	80042c6 <_strtod_l+0x346>
 8004276:	dc21      	bgt.n	80042bc <_strtod_l+0x33c>
 8004278:	2b49      	cmp	r3, #73	; 0x49
 800427a:	f47f aede 	bne.w	800403a <_strtod_l+0xba>
 800427e:	49a4      	ldr	r1, [pc, #656]	; (8004510 <_strtod_l+0x590>)
 8004280:	a81b      	add	r0, sp, #108	; 0x6c
 8004282:	f002 f81b 	bl	80062bc <__match>
 8004286:	2800      	cmp	r0, #0
 8004288:	f43f aed7 	beq.w	800403a <_strtod_l+0xba>
 800428c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800428e:	49a1      	ldr	r1, [pc, #644]	; (8004514 <_strtod_l+0x594>)
 8004290:	3b01      	subs	r3, #1
 8004292:	a81b      	add	r0, sp, #108	; 0x6c
 8004294:	931b      	str	r3, [sp, #108]	; 0x6c
 8004296:	f002 f811 	bl	80062bc <__match>
 800429a:	b910      	cbnz	r0, 80042a2 <_strtod_l+0x322>
 800429c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800429e:	3301      	adds	r3, #1
 80042a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80042a2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004528 <_strtod_l+0x5a8>
 80042a6:	f04f 0900 	mov.w	r9, #0
 80042aa:	e6a8      	b.n	8003ffe <_strtod_l+0x7e>
 80042ac:	210a      	movs	r1, #10
 80042ae:	fb01 3e0e 	mla	lr, r1, lr, r3
 80042b2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80042b6:	e7b8      	b.n	800422a <_strtod_l+0x2aa>
 80042b8:	46be      	mov	lr, r7
 80042ba:	e7c8      	b.n	800424e <_strtod_l+0x2ce>
 80042bc:	2b69      	cmp	r3, #105	; 0x69
 80042be:	d0de      	beq.n	800427e <_strtod_l+0x2fe>
 80042c0:	2b6e      	cmp	r3, #110	; 0x6e
 80042c2:	f47f aeba 	bne.w	800403a <_strtod_l+0xba>
 80042c6:	4994      	ldr	r1, [pc, #592]	; (8004518 <_strtod_l+0x598>)
 80042c8:	a81b      	add	r0, sp, #108	; 0x6c
 80042ca:	f001 fff7 	bl	80062bc <__match>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f43f aeb3 	beq.w	800403a <_strtod_l+0xba>
 80042d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b28      	cmp	r3, #40	; 0x28
 80042da:	d10e      	bne.n	80042fa <_strtod_l+0x37a>
 80042dc:	aa1e      	add	r2, sp, #120	; 0x78
 80042de:	498f      	ldr	r1, [pc, #572]	; (800451c <_strtod_l+0x59c>)
 80042e0:	a81b      	add	r0, sp, #108	; 0x6c
 80042e2:	f001 ffff 	bl	80062e4 <__hexnan>
 80042e6:	2805      	cmp	r0, #5
 80042e8:	d107      	bne.n	80042fa <_strtod_l+0x37a>
 80042ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80042ec:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80042f0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80042f4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80042f8:	e681      	b.n	8003ffe <_strtod_l+0x7e>
 80042fa:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004530 <_strtod_l+0x5b0>
 80042fe:	e7d2      	b.n	80042a6 <_strtod_l+0x326>
 8004300:	ebae 0302 	sub.w	r3, lr, r2
 8004304:	9307      	str	r3, [sp, #28]
 8004306:	9b04      	ldr	r3, [sp, #16]
 8004308:	9806      	ldr	r0, [sp, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf08      	it	eq
 800430e:	4623      	moveq	r3, r4
 8004310:	2c10      	cmp	r4, #16
 8004312:	9304      	str	r3, [sp, #16]
 8004314:	46a0      	mov	r8, r4
 8004316:	bfa8      	it	ge
 8004318:	f04f 0810 	movge.w	r8, #16
 800431c:	f7fc f862 	bl	80003e4 <__aeabi_ui2d>
 8004320:	2c09      	cmp	r4, #9
 8004322:	4681      	mov	r9, r0
 8004324:	468a      	mov	sl, r1
 8004326:	dc13      	bgt.n	8004350 <_strtod_l+0x3d0>
 8004328:	9b07      	ldr	r3, [sp, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f43f ae67 	beq.w	8003ffe <_strtod_l+0x7e>
 8004330:	9b07      	ldr	r3, [sp, #28]
 8004332:	dd7e      	ble.n	8004432 <_strtod_l+0x4b2>
 8004334:	2b16      	cmp	r3, #22
 8004336:	dc65      	bgt.n	8004404 <_strtod_l+0x484>
 8004338:	4a79      	ldr	r2, [pc, #484]	; (8004520 <_strtod_l+0x5a0>)
 800433a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800433e:	464a      	mov	r2, r9
 8004340:	e9de 0100 	ldrd	r0, r1, [lr]
 8004344:	4653      	mov	r3, sl
 8004346:	f7fc f8c7 	bl	80004d8 <__aeabi_dmul>
 800434a:	4681      	mov	r9, r0
 800434c:	468a      	mov	sl, r1
 800434e:	e656      	b.n	8003ffe <_strtod_l+0x7e>
 8004350:	4b73      	ldr	r3, [pc, #460]	; (8004520 <_strtod_l+0x5a0>)
 8004352:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004356:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800435a:	f7fc f8bd 	bl	80004d8 <__aeabi_dmul>
 800435e:	4606      	mov	r6, r0
 8004360:	4628      	mov	r0, r5
 8004362:	460f      	mov	r7, r1
 8004364:	f7fc f83e 	bl	80003e4 <__aeabi_ui2d>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4630      	mov	r0, r6
 800436e:	4639      	mov	r1, r7
 8004370:	f7fb fefc 	bl	800016c <__adddf3>
 8004374:	2c0f      	cmp	r4, #15
 8004376:	4681      	mov	r9, r0
 8004378:	468a      	mov	sl, r1
 800437a:	ddd5      	ble.n	8004328 <_strtod_l+0x3a8>
 800437c:	9b07      	ldr	r3, [sp, #28]
 800437e:	eba4 0808 	sub.w	r8, r4, r8
 8004382:	4498      	add	r8, r3
 8004384:	f1b8 0f00 	cmp.w	r8, #0
 8004388:	f340 809a 	ble.w	80044c0 <_strtod_l+0x540>
 800438c:	f018 030f 	ands.w	r3, r8, #15
 8004390:	d00a      	beq.n	80043a8 <_strtod_l+0x428>
 8004392:	4963      	ldr	r1, [pc, #396]	; (8004520 <_strtod_l+0x5a0>)
 8004394:	464a      	mov	r2, r9
 8004396:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800439a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800439e:	4653      	mov	r3, sl
 80043a0:	f7fc f89a 	bl	80004d8 <__aeabi_dmul>
 80043a4:	4681      	mov	r9, r0
 80043a6:	468a      	mov	sl, r1
 80043a8:	f038 080f 	bics.w	r8, r8, #15
 80043ac:	d077      	beq.n	800449e <_strtod_l+0x51e>
 80043ae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80043b2:	dd4b      	ble.n	800444c <_strtod_l+0x4cc>
 80043b4:	f04f 0800 	mov.w	r8, #0
 80043b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80043bc:	f8cd 8020 	str.w	r8, [sp, #32]
 80043c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80043c4:	2322      	movs	r3, #34	; 0x22
 80043c6:	f04f 0900 	mov.w	r9, #0
 80043ca:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004528 <_strtod_l+0x5a8>
 80043ce:	f8cb 3000 	str.w	r3, [fp]
 80043d2:	9b08      	ldr	r3, [sp, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f43f ae12 	beq.w	8003ffe <_strtod_l+0x7e>
 80043da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80043dc:	4658      	mov	r0, fp
 80043de:	f002 f8f0 	bl	80065c2 <_Bfree>
 80043e2:	9906      	ldr	r1, [sp, #24]
 80043e4:	4658      	mov	r0, fp
 80043e6:	f002 f8ec 	bl	80065c2 <_Bfree>
 80043ea:	9904      	ldr	r1, [sp, #16]
 80043ec:	4658      	mov	r0, fp
 80043ee:	f002 f8e8 	bl	80065c2 <_Bfree>
 80043f2:	9908      	ldr	r1, [sp, #32]
 80043f4:	4658      	mov	r0, fp
 80043f6:	f002 f8e4 	bl	80065c2 <_Bfree>
 80043fa:	4641      	mov	r1, r8
 80043fc:	4658      	mov	r0, fp
 80043fe:	f002 f8e0 	bl	80065c2 <_Bfree>
 8004402:	e5fc      	b.n	8003ffe <_strtod_l+0x7e>
 8004404:	9a07      	ldr	r2, [sp, #28]
 8004406:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800440a:	4293      	cmp	r3, r2
 800440c:	dbb6      	blt.n	800437c <_strtod_l+0x3fc>
 800440e:	4d44      	ldr	r5, [pc, #272]	; (8004520 <_strtod_l+0x5a0>)
 8004410:	f1c4 040f 	rsb	r4, r4, #15
 8004414:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004418:	464a      	mov	r2, r9
 800441a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800441e:	4653      	mov	r3, sl
 8004420:	f7fc f85a 	bl	80004d8 <__aeabi_dmul>
 8004424:	9b07      	ldr	r3, [sp, #28]
 8004426:	1b1c      	subs	r4, r3, r4
 8004428:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800442c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004430:	e789      	b.n	8004346 <_strtod_l+0x3c6>
 8004432:	f113 0f16 	cmn.w	r3, #22
 8004436:	dba1      	blt.n	800437c <_strtod_l+0x3fc>
 8004438:	4a39      	ldr	r2, [pc, #228]	; (8004520 <_strtod_l+0x5a0>)
 800443a:	4648      	mov	r0, r9
 800443c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004440:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004444:	4651      	mov	r1, sl
 8004446:	f7fc f971 	bl	800072c <__aeabi_ddiv>
 800444a:	e77e      	b.n	800434a <_strtod_l+0x3ca>
 800444c:	2300      	movs	r3, #0
 800444e:	4648      	mov	r0, r9
 8004450:	4651      	mov	r1, sl
 8004452:	461d      	mov	r5, r3
 8004454:	4e33      	ldr	r6, [pc, #204]	; (8004524 <_strtod_l+0x5a4>)
 8004456:	ea4f 1828 	mov.w	r8, r8, asr #4
 800445a:	f1b8 0f01 	cmp.w	r8, #1
 800445e:	dc21      	bgt.n	80044a4 <_strtod_l+0x524>
 8004460:	b10b      	cbz	r3, 8004466 <_strtod_l+0x4e6>
 8004462:	4681      	mov	r9, r0
 8004464:	468a      	mov	sl, r1
 8004466:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <_strtod_l+0x5a4>)
 8004468:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800446c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004470:	464a      	mov	r2, r9
 8004472:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004476:	4653      	mov	r3, sl
 8004478:	f7fc f82e 	bl	80004d8 <__aeabi_dmul>
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <_strtod_l+0x5a8>)
 800447e:	460a      	mov	r2, r1
 8004480:	400b      	ands	r3, r1
 8004482:	492a      	ldr	r1, [pc, #168]	; (800452c <_strtod_l+0x5ac>)
 8004484:	4681      	mov	r9, r0
 8004486:	428b      	cmp	r3, r1
 8004488:	d894      	bhi.n	80043b4 <_strtod_l+0x434>
 800448a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800448e:	428b      	cmp	r3, r1
 8004490:	bf86      	itte	hi
 8004492:	f04f 39ff 	movhi.w	r9, #4294967295
 8004496:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004534 <_strtod_l+0x5b4>
 800449a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800449e:	2300      	movs	r3, #0
 80044a0:	9305      	str	r3, [sp, #20]
 80044a2:	e07b      	b.n	800459c <_strtod_l+0x61c>
 80044a4:	f018 0f01 	tst.w	r8, #1
 80044a8:	d006      	beq.n	80044b8 <_strtod_l+0x538>
 80044aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fc f811 	bl	80004d8 <__aeabi_dmul>
 80044b6:	2301      	movs	r3, #1
 80044b8:	3501      	adds	r5, #1
 80044ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80044be:	e7cc      	b.n	800445a <_strtod_l+0x4da>
 80044c0:	d0ed      	beq.n	800449e <_strtod_l+0x51e>
 80044c2:	f1c8 0800 	rsb	r8, r8, #0
 80044c6:	f018 020f 	ands.w	r2, r8, #15
 80044ca:	d00a      	beq.n	80044e2 <_strtod_l+0x562>
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <_strtod_l+0x5a0>)
 80044ce:	4648      	mov	r0, r9
 80044d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044d4:	4651      	mov	r1, sl
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f7fc f927 	bl	800072c <__aeabi_ddiv>
 80044de:	4681      	mov	r9, r0
 80044e0:	468a      	mov	sl, r1
 80044e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80044e6:	d0da      	beq.n	800449e <_strtod_l+0x51e>
 80044e8:	f1b8 0f1f 	cmp.w	r8, #31
 80044ec:	dd24      	ble.n	8004538 <_strtod_l+0x5b8>
 80044ee:	f04f 0800 	mov.w	r8, #0
 80044f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80044f6:	f8cd 8020 	str.w	r8, [sp, #32]
 80044fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80044fe:	2322      	movs	r3, #34	; 0x22
 8004500:	f04f 0900 	mov.w	r9, #0
 8004504:	f04f 0a00 	mov.w	sl, #0
 8004508:	f8cb 3000 	str.w	r3, [fp]
 800450c:	e761      	b.n	80043d2 <_strtod_l+0x452>
 800450e:	bf00      	nop
 8004510:	080076d1 	.word	0x080076d1
 8004514:	0800775b 	.word	0x0800775b
 8004518:	080076d9 	.word	0x080076d9
 800451c:	0800771c 	.word	0x0800771c
 8004520:	08007800 	.word	0x08007800
 8004524:	080077d8 	.word	0x080077d8
 8004528:	7ff00000 	.word	0x7ff00000
 800452c:	7ca00000 	.word	0x7ca00000
 8004530:	fff80000 	.word	0xfff80000
 8004534:	7fefffff 	.word	0x7fefffff
 8004538:	f018 0310 	ands.w	r3, r8, #16
 800453c:	bf18      	it	ne
 800453e:	236a      	movne	r3, #106	; 0x6a
 8004540:	4648      	mov	r0, r9
 8004542:	9305      	str	r3, [sp, #20]
 8004544:	4651      	mov	r1, sl
 8004546:	2300      	movs	r3, #0
 8004548:	4da1      	ldr	r5, [pc, #644]	; (80047d0 <_strtod_l+0x850>)
 800454a:	f1b8 0f00 	cmp.w	r8, #0
 800454e:	f300 8113 	bgt.w	8004778 <_strtod_l+0x7f8>
 8004552:	b10b      	cbz	r3, 8004558 <_strtod_l+0x5d8>
 8004554:	4681      	mov	r9, r0
 8004556:	468a      	mov	sl, r1
 8004558:	9b05      	ldr	r3, [sp, #20]
 800455a:	b1bb      	cbz	r3, 800458c <_strtod_l+0x60c>
 800455c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004560:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004564:	2b00      	cmp	r3, #0
 8004566:	4651      	mov	r1, sl
 8004568:	dd10      	ble.n	800458c <_strtod_l+0x60c>
 800456a:	2b1f      	cmp	r3, #31
 800456c:	f340 8110 	ble.w	8004790 <_strtod_l+0x810>
 8004570:	2b34      	cmp	r3, #52	; 0x34
 8004572:	bfd8      	it	le
 8004574:	f04f 32ff 	movle.w	r2, #4294967295
 8004578:	f04f 0900 	mov.w	r9, #0
 800457c:	bfcf      	iteee	gt
 800457e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004582:	3b20      	suble	r3, #32
 8004584:	fa02 f303 	lslle.w	r3, r2, r3
 8004588:	ea03 0a01 	andle.w	sl, r3, r1
 800458c:	2200      	movs	r2, #0
 800458e:	2300      	movs	r3, #0
 8004590:	4648      	mov	r0, r9
 8004592:	4651      	mov	r1, sl
 8004594:	f7fc fa08 	bl	80009a8 <__aeabi_dcmpeq>
 8004598:	2800      	cmp	r0, #0
 800459a:	d1a8      	bne.n	80044ee <_strtod_l+0x56e>
 800459c:	9b06      	ldr	r3, [sp, #24]
 800459e:	9a04      	ldr	r2, [sp, #16]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	9908      	ldr	r1, [sp, #32]
 80045a4:	4623      	mov	r3, r4
 80045a6:	4658      	mov	r0, fp
 80045a8:	f002 f85d 	bl	8006666 <__s2b>
 80045ac:	9008      	str	r0, [sp, #32]
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f43f af00 	beq.w	80043b4 <_strtod_l+0x434>
 80045b4:	9a07      	ldr	r2, [sp, #28]
 80045b6:	9b07      	ldr	r3, [sp, #28]
 80045b8:	2a00      	cmp	r2, #0
 80045ba:	f1c3 0300 	rsb	r3, r3, #0
 80045be:	bfa8      	it	ge
 80045c0:	2300      	movge	r3, #0
 80045c2:	f04f 0800 	mov.w	r8, #0
 80045c6:	930e      	str	r3, [sp, #56]	; 0x38
 80045c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80045cc:	9316      	str	r3, [sp, #88]	; 0x58
 80045ce:	f8cd 8010 	str.w	r8, [sp, #16]
 80045d2:	9b08      	ldr	r3, [sp, #32]
 80045d4:	4658      	mov	r0, fp
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	f001 ffbf 	bl	800655a <_Balloc>
 80045dc:	9006      	str	r0, [sp, #24]
 80045de:	2800      	cmp	r0, #0
 80045e0:	f43f aef0 	beq.w	80043c4 <_strtod_l+0x444>
 80045e4:	9b08      	ldr	r3, [sp, #32]
 80045e6:	300c      	adds	r0, #12
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	f103 010c 	add.w	r1, r3, #12
 80045ee:	3202      	adds	r2, #2
 80045f0:	0092      	lsls	r2, r2, #2
 80045f2:	f001 ffa7 	bl	8006544 <memcpy>
 80045f6:	ab1e      	add	r3, sp, #120	; 0x78
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	ab1d      	add	r3, sp, #116	; 0x74
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	464a      	mov	r2, r9
 8004600:	4653      	mov	r3, sl
 8004602:	4658      	mov	r0, fp
 8004604:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004608:	f002 fae8 	bl	8006bdc <__d2b>
 800460c:	901c      	str	r0, [sp, #112]	; 0x70
 800460e:	2800      	cmp	r0, #0
 8004610:	f43f aed8 	beq.w	80043c4 <_strtod_l+0x444>
 8004614:	2101      	movs	r1, #1
 8004616:	4658      	mov	r0, fp
 8004618:	f002 f8b1 	bl	800677e <__i2b>
 800461c:	9004      	str	r0, [sp, #16]
 800461e:	4603      	mov	r3, r0
 8004620:	2800      	cmp	r0, #0
 8004622:	f43f aecf 	beq.w	80043c4 <_strtod_l+0x444>
 8004626:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004628:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800462a:	2d00      	cmp	r5, #0
 800462c:	bfab      	itete	ge
 800462e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004630:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004632:	18ee      	addge	r6, r5, r3
 8004634:	1b5c      	sublt	r4, r3, r5
 8004636:	9b05      	ldr	r3, [sp, #20]
 8004638:	bfa8      	it	ge
 800463a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800463c:	eba5 0503 	sub.w	r5, r5, r3
 8004640:	4415      	add	r5, r2
 8004642:	4b64      	ldr	r3, [pc, #400]	; (80047d4 <_strtod_l+0x854>)
 8004644:	f105 35ff 	add.w	r5, r5, #4294967295
 8004648:	bfb8      	it	lt
 800464a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800464c:	429d      	cmp	r5, r3
 800464e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004652:	f280 80af 	bge.w	80047b4 <_strtod_l+0x834>
 8004656:	1b5b      	subs	r3, r3, r5
 8004658:	2b1f      	cmp	r3, #31
 800465a:	eba2 0203 	sub.w	r2, r2, r3
 800465e:	f04f 0701 	mov.w	r7, #1
 8004662:	f300 809c 	bgt.w	800479e <_strtod_l+0x81e>
 8004666:	2500      	movs	r5, #0
 8004668:	fa07 f303 	lsl.w	r3, r7, r3
 800466c:	930f      	str	r3, [sp, #60]	; 0x3c
 800466e:	18b7      	adds	r7, r6, r2
 8004670:	9b05      	ldr	r3, [sp, #20]
 8004672:	42be      	cmp	r6, r7
 8004674:	4414      	add	r4, r2
 8004676:	441c      	add	r4, r3
 8004678:	4633      	mov	r3, r6
 800467a:	bfa8      	it	ge
 800467c:	463b      	movge	r3, r7
 800467e:	42a3      	cmp	r3, r4
 8004680:	bfa8      	it	ge
 8004682:	4623      	movge	r3, r4
 8004684:	2b00      	cmp	r3, #0
 8004686:	bfc2      	ittt	gt
 8004688:	1aff      	subgt	r7, r7, r3
 800468a:	1ae4      	subgt	r4, r4, r3
 800468c:	1af6      	subgt	r6, r6, r3
 800468e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004690:	b1bb      	cbz	r3, 80046c2 <_strtod_l+0x742>
 8004692:	461a      	mov	r2, r3
 8004694:	9904      	ldr	r1, [sp, #16]
 8004696:	4658      	mov	r0, fp
 8004698:	f002 f910 	bl	80068bc <__pow5mult>
 800469c:	9004      	str	r0, [sp, #16]
 800469e:	2800      	cmp	r0, #0
 80046a0:	f43f ae90 	beq.w	80043c4 <_strtod_l+0x444>
 80046a4:	4601      	mov	r1, r0
 80046a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80046a8:	4658      	mov	r0, fp
 80046aa:	f002 f871 	bl	8006790 <__multiply>
 80046ae:	9009      	str	r0, [sp, #36]	; 0x24
 80046b0:	2800      	cmp	r0, #0
 80046b2:	f43f ae87 	beq.w	80043c4 <_strtod_l+0x444>
 80046b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80046b8:	4658      	mov	r0, fp
 80046ba:	f001 ff82 	bl	80065c2 <_Bfree>
 80046be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c0:	931c      	str	r3, [sp, #112]	; 0x70
 80046c2:	2f00      	cmp	r7, #0
 80046c4:	dc7a      	bgt.n	80047bc <_strtod_l+0x83c>
 80046c6:	9b07      	ldr	r3, [sp, #28]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	dd08      	ble.n	80046de <_strtod_l+0x75e>
 80046cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80046ce:	9906      	ldr	r1, [sp, #24]
 80046d0:	4658      	mov	r0, fp
 80046d2:	f002 f8f3 	bl	80068bc <__pow5mult>
 80046d6:	9006      	str	r0, [sp, #24]
 80046d8:	2800      	cmp	r0, #0
 80046da:	f43f ae73 	beq.w	80043c4 <_strtod_l+0x444>
 80046de:	2c00      	cmp	r4, #0
 80046e0:	dd08      	ble.n	80046f4 <_strtod_l+0x774>
 80046e2:	4622      	mov	r2, r4
 80046e4:	9906      	ldr	r1, [sp, #24]
 80046e6:	4658      	mov	r0, fp
 80046e8:	f002 f936 	bl	8006958 <__lshift>
 80046ec:	9006      	str	r0, [sp, #24]
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f43f ae68 	beq.w	80043c4 <_strtod_l+0x444>
 80046f4:	2e00      	cmp	r6, #0
 80046f6:	dd08      	ble.n	800470a <_strtod_l+0x78a>
 80046f8:	4632      	mov	r2, r6
 80046fa:	9904      	ldr	r1, [sp, #16]
 80046fc:	4658      	mov	r0, fp
 80046fe:	f002 f92b 	bl	8006958 <__lshift>
 8004702:	9004      	str	r0, [sp, #16]
 8004704:	2800      	cmp	r0, #0
 8004706:	f43f ae5d 	beq.w	80043c4 <_strtod_l+0x444>
 800470a:	9a06      	ldr	r2, [sp, #24]
 800470c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800470e:	4658      	mov	r0, fp
 8004710:	f002 f990 	bl	8006a34 <__mdiff>
 8004714:	4680      	mov	r8, r0
 8004716:	2800      	cmp	r0, #0
 8004718:	f43f ae54 	beq.w	80043c4 <_strtod_l+0x444>
 800471c:	2400      	movs	r4, #0
 800471e:	68c3      	ldr	r3, [r0, #12]
 8004720:	9904      	ldr	r1, [sp, #16]
 8004722:	60c4      	str	r4, [r0, #12]
 8004724:	930c      	str	r3, [sp, #48]	; 0x30
 8004726:	f002 f96b 	bl	8006a00 <__mcmp>
 800472a:	42a0      	cmp	r0, r4
 800472c:	da54      	bge.n	80047d8 <_strtod_l+0x858>
 800472e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004730:	b9f3      	cbnz	r3, 8004770 <_strtod_l+0x7f0>
 8004732:	f1b9 0f00 	cmp.w	r9, #0
 8004736:	d11b      	bne.n	8004770 <_strtod_l+0x7f0>
 8004738:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800473c:	b9c3      	cbnz	r3, 8004770 <_strtod_l+0x7f0>
 800473e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004742:	0d1b      	lsrs	r3, r3, #20
 8004744:	051b      	lsls	r3, r3, #20
 8004746:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800474a:	d911      	bls.n	8004770 <_strtod_l+0x7f0>
 800474c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004750:	b91b      	cbnz	r3, 800475a <_strtod_l+0x7da>
 8004752:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004756:	2b01      	cmp	r3, #1
 8004758:	dd0a      	ble.n	8004770 <_strtod_l+0x7f0>
 800475a:	4641      	mov	r1, r8
 800475c:	2201      	movs	r2, #1
 800475e:	4658      	mov	r0, fp
 8004760:	f002 f8fa 	bl	8006958 <__lshift>
 8004764:	9904      	ldr	r1, [sp, #16]
 8004766:	4680      	mov	r8, r0
 8004768:	f002 f94a 	bl	8006a00 <__mcmp>
 800476c:	2800      	cmp	r0, #0
 800476e:	dc68      	bgt.n	8004842 <_strtod_l+0x8c2>
 8004770:	9b05      	ldr	r3, [sp, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d172      	bne.n	800485c <_strtod_l+0x8dc>
 8004776:	e630      	b.n	80043da <_strtod_l+0x45a>
 8004778:	f018 0f01 	tst.w	r8, #1
 800477c:	d004      	beq.n	8004788 <_strtod_l+0x808>
 800477e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004782:	f7fb fea9 	bl	80004d8 <__aeabi_dmul>
 8004786:	2301      	movs	r3, #1
 8004788:	ea4f 0868 	mov.w	r8, r8, asr #1
 800478c:	3508      	adds	r5, #8
 800478e:	e6dc      	b.n	800454a <_strtod_l+0x5ca>
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	ea03 0909 	and.w	r9, r3, r9
 800479c:	e6f6      	b.n	800458c <_strtod_l+0x60c>
 800479e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80047a2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80047a6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80047aa:	35e2      	adds	r5, #226	; 0xe2
 80047ac:	fa07 f505 	lsl.w	r5, r7, r5
 80047b0:	970f      	str	r7, [sp, #60]	; 0x3c
 80047b2:	e75c      	b.n	800466e <_strtod_l+0x6ee>
 80047b4:	2301      	movs	r3, #1
 80047b6:	2500      	movs	r5, #0
 80047b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80047ba:	e758      	b.n	800466e <_strtod_l+0x6ee>
 80047bc:	463a      	mov	r2, r7
 80047be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80047c0:	4658      	mov	r0, fp
 80047c2:	f002 f8c9 	bl	8006958 <__lshift>
 80047c6:	901c      	str	r0, [sp, #112]	; 0x70
 80047c8:	2800      	cmp	r0, #0
 80047ca:	f47f af7c 	bne.w	80046c6 <_strtod_l+0x746>
 80047ce:	e5f9      	b.n	80043c4 <_strtod_l+0x444>
 80047d0:	08007730 	.word	0x08007730
 80047d4:	fffffc02 	.word	0xfffffc02
 80047d8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80047dc:	f040 8089 	bne.w	80048f2 <_strtod_l+0x972>
 80047e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047e2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80047e6:	b342      	cbz	r2, 800483a <_strtod_l+0x8ba>
 80047e8:	4aaf      	ldr	r2, [pc, #700]	; (8004aa8 <_strtod_l+0xb28>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d156      	bne.n	800489c <_strtod_l+0x91c>
 80047ee:	9b05      	ldr	r3, [sp, #20]
 80047f0:	4648      	mov	r0, r9
 80047f2:	b1eb      	cbz	r3, 8004830 <_strtod_l+0x8b0>
 80047f4:	4653      	mov	r3, sl
 80047f6:	4aad      	ldr	r2, [pc, #692]	; (8004aac <_strtod_l+0xb2c>)
 80047f8:	f04f 31ff 	mov.w	r1, #4294967295
 80047fc:	401a      	ands	r2, r3
 80047fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004802:	d818      	bhi.n	8004836 <_strtod_l+0x8b6>
 8004804:	0d12      	lsrs	r2, r2, #20
 8004806:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800480a:	fa01 f303 	lsl.w	r3, r1, r3
 800480e:	4298      	cmp	r0, r3
 8004810:	d144      	bne.n	800489c <_strtod_l+0x91c>
 8004812:	4ba7      	ldr	r3, [pc, #668]	; (8004ab0 <_strtod_l+0xb30>)
 8004814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004816:	429a      	cmp	r2, r3
 8004818:	d102      	bne.n	8004820 <_strtod_l+0x8a0>
 800481a:	3001      	adds	r0, #1
 800481c:	f43f add2 	beq.w	80043c4 <_strtod_l+0x444>
 8004820:	4ba2      	ldr	r3, [pc, #648]	; (8004aac <_strtod_l+0xb2c>)
 8004822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004824:	f04f 0900 	mov.w	r9, #0
 8004828:	401a      	ands	r2, r3
 800482a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800482e:	e79f      	b.n	8004770 <_strtod_l+0x7f0>
 8004830:	f04f 33ff 	mov.w	r3, #4294967295
 8004834:	e7eb      	b.n	800480e <_strtod_l+0x88e>
 8004836:	460b      	mov	r3, r1
 8004838:	e7e9      	b.n	800480e <_strtod_l+0x88e>
 800483a:	bb7b      	cbnz	r3, 800489c <_strtod_l+0x91c>
 800483c:	f1b9 0f00 	cmp.w	r9, #0
 8004840:	d12c      	bne.n	800489c <_strtod_l+0x91c>
 8004842:	9905      	ldr	r1, [sp, #20]
 8004844:	4653      	mov	r3, sl
 8004846:	4a99      	ldr	r2, [pc, #612]	; (8004aac <_strtod_l+0xb2c>)
 8004848:	b1f1      	cbz	r1, 8004888 <_strtod_l+0x908>
 800484a:	ea02 010a 	and.w	r1, r2, sl
 800484e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004852:	dc19      	bgt.n	8004888 <_strtod_l+0x908>
 8004854:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004858:	f77f ae51 	ble.w	80044fe <_strtod_l+0x57e>
 800485c:	2300      	movs	r3, #0
 800485e:	4a95      	ldr	r2, [pc, #596]	; (8004ab4 <_strtod_l+0xb34>)
 8004860:	4648      	mov	r0, r9
 8004862:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004866:	4651      	mov	r1, sl
 8004868:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800486c:	f7fb fe34 	bl	80004d8 <__aeabi_dmul>
 8004870:	4681      	mov	r9, r0
 8004872:	468a      	mov	sl, r1
 8004874:	2900      	cmp	r1, #0
 8004876:	f47f adb0 	bne.w	80043da <_strtod_l+0x45a>
 800487a:	2800      	cmp	r0, #0
 800487c:	f47f adad 	bne.w	80043da <_strtod_l+0x45a>
 8004880:	2322      	movs	r3, #34	; 0x22
 8004882:	f8cb 3000 	str.w	r3, [fp]
 8004886:	e5a8      	b.n	80043da <_strtod_l+0x45a>
 8004888:	4013      	ands	r3, r2
 800488a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800488e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004892:	f04f 39ff 	mov.w	r9, #4294967295
 8004896:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800489a:	e769      	b.n	8004770 <_strtod_l+0x7f0>
 800489c:	b19d      	cbz	r5, 80048c6 <_strtod_l+0x946>
 800489e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a0:	421d      	tst	r5, r3
 80048a2:	f43f af65 	beq.w	8004770 <_strtod_l+0x7f0>
 80048a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048a8:	9a05      	ldr	r2, [sp, #20]
 80048aa:	4648      	mov	r0, r9
 80048ac:	4651      	mov	r1, sl
 80048ae:	b173      	cbz	r3, 80048ce <_strtod_l+0x94e>
 80048b0:	f7ff fb44 	bl	8003f3c <sulp>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048bc:	f7fb fc56 	bl	800016c <__adddf3>
 80048c0:	4681      	mov	r9, r0
 80048c2:	468a      	mov	sl, r1
 80048c4:	e754      	b.n	8004770 <_strtod_l+0x7f0>
 80048c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048c8:	ea13 0f09 	tst.w	r3, r9
 80048cc:	e7e9      	b.n	80048a2 <_strtod_l+0x922>
 80048ce:	f7ff fb35 	bl	8003f3c <sulp>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048da:	f7fb fc45 	bl	8000168 <__aeabi_dsub>
 80048de:	2200      	movs	r2, #0
 80048e0:	2300      	movs	r3, #0
 80048e2:	4681      	mov	r9, r0
 80048e4:	468a      	mov	sl, r1
 80048e6:	f7fc f85f 	bl	80009a8 <__aeabi_dcmpeq>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f47f ae07 	bne.w	80044fe <_strtod_l+0x57e>
 80048f0:	e73e      	b.n	8004770 <_strtod_l+0x7f0>
 80048f2:	9904      	ldr	r1, [sp, #16]
 80048f4:	4640      	mov	r0, r8
 80048f6:	f002 f9c0 	bl	8006c7a <__ratio>
 80048fa:	2200      	movs	r2, #0
 80048fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004900:	4606      	mov	r6, r0
 8004902:	460f      	mov	r7, r1
 8004904:	f7fc f864 	bl	80009d0 <__aeabi_dcmple>
 8004908:	2800      	cmp	r0, #0
 800490a:	d075      	beq.n	80049f8 <_strtod_l+0xa78>
 800490c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d047      	beq.n	80049a2 <_strtod_l+0xa22>
 8004912:	2600      	movs	r6, #0
 8004914:	4f68      	ldr	r7, [pc, #416]	; (8004ab8 <_strtod_l+0xb38>)
 8004916:	4d68      	ldr	r5, [pc, #416]	; (8004ab8 <_strtod_l+0xb38>)
 8004918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800491e:	0d1b      	lsrs	r3, r3, #20
 8004920:	051b      	lsls	r3, r3, #20
 8004922:	930f      	str	r3, [sp, #60]	; 0x3c
 8004924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004926:	4b65      	ldr	r3, [pc, #404]	; (8004abc <_strtod_l+0xb3c>)
 8004928:	429a      	cmp	r2, r3
 800492a:	f040 80cf 	bne.w	8004acc <_strtod_l+0xb4c>
 800492e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004932:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004938:	4648      	mov	r0, r9
 800493a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800493e:	4651      	mov	r1, sl
 8004940:	f002 f8d6 	bl	8006af0 <__ulp>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4630      	mov	r0, r6
 800494a:	4639      	mov	r1, r7
 800494c:	f7fb fdc4 	bl	80004d8 <__aeabi_dmul>
 8004950:	464a      	mov	r2, r9
 8004952:	4653      	mov	r3, sl
 8004954:	f7fb fc0a 	bl	800016c <__adddf3>
 8004958:	460b      	mov	r3, r1
 800495a:	4954      	ldr	r1, [pc, #336]	; (8004aac <_strtod_l+0xb2c>)
 800495c:	4a58      	ldr	r2, [pc, #352]	; (8004ac0 <_strtod_l+0xb40>)
 800495e:	4019      	ands	r1, r3
 8004960:	4291      	cmp	r1, r2
 8004962:	4681      	mov	r9, r0
 8004964:	d95e      	bls.n	8004a24 <_strtod_l+0xaa4>
 8004966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004968:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800496c:	4293      	cmp	r3, r2
 800496e:	d103      	bne.n	8004978 <_strtod_l+0x9f8>
 8004970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004972:	3301      	adds	r3, #1
 8004974:	f43f ad26 	beq.w	80043c4 <_strtod_l+0x444>
 8004978:	f04f 39ff 	mov.w	r9, #4294967295
 800497c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004ab0 <_strtod_l+0xb30>
 8004980:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004982:	4658      	mov	r0, fp
 8004984:	f001 fe1d 	bl	80065c2 <_Bfree>
 8004988:	9906      	ldr	r1, [sp, #24]
 800498a:	4658      	mov	r0, fp
 800498c:	f001 fe19 	bl	80065c2 <_Bfree>
 8004990:	9904      	ldr	r1, [sp, #16]
 8004992:	4658      	mov	r0, fp
 8004994:	f001 fe15 	bl	80065c2 <_Bfree>
 8004998:	4641      	mov	r1, r8
 800499a:	4658      	mov	r0, fp
 800499c:	f001 fe11 	bl	80065c2 <_Bfree>
 80049a0:	e617      	b.n	80045d2 <_strtod_l+0x652>
 80049a2:	f1b9 0f00 	cmp.w	r9, #0
 80049a6:	d119      	bne.n	80049dc <_strtod_l+0xa5c>
 80049a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049ae:	b9e3      	cbnz	r3, 80049ea <_strtod_l+0xa6a>
 80049b0:	2200      	movs	r2, #0
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <_strtod_l+0xb38>)
 80049b4:	4630      	mov	r0, r6
 80049b6:	4639      	mov	r1, r7
 80049b8:	f7fc f800 	bl	80009bc <__aeabi_dcmplt>
 80049bc:	b9c8      	cbnz	r0, 80049f2 <_strtod_l+0xa72>
 80049be:	2200      	movs	r2, #0
 80049c0:	4b40      	ldr	r3, [pc, #256]	; (8004ac4 <_strtod_l+0xb44>)
 80049c2:	4630      	mov	r0, r6
 80049c4:	4639      	mov	r1, r7
 80049c6:	f7fb fd87 	bl	80004d8 <__aeabi_dmul>
 80049ca:	4604      	mov	r4, r0
 80049cc:	460d      	mov	r5, r1
 80049ce:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80049d2:	9418      	str	r4, [sp, #96]	; 0x60
 80049d4:	9319      	str	r3, [sp, #100]	; 0x64
 80049d6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80049da:	e79d      	b.n	8004918 <_strtod_l+0x998>
 80049dc:	f1b9 0f01 	cmp.w	r9, #1
 80049e0:	d103      	bne.n	80049ea <_strtod_l+0xa6a>
 80049e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f43f ad8a 	beq.w	80044fe <_strtod_l+0x57e>
 80049ea:	2600      	movs	r6, #0
 80049ec:	4f36      	ldr	r7, [pc, #216]	; (8004ac8 <_strtod_l+0xb48>)
 80049ee:	2400      	movs	r4, #0
 80049f0:	e791      	b.n	8004916 <_strtod_l+0x996>
 80049f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80049f4:	4d33      	ldr	r5, [pc, #204]	; (8004ac4 <_strtod_l+0xb44>)
 80049f6:	e7ea      	b.n	80049ce <_strtod_l+0xa4e>
 80049f8:	4b32      	ldr	r3, [pc, #200]	; (8004ac4 <_strtod_l+0xb44>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	4630      	mov	r0, r6
 80049fe:	4639      	mov	r1, r7
 8004a00:	f7fb fd6a 	bl	80004d8 <__aeabi_dmul>
 8004a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a06:	4604      	mov	r4, r0
 8004a08:	460d      	mov	r5, r1
 8004a0a:	b933      	cbnz	r3, 8004a1a <_strtod_l+0xa9a>
 8004a0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a10:	9010      	str	r0, [sp, #64]	; 0x40
 8004a12:	9311      	str	r3, [sp, #68]	; 0x44
 8004a14:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004a18:	e77e      	b.n	8004918 <_strtod_l+0x998>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004a22:	e7f7      	b.n	8004a14 <_strtod_l+0xa94>
 8004a24:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004a28:	9b05      	ldr	r3, [sp, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1a8      	bne.n	8004980 <_strtod_l+0xa00>
 8004a2e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a32:	0d1b      	lsrs	r3, r3, #20
 8004a34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a36:	051b      	lsls	r3, r3, #20
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	4656      	mov	r6, sl
 8004a3c:	d1a0      	bne.n	8004980 <_strtod_l+0xa00>
 8004a3e:	4629      	mov	r1, r5
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7fb fff9 	bl	8000a38 <__aeabi_d2iz>
 8004a46:	f7fb fcdd 	bl	8000404 <__aeabi_i2d>
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7fb fb89 	bl	8000168 <__aeabi_dsub>
 8004a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a58:	4604      	mov	r4, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	b933      	cbnz	r3, 8004a6c <_strtod_l+0xaec>
 8004a5e:	f1b9 0f00 	cmp.w	r9, #0
 8004a62:	d103      	bne.n	8004a6c <_strtod_l+0xaec>
 8004a64:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004a68:	2e00      	cmp	r6, #0
 8004a6a:	d06a      	beq.n	8004b42 <_strtod_l+0xbc2>
 8004a6c:	a30a      	add	r3, pc, #40	; (adr r3, 8004a98 <_strtod_l+0xb18>)
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	4620      	mov	r0, r4
 8004a74:	4629      	mov	r1, r5
 8004a76:	f7fb ffa1 	bl	80009bc <__aeabi_dcmplt>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	f47f acad 	bne.w	80043da <_strtod_l+0x45a>
 8004a80:	a307      	add	r3, pc, #28	; (adr r3, 8004aa0 <_strtod_l+0xb20>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	4620      	mov	r0, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f7fb ffb5 	bl	80009f8 <__aeabi_dcmpgt>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	f43f af76 	beq.w	8004980 <_strtod_l+0xa00>
 8004a94:	e4a1      	b.n	80043da <_strtod_l+0x45a>
 8004a96:	bf00      	nop
 8004a98:	94a03595 	.word	0x94a03595
 8004a9c:	3fdfffff 	.word	0x3fdfffff
 8004aa0:	35afe535 	.word	0x35afe535
 8004aa4:	3fe00000 	.word	0x3fe00000
 8004aa8:	000fffff 	.word	0x000fffff
 8004aac:	7ff00000 	.word	0x7ff00000
 8004ab0:	7fefffff 	.word	0x7fefffff
 8004ab4:	39500000 	.word	0x39500000
 8004ab8:	3ff00000 	.word	0x3ff00000
 8004abc:	7fe00000 	.word	0x7fe00000
 8004ac0:	7c9fffff 	.word	0x7c9fffff
 8004ac4:	3fe00000 	.word	0x3fe00000
 8004ac8:	bff00000 	.word	0xbff00000
 8004acc:	9b05      	ldr	r3, [sp, #20]
 8004ace:	b313      	cbz	r3, 8004b16 <_strtod_l+0xb96>
 8004ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ad2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ad6:	d81e      	bhi.n	8004b16 <_strtod_l+0xb96>
 8004ad8:	a325      	add	r3, pc, #148	; (adr r3, 8004b70 <_strtod_l+0xbf0>)
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb ff75 	bl	80009d0 <__aeabi_dcmple>
 8004ae6:	b190      	cbz	r0, 8004b0e <_strtod_l+0xb8e>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7fb ffcc 	bl	8000a88 <__aeabi_d2uiz>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	bf08      	it	eq
 8004af4:	2001      	moveq	r0, #1
 8004af6:	f7fb fc75 	bl	80003e4 <__aeabi_ui2d>
 8004afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004afc:	4604      	mov	r4, r0
 8004afe:	460d      	mov	r5, r1
 8004b00:	b9d3      	cbnz	r3, 8004b38 <_strtod_l+0xbb8>
 8004b02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b06:	9012      	str	r0, [sp, #72]	; 0x48
 8004b08:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b0a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004b0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b10:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004b14:	1a9f      	subs	r7, r3, r2
 8004b16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b1a:	f001 ffe9 	bl	8006af0 <__ulp>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4630      	mov	r0, r6
 8004b24:	4639      	mov	r1, r7
 8004b26:	f7fb fcd7 	bl	80004d8 <__aeabi_dmul>
 8004b2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b2e:	f7fb fb1d 	bl	800016c <__adddf3>
 8004b32:	4681      	mov	r9, r0
 8004b34:	468a      	mov	sl, r1
 8004b36:	e777      	b.n	8004a28 <_strtod_l+0xaa8>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004b40:	e7e3      	b.n	8004b0a <_strtod_l+0xb8a>
 8004b42:	a30d      	add	r3, pc, #52	; (adr r3, 8004b78 <_strtod_l+0xbf8>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb ff38 	bl	80009bc <__aeabi_dcmplt>
 8004b4c:	e79f      	b.n	8004a8e <_strtod_l+0xb0e>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	930d      	str	r3, [sp, #52]	; 0x34
 8004b52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	f7ff ba55 	b.w	8004006 <_strtod_l+0x86>
 8004b5c:	2b65      	cmp	r3, #101	; 0x65
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f43f ab42 	beq.w	80041ea <_strtod_l+0x26a>
 8004b66:	2101      	movs	r1, #1
 8004b68:	4614      	mov	r4, r2
 8004b6a:	9105      	str	r1, [sp, #20]
 8004b6c:	f7ff babf 	b.w	80040ee <_strtod_l+0x16e>
 8004b70:	ffc00000 	.word	0xffc00000
 8004b74:	41dfffff 	.word	0x41dfffff
 8004b78:	94a03595 	.word	0x94a03595
 8004b7c:	3fcfffff 	.word	0x3fcfffff

08004b80 <_strtod_r>:
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <_strtod_r+0x18>)
 8004b82:	b410      	push	{r4}
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4c05      	ldr	r4, [pc, #20]	; (8004b9c <_strtod_r+0x1c>)
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bf08      	it	eq
 8004b8e:	4623      	moveq	r3, r4
 8004b90:	bc10      	pop	{r4}
 8004b92:	f7ff b9f5 	b.w	8003f80 <_strtod_l>
 8004b96:	bf00      	nop
 8004b98:	20000010 	.word	0x20000010
 8004b9c:	20000074 	.word	0x20000074

08004ba0 <_strtol_l.isra.0>:
 8004ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	4689      	mov	r9, r1
 8004ba8:	4692      	mov	sl, r2
 8004baa:	461e      	mov	r6, r3
 8004bac:	460f      	mov	r7, r1
 8004bae:	463d      	mov	r5, r7
 8004bb0:	9808      	ldr	r0, [sp, #32]
 8004bb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bb6:	f001 fc25 	bl	8006404 <__locale_ctype_ptr_l>
 8004bba:	4420      	add	r0, r4
 8004bbc:	7843      	ldrb	r3, [r0, #1]
 8004bbe:	f013 0308 	ands.w	r3, r3, #8
 8004bc2:	d132      	bne.n	8004c2a <_strtol_l.isra.0+0x8a>
 8004bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8004bc6:	d132      	bne.n	8004c2e <_strtol_l.isra.0+0x8e>
 8004bc8:	2201      	movs	r2, #1
 8004bca:	787c      	ldrb	r4, [r7, #1]
 8004bcc:	1cbd      	adds	r5, r7, #2
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	d05d      	beq.n	8004c8e <_strtol_l.isra.0+0xee>
 8004bd2:	2e10      	cmp	r6, #16
 8004bd4:	d109      	bne.n	8004bea <_strtol_l.isra.0+0x4a>
 8004bd6:	2c30      	cmp	r4, #48	; 0x30
 8004bd8:	d107      	bne.n	8004bea <_strtol_l.isra.0+0x4a>
 8004bda:	782b      	ldrb	r3, [r5, #0]
 8004bdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004be0:	2b58      	cmp	r3, #88	; 0x58
 8004be2:	d14f      	bne.n	8004c84 <_strtol_l.isra.0+0xe4>
 8004be4:	2610      	movs	r6, #16
 8004be6:	786c      	ldrb	r4, [r5, #1]
 8004be8:	3502      	adds	r5, #2
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	bf14      	ite	ne
 8004bee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004bf2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004bf6:	2700      	movs	r7, #0
 8004bf8:	fbb1 fcf6 	udiv	ip, r1, r6
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004c02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d817      	bhi.n	8004c3a <_strtol_l.isra.0+0x9a>
 8004c0a:	461c      	mov	r4, r3
 8004c0c:	42a6      	cmp	r6, r4
 8004c0e:	dd23      	ble.n	8004c58 <_strtol_l.isra.0+0xb8>
 8004c10:	1c7b      	adds	r3, r7, #1
 8004c12:	d007      	beq.n	8004c24 <_strtol_l.isra.0+0x84>
 8004c14:	4584      	cmp	ip, r0
 8004c16:	d31c      	bcc.n	8004c52 <_strtol_l.isra.0+0xb2>
 8004c18:	d101      	bne.n	8004c1e <_strtol_l.isra.0+0x7e>
 8004c1a:	45a6      	cmp	lr, r4
 8004c1c:	db19      	blt.n	8004c52 <_strtol_l.isra.0+0xb2>
 8004c1e:	2701      	movs	r7, #1
 8004c20:	fb00 4006 	mla	r0, r0, r6, r4
 8004c24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c28:	e7eb      	b.n	8004c02 <_strtol_l.isra.0+0x62>
 8004c2a:	462f      	mov	r7, r5
 8004c2c:	e7bf      	b.n	8004bae <_strtol_l.isra.0+0xe>
 8004c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c30:	bf04      	itt	eq
 8004c32:	1cbd      	addeq	r5, r7, #2
 8004c34:	787c      	ldrbeq	r4, [r7, #1]
 8004c36:	461a      	mov	r2, r3
 8004c38:	e7c9      	b.n	8004bce <_strtol_l.isra.0+0x2e>
 8004c3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004c3e:	2b19      	cmp	r3, #25
 8004c40:	d801      	bhi.n	8004c46 <_strtol_l.isra.0+0xa6>
 8004c42:	3c37      	subs	r4, #55	; 0x37
 8004c44:	e7e2      	b.n	8004c0c <_strtol_l.isra.0+0x6c>
 8004c46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004c4a:	2b19      	cmp	r3, #25
 8004c4c:	d804      	bhi.n	8004c58 <_strtol_l.isra.0+0xb8>
 8004c4e:	3c57      	subs	r4, #87	; 0x57
 8004c50:	e7dc      	b.n	8004c0c <_strtol_l.isra.0+0x6c>
 8004c52:	f04f 37ff 	mov.w	r7, #4294967295
 8004c56:	e7e5      	b.n	8004c24 <_strtol_l.isra.0+0x84>
 8004c58:	1c7b      	adds	r3, r7, #1
 8004c5a:	d108      	bne.n	8004c6e <_strtol_l.isra.0+0xce>
 8004c5c:	2322      	movs	r3, #34	; 0x22
 8004c5e:	4608      	mov	r0, r1
 8004c60:	f8c8 3000 	str.w	r3, [r8]
 8004c64:	f1ba 0f00 	cmp.w	sl, #0
 8004c68:	d107      	bne.n	8004c7a <_strtol_l.isra.0+0xda>
 8004c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6e:	b102      	cbz	r2, 8004c72 <_strtol_l.isra.0+0xd2>
 8004c70:	4240      	negs	r0, r0
 8004c72:	f1ba 0f00 	cmp.w	sl, #0
 8004c76:	d0f8      	beq.n	8004c6a <_strtol_l.isra.0+0xca>
 8004c78:	b10f      	cbz	r7, 8004c7e <_strtol_l.isra.0+0xde>
 8004c7a:	f105 39ff 	add.w	r9, r5, #4294967295
 8004c7e:	f8ca 9000 	str.w	r9, [sl]
 8004c82:	e7f2      	b.n	8004c6a <_strtol_l.isra.0+0xca>
 8004c84:	2430      	movs	r4, #48	; 0x30
 8004c86:	2e00      	cmp	r6, #0
 8004c88:	d1af      	bne.n	8004bea <_strtol_l.isra.0+0x4a>
 8004c8a:	2608      	movs	r6, #8
 8004c8c:	e7ad      	b.n	8004bea <_strtol_l.isra.0+0x4a>
 8004c8e:	2c30      	cmp	r4, #48	; 0x30
 8004c90:	d0a3      	beq.n	8004bda <_strtol_l.isra.0+0x3a>
 8004c92:	260a      	movs	r6, #10
 8004c94:	e7a9      	b.n	8004bea <_strtol_l.isra.0+0x4a>
	...

08004c98 <_strtol_r>:
 8004c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c9a:	4c06      	ldr	r4, [pc, #24]	; (8004cb4 <_strtol_r+0x1c>)
 8004c9c:	4d06      	ldr	r5, [pc, #24]	; (8004cb8 <_strtol_r+0x20>)
 8004c9e:	6824      	ldr	r4, [r4, #0]
 8004ca0:	6a24      	ldr	r4, [r4, #32]
 8004ca2:	2c00      	cmp	r4, #0
 8004ca4:	bf08      	it	eq
 8004ca6:	462c      	moveq	r4, r5
 8004ca8:	9400      	str	r4, [sp, #0]
 8004caa:	f7ff ff79 	bl	8004ba0 <_strtol_l.isra.0>
 8004cae:	b003      	add	sp, #12
 8004cb0:	bd30      	pop	{r4, r5, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000010 	.word	0x20000010
 8004cb8:	20000074 	.word	0x20000074

08004cbc <__swbuf_r>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	460e      	mov	r6, r1
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	b118      	cbz	r0, 8004cce <__swbuf_r+0x12>
 8004cc6:	6983      	ldr	r3, [r0, #24]
 8004cc8:	b90b      	cbnz	r3, 8004cce <__swbuf_r+0x12>
 8004cca:	f000 ffe9 	bl	8005ca0 <__sinit>
 8004cce:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <__swbuf_r+0x98>)
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	d12a      	bne.n	8004d2a <__swbuf_r+0x6e>
 8004cd4:	686c      	ldr	r4, [r5, #4]
 8004cd6:	69a3      	ldr	r3, [r4, #24]
 8004cd8:	60a3      	str	r3, [r4, #8]
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	071a      	lsls	r2, r3, #28
 8004cde:	d52e      	bpl.n	8004d3e <__swbuf_r+0x82>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	b363      	cbz	r3, 8004d3e <__swbuf_r+0x82>
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	b2f6      	uxtb	r6, r6
 8004cea:	1ac0      	subs	r0, r0, r3
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	4637      	mov	r7, r6
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	dc04      	bgt.n	8004cfe <__swbuf_r+0x42>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f000 ff68 	bl	8005bcc <_fflush_r>
 8004cfc:	bb28      	cbnz	r0, 8004d4a <__swbuf_r+0x8e>
 8004cfe:	68a3      	ldr	r3, [r4, #8]
 8004d00:	3001      	adds	r0, #1
 8004d02:	3b01      	subs	r3, #1
 8004d04:	60a3      	str	r3, [r4, #8]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	701e      	strb	r6, [r3, #0]
 8004d0e:	6963      	ldr	r3, [r4, #20]
 8004d10:	4283      	cmp	r3, r0
 8004d12:	d004      	beq.n	8004d1e <__swbuf_r+0x62>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	07db      	lsls	r3, r3, #31
 8004d18:	d519      	bpl.n	8004d4e <__swbuf_r+0x92>
 8004d1a:	2e0a      	cmp	r6, #10
 8004d1c:	d117      	bne.n	8004d4e <__swbuf_r+0x92>
 8004d1e:	4621      	mov	r1, r4
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 ff53 	bl	8005bcc <_fflush_r>
 8004d26:	b190      	cbz	r0, 8004d4e <__swbuf_r+0x92>
 8004d28:	e00f      	b.n	8004d4a <__swbuf_r+0x8e>
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <__swbuf_r+0x9c>)
 8004d2c:	429c      	cmp	r4, r3
 8004d2e:	d101      	bne.n	8004d34 <__swbuf_r+0x78>
 8004d30:	68ac      	ldr	r4, [r5, #8]
 8004d32:	e7d0      	b.n	8004cd6 <__swbuf_r+0x1a>
 8004d34:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <__swbuf_r+0xa0>)
 8004d36:	429c      	cmp	r4, r3
 8004d38:	bf08      	it	eq
 8004d3a:	68ec      	ldreq	r4, [r5, #12]
 8004d3c:	e7cb      	b.n	8004cd6 <__swbuf_r+0x1a>
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 f80d 	bl	8004d60 <__swsetup_r>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d0cc      	beq.n	8004ce4 <__swbuf_r+0x28>
 8004d4a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d4e:	4638      	mov	r0, r7
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d52:	bf00      	nop
 8004d54:	08007788 	.word	0x08007788
 8004d58:	080077a8 	.word	0x080077a8
 8004d5c:	08007768 	.word	0x08007768

08004d60 <__swsetup_r>:
 8004d60:	4b32      	ldr	r3, [pc, #200]	; (8004e2c <__swsetup_r+0xcc>)
 8004d62:	b570      	push	{r4, r5, r6, lr}
 8004d64:	681d      	ldr	r5, [r3, #0]
 8004d66:	4606      	mov	r6, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	b125      	cbz	r5, 8004d76 <__swsetup_r+0x16>
 8004d6c:	69ab      	ldr	r3, [r5, #24]
 8004d6e:	b913      	cbnz	r3, 8004d76 <__swsetup_r+0x16>
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 ff95 	bl	8005ca0 <__sinit>
 8004d76:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <__swsetup_r+0xd0>)
 8004d78:	429c      	cmp	r4, r3
 8004d7a:	d10f      	bne.n	8004d9c <__swsetup_r+0x3c>
 8004d7c:	686c      	ldr	r4, [r5, #4]
 8004d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	0715      	lsls	r5, r2, #28
 8004d86:	d42c      	bmi.n	8004de2 <__swsetup_r+0x82>
 8004d88:	06d0      	lsls	r0, r2, #27
 8004d8a:	d411      	bmi.n	8004db0 <__swsetup_r+0x50>
 8004d8c:	2209      	movs	r2, #9
 8004d8e:	6032      	str	r2, [r6, #0]
 8004d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9a:	e03e      	b.n	8004e1a <__swsetup_r+0xba>
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <__swsetup_r+0xd4>)
 8004d9e:	429c      	cmp	r4, r3
 8004da0:	d101      	bne.n	8004da6 <__swsetup_r+0x46>
 8004da2:	68ac      	ldr	r4, [r5, #8]
 8004da4:	e7eb      	b.n	8004d7e <__swsetup_r+0x1e>
 8004da6:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <__swsetup_r+0xd8>)
 8004da8:	429c      	cmp	r4, r3
 8004daa:	bf08      	it	eq
 8004dac:	68ec      	ldreq	r4, [r5, #12]
 8004dae:	e7e6      	b.n	8004d7e <__swsetup_r+0x1e>
 8004db0:	0751      	lsls	r1, r2, #29
 8004db2:	d512      	bpl.n	8004dda <__swsetup_r+0x7a>
 8004db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004db6:	b141      	cbz	r1, 8004dca <__swsetup_r+0x6a>
 8004db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dbc:	4299      	cmp	r1, r3
 8004dbe:	d002      	beq.n	8004dc6 <__swsetup_r+0x66>
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f001 ffd1 	bl	8006d68 <_free_r>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6063      	str	r3, [r4, #4]
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f043 0308 	orr.w	r3, r3, #8
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	b94b      	cbnz	r3, 8004dfa <__swsetup_r+0x9a>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df0:	d003      	beq.n	8004dfa <__swsetup_r+0x9a>
 8004df2:	4621      	mov	r1, r4
 8004df4:	4630      	mov	r0, r6
 8004df6:	f001 fb3d 	bl	8006474 <__smakebuf_r>
 8004dfa:	89a2      	ldrh	r2, [r4, #12]
 8004dfc:	f012 0301 	ands.w	r3, r2, #1
 8004e00:	d00c      	beq.n	8004e1c <__swsetup_r+0xbc>
 8004e02:	2300      	movs	r3, #0
 8004e04:	60a3      	str	r3, [r4, #8]
 8004e06:	6963      	ldr	r3, [r4, #20]
 8004e08:	425b      	negs	r3, r3
 8004e0a:	61a3      	str	r3, [r4, #24]
 8004e0c:	6923      	ldr	r3, [r4, #16]
 8004e0e:	b953      	cbnz	r3, 8004e26 <__swsetup_r+0xc6>
 8004e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004e18:	d1ba      	bne.n	8004d90 <__swsetup_r+0x30>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	0792      	lsls	r2, r2, #30
 8004e1e:	bf58      	it	pl
 8004e20:	6963      	ldrpl	r3, [r4, #20]
 8004e22:	60a3      	str	r3, [r4, #8]
 8004e24:	e7f2      	b.n	8004e0c <__swsetup_r+0xac>
 8004e26:	2000      	movs	r0, #0
 8004e28:	e7f7      	b.n	8004e1a <__swsetup_r+0xba>
 8004e2a:	bf00      	nop
 8004e2c:	20000010 	.word	0x20000010
 8004e30:	08007788 	.word	0x08007788
 8004e34:	080077a8 	.word	0x080077a8
 8004e38:	08007768 	.word	0x08007768

08004e3c <quorem>:
 8004e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e40:	6903      	ldr	r3, [r0, #16]
 8004e42:	690c      	ldr	r4, [r1, #16]
 8004e44:	4680      	mov	r8, r0
 8004e46:	42a3      	cmp	r3, r4
 8004e48:	f2c0 8084 	blt.w	8004f54 <quorem+0x118>
 8004e4c:	3c01      	subs	r4, #1
 8004e4e:	f101 0714 	add.w	r7, r1, #20
 8004e52:	f100 0614 	add.w	r6, r0, #20
 8004e56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004e5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e5e:	3501      	adds	r5, #1
 8004e60:	fbb0 f5f5 	udiv	r5, r0, r5
 8004e64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e68:	eb06 030c 	add.w	r3, r6, ip
 8004e6c:	eb07 090c 	add.w	r9, r7, ip
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	b39d      	cbz	r5, 8004edc <quorem+0xa0>
 8004e74:	f04f 0a00 	mov.w	sl, #0
 8004e78:	4638      	mov	r0, r7
 8004e7a:	46b6      	mov	lr, r6
 8004e7c:	46d3      	mov	fp, sl
 8004e7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e82:	b293      	uxth	r3, r2
 8004e84:	fb05 a303 	mla	r3, r5, r3, sl
 8004e88:	0c12      	lsrs	r2, r2, #16
 8004e8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e8e:	fb05 a202 	mla	r2, r5, r2, sl
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	ebab 0303 	sub.w	r3, fp, r3
 8004e98:	f8de b000 	ldr.w	fp, [lr]
 8004e9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004ea0:	fa1f fb8b 	uxth.w	fp, fp
 8004ea4:	445b      	add	r3, fp
 8004ea6:	fa1f fb82 	uxth.w	fp, r2
 8004eaa:	f8de 2000 	ldr.w	r2, [lr]
 8004eae:	4581      	cmp	r9, r0
 8004eb0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ebe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ec2:	f84e 3b04 	str.w	r3, [lr], #4
 8004ec6:	d2da      	bcs.n	8004e7e <quorem+0x42>
 8004ec8:	f856 300c 	ldr.w	r3, [r6, ip]
 8004ecc:	b933      	cbnz	r3, 8004edc <quorem+0xa0>
 8004ece:	9b01      	ldr	r3, [sp, #4]
 8004ed0:	3b04      	subs	r3, #4
 8004ed2:	429e      	cmp	r6, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	d331      	bcc.n	8004f3c <quorem+0x100>
 8004ed8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004edc:	4640      	mov	r0, r8
 8004ede:	f001 fd8f 	bl	8006a00 <__mcmp>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	db26      	blt.n	8004f34 <quorem+0xf8>
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f04f 0c00 	mov.w	ip, #0
 8004eec:	3501      	adds	r5, #1
 8004eee:	f857 1b04 	ldr.w	r1, [r7], #4
 8004ef2:	f8d0 e000 	ldr.w	lr, [r0]
 8004ef6:	b28b      	uxth	r3, r1
 8004ef8:	ebac 0303 	sub.w	r3, ip, r3
 8004efc:	fa1f f28e 	uxth.w	r2, lr
 8004f00:	4413      	add	r3, r2
 8004f02:	0c0a      	lsrs	r2, r1, #16
 8004f04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f12:	45b9      	cmp	r9, r7
 8004f14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f18:	f840 3b04 	str.w	r3, [r0], #4
 8004f1c:	d2e7      	bcs.n	8004eee <quorem+0xb2>
 8004f1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004f22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004f26:	b92a      	cbnz	r2, 8004f34 <quorem+0xf8>
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	429e      	cmp	r6, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	d30b      	bcc.n	8004f48 <quorem+0x10c>
 8004f30:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f34:	4628      	mov	r0, r5
 8004f36:	b003      	add	sp, #12
 8004f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	d1c9      	bne.n	8004ed8 <quorem+0x9c>
 8004f44:	3c01      	subs	r4, #1
 8004f46:	e7c4      	b.n	8004ed2 <quorem+0x96>
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	d1ef      	bne.n	8004f30 <quorem+0xf4>
 8004f50:	3c01      	subs	r4, #1
 8004f52:	e7ea      	b.n	8004f2a <quorem+0xee>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e7ee      	b.n	8004f36 <quorem+0xfa>

08004f58 <_dtoa_r>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	4616      	mov	r6, r2
 8004f5e:	461f      	mov	r7, r3
 8004f60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f62:	b095      	sub	sp, #84	; 0x54
 8004f64:	4604      	mov	r4, r0
 8004f66:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004f6a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004f6e:	b93d      	cbnz	r5, 8004f80 <_dtoa_r+0x28>
 8004f70:	2010      	movs	r0, #16
 8004f72:	f001 fabf 	bl	80064f4 <malloc>
 8004f76:	6260      	str	r0, [r4, #36]	; 0x24
 8004f78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f7c:	6005      	str	r5, [r0, #0]
 8004f7e:	60c5      	str	r5, [r0, #12]
 8004f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	b151      	cbz	r1, 8004f9c <_dtoa_r+0x44>
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	2301      	movs	r3, #1
 8004f8a:	4093      	lsls	r3, r2
 8004f8c:	604a      	str	r2, [r1, #4]
 8004f8e:	608b      	str	r3, [r1, #8]
 8004f90:	4620      	mov	r0, r4
 8004f92:	f001 fb16 	bl	80065c2 <_Bfree>
 8004f96:	2200      	movs	r2, #0
 8004f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	1e3b      	subs	r3, r7, #0
 8004f9e:	bfaf      	iteee	ge
 8004fa0:	2300      	movge	r3, #0
 8004fa2:	2201      	movlt	r2, #1
 8004fa4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fa8:	9303      	strlt	r3, [sp, #12]
 8004faa:	bfac      	ite	ge
 8004fac:	f8c8 3000 	strge.w	r3, [r8]
 8004fb0:	f8c8 2000 	strlt.w	r2, [r8]
 8004fb4:	4bae      	ldr	r3, [pc, #696]	; (8005270 <_dtoa_r+0x318>)
 8004fb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004fba:	ea33 0308 	bics.w	r3, r3, r8
 8004fbe:	d11b      	bne.n	8004ff8 <_dtoa_r+0xa0>
 8004fc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	9b02      	ldr	r3, [sp, #8]
 8004fca:	b923      	cbnz	r3, 8004fd6 <_dtoa_r+0x7e>
 8004fcc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	f000 8545 	beq.w	8005a60 <_dtoa_r+0xb08>
 8004fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fd8:	b953      	cbnz	r3, 8004ff0 <_dtoa_r+0x98>
 8004fda:	4ba6      	ldr	r3, [pc, #664]	; (8005274 <_dtoa_r+0x31c>)
 8004fdc:	e021      	b.n	8005022 <_dtoa_r+0xca>
 8004fde:	4ba6      	ldr	r3, [pc, #664]	; (8005278 <_dtoa_r+0x320>)
 8004fe0:	9306      	str	r3, [sp, #24]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	9806      	ldr	r0, [sp, #24]
 8004fea:	b015      	add	sp, #84	; 0x54
 8004fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff0:	4ba0      	ldr	r3, [pc, #640]	; (8005274 <_dtoa_r+0x31c>)
 8004ff2:	9306      	str	r3, [sp, #24]
 8004ff4:	3303      	adds	r3, #3
 8004ff6:	e7f5      	b.n	8004fe4 <_dtoa_r+0x8c>
 8004ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2300      	movs	r3, #0
 8005000:	4630      	mov	r0, r6
 8005002:	4639      	mov	r1, r7
 8005004:	f7fb fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 8005008:	4682      	mov	sl, r0
 800500a:	b160      	cbz	r0, 8005026 <_dtoa_r+0xce>
 800500c:	2301      	movs	r3, #1
 800500e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8520 	beq.w	8005a5a <_dtoa_r+0xb02>
 800501a:	4b98      	ldr	r3, [pc, #608]	; (800527c <_dtoa_r+0x324>)
 800501c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	3b01      	subs	r3, #1
 8005022:	9306      	str	r3, [sp, #24]
 8005024:	e7e0      	b.n	8004fe8 <_dtoa_r+0x90>
 8005026:	ab12      	add	r3, sp, #72	; 0x48
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	ab13      	add	r3, sp, #76	; 0x4c
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	4632      	mov	r2, r6
 8005030:	463b      	mov	r3, r7
 8005032:	4620      	mov	r0, r4
 8005034:	f001 fdd2 	bl	8006bdc <__d2b>
 8005038:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800503c:	4683      	mov	fp, r0
 800503e:	2d00      	cmp	r5, #0
 8005040:	d07d      	beq.n	800513e <_dtoa_r+0x1e6>
 8005042:	46b0      	mov	r8, r6
 8005044:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005048:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800504c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005050:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005054:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005058:	2200      	movs	r2, #0
 800505a:	4b89      	ldr	r3, [pc, #548]	; (8005280 <_dtoa_r+0x328>)
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb f882 	bl	8000168 <__aeabi_dsub>
 8005064:	a37c      	add	r3, pc, #496	; (adr r3, 8005258 <_dtoa_r+0x300>)
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	f7fb fa35 	bl	80004d8 <__aeabi_dmul>
 800506e:	a37c      	add	r3, pc, #496	; (adr r3, 8005260 <_dtoa_r+0x308>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f7fb f87a 	bl	800016c <__adddf3>
 8005078:	4606      	mov	r6, r0
 800507a:	4628      	mov	r0, r5
 800507c:	460f      	mov	r7, r1
 800507e:	f7fb f9c1 	bl	8000404 <__aeabi_i2d>
 8005082:	a379      	add	r3, pc, #484	; (adr r3, 8005268 <_dtoa_r+0x310>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb fa26 	bl	80004d8 <__aeabi_dmul>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb f86a 	bl	800016c <__adddf3>
 8005098:	4606      	mov	r6, r0
 800509a:	460f      	mov	r7, r1
 800509c:	f7fb fccc 	bl	8000a38 <__aeabi_d2iz>
 80050a0:	2200      	movs	r2, #0
 80050a2:	4682      	mov	sl, r0
 80050a4:	2300      	movs	r3, #0
 80050a6:	4630      	mov	r0, r6
 80050a8:	4639      	mov	r1, r7
 80050aa:	f7fb fc87 	bl	80009bc <__aeabi_dcmplt>
 80050ae:	b148      	cbz	r0, 80050c4 <_dtoa_r+0x16c>
 80050b0:	4650      	mov	r0, sl
 80050b2:	f7fb f9a7 	bl	8000404 <__aeabi_i2d>
 80050b6:	4632      	mov	r2, r6
 80050b8:	463b      	mov	r3, r7
 80050ba:	f7fb fc75 	bl	80009a8 <__aeabi_dcmpeq>
 80050be:	b908      	cbnz	r0, 80050c4 <_dtoa_r+0x16c>
 80050c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050c4:	f1ba 0f16 	cmp.w	sl, #22
 80050c8:	d85a      	bhi.n	8005180 <_dtoa_r+0x228>
 80050ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ce:	496d      	ldr	r1, [pc, #436]	; (8005284 <_dtoa_r+0x32c>)
 80050d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80050d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050d8:	f7fb fc8e 	bl	80009f8 <__aeabi_dcmpgt>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d051      	beq.n	8005184 <_dtoa_r+0x22c>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050e6:	930d      	str	r3, [sp, #52]	; 0x34
 80050e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050ea:	1b5d      	subs	r5, r3, r5
 80050ec:	1e6b      	subs	r3, r5, #1
 80050ee:	9307      	str	r3, [sp, #28]
 80050f0:	bf43      	ittte	mi
 80050f2:	2300      	movmi	r3, #0
 80050f4:	f1c5 0901 	rsbmi	r9, r5, #1
 80050f8:	9307      	strmi	r3, [sp, #28]
 80050fa:	f04f 0900 	movpl.w	r9, #0
 80050fe:	f1ba 0f00 	cmp.w	sl, #0
 8005102:	db41      	blt.n	8005188 <_dtoa_r+0x230>
 8005104:	9b07      	ldr	r3, [sp, #28]
 8005106:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800510a:	4453      	add	r3, sl
 800510c:	9307      	str	r3, [sp, #28]
 800510e:	2300      	movs	r3, #0
 8005110:	9308      	str	r3, [sp, #32]
 8005112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005114:	2b09      	cmp	r3, #9
 8005116:	f200 808f 	bhi.w	8005238 <_dtoa_r+0x2e0>
 800511a:	2b05      	cmp	r3, #5
 800511c:	bfc4      	itt	gt
 800511e:	3b04      	subgt	r3, #4
 8005120:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005122:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005124:	bfc8      	it	gt
 8005126:	2500      	movgt	r5, #0
 8005128:	f1a3 0302 	sub.w	r3, r3, #2
 800512c:	bfd8      	it	le
 800512e:	2501      	movle	r5, #1
 8005130:	2b03      	cmp	r3, #3
 8005132:	f200 808d 	bhi.w	8005250 <_dtoa_r+0x2f8>
 8005136:	e8df f003 	tbb	[pc, r3]
 800513a:	7d7b      	.short	0x7d7b
 800513c:	6f2f      	.short	0x6f2f
 800513e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005142:	441d      	add	r5, r3
 8005144:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005148:	2820      	cmp	r0, #32
 800514a:	dd13      	ble.n	8005174 <_dtoa_r+0x21c>
 800514c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005150:	9b02      	ldr	r3, [sp, #8]
 8005152:	fa08 f800 	lsl.w	r8, r8, r0
 8005156:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800515a:	fa23 f000 	lsr.w	r0, r3, r0
 800515e:	ea48 0000 	orr.w	r0, r8, r0
 8005162:	f7fb f93f 	bl	80003e4 <__aeabi_ui2d>
 8005166:	2301      	movs	r3, #1
 8005168:	4680      	mov	r8, r0
 800516a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800516e:	3d01      	subs	r5, #1
 8005170:	9310      	str	r3, [sp, #64]	; 0x40
 8005172:	e771      	b.n	8005058 <_dtoa_r+0x100>
 8005174:	9b02      	ldr	r3, [sp, #8]
 8005176:	f1c0 0020 	rsb	r0, r0, #32
 800517a:	fa03 f000 	lsl.w	r0, r3, r0
 800517e:	e7f0      	b.n	8005162 <_dtoa_r+0x20a>
 8005180:	2301      	movs	r3, #1
 8005182:	e7b0      	b.n	80050e6 <_dtoa_r+0x18e>
 8005184:	900d      	str	r0, [sp, #52]	; 0x34
 8005186:	e7af      	b.n	80050e8 <_dtoa_r+0x190>
 8005188:	f1ca 0300 	rsb	r3, sl, #0
 800518c:	9308      	str	r3, [sp, #32]
 800518e:	2300      	movs	r3, #0
 8005190:	eba9 090a 	sub.w	r9, r9, sl
 8005194:	930c      	str	r3, [sp, #48]	; 0x30
 8005196:	e7bc      	b.n	8005112 <_dtoa_r+0x1ba>
 8005198:	2301      	movs	r3, #1
 800519a:	9309      	str	r3, [sp, #36]	; 0x24
 800519c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dd74      	ble.n	800528c <_dtoa_r+0x334>
 80051a2:	4698      	mov	r8, r3
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	2200      	movs	r2, #0
 80051a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051aa:	6072      	str	r2, [r6, #4]
 80051ac:	2204      	movs	r2, #4
 80051ae:	f102 0014 	add.w	r0, r2, #20
 80051b2:	4298      	cmp	r0, r3
 80051b4:	6871      	ldr	r1, [r6, #4]
 80051b6:	d96e      	bls.n	8005296 <_dtoa_r+0x33e>
 80051b8:	4620      	mov	r0, r4
 80051ba:	f001 f9ce 	bl	800655a <_Balloc>
 80051be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051c0:	6030      	str	r0, [r6, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b8 0f0e 	cmp.w	r8, #14
 80051c8:	9306      	str	r3, [sp, #24]
 80051ca:	f200 80ed 	bhi.w	80053a8 <_dtoa_r+0x450>
 80051ce:	2d00      	cmp	r5, #0
 80051d0:	f000 80ea 	beq.w	80053a8 <_dtoa_r+0x450>
 80051d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051d8:	f1ba 0f00 	cmp.w	sl, #0
 80051dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80051e0:	dd77      	ble.n	80052d2 <_dtoa_r+0x37a>
 80051e2:	4a28      	ldr	r2, [pc, #160]	; (8005284 <_dtoa_r+0x32c>)
 80051e4:	f00a 030f 	and.w	r3, sl, #15
 80051e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80051ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051f0:	06f0      	lsls	r0, r6, #27
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80051fa:	d568      	bpl.n	80052ce <_dtoa_r+0x376>
 80051fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005200:	4b21      	ldr	r3, [pc, #132]	; (8005288 <_dtoa_r+0x330>)
 8005202:	2503      	movs	r5, #3
 8005204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005208:	f7fb fa90 	bl	800072c <__aeabi_ddiv>
 800520c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005210:	f006 060f 	and.w	r6, r6, #15
 8005214:	4f1c      	ldr	r7, [pc, #112]	; (8005288 <_dtoa_r+0x330>)
 8005216:	e04f      	b.n	80052b8 <_dtoa_r+0x360>
 8005218:	2301      	movs	r3, #1
 800521a:	9309      	str	r3, [sp, #36]	; 0x24
 800521c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800521e:	4453      	add	r3, sl
 8005220:	f103 0801 	add.w	r8, r3, #1
 8005224:	9304      	str	r3, [sp, #16]
 8005226:	4643      	mov	r3, r8
 8005228:	2b01      	cmp	r3, #1
 800522a:	bfb8      	it	lt
 800522c:	2301      	movlt	r3, #1
 800522e:	e7ba      	b.n	80051a6 <_dtoa_r+0x24e>
 8005230:	2300      	movs	r3, #0
 8005232:	e7b2      	b.n	800519a <_dtoa_r+0x242>
 8005234:	2300      	movs	r3, #0
 8005236:	e7f0      	b.n	800521a <_dtoa_r+0x2c2>
 8005238:	2501      	movs	r5, #1
 800523a:	2300      	movs	r3, #0
 800523c:	9509      	str	r5, [sp, #36]	; 0x24
 800523e:	931e      	str	r3, [sp, #120]	; 0x78
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
 8005244:	2200      	movs	r2, #0
 8005246:	9304      	str	r3, [sp, #16]
 8005248:	4698      	mov	r8, r3
 800524a:	2312      	movs	r3, #18
 800524c:	921f      	str	r2, [sp, #124]	; 0x7c
 800524e:	e7aa      	b.n	80051a6 <_dtoa_r+0x24e>
 8005250:	2301      	movs	r3, #1
 8005252:	9309      	str	r3, [sp, #36]	; 0x24
 8005254:	e7f4      	b.n	8005240 <_dtoa_r+0x2e8>
 8005256:	bf00      	nop
 8005258:	636f4361 	.word	0x636f4361
 800525c:	3fd287a7 	.word	0x3fd287a7
 8005260:	8b60c8b3 	.word	0x8b60c8b3
 8005264:	3fc68a28 	.word	0x3fc68a28
 8005268:	509f79fb 	.word	0x509f79fb
 800526c:	3fd34413 	.word	0x3fd34413
 8005270:	7ff00000 	.word	0x7ff00000
 8005274:	08007761 	.word	0x08007761
 8005278:	08007758 	.word	0x08007758
 800527c:	080076dd 	.word	0x080076dd
 8005280:	3ff80000 	.word	0x3ff80000
 8005284:	08007800 	.word	0x08007800
 8005288:	080077d8 	.word	0x080077d8
 800528c:	2301      	movs	r3, #1
 800528e:	9304      	str	r3, [sp, #16]
 8005290:	4698      	mov	r8, r3
 8005292:	461a      	mov	r2, r3
 8005294:	e7da      	b.n	800524c <_dtoa_r+0x2f4>
 8005296:	3101      	adds	r1, #1
 8005298:	6071      	str	r1, [r6, #4]
 800529a:	0052      	lsls	r2, r2, #1
 800529c:	e787      	b.n	80051ae <_dtoa_r+0x256>
 800529e:	07f1      	lsls	r1, r6, #31
 80052a0:	d508      	bpl.n	80052b4 <_dtoa_r+0x35c>
 80052a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052aa:	f7fb f915 	bl	80004d8 <__aeabi_dmul>
 80052ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052b2:	3501      	adds	r5, #1
 80052b4:	1076      	asrs	r6, r6, #1
 80052b6:	3708      	adds	r7, #8
 80052b8:	2e00      	cmp	r6, #0
 80052ba:	d1f0      	bne.n	800529e <_dtoa_r+0x346>
 80052bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c4:	f7fb fa32 	bl	800072c <__aeabi_ddiv>
 80052c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052cc:	e01b      	b.n	8005306 <_dtoa_r+0x3ae>
 80052ce:	2502      	movs	r5, #2
 80052d0:	e7a0      	b.n	8005214 <_dtoa_r+0x2bc>
 80052d2:	f000 80a4 	beq.w	800541e <_dtoa_r+0x4c6>
 80052d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80052da:	f1ca 0600 	rsb	r6, sl, #0
 80052de:	4ba0      	ldr	r3, [pc, #640]	; (8005560 <_dtoa_r+0x608>)
 80052e0:	f006 020f 	and.w	r2, r6, #15
 80052e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f7fb f8f4 	bl	80004d8 <__aeabi_dmul>
 80052f0:	2502      	movs	r5, #2
 80052f2:	2300      	movs	r3, #0
 80052f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f8:	4f9a      	ldr	r7, [pc, #616]	; (8005564 <_dtoa_r+0x60c>)
 80052fa:	1136      	asrs	r6, r6, #4
 80052fc:	2e00      	cmp	r6, #0
 80052fe:	f040 8083 	bne.w	8005408 <_dtoa_r+0x4b0>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e0      	bne.n	80052c8 <_dtoa_r+0x370>
 8005306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 808a 	beq.w	8005422 <_dtoa_r+0x4ca>
 800530e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005312:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005316:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800531a:	2200      	movs	r2, #0
 800531c:	4b92      	ldr	r3, [pc, #584]	; (8005568 <_dtoa_r+0x610>)
 800531e:	f7fb fb4d 	bl	80009bc <__aeabi_dcmplt>
 8005322:	2800      	cmp	r0, #0
 8005324:	d07d      	beq.n	8005422 <_dtoa_r+0x4ca>
 8005326:	f1b8 0f00 	cmp.w	r8, #0
 800532a:	d07a      	beq.n	8005422 <_dtoa_r+0x4ca>
 800532c:	9b04      	ldr	r3, [sp, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	dd36      	ble.n	80053a0 <_dtoa_r+0x448>
 8005332:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005336:	2200      	movs	r2, #0
 8005338:	4b8c      	ldr	r3, [pc, #560]	; (800556c <_dtoa_r+0x614>)
 800533a:	f7fb f8cd 	bl	80004d8 <__aeabi_dmul>
 800533e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005342:	9e04      	ldr	r6, [sp, #16]
 8005344:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005348:	3501      	adds	r5, #1
 800534a:	4628      	mov	r0, r5
 800534c:	f7fb f85a 	bl	8000404 <__aeabi_i2d>
 8005350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005354:	f7fb f8c0 	bl	80004d8 <__aeabi_dmul>
 8005358:	2200      	movs	r2, #0
 800535a:	4b85      	ldr	r3, [pc, #532]	; (8005570 <_dtoa_r+0x618>)
 800535c:	f7fa ff06 	bl	800016c <__adddf3>
 8005360:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005364:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005368:	950b      	str	r5, [sp, #44]	; 0x2c
 800536a:	2e00      	cmp	r6, #0
 800536c:	d15c      	bne.n	8005428 <_dtoa_r+0x4d0>
 800536e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	4b7f      	ldr	r3, [pc, #508]	; (8005574 <_dtoa_r+0x61c>)
 8005376:	f7fa fef7 	bl	8000168 <__aeabi_dsub>
 800537a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800537c:	462b      	mov	r3, r5
 800537e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005382:	f7fb fb39 	bl	80009f8 <__aeabi_dcmpgt>
 8005386:	2800      	cmp	r0, #0
 8005388:	f040 8281 	bne.w	800588e <_dtoa_r+0x936>
 800538c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005392:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005396:	f7fb fb11 	bl	80009bc <__aeabi_dcmplt>
 800539a:	2800      	cmp	r0, #0
 800539c:	f040 8275 	bne.w	800588a <_dtoa_r+0x932>
 80053a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80053a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f2c0 814b 	blt.w	8005646 <_dtoa_r+0x6ee>
 80053b0:	f1ba 0f0e 	cmp.w	sl, #14
 80053b4:	f300 8147 	bgt.w	8005646 <_dtoa_r+0x6ee>
 80053b8:	4b69      	ldr	r3, [pc, #420]	; (8005560 <_dtoa_r+0x608>)
 80053ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f280 80d7 	bge.w	800557c <_dtoa_r+0x624>
 80053ce:	f1b8 0f00 	cmp.w	r8, #0
 80053d2:	f300 80d3 	bgt.w	800557c <_dtoa_r+0x624>
 80053d6:	f040 8257 	bne.w	8005888 <_dtoa_r+0x930>
 80053da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053de:	2200      	movs	r2, #0
 80053e0:	4b64      	ldr	r3, [pc, #400]	; (8005574 <_dtoa_r+0x61c>)
 80053e2:	f7fb f879 	bl	80004d8 <__aeabi_dmul>
 80053e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053ea:	f7fb fafb 	bl	80009e4 <__aeabi_dcmpge>
 80053ee:	4646      	mov	r6, r8
 80053f0:	4647      	mov	r7, r8
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f040 822d 	bne.w	8005852 <_dtoa_r+0x8fa>
 80053f8:	9b06      	ldr	r3, [sp, #24]
 80053fa:	9a06      	ldr	r2, [sp, #24]
 80053fc:	1c5d      	adds	r5, r3, #1
 80053fe:	2331      	movs	r3, #49	; 0x31
 8005400:	f10a 0a01 	add.w	sl, sl, #1
 8005404:	7013      	strb	r3, [r2, #0]
 8005406:	e228      	b.n	800585a <_dtoa_r+0x902>
 8005408:	07f2      	lsls	r2, r6, #31
 800540a:	d505      	bpl.n	8005418 <_dtoa_r+0x4c0>
 800540c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005410:	f7fb f862 	bl	80004d8 <__aeabi_dmul>
 8005414:	2301      	movs	r3, #1
 8005416:	3501      	adds	r5, #1
 8005418:	1076      	asrs	r6, r6, #1
 800541a:	3708      	adds	r7, #8
 800541c:	e76e      	b.n	80052fc <_dtoa_r+0x3a4>
 800541e:	2502      	movs	r5, #2
 8005420:	e771      	b.n	8005306 <_dtoa_r+0x3ae>
 8005422:	4657      	mov	r7, sl
 8005424:	4646      	mov	r6, r8
 8005426:	e790      	b.n	800534a <_dtoa_r+0x3f2>
 8005428:	4b4d      	ldr	r3, [pc, #308]	; (8005560 <_dtoa_r+0x608>)
 800542a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800542e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	d048      	beq.n	80054ca <_dtoa_r+0x572>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	2000      	movs	r0, #0
 800543e:	494e      	ldr	r1, [pc, #312]	; (8005578 <_dtoa_r+0x620>)
 8005440:	f7fb f974 	bl	800072c <__aeabi_ddiv>
 8005444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005448:	f7fa fe8e 	bl	8000168 <__aeabi_dsub>
 800544c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005450:	9d06      	ldr	r5, [sp, #24]
 8005452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005456:	f7fb faef 	bl	8000a38 <__aeabi_d2iz>
 800545a:	9011      	str	r0, [sp, #68]	; 0x44
 800545c:	f7fa ffd2 	bl	8000404 <__aeabi_i2d>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005468:	f7fa fe7e 	bl	8000168 <__aeabi_dsub>
 800546c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800546e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005472:	3330      	adds	r3, #48	; 0x30
 8005474:	f805 3b01 	strb.w	r3, [r5], #1
 8005478:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800547c:	f7fb fa9e 	bl	80009bc <__aeabi_dcmplt>
 8005480:	2800      	cmp	r0, #0
 8005482:	d163      	bne.n	800554c <_dtoa_r+0x5f4>
 8005484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005488:	2000      	movs	r0, #0
 800548a:	4937      	ldr	r1, [pc, #220]	; (8005568 <_dtoa_r+0x610>)
 800548c:	f7fa fe6c 	bl	8000168 <__aeabi_dsub>
 8005490:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005494:	f7fb fa92 	bl	80009bc <__aeabi_dcmplt>
 8005498:	2800      	cmp	r0, #0
 800549a:	f040 80b5 	bne.w	8005608 <_dtoa_r+0x6b0>
 800549e:	9b06      	ldr	r3, [sp, #24]
 80054a0:	1aeb      	subs	r3, r5, r3
 80054a2:	429e      	cmp	r6, r3
 80054a4:	f77f af7c 	ble.w	80053a0 <_dtoa_r+0x448>
 80054a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054ac:	2200      	movs	r2, #0
 80054ae:	4b2f      	ldr	r3, [pc, #188]	; (800556c <_dtoa_r+0x614>)
 80054b0:	f7fb f812 	bl	80004d8 <__aeabi_dmul>
 80054b4:	2200      	movs	r2, #0
 80054b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <_dtoa_r+0x614>)
 80054c0:	f7fb f80a 	bl	80004d8 <__aeabi_dmul>
 80054c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c8:	e7c3      	b.n	8005452 <_dtoa_r+0x4fa>
 80054ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054ce:	f7fb f803 	bl	80004d8 <__aeabi_dmul>
 80054d2:	9b06      	ldr	r3, [sp, #24]
 80054d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054d8:	199d      	adds	r5, r3, r6
 80054da:	461e      	mov	r6, r3
 80054dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e0:	f7fb faaa 	bl	8000a38 <__aeabi_d2iz>
 80054e4:	9011      	str	r0, [sp, #68]	; 0x44
 80054e6:	f7fa ff8d 	bl	8000404 <__aeabi_i2d>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054f2:	f7fa fe39 	bl	8000168 <__aeabi_dsub>
 80054f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054fc:	3330      	adds	r3, #48	; 0x30
 80054fe:	f806 3b01 	strb.w	r3, [r6], #1
 8005502:	42ae      	cmp	r6, r5
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	d124      	bne.n	8005554 <_dtoa_r+0x5fc>
 800550a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800550e:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <_dtoa_r+0x620>)
 8005510:	f7fa fe2c 	bl	800016c <__adddf3>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800551c:	f7fb fa6c 	bl	80009f8 <__aeabi_dcmpgt>
 8005520:	2800      	cmp	r0, #0
 8005522:	d171      	bne.n	8005608 <_dtoa_r+0x6b0>
 8005524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005528:	2000      	movs	r0, #0
 800552a:	4913      	ldr	r1, [pc, #76]	; (8005578 <_dtoa_r+0x620>)
 800552c:	f7fa fe1c 	bl	8000168 <__aeabi_dsub>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005538:	f7fb fa40 	bl	80009bc <__aeabi_dcmplt>
 800553c:	2800      	cmp	r0, #0
 800553e:	f43f af2f 	beq.w	80053a0 <_dtoa_r+0x448>
 8005542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005546:	1e6a      	subs	r2, r5, #1
 8005548:	2b30      	cmp	r3, #48	; 0x30
 800554a:	d001      	beq.n	8005550 <_dtoa_r+0x5f8>
 800554c:	46ba      	mov	sl, r7
 800554e:	e04a      	b.n	80055e6 <_dtoa_r+0x68e>
 8005550:	4615      	mov	r5, r2
 8005552:	e7f6      	b.n	8005542 <_dtoa_r+0x5ea>
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <_dtoa_r+0x614>)
 8005556:	f7fa ffbf 	bl	80004d8 <__aeabi_dmul>
 800555a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800555e:	e7bd      	b.n	80054dc <_dtoa_r+0x584>
 8005560:	08007800 	.word	0x08007800
 8005564:	080077d8 	.word	0x080077d8
 8005568:	3ff00000 	.word	0x3ff00000
 800556c:	40240000 	.word	0x40240000
 8005570:	401c0000 	.word	0x401c0000
 8005574:	40140000 	.word	0x40140000
 8005578:	3fe00000 	.word	0x3fe00000
 800557c:	9d06      	ldr	r5, [sp, #24]
 800557e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005586:	4630      	mov	r0, r6
 8005588:	4639      	mov	r1, r7
 800558a:	f7fb f8cf 	bl	800072c <__aeabi_ddiv>
 800558e:	f7fb fa53 	bl	8000a38 <__aeabi_d2iz>
 8005592:	4681      	mov	r9, r0
 8005594:	f7fa ff36 	bl	8000404 <__aeabi_i2d>
 8005598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800559c:	f7fa ff9c 	bl	80004d8 <__aeabi_dmul>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f7fa fdde 	bl	8000168 <__aeabi_dsub>
 80055ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80055b0:	f805 6b01 	strb.w	r6, [r5], #1
 80055b4:	9e06      	ldr	r6, [sp, #24]
 80055b6:	4602      	mov	r2, r0
 80055b8:	1bae      	subs	r6, r5, r6
 80055ba:	45b0      	cmp	r8, r6
 80055bc:	460b      	mov	r3, r1
 80055be:	d135      	bne.n	800562c <_dtoa_r+0x6d4>
 80055c0:	f7fa fdd4 	bl	800016c <__adddf3>
 80055c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055c8:	4606      	mov	r6, r0
 80055ca:	460f      	mov	r7, r1
 80055cc:	f7fb fa14 	bl	80009f8 <__aeabi_dcmpgt>
 80055d0:	b9c8      	cbnz	r0, 8005606 <_dtoa_r+0x6ae>
 80055d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d6:	4630      	mov	r0, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	f7fb f9e5 	bl	80009a8 <__aeabi_dcmpeq>
 80055de:	b110      	cbz	r0, 80055e6 <_dtoa_r+0x68e>
 80055e0:	f019 0f01 	tst.w	r9, #1
 80055e4:	d10f      	bne.n	8005606 <_dtoa_r+0x6ae>
 80055e6:	4659      	mov	r1, fp
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 ffea 	bl	80065c2 <_Bfree>
 80055ee:	2300      	movs	r3, #0
 80055f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055f2:	702b      	strb	r3, [r5, #0]
 80055f4:	f10a 0301 	add.w	r3, sl, #1
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f43f acf3 	beq.w	8004fe8 <_dtoa_r+0x90>
 8005602:	601d      	str	r5, [r3, #0]
 8005604:	e4f0      	b.n	8004fe8 <_dtoa_r+0x90>
 8005606:	4657      	mov	r7, sl
 8005608:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800560c:	1e6b      	subs	r3, r5, #1
 800560e:	2a39      	cmp	r2, #57	; 0x39
 8005610:	d106      	bne.n	8005620 <_dtoa_r+0x6c8>
 8005612:	9a06      	ldr	r2, [sp, #24]
 8005614:	429a      	cmp	r2, r3
 8005616:	d107      	bne.n	8005628 <_dtoa_r+0x6d0>
 8005618:	2330      	movs	r3, #48	; 0x30
 800561a:	7013      	strb	r3, [r2, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	3701      	adds	r7, #1
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	3201      	adds	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e791      	b.n	800554c <_dtoa_r+0x5f4>
 8005628:	461d      	mov	r5, r3
 800562a:	e7ed      	b.n	8005608 <_dtoa_r+0x6b0>
 800562c:	2200      	movs	r2, #0
 800562e:	4b99      	ldr	r3, [pc, #612]	; (8005894 <_dtoa_r+0x93c>)
 8005630:	f7fa ff52 	bl	80004d8 <__aeabi_dmul>
 8005634:	2200      	movs	r2, #0
 8005636:	2300      	movs	r3, #0
 8005638:	4606      	mov	r6, r0
 800563a:	460f      	mov	r7, r1
 800563c:	f7fb f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 8005640:	2800      	cmp	r0, #0
 8005642:	d09e      	beq.n	8005582 <_dtoa_r+0x62a>
 8005644:	e7cf      	b.n	80055e6 <_dtoa_r+0x68e>
 8005646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005648:	2a00      	cmp	r2, #0
 800564a:	f000 8088 	beq.w	800575e <_dtoa_r+0x806>
 800564e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005650:	2a01      	cmp	r2, #1
 8005652:	dc6d      	bgt.n	8005730 <_dtoa_r+0x7d8>
 8005654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005656:	2a00      	cmp	r2, #0
 8005658:	d066      	beq.n	8005728 <_dtoa_r+0x7d0>
 800565a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800565e:	464d      	mov	r5, r9
 8005660:	9e08      	ldr	r6, [sp, #32]
 8005662:	9a07      	ldr	r2, [sp, #28]
 8005664:	2101      	movs	r1, #1
 8005666:	441a      	add	r2, r3
 8005668:	4620      	mov	r0, r4
 800566a:	4499      	add	r9, r3
 800566c:	9207      	str	r2, [sp, #28]
 800566e:	f001 f886 	bl	800677e <__i2b>
 8005672:	4607      	mov	r7, r0
 8005674:	2d00      	cmp	r5, #0
 8005676:	dd0b      	ble.n	8005690 <_dtoa_r+0x738>
 8005678:	9b07      	ldr	r3, [sp, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	dd08      	ble.n	8005690 <_dtoa_r+0x738>
 800567e:	42ab      	cmp	r3, r5
 8005680:	bfa8      	it	ge
 8005682:	462b      	movge	r3, r5
 8005684:	9a07      	ldr	r2, [sp, #28]
 8005686:	eba9 0903 	sub.w	r9, r9, r3
 800568a:	1aed      	subs	r5, r5, r3
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	9307      	str	r3, [sp, #28]
 8005690:	9b08      	ldr	r3, [sp, #32]
 8005692:	b1eb      	cbz	r3, 80056d0 <_dtoa_r+0x778>
 8005694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d065      	beq.n	8005766 <_dtoa_r+0x80e>
 800569a:	b18e      	cbz	r6, 80056c0 <_dtoa_r+0x768>
 800569c:	4639      	mov	r1, r7
 800569e:	4632      	mov	r2, r6
 80056a0:	4620      	mov	r0, r4
 80056a2:	f001 f90b 	bl	80068bc <__pow5mult>
 80056a6:	465a      	mov	r2, fp
 80056a8:	4601      	mov	r1, r0
 80056aa:	4607      	mov	r7, r0
 80056ac:	4620      	mov	r0, r4
 80056ae:	f001 f86f 	bl	8006790 <__multiply>
 80056b2:	4659      	mov	r1, fp
 80056b4:	900a      	str	r0, [sp, #40]	; 0x28
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 ff83 	bl	80065c2 <_Bfree>
 80056bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056be:	469b      	mov	fp, r3
 80056c0:	9b08      	ldr	r3, [sp, #32]
 80056c2:	1b9a      	subs	r2, r3, r6
 80056c4:	d004      	beq.n	80056d0 <_dtoa_r+0x778>
 80056c6:	4659      	mov	r1, fp
 80056c8:	4620      	mov	r0, r4
 80056ca:	f001 f8f7 	bl	80068bc <__pow5mult>
 80056ce:	4683      	mov	fp, r0
 80056d0:	2101      	movs	r1, #1
 80056d2:	4620      	mov	r0, r4
 80056d4:	f001 f853 	bl	800677e <__i2b>
 80056d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056da:	4606      	mov	r6, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 81c6 	beq.w	8005a6e <_dtoa_r+0xb16>
 80056e2:	461a      	mov	r2, r3
 80056e4:	4601      	mov	r1, r0
 80056e6:	4620      	mov	r0, r4
 80056e8:	f001 f8e8 	bl	80068bc <__pow5mult>
 80056ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056ee:	4606      	mov	r6, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	dc3e      	bgt.n	8005772 <_dtoa_r+0x81a>
 80056f4:	9b02      	ldr	r3, [sp, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d137      	bne.n	800576a <_dtoa_r+0x812>
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005700:	2b00      	cmp	r3, #0
 8005702:	d134      	bne.n	800576e <_dtoa_r+0x816>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800570a:	0d1b      	lsrs	r3, r3, #20
 800570c:	051b      	lsls	r3, r3, #20
 800570e:	b12b      	cbz	r3, 800571c <_dtoa_r+0x7c4>
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	f109 0901 	add.w	r9, r9, #1
 8005716:	3301      	adds	r3, #1
 8005718:	9307      	str	r3, [sp, #28]
 800571a:	2301      	movs	r3, #1
 800571c:	9308      	str	r3, [sp, #32]
 800571e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005720:	2b00      	cmp	r3, #0
 8005722:	d128      	bne.n	8005776 <_dtoa_r+0x81e>
 8005724:	2001      	movs	r0, #1
 8005726:	e02e      	b.n	8005786 <_dtoa_r+0x82e>
 8005728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800572a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800572e:	e796      	b.n	800565e <_dtoa_r+0x706>
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	f108 36ff 	add.w	r6, r8, #4294967295
 8005736:	42b3      	cmp	r3, r6
 8005738:	bfb7      	itett	lt
 800573a:	9b08      	ldrlt	r3, [sp, #32]
 800573c:	1b9e      	subge	r6, r3, r6
 800573e:	1af2      	sublt	r2, r6, r3
 8005740:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005742:	bfbf      	itttt	lt
 8005744:	9608      	strlt	r6, [sp, #32]
 8005746:	189b      	addlt	r3, r3, r2
 8005748:	930c      	strlt	r3, [sp, #48]	; 0x30
 800574a:	2600      	movlt	r6, #0
 800574c:	f1b8 0f00 	cmp.w	r8, #0
 8005750:	bfb9      	ittee	lt
 8005752:	eba9 0508 	sublt.w	r5, r9, r8
 8005756:	2300      	movlt	r3, #0
 8005758:	464d      	movge	r5, r9
 800575a:	4643      	movge	r3, r8
 800575c:	e781      	b.n	8005662 <_dtoa_r+0x70a>
 800575e:	9e08      	ldr	r6, [sp, #32]
 8005760:	464d      	mov	r5, r9
 8005762:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005764:	e786      	b.n	8005674 <_dtoa_r+0x71c>
 8005766:	9a08      	ldr	r2, [sp, #32]
 8005768:	e7ad      	b.n	80056c6 <_dtoa_r+0x76e>
 800576a:	2300      	movs	r3, #0
 800576c:	e7d6      	b.n	800571c <_dtoa_r+0x7c4>
 800576e:	9b02      	ldr	r3, [sp, #8]
 8005770:	e7d4      	b.n	800571c <_dtoa_r+0x7c4>
 8005772:	2300      	movs	r3, #0
 8005774:	9308      	str	r3, [sp, #32]
 8005776:	6933      	ldr	r3, [r6, #16]
 8005778:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800577c:	6918      	ldr	r0, [r3, #16]
 800577e:	f000 ffb0 	bl	80066e2 <__hi0bits>
 8005782:	f1c0 0020 	rsb	r0, r0, #32
 8005786:	9b07      	ldr	r3, [sp, #28]
 8005788:	4418      	add	r0, r3
 800578a:	f010 001f 	ands.w	r0, r0, #31
 800578e:	d047      	beq.n	8005820 <_dtoa_r+0x8c8>
 8005790:	f1c0 0320 	rsb	r3, r0, #32
 8005794:	2b04      	cmp	r3, #4
 8005796:	dd3b      	ble.n	8005810 <_dtoa_r+0x8b8>
 8005798:	9b07      	ldr	r3, [sp, #28]
 800579a:	f1c0 001c 	rsb	r0, r0, #28
 800579e:	4481      	add	r9, r0
 80057a0:	4405      	add	r5, r0
 80057a2:	4403      	add	r3, r0
 80057a4:	9307      	str	r3, [sp, #28]
 80057a6:	f1b9 0f00 	cmp.w	r9, #0
 80057aa:	dd05      	ble.n	80057b8 <_dtoa_r+0x860>
 80057ac:	4659      	mov	r1, fp
 80057ae:	464a      	mov	r2, r9
 80057b0:	4620      	mov	r0, r4
 80057b2:	f001 f8d1 	bl	8006958 <__lshift>
 80057b6:	4683      	mov	fp, r0
 80057b8:	9b07      	ldr	r3, [sp, #28]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dd05      	ble.n	80057ca <_dtoa_r+0x872>
 80057be:	4631      	mov	r1, r6
 80057c0:	461a      	mov	r2, r3
 80057c2:	4620      	mov	r0, r4
 80057c4:	f001 f8c8 	bl	8006958 <__lshift>
 80057c8:	4606      	mov	r6, r0
 80057ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057cc:	b353      	cbz	r3, 8005824 <_dtoa_r+0x8cc>
 80057ce:	4631      	mov	r1, r6
 80057d0:	4658      	mov	r0, fp
 80057d2:	f001 f915 	bl	8006a00 <__mcmp>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	da24      	bge.n	8005824 <_dtoa_r+0x8cc>
 80057da:	2300      	movs	r3, #0
 80057dc:	4659      	mov	r1, fp
 80057de:	220a      	movs	r2, #10
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 ff05 	bl	80065f0 <__multadd>
 80057e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ec:	4683      	mov	fp, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 8144 	beq.w	8005a7c <_dtoa_r+0xb24>
 80057f4:	2300      	movs	r3, #0
 80057f6:	4639      	mov	r1, r7
 80057f8:	220a      	movs	r2, #10
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 fef8 	bl	80065f0 <__multadd>
 8005800:	9b04      	ldr	r3, [sp, #16]
 8005802:	4607      	mov	r7, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	dc4d      	bgt.n	80058a4 <_dtoa_r+0x94c>
 8005808:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800580a:	2b02      	cmp	r3, #2
 800580c:	dd4a      	ble.n	80058a4 <_dtoa_r+0x94c>
 800580e:	e011      	b.n	8005834 <_dtoa_r+0x8dc>
 8005810:	d0c9      	beq.n	80057a6 <_dtoa_r+0x84e>
 8005812:	9a07      	ldr	r2, [sp, #28]
 8005814:	331c      	adds	r3, #28
 8005816:	441a      	add	r2, r3
 8005818:	4499      	add	r9, r3
 800581a:	441d      	add	r5, r3
 800581c:	4613      	mov	r3, r2
 800581e:	e7c1      	b.n	80057a4 <_dtoa_r+0x84c>
 8005820:	4603      	mov	r3, r0
 8005822:	e7f6      	b.n	8005812 <_dtoa_r+0x8ba>
 8005824:	f1b8 0f00 	cmp.w	r8, #0
 8005828:	dc36      	bgt.n	8005898 <_dtoa_r+0x940>
 800582a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800582c:	2b02      	cmp	r3, #2
 800582e:	dd33      	ble.n	8005898 <_dtoa_r+0x940>
 8005830:	f8cd 8010 	str.w	r8, [sp, #16]
 8005834:	9b04      	ldr	r3, [sp, #16]
 8005836:	b963      	cbnz	r3, 8005852 <_dtoa_r+0x8fa>
 8005838:	4631      	mov	r1, r6
 800583a:	2205      	movs	r2, #5
 800583c:	4620      	mov	r0, r4
 800583e:	f000 fed7 	bl	80065f0 <__multadd>
 8005842:	4601      	mov	r1, r0
 8005844:	4606      	mov	r6, r0
 8005846:	4658      	mov	r0, fp
 8005848:	f001 f8da 	bl	8006a00 <__mcmp>
 800584c:	2800      	cmp	r0, #0
 800584e:	f73f add3 	bgt.w	80053f8 <_dtoa_r+0x4a0>
 8005852:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005854:	9d06      	ldr	r5, [sp, #24]
 8005856:	ea6f 0a03 	mvn.w	sl, r3
 800585a:	f04f 0900 	mov.w	r9, #0
 800585e:	4631      	mov	r1, r6
 8005860:	4620      	mov	r0, r4
 8005862:	f000 feae 	bl	80065c2 <_Bfree>
 8005866:	2f00      	cmp	r7, #0
 8005868:	f43f aebd 	beq.w	80055e6 <_dtoa_r+0x68e>
 800586c:	f1b9 0f00 	cmp.w	r9, #0
 8005870:	d005      	beq.n	800587e <_dtoa_r+0x926>
 8005872:	45b9      	cmp	r9, r7
 8005874:	d003      	beq.n	800587e <_dtoa_r+0x926>
 8005876:	4649      	mov	r1, r9
 8005878:	4620      	mov	r0, r4
 800587a:	f000 fea2 	bl	80065c2 <_Bfree>
 800587e:	4639      	mov	r1, r7
 8005880:	4620      	mov	r0, r4
 8005882:	f000 fe9e 	bl	80065c2 <_Bfree>
 8005886:	e6ae      	b.n	80055e6 <_dtoa_r+0x68e>
 8005888:	2600      	movs	r6, #0
 800588a:	4637      	mov	r7, r6
 800588c:	e7e1      	b.n	8005852 <_dtoa_r+0x8fa>
 800588e:	46ba      	mov	sl, r7
 8005890:	4637      	mov	r7, r6
 8005892:	e5b1      	b.n	80053f8 <_dtoa_r+0x4a0>
 8005894:	40240000 	.word	0x40240000
 8005898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589a:	f8cd 8010 	str.w	r8, [sp, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80f3 	beq.w	8005a8a <_dtoa_r+0xb32>
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	dd05      	ble.n	80058b4 <_dtoa_r+0x95c>
 80058a8:	4639      	mov	r1, r7
 80058aa:	462a      	mov	r2, r5
 80058ac:	4620      	mov	r0, r4
 80058ae:	f001 f853 	bl	8006958 <__lshift>
 80058b2:	4607      	mov	r7, r0
 80058b4:	9b08      	ldr	r3, [sp, #32]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d04c      	beq.n	8005954 <_dtoa_r+0x9fc>
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fe4c 	bl	800655a <_Balloc>
 80058c2:	4605      	mov	r5, r0
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	f107 010c 	add.w	r1, r7, #12
 80058ca:	3202      	adds	r2, #2
 80058cc:	0092      	lsls	r2, r2, #2
 80058ce:	300c      	adds	r0, #12
 80058d0:	f000 fe38 	bl	8006544 <memcpy>
 80058d4:	2201      	movs	r2, #1
 80058d6:	4629      	mov	r1, r5
 80058d8:	4620      	mov	r0, r4
 80058da:	f001 f83d 	bl	8006958 <__lshift>
 80058de:	46b9      	mov	r9, r7
 80058e0:	4607      	mov	r7, r0
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	9307      	str	r3, [sp, #28]
 80058e6:	9b02      	ldr	r3, [sp, #8]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	9308      	str	r3, [sp, #32]
 80058ee:	4631      	mov	r1, r6
 80058f0:	4658      	mov	r0, fp
 80058f2:	f7ff faa3 	bl	8004e3c <quorem>
 80058f6:	4649      	mov	r1, r9
 80058f8:	4605      	mov	r5, r0
 80058fa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058fe:	4658      	mov	r0, fp
 8005900:	f001 f87e 	bl	8006a00 <__mcmp>
 8005904:	463a      	mov	r2, r7
 8005906:	9002      	str	r0, [sp, #8]
 8005908:	4631      	mov	r1, r6
 800590a:	4620      	mov	r0, r4
 800590c:	f001 f892 	bl	8006a34 <__mdiff>
 8005910:	68c3      	ldr	r3, [r0, #12]
 8005912:	4602      	mov	r2, r0
 8005914:	bb03      	cbnz	r3, 8005958 <_dtoa_r+0xa00>
 8005916:	4601      	mov	r1, r0
 8005918:	9009      	str	r0, [sp, #36]	; 0x24
 800591a:	4658      	mov	r0, fp
 800591c:	f001 f870 	bl	8006a00 <__mcmp>
 8005920:	4603      	mov	r3, r0
 8005922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005924:	4611      	mov	r1, r2
 8005926:	4620      	mov	r0, r4
 8005928:	9309      	str	r3, [sp, #36]	; 0x24
 800592a:	f000 fe4a 	bl	80065c2 <_Bfree>
 800592e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005930:	b9a3      	cbnz	r3, 800595c <_dtoa_r+0xa04>
 8005932:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005934:	b992      	cbnz	r2, 800595c <_dtoa_r+0xa04>
 8005936:	9a08      	ldr	r2, [sp, #32]
 8005938:	b982      	cbnz	r2, 800595c <_dtoa_r+0xa04>
 800593a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800593e:	d029      	beq.n	8005994 <_dtoa_r+0xa3c>
 8005940:	9b02      	ldr	r3, [sp, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	dd01      	ble.n	800594a <_dtoa_r+0x9f2>
 8005946:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800594a:	9b07      	ldr	r3, [sp, #28]
 800594c:	1c5d      	adds	r5, r3, #1
 800594e:	f883 8000 	strb.w	r8, [r3]
 8005952:	e784      	b.n	800585e <_dtoa_r+0x906>
 8005954:	4638      	mov	r0, r7
 8005956:	e7c2      	b.n	80058de <_dtoa_r+0x986>
 8005958:	2301      	movs	r3, #1
 800595a:	e7e3      	b.n	8005924 <_dtoa_r+0x9cc>
 800595c:	9a02      	ldr	r2, [sp, #8]
 800595e:	2a00      	cmp	r2, #0
 8005960:	db04      	blt.n	800596c <_dtoa_r+0xa14>
 8005962:	d123      	bne.n	80059ac <_dtoa_r+0xa54>
 8005964:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005966:	bb0a      	cbnz	r2, 80059ac <_dtoa_r+0xa54>
 8005968:	9a08      	ldr	r2, [sp, #32]
 800596a:	b9fa      	cbnz	r2, 80059ac <_dtoa_r+0xa54>
 800596c:	2b00      	cmp	r3, #0
 800596e:	ddec      	ble.n	800594a <_dtoa_r+0x9f2>
 8005970:	4659      	mov	r1, fp
 8005972:	2201      	movs	r2, #1
 8005974:	4620      	mov	r0, r4
 8005976:	f000 ffef 	bl	8006958 <__lshift>
 800597a:	4631      	mov	r1, r6
 800597c:	4683      	mov	fp, r0
 800597e:	f001 f83f 	bl	8006a00 <__mcmp>
 8005982:	2800      	cmp	r0, #0
 8005984:	dc03      	bgt.n	800598e <_dtoa_r+0xa36>
 8005986:	d1e0      	bne.n	800594a <_dtoa_r+0x9f2>
 8005988:	f018 0f01 	tst.w	r8, #1
 800598c:	d0dd      	beq.n	800594a <_dtoa_r+0x9f2>
 800598e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005992:	d1d8      	bne.n	8005946 <_dtoa_r+0x9ee>
 8005994:	9b07      	ldr	r3, [sp, #28]
 8005996:	9a07      	ldr	r2, [sp, #28]
 8005998:	1c5d      	adds	r5, r3, #1
 800599a:	2339      	movs	r3, #57	; 0x39
 800599c:	7013      	strb	r3, [r2, #0]
 800599e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059a2:	1e6a      	subs	r2, r5, #1
 80059a4:	2b39      	cmp	r3, #57	; 0x39
 80059a6:	d04d      	beq.n	8005a44 <_dtoa_r+0xaec>
 80059a8:	3301      	adds	r3, #1
 80059aa:	e052      	b.n	8005a52 <_dtoa_r+0xafa>
 80059ac:	9a07      	ldr	r2, [sp, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f102 0501 	add.w	r5, r2, #1
 80059b4:	dd06      	ble.n	80059c4 <_dtoa_r+0xa6c>
 80059b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059ba:	d0eb      	beq.n	8005994 <_dtoa_r+0xa3c>
 80059bc:	f108 0801 	add.w	r8, r8, #1
 80059c0:	9b07      	ldr	r3, [sp, #28]
 80059c2:	e7c4      	b.n	800594e <_dtoa_r+0x9f6>
 80059c4:	9b06      	ldr	r3, [sp, #24]
 80059c6:	9a04      	ldr	r2, [sp, #16]
 80059c8:	1aeb      	subs	r3, r5, r3
 80059ca:	4293      	cmp	r3, r2
 80059cc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80059d0:	d021      	beq.n	8005a16 <_dtoa_r+0xabe>
 80059d2:	4659      	mov	r1, fp
 80059d4:	2300      	movs	r3, #0
 80059d6:	220a      	movs	r2, #10
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 fe09 	bl	80065f0 <__multadd>
 80059de:	45b9      	cmp	r9, r7
 80059e0:	4683      	mov	fp, r0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	f04f 020a 	mov.w	r2, #10
 80059ea:	4649      	mov	r1, r9
 80059ec:	4620      	mov	r0, r4
 80059ee:	d105      	bne.n	80059fc <_dtoa_r+0xaa4>
 80059f0:	f000 fdfe 	bl	80065f0 <__multadd>
 80059f4:	4681      	mov	r9, r0
 80059f6:	4607      	mov	r7, r0
 80059f8:	9507      	str	r5, [sp, #28]
 80059fa:	e778      	b.n	80058ee <_dtoa_r+0x996>
 80059fc:	f000 fdf8 	bl	80065f0 <__multadd>
 8005a00:	4639      	mov	r1, r7
 8005a02:	4681      	mov	r9, r0
 8005a04:	2300      	movs	r3, #0
 8005a06:	220a      	movs	r2, #10
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 fdf1 	bl	80065f0 <__multadd>
 8005a0e:	4607      	mov	r7, r0
 8005a10:	e7f2      	b.n	80059f8 <_dtoa_r+0xaa0>
 8005a12:	f04f 0900 	mov.w	r9, #0
 8005a16:	4659      	mov	r1, fp
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 ff9c 	bl	8006958 <__lshift>
 8005a20:	4631      	mov	r1, r6
 8005a22:	4683      	mov	fp, r0
 8005a24:	f000 ffec 	bl	8006a00 <__mcmp>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	dcb8      	bgt.n	800599e <_dtoa_r+0xa46>
 8005a2c:	d102      	bne.n	8005a34 <_dtoa_r+0xadc>
 8005a2e:	f018 0f01 	tst.w	r8, #1
 8005a32:	d1b4      	bne.n	800599e <_dtoa_r+0xa46>
 8005a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a38:	1e6a      	subs	r2, r5, #1
 8005a3a:	2b30      	cmp	r3, #48	; 0x30
 8005a3c:	f47f af0f 	bne.w	800585e <_dtoa_r+0x906>
 8005a40:	4615      	mov	r5, r2
 8005a42:	e7f7      	b.n	8005a34 <_dtoa_r+0xadc>
 8005a44:	9b06      	ldr	r3, [sp, #24]
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d105      	bne.n	8005a56 <_dtoa_r+0xafe>
 8005a4a:	2331      	movs	r3, #49	; 0x31
 8005a4c:	9a06      	ldr	r2, [sp, #24]
 8005a4e:	f10a 0a01 	add.w	sl, sl, #1
 8005a52:	7013      	strb	r3, [r2, #0]
 8005a54:	e703      	b.n	800585e <_dtoa_r+0x906>
 8005a56:	4615      	mov	r5, r2
 8005a58:	e7a1      	b.n	800599e <_dtoa_r+0xa46>
 8005a5a:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <_dtoa_r+0xb60>)
 8005a5c:	f7ff bae1 	b.w	8005022 <_dtoa_r+0xca>
 8005a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f47f aabb 	bne.w	8004fde <_dtoa_r+0x86>
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <_dtoa_r+0xb64>)
 8005a6a:	f7ff bada 	b.w	8005022 <_dtoa_r+0xca>
 8005a6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f77f ae3f 	ble.w	80056f4 <_dtoa_r+0x79c>
 8005a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a78:	9308      	str	r3, [sp, #32]
 8005a7a:	e653      	b.n	8005724 <_dtoa_r+0x7cc>
 8005a7c:	9b04      	ldr	r3, [sp, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dc03      	bgt.n	8005a8a <_dtoa_r+0xb32>
 8005a82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	f73f aed5 	bgt.w	8005834 <_dtoa_r+0x8dc>
 8005a8a:	9d06      	ldr	r5, [sp, #24]
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4658      	mov	r0, fp
 8005a90:	f7ff f9d4 	bl	8004e3c <quorem>
 8005a94:	9b06      	ldr	r3, [sp, #24]
 8005a96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a9a:	f805 8b01 	strb.w	r8, [r5], #1
 8005a9e:	9a04      	ldr	r2, [sp, #16]
 8005aa0:	1aeb      	subs	r3, r5, r3
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	ddb5      	ble.n	8005a12 <_dtoa_r+0xaba>
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	220a      	movs	r2, #10
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fd9f 	bl	80065f0 <__multadd>
 8005ab2:	4683      	mov	fp, r0
 8005ab4:	e7ea      	b.n	8005a8c <_dtoa_r+0xb34>
 8005ab6:	bf00      	nop
 8005ab8:	080076dc 	.word	0x080076dc
 8005abc:	08007758 	.word	0x08007758

08005ac0 <__sflush_r>:
 8005ac0:	898a      	ldrh	r2, [r1, #12]
 8005ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	0710      	lsls	r0, r2, #28
 8005aca:	460c      	mov	r4, r1
 8005acc:	d458      	bmi.n	8005b80 <__sflush_r+0xc0>
 8005ace:	684b      	ldr	r3, [r1, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	dc05      	bgt.n	8005ae0 <__sflush_r+0x20>
 8005ad4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	dc02      	bgt.n	8005ae0 <__sflush_r+0x20>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ae2:	2e00      	cmp	r6, #0
 8005ae4:	d0f9      	beq.n	8005ada <__sflush_r+0x1a>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005aec:	682f      	ldr	r7, [r5, #0]
 8005aee:	6a21      	ldr	r1, [r4, #32]
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	d032      	beq.n	8005b5a <__sflush_r+0x9a>
 8005af4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	075a      	lsls	r2, r3, #29
 8005afa:	d505      	bpl.n	8005b08 <__sflush_r+0x48>
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	1ac0      	subs	r0, r0, r3
 8005b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b02:	b10b      	cbz	r3, 8005b08 <__sflush_r+0x48>
 8005b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b06:	1ac0      	subs	r0, r0, r3
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b0e:	6a21      	ldr	r1, [r4, #32]
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b0      	blx	r6
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	d106      	bne.n	8005b28 <__sflush_r+0x68>
 8005b1a:	6829      	ldr	r1, [r5, #0]
 8005b1c:	291d      	cmp	r1, #29
 8005b1e:	d848      	bhi.n	8005bb2 <__sflush_r+0xf2>
 8005b20:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <__sflush_r+0x108>)
 8005b22:	40ca      	lsrs	r2, r1
 8005b24:	07d6      	lsls	r6, r2, #31
 8005b26:	d544      	bpl.n	8005bb2 <__sflush_r+0xf2>
 8005b28:	2200      	movs	r2, #0
 8005b2a:	6062      	str	r2, [r4, #4]
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	04d9      	lsls	r1, r3, #19
 8005b30:	6022      	str	r2, [r4, #0]
 8005b32:	d504      	bpl.n	8005b3e <__sflush_r+0x7e>
 8005b34:	1c42      	adds	r2, r0, #1
 8005b36:	d101      	bne.n	8005b3c <__sflush_r+0x7c>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	b903      	cbnz	r3, 8005b3e <__sflush_r+0x7e>
 8005b3c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b40:	602f      	str	r7, [r5, #0]
 8005b42:	2900      	cmp	r1, #0
 8005b44:	d0c9      	beq.n	8005ada <__sflush_r+0x1a>
 8005b46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b4a:	4299      	cmp	r1, r3
 8005b4c:	d002      	beq.n	8005b54 <__sflush_r+0x94>
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f001 f90a 	bl	8006d68 <_free_r>
 8005b54:	2000      	movs	r0, #0
 8005b56:	6360      	str	r0, [r4, #52]	; 0x34
 8005b58:	e7c0      	b.n	8005adc <__sflush_r+0x1c>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b0      	blx	r6
 8005b60:	1c41      	adds	r1, r0, #1
 8005b62:	d1c8      	bne.n	8005af6 <__sflush_r+0x36>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0c5      	beq.n	8005af6 <__sflush_r+0x36>
 8005b6a:	2b1d      	cmp	r3, #29
 8005b6c:	d001      	beq.n	8005b72 <__sflush_r+0xb2>
 8005b6e:	2b16      	cmp	r3, #22
 8005b70:	d101      	bne.n	8005b76 <__sflush_r+0xb6>
 8005b72:	602f      	str	r7, [r5, #0]
 8005b74:	e7b1      	b.n	8005ada <__sflush_r+0x1a>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	e7ad      	b.n	8005adc <__sflush_r+0x1c>
 8005b80:	690f      	ldr	r7, [r1, #16]
 8005b82:	2f00      	cmp	r7, #0
 8005b84:	d0a9      	beq.n	8005ada <__sflush_r+0x1a>
 8005b86:	0793      	lsls	r3, r2, #30
 8005b88:	bf18      	it	ne
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	680e      	ldr	r6, [r1, #0]
 8005b8e:	bf08      	it	eq
 8005b90:	694b      	ldreq	r3, [r1, #20]
 8005b92:	eba6 0807 	sub.w	r8, r6, r7
 8005b96:	600f      	str	r7, [r1, #0]
 8005b98:	608b      	str	r3, [r1, #8]
 8005b9a:	f1b8 0f00 	cmp.w	r8, #0
 8005b9e:	dd9c      	ble.n	8005ada <__sflush_r+0x1a>
 8005ba0:	4643      	mov	r3, r8
 8005ba2:	463a      	mov	r2, r7
 8005ba4:	6a21      	ldr	r1, [r4, #32]
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005baa:	47b0      	blx	r6
 8005bac:	2800      	cmp	r0, #0
 8005bae:	dc06      	bgt.n	8005bbe <__sflush_r+0xfe>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	e78e      	b.n	8005adc <__sflush_r+0x1c>
 8005bbe:	4407      	add	r7, r0
 8005bc0:	eba8 0800 	sub.w	r8, r8, r0
 8005bc4:	e7e9      	b.n	8005b9a <__sflush_r+0xda>
 8005bc6:	bf00      	nop
 8005bc8:	20400001 	.word	0x20400001

08005bcc <_fflush_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	690b      	ldr	r3, [r1, #16]
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	b1db      	cbz	r3, 8005c0e <_fflush_r+0x42>
 8005bd6:	b118      	cbz	r0, 8005be0 <_fflush_r+0x14>
 8005bd8:	6983      	ldr	r3, [r0, #24]
 8005bda:	b90b      	cbnz	r3, 8005be0 <_fflush_r+0x14>
 8005bdc:	f000 f860 	bl	8005ca0 <__sinit>
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <_fflush_r+0x48>)
 8005be2:	429c      	cmp	r4, r3
 8005be4:	d109      	bne.n	8005bfa <_fflush_r+0x2e>
 8005be6:	686c      	ldr	r4, [r5, #4]
 8005be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bec:	b17b      	cbz	r3, 8005c0e <_fflush_r+0x42>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bf6:	f7ff bf63 	b.w	8005ac0 <__sflush_r>
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <_fflush_r+0x4c>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d101      	bne.n	8005c04 <_fflush_r+0x38>
 8005c00:	68ac      	ldr	r4, [r5, #8]
 8005c02:	e7f1      	b.n	8005be8 <_fflush_r+0x1c>
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <_fflush_r+0x50>)
 8005c06:	429c      	cmp	r4, r3
 8005c08:	bf08      	it	eq
 8005c0a:	68ec      	ldreq	r4, [r5, #12]
 8005c0c:	e7ec      	b.n	8005be8 <_fflush_r+0x1c>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	08007788 	.word	0x08007788
 8005c18:	080077a8 	.word	0x080077a8
 8005c1c:	08007768 	.word	0x08007768

08005c20 <std>:
 8005c20:	2300      	movs	r3, #0
 8005c22:	b510      	push	{r4, lr}
 8005c24:	4604      	mov	r4, r0
 8005c26:	e9c0 3300 	strd	r3, r3, [r0]
 8005c2a:	6083      	str	r3, [r0, #8]
 8005c2c:	8181      	strh	r1, [r0, #12]
 8005c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8005c30:	81c2      	strh	r2, [r0, #14]
 8005c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c36:	6183      	str	r3, [r0, #24]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	305c      	adds	r0, #92	; 0x5c
 8005c3e:	f7fd faa5 	bl	800318c <memset>
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <std+0x38>)
 8005c44:	6224      	str	r4, [r4, #32]
 8005c46:	6263      	str	r3, [r4, #36]	; 0x24
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <std+0x3c>)
 8005c4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c4c:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <std+0x40>)
 8005c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <std+0x44>)
 8005c52:	6323      	str	r3, [r4, #48]	; 0x30
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	bf00      	nop
 8005c58:	080073f5 	.word	0x080073f5
 8005c5c:	08007417 	.word	0x08007417
 8005c60:	0800744f 	.word	0x0800744f
 8005c64:	08007473 	.word	0x08007473

08005c68 <_cleanup_r>:
 8005c68:	4901      	ldr	r1, [pc, #4]	; (8005c70 <_cleanup_r+0x8>)
 8005c6a:	f000 b885 	b.w	8005d78 <_fwalk_reent>
 8005c6e:	bf00      	nop
 8005c70:	08005bcd 	.word	0x08005bcd

08005c74 <__sfmoreglue>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	2568      	movs	r5, #104	; 0x68
 8005c78:	1e4a      	subs	r2, r1, #1
 8005c7a:	4355      	muls	r5, r2
 8005c7c:	460e      	mov	r6, r1
 8005c7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c82:	f001 f8bd 	bl	8006e00 <_malloc_r>
 8005c86:	4604      	mov	r4, r0
 8005c88:	b140      	cbz	r0, 8005c9c <__sfmoreglue+0x28>
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c90:	300c      	adds	r0, #12
 8005c92:	60a0      	str	r0, [r4, #8]
 8005c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c98:	f7fd fa78 	bl	800318c <memset>
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}

08005ca0 <__sinit>:
 8005ca0:	6983      	ldr	r3, [r0, #24]
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	bb33      	cbnz	r3, 8005cf6 <__sinit+0x56>
 8005ca8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005cac:	6503      	str	r3, [r0, #80]	; 0x50
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <__sinit+0x58>)
 8005cb0:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <__sinit+0x5c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6282      	str	r2, [r0, #40]	; 0x28
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	bf04      	itt	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	6183      	streq	r3, [r0, #24]
 8005cbe:	f000 f81f 	bl	8005d00 <__sfp>
 8005cc2:	6060      	str	r0, [r4, #4]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 f81b 	bl	8005d00 <__sfp>
 8005cca:	60a0      	str	r0, [r4, #8]
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f817 	bl	8005d00 <__sfp>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	60e0      	str	r0, [r4, #12]
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	6860      	ldr	r0, [r4, #4]
 8005cda:	f7ff ffa1 	bl	8005c20 <std>
 8005cde:	2201      	movs	r2, #1
 8005ce0:	2109      	movs	r1, #9
 8005ce2:	68a0      	ldr	r0, [r4, #8]
 8005ce4:	f7ff ff9c 	bl	8005c20 <std>
 8005ce8:	2202      	movs	r2, #2
 8005cea:	2112      	movs	r1, #18
 8005cec:	68e0      	ldr	r0, [r4, #12]
 8005cee:	f7ff ff97 	bl	8005c20 <std>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	61a3      	str	r3, [r4, #24]
 8005cf6:	bd10      	pop	{r4, pc}
 8005cf8:	080076c8 	.word	0x080076c8
 8005cfc:	08005c69 	.word	0x08005c69

08005d00 <__sfp>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <__sfp+0x70>)
 8005d04:	4607      	mov	r7, r0
 8005d06:	681e      	ldr	r6, [r3, #0]
 8005d08:	69b3      	ldr	r3, [r6, #24]
 8005d0a:	b913      	cbnz	r3, 8005d12 <__sfp+0x12>
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f7ff ffc7 	bl	8005ca0 <__sinit>
 8005d12:	3648      	adds	r6, #72	; 0x48
 8005d14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	d503      	bpl.n	8005d24 <__sfp+0x24>
 8005d1c:	6833      	ldr	r3, [r6, #0]
 8005d1e:	b133      	cbz	r3, 8005d2e <__sfp+0x2e>
 8005d20:	6836      	ldr	r6, [r6, #0]
 8005d22:	e7f7      	b.n	8005d14 <__sfp+0x14>
 8005d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d28:	b16d      	cbz	r5, 8005d46 <__sfp+0x46>
 8005d2a:	3468      	adds	r4, #104	; 0x68
 8005d2c:	e7f4      	b.n	8005d18 <__sfp+0x18>
 8005d2e:	2104      	movs	r1, #4
 8005d30:	4638      	mov	r0, r7
 8005d32:	f7ff ff9f 	bl	8005c74 <__sfmoreglue>
 8005d36:	6030      	str	r0, [r6, #0]
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d1f1      	bne.n	8005d20 <__sfp+0x20>
 8005d3c:	230c      	movs	r3, #12
 8005d3e:	4604      	mov	r4, r0
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	4620      	mov	r0, r4
 8005d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <__sfp+0x74>)
 8005d48:	6665      	str	r5, [r4, #100]	; 0x64
 8005d4a:	e9c4 5500 	strd	r5, r5, [r4]
 8005d4e:	60a5      	str	r5, [r4, #8]
 8005d50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005d54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005d58:	2208      	movs	r2, #8
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d60:	f7fd fa14 	bl	800318c <memset>
 8005d64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d6c:	e7e9      	b.n	8005d42 <__sfp+0x42>
 8005d6e:	bf00      	nop
 8005d70:	080076c8 	.word	0x080076c8
 8005d74:	ffff0001 	.word	0xffff0001

08005d78 <_fwalk_reent>:
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7c:	4680      	mov	r8, r0
 8005d7e:	4689      	mov	r9, r1
 8005d80:	2600      	movs	r6, #0
 8005d82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d86:	b914      	cbnz	r4, 8005d8e <_fwalk_reent+0x16>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005d92:	3f01      	subs	r7, #1
 8005d94:	d501      	bpl.n	8005d9a <_fwalk_reent+0x22>
 8005d96:	6824      	ldr	r4, [r4, #0]
 8005d98:	e7f5      	b.n	8005d86 <_fwalk_reent+0xe>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d907      	bls.n	8005db0 <_fwalk_reent+0x38>
 8005da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005da4:	3301      	adds	r3, #1
 8005da6:	d003      	beq.n	8005db0 <_fwalk_reent+0x38>
 8005da8:	4629      	mov	r1, r5
 8005daa:	4640      	mov	r0, r8
 8005dac:	47c8      	blx	r9
 8005dae:	4306      	orrs	r6, r0
 8005db0:	3568      	adds	r5, #104	; 0x68
 8005db2:	e7ee      	b.n	8005d92 <_fwalk_reent+0x1a>

08005db4 <rshift>:
 8005db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db6:	6906      	ldr	r6, [r0, #16]
 8005db8:	114b      	asrs	r3, r1, #5
 8005dba:	429e      	cmp	r6, r3
 8005dbc:	f100 0414 	add.w	r4, r0, #20
 8005dc0:	dd31      	ble.n	8005e26 <rshift+0x72>
 8005dc2:	f011 011f 	ands.w	r1, r1, #31
 8005dc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005dca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005dce:	d108      	bne.n	8005de2 <rshift+0x2e>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	42b2      	cmp	r2, r6
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	d211      	bcs.n	8005dfc <rshift+0x48>
 8005dd8:	f852 3b04 	ldr.w	r3, [r2], #4
 8005ddc:	f841 3b04 	str.w	r3, [r1], #4
 8005de0:	e7f7      	b.n	8005dd2 <rshift+0x1e>
 8005de2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005de6:	4623      	mov	r3, r4
 8005de8:	f1c1 0c20 	rsb	ip, r1, #32
 8005dec:	40cd      	lsrs	r5, r1
 8005dee:	3204      	adds	r2, #4
 8005df0:	42b2      	cmp	r2, r6
 8005df2:	4617      	mov	r7, r2
 8005df4:	d30d      	bcc.n	8005e12 <rshift+0x5e>
 8005df6:	601d      	str	r5, [r3, #0]
 8005df8:	b105      	cbz	r5, 8005dfc <rshift+0x48>
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	eba3 0204 	sub.w	r2, r3, r4
 8005e02:	bf08      	it	eq
 8005e04:	2300      	moveq	r3, #0
 8005e06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005e0a:	6102      	str	r2, [r0, #16]
 8005e0c:	bf08      	it	eq
 8005e0e:	6143      	streq	r3, [r0, #20]
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e12:	683f      	ldr	r7, [r7, #0]
 8005e14:	fa07 f70c 	lsl.w	r7, r7, ip
 8005e18:	433d      	orrs	r5, r7
 8005e1a:	f843 5b04 	str.w	r5, [r3], #4
 8005e1e:	f852 5b04 	ldr.w	r5, [r2], #4
 8005e22:	40cd      	lsrs	r5, r1
 8005e24:	e7e4      	b.n	8005df0 <rshift+0x3c>
 8005e26:	4623      	mov	r3, r4
 8005e28:	e7e8      	b.n	8005dfc <rshift+0x48>

08005e2a <__hexdig_fun>:
 8005e2a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005e2e:	2b09      	cmp	r3, #9
 8005e30:	d802      	bhi.n	8005e38 <__hexdig_fun+0xe>
 8005e32:	3820      	subs	r0, #32
 8005e34:	b2c0      	uxtb	r0, r0
 8005e36:	4770      	bx	lr
 8005e38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005e3c:	2b05      	cmp	r3, #5
 8005e3e:	d801      	bhi.n	8005e44 <__hexdig_fun+0x1a>
 8005e40:	3847      	subs	r0, #71	; 0x47
 8005e42:	e7f7      	b.n	8005e34 <__hexdig_fun+0xa>
 8005e44:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d801      	bhi.n	8005e50 <__hexdig_fun+0x26>
 8005e4c:	3827      	subs	r0, #39	; 0x27
 8005e4e:	e7f1      	b.n	8005e34 <__hexdig_fun+0xa>
 8005e50:	2000      	movs	r0, #0
 8005e52:	4770      	bx	lr

08005e54 <__gethex>:
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	b08b      	sub	sp, #44	; 0x2c
 8005e5a:	9002      	str	r0, [sp, #8]
 8005e5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005e5e:	468a      	mov	sl, r1
 8005e60:	4690      	mov	r8, r2
 8005e62:	9306      	str	r3, [sp, #24]
 8005e64:	f000 fad1 	bl	800640a <__localeconv_l>
 8005e68:	6803      	ldr	r3, [r0, #0]
 8005e6a:	f04f 0b00 	mov.w	fp, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	9303      	str	r3, [sp, #12]
 8005e72:	f7fa f96d 	bl	8000150 <strlen>
 8005e76:	9b03      	ldr	r3, [sp, #12]
 8005e78:	9001      	str	r0, [sp, #4]
 8005e7a:	4403      	add	r3, r0
 8005e7c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005e80:	9307      	str	r3, [sp, #28]
 8005e82:	f8da 3000 	ldr.w	r3, [sl]
 8005e86:	3302      	adds	r3, #2
 8005e88:	461f      	mov	r7, r3
 8005e8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e8e:	2830      	cmp	r0, #48	; 0x30
 8005e90:	d06c      	beq.n	8005f6c <__gethex+0x118>
 8005e92:	f7ff ffca 	bl	8005e2a <__hexdig_fun>
 8005e96:	4604      	mov	r4, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d16a      	bne.n	8005f72 <__gethex+0x11e>
 8005e9c:	9a01      	ldr	r2, [sp, #4]
 8005e9e:	9903      	ldr	r1, [sp, #12]
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f001 faea 	bl	800747a <strncmp>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d166      	bne.n	8005f78 <__gethex+0x124>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	5cf8      	ldrb	r0, [r7, r3]
 8005eae:	18fe      	adds	r6, r7, r3
 8005eb0:	f7ff ffbb 	bl	8005e2a <__hexdig_fun>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d062      	beq.n	8005f7e <__gethex+0x12a>
 8005eb8:	4633      	mov	r3, r6
 8005eba:	7818      	ldrb	r0, [r3, #0]
 8005ebc:	461f      	mov	r7, r3
 8005ebe:	2830      	cmp	r0, #48	; 0x30
 8005ec0:	f103 0301 	add.w	r3, r3, #1
 8005ec4:	d0f9      	beq.n	8005eba <__gethex+0x66>
 8005ec6:	f7ff ffb0 	bl	8005e2a <__hexdig_fun>
 8005eca:	fab0 f580 	clz	r5, r0
 8005ece:	4634      	mov	r4, r6
 8005ed0:	f04f 0b01 	mov.w	fp, #1
 8005ed4:	096d      	lsrs	r5, r5, #5
 8005ed6:	463a      	mov	r2, r7
 8005ed8:	4616      	mov	r6, r2
 8005eda:	7830      	ldrb	r0, [r6, #0]
 8005edc:	3201      	adds	r2, #1
 8005ede:	f7ff ffa4 	bl	8005e2a <__hexdig_fun>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d1f8      	bne.n	8005ed8 <__gethex+0x84>
 8005ee6:	9a01      	ldr	r2, [sp, #4]
 8005ee8:	9903      	ldr	r1, [sp, #12]
 8005eea:	4630      	mov	r0, r6
 8005eec:	f001 fac5 	bl	800747a <strncmp>
 8005ef0:	b950      	cbnz	r0, 8005f08 <__gethex+0xb4>
 8005ef2:	b954      	cbnz	r4, 8005f0a <__gethex+0xb6>
 8005ef4:	9b01      	ldr	r3, [sp, #4]
 8005ef6:	18f4      	adds	r4, r6, r3
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4616      	mov	r6, r2
 8005efc:	7830      	ldrb	r0, [r6, #0]
 8005efe:	3201      	adds	r2, #1
 8005f00:	f7ff ff93 	bl	8005e2a <__hexdig_fun>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d1f8      	bne.n	8005efa <__gethex+0xa6>
 8005f08:	b10c      	cbz	r4, 8005f0e <__gethex+0xba>
 8005f0a:	1ba4      	subs	r4, r4, r6
 8005f0c:	00a4      	lsls	r4, r4, #2
 8005f0e:	7833      	ldrb	r3, [r6, #0]
 8005f10:	2b50      	cmp	r3, #80	; 0x50
 8005f12:	d001      	beq.n	8005f18 <__gethex+0xc4>
 8005f14:	2b70      	cmp	r3, #112	; 0x70
 8005f16:	d140      	bne.n	8005f9a <__gethex+0x146>
 8005f18:	7873      	ldrb	r3, [r6, #1]
 8005f1a:	2b2b      	cmp	r3, #43	; 0x2b
 8005f1c:	d031      	beq.n	8005f82 <__gethex+0x12e>
 8005f1e:	2b2d      	cmp	r3, #45	; 0x2d
 8005f20:	d033      	beq.n	8005f8a <__gethex+0x136>
 8005f22:	f04f 0900 	mov.w	r9, #0
 8005f26:	1c71      	adds	r1, r6, #1
 8005f28:	7808      	ldrb	r0, [r1, #0]
 8005f2a:	f7ff ff7e 	bl	8005e2a <__hexdig_fun>
 8005f2e:	1e43      	subs	r3, r0, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b18      	cmp	r3, #24
 8005f34:	d831      	bhi.n	8005f9a <__gethex+0x146>
 8005f36:	f1a0 0210 	sub.w	r2, r0, #16
 8005f3a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005f3e:	f7ff ff74 	bl	8005e2a <__hexdig_fun>
 8005f42:	1e43      	subs	r3, r0, #1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b18      	cmp	r3, #24
 8005f48:	d922      	bls.n	8005f90 <__gethex+0x13c>
 8005f4a:	f1b9 0f00 	cmp.w	r9, #0
 8005f4e:	d000      	beq.n	8005f52 <__gethex+0xfe>
 8005f50:	4252      	negs	r2, r2
 8005f52:	4414      	add	r4, r2
 8005f54:	f8ca 1000 	str.w	r1, [sl]
 8005f58:	b30d      	cbz	r5, 8005f9e <__gethex+0x14a>
 8005f5a:	f1bb 0f00 	cmp.w	fp, #0
 8005f5e:	bf0c      	ite	eq
 8005f60:	2706      	moveq	r7, #6
 8005f62:	2700      	movne	r7, #0
 8005f64:	4638      	mov	r0, r7
 8005f66:	b00b      	add	sp, #44	; 0x2c
 8005f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6c:	f10b 0b01 	add.w	fp, fp, #1
 8005f70:	e78a      	b.n	8005e88 <__gethex+0x34>
 8005f72:	2500      	movs	r5, #0
 8005f74:	462c      	mov	r4, r5
 8005f76:	e7ae      	b.n	8005ed6 <__gethex+0x82>
 8005f78:	463e      	mov	r6, r7
 8005f7a:	2501      	movs	r5, #1
 8005f7c:	e7c7      	b.n	8005f0e <__gethex+0xba>
 8005f7e:	4604      	mov	r4, r0
 8005f80:	e7fb      	b.n	8005f7a <__gethex+0x126>
 8005f82:	f04f 0900 	mov.w	r9, #0
 8005f86:	1cb1      	adds	r1, r6, #2
 8005f88:	e7ce      	b.n	8005f28 <__gethex+0xd4>
 8005f8a:	f04f 0901 	mov.w	r9, #1
 8005f8e:	e7fa      	b.n	8005f86 <__gethex+0x132>
 8005f90:	230a      	movs	r3, #10
 8005f92:	fb03 0202 	mla	r2, r3, r2, r0
 8005f96:	3a10      	subs	r2, #16
 8005f98:	e7cf      	b.n	8005f3a <__gethex+0xe6>
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	e7da      	b.n	8005f54 <__gethex+0x100>
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	1bf3      	subs	r3, r6, r7
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	2b07      	cmp	r3, #7
 8005fa6:	dc49      	bgt.n	800603c <__gethex+0x1e8>
 8005fa8:	9802      	ldr	r0, [sp, #8]
 8005faa:	f000 fad6 	bl	800655a <_Balloc>
 8005fae:	f04f 0b00 	mov.w	fp, #0
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	46da      	mov	sl, fp
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	f100 0914 	add.w	r9, r0, #20
 8005fbc:	f1c3 0301 	rsb	r3, r3, #1
 8005fc0:	f8cd 9010 	str.w	r9, [sp, #16]
 8005fc4:	9308      	str	r3, [sp, #32]
 8005fc6:	42b7      	cmp	r7, r6
 8005fc8:	d33b      	bcc.n	8006042 <__gethex+0x1ee>
 8005fca:	9804      	ldr	r0, [sp, #16]
 8005fcc:	f840 ab04 	str.w	sl, [r0], #4
 8005fd0:	eba0 0009 	sub.w	r0, r0, r9
 8005fd4:	1080      	asrs	r0, r0, #2
 8005fd6:	6128      	str	r0, [r5, #16]
 8005fd8:	0147      	lsls	r7, r0, #5
 8005fda:	4650      	mov	r0, sl
 8005fdc:	f000 fb81 	bl	80066e2 <__hi0bits>
 8005fe0:	f8d8 6000 	ldr.w	r6, [r8]
 8005fe4:	1a3f      	subs	r7, r7, r0
 8005fe6:	42b7      	cmp	r7, r6
 8005fe8:	dd64      	ble.n	80060b4 <__gethex+0x260>
 8005fea:	1bbf      	subs	r7, r7, r6
 8005fec:	4639      	mov	r1, r7
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 fe8b 	bl	8006d0a <__any_on>
 8005ff4:	4682      	mov	sl, r0
 8005ff6:	b178      	cbz	r0, 8006018 <__gethex+0x1c4>
 8005ff8:	f04f 0a01 	mov.w	sl, #1
 8005ffc:	1e7b      	subs	r3, r7, #1
 8005ffe:	1159      	asrs	r1, r3, #5
 8006000:	f003 021f 	and.w	r2, r3, #31
 8006004:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006008:	fa0a f202 	lsl.w	r2, sl, r2
 800600c:	420a      	tst	r2, r1
 800600e:	d003      	beq.n	8006018 <__gethex+0x1c4>
 8006010:	4553      	cmp	r3, sl
 8006012:	dc46      	bgt.n	80060a2 <__gethex+0x24e>
 8006014:	f04f 0a02 	mov.w	sl, #2
 8006018:	4639      	mov	r1, r7
 800601a:	4628      	mov	r0, r5
 800601c:	f7ff feca 	bl	8005db4 <rshift>
 8006020:	443c      	add	r4, r7
 8006022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006026:	42a3      	cmp	r3, r4
 8006028:	da52      	bge.n	80060d0 <__gethex+0x27c>
 800602a:	4629      	mov	r1, r5
 800602c:	9802      	ldr	r0, [sp, #8]
 800602e:	f000 fac8 	bl	80065c2 <_Bfree>
 8006032:	2300      	movs	r3, #0
 8006034:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006036:	27a3      	movs	r7, #163	; 0xa3
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	e793      	b.n	8005f64 <__gethex+0x110>
 800603c:	3101      	adds	r1, #1
 800603e:	105b      	asrs	r3, r3, #1
 8006040:	e7b0      	b.n	8005fa4 <__gethex+0x150>
 8006042:	1e73      	subs	r3, r6, #1
 8006044:	9305      	str	r3, [sp, #20]
 8006046:	9a07      	ldr	r2, [sp, #28]
 8006048:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800604c:	4293      	cmp	r3, r2
 800604e:	d018      	beq.n	8006082 <__gethex+0x22e>
 8006050:	f1bb 0f20 	cmp.w	fp, #32
 8006054:	d107      	bne.n	8006066 <__gethex+0x212>
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	f8c3 a000 	str.w	sl, [r3]
 800605c:	f04f 0a00 	mov.w	sl, #0
 8006060:	46d3      	mov	fp, sl
 8006062:	3304      	adds	r3, #4
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800606a:	f7ff fede 	bl	8005e2a <__hexdig_fun>
 800606e:	f000 000f 	and.w	r0, r0, #15
 8006072:	fa00 f00b 	lsl.w	r0, r0, fp
 8006076:	ea4a 0a00 	orr.w	sl, sl, r0
 800607a:	f10b 0b04 	add.w	fp, fp, #4
 800607e:	9b05      	ldr	r3, [sp, #20]
 8006080:	e00d      	b.n	800609e <__gethex+0x24a>
 8006082:	9b05      	ldr	r3, [sp, #20]
 8006084:	9a08      	ldr	r2, [sp, #32]
 8006086:	4413      	add	r3, r2
 8006088:	42bb      	cmp	r3, r7
 800608a:	d3e1      	bcc.n	8006050 <__gethex+0x1fc>
 800608c:	4618      	mov	r0, r3
 800608e:	9a01      	ldr	r2, [sp, #4]
 8006090:	9903      	ldr	r1, [sp, #12]
 8006092:	9309      	str	r3, [sp, #36]	; 0x24
 8006094:	f001 f9f1 	bl	800747a <strncmp>
 8006098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609a:	2800      	cmp	r0, #0
 800609c:	d1d8      	bne.n	8006050 <__gethex+0x1fc>
 800609e:	461e      	mov	r6, r3
 80060a0:	e791      	b.n	8005fc6 <__gethex+0x172>
 80060a2:	1eb9      	subs	r1, r7, #2
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 fe30 	bl	8006d0a <__any_on>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0b2      	beq.n	8006014 <__gethex+0x1c0>
 80060ae:	f04f 0a03 	mov.w	sl, #3
 80060b2:	e7b1      	b.n	8006018 <__gethex+0x1c4>
 80060b4:	da09      	bge.n	80060ca <__gethex+0x276>
 80060b6:	1bf7      	subs	r7, r6, r7
 80060b8:	4629      	mov	r1, r5
 80060ba:	463a      	mov	r2, r7
 80060bc:	9802      	ldr	r0, [sp, #8]
 80060be:	f000 fc4b 	bl	8006958 <__lshift>
 80060c2:	4605      	mov	r5, r0
 80060c4:	1be4      	subs	r4, r4, r7
 80060c6:	f100 0914 	add.w	r9, r0, #20
 80060ca:	f04f 0a00 	mov.w	sl, #0
 80060ce:	e7a8      	b.n	8006022 <__gethex+0x1ce>
 80060d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80060d4:	42a0      	cmp	r0, r4
 80060d6:	dd6b      	ble.n	80061b0 <__gethex+0x35c>
 80060d8:	1b04      	subs	r4, r0, r4
 80060da:	42a6      	cmp	r6, r4
 80060dc:	dc2e      	bgt.n	800613c <__gethex+0x2e8>
 80060de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d022      	beq.n	800612c <__gethex+0x2d8>
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d024      	beq.n	8006134 <__gethex+0x2e0>
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d115      	bne.n	800611a <__gethex+0x2c6>
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	d113      	bne.n	800611a <__gethex+0x2c6>
 80060f2:	2e01      	cmp	r6, #1
 80060f4:	dc0b      	bgt.n	800610e <__gethex+0x2ba>
 80060f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80060fa:	9a06      	ldr	r2, [sp, #24]
 80060fc:	2762      	movs	r7, #98	; 0x62
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	2301      	movs	r3, #1
 8006102:	612b      	str	r3, [r5, #16]
 8006104:	f8c9 3000 	str.w	r3, [r9]
 8006108:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800610a:	601d      	str	r5, [r3, #0]
 800610c:	e72a      	b.n	8005f64 <__gethex+0x110>
 800610e:	1e71      	subs	r1, r6, #1
 8006110:	4628      	mov	r0, r5
 8006112:	f000 fdfa 	bl	8006d0a <__any_on>
 8006116:	2800      	cmp	r0, #0
 8006118:	d1ed      	bne.n	80060f6 <__gethex+0x2a2>
 800611a:	4629      	mov	r1, r5
 800611c:	9802      	ldr	r0, [sp, #8]
 800611e:	f000 fa50 	bl	80065c2 <_Bfree>
 8006122:	2300      	movs	r3, #0
 8006124:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006126:	2750      	movs	r7, #80	; 0x50
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e71b      	b.n	8005f64 <__gethex+0x110>
 800612c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0e1      	beq.n	80060f6 <__gethex+0x2a2>
 8006132:	e7f2      	b.n	800611a <__gethex+0x2c6>
 8006134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1dd      	bne.n	80060f6 <__gethex+0x2a2>
 800613a:	e7ee      	b.n	800611a <__gethex+0x2c6>
 800613c:	1e67      	subs	r7, r4, #1
 800613e:	f1ba 0f00 	cmp.w	sl, #0
 8006142:	d132      	bne.n	80061aa <__gethex+0x356>
 8006144:	b127      	cbz	r7, 8006150 <__gethex+0x2fc>
 8006146:	4639      	mov	r1, r7
 8006148:	4628      	mov	r0, r5
 800614a:	f000 fdde 	bl	8006d0a <__any_on>
 800614e:	4682      	mov	sl, r0
 8006150:	2301      	movs	r3, #1
 8006152:	117a      	asrs	r2, r7, #5
 8006154:	f007 071f 	and.w	r7, r7, #31
 8006158:	fa03 f707 	lsl.w	r7, r3, r7
 800615c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006160:	4621      	mov	r1, r4
 8006162:	421f      	tst	r7, r3
 8006164:	f04f 0702 	mov.w	r7, #2
 8006168:	4628      	mov	r0, r5
 800616a:	bf18      	it	ne
 800616c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006170:	1b36      	subs	r6, r6, r4
 8006172:	f7ff fe1f 	bl	8005db4 <rshift>
 8006176:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800617a:	f1ba 0f00 	cmp.w	sl, #0
 800617e:	d048      	beq.n	8006212 <__gethex+0x3be>
 8006180:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d015      	beq.n	80061b4 <__gethex+0x360>
 8006188:	2b03      	cmp	r3, #3
 800618a:	d017      	beq.n	80061bc <__gethex+0x368>
 800618c:	2b01      	cmp	r3, #1
 800618e:	d109      	bne.n	80061a4 <__gethex+0x350>
 8006190:	f01a 0f02 	tst.w	sl, #2
 8006194:	d006      	beq.n	80061a4 <__gethex+0x350>
 8006196:	f8d9 3000 	ldr.w	r3, [r9]
 800619a:	ea4a 0a03 	orr.w	sl, sl, r3
 800619e:	f01a 0f01 	tst.w	sl, #1
 80061a2:	d10e      	bne.n	80061c2 <__gethex+0x36e>
 80061a4:	f047 0710 	orr.w	r7, r7, #16
 80061a8:	e033      	b.n	8006212 <__gethex+0x3be>
 80061aa:	f04f 0a01 	mov.w	sl, #1
 80061ae:	e7cf      	b.n	8006150 <__gethex+0x2fc>
 80061b0:	2701      	movs	r7, #1
 80061b2:	e7e2      	b.n	800617a <__gethex+0x326>
 80061b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061b6:	f1c3 0301 	rsb	r3, r3, #1
 80061ba:	9315      	str	r3, [sp, #84]	; 0x54
 80061bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <__gethex+0x350>
 80061c2:	f04f 0c00 	mov.w	ip, #0
 80061c6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80061ca:	f105 0314 	add.w	r3, r5, #20
 80061ce:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80061d2:	eb03 010a 	add.w	r1, r3, sl
 80061d6:	4618      	mov	r0, r3
 80061d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80061e0:	d01c      	beq.n	800621c <__gethex+0x3c8>
 80061e2:	3201      	adds	r2, #1
 80061e4:	6002      	str	r2, [r0, #0]
 80061e6:	2f02      	cmp	r7, #2
 80061e8:	f105 0314 	add.w	r3, r5, #20
 80061ec:	d138      	bne.n	8006260 <__gethex+0x40c>
 80061ee:	f8d8 2000 	ldr.w	r2, [r8]
 80061f2:	3a01      	subs	r2, #1
 80061f4:	42b2      	cmp	r2, r6
 80061f6:	d10a      	bne.n	800620e <__gethex+0x3ba>
 80061f8:	2201      	movs	r2, #1
 80061fa:	1171      	asrs	r1, r6, #5
 80061fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006200:	f006 061f 	and.w	r6, r6, #31
 8006204:	fa02 f606 	lsl.w	r6, r2, r6
 8006208:	421e      	tst	r6, r3
 800620a:	bf18      	it	ne
 800620c:	4617      	movne	r7, r2
 800620e:	f047 0720 	orr.w	r7, r7, #32
 8006212:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006214:	601d      	str	r5, [r3, #0]
 8006216:	9b06      	ldr	r3, [sp, #24]
 8006218:	601c      	str	r4, [r3, #0]
 800621a:	e6a3      	b.n	8005f64 <__gethex+0x110>
 800621c:	4299      	cmp	r1, r3
 800621e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006222:	d8d8      	bhi.n	80061d6 <__gethex+0x382>
 8006224:	68ab      	ldr	r3, [r5, #8]
 8006226:	4599      	cmp	r9, r3
 8006228:	db12      	blt.n	8006250 <__gethex+0x3fc>
 800622a:	6869      	ldr	r1, [r5, #4]
 800622c:	9802      	ldr	r0, [sp, #8]
 800622e:	3101      	adds	r1, #1
 8006230:	f000 f993 	bl	800655a <_Balloc>
 8006234:	4683      	mov	fp, r0
 8006236:	692a      	ldr	r2, [r5, #16]
 8006238:	f105 010c 	add.w	r1, r5, #12
 800623c:	3202      	adds	r2, #2
 800623e:	0092      	lsls	r2, r2, #2
 8006240:	300c      	adds	r0, #12
 8006242:	f000 f97f 	bl	8006544 <memcpy>
 8006246:	4629      	mov	r1, r5
 8006248:	9802      	ldr	r0, [sp, #8]
 800624a:	f000 f9ba 	bl	80065c2 <_Bfree>
 800624e:	465d      	mov	r5, fp
 8006250:	692b      	ldr	r3, [r5, #16]
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	612a      	str	r2, [r5, #16]
 8006256:	2201      	movs	r2, #1
 8006258:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800625c:	615a      	str	r2, [r3, #20]
 800625e:	e7c2      	b.n	80061e6 <__gethex+0x392>
 8006260:	692a      	ldr	r2, [r5, #16]
 8006262:	454a      	cmp	r2, r9
 8006264:	dd0b      	ble.n	800627e <__gethex+0x42a>
 8006266:	2101      	movs	r1, #1
 8006268:	4628      	mov	r0, r5
 800626a:	f7ff fda3 	bl	8005db4 <rshift>
 800626e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006272:	3401      	adds	r4, #1
 8006274:	42a3      	cmp	r3, r4
 8006276:	f6ff aed8 	blt.w	800602a <__gethex+0x1d6>
 800627a:	2701      	movs	r7, #1
 800627c:	e7c7      	b.n	800620e <__gethex+0x3ba>
 800627e:	f016 061f 	ands.w	r6, r6, #31
 8006282:	d0fa      	beq.n	800627a <__gethex+0x426>
 8006284:	449a      	add	sl, r3
 8006286:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800628a:	f000 fa2a 	bl	80066e2 <__hi0bits>
 800628e:	f1c6 0620 	rsb	r6, r6, #32
 8006292:	42b0      	cmp	r0, r6
 8006294:	dbe7      	blt.n	8006266 <__gethex+0x412>
 8006296:	e7f0      	b.n	800627a <__gethex+0x426>

08006298 <L_shift>:
 8006298:	f1c2 0208 	rsb	r2, r2, #8
 800629c:	0092      	lsls	r2, r2, #2
 800629e:	b570      	push	{r4, r5, r6, lr}
 80062a0:	f1c2 0620 	rsb	r6, r2, #32
 80062a4:	6843      	ldr	r3, [r0, #4]
 80062a6:	6804      	ldr	r4, [r0, #0]
 80062a8:	fa03 f506 	lsl.w	r5, r3, r6
 80062ac:	432c      	orrs	r4, r5
 80062ae:	40d3      	lsrs	r3, r2
 80062b0:	6004      	str	r4, [r0, #0]
 80062b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80062b6:	4288      	cmp	r0, r1
 80062b8:	d3f4      	bcc.n	80062a4 <L_shift+0xc>
 80062ba:	bd70      	pop	{r4, r5, r6, pc}

080062bc <__match>:
 80062bc:	b530      	push	{r4, r5, lr}
 80062be:	6803      	ldr	r3, [r0, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c6:	b914      	cbnz	r4, 80062ce <__match+0x12>
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	2001      	movs	r0, #1
 80062cc:	bd30      	pop	{r4, r5, pc}
 80062ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80062d6:	2d19      	cmp	r5, #25
 80062d8:	bf98      	it	ls
 80062da:	3220      	addls	r2, #32
 80062dc:	42a2      	cmp	r2, r4
 80062de:	d0f0      	beq.n	80062c2 <__match+0x6>
 80062e0:	2000      	movs	r0, #0
 80062e2:	e7f3      	b.n	80062cc <__match+0x10>

080062e4 <__hexnan>:
 80062e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e8:	2500      	movs	r5, #0
 80062ea:	680b      	ldr	r3, [r1, #0]
 80062ec:	4682      	mov	sl, r0
 80062ee:	115f      	asrs	r7, r3, #5
 80062f0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80062f4:	f013 031f 	ands.w	r3, r3, #31
 80062f8:	bf18      	it	ne
 80062fa:	3704      	addne	r7, #4
 80062fc:	1f3e      	subs	r6, r7, #4
 80062fe:	4690      	mov	r8, r2
 8006300:	46b1      	mov	r9, r6
 8006302:	4634      	mov	r4, r6
 8006304:	46ab      	mov	fp, r5
 8006306:	b087      	sub	sp, #28
 8006308:	6801      	ldr	r1, [r0, #0]
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	f847 5c04 	str.w	r5, [r7, #-4]
 8006310:	9502      	str	r5, [sp, #8]
 8006312:	784a      	ldrb	r2, [r1, #1]
 8006314:	1c4b      	adds	r3, r1, #1
 8006316:	9303      	str	r3, [sp, #12]
 8006318:	b342      	cbz	r2, 800636c <__hexnan+0x88>
 800631a:	4610      	mov	r0, r2
 800631c:	9105      	str	r1, [sp, #20]
 800631e:	9204      	str	r2, [sp, #16]
 8006320:	f7ff fd83 	bl	8005e2a <__hexdig_fun>
 8006324:	2800      	cmp	r0, #0
 8006326:	d143      	bne.n	80063b0 <__hexnan+0xcc>
 8006328:	9a04      	ldr	r2, [sp, #16]
 800632a:	9905      	ldr	r1, [sp, #20]
 800632c:	2a20      	cmp	r2, #32
 800632e:	d818      	bhi.n	8006362 <__hexnan+0x7e>
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	459b      	cmp	fp, r3
 8006334:	dd13      	ble.n	800635e <__hexnan+0x7a>
 8006336:	454c      	cmp	r4, r9
 8006338:	d206      	bcs.n	8006348 <__hexnan+0x64>
 800633a:	2d07      	cmp	r5, #7
 800633c:	dc04      	bgt.n	8006348 <__hexnan+0x64>
 800633e:	462a      	mov	r2, r5
 8006340:	4649      	mov	r1, r9
 8006342:	4620      	mov	r0, r4
 8006344:	f7ff ffa8 	bl	8006298 <L_shift>
 8006348:	4544      	cmp	r4, r8
 800634a:	d944      	bls.n	80063d6 <__hexnan+0xf2>
 800634c:	2300      	movs	r3, #0
 800634e:	f1a4 0904 	sub.w	r9, r4, #4
 8006352:	f844 3c04 	str.w	r3, [r4, #-4]
 8006356:	461d      	mov	r5, r3
 8006358:	464c      	mov	r4, r9
 800635a:	f8cd b008 	str.w	fp, [sp, #8]
 800635e:	9903      	ldr	r1, [sp, #12]
 8006360:	e7d7      	b.n	8006312 <__hexnan+0x2e>
 8006362:	2a29      	cmp	r2, #41	; 0x29
 8006364:	d14a      	bne.n	80063fc <__hexnan+0x118>
 8006366:	3102      	adds	r1, #2
 8006368:	f8ca 1000 	str.w	r1, [sl]
 800636c:	f1bb 0f00 	cmp.w	fp, #0
 8006370:	d044      	beq.n	80063fc <__hexnan+0x118>
 8006372:	454c      	cmp	r4, r9
 8006374:	d206      	bcs.n	8006384 <__hexnan+0xa0>
 8006376:	2d07      	cmp	r5, #7
 8006378:	dc04      	bgt.n	8006384 <__hexnan+0xa0>
 800637a:	462a      	mov	r2, r5
 800637c:	4649      	mov	r1, r9
 800637e:	4620      	mov	r0, r4
 8006380:	f7ff ff8a 	bl	8006298 <L_shift>
 8006384:	4544      	cmp	r4, r8
 8006386:	d928      	bls.n	80063da <__hexnan+0xf6>
 8006388:	4643      	mov	r3, r8
 800638a:	f854 2b04 	ldr.w	r2, [r4], #4
 800638e:	42a6      	cmp	r6, r4
 8006390:	f843 2b04 	str.w	r2, [r3], #4
 8006394:	d2f9      	bcs.n	800638a <__hexnan+0xa6>
 8006396:	2200      	movs	r2, #0
 8006398:	f843 2b04 	str.w	r2, [r3], #4
 800639c:	429e      	cmp	r6, r3
 800639e:	d2fb      	bcs.n	8006398 <__hexnan+0xb4>
 80063a0:	6833      	ldr	r3, [r6, #0]
 80063a2:	b91b      	cbnz	r3, 80063ac <__hexnan+0xc8>
 80063a4:	4546      	cmp	r6, r8
 80063a6:	d127      	bne.n	80063f8 <__hexnan+0x114>
 80063a8:	2301      	movs	r3, #1
 80063aa:	6033      	str	r3, [r6, #0]
 80063ac:	2005      	movs	r0, #5
 80063ae:	e026      	b.n	80063fe <__hexnan+0x11a>
 80063b0:	3501      	adds	r5, #1
 80063b2:	2d08      	cmp	r5, #8
 80063b4:	f10b 0b01 	add.w	fp, fp, #1
 80063b8:	dd06      	ble.n	80063c8 <__hexnan+0xe4>
 80063ba:	4544      	cmp	r4, r8
 80063bc:	d9cf      	bls.n	800635e <__hexnan+0x7a>
 80063be:	2300      	movs	r3, #0
 80063c0:	2501      	movs	r5, #1
 80063c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80063c6:	3c04      	subs	r4, #4
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	f000 000f 	and.w	r0, r0, #15
 80063ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80063d2:	6020      	str	r0, [r4, #0]
 80063d4:	e7c3      	b.n	800635e <__hexnan+0x7a>
 80063d6:	2508      	movs	r5, #8
 80063d8:	e7c1      	b.n	800635e <__hexnan+0x7a>
 80063da:	9b01      	ldr	r3, [sp, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0df      	beq.n	80063a0 <__hexnan+0xbc>
 80063e0:	f04f 32ff 	mov.w	r2, #4294967295
 80063e4:	f1c3 0320 	rsb	r3, r3, #32
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80063f0:	401a      	ands	r2, r3
 80063f2:	f847 2c04 	str.w	r2, [r7, #-4]
 80063f6:	e7d3      	b.n	80063a0 <__hexnan+0xbc>
 80063f8:	3e04      	subs	r6, #4
 80063fa:	e7d1      	b.n	80063a0 <__hexnan+0xbc>
 80063fc:	2004      	movs	r0, #4
 80063fe:	b007      	add	sp, #28
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006404 <__locale_ctype_ptr_l>:
 8006404:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006408:	4770      	bx	lr

0800640a <__localeconv_l>:
 800640a:	30f0      	adds	r0, #240	; 0xf0
 800640c:	4770      	bx	lr
	...

08006410 <_localeconv_r>:
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <_localeconv_r+0x14>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6a18      	ldr	r0, [r3, #32]
 8006416:	4b04      	ldr	r3, [pc, #16]	; (8006428 <_localeconv_r+0x18>)
 8006418:	2800      	cmp	r0, #0
 800641a:	bf08      	it	eq
 800641c:	4618      	moveq	r0, r3
 800641e:	30f0      	adds	r0, #240	; 0xf0
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000010 	.word	0x20000010
 8006428:	20000074 	.word	0x20000074

0800642c <__swhatbuf_r>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	460e      	mov	r6, r1
 8006430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006434:	b096      	sub	sp, #88	; 0x58
 8006436:	2900      	cmp	r1, #0
 8006438:	4614      	mov	r4, r2
 800643a:	461d      	mov	r5, r3
 800643c:	da07      	bge.n	800644e <__swhatbuf_r+0x22>
 800643e:	2300      	movs	r3, #0
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	89b3      	ldrh	r3, [r6, #12]
 8006444:	061a      	lsls	r2, r3, #24
 8006446:	d410      	bmi.n	800646a <__swhatbuf_r+0x3e>
 8006448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800644c:	e00e      	b.n	800646c <__swhatbuf_r+0x40>
 800644e:	466a      	mov	r2, sp
 8006450:	f001 f854 	bl	80074fc <_fstat_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	dbf2      	blt.n	800643e <__swhatbuf_r+0x12>
 8006458:	9a01      	ldr	r2, [sp, #4]
 800645a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800645e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006462:	425a      	negs	r2, r3
 8006464:	415a      	adcs	r2, r3
 8006466:	602a      	str	r2, [r5, #0]
 8006468:	e7ee      	b.n	8006448 <__swhatbuf_r+0x1c>
 800646a:	2340      	movs	r3, #64	; 0x40
 800646c:	2000      	movs	r0, #0
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	b016      	add	sp, #88	; 0x58
 8006472:	bd70      	pop	{r4, r5, r6, pc}

08006474 <__smakebuf_r>:
 8006474:	898b      	ldrh	r3, [r1, #12]
 8006476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006478:	079d      	lsls	r5, r3, #30
 800647a:	4606      	mov	r6, r0
 800647c:	460c      	mov	r4, r1
 800647e:	d507      	bpl.n	8006490 <__smakebuf_r+0x1c>
 8006480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	2301      	movs	r3, #1
 800648a:	6163      	str	r3, [r4, #20]
 800648c:	b002      	add	sp, #8
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	ab01      	add	r3, sp, #4
 8006492:	466a      	mov	r2, sp
 8006494:	f7ff ffca 	bl	800642c <__swhatbuf_r>
 8006498:	9900      	ldr	r1, [sp, #0]
 800649a:	4605      	mov	r5, r0
 800649c:	4630      	mov	r0, r6
 800649e:	f000 fcaf 	bl	8006e00 <_malloc_r>
 80064a2:	b948      	cbnz	r0, 80064b8 <__smakebuf_r+0x44>
 80064a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a8:	059a      	lsls	r2, r3, #22
 80064aa:	d4ef      	bmi.n	800648c <__smakebuf_r+0x18>
 80064ac:	f023 0303 	bic.w	r3, r3, #3
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	e7e3      	b.n	8006480 <__smakebuf_r+0xc>
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <__smakebuf_r+0x7c>)
 80064ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	6020      	str	r0, [r4, #0]
 80064c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	9b00      	ldr	r3, [sp, #0]
 80064c8:	6120      	str	r0, [r4, #16]
 80064ca:	6163      	str	r3, [r4, #20]
 80064cc:	9b01      	ldr	r3, [sp, #4]
 80064ce:	b15b      	cbz	r3, 80064e8 <__smakebuf_r+0x74>
 80064d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064d4:	4630      	mov	r0, r6
 80064d6:	f001 f823 	bl	8007520 <_isatty_r>
 80064da:	b128      	cbz	r0, 80064e8 <__smakebuf_r+0x74>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	f023 0303 	bic.w	r3, r3, #3
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	431d      	orrs	r5, r3
 80064ec:	81a5      	strh	r5, [r4, #12]
 80064ee:	e7cd      	b.n	800648c <__smakebuf_r+0x18>
 80064f0:	08005c69 	.word	0x08005c69

080064f4 <malloc>:
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <malloc+0xc>)
 80064f6:	4601      	mov	r1, r0
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	f000 bc81 	b.w	8006e00 <_malloc_r>
 80064fe:	bf00      	nop
 8006500:	20000010 	.word	0x20000010

08006504 <__ascii_mbtowc>:
 8006504:	b082      	sub	sp, #8
 8006506:	b901      	cbnz	r1, 800650a <__ascii_mbtowc+0x6>
 8006508:	a901      	add	r1, sp, #4
 800650a:	b142      	cbz	r2, 800651e <__ascii_mbtowc+0x1a>
 800650c:	b14b      	cbz	r3, 8006522 <__ascii_mbtowc+0x1e>
 800650e:	7813      	ldrb	r3, [r2, #0]
 8006510:	600b      	str	r3, [r1, #0]
 8006512:	7812      	ldrb	r2, [r2, #0]
 8006514:	1c10      	adds	r0, r2, #0
 8006516:	bf18      	it	ne
 8006518:	2001      	movne	r0, #1
 800651a:	b002      	add	sp, #8
 800651c:	4770      	bx	lr
 800651e:	4610      	mov	r0, r2
 8006520:	e7fb      	b.n	800651a <__ascii_mbtowc+0x16>
 8006522:	f06f 0001 	mvn.w	r0, #1
 8006526:	e7f8      	b.n	800651a <__ascii_mbtowc+0x16>

08006528 <memchr>:
 8006528:	b510      	push	{r4, lr}
 800652a:	b2c9      	uxtb	r1, r1
 800652c:	4402      	add	r2, r0
 800652e:	4290      	cmp	r0, r2
 8006530:	4603      	mov	r3, r0
 8006532:	d101      	bne.n	8006538 <memchr+0x10>
 8006534:	2300      	movs	r3, #0
 8006536:	e003      	b.n	8006540 <memchr+0x18>
 8006538:	781c      	ldrb	r4, [r3, #0]
 800653a:	3001      	adds	r0, #1
 800653c:	428c      	cmp	r4, r1
 800653e:	d1f6      	bne.n	800652e <memchr+0x6>
 8006540:	4618      	mov	r0, r3
 8006542:	bd10      	pop	{r4, pc}

08006544 <memcpy>:
 8006544:	b510      	push	{r4, lr}
 8006546:	1e43      	subs	r3, r0, #1
 8006548:	440a      	add	r2, r1
 800654a:	4291      	cmp	r1, r2
 800654c:	d100      	bne.n	8006550 <memcpy+0xc>
 800654e:	bd10      	pop	{r4, pc}
 8006550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006558:	e7f7      	b.n	800654a <memcpy+0x6>

0800655a <_Balloc>:
 800655a:	b570      	push	{r4, r5, r6, lr}
 800655c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800655e:	4604      	mov	r4, r0
 8006560:	460e      	mov	r6, r1
 8006562:	b93d      	cbnz	r5, 8006574 <_Balloc+0x1a>
 8006564:	2010      	movs	r0, #16
 8006566:	f7ff ffc5 	bl	80064f4 <malloc>
 800656a:	6260      	str	r0, [r4, #36]	; 0x24
 800656c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006570:	6005      	str	r5, [r0, #0]
 8006572:	60c5      	str	r5, [r0, #12]
 8006574:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006576:	68eb      	ldr	r3, [r5, #12]
 8006578:	b183      	cbz	r3, 800659c <_Balloc+0x42>
 800657a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006582:	b9b8      	cbnz	r0, 80065b4 <_Balloc+0x5a>
 8006584:	2101      	movs	r1, #1
 8006586:	fa01 f506 	lsl.w	r5, r1, r6
 800658a:	1d6a      	adds	r2, r5, #5
 800658c:	0092      	lsls	r2, r2, #2
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fbdc 	bl	8006d4c <_calloc_r>
 8006594:	b160      	cbz	r0, 80065b0 <_Balloc+0x56>
 8006596:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800659a:	e00e      	b.n	80065ba <_Balloc+0x60>
 800659c:	2221      	movs	r2, #33	; 0x21
 800659e:	2104      	movs	r1, #4
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fbd3 	bl	8006d4c <_calloc_r>
 80065a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a8:	60e8      	str	r0, [r5, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e4      	bne.n	800657a <_Balloc+0x20>
 80065b0:	2000      	movs	r0, #0
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	6802      	ldr	r2, [r0, #0]
 80065b6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065ba:	2300      	movs	r3, #0
 80065bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065c0:	e7f7      	b.n	80065b2 <_Balloc+0x58>

080065c2 <_Bfree>:
 80065c2:	b570      	push	{r4, r5, r6, lr}
 80065c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065c6:	4606      	mov	r6, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	b93c      	cbnz	r4, 80065dc <_Bfree+0x1a>
 80065cc:	2010      	movs	r0, #16
 80065ce:	f7ff ff91 	bl	80064f4 <malloc>
 80065d2:	6270      	str	r0, [r6, #36]	; 0x24
 80065d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065d8:	6004      	str	r4, [r0, #0]
 80065da:	60c4      	str	r4, [r0, #12]
 80065dc:	b13d      	cbz	r5, 80065ee <_Bfree+0x2c>
 80065de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065e0:	686a      	ldr	r2, [r5, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e8:	6029      	str	r1, [r5, #0]
 80065ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80065ee:	bd70      	pop	{r4, r5, r6, pc}

080065f0 <__multadd>:
 80065f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f4:	461f      	mov	r7, r3
 80065f6:	4606      	mov	r6, r0
 80065f8:	460c      	mov	r4, r1
 80065fa:	2300      	movs	r3, #0
 80065fc:	690d      	ldr	r5, [r1, #16]
 80065fe:	f101 0c14 	add.w	ip, r1, #20
 8006602:	f8dc 0000 	ldr.w	r0, [ip]
 8006606:	3301      	adds	r3, #1
 8006608:	b281      	uxth	r1, r0
 800660a:	fb02 7101 	mla	r1, r2, r1, r7
 800660e:	0c00      	lsrs	r0, r0, #16
 8006610:	0c0f      	lsrs	r7, r1, #16
 8006612:	fb02 7000 	mla	r0, r2, r0, r7
 8006616:	b289      	uxth	r1, r1
 8006618:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800661c:	429d      	cmp	r5, r3
 800661e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006622:	f84c 1b04 	str.w	r1, [ip], #4
 8006626:	dcec      	bgt.n	8006602 <__multadd+0x12>
 8006628:	b1d7      	cbz	r7, 8006660 <__multadd+0x70>
 800662a:	68a3      	ldr	r3, [r4, #8]
 800662c:	42ab      	cmp	r3, r5
 800662e:	dc12      	bgt.n	8006656 <__multadd+0x66>
 8006630:	6861      	ldr	r1, [r4, #4]
 8006632:	4630      	mov	r0, r6
 8006634:	3101      	adds	r1, #1
 8006636:	f7ff ff90 	bl	800655a <_Balloc>
 800663a:	4680      	mov	r8, r0
 800663c:	6922      	ldr	r2, [r4, #16]
 800663e:	f104 010c 	add.w	r1, r4, #12
 8006642:	3202      	adds	r2, #2
 8006644:	0092      	lsls	r2, r2, #2
 8006646:	300c      	adds	r0, #12
 8006648:	f7ff ff7c 	bl	8006544 <memcpy>
 800664c:	4621      	mov	r1, r4
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ffb7 	bl	80065c2 <_Bfree>
 8006654:	4644      	mov	r4, r8
 8006656:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800665a:	3501      	adds	r5, #1
 800665c:	615f      	str	r7, [r3, #20]
 800665e:	6125      	str	r5, [r4, #16]
 8006660:	4620      	mov	r0, r4
 8006662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006666 <__s2b>:
 8006666:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800666a:	4615      	mov	r5, r2
 800666c:	2209      	movs	r2, #9
 800666e:	461f      	mov	r7, r3
 8006670:	3308      	adds	r3, #8
 8006672:	460c      	mov	r4, r1
 8006674:	fb93 f3f2 	sdiv	r3, r3, r2
 8006678:	4606      	mov	r6, r0
 800667a:	2201      	movs	r2, #1
 800667c:	2100      	movs	r1, #0
 800667e:	429a      	cmp	r2, r3
 8006680:	db20      	blt.n	80066c4 <__s2b+0x5e>
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff ff69 	bl	800655a <_Balloc>
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	2d09      	cmp	r5, #9
 800668c:	6143      	str	r3, [r0, #20]
 800668e:	f04f 0301 	mov.w	r3, #1
 8006692:	6103      	str	r3, [r0, #16]
 8006694:	dd19      	ble.n	80066ca <__s2b+0x64>
 8006696:	f104 0809 	add.w	r8, r4, #9
 800669a:	46c1      	mov	r9, r8
 800669c:	442c      	add	r4, r5
 800669e:	f819 3b01 	ldrb.w	r3, [r9], #1
 80066a2:	4601      	mov	r1, r0
 80066a4:	3b30      	subs	r3, #48	; 0x30
 80066a6:	220a      	movs	r2, #10
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff ffa1 	bl	80065f0 <__multadd>
 80066ae:	45a1      	cmp	r9, r4
 80066b0:	d1f5      	bne.n	800669e <__s2b+0x38>
 80066b2:	eb08 0405 	add.w	r4, r8, r5
 80066b6:	3c08      	subs	r4, #8
 80066b8:	1b2d      	subs	r5, r5, r4
 80066ba:	1963      	adds	r3, r4, r5
 80066bc:	42bb      	cmp	r3, r7
 80066be:	db07      	blt.n	80066d0 <__s2b+0x6a>
 80066c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066c4:	0052      	lsls	r2, r2, #1
 80066c6:	3101      	adds	r1, #1
 80066c8:	e7d9      	b.n	800667e <__s2b+0x18>
 80066ca:	340a      	adds	r4, #10
 80066cc:	2509      	movs	r5, #9
 80066ce:	e7f3      	b.n	80066b8 <__s2b+0x52>
 80066d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80066d4:	4601      	mov	r1, r0
 80066d6:	3b30      	subs	r3, #48	; 0x30
 80066d8:	220a      	movs	r2, #10
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff ff88 	bl	80065f0 <__multadd>
 80066e0:	e7eb      	b.n	80066ba <__s2b+0x54>

080066e2 <__hi0bits>:
 80066e2:	0c02      	lsrs	r2, r0, #16
 80066e4:	0412      	lsls	r2, r2, #16
 80066e6:	4603      	mov	r3, r0
 80066e8:	b9b2      	cbnz	r2, 8006718 <__hi0bits+0x36>
 80066ea:	0403      	lsls	r3, r0, #16
 80066ec:	2010      	movs	r0, #16
 80066ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066f2:	bf04      	itt	eq
 80066f4:	021b      	lsleq	r3, r3, #8
 80066f6:	3008      	addeq	r0, #8
 80066f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066fc:	bf04      	itt	eq
 80066fe:	011b      	lsleq	r3, r3, #4
 8006700:	3004      	addeq	r0, #4
 8006702:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006706:	bf04      	itt	eq
 8006708:	009b      	lsleq	r3, r3, #2
 800670a:	3002      	addeq	r0, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	db06      	blt.n	800671e <__hi0bits+0x3c>
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	d503      	bpl.n	800671c <__hi0bits+0x3a>
 8006714:	3001      	adds	r0, #1
 8006716:	4770      	bx	lr
 8006718:	2000      	movs	r0, #0
 800671a:	e7e8      	b.n	80066ee <__hi0bits+0xc>
 800671c:	2020      	movs	r0, #32
 800671e:	4770      	bx	lr

08006720 <__lo0bits>:
 8006720:	6803      	ldr	r3, [r0, #0]
 8006722:	4601      	mov	r1, r0
 8006724:	f013 0207 	ands.w	r2, r3, #7
 8006728:	d00b      	beq.n	8006742 <__lo0bits+0x22>
 800672a:	07da      	lsls	r2, r3, #31
 800672c:	d423      	bmi.n	8006776 <__lo0bits+0x56>
 800672e:	0798      	lsls	r0, r3, #30
 8006730:	bf49      	itett	mi
 8006732:	085b      	lsrmi	r3, r3, #1
 8006734:	089b      	lsrpl	r3, r3, #2
 8006736:	2001      	movmi	r0, #1
 8006738:	600b      	strmi	r3, [r1, #0]
 800673a:	bf5c      	itt	pl
 800673c:	600b      	strpl	r3, [r1, #0]
 800673e:	2002      	movpl	r0, #2
 8006740:	4770      	bx	lr
 8006742:	b298      	uxth	r0, r3
 8006744:	b9a8      	cbnz	r0, 8006772 <__lo0bits+0x52>
 8006746:	2010      	movs	r0, #16
 8006748:	0c1b      	lsrs	r3, r3, #16
 800674a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800674e:	bf04      	itt	eq
 8006750:	0a1b      	lsreq	r3, r3, #8
 8006752:	3008      	addeq	r0, #8
 8006754:	071a      	lsls	r2, r3, #28
 8006756:	bf04      	itt	eq
 8006758:	091b      	lsreq	r3, r3, #4
 800675a:	3004      	addeq	r0, #4
 800675c:	079a      	lsls	r2, r3, #30
 800675e:	bf04      	itt	eq
 8006760:	089b      	lsreq	r3, r3, #2
 8006762:	3002      	addeq	r0, #2
 8006764:	07da      	lsls	r2, r3, #31
 8006766:	d402      	bmi.n	800676e <__lo0bits+0x4e>
 8006768:	085b      	lsrs	r3, r3, #1
 800676a:	d006      	beq.n	800677a <__lo0bits+0x5a>
 800676c:	3001      	adds	r0, #1
 800676e:	600b      	str	r3, [r1, #0]
 8006770:	4770      	bx	lr
 8006772:	4610      	mov	r0, r2
 8006774:	e7e9      	b.n	800674a <__lo0bits+0x2a>
 8006776:	2000      	movs	r0, #0
 8006778:	4770      	bx	lr
 800677a:	2020      	movs	r0, #32
 800677c:	4770      	bx	lr

0800677e <__i2b>:
 800677e:	b510      	push	{r4, lr}
 8006780:	460c      	mov	r4, r1
 8006782:	2101      	movs	r1, #1
 8006784:	f7ff fee9 	bl	800655a <_Balloc>
 8006788:	2201      	movs	r2, #1
 800678a:	6144      	str	r4, [r0, #20]
 800678c:	6102      	str	r2, [r0, #16]
 800678e:	bd10      	pop	{r4, pc}

08006790 <__multiply>:
 8006790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	4614      	mov	r4, r2
 8006796:	690a      	ldr	r2, [r1, #16]
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	4688      	mov	r8, r1
 800679c:	429a      	cmp	r2, r3
 800679e:	bfbe      	ittt	lt
 80067a0:	460b      	movlt	r3, r1
 80067a2:	46a0      	movlt	r8, r4
 80067a4:	461c      	movlt	r4, r3
 80067a6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80067ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067b6:	eb07 0609 	add.w	r6, r7, r9
 80067ba:	42b3      	cmp	r3, r6
 80067bc:	bfb8      	it	lt
 80067be:	3101      	addlt	r1, #1
 80067c0:	f7ff fecb 	bl	800655a <_Balloc>
 80067c4:	f100 0514 	add.w	r5, r0, #20
 80067c8:	462b      	mov	r3, r5
 80067ca:	2200      	movs	r2, #0
 80067cc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80067d0:	4573      	cmp	r3, lr
 80067d2:	d316      	bcc.n	8006802 <__multiply+0x72>
 80067d4:	f104 0214 	add.w	r2, r4, #20
 80067d8:	f108 0114 	add.w	r1, r8, #20
 80067dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80067e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	9201      	str	r2, [sp, #4]
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d80c      	bhi.n	8006808 <__multiply+0x78>
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	dd03      	ble.n	80067fa <__multiply+0x6a>
 80067f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d05d      	beq.n	80068b6 <__multiply+0x126>
 80067fa:	6106      	str	r6, [r0, #16]
 80067fc:	b003      	add	sp, #12
 80067fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006802:	f843 2b04 	str.w	r2, [r3], #4
 8006806:	e7e3      	b.n	80067d0 <__multiply+0x40>
 8006808:	f8b2 b000 	ldrh.w	fp, [r2]
 800680c:	f1bb 0f00 	cmp.w	fp, #0
 8006810:	d023      	beq.n	800685a <__multiply+0xca>
 8006812:	4689      	mov	r9, r1
 8006814:	46ac      	mov	ip, r5
 8006816:	f04f 0800 	mov.w	r8, #0
 800681a:	f859 4b04 	ldr.w	r4, [r9], #4
 800681e:	f8dc a000 	ldr.w	sl, [ip]
 8006822:	b2a3      	uxth	r3, r4
 8006824:	fa1f fa8a 	uxth.w	sl, sl
 8006828:	fb0b a303 	mla	r3, fp, r3, sl
 800682c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006830:	f8dc 4000 	ldr.w	r4, [ip]
 8006834:	4443      	add	r3, r8
 8006836:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800683a:	fb0b 840a 	mla	r4, fp, sl, r8
 800683e:	46e2      	mov	sl, ip
 8006840:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006844:	b29b      	uxth	r3, r3
 8006846:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800684a:	454f      	cmp	r7, r9
 800684c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006850:	f84a 3b04 	str.w	r3, [sl], #4
 8006854:	d82b      	bhi.n	80068ae <__multiply+0x11e>
 8006856:	f8cc 8004 	str.w	r8, [ip, #4]
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	3204      	adds	r2, #4
 800685e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006862:	f1ba 0f00 	cmp.w	sl, #0
 8006866:	d020      	beq.n	80068aa <__multiply+0x11a>
 8006868:	4689      	mov	r9, r1
 800686a:	46a8      	mov	r8, r5
 800686c:	f04f 0b00 	mov.w	fp, #0
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	f8b9 c000 	ldrh.w	ip, [r9]
 8006876:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800687a:	b29b      	uxth	r3, r3
 800687c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006880:	46c4      	mov	ip, r8
 8006882:	445c      	add	r4, fp
 8006884:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006888:	f84c 3b04 	str.w	r3, [ip], #4
 800688c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006890:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006894:	0c1b      	lsrs	r3, r3, #16
 8006896:	fb0a b303 	mla	r3, sl, r3, fp
 800689a:	454f      	cmp	r7, r9
 800689c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80068a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80068a4:	d805      	bhi.n	80068b2 <__multiply+0x122>
 80068a6:	f8c8 3004 	str.w	r3, [r8, #4]
 80068aa:	3504      	adds	r5, #4
 80068ac:	e79b      	b.n	80067e6 <__multiply+0x56>
 80068ae:	46d4      	mov	ip, sl
 80068b0:	e7b3      	b.n	800681a <__multiply+0x8a>
 80068b2:	46e0      	mov	r8, ip
 80068b4:	e7dd      	b.n	8006872 <__multiply+0xe2>
 80068b6:	3e01      	subs	r6, #1
 80068b8:	e799      	b.n	80067ee <__multiply+0x5e>
	...

080068bc <__pow5mult>:
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	4615      	mov	r5, r2
 80068c2:	f012 0203 	ands.w	r2, r2, #3
 80068c6:	4606      	mov	r6, r0
 80068c8:	460f      	mov	r7, r1
 80068ca:	d007      	beq.n	80068dc <__pow5mult+0x20>
 80068cc:	4c21      	ldr	r4, [pc, #132]	; (8006954 <__pow5mult+0x98>)
 80068ce:	3a01      	subs	r2, #1
 80068d0:	2300      	movs	r3, #0
 80068d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068d6:	f7ff fe8b 	bl	80065f0 <__multadd>
 80068da:	4607      	mov	r7, r0
 80068dc:	10ad      	asrs	r5, r5, #2
 80068de:	d035      	beq.n	800694c <__pow5mult+0x90>
 80068e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068e2:	b93c      	cbnz	r4, 80068f4 <__pow5mult+0x38>
 80068e4:	2010      	movs	r0, #16
 80068e6:	f7ff fe05 	bl	80064f4 <malloc>
 80068ea:	6270      	str	r0, [r6, #36]	; 0x24
 80068ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068f0:	6004      	str	r4, [r0, #0]
 80068f2:	60c4      	str	r4, [r0, #12]
 80068f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068fc:	b94c      	cbnz	r4, 8006912 <__pow5mult+0x56>
 80068fe:	f240 2171 	movw	r1, #625	; 0x271
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff ff3b 	bl	800677e <__i2b>
 8006908:	2300      	movs	r3, #0
 800690a:	4604      	mov	r4, r0
 800690c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006910:	6003      	str	r3, [r0, #0]
 8006912:	f04f 0800 	mov.w	r8, #0
 8006916:	07eb      	lsls	r3, r5, #31
 8006918:	d50a      	bpl.n	8006930 <__pow5mult+0x74>
 800691a:	4639      	mov	r1, r7
 800691c:	4622      	mov	r2, r4
 800691e:	4630      	mov	r0, r6
 8006920:	f7ff ff36 	bl	8006790 <__multiply>
 8006924:	4681      	mov	r9, r0
 8006926:	4639      	mov	r1, r7
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff fe4a 	bl	80065c2 <_Bfree>
 800692e:	464f      	mov	r7, r9
 8006930:	106d      	asrs	r5, r5, #1
 8006932:	d00b      	beq.n	800694c <__pow5mult+0x90>
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	b938      	cbnz	r0, 8006948 <__pow5mult+0x8c>
 8006938:	4622      	mov	r2, r4
 800693a:	4621      	mov	r1, r4
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff ff27 	bl	8006790 <__multiply>
 8006942:	6020      	str	r0, [r4, #0]
 8006944:	f8c0 8000 	str.w	r8, [r0]
 8006948:	4604      	mov	r4, r0
 800694a:	e7e4      	b.n	8006916 <__pow5mult+0x5a>
 800694c:	4638      	mov	r0, r7
 800694e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006952:	bf00      	nop
 8006954:	080078c8 	.word	0x080078c8

08006958 <__lshift>:
 8006958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	460c      	mov	r4, r1
 800695e:	4607      	mov	r7, r0
 8006960:	4616      	mov	r6, r2
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006968:	eb0a 0903 	add.w	r9, sl, r3
 800696c:	6849      	ldr	r1, [r1, #4]
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	f109 0501 	add.w	r5, r9, #1
 8006974:	42ab      	cmp	r3, r5
 8006976:	db32      	blt.n	80069de <__lshift+0x86>
 8006978:	4638      	mov	r0, r7
 800697a:	f7ff fdee 	bl	800655a <_Balloc>
 800697e:	2300      	movs	r3, #0
 8006980:	4680      	mov	r8, r0
 8006982:	461a      	mov	r2, r3
 8006984:	f100 0114 	add.w	r1, r0, #20
 8006988:	4553      	cmp	r3, sl
 800698a:	db2b      	blt.n	80069e4 <__lshift+0x8c>
 800698c:	6920      	ldr	r0, [r4, #16]
 800698e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006992:	f104 0314 	add.w	r3, r4, #20
 8006996:	f016 021f 	ands.w	r2, r6, #31
 800699a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800699e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069a2:	d025      	beq.n	80069f0 <__lshift+0x98>
 80069a4:	2000      	movs	r0, #0
 80069a6:	f1c2 0e20 	rsb	lr, r2, #32
 80069aa:	468a      	mov	sl, r1
 80069ac:	681e      	ldr	r6, [r3, #0]
 80069ae:	4096      	lsls	r6, r2
 80069b0:	4330      	orrs	r0, r6
 80069b2:	f84a 0b04 	str.w	r0, [sl], #4
 80069b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80069ba:	459c      	cmp	ip, r3
 80069bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80069c0:	d814      	bhi.n	80069ec <__lshift+0x94>
 80069c2:	6048      	str	r0, [r1, #4]
 80069c4:	b108      	cbz	r0, 80069ca <__lshift+0x72>
 80069c6:	f109 0502 	add.w	r5, r9, #2
 80069ca:	3d01      	subs	r5, #1
 80069cc:	4638      	mov	r0, r7
 80069ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80069d2:	4621      	mov	r1, r4
 80069d4:	f7ff fdf5 	bl	80065c2 <_Bfree>
 80069d8:	4640      	mov	r0, r8
 80069da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069de:	3101      	adds	r1, #1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	e7c7      	b.n	8006974 <__lshift+0x1c>
 80069e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80069e8:	3301      	adds	r3, #1
 80069ea:	e7cd      	b.n	8006988 <__lshift+0x30>
 80069ec:	4651      	mov	r1, sl
 80069ee:	e7dc      	b.n	80069aa <__lshift+0x52>
 80069f0:	3904      	subs	r1, #4
 80069f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f6:	459c      	cmp	ip, r3
 80069f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80069fc:	d8f9      	bhi.n	80069f2 <__lshift+0x9a>
 80069fe:	e7e4      	b.n	80069ca <__lshift+0x72>

08006a00 <__mcmp>:
 8006a00:	6903      	ldr	r3, [r0, #16]
 8006a02:	690a      	ldr	r2, [r1, #16]
 8006a04:	b530      	push	{r4, r5, lr}
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	d10c      	bne.n	8006a24 <__mcmp+0x24>
 8006a0a:	0092      	lsls	r2, r2, #2
 8006a0c:	3014      	adds	r0, #20
 8006a0e:	3114      	adds	r1, #20
 8006a10:	1884      	adds	r4, r0, r2
 8006a12:	4411      	add	r1, r2
 8006a14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a1c:	4295      	cmp	r5, r2
 8006a1e:	d003      	beq.n	8006a28 <__mcmp+0x28>
 8006a20:	d305      	bcc.n	8006a2e <__mcmp+0x2e>
 8006a22:	2301      	movs	r3, #1
 8006a24:	4618      	mov	r0, r3
 8006a26:	bd30      	pop	{r4, r5, pc}
 8006a28:	42a0      	cmp	r0, r4
 8006a2a:	d3f3      	bcc.n	8006a14 <__mcmp+0x14>
 8006a2c:	e7fa      	b.n	8006a24 <__mcmp+0x24>
 8006a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a32:	e7f7      	b.n	8006a24 <__mcmp+0x24>

08006a34 <__mdiff>:
 8006a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	460d      	mov	r5, r1
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4628      	mov	r0, r5
 8006a40:	4614      	mov	r4, r2
 8006a42:	f7ff ffdd 	bl	8006a00 <__mcmp>
 8006a46:	1e06      	subs	r6, r0, #0
 8006a48:	d108      	bne.n	8006a5c <__mdiff+0x28>
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	f7ff fd84 	bl	800655a <_Balloc>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5c:	bfa4      	itt	ge
 8006a5e:	4623      	movge	r3, r4
 8006a60:	462c      	movge	r4, r5
 8006a62:	4638      	mov	r0, r7
 8006a64:	6861      	ldr	r1, [r4, #4]
 8006a66:	bfa6      	itte	ge
 8006a68:	461d      	movge	r5, r3
 8006a6a:	2600      	movge	r6, #0
 8006a6c:	2601      	movlt	r6, #1
 8006a6e:	f7ff fd74 	bl	800655a <_Balloc>
 8006a72:	f04f 0e00 	mov.w	lr, #0
 8006a76:	60c6      	str	r6, [r0, #12]
 8006a78:	692b      	ldr	r3, [r5, #16]
 8006a7a:	6926      	ldr	r6, [r4, #16]
 8006a7c:	f104 0214 	add.w	r2, r4, #20
 8006a80:	f105 0914 	add.w	r9, r5, #20
 8006a84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a8c:	f100 0114 	add.w	r1, r0, #20
 8006a90:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a94:	f859 5b04 	ldr.w	r5, [r9], #4
 8006a98:	fa1f f38a 	uxth.w	r3, sl
 8006a9c:	4473      	add	r3, lr
 8006a9e:	b2ac      	uxth	r4, r5
 8006aa0:	1b1b      	subs	r3, r3, r4
 8006aa2:	0c2c      	lsrs	r4, r5, #16
 8006aa4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006aa8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006ab2:	45c8      	cmp	r8, r9
 8006ab4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006ab8:	4694      	mov	ip, r2
 8006aba:	f841 4b04 	str.w	r4, [r1], #4
 8006abe:	d8e7      	bhi.n	8006a90 <__mdiff+0x5c>
 8006ac0:	45bc      	cmp	ip, r7
 8006ac2:	d304      	bcc.n	8006ace <__mdiff+0x9a>
 8006ac4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ac8:	b183      	cbz	r3, 8006aec <__mdiff+0xb8>
 8006aca:	6106      	str	r6, [r0, #16]
 8006acc:	e7c4      	b.n	8006a58 <__mdiff+0x24>
 8006ace:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006ad2:	b2a2      	uxth	r2, r4
 8006ad4:	4472      	add	r2, lr
 8006ad6:	1413      	asrs	r3, r2, #16
 8006ad8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006adc:	b292      	uxth	r2, r2
 8006ade:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ae2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006ae6:	f841 2b04 	str.w	r2, [r1], #4
 8006aea:	e7e9      	b.n	8006ac0 <__mdiff+0x8c>
 8006aec:	3e01      	subs	r6, #1
 8006aee:	e7e9      	b.n	8006ac4 <__mdiff+0x90>

08006af0 <__ulp>:
 8006af0:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <__ulp+0x44>)
 8006af2:	400b      	ands	r3, r1
 8006af4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dd02      	ble.n	8006b02 <__ulp+0x12>
 8006afc:	2000      	movs	r0, #0
 8006afe:	4619      	mov	r1, r3
 8006b00:	4770      	bx	lr
 8006b02:	425b      	negs	r3, r3
 8006b04:	151b      	asrs	r3, r3, #20
 8006b06:	2b13      	cmp	r3, #19
 8006b08:	f04f 0000 	mov.w	r0, #0
 8006b0c:	f04f 0100 	mov.w	r1, #0
 8006b10:	dc04      	bgt.n	8006b1c <__ulp+0x2c>
 8006b12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b16:	fa42 f103 	asr.w	r1, r2, r3
 8006b1a:	4770      	bx	lr
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	3b14      	subs	r3, #20
 8006b20:	2b1e      	cmp	r3, #30
 8006b22:	bfce      	itee	gt
 8006b24:	4613      	movgt	r3, r2
 8006b26:	f1c3 031f 	rsble	r3, r3, #31
 8006b2a:	fa02 f303 	lslle.w	r3, r2, r3
 8006b2e:	4618      	mov	r0, r3
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	7ff00000 	.word	0x7ff00000

08006b38 <__b2d>:
 8006b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b3c:	6907      	ldr	r7, [r0, #16]
 8006b3e:	f100 0914 	add.w	r9, r0, #20
 8006b42:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006b46:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006b4a:	f1a7 0804 	sub.w	r8, r7, #4
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f7ff fdc7 	bl	80066e2 <__hi0bits>
 8006b54:	f1c0 0320 	rsb	r3, r0, #32
 8006b58:	280a      	cmp	r0, #10
 8006b5a:	600b      	str	r3, [r1, #0]
 8006b5c:	491e      	ldr	r1, [pc, #120]	; (8006bd8 <__b2d+0xa0>)
 8006b5e:	dc17      	bgt.n	8006b90 <__b2d+0x58>
 8006b60:	45c1      	cmp	r9, r8
 8006b62:	bf28      	it	cs
 8006b64:	2200      	movcs	r2, #0
 8006b66:	f1c0 0c0b 	rsb	ip, r0, #11
 8006b6a:	fa26 f30c 	lsr.w	r3, r6, ip
 8006b6e:	bf38      	it	cc
 8006b70:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006b74:	ea43 0501 	orr.w	r5, r3, r1
 8006b78:	f100 0315 	add.w	r3, r0, #21
 8006b7c:	fa06 f303 	lsl.w	r3, r6, r3
 8006b80:	fa22 f20c 	lsr.w	r2, r2, ip
 8006b84:	ea43 0402 	orr.w	r4, r3, r2
 8006b88:	4620      	mov	r0, r4
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b90:	45c1      	cmp	r9, r8
 8006b92:	bf3a      	itte	cc
 8006b94:	f1a7 0808 	subcc.w	r8, r7, #8
 8006b98:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006b9c:	2200      	movcs	r2, #0
 8006b9e:	f1b0 030b 	subs.w	r3, r0, #11
 8006ba2:	d015      	beq.n	8006bd0 <__b2d+0x98>
 8006ba4:	409e      	lsls	r6, r3
 8006ba6:	f1c3 0720 	rsb	r7, r3, #32
 8006baa:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8006bae:	fa22 f107 	lsr.w	r1, r2, r7
 8006bb2:	45c8      	cmp	r8, r9
 8006bb4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006bb8:	ea46 0501 	orr.w	r5, r6, r1
 8006bbc:	bf94      	ite	ls
 8006bbe:	2100      	movls	r1, #0
 8006bc0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006bc4:	fa02 f003 	lsl.w	r0, r2, r3
 8006bc8:	40f9      	lsrs	r1, r7
 8006bca:	ea40 0401 	orr.w	r4, r0, r1
 8006bce:	e7db      	b.n	8006b88 <__b2d+0x50>
 8006bd0:	ea46 0501 	orr.w	r5, r6, r1
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	e7d7      	b.n	8006b88 <__b2d+0x50>
 8006bd8:	3ff00000 	.word	0x3ff00000

08006bdc <__d2b>:
 8006bdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006be0:	461c      	mov	r4, r3
 8006be2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006be6:	2101      	movs	r1, #1
 8006be8:	4690      	mov	r8, r2
 8006bea:	f7ff fcb6 	bl	800655a <_Balloc>
 8006bee:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006bf2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	bb34      	cbnz	r4, 8006c48 <__d2b+0x6c>
 8006bfa:	9201      	str	r2, [sp, #4]
 8006bfc:	f1b8 0200 	subs.w	r2, r8, #0
 8006c00:	d027      	beq.n	8006c52 <__d2b+0x76>
 8006c02:	a802      	add	r0, sp, #8
 8006c04:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006c08:	f7ff fd8a 	bl	8006720 <__lo0bits>
 8006c0c:	9900      	ldr	r1, [sp, #0]
 8006c0e:	b1f0      	cbz	r0, 8006c4e <__d2b+0x72>
 8006c10:	9a01      	ldr	r2, [sp, #4]
 8006c12:	f1c0 0320 	rsb	r3, r0, #32
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	40c2      	lsrs	r2, r0
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	9201      	str	r2, [sp, #4]
 8006c22:	9b01      	ldr	r3, [sp, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf14      	ite	ne
 8006c28:	2102      	movne	r1, #2
 8006c2a:	2101      	moveq	r1, #1
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	6139      	str	r1, [r7, #16]
 8006c30:	b1c4      	cbz	r4, 8006c64 <__d2b+0x88>
 8006c32:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c36:	4404      	add	r4, r0
 8006c38:	6034      	str	r4, [r6, #0]
 8006c3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c3e:	6028      	str	r0, [r5, #0]
 8006c40:	4638      	mov	r0, r7
 8006c42:	b002      	add	sp, #8
 8006c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c4c:	e7d5      	b.n	8006bfa <__d2b+0x1e>
 8006c4e:	6179      	str	r1, [r7, #20]
 8006c50:	e7e7      	b.n	8006c22 <__d2b+0x46>
 8006c52:	a801      	add	r0, sp, #4
 8006c54:	f7ff fd64 	bl	8006720 <__lo0bits>
 8006c58:	2101      	movs	r1, #1
 8006c5a:	9b01      	ldr	r3, [sp, #4]
 8006c5c:	6139      	str	r1, [r7, #16]
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	3020      	adds	r0, #32
 8006c62:	e7e5      	b.n	8006c30 <__d2b+0x54>
 8006c64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c68:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006c6c:	6030      	str	r0, [r6, #0]
 8006c6e:	6918      	ldr	r0, [r3, #16]
 8006c70:	f7ff fd37 	bl	80066e2 <__hi0bits>
 8006c74:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006c78:	e7e1      	b.n	8006c3e <__d2b+0x62>

08006c7a <__ratio>:
 8006c7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7e:	4688      	mov	r8, r1
 8006c80:	4669      	mov	r1, sp
 8006c82:	4681      	mov	r9, r0
 8006c84:	f7ff ff58 	bl	8006b38 <__b2d>
 8006c88:	468b      	mov	fp, r1
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	4640      	mov	r0, r8
 8006c90:	a901      	add	r1, sp, #4
 8006c92:	f7ff ff51 	bl	8006b38 <__b2d>
 8006c96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006c9e:	460d      	mov	r5, r1
 8006ca0:	eba3 0c02 	sub.w	ip, r3, r2
 8006ca4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfd5      	itete	le
 8006cb2:	460a      	movle	r2, r1
 8006cb4:	463a      	movgt	r2, r7
 8006cb6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006cba:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006cbe:	bfd8      	it	le
 8006cc0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	4659      	mov	r1, fp
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7f9 fd2e 	bl	800072c <__aeabi_ddiv>
 8006cd0:	b003      	add	sp, #12
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cd6 <__copybits>:
 8006cd6:	3901      	subs	r1, #1
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	1149      	asrs	r1, r1, #5
 8006cdc:	6914      	ldr	r4, [r2, #16]
 8006cde:	3101      	adds	r1, #1
 8006ce0:	f102 0314 	add.w	r3, r2, #20
 8006ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ce8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	4602      	mov	r2, r0
 8006cf0:	d303      	bcc.n	8006cfa <__copybits+0x24>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	428a      	cmp	r2, r1
 8006cf6:	d305      	bcc.n	8006d04 <__copybits+0x2e>
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cfe:	f840 2b04 	str.w	r2, [r0], #4
 8006d02:	e7f3      	b.n	8006cec <__copybits+0x16>
 8006d04:	f842 3b04 	str.w	r3, [r2], #4
 8006d08:	e7f4      	b.n	8006cf4 <__copybits+0x1e>

08006d0a <__any_on>:
 8006d0a:	f100 0214 	add.w	r2, r0, #20
 8006d0e:	6900      	ldr	r0, [r0, #16]
 8006d10:	114b      	asrs	r3, r1, #5
 8006d12:	4298      	cmp	r0, r3
 8006d14:	b510      	push	{r4, lr}
 8006d16:	db11      	blt.n	8006d3c <__any_on+0x32>
 8006d18:	dd0a      	ble.n	8006d30 <__any_on+0x26>
 8006d1a:	f011 011f 	ands.w	r1, r1, #31
 8006d1e:	d007      	beq.n	8006d30 <__any_on+0x26>
 8006d20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d24:	fa24 f001 	lsr.w	r0, r4, r1
 8006d28:	fa00 f101 	lsl.w	r1, r0, r1
 8006d2c:	428c      	cmp	r4, r1
 8006d2e:	d10b      	bne.n	8006d48 <__any_on+0x3e>
 8006d30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d803      	bhi.n	8006d40 <__any_on+0x36>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	bd10      	pop	{r4, pc}
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	e7f7      	b.n	8006d30 <__any_on+0x26>
 8006d40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d0f5      	beq.n	8006d34 <__any_on+0x2a>
 8006d48:	2001      	movs	r0, #1
 8006d4a:	e7f6      	b.n	8006d3a <__any_on+0x30>

08006d4c <_calloc_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	fb02 f401 	mul.w	r4, r2, r1
 8006d52:	4621      	mov	r1, r4
 8006d54:	f000 f854 	bl	8006e00 <_malloc_r>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	b118      	cbz	r0, 8006d64 <_calloc_r+0x18>
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	2100      	movs	r1, #0
 8006d60:	f7fc fa14 	bl	800318c <memset>
 8006d64:	4628      	mov	r0, r5
 8006d66:	bd38      	pop	{r3, r4, r5, pc}

08006d68 <_free_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	d043      	beq.n	8006df8 <_free_r+0x90>
 8006d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d74:	1f0c      	subs	r4, r1, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfb8      	it	lt
 8006d7a:	18e4      	addlt	r4, r4, r3
 8006d7c:	f000 fc0b 	bl	8007596 <__malloc_lock>
 8006d80:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <_free_r+0x94>)
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	4610      	mov	r0, r2
 8006d86:	b933      	cbnz	r3, 8006d96 <_free_r+0x2e>
 8006d88:	6063      	str	r3, [r4, #4]
 8006d8a:	6014      	str	r4, [r2, #0]
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d92:	f000 bc01 	b.w	8007598 <__malloc_unlock>
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	d90b      	bls.n	8006db2 <_free_r+0x4a>
 8006d9a:	6821      	ldr	r1, [r4, #0]
 8006d9c:	1862      	adds	r2, r4, r1
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	bf01      	itttt	eq
 8006da2:	681a      	ldreq	r2, [r3, #0]
 8006da4:	685b      	ldreq	r3, [r3, #4]
 8006da6:	1852      	addeq	r2, r2, r1
 8006da8:	6022      	streq	r2, [r4, #0]
 8006daa:	6063      	str	r3, [r4, #4]
 8006dac:	6004      	str	r4, [r0, #0]
 8006dae:	e7ed      	b.n	8006d8c <_free_r+0x24>
 8006db0:	4613      	mov	r3, r2
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	b10a      	cbz	r2, 8006dba <_free_r+0x52>
 8006db6:	42a2      	cmp	r2, r4
 8006db8:	d9fa      	bls.n	8006db0 <_free_r+0x48>
 8006dba:	6819      	ldr	r1, [r3, #0]
 8006dbc:	1858      	adds	r0, r3, r1
 8006dbe:	42a0      	cmp	r0, r4
 8006dc0:	d10b      	bne.n	8006dda <_free_r+0x72>
 8006dc2:	6820      	ldr	r0, [r4, #0]
 8006dc4:	4401      	add	r1, r0
 8006dc6:	1858      	adds	r0, r3, r1
 8006dc8:	4282      	cmp	r2, r0
 8006dca:	6019      	str	r1, [r3, #0]
 8006dcc:	d1de      	bne.n	8006d8c <_free_r+0x24>
 8006dce:	6810      	ldr	r0, [r2, #0]
 8006dd0:	6852      	ldr	r2, [r2, #4]
 8006dd2:	4401      	add	r1, r0
 8006dd4:	6019      	str	r1, [r3, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
 8006dd8:	e7d8      	b.n	8006d8c <_free_r+0x24>
 8006dda:	d902      	bls.n	8006de2 <_free_r+0x7a>
 8006ddc:	230c      	movs	r3, #12
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	e7d4      	b.n	8006d8c <_free_r+0x24>
 8006de2:	6820      	ldr	r0, [r4, #0]
 8006de4:	1821      	adds	r1, r4, r0
 8006de6:	428a      	cmp	r2, r1
 8006de8:	bf01      	itttt	eq
 8006dea:	6811      	ldreq	r1, [r2, #0]
 8006dec:	6852      	ldreq	r2, [r2, #4]
 8006dee:	1809      	addeq	r1, r1, r0
 8006df0:	6021      	streq	r1, [r4, #0]
 8006df2:	6062      	str	r2, [r4, #4]
 8006df4:	605c      	str	r4, [r3, #4]
 8006df6:	e7c9      	b.n	8006d8c <_free_r+0x24>
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	bf00      	nop
 8006dfc:	2000030c 	.word	0x2000030c

08006e00 <_malloc_r>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	1ccd      	adds	r5, r1, #3
 8006e04:	f025 0503 	bic.w	r5, r5, #3
 8006e08:	3508      	adds	r5, #8
 8006e0a:	2d0c      	cmp	r5, #12
 8006e0c:	bf38      	it	cc
 8006e0e:	250c      	movcc	r5, #12
 8006e10:	2d00      	cmp	r5, #0
 8006e12:	4606      	mov	r6, r0
 8006e14:	db01      	blt.n	8006e1a <_malloc_r+0x1a>
 8006e16:	42a9      	cmp	r1, r5
 8006e18:	d903      	bls.n	8006e22 <_malloc_r+0x22>
 8006e1a:	230c      	movs	r3, #12
 8006e1c:	6033      	str	r3, [r6, #0]
 8006e1e:	2000      	movs	r0, #0
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
 8006e22:	f000 fbb8 	bl	8007596 <__malloc_lock>
 8006e26:	4a21      	ldr	r2, [pc, #132]	; (8006eac <_malloc_r+0xac>)
 8006e28:	6814      	ldr	r4, [r2, #0]
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	b991      	cbnz	r1, 8006e54 <_malloc_r+0x54>
 8006e2e:	4c20      	ldr	r4, [pc, #128]	; (8006eb0 <_malloc_r+0xb0>)
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	b91b      	cbnz	r3, 8006e3c <_malloc_r+0x3c>
 8006e34:	4630      	mov	r0, r6
 8006e36:	f000 facd 	bl	80073d4 <_sbrk_r>
 8006e3a:	6020      	str	r0, [r4, #0]
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 fac8 	bl	80073d4 <_sbrk_r>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d124      	bne.n	8006e92 <_malloc_r+0x92>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	6033      	str	r3, [r6, #0]
 8006e4e:	f000 fba3 	bl	8007598 <__malloc_unlock>
 8006e52:	e7e4      	b.n	8006e1e <_malloc_r+0x1e>
 8006e54:	680b      	ldr	r3, [r1, #0]
 8006e56:	1b5b      	subs	r3, r3, r5
 8006e58:	d418      	bmi.n	8006e8c <_malloc_r+0x8c>
 8006e5a:	2b0b      	cmp	r3, #11
 8006e5c:	d90f      	bls.n	8006e7e <_malloc_r+0x7e>
 8006e5e:	600b      	str	r3, [r1, #0]
 8006e60:	18cc      	adds	r4, r1, r3
 8006e62:	50cd      	str	r5, [r1, r3]
 8006e64:	4630      	mov	r0, r6
 8006e66:	f000 fb97 	bl	8007598 <__malloc_unlock>
 8006e6a:	f104 000b 	add.w	r0, r4, #11
 8006e6e:	1d23      	adds	r3, r4, #4
 8006e70:	f020 0007 	bic.w	r0, r0, #7
 8006e74:	1ac3      	subs	r3, r0, r3
 8006e76:	d0d3      	beq.n	8006e20 <_malloc_r+0x20>
 8006e78:	425a      	negs	r2, r3
 8006e7a:	50e2      	str	r2, [r4, r3]
 8006e7c:	e7d0      	b.n	8006e20 <_malloc_r+0x20>
 8006e7e:	684b      	ldr	r3, [r1, #4]
 8006e80:	428c      	cmp	r4, r1
 8006e82:	bf16      	itet	ne
 8006e84:	6063      	strne	r3, [r4, #4]
 8006e86:	6013      	streq	r3, [r2, #0]
 8006e88:	460c      	movne	r4, r1
 8006e8a:	e7eb      	b.n	8006e64 <_malloc_r+0x64>
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	6849      	ldr	r1, [r1, #4]
 8006e90:	e7cc      	b.n	8006e2c <_malloc_r+0x2c>
 8006e92:	1cc4      	adds	r4, r0, #3
 8006e94:	f024 0403 	bic.w	r4, r4, #3
 8006e98:	42a0      	cmp	r0, r4
 8006e9a:	d005      	beq.n	8006ea8 <_malloc_r+0xa8>
 8006e9c:	1a21      	subs	r1, r4, r0
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f000 fa98 	bl	80073d4 <_sbrk_r>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d0cf      	beq.n	8006e48 <_malloc_r+0x48>
 8006ea8:	6025      	str	r5, [r4, #0]
 8006eaa:	e7db      	b.n	8006e64 <_malloc_r+0x64>
 8006eac:	2000030c 	.word	0x2000030c
 8006eb0:	20000310 	.word	0x20000310

08006eb4 <__ssputs_r>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	688e      	ldr	r6, [r1, #8]
 8006eba:	4682      	mov	sl, r0
 8006ebc:	429e      	cmp	r6, r3
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	4690      	mov	r8, r2
 8006ec2:	4699      	mov	r9, r3
 8006ec4:	d837      	bhi.n	8006f36 <__ssputs_r+0x82>
 8006ec6:	898a      	ldrh	r2, [r1, #12]
 8006ec8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ecc:	d031      	beq.n	8006f32 <__ssputs_r+0x7e>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	6825      	ldr	r5, [r4, #0]
 8006ed2:	6909      	ldr	r1, [r1, #16]
 8006ed4:	1a6f      	subs	r7, r5, r1
 8006ed6:	6965      	ldr	r5, [r4, #20]
 8006ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006edc:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ee0:	f109 0301 	add.w	r3, r9, #1
 8006ee4:	443b      	add	r3, r7
 8006ee6:	429d      	cmp	r5, r3
 8006ee8:	bf38      	it	cc
 8006eea:	461d      	movcc	r5, r3
 8006eec:	0553      	lsls	r3, r2, #21
 8006eee:	d530      	bpl.n	8006f52 <__ssputs_r+0x9e>
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f7ff ff85 	bl	8006e00 <_malloc_r>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	b950      	cbnz	r0, 8006f10 <__ssputs_r+0x5c>
 8006efa:	230c      	movs	r3, #12
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	f8ca 3000 	str.w	r3, [sl]
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f10:	463a      	mov	r2, r7
 8006f12:	6921      	ldr	r1, [r4, #16]
 8006f14:	f7ff fb16 	bl	8006544 <memcpy>
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	6126      	str	r6, [r4, #16]
 8006f26:	443e      	add	r6, r7
 8006f28:	6026      	str	r6, [r4, #0]
 8006f2a:	464e      	mov	r6, r9
 8006f2c:	6165      	str	r5, [r4, #20]
 8006f2e:	1bed      	subs	r5, r5, r7
 8006f30:	60a5      	str	r5, [r4, #8]
 8006f32:	454e      	cmp	r6, r9
 8006f34:	d900      	bls.n	8006f38 <__ssputs_r+0x84>
 8006f36:	464e      	mov	r6, r9
 8006f38:	4632      	mov	r2, r6
 8006f3a:	4641      	mov	r1, r8
 8006f3c:	6820      	ldr	r0, [r4, #0]
 8006f3e:	f000 fb11 	bl	8007564 <memmove>
 8006f42:	68a3      	ldr	r3, [r4, #8]
 8006f44:	2000      	movs	r0, #0
 8006f46:	1b9b      	subs	r3, r3, r6
 8006f48:	60a3      	str	r3, [r4, #8]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	441e      	add	r6, r3
 8006f4e:	6026      	str	r6, [r4, #0]
 8006f50:	e7dc      	b.n	8006f0c <__ssputs_r+0x58>
 8006f52:	462a      	mov	r2, r5
 8006f54:	f000 fb21 	bl	800759a <_realloc_r>
 8006f58:	4606      	mov	r6, r0
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d1e2      	bne.n	8006f24 <__ssputs_r+0x70>
 8006f5e:	6921      	ldr	r1, [r4, #16]
 8006f60:	4650      	mov	r0, sl
 8006f62:	f7ff ff01 	bl	8006d68 <_free_r>
 8006f66:	e7c8      	b.n	8006efa <__ssputs_r+0x46>

08006f68 <_svfiprintf_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	461d      	mov	r5, r3
 8006f6e:	898b      	ldrh	r3, [r1, #12]
 8006f70:	b09d      	sub	sp, #116	; 0x74
 8006f72:	061f      	lsls	r7, r3, #24
 8006f74:	4680      	mov	r8, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	4616      	mov	r6, r2
 8006f7a:	d50f      	bpl.n	8006f9c <_svfiprintf_r+0x34>
 8006f7c:	690b      	ldr	r3, [r1, #16]
 8006f7e:	b96b      	cbnz	r3, 8006f9c <_svfiprintf_r+0x34>
 8006f80:	2140      	movs	r1, #64	; 0x40
 8006f82:	f7ff ff3d 	bl	8006e00 <_malloc_r>
 8006f86:	6020      	str	r0, [r4, #0]
 8006f88:	6120      	str	r0, [r4, #16]
 8006f8a:	b928      	cbnz	r0, 8006f98 <_svfiprintf_r+0x30>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	f8c8 3000 	str.w	r3, [r8]
 8006f92:	f04f 30ff 	mov.w	r0, #4294967295
 8006f96:	e0c8      	b.n	800712a <_svfiprintf_r+0x1c2>
 8006f98:	2340      	movs	r3, #64	; 0x40
 8006f9a:	6163      	str	r3, [r4, #20]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fa6:	2330      	movs	r3, #48	; 0x30
 8006fa8:	f04f 0b01 	mov.w	fp, #1
 8006fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fb0:	9503      	str	r5, [sp, #12]
 8006fb2:	4637      	mov	r7, r6
 8006fb4:	463d      	mov	r5, r7
 8006fb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006fba:	b10b      	cbz	r3, 8006fc0 <_svfiprintf_r+0x58>
 8006fbc:	2b25      	cmp	r3, #37	; 0x25
 8006fbe:	d13e      	bne.n	800703e <_svfiprintf_r+0xd6>
 8006fc0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006fc4:	d00b      	beq.n	8006fde <_svfiprintf_r+0x76>
 8006fc6:	4653      	mov	r3, sl
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4640      	mov	r0, r8
 8006fce:	f7ff ff71 	bl	8006eb4 <__ssputs_r>
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f000 80a4 	beq.w	8007120 <_svfiprintf_r+0x1b8>
 8006fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fda:	4453      	add	r3, sl
 8006fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fde:	783b      	ldrb	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 809d 	beq.w	8007120 <_svfiprintf_r+0x1b8>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	9307      	str	r3, [sp, #28]
 8006ff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ff8:	931a      	str	r3, [sp, #104]	; 0x68
 8006ffa:	462f      	mov	r7, r5
 8006ffc:	2205      	movs	r2, #5
 8006ffe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007002:	4850      	ldr	r0, [pc, #320]	; (8007144 <_svfiprintf_r+0x1dc>)
 8007004:	f7ff fa90 	bl	8006528 <memchr>
 8007008:	9b04      	ldr	r3, [sp, #16]
 800700a:	b9d0      	cbnz	r0, 8007042 <_svfiprintf_r+0xda>
 800700c:	06d9      	lsls	r1, r3, #27
 800700e:	bf44      	itt	mi
 8007010:	2220      	movmi	r2, #32
 8007012:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007016:	071a      	lsls	r2, r3, #28
 8007018:	bf44      	itt	mi
 800701a:	222b      	movmi	r2, #43	; 0x2b
 800701c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007020:	782a      	ldrb	r2, [r5, #0]
 8007022:	2a2a      	cmp	r2, #42	; 0x2a
 8007024:	d015      	beq.n	8007052 <_svfiprintf_r+0xea>
 8007026:	462f      	mov	r7, r5
 8007028:	2000      	movs	r0, #0
 800702a:	250a      	movs	r5, #10
 800702c:	9a07      	ldr	r2, [sp, #28]
 800702e:	4639      	mov	r1, r7
 8007030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007034:	3b30      	subs	r3, #48	; 0x30
 8007036:	2b09      	cmp	r3, #9
 8007038:	d94d      	bls.n	80070d6 <_svfiprintf_r+0x16e>
 800703a:	b1b8      	cbz	r0, 800706c <_svfiprintf_r+0x104>
 800703c:	e00f      	b.n	800705e <_svfiprintf_r+0xf6>
 800703e:	462f      	mov	r7, r5
 8007040:	e7b8      	b.n	8006fb4 <_svfiprintf_r+0x4c>
 8007042:	4a40      	ldr	r2, [pc, #256]	; (8007144 <_svfiprintf_r+0x1dc>)
 8007044:	463d      	mov	r5, r7
 8007046:	1a80      	subs	r0, r0, r2
 8007048:	fa0b f000 	lsl.w	r0, fp, r0
 800704c:	4318      	orrs	r0, r3
 800704e:	9004      	str	r0, [sp, #16]
 8007050:	e7d3      	b.n	8006ffa <_svfiprintf_r+0x92>
 8007052:	9a03      	ldr	r2, [sp, #12]
 8007054:	1d11      	adds	r1, r2, #4
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	9103      	str	r1, [sp, #12]
 800705a:	2a00      	cmp	r2, #0
 800705c:	db01      	blt.n	8007062 <_svfiprintf_r+0xfa>
 800705e:	9207      	str	r2, [sp, #28]
 8007060:	e004      	b.n	800706c <_svfiprintf_r+0x104>
 8007062:	4252      	negs	r2, r2
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	9207      	str	r2, [sp, #28]
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	783b      	ldrb	r3, [r7, #0]
 800706e:	2b2e      	cmp	r3, #46	; 0x2e
 8007070:	d10c      	bne.n	800708c <_svfiprintf_r+0x124>
 8007072:	787b      	ldrb	r3, [r7, #1]
 8007074:	2b2a      	cmp	r3, #42	; 0x2a
 8007076:	d133      	bne.n	80070e0 <_svfiprintf_r+0x178>
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	3702      	adds	r7, #2
 800707c:	1d1a      	adds	r2, r3, #4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	9203      	str	r2, [sp, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	bfb8      	it	lt
 8007086:	f04f 33ff 	movlt.w	r3, #4294967295
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	4d2e      	ldr	r5, [pc, #184]	; (8007148 <_svfiprintf_r+0x1e0>)
 800708e:	2203      	movs	r2, #3
 8007090:	7839      	ldrb	r1, [r7, #0]
 8007092:	4628      	mov	r0, r5
 8007094:	f7ff fa48 	bl	8006528 <memchr>
 8007098:	b138      	cbz	r0, 80070aa <_svfiprintf_r+0x142>
 800709a:	2340      	movs	r3, #64	; 0x40
 800709c:	1b40      	subs	r0, r0, r5
 800709e:	fa03 f000 	lsl.w	r0, r3, r0
 80070a2:	9b04      	ldr	r3, [sp, #16]
 80070a4:	3701      	adds	r7, #1
 80070a6:	4303      	orrs	r3, r0
 80070a8:	9304      	str	r3, [sp, #16]
 80070aa:	7839      	ldrb	r1, [r7, #0]
 80070ac:	2206      	movs	r2, #6
 80070ae:	4827      	ldr	r0, [pc, #156]	; (800714c <_svfiprintf_r+0x1e4>)
 80070b0:	1c7e      	adds	r6, r7, #1
 80070b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070b6:	f7ff fa37 	bl	8006528 <memchr>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d038      	beq.n	8007130 <_svfiprintf_r+0x1c8>
 80070be:	4b24      	ldr	r3, [pc, #144]	; (8007150 <_svfiprintf_r+0x1e8>)
 80070c0:	bb13      	cbnz	r3, 8007108 <_svfiprintf_r+0x1a0>
 80070c2:	9b03      	ldr	r3, [sp, #12]
 80070c4:	3307      	adds	r3, #7
 80070c6:	f023 0307 	bic.w	r3, r3, #7
 80070ca:	3308      	adds	r3, #8
 80070cc:	9303      	str	r3, [sp, #12]
 80070ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d0:	444b      	add	r3, r9
 80070d2:	9309      	str	r3, [sp, #36]	; 0x24
 80070d4:	e76d      	b.n	8006fb2 <_svfiprintf_r+0x4a>
 80070d6:	fb05 3202 	mla	r2, r5, r2, r3
 80070da:	2001      	movs	r0, #1
 80070dc:	460f      	mov	r7, r1
 80070de:	e7a6      	b.n	800702e <_svfiprintf_r+0xc6>
 80070e0:	2300      	movs	r3, #0
 80070e2:	250a      	movs	r5, #10
 80070e4:	4619      	mov	r1, r3
 80070e6:	3701      	adds	r7, #1
 80070e8:	9305      	str	r3, [sp, #20]
 80070ea:	4638      	mov	r0, r7
 80070ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070f0:	3a30      	subs	r2, #48	; 0x30
 80070f2:	2a09      	cmp	r2, #9
 80070f4:	d903      	bls.n	80070fe <_svfiprintf_r+0x196>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0c8      	beq.n	800708c <_svfiprintf_r+0x124>
 80070fa:	9105      	str	r1, [sp, #20]
 80070fc:	e7c6      	b.n	800708c <_svfiprintf_r+0x124>
 80070fe:	fb05 2101 	mla	r1, r5, r1, r2
 8007102:	2301      	movs	r3, #1
 8007104:	4607      	mov	r7, r0
 8007106:	e7f0      	b.n	80070ea <_svfiprintf_r+0x182>
 8007108:	ab03      	add	r3, sp, #12
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4622      	mov	r2, r4
 800710e:	4b11      	ldr	r3, [pc, #68]	; (8007154 <_svfiprintf_r+0x1ec>)
 8007110:	a904      	add	r1, sp, #16
 8007112:	4640      	mov	r0, r8
 8007114:	f7fc f8d4 	bl	80032c0 <_printf_float>
 8007118:	f1b0 3fff 	cmp.w	r0, #4294967295
 800711c:	4681      	mov	r9, r0
 800711e:	d1d6      	bne.n	80070ce <_svfiprintf_r+0x166>
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	065b      	lsls	r3, r3, #25
 8007124:	f53f af35 	bmi.w	8006f92 <_svfiprintf_r+0x2a>
 8007128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800712a:	b01d      	add	sp, #116	; 0x74
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	ab03      	add	r3, sp, #12
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	4622      	mov	r2, r4
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <_svfiprintf_r+0x1ec>)
 8007138:	a904      	add	r1, sp, #16
 800713a:	4640      	mov	r0, r8
 800713c:	f7fc fb6c 	bl	8003818 <_printf_i>
 8007140:	e7ea      	b.n	8007118 <_svfiprintf_r+0x1b0>
 8007142:	bf00      	nop
 8007144:	080078d4 	.word	0x080078d4
 8007148:	080078da 	.word	0x080078da
 800714c:	080078de 	.word	0x080078de
 8007150:	080032c1 	.word	0x080032c1
 8007154:	08006eb5 	.word	0x08006eb5

08007158 <__sfputc_r>:
 8007158:	6893      	ldr	r3, [r2, #8]
 800715a:	b410      	push	{r4}
 800715c:	3b01      	subs	r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	6093      	str	r3, [r2, #8]
 8007162:	da07      	bge.n	8007174 <__sfputc_r+0x1c>
 8007164:	6994      	ldr	r4, [r2, #24]
 8007166:	42a3      	cmp	r3, r4
 8007168:	db01      	blt.n	800716e <__sfputc_r+0x16>
 800716a:	290a      	cmp	r1, #10
 800716c:	d102      	bne.n	8007174 <__sfputc_r+0x1c>
 800716e:	bc10      	pop	{r4}
 8007170:	f7fd bda4 	b.w	8004cbc <__swbuf_r>
 8007174:	6813      	ldr	r3, [r2, #0]
 8007176:	1c58      	adds	r0, r3, #1
 8007178:	6010      	str	r0, [r2, #0]
 800717a:	7019      	strb	r1, [r3, #0]
 800717c:	4608      	mov	r0, r1
 800717e:	bc10      	pop	{r4}
 8007180:	4770      	bx	lr

08007182 <__sfputs_r>:
 8007182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007184:	4606      	mov	r6, r0
 8007186:	460f      	mov	r7, r1
 8007188:	4614      	mov	r4, r2
 800718a:	18d5      	adds	r5, r2, r3
 800718c:	42ac      	cmp	r4, r5
 800718e:	d101      	bne.n	8007194 <__sfputs_r+0x12>
 8007190:	2000      	movs	r0, #0
 8007192:	e007      	b.n	80071a4 <__sfputs_r+0x22>
 8007194:	463a      	mov	r2, r7
 8007196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719a:	4630      	mov	r0, r6
 800719c:	f7ff ffdc 	bl	8007158 <__sfputc_r>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d1f3      	bne.n	800718c <__sfputs_r+0xa>
 80071a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071a8 <_vfiprintf_r>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	b09d      	sub	sp, #116	; 0x74
 80071b0:	4617      	mov	r7, r2
 80071b2:	461d      	mov	r5, r3
 80071b4:	4606      	mov	r6, r0
 80071b6:	b118      	cbz	r0, 80071c0 <_vfiprintf_r+0x18>
 80071b8:	6983      	ldr	r3, [r0, #24]
 80071ba:	b90b      	cbnz	r3, 80071c0 <_vfiprintf_r+0x18>
 80071bc:	f7fe fd70 	bl	8005ca0 <__sinit>
 80071c0:	4b7c      	ldr	r3, [pc, #496]	; (80073b4 <_vfiprintf_r+0x20c>)
 80071c2:	429c      	cmp	r4, r3
 80071c4:	d158      	bne.n	8007278 <_vfiprintf_r+0xd0>
 80071c6:	6874      	ldr	r4, [r6, #4]
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	0718      	lsls	r0, r3, #28
 80071cc:	d55e      	bpl.n	800728c <_vfiprintf_r+0xe4>
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d05b      	beq.n	800728c <_vfiprintf_r+0xe4>
 80071d4:	2300      	movs	r3, #0
 80071d6:	9309      	str	r3, [sp, #36]	; 0x24
 80071d8:	2320      	movs	r3, #32
 80071da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071de:	2330      	movs	r3, #48	; 0x30
 80071e0:	f04f 0b01 	mov.w	fp, #1
 80071e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071e8:	9503      	str	r5, [sp, #12]
 80071ea:	46b8      	mov	r8, r7
 80071ec:	4645      	mov	r5, r8
 80071ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80071f2:	b10b      	cbz	r3, 80071f8 <_vfiprintf_r+0x50>
 80071f4:	2b25      	cmp	r3, #37	; 0x25
 80071f6:	d154      	bne.n	80072a2 <_vfiprintf_r+0xfa>
 80071f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80071fc:	d00b      	beq.n	8007216 <_vfiprintf_r+0x6e>
 80071fe:	4653      	mov	r3, sl
 8007200:	463a      	mov	r2, r7
 8007202:	4621      	mov	r1, r4
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ffbc 	bl	8007182 <__sfputs_r>
 800720a:	3001      	adds	r0, #1
 800720c:	f000 80c2 	beq.w	8007394 <_vfiprintf_r+0x1ec>
 8007210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007212:	4453      	add	r3, sl
 8007214:	9309      	str	r3, [sp, #36]	; 0x24
 8007216:	f898 3000 	ldrb.w	r3, [r8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 80ba 	beq.w	8007394 <_vfiprintf_r+0x1ec>
 8007220:	2300      	movs	r3, #0
 8007222:	f04f 32ff 	mov.w	r2, #4294967295
 8007226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	9307      	str	r3, [sp, #28]
 800722e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007232:	931a      	str	r3, [sp, #104]	; 0x68
 8007234:	46a8      	mov	r8, r5
 8007236:	2205      	movs	r2, #5
 8007238:	f818 1b01 	ldrb.w	r1, [r8], #1
 800723c:	485e      	ldr	r0, [pc, #376]	; (80073b8 <_vfiprintf_r+0x210>)
 800723e:	f7ff f973 	bl	8006528 <memchr>
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	bb78      	cbnz	r0, 80072a6 <_vfiprintf_r+0xfe>
 8007246:	06d9      	lsls	r1, r3, #27
 8007248:	bf44      	itt	mi
 800724a:	2220      	movmi	r2, #32
 800724c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007250:	071a      	lsls	r2, r3, #28
 8007252:	bf44      	itt	mi
 8007254:	222b      	movmi	r2, #43	; 0x2b
 8007256:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800725a:	782a      	ldrb	r2, [r5, #0]
 800725c:	2a2a      	cmp	r2, #42	; 0x2a
 800725e:	d02a      	beq.n	80072b6 <_vfiprintf_r+0x10e>
 8007260:	46a8      	mov	r8, r5
 8007262:	2000      	movs	r0, #0
 8007264:	250a      	movs	r5, #10
 8007266:	9a07      	ldr	r2, [sp, #28]
 8007268:	4641      	mov	r1, r8
 800726a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800726e:	3b30      	subs	r3, #48	; 0x30
 8007270:	2b09      	cmp	r3, #9
 8007272:	d969      	bls.n	8007348 <_vfiprintf_r+0x1a0>
 8007274:	b360      	cbz	r0, 80072d0 <_vfiprintf_r+0x128>
 8007276:	e024      	b.n	80072c2 <_vfiprintf_r+0x11a>
 8007278:	4b50      	ldr	r3, [pc, #320]	; (80073bc <_vfiprintf_r+0x214>)
 800727a:	429c      	cmp	r4, r3
 800727c:	d101      	bne.n	8007282 <_vfiprintf_r+0xda>
 800727e:	68b4      	ldr	r4, [r6, #8]
 8007280:	e7a2      	b.n	80071c8 <_vfiprintf_r+0x20>
 8007282:	4b4f      	ldr	r3, [pc, #316]	; (80073c0 <_vfiprintf_r+0x218>)
 8007284:	429c      	cmp	r4, r3
 8007286:	bf08      	it	eq
 8007288:	68f4      	ldreq	r4, [r6, #12]
 800728a:	e79d      	b.n	80071c8 <_vfiprintf_r+0x20>
 800728c:	4621      	mov	r1, r4
 800728e:	4630      	mov	r0, r6
 8007290:	f7fd fd66 	bl	8004d60 <__swsetup_r>
 8007294:	2800      	cmp	r0, #0
 8007296:	d09d      	beq.n	80071d4 <_vfiprintf_r+0x2c>
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	b01d      	add	sp, #116	; 0x74
 800729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a2:	46a8      	mov	r8, r5
 80072a4:	e7a2      	b.n	80071ec <_vfiprintf_r+0x44>
 80072a6:	4a44      	ldr	r2, [pc, #272]	; (80073b8 <_vfiprintf_r+0x210>)
 80072a8:	4645      	mov	r5, r8
 80072aa:	1a80      	subs	r0, r0, r2
 80072ac:	fa0b f000 	lsl.w	r0, fp, r0
 80072b0:	4318      	orrs	r0, r3
 80072b2:	9004      	str	r0, [sp, #16]
 80072b4:	e7be      	b.n	8007234 <_vfiprintf_r+0x8c>
 80072b6:	9a03      	ldr	r2, [sp, #12]
 80072b8:	1d11      	adds	r1, r2, #4
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	9103      	str	r1, [sp, #12]
 80072be:	2a00      	cmp	r2, #0
 80072c0:	db01      	blt.n	80072c6 <_vfiprintf_r+0x11e>
 80072c2:	9207      	str	r2, [sp, #28]
 80072c4:	e004      	b.n	80072d0 <_vfiprintf_r+0x128>
 80072c6:	4252      	negs	r2, r2
 80072c8:	f043 0302 	orr.w	r3, r3, #2
 80072cc:	9207      	str	r2, [sp, #28]
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	f898 3000 	ldrb.w	r3, [r8]
 80072d4:	2b2e      	cmp	r3, #46	; 0x2e
 80072d6:	d10e      	bne.n	80072f6 <_vfiprintf_r+0x14e>
 80072d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80072dc:	2b2a      	cmp	r3, #42	; 0x2a
 80072de:	d138      	bne.n	8007352 <_vfiprintf_r+0x1aa>
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	f108 0802 	add.w	r8, r8, #2
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9203      	str	r2, [sp, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bfb8      	it	lt
 80072f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80072f4:	9305      	str	r3, [sp, #20]
 80072f6:	4d33      	ldr	r5, [pc, #204]	; (80073c4 <_vfiprintf_r+0x21c>)
 80072f8:	2203      	movs	r2, #3
 80072fa:	f898 1000 	ldrb.w	r1, [r8]
 80072fe:	4628      	mov	r0, r5
 8007300:	f7ff f912 	bl	8006528 <memchr>
 8007304:	b140      	cbz	r0, 8007318 <_vfiprintf_r+0x170>
 8007306:	2340      	movs	r3, #64	; 0x40
 8007308:	1b40      	subs	r0, r0, r5
 800730a:	fa03 f000 	lsl.w	r0, r3, r0
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	f108 0801 	add.w	r8, r8, #1
 8007314:	4303      	orrs	r3, r0
 8007316:	9304      	str	r3, [sp, #16]
 8007318:	f898 1000 	ldrb.w	r1, [r8]
 800731c:	2206      	movs	r2, #6
 800731e:	482a      	ldr	r0, [pc, #168]	; (80073c8 <_vfiprintf_r+0x220>)
 8007320:	f108 0701 	add.w	r7, r8, #1
 8007324:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007328:	f7ff f8fe 	bl	8006528 <memchr>
 800732c:	2800      	cmp	r0, #0
 800732e:	d037      	beq.n	80073a0 <_vfiprintf_r+0x1f8>
 8007330:	4b26      	ldr	r3, [pc, #152]	; (80073cc <_vfiprintf_r+0x224>)
 8007332:	bb1b      	cbnz	r3, 800737c <_vfiprintf_r+0x1d4>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	3307      	adds	r3, #7
 8007338:	f023 0307 	bic.w	r3, r3, #7
 800733c:	3308      	adds	r3, #8
 800733e:	9303      	str	r3, [sp, #12]
 8007340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007342:	444b      	add	r3, r9
 8007344:	9309      	str	r3, [sp, #36]	; 0x24
 8007346:	e750      	b.n	80071ea <_vfiprintf_r+0x42>
 8007348:	fb05 3202 	mla	r2, r5, r2, r3
 800734c:	2001      	movs	r0, #1
 800734e:	4688      	mov	r8, r1
 8007350:	e78a      	b.n	8007268 <_vfiprintf_r+0xc0>
 8007352:	2300      	movs	r3, #0
 8007354:	250a      	movs	r5, #10
 8007356:	4619      	mov	r1, r3
 8007358:	f108 0801 	add.w	r8, r8, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	4640      	mov	r0, r8
 8007360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007364:	3a30      	subs	r2, #48	; 0x30
 8007366:	2a09      	cmp	r2, #9
 8007368:	d903      	bls.n	8007372 <_vfiprintf_r+0x1ca>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0c3      	beq.n	80072f6 <_vfiprintf_r+0x14e>
 800736e:	9105      	str	r1, [sp, #20]
 8007370:	e7c1      	b.n	80072f6 <_vfiprintf_r+0x14e>
 8007372:	fb05 2101 	mla	r1, r5, r1, r2
 8007376:	2301      	movs	r3, #1
 8007378:	4680      	mov	r8, r0
 800737a:	e7f0      	b.n	800735e <_vfiprintf_r+0x1b6>
 800737c:	ab03      	add	r3, sp, #12
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	4622      	mov	r2, r4
 8007382:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <_vfiprintf_r+0x228>)
 8007384:	a904      	add	r1, sp, #16
 8007386:	4630      	mov	r0, r6
 8007388:	f7fb ff9a 	bl	80032c0 <_printf_float>
 800738c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007390:	4681      	mov	r9, r0
 8007392:	d1d5      	bne.n	8007340 <_vfiprintf_r+0x198>
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	065b      	lsls	r3, r3, #25
 8007398:	f53f af7e 	bmi.w	8007298 <_vfiprintf_r+0xf0>
 800739c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800739e:	e77d      	b.n	800729c <_vfiprintf_r+0xf4>
 80073a0:	ab03      	add	r3, sp, #12
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	4622      	mov	r2, r4
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <_vfiprintf_r+0x228>)
 80073a8:	a904      	add	r1, sp, #16
 80073aa:	4630      	mov	r0, r6
 80073ac:	f7fc fa34 	bl	8003818 <_printf_i>
 80073b0:	e7ec      	b.n	800738c <_vfiprintf_r+0x1e4>
 80073b2:	bf00      	nop
 80073b4:	08007788 	.word	0x08007788
 80073b8:	080078d4 	.word	0x080078d4
 80073bc:	080077a8 	.word	0x080077a8
 80073c0:	08007768 	.word	0x08007768
 80073c4:	080078da 	.word	0x080078da
 80073c8:	080078de 	.word	0x080078de
 80073cc:	080032c1 	.word	0x080032c1
 80073d0:	08007183 	.word	0x08007183

080073d4 <_sbrk_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	2300      	movs	r3, #0
 80073d8:	4c05      	ldr	r4, [pc, #20]	; (80073f0 <_sbrk_r+0x1c>)
 80073da:	4605      	mov	r5, r0
 80073dc:	4608      	mov	r0, r1
 80073de:	6023      	str	r3, [r4, #0]
 80073e0:	f7f9 fff4 	bl	80013cc <_sbrk>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_sbrk_r+0x1a>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_sbrk_r+0x1a>
 80073ec:	602b      	str	r3, [r5, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	2000036c 	.word	0x2000036c

080073f4 <__sread>:
 80073f4:	b510      	push	{r4, lr}
 80073f6:	460c      	mov	r4, r1
 80073f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fc:	f000 f8f4 	bl	80075e8 <_read_r>
 8007400:	2800      	cmp	r0, #0
 8007402:	bfab      	itete	ge
 8007404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007406:	89a3      	ldrhlt	r3, [r4, #12]
 8007408:	181b      	addge	r3, r3, r0
 800740a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800740e:	bfac      	ite	ge
 8007410:	6563      	strge	r3, [r4, #84]	; 0x54
 8007412:	81a3      	strhlt	r3, [r4, #12]
 8007414:	bd10      	pop	{r4, pc}

08007416 <__swrite>:
 8007416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741a:	461f      	mov	r7, r3
 800741c:	898b      	ldrh	r3, [r1, #12]
 800741e:	4605      	mov	r5, r0
 8007420:	05db      	lsls	r3, r3, #23
 8007422:	460c      	mov	r4, r1
 8007424:	4616      	mov	r6, r2
 8007426:	d505      	bpl.n	8007434 <__swrite+0x1e>
 8007428:	2302      	movs	r3, #2
 800742a:	2200      	movs	r2, #0
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	f000 f886 	bl	8007540 <_lseek_r>
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	4632      	mov	r2, r6
 8007438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007442:	463b      	mov	r3, r7
 8007444:	4628      	mov	r0, r5
 8007446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	f000 b835 	b.w	80074b8 <_write_r>

0800744e <__sseek>:
 800744e:	b510      	push	{r4, lr}
 8007450:	460c      	mov	r4, r1
 8007452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007456:	f000 f873 	bl	8007540 <_lseek_r>
 800745a:	1c43      	adds	r3, r0, #1
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	bf15      	itete	ne
 8007460:	6560      	strne	r0, [r4, #84]	; 0x54
 8007462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800746a:	81a3      	strheq	r3, [r4, #12]
 800746c:	bf18      	it	ne
 800746e:	81a3      	strhne	r3, [r4, #12]
 8007470:	bd10      	pop	{r4, pc}

08007472 <__sclose>:
 8007472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007476:	f000 b831 	b.w	80074dc <_close_r>

0800747a <strncmp>:
 800747a:	b510      	push	{r4, lr}
 800747c:	b16a      	cbz	r2, 800749a <strncmp+0x20>
 800747e:	3901      	subs	r1, #1
 8007480:	1884      	adds	r4, r0, r2
 8007482:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007486:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800748a:	4293      	cmp	r3, r2
 800748c:	d103      	bne.n	8007496 <strncmp+0x1c>
 800748e:	42a0      	cmp	r0, r4
 8007490:	d001      	beq.n	8007496 <strncmp+0x1c>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f5      	bne.n	8007482 <strncmp+0x8>
 8007496:	1a98      	subs	r0, r3, r2
 8007498:	bd10      	pop	{r4, pc}
 800749a:	4610      	mov	r0, r2
 800749c:	e7fc      	b.n	8007498 <strncmp+0x1e>

0800749e <__ascii_wctomb>:
 800749e:	b149      	cbz	r1, 80074b4 <__ascii_wctomb+0x16>
 80074a0:	2aff      	cmp	r2, #255	; 0xff
 80074a2:	bf8b      	itete	hi
 80074a4:	238a      	movhi	r3, #138	; 0x8a
 80074a6:	700a      	strbls	r2, [r1, #0]
 80074a8:	6003      	strhi	r3, [r0, #0]
 80074aa:	2001      	movls	r0, #1
 80074ac:	bf88      	it	hi
 80074ae:	f04f 30ff 	movhi.w	r0, #4294967295
 80074b2:	4770      	bx	lr
 80074b4:	4608      	mov	r0, r1
 80074b6:	4770      	bx	lr

080074b8 <_write_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4605      	mov	r5, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	2200      	movs	r2, #0
 80074c2:	4c05      	ldr	r4, [pc, #20]	; (80074d8 <_write_r+0x20>)
 80074c4:	6022      	str	r2, [r4, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f7f9 fc82 	bl	8000dd0 <_write>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_write_r+0x1e>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_write_r+0x1e>
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	2000036c 	.word	0x2000036c

080074dc <_close_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	2300      	movs	r3, #0
 80074e0:	4c05      	ldr	r4, [pc, #20]	; (80074f8 <_close_r+0x1c>)
 80074e2:	4605      	mov	r5, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	6023      	str	r3, [r4, #0]
 80074e8:	f7f9 ff3f 	bl	800136a <_close>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d102      	bne.n	80074f6 <_close_r+0x1a>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	b103      	cbz	r3, 80074f6 <_close_r+0x1a>
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	2000036c 	.word	0x2000036c

080074fc <_fstat_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	2300      	movs	r3, #0
 8007500:	4c06      	ldr	r4, [pc, #24]	; (800751c <_fstat_r+0x20>)
 8007502:	4605      	mov	r5, r0
 8007504:	4608      	mov	r0, r1
 8007506:	4611      	mov	r1, r2
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	f7f9 ff39 	bl	8001380 <_fstat>
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	d102      	bne.n	8007518 <_fstat_r+0x1c>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	b103      	cbz	r3, 8007518 <_fstat_r+0x1c>
 8007516:	602b      	str	r3, [r5, #0]
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	2000036c 	.word	0x2000036c

08007520 <_isatty_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	2300      	movs	r3, #0
 8007524:	4c05      	ldr	r4, [pc, #20]	; (800753c <_isatty_r+0x1c>)
 8007526:	4605      	mov	r5, r0
 8007528:	4608      	mov	r0, r1
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	f7f9 ff37 	bl	800139e <_isatty>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_isatty_r+0x1a>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	b103      	cbz	r3, 800753a <_isatty_r+0x1a>
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	2000036c 	.word	0x2000036c

08007540 <_lseek_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4605      	mov	r5, r0
 8007544:	4608      	mov	r0, r1
 8007546:	4611      	mov	r1, r2
 8007548:	2200      	movs	r2, #0
 800754a:	4c05      	ldr	r4, [pc, #20]	; (8007560 <_lseek_r+0x20>)
 800754c:	6022      	str	r2, [r4, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	f7f9 ff2f 	bl	80013b2 <_lseek>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_lseek_r+0x1e>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	b103      	cbz	r3, 800755e <_lseek_r+0x1e>
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	2000036c 	.word	0x2000036c

08007564 <memmove>:
 8007564:	4288      	cmp	r0, r1
 8007566:	b510      	push	{r4, lr}
 8007568:	eb01 0302 	add.w	r3, r1, r2
 800756c:	d807      	bhi.n	800757e <memmove+0x1a>
 800756e:	1e42      	subs	r2, r0, #1
 8007570:	4299      	cmp	r1, r3
 8007572:	d00a      	beq.n	800758a <memmove+0x26>
 8007574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007578:	f802 4f01 	strb.w	r4, [r2, #1]!
 800757c:	e7f8      	b.n	8007570 <memmove+0xc>
 800757e:	4283      	cmp	r3, r0
 8007580:	d9f5      	bls.n	800756e <memmove+0xa>
 8007582:	1881      	adds	r1, r0, r2
 8007584:	1ad2      	subs	r2, r2, r3
 8007586:	42d3      	cmn	r3, r2
 8007588:	d100      	bne.n	800758c <memmove+0x28>
 800758a:	bd10      	pop	{r4, pc}
 800758c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007590:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007594:	e7f7      	b.n	8007586 <memmove+0x22>

08007596 <__malloc_lock>:
 8007596:	4770      	bx	lr

08007598 <__malloc_unlock>:
 8007598:	4770      	bx	lr

0800759a <_realloc_r>:
 800759a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759c:	4607      	mov	r7, r0
 800759e:	4614      	mov	r4, r2
 80075a0:	460e      	mov	r6, r1
 80075a2:	b921      	cbnz	r1, 80075ae <_realloc_r+0x14>
 80075a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075a8:	4611      	mov	r1, r2
 80075aa:	f7ff bc29 	b.w	8006e00 <_malloc_r>
 80075ae:	b922      	cbnz	r2, 80075ba <_realloc_r+0x20>
 80075b0:	f7ff fbda 	bl	8006d68 <_free_r>
 80075b4:	4625      	mov	r5, r4
 80075b6:	4628      	mov	r0, r5
 80075b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ba:	f000 f827 	bl	800760c <_malloc_usable_size_r>
 80075be:	42a0      	cmp	r0, r4
 80075c0:	d20f      	bcs.n	80075e2 <_realloc_r+0x48>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4638      	mov	r0, r7
 80075c6:	f7ff fc1b 	bl	8006e00 <_malloc_r>
 80075ca:	4605      	mov	r5, r0
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d0f2      	beq.n	80075b6 <_realloc_r+0x1c>
 80075d0:	4631      	mov	r1, r6
 80075d2:	4622      	mov	r2, r4
 80075d4:	f7fe ffb6 	bl	8006544 <memcpy>
 80075d8:	4631      	mov	r1, r6
 80075da:	4638      	mov	r0, r7
 80075dc:	f7ff fbc4 	bl	8006d68 <_free_r>
 80075e0:	e7e9      	b.n	80075b6 <_realloc_r+0x1c>
 80075e2:	4635      	mov	r5, r6
 80075e4:	e7e7      	b.n	80075b6 <_realloc_r+0x1c>
	...

080075e8 <_read_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4605      	mov	r5, r0
 80075ec:	4608      	mov	r0, r1
 80075ee:	4611      	mov	r1, r2
 80075f0:	2200      	movs	r2, #0
 80075f2:	4c05      	ldr	r4, [pc, #20]	; (8007608 <_read_r+0x20>)
 80075f4:	6022      	str	r2, [r4, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7f9 fe9a 	bl	8001330 <_read>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_read_r+0x1e>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	b103      	cbz	r3, 8007606 <_read_r+0x1e>
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	2000036c 	.word	0x2000036c

0800760c <_malloc_usable_size_r>:
 800760c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007610:	1f18      	subs	r0, r3, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	bfbc      	itt	lt
 8007616:	580b      	ldrlt	r3, [r1, r0]
 8007618:	18c0      	addlt	r0, r0, r3
 800761a:	4770      	bx	lr

0800761c <_init>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr

08007628 <_fini>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	bf00      	nop
 800762c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762e:	bc08      	pop	{r3}
 8007630:	469e      	mov	lr, r3
 8007632:	4770      	bx	lr
