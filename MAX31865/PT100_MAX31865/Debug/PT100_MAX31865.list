
PT100_MAX31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800b060  0800b060  0001b060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b198  0800b198  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b198  0800b198  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b198  0800b198  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b198  0800b198  0001b198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b19c  0800b19c  0001b19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012cc  200001e8  0800b388  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  0800b388  000214b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199d0  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a5f  00000000  00000000  00039be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0003d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  0003e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad60  00000000  00000000  0003f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015308  00000000  00000000  0005a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089faf  00000000  00000000  0006f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f94f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  000f954c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b044 	.word	0x0800b044

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b044 	.word	0x0800b044

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__gesf2>:
 8000c40:	f04f 3cff 	mov.w	ip, #4294967295
 8000c44:	e006      	b.n	8000c54 <__cmpsf2+0x4>
 8000c46:	bf00      	nop

08000c48 <__lesf2>:
 8000c48:	f04f 0c01 	mov.w	ip, #1
 8000c4c:	e002      	b.n	8000c54 <__cmpsf2+0x4>
 8000c4e:	bf00      	nop

08000c50 <__cmpsf2>:
 8000c50:	f04f 0c01 	mov.w	ip, #1
 8000c54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d011      	beq.n	8000c90 <__cmpsf2+0x40>
 8000c6c:	b001      	add	sp, #4
 8000c6e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c72:	bf18      	it	ne
 8000c74:	ea90 0f01 	teqne	r0, r1
 8000c78:	bf58      	it	pl
 8000c7a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c7e:	bf88      	it	hi
 8000c80:	17c8      	asrhi	r0, r1, #31
 8000c82:	bf38      	it	cc
 8000c84:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c88:	bf18      	it	ne
 8000c8a:	f040 0001 	orrne.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c94:	d102      	bne.n	8000c9c <__cmpsf2+0x4c>
 8000c96:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c9a:	d105      	bne.n	8000ca8 <__cmpsf2+0x58>
 8000c9c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ca0:	d1e4      	bne.n	8000c6c <__cmpsf2+0x1c>
 8000ca2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ca6:	d0e1      	beq.n	8000c6c <__cmpsf2+0x1c>
 8000ca8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_cfrcmple>:
 8000cb0:	4684      	mov	ip, r0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	4661      	mov	r1, ip
 8000cb6:	e7ff      	b.n	8000cb8 <__aeabi_cfcmpeq>

08000cb8 <__aeabi_cfcmpeq>:
 8000cb8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cba:	f7ff ffc9 	bl	8000c50 <__cmpsf2>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	bf48      	it	mi
 8000cc2:	f110 0f00 	cmnmi.w	r0, #0
 8000cc6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cc8 <__aeabi_fcmpeq>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff fff4 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2001      	moveq	r0, #1
 8000cd4:	2000      	movne	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmplt>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffea 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000ce4:	bf34      	ite	cc
 8000ce6:	2001      	movcc	r0, #1
 8000ce8:	2000      	movcs	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmple>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffe0 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000cf8:	bf94      	ite	ls
 8000cfa:	2001      	movls	r0, #1
 8000cfc:	2000      	movhi	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmpge>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffd2 	bl	8000cb0 <__aeabi_cfrcmple>
 8000d0c:	bf94      	ite	ls
 8000d0e:	2001      	movls	r0, #1
 8000d10:	2000      	movhi	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_fcmpgt>:
 8000d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d1c:	f7ff ffc8 	bl	8000cb0 <__aeabi_cfrcmple>
 8000d20:	bf34      	ite	cc
 8000d22:	2001      	movcc	r0, #1
 8000d24:	2000      	movcs	r0, #0
 8000d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2a:	bf00      	nop

08000d2c <__aeabi_f2uiz>:
 8000d2c:	0042      	lsls	r2, r0, #1
 8000d2e:	d20e      	bcs.n	8000d4e <__aeabi_f2uiz+0x22>
 8000d30:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d34:	d30b      	bcc.n	8000d4e <__aeabi_f2uiz+0x22>
 8000d36:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d3e:	d409      	bmi.n	8000d54 <__aeabi_f2uiz+0x28>
 8000d40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d48:	fa23 f002 	lsr.w	r0, r3, r2
 8000d4c:	4770      	bx	lr
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	4770      	bx	lr
 8000d54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d58:	d101      	bne.n	8000d5e <__aeabi_f2uiz+0x32>
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	d102      	bne.n	8000d64 <__aeabi_f2uiz+0x38>
 8000d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d62:	4770      	bx	lr
 8000d64:	f04f 0000 	mov.w	r0, #0
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <MAX31865_Init>:
//P.S. Максимальная скорость spi 5 МГц.
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/

/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_Init(uint8_t num_wires) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error = 0;
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <MAX31865_Init+0x9c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d002      	beq.n	8000d90 <MAX31865_Init+0x24>
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d102      	bne.n	8000d96 <MAX31865_Init+0x2a>
		MAX31865_Configuration_register_write[1] = 0xC3; //0xC3
 8000d90:	23c3      	movs	r3, #195	; 0xc3
 8000d92:	737b      	strb	r3, [r7, #13]
 8000d94:	e004      	b.n	8000da0 <MAX31865_Init+0x34>
	} else if (num_wires == 3) {
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d101      	bne.n	8000da0 <MAX31865_Init+0x34>
		MAX31865_Configuration_register_write[1] = 0xD3; //0xD3
 8000d9c:	23d3      	movs	r3, #211	; 0xd3
 8000d9e:	737b      	strb	r3, [r7, #13]
	}
	cs_set();
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MAX31865_Init+0xa0>)
 8000da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000da6:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 8000da8:	f107 010c 	add.w	r1, r7, #12
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	2202      	movs	r2, #2
 8000db0:	4817      	ldr	r0, [pc, #92]	; (8000e10 <MAX31865_Init+0xa4>)
 8000db2:	f003 ff77 	bl	8004ca4 <HAL_SPI_Transmit>
	cs_reset();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MAX31865_Init+0xa0>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 8000dbc:	e013      	b.n	8000de6 <MAX31865_Init+0x7a>
		MAX31865_Reinitialization_cnt++;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]

		cs_set();
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MAX31865_Init+0xa0>)
 8000dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dca:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 8000dcc:	f107 010c 	add.w	r1, r7, #12
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <MAX31865_Init+0xa4>)
 8000dd6:	f003 ff65 	bl	8004ca4 <HAL_SPI_Transmit>
		cs_reset();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MAX31865_Init+0xa0>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt == 100) {
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d00a      	beq.n	8000dfc <MAX31865_Init+0x90>
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 8000de6:	f000 f815 	bl	8000e14 <MAX31865_Configuration_info>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2bd1      	cmp	r3, #209	; 0xd1
 8000dee:	d006      	beq.n	8000dfe <MAX31865_Init+0x92>
 8000df0:	f000 f810 	bl	8000e14 <MAX31865_Configuration_info>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2bc1      	cmp	r3, #193	; 0xc1
 8000df8:	d1e1      	bne.n	8000dbe <MAX31865_Init+0x52>
			break;
		}

	}

}
 8000dfa:	e000      	b.n	8000dfe <MAX31865_Init+0x92>
			break;
 8000dfc:	bf00      	nop
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000210 	.word	0x20000210
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	200004c4 	.word	0x200004c4

08000e14 <MAX31865_Configuration_info>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71bb      	strb	r3, [r7, #6]
	cs_set();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MAX31865_Configuration_info+0x40>)
 8000e24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e28:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 8000e2a:	1df9      	adds	r1, r7, #7
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <MAX31865_Configuration_info+0x44>)
 8000e32:	f003 ff37 	bl	8004ca4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 8000e36:	1db9      	adds	r1, r7, #6
 8000e38:	2364      	movs	r3, #100	; 0x64
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MAX31865_Configuration_info+0x44>)
 8000e3e:	f004 f86d 	bl	8004f1c <HAL_SPI_Receive>
	cs_reset();
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <MAX31865_Configuration_info+0x40>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration;
 8000e48:	79bb      	ldrb	r3, [r7, #6]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800
 8000e58:	200004c4 	.word	0x200004c4
 8000e5c:	00000000 	.word	0x00000000

08000e60 <MAX31865_Get_Temperature>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
		uint8_t Fault_Status; //Статус неисправности
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01; //Адрес регистра, с которого начнем чтение данных
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7]; //буфер, куда будем складывать приходящие данные
	cs_set();
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <MAX31865_Get_Temperature+0xc8>)
 8000e6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e70:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100);
 8000e72:	1df9      	adds	r1, r7, #7
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	2201      	movs	r2, #1
 8000e78:	482c      	ldr	r0, [pc, #176]	; (8000f2c <MAX31865_Get_Temperature+0xcc>)
 8000e7a:	f003 ff13 	bl	8004ca4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100);
 8000e7e:	4639      	mov	r1, r7
 8000e80:	2364      	movs	r3, #100	; 0x64
 8000e82:	2207      	movs	r2, #7
 8000e84:	4829      	ldr	r0, [pc, #164]	; (8000f2c <MAX31865_Get_Temperature+0xcc>)
 8000e86:	f004 f849 	bl	8004f1c <HAL_SPI_Receive>
	cs_reset();
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <MAX31865_Get_Temperature+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0] << 8) | MAX31865_rx_buffer[1]) >> 1; //Данные регистров сопротивления
 8000e90:	783b      	ldrb	r3, [r7, #0]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	787a      	ldrb	r2, [r7, #1]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	105b      	asrs	r3, r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8) | MAX31865_rx_buffer[3]) >> 1; //Данные верхнего порого неисправности
 8000e9e:	78bb      	ldrb	r3, [r7, #2]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	105b      	asrs	r3, r3, #1
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8) | MAX31865_rx_buffer[5]; //Данные нижнего порога неисправности
 8000eac:	793b      	ldrb	r3, [r7, #4]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	797b      	ldrb	r3, [r7, #5]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]; //Статус неисправности
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d008      	beq.n	8000eda <MAX31865_Get_Temperature+0x7a>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error = 1;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MAX31865_Get_Temperature+0xd0>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_Init(3);
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f7ff ff4c 	bl	8000d6c <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MAX31865_Get_Temperature+0xd0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 8000eda:	893b      	ldrh	r3, [r7, #8]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fb35 	bl	800054c <__aeabi_ui2d>
 8000ee2:	a30f      	add	r3, pc, #60	; (adr r3, 8000f20 <MAX31865_Get_Temperature+0xc0>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fbaa 	bl	8000640 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MAX31865_Get_Temperature+0xd4>)
 8000efa:	f7ff fccb 	bl	8000894 <__aeabi_ddiv>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data);
	return MAX31865_Get_Temperature_math(data);
 8000f06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f0a:	f000 f815 	bl	8000f38 <MAX31865_Get_Temperature_math>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
}
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	f3af 8000 	nop.w
 8000f20:	00000000 	.word	0x00000000
 8000f24:	407ac800 	.word	0x407ac800
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	200004c4 	.word	0x200004c4
 8000f30:	20000210 	.word	0x20000210
 8000f34:	40e00000 	.word	0x40e00000

08000f38 <MAX31865_Get_Temperature_math>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <MAX31865_Get_Temperature_math+0x1d8>)
 8000f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f4c:	f7ff fdfe 	bl	8000b4c <__aeabi_dcmpge>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d03b      	beq.n	8000fce <MAX31865_Get_Temperature_math+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b6d      	ldr	r3, [pc, #436]	; (8001110 <MAX31865_Get_Temperature_math+0x1d8>)
 8000f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f60:	f7ff fc98 	bl	8000894 <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4969      	ldr	r1, [pc, #420]	; (8001114 <MAX31865_Get_Temperature_math+0x1dc>)
 8000f6e:	f7ff f9af 	bl	80002d0 <__aeabi_dsub>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	a351      	add	r3, pc, #324	; (adr r3, 80010c0 <MAX31865_Get_Temperature_math+0x188>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff fb5e 	bl	8000640 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	a34e      	add	r3, pc, #312	; (adr r3, 80010c8 <MAX31865_Get_Temperature_math+0x190>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff f99f 	bl	80002d4 <__adddf3>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 8000f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa2:	f009 f93f 	bl	800a224 <sqrt>
 8000fa6:	a34a      	add	r3, pc, #296	; (adr r3, 80010d0 <MAX31865_Get_Temperature_math+0x198>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff f990 	bl	80002d0 <__aeabi_dsub>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	a347      	add	r3, pc, #284	; (adr r3, 80010d8 <MAX31865_Get_Temperature_math+0x1a0>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fc69 	bl	8000894 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4954      	ldr	r1, [pc, #336]	; (8001118 <MAX31865_Get_Temperature_math+0x1e0>)
 8000fc8:	e9c1 2300 	strd	r2, r3, [r1]
 8000fcc:	e06d      	b.n	80010aa <MAX31865_Get_Temperature_math+0x172>
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b52      	ldr	r3, [pc, #328]	; (800111c <MAX31865_Get_Temperature_math+0x1e4>)
 8000fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fd8:	f009 f878 	bl	800a0cc <pow>
 8000fdc:	a340      	add	r3, pc, #256	; (adr r3, 80010e0 <MAX31865_Get_Temperature_math+0x1a8>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb2d 	bl	8000640 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4614      	mov	r4, r2
 8000fec:	461d      	mov	r5, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <MAX31865_Get_Temperature_math+0x1e8>)
 8000ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ff8:	f009 f868 	bl	800a0cc <pow>
 8000ffc:	a33a      	add	r3, pc, #232	; (adr r3, 80010e8 <MAX31865_Get_Temperature_math+0x1b0>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff fb1d 	bl	8000640 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff f95f 	bl	80002d0 <__aeabi_dsub>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4614      	mov	r4, r2
 8001018:	461d      	mov	r5, r3
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b41      	ldr	r3, [pc, #260]	; (8001124 <MAX31865_Get_Temperature_math+0x1ec>)
 8001020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001024:	f009 f852 	bl	800a0cc <pow>
 8001028:	a331      	add	r3, pc, #196	; (adr r3, 80010f0 <MAX31865_Get_Temperature_math+0x1b8>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fb07 	bl	8000640 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4620      	mov	r0, r4
 8001038:	4629      	mov	r1, r5
 800103a:	f7ff f949 	bl	80002d0 <__aeabi_dsub>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4614      	mov	r4, r2
 8001044:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001052:	f009 f83b 	bl	800a0cc <pow>
 8001056:	a328      	add	r3, pc, #160	; (adr r3, 80010f8 <MAX31865_Get_Temperature_math+0x1c0>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff faf0 	bl	8000640 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff f934 	bl	80002d4 <__adddf3>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4614      	mov	r4, r2
 8001072:	461d      	mov	r5, r3
 8001074:	a322      	add	r3, pc, #136	; (adr r3, 8001100 <MAX31865_Get_Temperature_math+0x1c8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800107e:	f7ff fadf 	bl	8000640 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff f923 	bl	80002d4 <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a31c      	add	r3, pc, #112	; (adr r3, 8001108 <MAX31865_Get_Temperature_math+0x1d0>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f918 	bl	80002d0 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 80010a4:	491c      	ldr	r1, [pc, #112]	; (8001118 <MAX31865_Get_Temperature_math+0x1e0>)
 80010a6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MAX31865_Get_Temperature_math+0x1e0>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	ee19ce88 	.word	0xee19ce88
 80010c4:	3ec360af 	.word	0x3ec360af
 80010c8:	dfc928d8 	.word	0xdfc928d8
 80010cc:	3ef0044c 	.word	0x3ef0044c
 80010d0:	4aed641c 	.word	0x4aed641c
 80010d4:	3f700226 	.word	0x3f700226
 80010d8:	ee19ce88 	.word	0xee19ce88
 80010dc:	beb360af 	.word	0xbeb360af
 80010e0:	e63e6cde 	.word	0xe63e6cde
 80010e4:	3df28de3 	.word	0x3df28de3
 80010e8:	5d50ae3a 	.word	0x5d50ae3a
 80010ec:	3e71c852 	.word	0x3e71c852
 80010f0:	6e664b7f 	.word	0x6e664b7f
 80010f4:	3e88c80b 	.word	0x3e88c80b
 80010f8:	998b63de 	.word	0x998b63de
 80010fc:	3f6301e1 	.word	0x3f6301e1
 8001100:	66255dbb 	.word	0x66255dbb
 8001104:	4001d6e4 	.word	0x4001d6e4
 8001108:	48b74f1a 	.word	0x48b74f1a
 800110c:	406e42e8 	.word	0x406e42e8
 8001110:	40590000 	.word	0x40590000
 8001114:	3ff00000 	.word	0x3ff00000
 8001118:	20000208 	.word	0x20000208
 800111c:	40140000 	.word	0x40140000
 8001120:	40100000 	.word	0x40100000
 8001124:	40080000 	.word	0x40080000

08001128 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <lcd1602_Send_init_Data+0x80>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e006      	b.n	8001156 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f023 0308 	bic.w	r3, r3, #8
 8001150:	b2da      	uxtb	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8001164:	230a      	movs	r3, #10
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	214e      	movs	r1, #78	; 0x4e
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <lcd1602_Send_init_Data+0x84>)
 8001170:	f001 f9c0 	bl	80024f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001174:	2005      	movs	r0, #5
 8001176:	f000 fdab 	bl	8001cd0 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f023 0304 	bic.w	r3, r3, #4
 8001182:	b2da      	uxtb	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8001188:	230a      	movs	r3, #10
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	214e      	movs	r1, #78	; 0x4e
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <lcd1602_Send_init_Data+0x84>)
 8001194:	f001 f9ae 	bl	80024f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001198:	2005      	movs	r0, #5
 800119a:	f000 fd99 	bl	8001cd0 <HAL_Delay>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000470 	.word	0x20000470

080011b0 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]

	if (backlight) {
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <lcd1602_Send_data+0x74>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e006      	b.n	80011de <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f023 0308 	bic.w	r3, r3, #8
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 80011ec:	230a      	movs	r3, #10
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2301      	movs	r3, #1
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	214e      	movs	r1, #78	; 0x4e
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <lcd1602_Send_data+0x78>)
 80011f8:	f001 f97c 	bl	80024f4 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 800120a:	230a      	movs	r3, #10
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	214e      	movs	r1, #78	; 0x4e
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <lcd1602_Send_data+0x78>)
 8001216:	f001 f96d 	bl	80024f4 <HAL_I2C_Master_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000
 8001228:	20000470 	.word	0x20000470

0800122c <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
	/*========Включить питание========*/
	uint8_t tx_buffer = 0x30;
 8001232:	2330      	movs	r3, #48	; 0x30
 8001234:	71fb      	strb	r3, [r7, #7]
	/*========Ожидать 20 мс========*/
	HAL_Delay(20);
 8001236:	2014      	movs	r0, #20
 8001238:	f000 fd4a 	bl	8001cd0 <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff72 	bl	8001128 <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f000 fd43 	bl	8001cd0 <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff6b 	bl	8001128 <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f000 fd3c 	bl	8001cd0 <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff64 	bl	8001128 <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8001260:	2001      	movs	r0, #1
 8001262:	f000 fd35 	bl	8001cd0 <HAL_Delay>
	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8001266:	2320      	movs	r3, #32
 8001268:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5b 	bl	8001128 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======Выбираем 2 страницу символов======*/
	tx_buffer = 0x20;
 8001272:	2320      	movs	r3, #32
 8001274:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff55 	bl	8001128 <lcd1602_Send_init_Data>
	tx_buffer = 0xA0;
 800127e:	23a0      	movs	r3, #160	; 0xa0
 8001280:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff4f 	bl	8001128 <lcd1602_Send_init_Data>
	/*======Выбираем 2 страницу символов======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff49 	bl	8001128 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff43 	bl	8001128 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff3d 	bl	8001128 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80012ae:	2310      	movs	r3, #16
 80012b0:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff37 	bl	8001128 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff31 	bl	8001128 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 80012c6:	2330      	movs	r3, #48	; 0x30
 80012c8:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff2b 	bl	8001128 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff25 	bl	8001128 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 80012de:	23c0      	movs	r3, #192	; 0xc0
 80012e0:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff1f 	bl	8001128 <lcd1602_Send_init_Data>

	/*========Инициализация завершена. Включить дисплей========*/
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	f023 030f 	bic.w	r3, r3, #15
 8001304:	b25b      	sxtb	r3, r3
 8001306:	f043 0309 	orr.w	r3, r3, #9
 800130a:	b25b      	sxtb	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001310:	f107 030f 	add.w	r3, r7, #15
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff4b 	bl	80011b0 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	b25b      	sxtb	r3, r3
 8001320:	f043 0309 	orr.w	r3, r3, #9
 8001324:	b25b      	sxtb	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 800132a:	f107 030f 	add.w	r3, r7, #15
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff3e 	bl	80011b0 <lcd1602_Send_data>
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	4613      	mov	r3, r2
 800134a:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d901      	bls.n	8001356 <lcd1602_SetCursor+0x1a>
		y = 3;
 8001352:	2303      	movs	r3, #3
 8001354:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b27      	cmp	r3, #39	; 0x27
 800135a:	d901      	bls.n	8001360 <lcd1602_SetCursor+0x24>
		x = 39;
 800135c:	2327      	movs	r3, #39	; 0x27
 800135e:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <lcd1602_SetCursor+0x2e>
		adr = x;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d102      	bne.n	8001376 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	3340      	adds	r3, #64	; 0x40
 8001374:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d102      	bne.n	8001382 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	3314      	adds	r3, #20
 8001380:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d102      	bne.n	800138e <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	3354      	adds	r3, #84	; 0x54
 800138c:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001396:	b25b      	sxtb	r3, r3
 8001398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800139c:	b25b      	sxtb	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 80013a2:	f107 030e 	add.w	r3, r7, #14
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff02 	bl	80011b0 <lcd1602_Send_data>

	command = (adr << 4);
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 80013b4:	f107 030e 	add.w	r3, r7, #14
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fef9 	bl	80011b0 <lcd1602_Send_data>

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <lcd1602_Decode_UTF8>:
	lcd1602_Print_text("                                        ");
}

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

void lcd1602_Decode_UTF8(uint16_t x, uint8_t y, char *tx_buffer) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	603a      	str	r2, [r7, #0]
 80013d0:	80fb      	strh	r3, [r7, #6]
 80013d2:	460b      	mov	r3, r1
 80013d4:	717b      	strb	r3, [r7, #5]
	/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер вывода на дисплей
	/// \param x - координата по х. От 0 до 19
	/// \param y - координата по y. от 0 до 3
	uint16_t symbol = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]
	lcd1602_SetCursor(x, y);
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	797a      	ldrb	r2, [r7, #5]
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffa8 	bl	800133c <lcd1602_SetCursor>
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	e05e      	b.n	80014b0 <lcd1602_Decode_UTF8+0xea>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0.
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2bbf      	cmp	r3, #191	; 0xbf
 80013fc:	d810      	bhi.n	8001420 <lcd1602_Decode_UTF8+0x5a>
			if (flag_block) {
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <lcd1602_Decode_UTF8+0x44>
				flag_block = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	75fb      	strb	r3, [r7, #23]
 8001408:	e04f      	b.n	80014aa <lcd1602_Decode_UTF8+0xe4>
			} else {
				symbol = tx_buffer[i];
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	81fb      	strh	r3, [r7, #14]
				lcd1602_Print_symbol(symbol);
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff6a 	bl	80012f2 <lcd1602_Print_symbol>
 800141e:	e044      	b.n	80014aa <lcd1602_Decode_UTF8+0xe4>
			}
		} else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	3301      	adds	r3, #1
 8001430:	6839      	ldr	r1, [r7, #0]
 8001432:	440b      	add	r3, r1
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b21b      	sxth	r3, r3
 800143c:	81fb      	strh	r3, [r7, #14]
				if (symbol < 0xD180 && symbol > 0xD081) {
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8001444:	4293      	cmp	r3, r2
 8001446:	d80c      	bhi.n	8001462 <lcd1602_Decode_UTF8+0x9c>
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	f24d 0281 	movw	r2, #53377	; 0xd081
 800144e:	4293      	cmp	r3, r2
 8001450:	d907      	bls.n	8001462 <lcd1602_Decode_UTF8+0x9c>

				lcd1602_Print_symbol((uint8_t) (symbol - 0xCFD0));//Таблица UTF-8. Кириллица. С буквы "А" до "п".
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	3330      	adds	r3, #48	; 0x30
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff49 	bl	80012f2 <lcd1602_Print_symbol>
 8001460:	e021      	b.n	80014a6 <lcd1602_Decode_UTF8+0xe0>
			} else if (symbol == 0xD081) {
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	f24d 0281 	movw	r2, #53377	; 0xd081
 8001468:	4293      	cmp	r3, r2
 800146a:	d103      	bne.n	8001474 <lcd1602_Decode_UTF8+0xae>
				lcd1602_Print_symbol(0xC5);//Таблица UTF-8. Кириллица. Буква "Ё". Отображается Е.
 800146c:	20c5      	movs	r0, #197	; 0xc5
 800146e:	f7ff ff40 	bl	80012f2 <lcd1602_Print_symbol>
 8001472:	e018      	b.n	80014a6 <lcd1602_Decode_UTF8+0xe0>
			}else if (symbol == 0xD191) {
 8001474:	89fb      	ldrh	r3, [r7, #14]
 8001476:	f24d 1291 	movw	r2, #53649	; 0xd191
 800147a:	4293      	cmp	r3, r2
 800147c:	d103      	bne.n	8001486 <lcd1602_Decode_UTF8+0xc0>
				lcd1602_Print_symbol(0xE5);//Таблица UTF-8. Кириллица. Буква "ё". Отображается е.
 800147e:	20e5      	movs	r0, #229	; 0xe5
 8001480:	f7ff ff37 	bl	80012f2 <lcd1602_Print_symbol>
 8001484:	e00f      	b.n	80014a6 <lcd1602_Decode_UTF8+0xe0>
			}else if (symbol == 0xC2B0) {
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 800148c:	4293      	cmp	r3, r2
 800148e:	d103      	bne.n	8001498 <lcd1602_Decode_UTF8+0xd2>
				lcd1602_Print_symbol(0xB0);//Таблица UTF-8. Basic Latin. Символ "°".
 8001490:	20b0      	movs	r0, #176	; 0xb0
 8001492:	f7ff ff2e 	bl	80012f2 <lcd1602_Print_symbol>
 8001496:	e006      	b.n	80014a6 <lcd1602_Decode_UTF8+0xe0>
			} else {
				lcd1602_Print_symbol((uint8_t) (symbol - 0xD090));//Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг.
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3370      	adds	r3, #112	; 0x70
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff26 	bl	80012f2 <lcd1602_Print_symbol>
			}
			flag_block = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3301      	adds	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	f7fe fe4d 	bl	8000150 <strlen>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d899      	bhi.n	80013f2 <lcd1602_Decode_UTF8+0x2c>
		}
	}
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <UART_MQTT_Send_data_float>:
/*----------Отправка float в массив-----------------*/
/// Отправка float в tx_buffer(принимающему устройству)
/// \param VARIABLE_ID - номер переменной(должен совпадать на передающем и принимающем устройстве)
/// \param data - переменная, которую следует отправить
/// \param *tx_buffer - буфер, который используется для отправки
void UART_MQTT_Send_data_float(uint8_t VARIABLE_ID, float data, uint8_t *tx_buffer) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	73fb      	strb	r3, [r7, #15]
	union {
		uint32_t res;
		float f;
	} data_conv;
	data_conv.f = data;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	613b      	str	r3, [r7, #16]
	tx_buffer[0] = 0xFF;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	22ff      	movs	r2, #255	; 0xff
 80014de:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = VARIABLE_ID;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3301      	adds	r3, #1
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = 0x08;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3302      	adds	r3, #2
 80014ec:	2208      	movs	r2, #8
 80014ee:	701a      	strb	r2, [r3, #0]
	tx_buffer[3] = data_conv.res >> 24;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	0e1a      	lsrs	r2, r3, #24
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3303      	adds	r3, #3
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
	tx_buffer[4] = data_conv.res >> 16;
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	0c1a      	lsrs	r2, r3, #16
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3304      	adds	r3, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	701a      	strb	r2, [r3, #0]
	tx_buffer[5] = data_conv.res >> 8;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	0a1a      	lsrs	r2, r3, #8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3305      	adds	r3, #5
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	701a      	strb	r2, [r3, #0]
	tx_buffer[6] = data_conv.res;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3306      	adds	r3, #6
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]
	uint16_t CRC_tx_buffer = (~(tx_buffer[1] + tx_buffer[2] + tx_buffer[3] + tx_buffer[4] + tx_buffer[5] + tx_buffer[6])) + 1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b29a      	uxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3302      	adds	r3, #2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3303      	adds	r3, #3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3304      	adds	r3, #4
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3305      	adds	r3, #5
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3306      	adds	r3, #6
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b29b      	uxth	r3, r3
 8001562:	425b      	negs	r3, r3
 8001564:	82fb      	strh	r3, [r7, #22]
	tx_buffer[7] = CRC_tx_buffer >> 8;
 8001566:	8afb      	ldrh	r3, [r7, #22]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3307      	adds	r3, #7
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]
	tx_buffer[8] = CRC_tx_buffer;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3308      	adds	r3, #8
 8001578:	8afa      	ldrh	r2, [r7, #22]
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

		CDC_Transmit_FS(tx_buffer, 9);
 800157e:	2109      	movs	r1, #9
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f007 fd59 	bl	8009038 <CDC_Transmit_FS>

}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f000 fb3a 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f8dc 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 f998 	bl	80018d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015a0:	f000 f960 	bl	8001864 <MX_SPI1_Init>
  MX_I2C1_Init();
 80015a4:	f000 f930 	bl	8001808 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80015a8:	f007 fc88 	bl	8008ebc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	MAX31865_Init(3);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff fbdd 	bl	8000d6c <MAX31865_Init>
	lcd1602_Init();
 80015b2:	f7ff fe3b 	bl	800122c <lcd1602_Init>
	lcd1602_Decode_UTF8(0, 0, "Датчик: PT100");
 80015b6:	4a5e      	ldr	r2, [pc, #376]	; (8001730 <main+0x1a0>)
 80015b8:	2100      	movs	r1, #0
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff ff03 	bl	80013c6 <lcd1602_Decode_UTF8>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (HAL_GetTick() - Time >= 1000) {
 80015c0:	f000 fb7c 	bl	8001cbc <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <main+0x1a4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d0:	d3f6      	bcc.n	80015c0 <main+0x30>
			Time = HAL_GetTick();
 80015d2:	f000 fb73 	bl	8001cbc <HAL_GetTick>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a56      	ldr	r2, [pc, #344]	; (8001734 <main+0x1a4>)
 80015da:	6013      	str	r3, [r2, #0]
			//PT100_Temperature = 25.78;
			PT100_Temperature = MAX31865_Get_Temperature();
 80015dc:	f7ff fc40 	bl	8000e60 <MAX31865_Get_Temperature>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fada 	bl	8000ba0 <__aeabi_d2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a52      	ldr	r2, [pc, #328]	; (8001738 <main+0x1a8>)
 80015f0:	6013      	str	r3, [r2, #0]
			if (PT100_Temperature >= 0) {
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <main+0x1a8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f04f 0100 	mov.w	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fb82 	bl	8000d04 <__aeabi_fcmpge>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d040      	beq.n	8001688 <main+0xf8>
				PT100_Temperature = PT100_Temperature + 0.05;
 8001606:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <main+0x1a8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc0 	bl	8000590 <__aeabi_f2d>
 8001610:	a345      	add	r3, pc, #276	; (adr r3, 8001728 <main+0x198>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fe5d 	bl	80002d4 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fabd 	bl	8000ba0 <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	4a43      	ldr	r2, [pc, #268]	; (8001738 <main+0x1a8>)
 800162a:	6013      	str	r3, [r2, #0]
				sprintf(lcd1602_tx_buffer, "Темпер.=%d.%d°C  ", (uint16_t) (PT100_Temperature),
 800162c:	4b42      	ldr	r3, [pc, #264]	; (8001738 <main+0x1a8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fb7b 	bl	8000d2c <__aeabi_f2uiz>
 8001636:	4603      	mov	r3, r0
 8001638:	b29b      	uxth	r3, r3
 800163a:	461d      	mov	r5, r3
						((uint16_t) (PT100_Temperature * 100) - ((uint16_t) PT100_Temperature) * 100) / 10);
 800163c:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <main+0x1a8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	493e      	ldr	r1, [pc, #248]	; (800173c <main+0x1ac>)
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fd8c 	bl	8000160 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fb6e 	bl	8000d2c <__aeabi_f2uiz>
 8001650:	4603      	mov	r3, r0
 8001652:	b29b      	uxth	r3, r3
 8001654:	461c      	mov	r4, r3
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <main+0x1a8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb66 	bl	8000d2c <__aeabi_f2uiz>
 8001660:	4603      	mov	r3, r0
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800166a:	fb03 f302 	mul.w	r3, r3, r2
 800166e:	4423      	add	r3, r4
				sprintf(lcd1602_tx_buffer, "Темпер.=%d.%d°C  ", (uint16_t) (PT100_Temperature),
 8001670:	4a33      	ldr	r2, [pc, #204]	; (8001740 <main+0x1b0>)
 8001672:	fb82 1203 	smull	r1, r2, r2, r3
 8001676:	1092      	asrs	r2, r2, #2
 8001678:	17db      	asrs	r3, r3, #31
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	462a      	mov	r2, r5
 800167e:	4931      	ldr	r1, [pc, #196]	; (8001744 <main+0x1b4>)
 8001680:	4831      	ldr	r0, [pc, #196]	; (8001748 <main+0x1b8>)
 8001682:	f008 f8e9 	bl	8009858 <siprintf>
 8001686:	e041      	b.n	800170c <main+0x17c>
				//printf("Temper.=%d.%d C  \r\n", (uint16_t) (PT100_Temperature), ((uint16_t) (PT100_Temperature * 10) - ((uint16_t) PT100_Temperature) * 10));
			} else {
				//PT100_Temperature = MAX31865_Get_Temperature() - 0.05;
				PT100_Temperature = -PT100_Temperature + 0.05;
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <main+0x1a8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff7d 	bl	8000590 <__aeabi_f2d>
 8001696:	a324      	add	r3, pc, #144	; (adr r3, 8001728 <main+0x198>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe fe1a 	bl	80002d4 <__adddf3>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fa7a 	bl	8000ba0 <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a22      	ldr	r2, [pc, #136]	; (8001738 <main+0x1a8>)
 80016b0:	6013      	str	r3, [r2, #0]
				sprintf(lcd1602_tx_buffer, "Темпер.=-%d.%d°C  ", (uint16_t) (PT100_Temperature),
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <main+0x1a8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fb38 	bl	8000d2c <__aeabi_f2uiz>
 80016bc:	4603      	mov	r3, r0
 80016be:	b29b      	uxth	r3, r3
 80016c0:	461d      	mov	r5, r3
						((uint16_t) (PT100_Temperature * 100) - ((uint16_t) PT100_Temperature) * 100) / 10);
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <main+0x1a8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	491d      	ldr	r1, [pc, #116]	; (800173c <main+0x1ac>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fd49 	bl	8000160 <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fb2b 	bl	8000d2c <__aeabi_f2uiz>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29b      	uxth	r3, r3
 80016da:	461c      	mov	r4, r3
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <main+0x1a8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fb23 	bl	8000d2c <__aeabi_f2uiz>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80016f0:	fb03 f302 	mul.w	r3, r3, r2
 80016f4:	4423      	add	r3, r4
				sprintf(lcd1602_tx_buffer, "Темпер.=-%d.%d°C  ", (uint16_t) (PT100_Temperature),
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <main+0x1b0>)
 80016f8:	fb82 1203 	smull	r1, r2, r2, r3
 80016fc:	1092      	asrs	r2, r2, #2
 80016fe:	17db      	asrs	r3, r3, #31
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	462a      	mov	r2, r5
 8001704:	4911      	ldr	r1, [pc, #68]	; (800174c <main+0x1bc>)
 8001706:	4810      	ldr	r0, [pc, #64]	; (8001748 <main+0x1b8>)
 8001708:	f008 f8a6 	bl	8009858 <siprintf>
				//printf("Temper.=-%d.%d C  \r\n", (uint16_t) (PT100_Temperature), ((uint16_t) (PT100_Temperature * 10) - ((uint16_t) PT100_Temperature) * 10));
			}

			lcd1602_Decode_UTF8(0, 1, lcd1602_tx_buffer);
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <main+0x1b8>)
 800170e:	2101      	movs	r1, #1
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fe58 	bl	80013c6 <lcd1602_Decode_UTF8>
			UART_MQTT_Send_data_float(0x1, PT100_Temperature, UserTxBufferFS);
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <main+0x1a8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <main+0x1c0>)
 800171c:	4619      	mov	r1, r3
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff fed2 	bl	80014c8 <UART_MQTT_Send_data_float>
		if (HAL_GetTick() - Time >= 1000) {
 8001724:	e74c      	b.n	80015c0 <main+0x30>
 8001726:	bf00      	nop
 8001728:	9999999a 	.word	0x9999999a
 800172c:	3fa99999 	.word	0x3fa99999
 8001730:	0800b060 	.word	0x0800b060
 8001734:	2000051c 	.word	0x2000051c
 8001738:	2000023c 	.word	0x2000023c
 800173c:	42c80000 	.word	0x42c80000
 8001740:	66666667 	.word	0x66666667
 8001744:	0800b074 	.word	0x0800b074
 8001748:	20000214 	.word	0x20000214
 800174c:	0800b090 	.word	0x0800b090
 8001750:	20000bd0 	.word	0x20000bd0

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	; 0x50
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2228      	movs	r2, #40	; 0x28
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f008 f870 	bl	8009848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001792:	2301      	movs	r3, #1
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001796:	2302      	movs	r3, #2
 8001798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fd3a 	bl	8004224 <HAL_RCC_OscConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017b6:	f000 f8d5 	bl	8001964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ba:	230f      	movs	r3, #15
 80017bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2102      	movs	r1, #2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 ffa4 	bl	8004724 <HAL_RCC_ClockConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017e2:	f000 f8bf 	bl	8001964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017e6:	2310      	movs	r3, #16
 80017e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 f91d 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80017fc:	f000 f8b2 	bl	8001964 <Error_Handler>
  }
}
 8001800:	bf00      	nop
 8001802:	3750      	adds	r7, #80	; 0x50
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_I2C1_Init+0x50>)
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <MX_I2C1_Init+0x54>)
 8001810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_I2C1_Init+0x50>)
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <MX_I2C1_Init+0x58>)
 8001816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_I2C1_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_I2C1_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_I2C1_Init+0x50>)
 8001826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_I2C1_Init+0x50>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_I2C1_Init+0x50>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_I2C1_Init+0x50>)
 8001846:	f000 fd11 	bl	800226c <HAL_I2C_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001850:	f000 f888 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000470 	.word	0x20000470
 800185c:	40005400 	.word	0x40005400
 8001860:	00061a80 	.word	0x00061a80

08001864 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_SPI1_Init+0x64>)
 800186a:	4a18      	ldr	r2, [pc, #96]	; (80018cc <MX_SPI1_Init+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_SPI1_Init+0x64>)
 8001870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_SPI1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_SPI1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_SPI1_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_SPI1_Init+0x64>)
 800188a:	2201      	movs	r2, #1
 800188c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_SPI1_Init+0x64>)
 8001890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_SPI1_Init+0x64>)
 8001898:	2218      	movs	r2, #24
 800189a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <MX_SPI1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_SPI1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_SPI1_Init+0x64>)
 80018b0:	220a      	movs	r2, #10
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <MX_SPI1_Init+0x64>)
 80018b6:	f003 f971 	bl	8004b9c <HAL_SPI_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018c0:	f000 f850 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200004c4 	.word	0x200004c4
 80018cc:	40013000 	.word	0x40013000

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_GPIO_Init+0x8c>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <MX_GPIO_Init+0x8c>)
 80018ea:	f043 0320 	orr.w	r3, r3, #32
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_GPIO_Init+0x8c>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <MX_GPIO_Init+0x8c>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <MX_GPIO_Init+0x8c>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <MX_GPIO_Init+0x8c>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_GPIO_Init+0x8c>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a10      	ldr	r2, [pc, #64]	; (800195c <MX_GPIO_Init+0x8c>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_GPIO_Init+0x8c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2101      	movs	r1, #1
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <MX_GPIO_Init+0x90>)
 8001932:	f000 fc83 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001936:	2301      	movs	r3, #1
 8001938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2302      	movs	r3, #2
 8001944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	4619      	mov	r1, r3
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_GPIO_Init+0x90>)
 800194e:	f000 faf1 	bl	8001f34 <HAL_GPIO_Init>

}
 8001952:	bf00      	nop
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40010800 	.word	0x40010800

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800196c:	e7fe      	b.n	800196c <Error_Handler+0x8>
	...

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_MspInit+0x5c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_MspInit+0x5c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_MspInit+0x60>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_MspInit+0x60>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000

080019d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <HAL_I2C_MspInit+0x70>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d123      	bne.n	8001a3c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_I2C_MspInit+0x74>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <HAL_I2C_MspInit+0x74>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_I2C_MspInit+0x74>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a0c:	23c0      	movs	r3, #192	; 0xc0
 8001a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a10:	2312      	movs	r3, #18
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <HAL_I2C_MspInit+0x78>)
 8001a20:	f000 fa88 	bl	8001f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_I2C_MspInit+0x74>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_I2C_MspInit+0x74>)
 8001a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a2e:	61d3      	str	r3, [r2, #28]
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_I2C_MspInit+0x74>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40005400 	.word	0x40005400
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010c00 	.word	0x40010c00

08001a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_SPI_MspInit+0x88>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d12f      	bne.n	8001ad0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_SPI_MspInit+0x8c>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_SPI_MspInit+0x8c>)
 8001a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_SPI_MspInit+0x8c>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_SPI_MspInit+0x8c>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_SPI_MspInit+0x8c>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_SPI_MspInit+0x8c>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001aa0:	23a0      	movs	r3, #160	; 0xa0
 8001aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <HAL_SPI_MspInit+0x90>)
 8001ab4:	f000 fa3e 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab8:	2340      	movs	r3, #64	; 0x40
 8001aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_SPI_MspInit+0x90>)
 8001acc:	f000 fa32 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40013000 	.word	0x40013000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010800 	.word	0x40010800

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2a:	f000 f8b5 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b3a:	f001 f912 	bl	8002d62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200011b8 	.word	0x200011b8

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f007 fe3c 	bl	80097f4 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20005000 	.word	0x20005000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	20000240 	.word	0x20000240
 8001bb0:	200014b8 	.word	0x200014b8

08001bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bc2:	e003      	b.n	8001bcc <LoopCopyDataInit>

08001bc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bca:	3104      	adds	r1, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bd4:	d3f6      	bcc.n	8001bc4 <CopyDataInit>
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bd8:	e002      	b.n	8001be0 <LoopFillZerobss>

08001bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bdc:	f842 3b04 	str.w	r3, [r2], #4

08001be0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001be4:	d3f9      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be6:	f7ff ffe5 	bl	8001bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f007 fe09 	bl	8009800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff fccf 	bl	8001590 <main>
  bx lr
 8001bf2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bf4:	0800b1a0 	.word	0x0800b1a0
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bfc:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8001c00:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8001c04:	200014b4 	.word	0x200014b4

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f947 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fea2 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f95f 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f927 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	20000008 	.word	0x20000008

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	20000520 	.word	0x20000520

08001cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000520 	.word	0x20000520

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffe0 	bl	8001cbc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000000c 	.word	0x2000000c

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <__NVIC_EnableIRQ+0x34>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff90 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff2d 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff42 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff90 	bl	8001e08 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5f 	bl	8001db4 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff35 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b08b      	sub	sp, #44	; 0x2c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	e169      	b.n	800221c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 8158 	bne.w	8002216 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a9a      	ldr	r2, [pc, #616]	; (80021d4 <HAL_GPIO_Init+0x2a0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d05e      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f70:	4a98      	ldr	r2, [pc, #608]	; (80021d4 <HAL_GPIO_Init+0x2a0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d875      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f76:	4a98      	ldr	r2, [pc, #608]	; (80021d8 <HAL_GPIO_Init+0x2a4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d058      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f7c:	4a96      	ldr	r2, [pc, #600]	; (80021d8 <HAL_GPIO_Init+0x2a4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d86f      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f82:	4a96      	ldr	r2, [pc, #600]	; (80021dc <HAL_GPIO_Init+0x2a8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d052      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f88:	4a94      	ldr	r2, [pc, #592]	; (80021dc <HAL_GPIO_Init+0x2a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d869      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f8e:	4a94      	ldr	r2, [pc, #592]	; (80021e0 <HAL_GPIO_Init+0x2ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d04c      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001f94:	4a92      	ldr	r2, [pc, #584]	; (80021e0 <HAL_GPIO_Init+0x2ac>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d863      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001f9a:	4a92      	ldr	r2, [pc, #584]	; (80021e4 <HAL_GPIO_Init+0x2b0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d046      	beq.n	800202e <HAL_GPIO_Init+0xfa>
 8001fa0:	4a90      	ldr	r2, [pc, #576]	; (80021e4 <HAL_GPIO_Init+0x2b0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d85d      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d82a      	bhi.n	8002000 <HAL_GPIO_Init+0xcc>
 8001faa:	2b12      	cmp	r3, #18
 8001fac:	d859      	bhi.n	8002062 <HAL_GPIO_Init+0x12e>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <HAL_GPIO_Init+0x80>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	0800202f 	.word	0x0800202f
 8001fb8:	08002009 	.word	0x08002009
 8001fbc:	0800201b 	.word	0x0800201b
 8001fc0:	0800205d 	.word	0x0800205d
 8001fc4:	08002063 	.word	0x08002063
 8001fc8:	08002063 	.word	0x08002063
 8001fcc:	08002063 	.word	0x08002063
 8001fd0:	08002063 	.word	0x08002063
 8001fd4:	08002063 	.word	0x08002063
 8001fd8:	08002063 	.word	0x08002063
 8001fdc:	08002063 	.word	0x08002063
 8001fe0:	08002063 	.word	0x08002063
 8001fe4:	08002063 	.word	0x08002063
 8001fe8:	08002063 	.word	0x08002063
 8001fec:	08002063 	.word	0x08002063
 8001ff0:	08002063 	.word	0x08002063
 8001ff4:	08002063 	.word	0x08002063
 8001ff8:	08002011 	.word	0x08002011
 8001ffc:	08002025 	.word	0x08002025
 8002000:	4a79      	ldr	r2, [pc, #484]	; (80021e8 <HAL_GPIO_Init+0x2b4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002006:	e02c      	b.n	8002062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e029      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	3304      	adds	r3, #4
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	e024      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	3308      	adds	r3, #8
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e01f      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	330c      	adds	r3, #12
 800202a:	623b      	str	r3, [r7, #32]
          break;
 800202c:	e01a      	b.n	8002064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002036:	2304      	movs	r3, #4
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e013      	b.n	8002064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002044:	2308      	movs	r3, #8
 8002046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	611a      	str	r2, [r3, #16]
          break;
 800204e:	e009      	b.n	8002064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	615a      	str	r2, [r3, #20]
          break;
 800205a:	e003      	b.n	8002064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
          break;
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x130>
          break;
 8002062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	d801      	bhi.n	800206e <HAL_GPIO_Init+0x13a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_Init+0x13e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d802      	bhi.n	8002080 <HAL_GPIO_Init+0x14c>
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x152>
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	3b08      	subs	r3, #8
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	210f      	movs	r1, #15
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	6a39      	ldr	r1, [r7, #32]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	431a      	orrs	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80b1 	beq.w	8002216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020b4:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a4c      	ldr	r2, [pc, #304]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_GPIO_Init+0x2b8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020cc:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <HAL_GPIO_Init+0x2bc>)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a40      	ldr	r2, [pc, #256]	; (80021f4 <HAL_GPIO_Init+0x2c0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_GPIO_Init+0x1ec>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3f      	ldr	r2, [pc, #252]	; (80021f8 <HAL_GPIO_Init+0x2c4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00d      	beq.n	800211c <HAL_GPIO_Init+0x1e8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3e      	ldr	r2, [pc, #248]	; (80021fc <HAL_GPIO_Init+0x2c8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <HAL_GPIO_Init+0x1e4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_GPIO_Init+0x1e0>
 8002110:	2303      	movs	r3, #3
 8002112:	e006      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002114:	2304      	movs	r3, #4
 8002116:	e004      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002118:	2302      	movs	r3, #2
 800211a:	e002      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_GPIO_Init+0x1ee>
 8002120:	2300      	movs	r3, #0
 8002122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002124:	f002 0203 	and.w	r2, r2, #3
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	4093      	lsls	r3, r2
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002132:	492f      	ldr	r1, [pc, #188]	; (80021f0 <HAL_GPIO_Init+0x2bc>)
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	492c      	ldr	r1, [pc, #176]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	43db      	mvns	r3, r3
 8002162:	4928      	ldr	r1, [pc, #160]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002164:	4013      	ands	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d006      	beq.n	8002182 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4922      	ldr	r1, [pc, #136]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	43db      	mvns	r3, r3
 800218a:	491e      	ldr	r1, [pc, #120]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800218c:	4013      	ands	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4918      	ldr	r1, [pc, #96]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4914      	ldr	r1, [pc, #80]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d021      	beq.n	8002208 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
 80021d0:	e021      	b.n	8002216 <HAL_GPIO_Init+0x2e2>
 80021d2:	bf00      	nop
 80021d4:	10320000 	.word	0x10320000
 80021d8:	10310000 	.word	0x10310000
 80021dc:	10220000 	.word	0x10220000
 80021e0:	10210000 	.word	0x10210000
 80021e4:	10120000 	.word	0x10120000
 80021e8:	10110000 	.word	0x10110000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40010800 	.word	0x40010800
 80021f8:	40010c00 	.word	0x40010c00
 80021fc:	40011000 	.word	0x40011000
 8002200:	40011400 	.word	0x40011400
 8002204:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_GPIO_Init+0x304>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	43db      	mvns	r3, r3
 8002210:	4909      	ldr	r1, [pc, #36]	; (8002238 <HAL_GPIO_Init+0x304>)
 8002212:	4013      	ands	r3, r2
 8002214:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	3301      	adds	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f ae8e 	bne.w	8001f48 <HAL_GPIO_Init+0x14>
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	372c      	adds	r7, #44	; 0x2c
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002258:	e003      	b.n	8002262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e12b      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fb9e 	bl	80019d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d0:	f002 fb7c 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a81      	ldr	r2, [pc, #516]	; (80024e0 <HAL_I2C_Init+0x274>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d807      	bhi.n	80022f0 <HAL_I2C_Init+0x84>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <HAL_I2C_Init+0x278>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e006      	b.n	80022fe <HAL_I2C_Init+0x92>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a7d      	ldr	r2, [pc, #500]	; (80024e8 <HAL_I2C_Init+0x27c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e7      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a78      	ldr	r2, [pc, #480]	; (80024ec <HAL_I2C_Init+0x280>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_I2C_Init+0x274>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d802      	bhi.n	8002340 <HAL_I2C_Init+0xd4>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	e009      	b.n	8002354 <HAL_I2C_Init+0xe8>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <HAL_I2C_Init+0x284>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	495c      	ldr	r1, [pc, #368]	; (80024e0 <HAL_I2C_Init+0x274>)
 8002370:	428b      	cmp	r3, r1
 8002372:	d819      	bhi.n	80023a8 <HAL_I2C_Init+0x13c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e59      	subs	r1, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002382:	1c59      	adds	r1, r3, #1
 8002384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002388:	400b      	ands	r3, r1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_I2C_Init+0x138>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e59      	subs	r1, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fbb1 f3f3 	udiv	r3, r1, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a2:	e051      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e04f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d111      	bne.n	80023d4 <HAL_I2C_Init+0x168>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e012      	b.n	80023fa <HAL_I2C_Init+0x18e>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	0099      	lsls	r1, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Init+0x196>
 80023fe:	2301      	movs	r3, #1
 8002400:	e022      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10e      	bne.n	8002428 <HAL_I2C_Init+0x1bc>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e58      	subs	r0, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	440b      	add	r3, r1
 8002418:	fbb0 f3f3 	udiv	r3, r0, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002426:	e00f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6809      	ldr	r1, [r1, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6911      	ldr	r1, [r2, #16]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68d2      	ldr	r2, [r2, #12]
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	000186a0 	.word	0x000186a0
 80024e4:	001e847f 	.word	0x001e847f
 80024e8:	003d08ff 	.word	0x003d08ff
 80024ec:	431bde83 	.word	0x431bde83
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	461a      	mov	r2, r3
 8002500:	460b      	mov	r3, r1
 8002502:	817b      	strh	r3, [r7, #10]
 8002504:	4613      	mov	r3, r2
 8002506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fbd8 	bl	8001cbc <HAL_GetTick>
 800250c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	f040 80e0 	bne.w	80026dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2319      	movs	r3, #25
 8002522:	2201      	movs	r2, #1
 8002524:	4970      	ldr	r1, [pc, #448]	; (80026e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f964 	bl	80027f4 <I2C_WaitOnFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	e0d3      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x50>
 8002540:	2302      	movs	r3, #2
 8002542:	e0cc      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d007      	beq.n	800256a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2221      	movs	r2, #33	; 0x21
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2210      	movs	r2, #16
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_I2C_Master_Transmit+0x1f8>)
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	6a3a      	ldr	r2, [r7, #32]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f89c 	bl	80026f0 <I2C_MasterRequestWrite>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08d      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d8:	e066      	b.n	80026a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	6a39      	ldr	r1, [r7, #32]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f9de 	bl	80029a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d107      	bne.n	8002602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06b      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b04      	cmp	r3, #4
 8002642:	d11b      	bne.n	800267c <HAL_I2C_Master_Transmit+0x188>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d017      	beq.n	800267c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f9ce 	bl	8002a22 <I2C_WaitOnBTFFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b04      	cmp	r3, #4
 8002692:	d107      	bne.n	80026a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e01a      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d194      	bne.n	80025da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e000      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026dc:	2302      	movs	r3, #2
  }
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	00100002 	.word	0x00100002
 80026ec:	ffff0000 	.word	0xffff0000

080026f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	460b      	mov	r3, r1
 80026fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d006      	beq.n	800271a <I2C_MasterRequestWrite+0x2a>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d003      	beq.n	800271a <I2C_MasterRequestWrite+0x2a>
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002718:	d108      	bne.n	800272c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e00b      	b.n	8002744 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	2b12      	cmp	r3, #18
 8002732:	d107      	bne.n	8002744 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f84f 	bl	80027f4 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276a:	d103      	bne.n	8002774 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e035      	b.n	80027e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002780:	d108      	bne.n	8002794 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002790:	611a      	str	r2, [r3, #16]
 8002792:	e01b      	b.n	80027cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002794:	897b      	ldrh	r3, [r7, #10]
 8002796:	11db      	asrs	r3, r3, #7
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f003 0306 	and.w	r3, r3, #6
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f063 030f 	orn	r3, r3, #15
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <I2C_MasterRequestWrite+0xfc>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f875 	bl	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e010      	b.n	80027e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4907      	ldr	r1, [pc, #28]	; (80027f0 <I2C_MasterRequestWrite+0x100>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f865 	bl	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	00010008 	.word	0x00010008
 80027f0:	00010002 	.word	0x00010002

080027f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002804:	e025      	b.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d021      	beq.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7ff fa55 	bl	8001cbc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d116      	bne.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e023      	b.n	800289a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d10d      	bne.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x84>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4013      	ands	r3, r2
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf0c      	ite	eq
 800286e:	2301      	moveq	r3, #1
 8002870:	2300      	movne	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	e00c      	b.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d0b6      	beq.n	8002806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b0:	e051      	b.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	d123      	bne.n	800290a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e046      	b.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d021      	beq.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7ff f9d3 	bl	8001cbc <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d116      	bne.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e020      	b.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10c      	bne.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e00b      	b.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	43da      	mvns	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d18d      	bne.n	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ac:	e02d      	b.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f878 	bl	8002aa4 <I2C_IsAcknowledgeFailed>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02d      	b.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d021      	beq.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7ff f979 	bl	8001cbc <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d116      	bne.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e007      	b.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	d1ca      	bne.n	80029ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a2e:	e02d      	b.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f837 	bl	8002aa4 <I2C_IsAcknowledgeFailed>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e02d      	b.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d021      	beq.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a48:	f7ff f938 	bl	8001cbc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e007      	b.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d1ca      	bne.n	8002a30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d11b      	bne.n	8002af4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	b08b      	sub	sp, #44	; 0x2c
 8002b04:	af06      	add	r7, sp, #24
 8002b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0fd      	b.n	8002d0e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f006 fbba 	bl	80092a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fdc1 	bl	80056c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	687e      	ldr	r6, [r7, #4]
 8002b46:	466d      	mov	r5, sp
 8002b48:	f106 0410 	add.w	r4, r6, #16
 8002b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	602b      	str	r3, [r5, #0]
 8002b54:	1d33      	adds	r3, r6, #4
 8002b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	f002 fd8b 	bl	8005674 <USB_CoreInit>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0ce      	b.n	8002d0e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fdbc 	bl	80056f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e04c      	b.n	8002c1c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3301      	adds	r3, #1
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	b298      	uxth	r0, r3
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3336      	adds	r3, #54	; 0x36
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3303      	adds	r3, #3
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3338      	adds	r3, #56	; 0x38
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	333c      	adds	r3, #60	; 0x3c
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	3340      	adds	r3, #64	; 0x40
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d3ad      	bcc.n	8002b82 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	e044      	b.n	8002cb6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d3b5      	bcc.n	8002c2c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	687e      	ldr	r6, [r7, #4]
 8002cc8:	466d      	mov	r5, sp
 8002cca:	f106 0410 	add.w	r4, r6, #16
 8002cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	602b      	str	r3, [r5, #0]
 8002cd6:	1d33      	adds	r3, r6, #4
 8002cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cda:	6838      	ldr	r0, [r7, #0]
 8002cdc:	f002 fd16 	bl	800570c <USB_DevInit>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00d      	b.n	8002d0e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f004 fcb0 	bl	800766c <USB_DevDisconnect>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_PCD_Start+0x16>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e016      	b.n	8002d5a <HAL_PCD_Start+0x44>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f002 fcab 	bl	8005694 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d3e:	2101      	movs	r1, #1
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f006 fd20 	bl	8009786 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f004 fc84 	bl	8007658 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b088      	sub	sp, #32
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fc86 	bl	8007680 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d7e:	d102      	bne.n	8002d86 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fb61 	bl	8003448 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f004 fc78 	bl	8007680 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9a:	d112      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dae:	b292      	uxth	r2, r2
 8002db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f006 faee 	bl	8009396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dba:	2100      	movs	r1, #0
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f925 	bl	800300c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fc5a 	bl	8007680 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd6:	d10b      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dea:	b292      	uxth	r2, r2
 8002dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 fc43 	bl	8007680 <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e04:	d10b      	bne.n	8002e1e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 fc2c 	bl	8007680 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e32:	d126      	bne.n	8002e82 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0204 	bic.w	r2, r2, #4
 8002e46:	b292      	uxth	r2, r2
 8002e48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0208 	bic.w	r2, r2, #8
 8002e5e:	b292      	uxth	r2, r2
 8002e60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f006 facf 	bl	8009408 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 fbfa 	bl	8007680 <USB_ReadInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e96:	f040 8084 	bne.w	8002fa2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e011      	b.n	8002ec4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	441a      	add	r2, r3
 8002eac:	7ffb      	ldrb	r3, [r7, #31]
 8002eae:	8812      	ldrh	r2, [r2, #0]
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	f107 0120 	add.w	r1, r7, #32
 8002eb8:	440b      	add	r3, r1
 8002eba:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002ebe:	7ffb      	ldrb	r3, [r7, #31]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	7ffb      	ldrb	r3, [r7, #31]
 8002ec6:	2b07      	cmp	r3, #7
 8002ec8:	d9ea      	bls.n	8002ea0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	b292      	uxth	r2, r2
 8002ede:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002efa:	bf00      	nop
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f6      	beq.n	8002efc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f20:	b292      	uxth	r2, r2
 8002f22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e010      	b.n	8002f4e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	4611      	mov	r1, r2
 8002f34:	7ffa      	ldrb	r2, [r7, #31]
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	440a      	add	r2, r1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	f107 0120 	add.w	r1, r7, #32
 8002f40:	440b      	add	r3, r1
 8002f42:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f46:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f48:	7ffb      	ldrb	r3, [r7, #31]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	2b07      	cmp	r3, #7
 8002f52:	d9eb      	bls.n	8002f2c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0208 	orr.w	r2, r2, #8
 8002f66:	b292      	uxth	r2, r2
 8002f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0204 	orr.w	r2, r2, #4
 8002f96:	b292      	uxth	r2, r2
 8002f98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f006 fa19 	bl	80093d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f004 fb6a 	bl	8007680 <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f006 f9d2 	bl	800937a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 fb50 	bl	8007680 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fea:	d10b      	bne.n	8003004 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ffe:	b292      	uxth	r2, r2
 8003000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003004:	bf00      	nop
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_PCD_SetAddress+0x1a>
 8003022:	2302      	movs	r3, #2
 8003024:	e013      	b.n	800304e <HAL_PCD_SetAddress+0x42>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f004 faf7 	bl	8007632 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	4608      	mov	r0, r1
 8003060:	4611      	mov	r1, r2
 8003062:	461a      	mov	r2, r3
 8003064:	4603      	mov	r3, r0
 8003066:	70fb      	strb	r3, [r7, #3]
 8003068:	460b      	mov	r3, r1
 800306a:	803b      	strh	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003078:	2b00      	cmp	r3, #0
 800307a:	da0e      	bge.n	800309a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
 8003098:	e00e      	b.n	80030b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0207 	and.w	r2, r3, #7
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030c4:	883a      	ldrh	r2, [r7, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	78ba      	ldrb	r2, [r7, #2]
 80030ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030e2:	78bb      	ldrb	r3, [r7, #2]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d102      	bne.n	80030ee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_PCD_EP_Open+0xa6>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e00e      	b.n	800311a <HAL_PCD_EP_Open+0xc4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	4618      	mov	r0, r3
 800310c:	f002 fb1e 	bl	800574c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003118:	7afb      	ldrb	r3, [r7, #11]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800312e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003132:	2b00      	cmp	r3, #0
 8003134:	da0e      	bge.n	8003154 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	705a      	strb	r2, [r3, #1]
 8003152:	e00e      	b.n	8003172 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 0207 	and.w	r2, r3, #7
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_PCD_EP_Close+0x6a>
 8003188:	2302      	movs	r3, #2
 800318a:	e00e      	b.n	80031aa <HAL_PCD_EP_Close+0x88>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68f9      	ldr	r1, [r7, #12]
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fe40 	bl	8005e20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	460b      	mov	r3, r1
 80031c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c2:	7afb      	ldrb	r3, [r7, #11]
 80031c4:	f003 0207 	and.w	r2, r3, #7
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2200      	movs	r2, #0
 80031ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2200      	movs	r2, #0
 80031f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6979      	ldr	r1, [r7, #20]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fff2 	bl	80061f8 <USB_EPStartXfer>
 8003214:	e005      	b.n	8003222 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6979      	ldr	r1, [r7, #20]
 800321c:	4618      	mov	r0, r3
 800321e:	f002 ffeb 	bl	80061f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 0207 	and.w	r2, r3, #7
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	460b      	mov	r3, r1
 8003268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326a:	7afb      	ldrb	r3, [r7, #11]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2201      	movs	r2, #1
 80032a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b2:	7afb      	ldrb	r3, [r7, #11]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6979      	ldr	r1, [r7, #20]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 ff98 	bl	80061f8 <USB_EPStartXfer>
 80032c8:	e005      	b.n	80032d6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6979      	ldr	r1, [r7, #20]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 ff91 	bl	80061f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 0207 	and.w	r2, r3, #7
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d901      	bls.n	80032fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e04c      	b.n	8003398 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	da0e      	bge.n	8003324 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	705a      	strb	r2, [r3, #1]
 8003322:	e00c      	b.n	800333e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_PCD_EP_SetStall+0x7e>
 800335a:	2302      	movs	r3, #2
 800335c:	e01c      	b.n	8003398 <HAL_PCD_EP_SetStall+0xb8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68f9      	ldr	r1, [r7, #12]
 800336c:	4618      	mov	r0, r3
 800336e:	f004 f863 	bl	8007438 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	2b00      	cmp	r3, #0
 800337a:	d108      	bne.n	800338e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003386:	4619      	mov	r1, r3
 8003388:	4610      	mov	r0, r2
 800338a:	f004 f988 	bl	800769e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d901      	bls.n	80033be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e040      	b.n	8003440 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da0e      	bge.n	80033e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	705a      	strb	r2, [r3, #1]
 80033e2:	e00e      	b.n	8003402 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 0207 	and.w	r2, r3, #7
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	b2da      	uxtb	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_PCD_EP_ClrStall+0x82>
 800341e:	2302      	movs	r3, #2
 8003420:	e00e      	b.n	8003440 <HAL_PCD_EP_ClrStall+0xa0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	4618      	mov	r0, r3
 8003432:	f004 f851 	bl	80074d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	; 0x38
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003450:	e2df      	b.n	8003a12 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800345a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800345c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003468:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 8158 	bne.w	8003722 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d152      	bne.n	8003522 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348c:	81fb      	strh	r3, [r7, #14]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349c:	b29b      	uxth	r3, r3
 800349e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3328      	adds	r3, #40	; 0x28
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	3302      	adds	r3, #2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	441a      	add	r2, r3
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034e0:	2100      	movs	r1, #0
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f005 ff2f 	bl	8009346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 828e 	beq.w	8003a12 <PCD_EP_ISR_Handler+0x5ca>
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 8289 	bne.w	8003a12 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800350c:	b2da      	uxtb	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b292      	uxth	r2, r2
 8003514:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003520:	e277      	b.n	8003a12 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003532:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003538:	2b00      	cmp	r3, #0
 800353a:	d034      	beq.n	80035a6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003544:	b29b      	uxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	3306      	adds	r3, #6
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800357a:	b29b      	uxth	r3, r3
 800357c:	f004 f8df 	bl	800773e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29a      	uxth	r2, r3
 8003588:	f640 738f 	movw	r3, #3983	; 0xf8f
 800358c:	4013      	ands	r3, r2
 800358e:	823b      	strh	r3, [r7, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	8a3a      	ldrh	r2, [r7, #16]
 8003596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800359a:	b292      	uxth	r2, r2
 800359c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f005 fea4 	bl	80092ec <HAL_PCD_SetupStageCallback>
 80035a4:	e235      	b.n	8003a12 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f280 8231 	bge.w	8003a12 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035bc:	4013      	ands	r3, r2
 80035be:	83bb      	strh	r3, [r7, #28]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	8bba      	ldrh	r2, [r7, #28]
 80035c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035ca:	b292      	uxth	r2, r2
 80035cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	3306      	adds	r3, #6
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d019      	beq.n	8003636 <PCD_EP_ISR_Handler+0x1ee>
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d015      	beq.n	8003636 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	6959      	ldr	r1, [r3, #20]
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800361a:	b29b      	uxth	r3, r3
 800361c:	f004 f88f 	bl	800773e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	441a      	add	r2, r3
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800362e:	2100      	movs	r1, #0
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f005 fe6d 	bl	8009310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003644:	b29b      	uxth	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	4413      	add	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d112      	bne.n	8003684 <PCD_EP_ISR_Handler+0x23c>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003668:	b29a      	uxth	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800367c:	b29a      	uxth	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	e02f      	b.n	80036e4 <PCD_EP_ISR_Handler+0x29c>
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b3e      	cmp	r3, #62	; 0x3e
 800368a:	d813      	bhi.n	80036b4 <PCD_EP_ISR_Handler+0x26c>
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	633b      	str	r3, [r7, #48]	; 0x30
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <PCD_EP_ISR_Handler+0x25e>
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	3301      	adds	r3, #1
 80036a4:	633b      	str	r3, [r7, #48]	; 0x30
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	029b      	lsls	r3, r3, #10
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	801a      	strh	r2, [r3, #0]
 80036b2:	e017      	b.n	80036e4 <PCD_EP_ISR_Handler+0x29c>
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <PCD_EP_ISR_Handler+0x286>
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	3b01      	subs	r3, #1
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	029b      	lsls	r3, r3, #10
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036de:	b29a      	uxth	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	827b      	strh	r3, [r7, #18]
 80036f6:	8a7b      	ldrh	r3, [r7, #18]
 80036f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036fc:	827b      	strh	r3, [r7, #18]
 80036fe:	8a7b      	ldrh	r3, [r7, #18]
 8003700:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003704:	827b      	strh	r3, [r7, #18]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	8a7b      	ldrh	r3, [r7, #18]
 800370c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371c:	b29b      	uxth	r3, r3
 800371e:	8013      	strh	r3, [r2, #0]
 8003720:	e177      	b.n	8003a12 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003734:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003738:	2b00      	cmp	r3, #0
 800373a:	f280 80ea 	bge.w	8003912 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29a      	uxth	r2, r3
 8003750:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003754:	4013      	ands	r3, r2
 8003756:	853b      	strh	r3, [r7, #40]	; 0x28
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003768:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800376c:	b292      	uxth	r2, r2
 800376e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003770:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	7b1b      	ldrb	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d122      	bne.n	80037d4 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	3306      	adds	r3, #6
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80037b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8087 	beq.w	80038ce <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	6959      	ldr	r1, [r3, #20]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	88da      	ldrh	r2, [r3, #6]
 80037cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037ce:	f003 ffb6 	bl	800773e <USB_ReadPMA>
 80037d2:	e07c      	b.n	80038ce <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	78db      	ldrb	r3, [r3, #3]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d108      	bne.n	80037ee <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037de:	461a      	mov	r2, r3
 80037e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f923 	bl	8003a2e <HAL_PCD_EP_DB_Receive>
 80037e8:	4603      	mov	r3, r0
 80037ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037ec:	e06f      	b.n	80038ce <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003808:	847b      	strh	r3, [r7, #34]	; 0x22
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	441a      	add	r2, r3
 8003818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800381a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800381e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d021      	beq.n	800388c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003850:	b29b      	uxth	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	3302      	adds	r3, #2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003870:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003872:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02a      	beq.n	80038ce <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	6959      	ldr	r1, [r3, #20]
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	891a      	ldrh	r2, [r3, #8]
 8003884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003886:	f003 ff5a 	bl	800773e <USB_ReadPMA>
 800388a:	e020      	b.n	80038ce <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	3306      	adds	r3, #6
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80038b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	6959      	ldr	r1, [r3, #20]
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	895a      	ldrh	r2, [r3, #10]
 80038c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038ca:	f003 ff38 	bl	800773e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d4:	441a      	add	r2, r3
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038e0:	441a      	add	r2, r3
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <PCD_EP_ISR_Handler+0x4b0>
 80038ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d206      	bcs.n	8003906 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f005 fd06 	bl	8009310 <HAL_PCD_DataOutStageCallback>
 8003904:	e005      	b.n	8003912 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390c:	4618      	mov	r0, r3
 800390e:	f002 fc73 	bl	80061f8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003912:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b00      	cmp	r3, #0
 800391a:	d07a      	beq.n	8003a12 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800391c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	843b      	strh	r3, [r7, #32]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	8c3b      	ldrh	r3, [r7, #32]
 800395c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	78db      	ldrb	r3, [r3, #3]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d108      	bne.n	8003982 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003974:	2b02      	cmp	r3, #2
 8003976:	d146      	bne.n	8003a06 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d141      	bne.n	8003a06 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	3302      	adds	r3, #2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039aa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	8bfb      	ldrh	r3, [r7, #30]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d906      	bls.n	80039c4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	8bfb      	ldrh	r3, [r7, #30]
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	619a      	str	r2, [r3, #24]
 80039c2:	e002      	b.n	80039ca <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f005 fcb4 	bl	8009346 <HAL_PCD_DataInStageCallback>
 80039de:	e018      	b.n	8003a12 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	8bfb      	ldrh	r3, [r7, #30]
 80039e6:	441a      	add	r2, r3
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	8bfb      	ldrh	r3, [r7, #30]
 80039f2:	441a      	add	r2, r3
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 fbfa 	bl	80061f8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003a04:	e005      	b.n	8003a12 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f91b 	bl	8003c48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	b21b      	sxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f6ff ad17 	blt.w	8003452 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3738      	adds	r7, #56	; 0x38
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b088      	sub	sp, #32
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d07e      	beq.n	8003b44 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	8b7b      	ldrh	r3, [r7, #26]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d306      	bcc.n	8003a88 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	8b7b      	ldrh	r3, [r7, #26]
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	619a      	str	r2, [r3, #24]
 8003a86:	e002      	b.n	8003a8e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d123      	bne.n	8003ade <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab0:	833b      	strh	r3, [r7, #24]
 8003ab2:	8b3b      	ldrh	r3, [r7, #24]
 8003ab4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ab8:	833b      	strh	r3, [r7, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	8b3b      	ldrh	r3, [r7, #24]
 8003aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01f      	beq.n	8003b28 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	82fb      	strh	r3, [r7, #22]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	8afb      	ldrh	r3, [r7, #22]
 8003b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b28:	8b7b      	ldrh	r3, [r7, #26]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8087 	beq.w	8003c3e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6959      	ldr	r1, [r3, #20]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	891a      	ldrh	r2, [r3, #8]
 8003b3c:	8b7b      	ldrh	r3, [r7, #26]
 8003b3e:	f003 fdfe 	bl	800773e <USB_ReadPMA>
 8003b42:	e07c      	b.n	8003c3e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	3306      	adds	r3, #6
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	8b7b      	ldrh	r3, [r7, #26]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d306      	bcc.n	8003b86 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	8b7b      	ldrh	r3, [r7, #26]
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	619a      	str	r2, [r3, #24]
 8003b84:	e002      	b.n	8003b8c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d123      	bne.n	8003bdc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	83fb      	strh	r3, [r7, #30]
 8003bb0:	8bfb      	ldrh	r3, [r7, #30]
 8003bb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bb6:	83fb      	strh	r3, [r7, #30]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	8bfb      	ldrh	r3, [r7, #30]
 8003bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11f      	bne.n	8003c26 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c00:	83bb      	strh	r3, [r7, #28]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	441a      	add	r2, r3
 8003c10:	8bbb      	ldrh	r3, [r7, #28]
 8003c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c26:	8b7b      	ldrh	r3, [r7, #26]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6959      	ldr	r1, [r3, #20]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	895a      	ldrh	r2, [r3, #10]
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	f003 fd80 	bl	800773e <USB_ReadPMA>
    }
  }

  return count;
 8003c3e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3720      	adds	r7, #32
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b094      	sub	sp, #80	; 0x50
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8138 	beq.w	8003ed2 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	3302      	adds	r3, #2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d907      	bls.n	8003caa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	619a      	str	r2, [r3, #24]
 8003ca8:	e002      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d12c      	bne.n	8003d12 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f005 fb41 	bl	8009346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 823a 	beq.w	8004144 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	82fb      	strh	r3, [r7, #22]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	8afb      	ldrh	r3, [r7, #22]
 8003cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	8013      	strh	r3, [r2, #0]
 8003d10:	e218      	b.n	8004144 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01f      	beq.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	f040 81ee 	bne.w	8004144 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d70:	441a      	add	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d7e:	441a      	add	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d309      	bcc.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9c:	1ad2      	subs	r2, r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	621a      	str	r2, [r3, #32]
 8003da2:	e015      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8003dac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dba:	e009      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d155      	bne.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x23c>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	011a      	lsls	r2, r3, #4
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d112      	bne.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	e047      	b.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x274>
 8003e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e30:	d811      	bhi.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x20e>
 8003e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_PCD_EP_DB_Transmit+0x200>
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	3301      	adds	r3, #1
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	029b      	lsls	r3, r3, #10
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	e032      	b.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x274>
 8003e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x224>
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	029b      	lsls	r3, r3, #10
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	801a      	strh	r2, [r3, #0]
 8003e82:	e01b      	b.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x274>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d117      	bne.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x274>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	4413      	add	r3, r2
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	011a      	lsls	r2, r3, #4
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	4413      	add	r3, r2
 8003eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eb2:	623b      	str	r3, [r7, #32]
 8003eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6959      	ldr	r1, [r3, #20]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	891a      	ldrh	r2, [r3, #8]
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f003 fbf2 	bl	80076b4 <USB_WritePMA>
 8003ed0:	e138      	b.n	8004144 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3306      	adds	r3, #6
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d307      	bcc.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f12:	1ad2      	subs	r2, r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	619a      	str	r2, [r3, #24]
 8003f18:	e002      	b.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d12e      	bne.n	8003f86 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f005 fa09 	bl	8009346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 8102 	bne.w	8004144 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	8013      	strh	r3, [r2, #0]
 8003f84:	e0de      	b.n	8004144 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11f      	bne.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	867b      	strh	r3, [r7, #50]	; 0x32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	f040 80b4 	bne.w	8004144 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003fe4:	441a      	add	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	429a      	cmp	r2, r3
 8004002:	d309      	bcc.n	8004018 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004010:	1ad2      	subs	r2, r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	621a      	str	r2, [r3, #32]
 8004016:	e015      	b.n	8004044 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d107      	bne.n	8004030 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8004020:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004024:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800402e:	e009      	b.n	8004044 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2200      	movs	r2, #0
 800403a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	643b      	str	r3, [r7, #64]	; 0x40
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	785b      	ldrb	r3, [r3, #1]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d155      	bne.n	80040fe <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004060:	b29b      	uxth	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	4413      	add	r3, r2
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	011a      	lsls	r2, r3, #4
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	4413      	add	r3, r2
 8004074:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
 800407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407c:	2b00      	cmp	r3, #0
 800407e:	d112      	bne.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x45e>
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800408a:	b29a      	uxth	r2, r3
 800408c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408e:	801a      	strh	r2, [r3, #0]
 8004090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	e044      	b.n	8004130 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a8:	2b3e      	cmp	r3, #62	; 0x3e
 80040aa:	d811      	bhi.n	80040d0 <HAL_PCD_EP_DB_Transmit+0x488>
 80040ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_PCD_EP_DB_Transmit+0x47a>
 80040bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040be:	3301      	adds	r3, #1
 80040c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	029b      	lsls	r3, r3, #10
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	e02f      	b.n	8004130 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <HAL_PCD_EP_DB_Transmit+0x49e>
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e2:	3b01      	subs	r3, #1
 80040e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	029b      	lsls	r3, r3, #10
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e018      	b.n	8004130 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d114      	bne.n	8004130 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004114:	4413      	add	r3, r2
 8004116:	643b      	str	r3, [r7, #64]	; 0x40
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004120:	4413      	add	r3, r2
 8004122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412a:	b29a      	uxth	r2, r3
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6959      	ldr	r1, [r3, #20]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	895a      	ldrh	r2, [r3, #10]
 800413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413e:	b29b      	uxth	r3, r3
 8004140:	f003 fab8 	bl	80076b4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800415e:	82bb      	strh	r3, [r7, #20]
 8004160:	8abb      	ldrh	r3, [r7, #20]
 8004162:	f083 0310 	eor.w	r3, r3, #16
 8004166:	82bb      	strh	r3, [r7, #20]
 8004168:	8abb      	ldrh	r3, [r7, #20]
 800416a:	f083 0320 	eor.w	r3, r3, #32
 800416e:	82bb      	strh	r3, [r7, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	441a      	add	r2, r3
 800417e:	8abb      	ldrh	r3, [r7, #20]
 8004180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	b29b      	uxth	r3, r3
 8004192:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3750      	adds	r7, #80	; 0x50
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	607b      	str	r3, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	817b      	strh	r3, [r7, #10]
 80041ac:	4613      	mov	r3, r2
 80041ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80041b0:	897b      	ldrh	r3, [r7, #10]
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041bc:	897b      	ldrh	r3, [r7, #10]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e009      	b.n	80041e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041d4:	897a      	ldrh	r2, [r7, #10]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80041e8:	893b      	ldrh	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	80da      	strh	r2, [r3, #6]
 80041fc:	e00b      	b.n	8004216 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2201      	movs	r2, #1
 8004202:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	b29a      	uxth	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	0c1b      	lsrs	r3, r3, #16
 8004210:	b29a      	uxth	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
	...

08004224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e26c      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8087 	beq.w	8004352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004244:	4b92      	ldr	r3, [pc, #584]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b04      	cmp	r3, #4
 800424e:	d00c      	beq.n	800426a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004250:	4b8f      	ldr	r3, [pc, #572]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d112      	bne.n	8004282 <HAL_RCC_OscConfig+0x5e>
 800425c:	4b8c      	ldr	r3, [pc, #560]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d10b      	bne.n	8004282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426a:	4b89      	ldr	r3, [pc, #548]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d06c      	beq.n	8004350 <HAL_RCC_OscConfig+0x12c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d168      	bne.n	8004350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e246      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428a:	d106      	bne.n	800429a <HAL_RCC_OscConfig+0x76>
 800428c:	4b80      	ldr	r3, [pc, #512]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a7f      	ldr	r2, [pc, #508]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 8004292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	e02e      	b.n	80042f8 <HAL_RCC_OscConfig+0xd4>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0x98>
 80042a2:	4b7b      	ldr	r3, [pc, #492]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7a      	ldr	r2, [pc, #488]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b78      	ldr	r3, [pc, #480]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a77      	ldr	r2, [pc, #476]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e01d      	b.n	80042f8 <HAL_RCC_OscConfig+0xd4>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0xbc>
 80042c6:	4b72      	ldr	r3, [pc, #456]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a71      	ldr	r2, [pc, #452]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b6f      	ldr	r3, [pc, #444]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6e      	ldr	r2, [pc, #440]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0xd4>
 80042e0:	4b6b      	ldr	r3, [pc, #428]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6a      	ldr	r2, [pc, #424]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b68      	ldr	r3, [pc, #416]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a67      	ldr	r2, [pc, #412]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80042f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fd fcdc 	bl	8001cbc <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004308:	f7fd fcd8 	bl	8001cbc <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1fa      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b5d      	ldr	r3, [pc, #372]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0xe4>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fd fcc8 	bl	8001cbc <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fd fcc4 	bl	8001cbc <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1e6      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x10c>
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d063      	beq.n	8004426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435e:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800436a:	4b49      	ldr	r3, [pc, #292]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b08      	cmp	r3, #8
 8004374:	d11c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x18c>
 8004376:	4b46      	ldr	r3, [pc, #280]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d116      	bne.n	80043b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	4b43      	ldr	r3, [pc, #268]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_RCC_OscConfig+0x176>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e1ba      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4939      	ldr	r1, [pc, #228]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	e03a      	b.n	8004426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b8:	4b36      	ldr	r3, [pc, #216]	; (8004494 <HAL_RCC_OscConfig+0x270>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043be:	f7fd fc7d 	bl	8001cbc <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fd fc79 	bl	8001cbc <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e19b      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d8:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4927      	ldr	r1, [pc, #156]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
 80043f8:	e015      	b.n	8004426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fa:	4b26      	ldr	r3, [pc, #152]	; (8004494 <HAL_RCC_OscConfig+0x270>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fd fc5c 	bl	8001cbc <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004408:	f7fd fc58 	bl	8001cbc <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e17a      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441a:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d03a      	beq.n	80044a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d019      	beq.n	800446e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004440:	f7fd fc3c 	bl	8001cbc <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004448:	f7fd fc38 	bl	8001cbc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e15a      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_RCC_OscConfig+0x26c>)
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004466:	2001      	movs	r0, #1
 8004468:	f000 fac4 	bl	80049f4 <RCC_Delay>
 800446c:	e01c      	b.n	80044a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_RCC_OscConfig+0x274>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004474:	f7fd fc22 	bl	8001cbc <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447a:	e00f      	b.n	800449c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447c:	f7fd fc1e 	bl	8001cbc <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d908      	bls.n	800449c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e140      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	42420000 	.word	0x42420000
 8004498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	4b9e      	ldr	r3, [pc, #632]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e9      	bne.n	800447c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a6 	beq.w	8004602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ba:	4b97      	ldr	r3, [pc, #604]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	4b94      	ldr	r3, [pc, #592]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	4a93      	ldr	r2, [pc, #588]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	61d3      	str	r3, [r2, #28]
 80044d2:	4b91      	ldr	r3, [pc, #580]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	4b8e      	ldr	r3, [pc, #568]	; (800471c <HAL_RCC_OscConfig+0x4f8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d118      	bne.n	8004520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ee:	4b8b      	ldr	r3, [pc, #556]	; (800471c <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a8a      	ldr	r2, [pc, #552]	; (800471c <HAL_RCC_OscConfig+0x4f8>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fd fbdf 	bl	8001cbc <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004502:	f7fd fbdb 	bl	8001cbc <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b64      	cmp	r3, #100	; 0x64
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e0fd      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	4b81      	ldr	r3, [pc, #516]	; (800471c <HAL_RCC_OscConfig+0x4f8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x312>
 8004528:	4b7b      	ldr	r3, [pc, #492]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4a7a      	ldr	r2, [pc, #488]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6213      	str	r3, [r2, #32]
 8004534:	e02d      	b.n	8004592 <HAL_RCC_OscConfig+0x36e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x334>
 800453e:	4b76      	ldr	r3, [pc, #472]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4a75      	ldr	r2, [pc, #468]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	6213      	str	r3, [r2, #32]
 800454a:	4b73      	ldr	r3, [pc, #460]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	4a72      	ldr	r2, [pc, #456]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004550:	f023 0304 	bic.w	r3, r3, #4
 8004554:	6213      	str	r3, [r2, #32]
 8004556:	e01c      	b.n	8004592 <HAL_RCC_OscConfig+0x36e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b05      	cmp	r3, #5
 800455e:	d10c      	bne.n	800457a <HAL_RCC_OscConfig+0x356>
 8004560:	4b6d      	ldr	r3, [pc, #436]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4a6c      	ldr	r2, [pc, #432]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	6213      	str	r3, [r2, #32]
 800456c:	4b6a      	ldr	r3, [pc, #424]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4a69      	ldr	r2, [pc, #420]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6213      	str	r3, [r2, #32]
 8004578:	e00b      	b.n	8004592 <HAL_RCC_OscConfig+0x36e>
 800457a:	4b67      	ldr	r3, [pc, #412]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4a66      	ldr	r2, [pc, #408]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	6213      	str	r3, [r2, #32]
 8004586:	4b64      	ldr	r3, [pc, #400]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4a63      	ldr	r2, [pc, #396]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800458c:	f023 0304 	bic.w	r3, r3, #4
 8004590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d015      	beq.n	80045c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459a:	f7fd fb8f 	bl	8001cbc <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fd fb8b 	bl	8001cbc <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e0ab      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	4b57      	ldr	r3, [pc, #348]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ee      	beq.n	80045a2 <HAL_RCC_OscConfig+0x37e>
 80045c4:	e014      	b.n	80045f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c6:	f7fd fb79 	bl	8001cbc <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	f7fd fb75 	bl	8001cbc <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045dc:	4293      	cmp	r3, r2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e095      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	4b4c      	ldr	r3, [pc, #304]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ee      	bne.n	80045ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f6:	4b48      	ldr	r3, [pc, #288]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4a47      	ldr	r2, [pc, #284]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8081 	beq.w	800470e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800460c:	4b42      	ldr	r3, [pc, #264]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	2b08      	cmp	r3, #8
 8004616:	d061      	beq.n	80046dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d146      	bne.n	80046ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004620:	4b3f      	ldr	r3, [pc, #252]	; (8004720 <HAL_RCC_OscConfig+0x4fc>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7fd fb49 	bl	8001cbc <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462e:	f7fd fb45 	bl	8001cbc <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e067      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f0      	bne.n	800462e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d108      	bne.n	8004668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	492d      	ldr	r1, [pc, #180]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a19      	ldr	r1, [r3, #32]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	430b      	orrs	r3, r1
 800467a:	4927      	ldr	r1, [pc, #156]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004680:	4b27      	ldr	r3, [pc, #156]	; (8004720 <HAL_RCC_OscConfig+0x4fc>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fd fb19 	bl	8001cbc <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468e:	f7fd fb15 	bl	8001cbc <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e037      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a0:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x46a>
 80046ac:	e02f      	b.n	800470e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <HAL_RCC_OscConfig+0x4fc>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fd fb02 	bl	8001cbc <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046bc:	f7fd fafe 	bl	8001cbc <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e020      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x498>
 80046da:	e018      	b.n	800470e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e013      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_OscConfig+0x4f4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d106      	bne.n	800470a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d001      	beq.n	800470e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000
 800471c:	40007000 	.word	0x40007000
 8004720:	42420060 	.word	0x42420060

08004724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d0      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b6a      	ldr	r3, [pc, #424]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d910      	bls.n	8004768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b67      	ldr	r3, [pc, #412]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 0207 	bic.w	r2, r3, #7
 800474e:	4965      	ldr	r1, [pc, #404]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b63      	ldr	r3, [pc, #396]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0b8      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d020      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004780:	4b59      	ldr	r3, [pc, #356]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a58      	ldr	r2, [pc, #352]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004786:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800478a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004798:	4b53      	ldr	r3, [pc, #332]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a52      	ldr	r2, [pc, #328]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a4:	4b50      	ldr	r3, [pc, #320]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	494d      	ldr	r1, [pc, #308]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d040      	beq.n	8004844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d115      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e07f      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e073      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f2:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06b      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004802:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4936      	ldr	r1, [pc, #216]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004814:	f7fd fa52 	bl	8001cbc <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	e00a      	b.n	8004832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fd fa4e 	bl	8001cbc <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e053      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 020c 	and.w	r2, r3, #12
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d1eb      	bne.n	800481c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d210      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 0207 	bic.w	r2, r3, #7
 800485a:	4922      	ldr	r1, [pc, #136]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e032      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004880:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4916      	ldr	r1, [pc, #88]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800489e:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	490e      	ldr	r1, [pc, #56]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048b2:	f000 f821 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 80048b6:	4602      	mov	r2, r0
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	490a      	ldr	r1, [pc, #40]	; (80048ec <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	5ccb      	ldrb	r3, [r1, r3]
 80048c6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ca:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <HAL_RCC_ClockConfig+0x1cc>)
 80048cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_RCC_ClockConfig+0x1d0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd f9b0 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40022000 	.word	0x40022000
 80048e8:	40021000 	.word	0x40021000
 80048ec:	0800b108 	.word	0x0800b108
 80048f0:	20000004 	.word	0x20000004
 80048f4:	20000008 	.word	0x20000008

080048f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f8:	b490      	push	{r4, r7}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048fe:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004900:	1d3c      	adds	r4, r7, #4
 8004902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004908:	f240 2301 	movw	r3, #513	; 0x201
 800490c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004922:	4b22      	ldr	r3, [pc, #136]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b04      	cmp	r3, #4
 8004930:	d002      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x40>
 8004932:	2b08      	cmp	r3, #8
 8004934:	d003      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x46>
 8004936:	e02d      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800493a:	623b      	str	r3, [r7, #32]
      break;
 800493c:	e02d      	b.n	800499a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	0c9b      	lsrs	r3, r3, #18
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800494a:	4413      	add	r3, r2
 800494c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004950:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d013      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0c5b      	lsrs	r3, r3, #17
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800496a:	4413      	add	r3, r2
 800496c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004970:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004976:	fb02 f203 	mul.w	r2, r2, r3
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
 8004982:	e004      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4a0b      	ldr	r2, [pc, #44]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	623b      	str	r3, [r7, #32]
      break;
 8004992:	e002      	b.n	800499a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004996:	623b      	str	r3, [r7, #32]
      break;
 8004998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499a:	6a3b      	ldr	r3, [r7, #32]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3728      	adds	r7, #40	; 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc90      	pop	{r4, r7}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	0800b0ac 	.word	0x0800b0ac
 80049ac:	40021000 	.word	0x40021000
 80049b0:	007a1200 	.word	0x007a1200
 80049b4:	003d0900 	.word	0x003d0900

080049b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	20000004 	.word	0x20000004

080049cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049d0:	f7ff fff2 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4903      	ldr	r1, [pc, #12]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	0800b118 	.word	0x0800b118

080049f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <RCC_Delay+0x34>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <RCC_Delay+0x38>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	0a5b      	lsrs	r3, r3, #9
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a10:	bf00      	nop
  }
  while (Delay --);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	60fa      	str	r2, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f9      	bne.n	8004a10 <RCC_Delay+0x1c>
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	20000004 	.word	0x20000004
 8004a2c:	10624dd3 	.word	0x10624dd3

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d07d      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a50:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10d      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5c:	4b4c      	ldr	r3, [pc, #304]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	4a4b      	ldr	r2, [pc, #300]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a66:	61d3      	str	r3, [r2, #28]
 8004a68:	4b49      	ldr	r3, [pc, #292]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	4b46      	ldr	r3, [pc, #280]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d118      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a42      	ldr	r2, [pc, #264]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a90:	f7fd f914 	bl	8001cbc <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a96:	e008      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a98:	f7fd f910 	bl	8001cbc <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e06d      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02e      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d027      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ad4:	4b2e      	ldr	r3, [pc, #184]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004adc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ade:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004aea:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fd f8df 	bl	8001cbc <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fd f8db 	bl	8001cbc <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e036      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0ee      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4917      	ldr	r1, [pc, #92]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	490b      	ldr	r1, [pc, #44]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	4904      	ldr	r1, [pc, #16]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40007000 	.word	0x40007000
 8004b98:	42420440 	.word	0x42420440

08004b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e076      	b.n	8004c9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d108      	bne.n	8004bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bbe:	d009      	beq.n	8004bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	61da      	str	r2, [r3, #28]
 8004bc6:	e005      	b.n	8004bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc ff2e 	bl	8001a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	ea42 0103 	orr.w	r1, r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	0c1a      	lsrs	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f002 0204 	and.w	r2, r2, #4
 8004c7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_SPI_Transmit+0x22>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e126      	b.n	8004f14 <HAL_SPI_Transmit+0x270>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cce:	f7fc fff5 	bl	8001cbc <HAL_GetTick>
 8004cd2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d002      	beq.n	8004cea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ce8:	e10b      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_SPI_Transmit+0x52>
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cfa:	e102      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2203      	movs	r2, #3
 8004d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	88fa      	ldrh	r2, [r7, #6]
 8004d1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d42:	d10f      	bne.n	8004d64 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d007      	beq.n	8004d82 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8a:	d14b      	bne.n	8004e24 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_SPI_Transmit+0xf6>
 8004d94:	8afb      	ldrh	r3, [r7, #22]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d13e      	bne.n	8004e18 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	1c9a      	adds	r2, r3, #2
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dbe:	e02b      	b.n	8004e18 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d112      	bne.n	8004df4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	881a      	ldrh	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004df2:	e011      	b.n	8004e18 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df4:	f7fc ff62 	bl	8001cbc <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d803      	bhi.n	8004e0c <HAL_SPI_Transmit+0x168>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d102      	bne.n	8004e12 <HAL_SPI_Transmit+0x16e>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e16:	e074      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ce      	bne.n	8004dc0 <HAL_SPI_Transmit+0x11c>
 8004e22:	e04c      	b.n	8004ebe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_SPI_Transmit+0x18e>
 8004e2c:	8afb      	ldrh	r3, [r7, #22]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d140      	bne.n	8004eb4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e58:	e02c      	b.n	8004eb4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d113      	bne.n	8004e90 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e8e:	e011      	b.n	8004eb4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e90:	f7fc ff14 	bl	8001cbc <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d803      	bhi.n	8004ea8 <HAL_SPI_Transmit+0x204>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d102      	bne.n	8004eae <HAL_SPI_Transmit+0x20a>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eb2:	e026      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1cd      	bne.n	8004e5a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fbb8 	bl	8005638 <SPI_EndRxTxTransaction>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e000      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f38:	d112      	bne.n	8004f60 <HAL_SPI_Receive+0x44>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10e      	bne.n	8004f60 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2204      	movs	r2, #4
 8004f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f8f1 	bl	800513e <HAL_SPI_TransmitReceive>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	e0ea      	b.n	8005136 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_SPI_Receive+0x52>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e0e3      	b.n	8005136 <HAL_SPI_Receive+0x21a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f76:	f7fc fea1 	bl	8001cbc <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d002      	beq.n	8004f8e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f8c:	e0ca      	b.n	8005124 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_Receive+0x7e>
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f9e:	e0c1      	b.n	8005124 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d10f      	bne.n	8005008 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005006:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d007      	beq.n	8005026 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005024:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d162      	bne.n	80050f4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800502e:	e02e      	b.n	800508e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d115      	bne.n	800506a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f103 020c 	add.w	r2, r3, #12
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	7812      	ldrb	r2, [r2, #0]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005068:	e011      	b.n	800508e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800506a:	f7fc fe27 	bl	8001cbc <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d803      	bhi.n	8005082 <HAL_SPI_Receive+0x166>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d102      	bne.n	8005088 <HAL_SPI_Receive+0x16c>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800508c:	e04a      	b.n	8005124 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1cb      	bne.n	8005030 <HAL_SPI_Receive+0x114>
 8005098:	e031      	b.n	80050fe <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d113      	bne.n	80050d0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	b292      	uxth	r2, r2
 80050b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	1c9a      	adds	r2, r3, #2
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050ce:	e011      	b.n	80050f4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d0:	f7fc fdf4 	bl	8001cbc <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d803      	bhi.n	80050e8 <HAL_SPI_Receive+0x1cc>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d102      	bne.n	80050ee <HAL_SPI_Receive+0x1d2>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050f2:	e017      	b.n	8005124 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1cd      	bne.n	800509a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fa46 	bl	8005594 <SPI_EndRxTransaction>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
 8005120:	e000      	b.n	8005124 <HAL_SPI_Receive+0x208>
  }

error :
 8005122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b08c      	sub	sp, #48	; 0x30
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800514c:	2301      	movs	r3, #1
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x26>
 8005160:	2302      	movs	r3, #2
 8005162:	e18a      	b.n	800547a <HAL_SPI_TransmitReceive+0x33c>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800516c:	f7fc fda6 	bl	8001cbc <HAL_GetTick>
 8005170:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800518a:	2b01      	cmp	r3, #1
 800518c:	d00f      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x70>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005194:	d107      	bne.n	80051a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_SPI_TransmitReceive+0x68>
 800519e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d003      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
 80051a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051ac:	e15b      	b.n	8005466 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x82>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x82>
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051c6:	e14e      	b.n	8005466 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d003      	beq.n	80051dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2205      	movs	r2, #5
 80051d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	887a      	ldrh	r2, [r7, #2]
 80051ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	887a      	ldrh	r2, [r7, #2]
 80051f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	887a      	ldrh	r2, [r7, #2]
 80051fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	887a      	ldrh	r2, [r7, #2]
 8005204:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d007      	beq.n	8005230 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005238:	d178      	bne.n	800532c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_SPI_TransmitReceive+0x10a>
 8005242:	8b7b      	ldrh	r3, [r7, #26]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d166      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	881a      	ldrh	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800526c:	e053      	b.n	8005316 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b02      	cmp	r3, #2
 800527a:	d11b      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x176>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d016      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x176>
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d113      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	881a      	ldrh	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d119      	bne.n	80052f6 <HAL_SPI_TransmitReceive+0x1b8>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d014      	beq.n	80052f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	b292      	uxth	r2, r2
 80052d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	1c9a      	adds	r2, r3, #2
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052f2:	2301      	movs	r3, #1
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052f6:	f7fc fce1 	bl	8001cbc <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005302:	429a      	cmp	r2, r3
 8005304:	d807      	bhi.n	8005316 <HAL_SPI_TransmitReceive+0x1d8>
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d003      	beq.n	8005316 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005314:	e0a7      	b.n	8005466 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1a6      	bne.n	800526e <HAL_SPI_TransmitReceive+0x130>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1a1      	bne.n	800526e <HAL_SPI_TransmitReceive+0x130>
 800532a:	e07c      	b.n	8005426 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_SPI_TransmitReceive+0x1fc>
 8005334:	8b7b      	ldrh	r3, [r7, #26]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d16b      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	7812      	ldrb	r2, [r2, #0]
 8005346:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005360:	e057      	b.n	8005412 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d11c      	bne.n	80053aa <HAL_SPI_TransmitReceive+0x26c>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d017      	beq.n	80053aa <HAL_SPI_TransmitReceive+0x26c>
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d114      	bne.n	80053aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d119      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x2ae>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d014      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053e8:	2301      	movs	r3, #1
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053ec:	f7fc fc66 	bl	8001cbc <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d803      	bhi.n	8005404 <HAL_SPI_TransmitReceive+0x2c6>
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d102      	bne.n	800540a <HAL_SPI_TransmitReceive+0x2cc>
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	2b00      	cmp	r3, #0
 8005408:	d103      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005410:	e029      	b.n	8005466 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1a2      	bne.n	8005362 <HAL_SPI_TransmitReceive+0x224>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d19d      	bne.n	8005362 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f904 	bl	8005638 <SPI_EndRxTxTransaction>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d006      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005442:	e010      	b.n	8005466 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	e000      	b.n	8005466 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005464:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800547a:	4618      	mov	r0, r3
 800547c:	3730      	adds	r7, #48	; 0x30
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005494:	f7fc fc12 	bl	8001cbc <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	4413      	add	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054a4:	f7fc fc0a 	bl	8001cbc <HAL_GetTick>
 80054a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054aa:	4b39      	ldr	r3, [pc, #228]	; (8005590 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	015b      	lsls	r3, r3, #5
 80054b0:	0d1b      	lsrs	r3, r3, #20
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ba:	e054      	b.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c2:	d050      	beq.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054c4:	f7fc fbfa 	bl	8001cbc <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d902      	bls.n	80054da <SPI_WaitFlagStateUntilTimeout+0x56>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d13d      	bne.n	8005556 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f2:	d111      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fc:	d004      	beq.n	8005508 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005506:	d107      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005520:	d10f      	bne.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e017      	b.n	8005586 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3b01      	subs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	429a      	cmp	r2, r3
 8005582:	d19b      	bne.n	80054bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000004 	.word	0x20000004

08005594 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a8:	d111      	bne.n	80055ce <SPI_EndRxTransaction+0x3a>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b2:	d004      	beq.n	80055be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055bc:	d107      	bne.n	80055ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055cc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055d6:	d117      	bne.n	8005608 <SPI_EndRxTransaction+0x74>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e0:	d112      	bne.n	8005608 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2101      	movs	r1, #1
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff ff49 	bl	8005484 <SPI_WaitFlagStateUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01a      	beq.n	800562e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e013      	b.n	8005630 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	2180      	movs	r1, #128	; 0x80
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff ff36 	bl	8005484 <SPI_WaitFlagStateUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	f043 0220 	orr.w	r2, r3, #32
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e000      	b.n	8005630 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2200      	movs	r2, #0
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff ff18 	bl	8005484 <SPI_WaitFlagStateUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e000      	b.n	800566c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005674:	b084      	sub	sp, #16
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	f107 0014 	add.w	r0, r7, #20
 8005682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	b004      	add	sp, #16
 8005692:	4770      	bx	lr

08005694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80056a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80056cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4013      	ands	r3, r2
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800570c:	b084      	sub	sp, #16
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	f107 0014 	add.w	r0, r7, #20
 800571a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	b004      	add	sp, #16
 800574a:	4770      	bx	lr

0800574c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800574c:	b480      	push	{r7}
 800574e:	b09b      	sub	sp, #108	; 0x6c
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	78db      	ldrb	r3, [r3, #3]
 800577a:	2b03      	cmp	r3, #3
 800577c:	d81f      	bhi.n	80057be <USB_ActivateEndpoint+0x72>
 800577e:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <USB_ActivateEndpoint+0x38>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	08005795 	.word	0x08005795
 8005788:	080057b1 	.word	0x080057b1
 800578c:	080057c7 	.word	0x080057c7
 8005790:	080057a3 	.word	0x080057a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005794:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800579c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80057a0:	e012      	b.n	80057c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80057a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80057aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80057ae:	e00b      	b.n	80057c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80057b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80057bc:	e004      	b.n	80057c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80057c4:	e000      	b.n	80057c8 <USB_ActivateEndpoint+0x7c>
      break;
 80057c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005800:	b29a      	uxth	r2, r3
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	4313      	orrs	r3, r2
 800580a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800581c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	b29b      	uxth	r3, r3
 800582e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	7b1b      	ldrb	r3, [r3, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f040 8149 	bne.w	8005acc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8084 	beq.w	800594c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584e:	b29b      	uxth	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	011a      	lsls	r2, r3, #4
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	88db      	ldrh	r3, [r3, #6]
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	b29b      	uxth	r3, r3
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	81fb      	strh	r3, [r7, #14]
 8005886:	89fb      	ldrh	r3, [r7, #14]
 8005888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01b      	beq.n	80058c8 <USB_ActivateEndpoint+0x17c>
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	81bb      	strh	r3, [r7, #12]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	89bb      	ldrh	r3, [r7, #12]
 80058b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	78db      	ldrb	r3, [r3, #3]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d020      	beq.n	8005912 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e6:	813b      	strh	r3, [r7, #8]
 80058e8:	893b      	ldrh	r3, [r7, #8]
 80058ea:	f083 0320 	eor.w	r3, r3, #32
 80058ee:	813b      	strh	r3, [r7, #8]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	893b      	ldrh	r3, [r7, #8]
 80058fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590c:	b29b      	uxth	r3, r3
 800590e:	8013      	strh	r3, [r2, #0]
 8005910:	e27f      	b.n	8005e12 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005928:	817b      	strh	r3, [r7, #10]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	441a      	add	r2, r3
 8005934:	897b      	ldrh	r3, [r7, #10]
 8005936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005946:	b29b      	uxth	r3, r3
 8005948:	8013      	strh	r3, [r2, #0]
 800594a:	e262      	b.n	8005e12 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005956:	b29b      	uxth	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	4413      	add	r3, r2
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	011a      	lsls	r2, r3, #4
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	4413      	add	r3, r2
 800596a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	88db      	ldrh	r3, [r3, #6]
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	4413      	add	r3, r2
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	011a      	lsls	r2, r3, #4
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	4413      	add	r3, r2
 800599e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059a2:	623b      	str	r3, [r7, #32]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d112      	bne.n	80059d2 <USB_ActivateEndpoint+0x286>
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e02f      	b.n	8005a32 <USB_ActivateEndpoint+0x2e6>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b3e      	cmp	r3, #62	; 0x3e
 80059d8:	d813      	bhi.n	8005a02 <USB_ActivateEndpoint+0x2b6>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	085b      	lsrs	r3, r3, #1
 80059e0:	663b      	str	r3, [r7, #96]	; 0x60
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <USB_ActivateEndpoint+0x2a8>
 80059ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059f0:	3301      	adds	r3, #1
 80059f2:	663b      	str	r3, [r7, #96]	; 0x60
 80059f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	029b      	lsls	r3, r3, #10
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	e017      	b.n	8005a32 <USB_ActivateEndpoint+0x2e6>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	663b      	str	r3, [r7, #96]	; 0x60
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <USB_ActivateEndpoint+0x2d0>
 8005a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	83fb      	strh	r3, [r7, #30]
 8005a40:	8bfb      	ldrh	r3, [r7, #30]
 8005a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01b      	beq.n	8005a82 <USB_ActivateEndpoint+0x336>
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a60:	83bb      	strh	r3, [r7, #28]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	441a      	add	r2, r3
 8005a6c:	8bbb      	ldrh	r3, [r7, #28]
 8005a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	837b      	strh	r3, [r7, #26]
 8005a9a:	8b7b      	ldrh	r3, [r7, #26]
 8005a9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005aa0:	837b      	strh	r3, [r7, #26]
 8005aa2:	8b7b      	ldrh	r3, [r7, #26]
 8005aa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005aa8:	837b      	strh	r3, [r7, #26]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	8b7b      	ldrh	r3, [r7, #26]
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]
 8005aca:	e1a2      	b.n	8005e12 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b18:	4413      	add	r3, r2
 8005b1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	011a      	lsls	r2, r3, #4
 8005b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	891b      	ldrh	r3, [r3, #8]
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b4c:	4413      	add	r3, r2
 8005b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	011a      	lsls	r2, r3, #4
 8005b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	895b      	ldrh	r3, [r3, #10]
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f040 8091 	bne.w	8005c9c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01b      	beq.n	8005bca <USB_ActivateEndpoint+0x47e>
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01b      	beq.n	8005c1a <USB_ActivateEndpoint+0x4ce>
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c78:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8013      	strh	r3, [r2, #0]
 8005c9a:	e0ba      	b.n	8005e12 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005cac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01d      	beq.n	8005cf4 <USB_ActivateEndpoint+0x5a8>
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01d      	beq.n	8005d4c <USB_ActivateEndpoint+0x600>
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	441a      	add	r2, r3
 8005d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	78db      	ldrb	r3, [r3, #3]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d024      	beq.n	8005d9e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d72:	f083 0320 	eor.w	r3, r3, #32
 8005d76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	441a      	add	r2, r3
 8005d84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	8013      	strh	r3, [r2, #0]
 8005d9c:	e01d      	b.n	8005dda <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	441a      	add	r2, r3
 8005dc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	376c      	adds	r7, #108	; 0x6c
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b08d      	sub	sp, #52	; 0x34
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	7b1b      	ldrb	r3, [r3, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 808e 	bne.w	8005f50 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d044      	beq.n	8005ec6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	81bb      	strh	r3, [r7, #12]
 8005e4a:	89bb      	ldrh	r3, [r7, #12]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01b      	beq.n	8005e8c <USB_DeactivateEndpoint+0x6c>
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	817b      	strh	r3, [r7, #10]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	441a      	add	r2, r3
 8005e76:	897b      	ldrh	r3, [r7, #10]
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea2:	813b      	strh	r3, [r7, #8]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	893b      	ldrh	r3, [r7, #8]
 8005eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	8013      	strh	r3, [r2, #0]
 8005ec4:	e192      	b.n	80061ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	827b      	strh	r3, [r7, #18]
 8005ed4:	8a7b      	ldrh	r3, [r7, #18]
 8005ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01b      	beq.n	8005f16 <USB_DeactivateEndpoint+0xf6>
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	823b      	strh	r3, [r7, #16]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	8a3b      	ldrh	r3, [r7, #16]
 8005f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	81fb      	strh	r3, [r7, #14]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	89fb      	ldrh	r3, [r7, #14]
 8005f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]
 8005f4e:	e14d      	b.n	80061ec <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 80a5 	bne.w	80060a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	843b      	strh	r3, [r7, #32]
 8005f68:	8c3b      	ldrh	r3, [r7, #32]
 8005f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01b      	beq.n	8005faa <USB_DeactivateEndpoint+0x18a>
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f88:	83fb      	strh	r3, [r7, #30]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	441a      	add	r2, r3
 8005f94:	8bfb      	ldrh	r3, [r7, #30]
 8005f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	83bb      	strh	r3, [r7, #28]
 8005fb8:	8bbb      	ldrh	r3, [r7, #28]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01b      	beq.n	8005ffa <USB_DeactivateEndpoint+0x1da>
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	837b      	strh	r3, [r7, #26]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	441a      	add	r2, r3
 8005fe4:	8b7b      	ldrh	r3, [r7, #26]
 8005fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006010:	833b      	strh	r3, [r7, #24]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	8b3b      	ldrh	r3, [r7, #24]
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	82fb      	strh	r3, [r7, #22]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	8afb      	ldrh	r3, [r7, #22]
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006080:	82bb      	strh	r3, [r7, #20]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	8abb      	ldrh	r3, [r7, #20]
 800608e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609e:	b29b      	uxth	r3, r3
 80060a0:	8013      	strh	r3, [r2, #0]
 80060a2:	e0a3      	b.n	80061ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80060b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01b      	beq.n	80060f4 <USB_DeactivateEndpoint+0x2d4>
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006102:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01b      	beq.n	8006144 <USB_DeactivateEndpoint+0x324>
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006122:	853b      	strh	r3, [r7, #40]	; 0x28
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	b29b      	uxth	r3, r3
 800617a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006192:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3734      	adds	r7, #52	; 0x34
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b0c4      	sub	sp, #272	; 0x110
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	6018      	str	r0, [r3, #0]
 8006202:	463b      	mov	r3, r7
 8006204:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	f040 8557 	bne.w	8006cc0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006212:	463b      	mov	r3, r7
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699a      	ldr	r2, [r3, #24]
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	429a      	cmp	r2, r3
 8006220:	d905      	bls.n	800622e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800622c:	e004      	b.n	8006238 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	7b1b      	ldrb	r3, [r3, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d12c      	bne.n	800629c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006242:	463b      	mov	r3, r7
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6959      	ldr	r1, [r3, #20]
 8006248:	463b      	mov	r3, r7
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	88da      	ldrh	r2, [r3, #6]
 800624e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006252:	b29b      	uxth	r3, r3
 8006254:	1d38      	adds	r0, r7, #4
 8006256:	6800      	ldr	r0, [r0, #0]
 8006258:	f001 fa2c 	bl	80076b4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800625c:	1d3b      	adds	r3, r7, #4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	1d3b      	adds	r3, r7, #4
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626a:	b29b      	uxth	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	463b      	mov	r3, r7
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	011a      	lsls	r2, r3, #4
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	4413      	add	r3, r2
 8006280:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006284:	f107 0310 	add.w	r3, r7, #16
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800628e:	b29a      	uxth	r2, r3
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	f000 bcdd 	b.w	8006c56 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	78db      	ldrb	r3, [r3, #3]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	f040 8347 	bne.w	8006936 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a1a      	ldr	r2, [r3, #32]
 80062ae:	463b      	mov	r3, r7
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	f240 82eb 	bls.w	8006890 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80062ba:	1d3b      	adds	r3, r7, #4
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	463b      	mov	r3, r7
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062fe:	463b      	mov	r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a1a      	ldr	r2, [r3, #32]
 8006304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006308:	1ad2      	subs	r2, r2, r3
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006310:	1d3b      	adds	r3, r7, #4
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8159 	beq.w	80065de <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d164      	bne.n	8006406 <USB_EPStartXfer+0x20e>
 800633c:	1d3b      	adds	r3, r7, #4
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	4413      	add	r3, r2
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	011a      	lsls	r2, r3, #4
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	4413      	add	r3, r2
 8006360:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
 8006366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d112      	bne.n	8006394 <USB_EPStartXfer+0x19c>
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006378:	b29a      	uxth	r2, r3
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638c:	b29a      	uxth	r2, r3
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	801a      	strh	r2, [r3, #0]
 8006392:	e054      	b.n	800643e <USB_EPStartXfer+0x246>
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006398:	2b3e      	cmp	r3, #62	; 0x3e
 800639a:	d817      	bhi.n	80063cc <USB_EPStartXfer+0x1d4>
 800639c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <USB_EPStartXfer+0x1c4>
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b6:	3301      	adds	r3, #1
 80063b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	029b      	lsls	r3, r3, #10
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e038      	b.n	800643e <USB_EPStartXfer+0x246>
 80063cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <USB_EPStartXfer+0x1f4>
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e6:	3b01      	subs	r3, #1
 80063e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	029b      	lsls	r3, r3, #10
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fe:	b29a      	uxth	r2, r3
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e01b      	b.n	800643e <USB_EPStartXfer+0x246>
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d116      	bne.n	800643e <USB_EPStartXfer+0x246>
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006418:	b29b      	uxth	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	4413      	add	r3, r2
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	011a      	lsls	r2, r3, #4
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	4413      	add	r3, r2
 800642e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006432:	633b      	str	r3, [r7, #48]	; 0x30
 8006434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006438:	b29a      	uxth	r2, r3
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	895b      	ldrh	r3, [r3, #10]
 8006444:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6959      	ldr	r1, [r3, #20]
 800644e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006452:	b29b      	uxth	r3, r3
 8006454:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006458:	1d38      	adds	r0, r7, #4
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	f001 f92a 	bl	80076b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006460:	463b      	mov	r3, r7
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800646a:	441a      	add	r2, r3
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006472:	463b      	mov	r3, r7
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	463b      	mov	r3, r7
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	429a      	cmp	r2, r3
 8006480:	d909      	bls.n	8006496 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006482:	463b      	mov	r3, r7
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a1a      	ldr	r2, [r3, #32]
 8006488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	463b      	mov	r3, r7
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	621a      	str	r2, [r3, #32]
 8006494:	e008      	b.n	80064a8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80064a0:	463b      	mov	r3, r7
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2200      	movs	r2, #0
 80064a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064a8:	463b      	mov	r3, r7
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d164      	bne.n	800657c <USB_EPStartXfer+0x384>
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	463b      	mov	r3, r7
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	011a      	lsls	r2, r3, #4
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d112      	bne.n	800650a <USB_EPStartXfer+0x312>
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006502:	b29a      	uxth	r2, r3
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	e057      	b.n	80065ba <USB_EPStartXfer+0x3c2>
 800650a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650e:	2b3e      	cmp	r3, #62	; 0x3e
 8006510:	d817      	bhi.n	8006542 <USB_EPStartXfer+0x34a>
 8006512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800651c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <USB_EPStartXfer+0x33a>
 8006528:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800652c:	3301      	adds	r3, #1
 800652e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006532:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006536:	b29b      	uxth	r3, r3
 8006538:	029b      	lsls	r3, r3, #10
 800653a:	b29a      	uxth	r2, r3
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e03b      	b.n	80065ba <USB_EPStartXfer+0x3c2>
 8006542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800654c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <USB_EPStartXfer+0x36a>
 8006558:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800655c:	3b01      	subs	r3, #1
 800655e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006562:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006566:	b29b      	uxth	r3, r3
 8006568:	029b      	lsls	r3, r3, #10
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006574:	b29a      	uxth	r2, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e01e      	b.n	80065ba <USB_EPStartXfer+0x3c2>
 800657c:	463b      	mov	r3, r7
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d119      	bne.n	80065ba <USB_EPStartXfer+0x3c2>
 8006586:	1d3b      	adds	r3, r7, #4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
 800658c:	1d3b      	adds	r3, r7, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	4413      	add	r3, r2
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	011a      	lsls	r2, r3, #4
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	4413      	add	r3, r2
 80065aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ae:	623b      	str	r3, [r7, #32]
 80065b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	891b      	ldrh	r3, [r3, #8]
 80065c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6959      	ldr	r1, [r3, #20]
 80065ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065d4:	1d38      	adds	r0, r7, #4
 80065d6:	6800      	ldr	r0, [r0, #0]
 80065d8:	f001 f86c 	bl	80076b4 <USB_WritePMA>
 80065dc:	e33b      	b.n	8006c56 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d164      	bne.n	80066b2 <USB_EPStartXfer+0x4ba>
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fc:	4413      	add	r3, r2
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	011a      	lsls	r2, r3, #4
 8006608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660a:	4413      	add	r3, r2
 800660c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006610:	64bb      	str	r3, [r7, #72]	; 0x48
 8006612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d112      	bne.n	8006640 <USB_EPStartXfer+0x448>
 800661a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006624:	b29a      	uxth	r2, r3
 8006626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006638:	b29a      	uxth	r2, r3
 800663a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e057      	b.n	80066f0 <USB_EPStartXfer+0x4f8>
 8006640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006644:	2b3e      	cmp	r3, #62	; 0x3e
 8006646:	d817      	bhi.n	8006678 <USB_EPStartXfer+0x480>
 8006648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <USB_EPStartXfer+0x470>
 800665e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006662:	3301      	adds	r3, #1
 8006664:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800666c:	b29b      	uxth	r3, r3
 800666e:	029b      	lsls	r3, r3, #10
 8006670:	b29a      	uxth	r2, r3
 8006672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e03b      	b.n	80066f0 <USB_EPStartXfer+0x4f8>
 8006678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <USB_EPStartXfer+0x4a0>
 800668e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006692:	3b01      	subs	r3, #1
 8006694:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800669c:	b29b      	uxth	r3, r3
 800669e:	029b      	lsls	r3, r3, #10
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	e01e      	b.n	80066f0 <USB_EPStartXfer+0x4f8>
 80066b2:	463b      	mov	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d119      	bne.n	80066f0 <USB_EPStartXfer+0x4f8>
 80066bc:	1d3b      	adds	r3, r7, #4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	657b      	str	r3, [r7, #84]	; 0x54
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d0:	4413      	add	r3, r2
 80066d2:	657b      	str	r3, [r7, #84]	; 0x54
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	011a      	lsls	r2, r3, #4
 80066dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066de:	4413      	add	r3, r2
 80066e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066e4:	653b      	str	r3, [r7, #80]	; 0x50
 80066e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066f0:	463b      	mov	r3, r7
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	891b      	ldrh	r3, [r3, #8]
 80066f6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006704:	b29b      	uxth	r3, r3
 8006706:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800670a:	1d38      	adds	r0, r7, #4
 800670c:	6800      	ldr	r0, [r0, #0]
 800670e:	f000 ffd1 	bl	80076b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006712:	463b      	mov	r3, r7
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800671c:	441a      	add	r2, r3
 800671e:	463b      	mov	r3, r7
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6a1a      	ldr	r2, [r3, #32]
 800672a:	463b      	mov	r3, r7
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	429a      	cmp	r2, r3
 8006732:	d909      	bls.n	8006748 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006734:	463b      	mov	r3, r7
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a1a      	ldr	r2, [r3, #32]
 800673a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800673e:	1ad2      	subs	r2, r2, r3
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	621a      	str	r2, [r3, #32]
 8006746:	e008      	b.n	800675a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006752:	463b      	mov	r3, r7
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2200      	movs	r2, #0
 8006758:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	647b      	str	r3, [r7, #68]	; 0x44
 8006760:	463b      	mov	r3, r7
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d164      	bne.n	8006834 <USB_EPStartXfer+0x63c>
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006778:	b29b      	uxth	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	4413      	add	r3, r2
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006782:	463b      	mov	r3, r7
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	011a      	lsls	r2, r3, #4
 800678a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678c:	4413      	add	r3, r2
 800678e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006792:	63bb      	str	r3, [r7, #56]	; 0x38
 8006794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d112      	bne.n	80067c2 <USB_EPStartXfer+0x5ca>
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	e054      	b.n	800686c <USB_EPStartXfer+0x674>
 80067c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c6:	2b3e      	cmp	r3, #62	; 0x3e
 80067c8:	d817      	bhi.n	80067fa <USB_EPStartXfer+0x602>
 80067ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <USB_EPStartXfer+0x5f2>
 80067e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067e4:	3301      	adds	r3, #1
 80067e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	029b      	lsls	r3, r3, #10
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	801a      	strh	r2, [r3, #0]
 80067f8:	e038      	b.n	800686c <USB_EPStartXfer+0x674>
 80067fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <USB_EPStartXfer+0x622>
 8006810:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006814:	3b01      	subs	r3, #1
 8006816:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800681a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800681e:	b29b      	uxth	r3, r3
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	b29b      	uxth	r3, r3
 8006824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682c:	b29a      	uxth	r2, r3
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	801a      	strh	r2, [r3, #0]
 8006832:	e01b      	b.n	800686c <USB_EPStartXfer+0x674>
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d116      	bne.n	800686c <USB_EPStartXfer+0x674>
 800683e:	1d3b      	adds	r3, r7, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684c:	4413      	add	r3, r2
 800684e:	647b      	str	r3, [r7, #68]	; 0x44
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	011a      	lsls	r2, r3, #4
 8006858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685a:	4413      	add	r3, r2
 800685c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006860:	643b      	str	r3, [r7, #64]	; 0x40
 8006862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006866:	b29a      	uxth	r2, r3
 8006868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	895b      	ldrh	r3, [r3, #10]
 8006872:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006876:	463b      	mov	r3, r7
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6959      	ldr	r1, [r3, #20]
 800687c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006880:	b29b      	uxth	r3, r3
 8006882:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006886:	1d38      	adds	r0, r7, #4
 8006888:	6800      	ldr	r0, [r0, #0]
 800688a:	f000 ff13 	bl	80076b4 <USB_WritePMA>
 800688e:	e1e2      	b.n	8006c56 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006890:	463b      	mov	r3, r7
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	463b      	mov	r3, r7
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80068b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	463b      	mov	r3, r7
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	441a      	add	r2, r3
 80068c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80068ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	663b      	str	r3, [r7, #96]	; 0x60
 80068e4:	1d3b      	adds	r3, r7, #4
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f2:	4413      	add	r3, r2
 80068f4:	663b      	str	r3, [r7, #96]	; 0x60
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	011a      	lsls	r2, r3, #4
 80068fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006900:	4413      	add	r3, r2
 8006902:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800690c:	b29a      	uxth	r2, r3
 800690e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006910:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006912:	463b      	mov	r3, r7
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	891b      	ldrh	r3, [r3, #8]
 8006918:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6959      	ldr	r1, [r3, #20]
 8006922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006926:	b29b      	uxth	r3, r3
 8006928:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800692c:	1d38      	adds	r0, r7, #4
 800692e:	6800      	ldr	r0, [r0, #0]
 8006930:	f000 fec0 	bl	80076b4 <USB_WritePMA>
 8006934:	e18f      	b.n	8006c56 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	463b      	mov	r3, r7
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 808f 	beq.w	8006a70 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	67bb      	str	r3, [r7, #120]	; 0x78
 8006958:	463b      	mov	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d164      	bne.n	8006a2c <USB_EPStartXfer+0x834>
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	673b      	str	r3, [r7, #112]	; 0x70
 8006968:	1d3b      	adds	r3, r7, #4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006970:	b29b      	uxth	r3, r3
 8006972:	461a      	mov	r2, r3
 8006974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006976:	4413      	add	r3, r2
 8006978:	673b      	str	r3, [r7, #112]	; 0x70
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	011a      	lsls	r2, r3, #4
 8006982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006984:	4413      	add	r3, r2
 8006986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800698a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800698c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d112      	bne.n	80069ba <USB_EPStartXfer+0x7c2>
 8006994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	e054      	b.n	8006a64 <USB_EPStartXfer+0x86c>
 80069ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069be:	2b3e      	cmp	r3, #62	; 0x3e
 80069c0:	d817      	bhi.n	80069f2 <USB_EPStartXfer+0x7fa>
 80069c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d004      	beq.n	80069e2 <USB_EPStartXfer+0x7ea>
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069dc:	3301      	adds	r3, #1
 80069de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	029b      	lsls	r3, r3, #10
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	e038      	b.n	8006a64 <USB_EPStartXfer+0x86c>
 80069f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a00:	f003 031f 	and.w	r3, r3, #31
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <USB_EPStartXfer+0x81a>
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	029b      	lsls	r3, r3, #10
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e01b      	b.n	8006a64 <USB_EPStartXfer+0x86c>
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d116      	bne.n	8006a64 <USB_EPStartXfer+0x86c>
 8006a36:	1d3b      	adds	r3, r7, #4
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a44:	4413      	add	r3, r2
 8006a46:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a48:	463b      	mov	r3, r7
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	011a      	lsls	r2, r3, #4
 8006a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a52:	4413      	add	r3, r2
 8006a54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a58:	677b      	str	r3, [r7, #116]	; 0x74
 8006a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a64:	463b      	mov	r3, r7
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	895b      	ldrh	r3, [r3, #10]
 8006a6a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006a6e:	e097      	b.n	8006ba0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a70:	463b      	mov	r3, r7
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d168      	bne.n	8006b4c <USB_EPStartXfer+0x954>
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a92:	4413      	add	r3, r2
 8006a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	011a      	lsls	r2, r3, #4
 8006aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d112      	bne.n	8006ada <USB_EPStartXfer+0x8e2>
 8006ab4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e05d      	b.n	8006b96 <USB_EPStartXfer+0x99e>
 8006ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ade:	2b3e      	cmp	r3, #62	; 0x3e
 8006ae0:	d817      	bhi.n	8006b12 <USB_EPStartXfer+0x91a>
 8006ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <USB_EPStartXfer+0x90a>
 8006af8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006afc:	3301      	adds	r3, #1
 8006afe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	029b      	lsls	r3, r3, #10
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e041      	b.n	8006b96 <USB_EPStartXfer+0x99e>
 8006b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <USB_EPStartXfer+0x93a>
 8006b28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	029b      	lsls	r3, r3, #10
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	e024      	b.n	8006b96 <USB_EPStartXfer+0x99e>
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d11f      	bne.n	8006b96 <USB_EPStartXfer+0x99e>
 8006b56:	1d3b      	adds	r3, r7, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b6e:	4413      	add	r3, r2
 8006b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b74:	463b      	mov	r3, r7
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	011a      	lsls	r2, r3, #4
 8006b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b80:	4413      	add	r3, r2
 8006b82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b96:	463b      	mov	r3, r7
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	891b      	ldrh	r3, [r3, #8]
 8006b9c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6959      	ldr	r1, [r3, #20]
 8006ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006bb0:	1d38      	adds	r0, r7, #4
 8006bb2:	6800      	ldr	r0, [r0, #0]
 8006bb4:	f000 fd7e 	bl	80076b4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006bb8:	463b      	mov	r3, r7
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d122      	bne.n	8006c08 <USB_EPStartXfer+0xa10>
 8006bc2:	1d3b      	adds	r3, r7, #4
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bdc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006be0:	1d3b      	adds	r3, r7, #4
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	463b      	mov	r3, r7
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	8013      	strh	r3, [r2, #0]
 8006c06:	e026      	b.n	8006c56 <USB_EPStartXfer+0xa5e>
 8006c08:	463b      	mov	r3, r7
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d121      	bne.n	8006c56 <USB_EPStartXfer+0xa5e>
 8006c12:	1d3b      	adds	r3, r7, #4
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	463b      	mov	r3, r7
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006c30:	1d3b      	adds	r3, r7, #4
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	463b      	mov	r3, r7
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f107 020e 	add.w	r2, r7, #14
 8006c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c74:	8013      	strh	r3, [r2, #0]
 8006c76:	f107 030e 	add.w	r3, r7, #14
 8006c7a:	f107 020e 	add.w	r2, r7, #14
 8006c7e:	8812      	ldrh	r2, [r2, #0]
 8006c80:	f082 0210 	eor.w	r2, r2, #16
 8006c84:	801a      	strh	r2, [r3, #0]
 8006c86:	f107 030e 	add.w	r3, r7, #14
 8006c8a:	f107 020e 	add.w	r2, r7, #14
 8006c8e:	8812      	ldrh	r2, [r2, #0]
 8006c90:	f082 0220 	eor.w	r2, r2, #32
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	f107 030e 	add.w	r3, r7, #14
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]
 8006cbe:	e3b5      	b.n	800742c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	7b1b      	ldrb	r3, [r3, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 8090 	bne.w	8006dec <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ccc:	463b      	mov	r3, r7
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d90e      	bls.n	8006cfa <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006ce6:	463b      	mov	r3, r7
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf0:	1ad2      	subs	r2, r2, r3
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	619a      	str	r2, [r3, #24]
 8006cf8:	e008      	b.n	8006d0c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006d04:	463b      	mov	r3, r7
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d0c:	1d3b      	adds	r3, r7, #4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d14:	1d3b      	adds	r3, r7, #4
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d24:	4413      	add	r3, r2
 8006d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	011a      	lsls	r2, r3, #4
 8006d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d36:	4413      	add	r3, r2
 8006d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d116      	bne.n	8006d76 <USB_EPStartXfer+0xb7e>
 8006d48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d5a:	801a      	strh	r2, [r3, #0]
 8006d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d72:	801a      	strh	r2, [r3, #0]
 8006d74:	e32c      	b.n	80073d0 <USB_EPStartXfer+0x11d8>
 8006d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d7c:	d818      	bhi.n	8006db0 <USB_EPStartXfer+0xbb8>
 8006d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d004      	beq.n	8006d9e <USB_EPStartXfer+0xba6>
 8006d94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d98:	3301      	adds	r3, #1
 8006d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	029b      	lsls	r3, r3, #10
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	e30f      	b.n	80073d0 <USB_EPStartXfer+0x11d8>
 8006db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <USB_EPStartXfer+0xbd8>
 8006dc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	029b      	lsls	r3, r3, #10
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	e2f1      	b.n	80073d0 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	78db      	ldrb	r3, [r3, #3]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	f040 818f 	bne.w	8007116 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d175      	bne.n	8006eee <USB_EPStartXfer+0xcf6>
 8006e02:	1d3b      	adds	r3, r7, #4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e0a:	1d3b      	adds	r3, r7, #4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e20:	463b      	mov	r3, r7
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	011a      	lsls	r2, r3, #4
 8006e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e36:	463b      	mov	r3, r7
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d116      	bne.n	8006e6e <USB_EPStartXfer+0xc76>
 8006e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	e065      	b.n	8006f3a <USB_EPStartXfer+0xd42>
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b3e      	cmp	r3, #62	; 0x3e
 8006e76:	d81a      	bhi.n	8006eae <USB_EPStartXfer+0xcb6>
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e84:	463b      	mov	r3, r7
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <USB_EPStartXfer+0xca4>
 8006e92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e96:	3301      	adds	r3, #1
 8006e98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	e045      	b.n	8006f3a <USB_EPStartXfer+0xd42>
 8006eae:	463b      	mov	r3, r7
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006eba:	463b      	mov	r3, r7
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <USB_EPStartXfer+0xcda>
 8006ec8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ed2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	029b      	lsls	r3, r3, #10
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	e025      	b.n	8006f3a <USB_EPStartXfer+0xd42>
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d120      	bne.n	8006f3a <USB_EPStartXfer+0xd42>
 8006ef8:	1d3b      	adds	r3, r7, #4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f10:	4413      	add	r3, r2
 8006f12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	011a      	lsls	r2, r3, #4
 8006f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f22:	4413      	add	r3, r2
 8006f24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f42:	463b      	mov	r3, r7
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d175      	bne.n	8007038 <USB_EPStartXfer+0xe40>
 8006f4c:	1d3b      	adds	r3, r7, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f54:	1d3b      	adds	r3, r7, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f64:	4413      	add	r3, r2
 8006f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	011a      	lsls	r2, r3, #4
 8006f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d116      	bne.n	8006fb8 <USB_EPStartXfer+0xdc0>
 8006f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f9c:	801a      	strh	r2, [r3, #0]
 8006f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	e061      	b.n	800707c <USB_EPStartXfer+0xe84>
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8006fc0:	d81a      	bhi.n	8006ff8 <USB_EPStartXfer+0xe00>
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	085b      	lsrs	r3, r3, #1
 8006fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <USB_EPStartXfer+0xdee>
 8006fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e041      	b.n	800707c <USB_EPStartXfer+0xe84>
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007004:	463b      	mov	r3, r7
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <USB_EPStartXfer+0xe24>
 8007012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007016:	3b01      	subs	r3, #1
 8007018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800701c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007020:	b29b      	uxth	r3, r3
 8007022:	029b      	lsls	r3, r3, #10
 8007024:	b29b      	uxth	r3, r3
 8007026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702e:	b29a      	uxth	r2, r3
 8007030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	e021      	b.n	800707c <USB_EPStartXfer+0xe84>
 8007038:	463b      	mov	r3, r7
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d11c      	bne.n	800707c <USB_EPStartXfer+0xe84>
 8007042:	1d3b      	adds	r3, r7, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704a:	b29b      	uxth	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007052:	4413      	add	r3, r2
 8007054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007058:	463b      	mov	r3, r7
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	011a      	lsls	r2, r3, #4
 8007060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007064:	4413      	add	r3, r2
 8007066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800706a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800706e:	463b      	mov	r3, r7
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	b29a      	uxth	r2, r3
 8007076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800707a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800707c:	463b      	mov	r3, r7
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 81a4 	beq.w	80073d0 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007088:	1d3b      	adds	r3, r7, #4
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	463b      	mov	r3, r7
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800709c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <USB_EPStartXfer+0xebc>
 80070a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10d      	bne.n	80070d0 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f040 8187 	bne.w	80073d0 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 8180 	bne.w	80073d0 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80070d0:	1d3b      	adds	r3, r7, #4
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	463b      	mov	r3, r7
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	463b      	mov	r3, r7
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	441a      	add	r2, r3
 80070fc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007110:	b29b      	uxth	r3, r3
 8007112:	8013      	strh	r3, [r2, #0]
 8007114:	e15c      	b.n	80073d0 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007116:	463b      	mov	r3, r7
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	78db      	ldrb	r3, [r3, #3]
 800711c:	2b01      	cmp	r3, #1
 800711e:	f040 8155 	bne.w	80073cc <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007122:	463b      	mov	r3, r7
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	463b      	mov	r3, r7
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d90e      	bls.n	8007150 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800713c:	463b      	mov	r3, r7
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007146:	1ad2      	subs	r2, r2, r3
 8007148:	463b      	mov	r3, r7
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	619a      	str	r2, [r3, #24]
 800714e:	e008      	b.n	8007162 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007150:	463b      	mov	r3, r7
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800715a:	463b      	mov	r3, r7
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2200      	movs	r2, #0
 8007160:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007162:	463b      	mov	r3, r7
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	785b      	ldrb	r3, [r3, #1]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d16f      	bne.n	800724c <USB_EPStartXfer+0x1054>
 800716c:	1d3b      	adds	r3, r7, #4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007174:	1d3b      	adds	r3, r7, #4
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007184:	4413      	add	r3, r2
 8007186:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800718a:	463b      	mov	r3, r7
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	011a      	lsls	r2, r3, #4
 8007192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007196:	4413      	add	r3, r2
 8007198:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800719c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d116      	bne.n	80071d6 <USB_EPStartXfer+0xfde>
 80071a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071d2:	801a      	strh	r2, [r3, #0]
 80071d4:	e05f      	b.n	8007296 <USB_EPStartXfer+0x109e>
 80071d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071da:	2b3e      	cmp	r3, #62	; 0x3e
 80071dc:	d818      	bhi.n	8007210 <USB_EPStartXfer+0x1018>
 80071de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <USB_EPStartXfer+0x1006>
 80071f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f8:	3301      	adds	r3, #1
 80071fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007202:	b29b      	uxth	r3, r3
 8007204:	029b      	lsls	r3, r3, #10
 8007206:	b29a      	uxth	r2, r3
 8007208:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	e042      	b.n	8007296 <USB_EPStartXfer+0x109e>
 8007210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800721a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	2b00      	cmp	r3, #0
 8007224:	d104      	bne.n	8007230 <USB_EPStartXfer+0x1038>
 8007226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722a:	3b01      	subs	r3, #1
 800722c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007234:	b29b      	uxth	r3, r3
 8007236:	029b      	lsls	r3, r3, #10
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29a      	uxth	r2, r3
 8007244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e024      	b.n	8007296 <USB_EPStartXfer+0x109e>
 800724c:	463b      	mov	r3, r7
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d11f      	bne.n	8007296 <USB_EPStartXfer+0x109e>
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800726e:	4413      	add	r3, r2
 8007270:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007274:	463b      	mov	r3, r7
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	011a      	lsls	r2, r3, #4
 800727c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007280:	4413      	add	r3, r2
 8007282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800728a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800728e:	b29a      	uxth	r2, r3
 8007290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	1d3b      	adds	r3, r7, #4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d16f      	bne.n	8007388 <USB_EPStartXfer+0x1190>
 80072a8:	1d3b      	adds	r3, r7, #4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072b0:	1d3b      	adds	r3, r7, #4
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	461a      	mov	r2, r3
 80072bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072c0:	4413      	add	r3, r2
 80072c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c6:	463b      	mov	r3, r7
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	011a      	lsls	r2, r3, #4
 80072ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072d2:	4413      	add	r3, r2
 80072d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d116      	bne.n	8007312 <USB_EPStartXfer+0x111a>
 80072e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007308:	b29a      	uxth	r2, r3
 800730a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e05e      	b.n	80073d0 <USB_EPStartXfer+0x11d8>
 8007312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007316:	2b3e      	cmp	r3, #62	; 0x3e
 8007318:	d818      	bhi.n	800734c <USB_EPStartXfer+0x1154>
 800731a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <USB_EPStartXfer+0x1142>
 8007330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007334:	3301      	adds	r3, #1
 8007336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800733a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733e:	b29b      	uxth	r3, r3
 8007340:	029b      	lsls	r3, r3, #10
 8007342:	b29a      	uxth	r2, r3
 8007344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	e041      	b.n	80073d0 <USB_EPStartXfer+0x11d8>
 800734c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007350:	095b      	lsrs	r3, r3, #5
 8007352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2b00      	cmp	r3, #0
 8007360:	d104      	bne.n	800736c <USB_EPStartXfer+0x1174>
 8007362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007366:	3b01      	subs	r3, #1
 8007368:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800736c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007370:	b29b      	uxth	r3, r3
 8007372:	029b      	lsls	r3, r3, #10
 8007374:	b29b      	uxth	r3, r3
 8007376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800737e:	b29a      	uxth	r2, r3
 8007380:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	e023      	b.n	80073d0 <USB_EPStartXfer+0x11d8>
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	785b      	ldrb	r3, [r3, #1]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d11e      	bne.n	80073d0 <USB_EPStartXfer+0x11d8>
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073a2:	4413      	add	r3, r2
 80073a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073a8:	463b      	mov	r3, r7
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	011a      	lsls	r2, r3, #4
 80073b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073b4:	4413      	add	r3, r2
 80073b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	e001      	b.n	80073d0 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e02e      	b.n	800742e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073d0:	1d3b      	adds	r3, r7, #4
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	463b      	mov	r3, r7
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007402:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007406:	1d3b      	adds	r3, r7, #4
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	463b      	mov	r3, r7
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	441a      	add	r2, r3
 8007414:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007428:	b29b      	uxth	r3, r3
 800742a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d020      	beq.n	800748c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007460:	81bb      	strh	r3, [r7, #12]
 8007462:	89bb      	ldrh	r3, [r7, #12]
 8007464:	f083 0310 	eor.w	r3, r3, #16
 8007468:	81bb      	strh	r3, [r7, #12]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	89bb      	ldrh	r3, [r7, #12]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
 800748a:	e01f      	b.n	80074cc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	81fb      	strh	r3, [r7, #14]
 80074a4:	89fb      	ldrh	r3, [r7, #14]
 80074a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074aa:	81fb      	strh	r3, [r7, #14]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	441a      	add	r2, r3
 80074b6:	89fb      	ldrh	r3, [r7, #14]
 80074b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	7b1b      	ldrb	r3, [r3, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 809d 	bne.w	8007626 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d04c      	beq.n	800758e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	823b      	strh	r3, [r7, #16]
 8007502:	8a3b      	ldrh	r3, [r7, #16]
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01b      	beq.n	8007544 <USB_EPClearStall+0x6c>
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	81fb      	strh	r3, [r7, #14]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	89fb      	ldrh	r3, [r7, #14]
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	78db      	ldrb	r3, [r3, #3]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d06c      	beq.n	8007626 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007562:	81bb      	strh	r3, [r7, #12]
 8007564:	89bb      	ldrh	r3, [r7, #12]
 8007566:	f083 0320 	eor.w	r3, r3, #32
 800756a:	81bb      	strh	r3, [r7, #12]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	89bb      	ldrh	r3, [r7, #12]
 8007578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007588:	b29b      	uxth	r3, r3
 800758a:	8013      	strh	r3, [r2, #0]
 800758c:	e04b      	b.n	8007626 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	82fb      	strh	r3, [r7, #22]
 800759c:	8afb      	ldrh	r3, [r7, #22]
 800759e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <USB_EPClearStall+0x106>
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075bc:	82bb      	strh	r3, [r7, #20]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8abb      	ldrh	r3, [r7, #20]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	827b      	strh	r3, [r7, #18]
 80075f6:	8a7b      	ldrh	r3, [r7, #18]
 80075f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075fc:	827b      	strh	r3, [r7, #18]
 80075fe:	8a7b      	ldrh	r3, [r7, #18]
 8007600:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007604:	827b      	strh	r3, [r7, #18]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	8a7b      	ldrh	r3, [r7, #18]
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr

08007632 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2280      	movs	r2, #128	; 0x80
 8007648:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	bc80      	pop	{r7}
 8007656:	4770      	bx	lr

08007658 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800768e:	b29b      	uxth	r3, r3
 8007690:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007692:	68fb      	ldr	r3, [r7, #12]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr

0800769e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b08d      	sub	sp, #52	; 0x34
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4611      	mov	r1, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	460b      	mov	r3, r1
 80076c4:	80fb      	strh	r3, [r7, #6]
 80076c6:	4613      	mov	r3, r2
 80076c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076ca:	88bb      	ldrh	r3, [r7, #4]
 80076cc:	3301      	adds	r3, #1
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	005a      	lsls	r2, r3, #1
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ec:	e01e      	b.n	800772c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	3301      	adds	r3, #1
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	021b      	lsls	r3, r3, #8
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	b29a      	uxth	r2, r3
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	3302      	adds	r3, #2
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	3302      	adds	r3, #2
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	3301      	adds	r3, #1
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	3b01      	subs	r3, #1
 800772a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1dd      	bne.n	80076ee <USB_WritePMA+0x3a>
  }
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	3734      	adds	r7, #52	; 0x34
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800773e:	b480      	push	{r7}
 8007740:	b08b      	sub	sp, #44	; 0x2c
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	4611      	mov	r1, r2
 800774a:	461a      	mov	r2, r3
 800774c:	460b      	mov	r3, r1
 800774e:	80fb      	strh	r3, [r7, #6]
 8007750:	4613      	mov	r3, r2
 8007752:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007754:	88bb      	ldrh	r3, [r7, #4]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	b29b      	uxth	r3, r3
 800775a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	005a      	lsls	r2, r3, #1
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007770:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
 8007776:	e01b      	b.n	80077b0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	3302      	adds	r3, #2
 8007784:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	3301      	adds	r3, #1
 8007792:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	b2da      	uxtb	r2, r3
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	3301      	adds	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	3302      	adds	r3, #2
 80077a8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	3b01      	subs	r3, #1
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e0      	bne.n	8007778 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80077b6:	88bb      	ldrh	r3, [r7, #4]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	701a      	strb	r2, [r3, #0]
  }
}
 80077d2:	bf00      	nop
 80077d4:	372c      	adds	r7, #44	; 0x2c
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr

080077dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7c1b      	ldrb	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d115      	bne.n	8007820 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f8:	2202      	movs	r2, #2
 80077fa:	2181      	movs	r1, #129	; 0x81
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fe86 	bl	800950e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800780c:	2202      	movs	r2, #2
 800780e:	2101      	movs	r1, #1
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fe7c 	bl	800950e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800781e:	e012      	b.n	8007846 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007820:	2340      	movs	r3, #64	; 0x40
 8007822:	2202      	movs	r2, #2
 8007824:	2181      	movs	r1, #129	; 0x81
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fe71 	bl	800950e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	2202      	movs	r2, #2
 8007836:	2101      	movs	r1, #1
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 fe68 	bl	800950e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007846:	2308      	movs	r3, #8
 8007848:	2203      	movs	r2, #3
 800784a:	2182      	movs	r1, #130	; 0x82
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fe5e 	bl	800950e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007858:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800785c:	f001 ff7e 	bl	800975c <USBD_static_malloc>
 8007860:	4602      	mov	r2, r0
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007872:	2301      	movs	r3, #1
 8007874:	73fb      	strb	r3, [r7, #15]
 8007876:	e026      	b.n	80078c6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7c1b      	ldrb	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ac:	2101      	movs	r1, #1
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 ff1e 	bl	80096f0 <USBD_LL_PrepareReceive>
 80078b4:	e007      	b.n	80078c6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078bc:	2340      	movs	r3, #64	; 0x40
 80078be:	2101      	movs	r1, #1
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 ff15 	bl	80096f0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078e0:	2181      	movs	r1, #129	; 0x81
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fe39 	bl	800955a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078ee:	2101      	movs	r1, #1
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 fe32 	bl	800955a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078fe:	2182      	movs	r1, #130	; 0x82
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fe2a 	bl	800955a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007926:	4618      	mov	r0, r3
 8007928:	f001 ff24 	bl	8009774 <USBD_static_free>
    pdev->pClassData = NULL;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007964:	2b00      	cmp	r3, #0
 8007966:	d039      	beq.n	80079dc <USBD_CDC_Setup+0x9e>
 8007968:	2b20      	cmp	r3, #32
 800796a:	d17f      	bne.n	8007a6c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d029      	beq.n	80079c8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b25b      	sxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	da11      	bge.n	80079a2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800798a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	88d2      	ldrh	r2, [r2, #6]
 8007990:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007992:	6939      	ldr	r1, [r7, #16]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	88db      	ldrh	r3, [r3, #6]
 8007998:	461a      	mov	r2, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fa09 	bl	8008db2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80079a0:	e06b      	b.n	8007a7a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	785a      	ldrb	r2, [r3, #1]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	88db      	ldrh	r3, [r3, #6]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079b8:	6939      	ldr	r1, [r7, #16]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	461a      	mov	r2, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fa24 	bl	8008e0e <USBD_CtlPrepareRx>
      break;
 80079c6:	e058      	b.n	8007a7a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	7850      	ldrb	r0, [r2, #1]
 80079d4:	2200      	movs	r2, #0
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	4798      	blx	r3
      break;
 80079da:	e04e      	b.n	8007a7a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b0b      	cmp	r3, #11
 80079e2:	d02e      	beq.n	8007a42 <USBD_CDC_Setup+0x104>
 80079e4:	2b0b      	cmp	r3, #11
 80079e6:	dc38      	bgt.n	8007a5a <USBD_CDC_Setup+0x11c>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <USBD_CDC_Setup+0xb4>
 80079ec:	2b0a      	cmp	r3, #10
 80079ee:	d014      	beq.n	8007a1a <USBD_CDC_Setup+0xdc>
 80079f0:	e033      	b.n	8007a5a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d107      	bne.n	8007a0c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80079fc:	f107 030c 	add.w	r3, r7, #12
 8007a00:	2202      	movs	r2, #2
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f9d4 	bl	8008db2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a0a:	e02e      	b.n	8007a6a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 f965 	bl	8008cde <USBD_CtlError>
            ret = USBD_FAIL;
 8007a14:	2302      	movs	r3, #2
 8007a16:	75fb      	strb	r3, [r7, #23]
          break;
 8007a18:	e027      	b.n	8007a6a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d107      	bne.n	8007a34 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a24:	f107 030f 	add.w	r3, r7, #15
 8007a28:	2201      	movs	r2, #1
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 f9c0 	bl	8008db2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a32:	e01a      	b.n	8007a6a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 f951 	bl	8008cde <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a40:	e013      	b.n	8007a6a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d00d      	beq.n	8007a68 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f945 	bl	8008cde <USBD_CtlError>
            ret = USBD_FAIL;
 8007a54:	2302      	movs	r3, #2
 8007a56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a58:	e006      	b.n	8007a68 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 f93e 	bl	8008cde <USBD_CtlError>
          ret = USBD_FAIL;
 8007a62:	2302      	movs	r3, #2
 8007a64:	75fb      	strb	r3, [r7, #23]
          break;
 8007a66:	e000      	b.n	8007a6a <USBD_CDC_Setup+0x12c>
          break;
 8007a68:	bf00      	nop
      }
      break;
 8007a6a:	e006      	b.n	8007a7a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 f935 	bl	8008cde <USBD_CtlError>
      ret = USBD_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	75fb      	strb	r3, [r7, #23]
      break;
 8007a78:	bf00      	nop
  }

  return ret;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a9e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d03a      	beq.n	8007b20 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	331c      	adds	r3, #28
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d029      	beq.n	8007b14 <USBD_CDC_DataIn+0x90>
 8007ac0:	78fa      	ldrb	r2, [r7, #3]
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	331c      	adds	r3, #28
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	78f9      	ldrb	r1, [r7, #3]
 8007ad4:	68b8      	ldr	r0, [r7, #8]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	4403      	add	r3, r0
 8007ae0:	3338      	adds	r3, #56	; 0x38
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ae8:	fb03 f301 	mul.w	r3, r3, r1
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d110      	bne.n	8007b14 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	331c      	adds	r3, #28
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b06:	78f9      	ldrb	r1, [r7, #3]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fdcc 	bl	80096aa <USBD_LL_Transmit>
 8007b12:	e003      	b.n	8007b1c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e000      	b.n	8007b22 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b20:	2302      	movs	r3, #2
  }
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 fdf7 	bl	8009736 <USBD_LL_GetRxDataSize>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00d      	beq.n	8007b76 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4798      	blx	r3

    return USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e000      	b.n	8007b78 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007b76:	2302      	movs	r3, #2
  }
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d015      	beq.n	8007bc6 <USBD_CDC_EP0_RxReady+0x46>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ba0:	2bff      	cmp	r3, #255	; 0xff
 8007ba2:	d010      	beq.n	8007bc6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007bb2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bba:	b292      	uxth	r2, r2
 8007bbc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	22ff      	movs	r2, #255	; 0xff
 8007bc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2243      	movs	r2, #67	; 0x43
 8007bdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007bde:	4b03      	ldr	r3, [pc, #12]	; (8007bec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20000098 	.word	0x20000098

08007bf0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2243      	movs	r2, #67	; 0x43
 8007bfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007bfe:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20000054 	.word	0x20000054

08007c10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2243      	movs	r2, #67	; 0x43
 8007c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c1e:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	200000dc 	.word	0x200000dc

08007c30 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	220a      	movs	r2, #10
 8007c3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007c3e:	4b03      	ldr	r3, [pc, #12]	; (8007c4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000010 	.word	0x20000010

08007c50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr

08007c7c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c9a:	88fa      	ldrh	r2, [r7, #6]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr

08007cae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr

08007cd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d01c      	beq.n	8007d28 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d115      	bne.n	8007d24 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2181      	movs	r1, #129	; 0x81
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fcc5 	bl	80096aa <USBD_LL_Transmit>

      return USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e002      	b.n	8007d2a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e000      	b.n	8007d2a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007d28:	2302      	movs	r3, #2
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d017      	beq.n	8007d7c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7c1b      	ldrb	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d109      	bne.n	8007d68 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d5e:	2101      	movs	r1, #1
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fcc5 	bl	80096f0 <USBD_LL_PrepareReceive>
 8007d66:	e007      	b.n	8007d78 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	2101      	movs	r1, #1
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fcbc 	bl	80096f0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e000      	b.n	8007d7e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007d7c:	2302      	movs	r3, #2
  }
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	4613      	mov	r3, r2
 8007d92:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e01a      	b.n	8007dd4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	79fa      	ldrb	r2, [r7, #7]
 8007dca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f001 fb29 	bl	8009424 <USBD_LL_Init>

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d006      	beq.n	8007dfe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e001      	b.n	8007e02 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr

08007e0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fb5e 	bl	80094d8 <USBD_LL_Start>

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr

08007e3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e46:	2302      	movs	r3, #2
 8007e48:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00c      	beq.n	8007e6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3

  return USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fed8 	bl	8008c66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d016      	beq.n	8007f08 <USBD_LL_SetupStage+0x6a>
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d81c      	bhi.n	8007f18 <USBD_LL_SetupStage+0x7a>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <USBD_LL_SetupStage+0x4a>
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d008      	beq.n	8007ef8 <USBD_LL_SetupStage+0x5a>
 8007ee6:	e017      	b.n	8007f18 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f9cb 	bl	800828c <USBD_StdDevReq>
      break;
 8007ef6:	e01a      	b.n	8007f2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fa2d 	bl	8008360 <USBD_StdItfReq>
      break;
 8007f06:	e012      	b.n	8007f2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fa6d 	bl	80083f0 <USBD_StdEPReq>
      break;
 8007f16:	e00a      	b.n	8007f2e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fb36 	bl	8009598 <USBD_LL_StallEP>
      break;
 8007f2c:	bf00      	nop
  }

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	460b      	mov	r3, r1
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d14b      	bne.n	8007fe4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d134      	bne.n	8007fc8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d919      	bls.n	8007f9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	1ad2      	subs	r2, r2, r3
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d203      	bcs.n	8007f8c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	e002      	b.n	8007f92 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 ff57 	bl	8008e4a <USBD_CtlContinueRx>
 8007f9c:	e038      	b.n	8008010 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d105      	bne.n	8007fc0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 ff54 	bl	8008e6e <USBD_CtlSendStatus>
 8007fc6:	e023      	b.n	8008010 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fce:	2b05      	cmp	r3, #5
 8007fd0:	d11e      	bne.n	8008010 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007fda:	2100      	movs	r1, #0
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 fadb 	bl	8009598 <USBD_LL_StallEP>
 8007fe2:	e015      	b.n	8008010 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00d      	beq.n	800800c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d108      	bne.n	800800c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	7afa      	ldrb	r2, [r7, #11]
 8008004:	4611      	mov	r1, r2
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	4798      	blx	r3
 800800a:	e001      	b.n	8008010 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800800c:	2302      	movs	r3, #2
 800800e:	e000      	b.n	8008012 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b086      	sub	sp, #24
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	460b      	mov	r3, r1
 8008024:	607a      	str	r2, [r7, #4]
 8008026:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008028:	7afb      	ldrb	r3, [r7, #11]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d17f      	bne.n	800812e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3314      	adds	r3, #20
 8008032:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800803a:	2b02      	cmp	r3, #2
 800803c:	d15c      	bne.n	80080f8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	429a      	cmp	r2, r3
 8008048:	d915      	bls.n	8008076 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	1ad2      	subs	r2, r2, r3
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	b29b      	uxth	r3, r3
 800805e:	461a      	mov	r2, r3
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fec1 	bl	8008dea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008068:	2300      	movs	r3, #0
 800806a:	2200      	movs	r2, #0
 800806c:	2100      	movs	r1, #0
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f001 fb3e 	bl	80096f0 <USBD_LL_PrepareReceive>
 8008074:	e04e      	b.n	8008114 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	6912      	ldr	r2, [r2, #16]
 800807e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008082:	fb02 f201 	mul.w	r2, r2, r1
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11c      	bne.n	80080c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008094:	429a      	cmp	r2, r3
 8008096:	d316      	bcc.n	80080c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d20f      	bcs.n	80080c6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080a6:	2200      	movs	r2, #0
 80080a8:	2100      	movs	r1, #0
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fe9d 	bl	8008dea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080b8:	2300      	movs	r3, #0
 80080ba:	2200      	movs	r2, #0
 80080bc:	2100      	movs	r1, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 fb16 	bl	80096f0 <USBD_LL_PrepareReceive>
 80080c4:	e026      	b.n	8008114 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d105      	bne.n	80080e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80080e8:	2180      	movs	r1, #128	; 0x80
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f001 fa54 	bl	8009598 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 fecf 	bl	8008e94 <USBD_CtlReceiveStatus>
 80080f6:	e00d      	b.n	8008114 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d004      	beq.n	800810c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800810c:	2180      	movs	r1, #128	; 0x80
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f001 fa42 	bl	8009598 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800811a:	2b01      	cmp	r3, #1
 800811c:	d11d      	bne.n	800815a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff fe81 	bl	8007e26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800812c:	e015      	b.n	800815a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00d      	beq.n	8008156 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008140:	2b03      	cmp	r3, #3
 8008142:	d108      	bne.n	8008156 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	7afa      	ldrb	r2, [r7, #11]
 800814e:	4611      	mov	r1, r2
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	4798      	blx	r3
 8008154:	e001      	b.n	800815a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008156:	2302      	movs	r3, #2
 8008158:	e000      	b.n	800815c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	2200      	movs	r2, #0
 8008170:	2100      	movs	r1, #0
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 f9cb 	bl	800950e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008188:	2340      	movs	r3, #64	; 0x40
 800818a:	2200      	movs	r2, #0
 800818c:	2180      	movs	r1, #128	; 0x80
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f9bd 	bl	800950e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2240      	movs	r2, #64	; 0x40
 800819e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6852      	ldr	r2, [r2, #4]
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	4611      	mov	r1, r2
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
  }

  return USBD_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr

08008204 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2204      	movs	r2, #4
 800821c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	bc80      	pop	{r7}
 800822a:	4770      	bx	lr

0800822c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823a:	2b04      	cmp	r3, #4
 800823c:	d105      	bne.n	800824a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	bc80      	pop	{r7}
 8008254:	4770      	bx	lr

08008256 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008264:	2b03      	cmp	r3, #3
 8008266:	d10b      	bne.n	8008280 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082a2:	2b40      	cmp	r3, #64	; 0x40
 80082a4:	d005      	beq.n	80082b2 <USBD_StdDevReq+0x26>
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	d84f      	bhi.n	800834a <USBD_StdDevReq+0xbe>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <USBD_StdDevReq+0x36>
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	d14b      	bne.n	800834a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	4798      	blx	r3
      break;
 80082c0:	e048      	b.n	8008354 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b09      	cmp	r3, #9
 80082c8:	d839      	bhi.n	800833e <USBD_StdDevReq+0xb2>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <USBD_StdDevReq+0x44>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008335 	.word	0x08008335
 80082d8:	0800833f 	.word	0x0800833f
 80082dc:	0800832b 	.word	0x0800832b
 80082e0:	0800833f 	.word	0x0800833f
 80082e4:	08008303 	.word	0x08008303
 80082e8:	080082f9 	.word	0x080082f9
 80082ec:	0800833f 	.word	0x0800833f
 80082f0:	08008317 	.word	0x08008317
 80082f4:	0800830d 	.word	0x0800830d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9dc 	bl	80086b8 <USBD_GetDescriptor>
          break;
 8008300:	e022      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fb3f 	bl	8008988 <USBD_SetAddress>
          break;
 800830a:	e01d      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fb7e 	bl	8008a10 <USBD_SetConfig>
          break;
 8008314:	e018      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fc07 	bl	8008b2c <USBD_GetConfig>
          break;
 800831e:	e013      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc37 	bl	8008b96 <USBD_GetStatus>
          break;
 8008328:	e00e      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fc65 	bl	8008bfc <USBD_SetFeature>
          break;
 8008332:	e009      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fc74 	bl	8008c24 <USBD_ClrFeature>
          break;
 800833c:	e004      	b.n	8008348 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fccc 	bl	8008cde <USBD_CtlError>
          break;
 8008346:	bf00      	nop
      }
      break;
 8008348:	e004      	b.n	8008354 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fcc6 	bl	8008cde <USBD_CtlError>
      break;
 8008352:	bf00      	nop
  }

  return ret;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop

08008360 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d005      	beq.n	8008386 <USBD_StdItfReq+0x26>
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d82e      	bhi.n	80083dc <USBD_StdItfReq+0x7c>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <USBD_StdItfReq+0x26>
 8008382:	2b20      	cmp	r3, #32
 8008384:	d12a      	bne.n	80083dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838c:	3b01      	subs	r3, #1
 800838e:	2b02      	cmp	r3, #2
 8008390:	d81d      	bhi.n	80083ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	889b      	ldrh	r3, [r3, #4]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b01      	cmp	r3, #1
 800839a:	d813      	bhi.n	80083c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4798      	blx	r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	88db      	ldrh	r3, [r3, #6]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d110      	bne.n	80083d8 <USBD_StdItfReq+0x78>
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10d      	bne.n	80083d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fd56 	bl	8008e6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083c2:	e009      	b.n	80083d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fc89 	bl	8008cde <USBD_CtlError>
          break;
 80083cc:	e004      	b.n	80083d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fc84 	bl	8008cde <USBD_CtlError>
          break;
 80083d6:	e000      	b.n	80083da <USBD_StdItfReq+0x7a>
          break;
 80083d8:	bf00      	nop
      }
      break;
 80083da:	e004      	b.n	80083e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fc7d 	bl	8008cde <USBD_CtlError>
      break;
 80083e4:	bf00      	nop
  }

  return USBD_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	889b      	ldrh	r3, [r3, #4]
 8008402:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800840c:	2b40      	cmp	r3, #64	; 0x40
 800840e:	d007      	beq.n	8008420 <USBD_StdEPReq+0x30>
 8008410:	2b40      	cmp	r3, #64	; 0x40
 8008412:	f200 8146 	bhi.w	80086a2 <USBD_StdEPReq+0x2b2>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <USBD_StdEPReq+0x40>
 800841a:	2b20      	cmp	r3, #32
 800841c:	f040 8141 	bne.w	80086a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
      break;
 800842e:	e13d      	b.n	80086ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008438:	2b20      	cmp	r3, #32
 800843a:	d10a      	bne.n	8008452 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	4603      	mov	r3, r0
 800844c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	e12d      	b.n	80086ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d007      	beq.n	800846a <USBD_StdEPReq+0x7a>
 800845a:	2b03      	cmp	r3, #3
 800845c:	f300 811b 	bgt.w	8008696 <USBD_StdEPReq+0x2a6>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d072      	beq.n	800854a <USBD_StdEPReq+0x15a>
 8008464:	2b01      	cmp	r3, #1
 8008466:	d03a      	beq.n	80084de <USBD_StdEPReq+0xee>
 8008468:	e115      	b.n	8008696 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008470:	2b02      	cmp	r3, #2
 8008472:	d002      	beq.n	800847a <USBD_StdEPReq+0x8a>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d015      	beq.n	80084a4 <USBD_StdEPReq+0xb4>
 8008478:	e02b      	b.n	80084d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00c      	beq.n	800849a <USBD_StdEPReq+0xaa>
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d009      	beq.n	800849a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 f884 	bl	8009598 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008490:	2180      	movs	r1, #128	; 0x80
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 f880 	bl	8009598 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008498:	e020      	b.n	80084dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fc1e 	bl	8008cde <USBD_CtlError>
              break;
 80084a2:	e01b      	b.n	80084dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	885b      	ldrh	r3, [r3, #2]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10e      	bne.n	80084ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <USBD_StdEPReq+0xda>
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b80      	cmp	r3, #128	; 0x80
 80084b6:	d008      	beq.n	80084ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	88db      	ldrh	r3, [r3, #6]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f867 	bl	8009598 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fccf 	bl	8008e6e <USBD_CtlSendStatus>

              break;
 80084d0:	e004      	b.n	80084dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc02 	bl	8008cde <USBD_CtlError>
              break;
 80084da:	bf00      	nop
          }
          break;
 80084dc:	e0e0      	b.n	80086a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d002      	beq.n	80084ee <USBD_StdEPReq+0xfe>
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d015      	beq.n	8008518 <USBD_StdEPReq+0x128>
 80084ec:	e026      	b.n	800853c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <USBD_StdEPReq+0x11e>
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d009      	beq.n	800850e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 f84a 	bl	8009598 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008504:	2180      	movs	r1, #128	; 0x80
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 f846 	bl	8009598 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800850c:	e01c      	b.n	8008548 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fbe4 	bl	8008cde <USBD_CtlError>
              break;
 8008516:	e017      	b.n	8008548 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	885b      	ldrh	r3, [r3, #2]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d112      	bne.n	8008546 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f001 f851 	bl	80095d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fc9a 	bl	8008e6e <USBD_CtlSendStatus>
              }
              break;
 800853a:	e004      	b.n	8008546 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fbcd 	bl	8008cde <USBD_CtlError>
              break;
 8008544:	e000      	b.n	8008548 <USBD_StdEPReq+0x158>
              break;
 8008546:	bf00      	nop
          }
          break;
 8008548:	e0aa      	b.n	80086a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	2b02      	cmp	r3, #2
 8008552:	d002      	beq.n	800855a <USBD_StdEPReq+0x16a>
 8008554:	2b03      	cmp	r3, #3
 8008556:	d032      	beq.n	80085be <USBD_StdEPReq+0x1ce>
 8008558:	e097      	b.n	800868a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d007      	beq.n	8008570 <USBD_StdEPReq+0x180>
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b80      	cmp	r3, #128	; 0x80
 8008564:	d004      	beq.n	8008570 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fbb8 	bl	8008cde <USBD_CtlError>
                break;
 800856e:	e091      	b.n	8008694 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008574:	2b00      	cmp	r3, #0
 8008576:	da0b      	bge.n	8008590 <USBD_StdEPReq+0x1a0>
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800857e:	4613      	mov	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	3310      	adds	r3, #16
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	4413      	add	r3, r2
 800858c:	3304      	adds	r3, #4
 800858e:	e00b      	b.n	80085a8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	3304      	adds	r3, #4
 80085a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2202      	movs	r2, #2
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fbfb 	bl	8008db2 <USBD_CtlSendData>
              break;
 80085bc:	e06a      	b.n	8008694 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	da11      	bge.n	80085ea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	f003 020f 	and.w	r2, r3, #15
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	3318      	adds	r3, #24
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d117      	bne.n	8008610 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fb7b 	bl	8008cde <USBD_CtlError>
                  break;
 80085e8:	e054      	b.n	8008694 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	f003 020f 	and.w	r2, r3, #15
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d104      	bne.n	8008610 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fb68 	bl	8008cde <USBD_CtlError>
                  break;
 800860e:	e041      	b.n	8008694 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008614:	2b00      	cmp	r3, #0
 8008616:	da0b      	bge.n	8008630 <USBD_StdEPReq+0x240>
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	3310      	adds	r3, #16
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	4413      	add	r3, r2
 800862c:	3304      	adds	r3, #4
 800862e:	e00b      	b.n	8008648 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	3304      	adds	r3, #4
 8008648:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <USBD_StdEPReq+0x266>
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d103      	bne.n	800865e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	e00e      	b.n	800867c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 ffd6 	bl	8009614 <USBD_LL_IsStallEP>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e002      	b.n	800867c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2202      	movs	r2, #2
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fb95 	bl	8008db2 <USBD_CtlSendData>
              break;
 8008688:	e004      	b.n	8008694 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fb26 	bl	8008cde <USBD_CtlError>
              break;
 8008692:	bf00      	nop
          }
          break;
 8008694:	e004      	b.n	80086a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fb20 	bl	8008cde <USBD_CtlError>
          break;
 800869e:	bf00      	nop
      }
      break;
 80086a0:	e004      	b.n	80086ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fb1a 	bl	8008cde <USBD_CtlError>
      break;
 80086aa:	bf00      	nop
  }

  return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	885b      	ldrh	r3, [r3, #2]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b06      	cmp	r3, #6
 80086da:	f200 8128 	bhi.w	800892e <USBD_GetDescriptor+0x276>
 80086de:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <USBD_GetDescriptor+0x2c>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008719 	.word	0x08008719
 80086ec:	08008759 	.word	0x08008759
 80086f0:	0800892f 	.word	0x0800892f
 80086f4:	0800892f 	.word	0x0800892f
 80086f8:	080088cf 	.word	0x080088cf
 80086fc:	080088fb 	.word	0x080088fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
      break;
 8008716:	e112      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7c1b      	ldrb	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10d      	bne.n	800873c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	f107 0208 	add.w	r2, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	2202      	movs	r2, #2
 8008738:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800873a:	e100      	b.n	800893e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	f107 0208 	add.w	r2, r7, #8
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
 800874c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	2202      	movs	r2, #2
 8008754:	701a      	strb	r2, [r3, #0]
      break;
 8008756:	e0f2      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	885b      	ldrh	r3, [r3, #2]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b05      	cmp	r3, #5
 8008760:	f200 80ac 	bhi.w	80088bc <USBD_GetDescriptor+0x204>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <USBD_GetDescriptor+0xb4>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	08008785 	.word	0x08008785
 8008770:	080087b9 	.word	0x080087b9
 8008774:	080087ed 	.word	0x080087ed
 8008778:	08008821 	.word	0x08008821
 800877c:	08008855 	.word	0x08008855
 8008780:	08008889 	.word	0x08008889
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a6:	e091      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa97 	bl	8008cde <USBD_CtlError>
            err++;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	3301      	adds	r3, #1
 80087b4:	72fb      	strb	r3, [r7, #11]
          break;
 80087b6:	e089      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	7c12      	ldrb	r2, [r2, #16]
 80087d0:	f107 0108 	add.w	r1, r7, #8
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3
 80087d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087da:	e077      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa7d 	bl	8008cde <USBD_CtlError>
            err++;
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	3301      	adds	r3, #1
 80087e8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ea:	e06f      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880e:	e05d      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa63 	bl	8008cde <USBD_CtlError>
            err++;
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
          break;
 800881e:	e055      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008842:	e043      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa49 	bl	8008cde <USBD_CtlError>
            err++;
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	3301      	adds	r3, #1
 8008850:	72fb      	strb	r3, [r7, #11]
          break;
 8008852:	e03b      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008876:	e029      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa2f 	bl	8008cde <USBD_CtlError>
            err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
          break;
 8008886:	e021      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7c12      	ldrb	r2, [r2, #16]
 80088a0:	f107 0108 	add.w	r1, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088aa:	e00f      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fa15 	bl	8008cde <USBD_CtlError>
            err++;
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	3301      	adds	r3, #1
 80088b8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ba:	e007      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa0d 	bl	8008cde <USBD_CtlError>
          err++;
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	3301      	adds	r3, #1
 80088c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80088ca:	e038      	b.n	800893e <USBD_GetDescriptor+0x286>
 80088cc:	e037      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7c1b      	ldrb	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d109      	bne.n	80088ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f107 0208 	add.w	r2, r7, #8
 80088e2:	4610      	mov	r0, r2
 80088e4:	4798      	blx	r3
 80088e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088e8:	e029      	b.n	800893e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f9f6 	bl	8008cde <USBD_CtlError>
        err++;
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	3301      	adds	r3, #1
 80088f6:	72fb      	strb	r3, [r7, #11]
      break;
 80088f8:	e021      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7c1b      	ldrb	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10d      	bne.n	800891e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	f107 0208 	add.w	r2, r7, #8
 800890e:	4610      	mov	r0, r2
 8008910:	4798      	blx	r3
 8008912:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3301      	adds	r3, #1
 8008918:	2207      	movs	r2, #7
 800891a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800891c:	e00f      	b.n	800893e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f9dc 	bl	8008cde <USBD_CtlError>
        err++;
 8008926:	7afb      	ldrb	r3, [r7, #11]
 8008928:	3301      	adds	r3, #1
 800892a:	72fb      	strb	r3, [r7, #11]
      break;
 800892c:	e007      	b.n	800893e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f9d4 	bl	8008cde <USBD_CtlError>
      err++;
 8008936:	7afb      	ldrb	r3, [r7, #11]
 8008938:	3301      	adds	r3, #1
 800893a:	72fb      	strb	r3, [r7, #11]
      break;
 800893c:	bf00      	nop
  }

  if (err != 0U)
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d11c      	bne.n	800897e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008944:	893b      	ldrh	r3, [r7, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d011      	beq.n	800896e <USBD_GetDescriptor+0x2b6>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	88db      	ldrh	r3, [r3, #6]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00d      	beq.n	800896e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	88da      	ldrh	r2, [r3, #6]
 8008956:	893b      	ldrh	r3, [r7, #8]
 8008958:	4293      	cmp	r3, r2
 800895a:	bf28      	it	cs
 800895c:	4613      	movcs	r3, r2
 800895e:	b29b      	uxth	r3, r3
 8008960:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008962:	893b      	ldrh	r3, [r7, #8]
 8008964:	461a      	mov	r2, r3
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa22 	bl	8008db2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d104      	bne.n	8008980 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa79 	bl	8008e6e <USBD_CtlSendStatus>
 800897c:	e000      	b.n	8008980 <USBD_GetDescriptor+0x2c8>
    return;
 800897e:	bf00      	nop
    }
  }
}
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop

08008988 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	889b      	ldrh	r3, [r3, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d130      	bne.n	80089fc <USBD_SetAddress+0x74>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	88db      	ldrh	r3, [r3, #6]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d12c      	bne.n	80089fc <USBD_SetAddress+0x74>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	885b      	ldrh	r3, [r3, #2]
 80089a6:	2b7f      	cmp	r3, #127	; 0x7f
 80089a8:	d828      	bhi.n	80089fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d104      	bne.n	80089ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f98b 	bl	8008cde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c8:	e01d      	b.n	8008a06 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	7bfa      	ldrb	r2, [r7, #15]
 80089ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fe48 	bl	800966c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fa46 	bl	8008e6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f0:	e009      	b.n	8008a06 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fa:	e004      	b.n	8008a06 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f96d 	bl	8008cde <USBD_CtlError>
  }
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	885b      	ldrh	r3, [r3, #2]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	4b41      	ldr	r3, [pc, #260]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a24:	4b40      	ldr	r3, [pc, #256]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d904      	bls.n	8008a36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f955 	bl	8008cde <USBD_CtlError>
 8008a34:	e075      	b.n	8008b22 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d002      	beq.n	8008a46 <USBD_SetConfig+0x36>
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d023      	beq.n	8008a8c <USBD_SetConfig+0x7c>
 8008a44:	e062      	b.n	8008b0c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a46:	4b38      	ldr	r3, [pc, #224]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d01a      	beq.n	8008a84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008a4e:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a60:	4b31      	ldr	r3, [pc, #196]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff f9e7 	bl	8007e3a <USBD_SetClassConfig>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d104      	bne.n	8008a7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f932 	bl	8008cde <USBD_CtlError>
            return;
 8008a7a:	e052      	b.n	8008b22 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f9f6 	bl	8008e6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a82:	e04e      	b.n	8008b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9f2 	bl	8008e6e <USBD_CtlSendStatus>
        break;
 8008a8a:	e04a      	b.n	8008b22 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008a8c:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d112      	bne.n	8008aba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008a9c:	4b22      	ldr	r3, [pc, #136]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008aa6:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <USBD_SetConfig+0x118>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff f9e3 	bl	8007e78 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9db 	bl	8008e6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ab8:	e033      	b.n	8008b22 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008aba:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <USBD_SetConfig+0x118>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d01d      	beq.n	8008b04 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff f9d1 	bl	8007e78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <USBD_SetConfig+0x118>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ae0:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <USBD_SetConfig+0x118>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff f9a7 	bl	8007e3a <USBD_SetClassConfig>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d104      	bne.n	8008afc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f8f2 	bl	8008cde <USBD_CtlError>
            return;
 8008afa:	e012      	b.n	8008b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f9b6 	bl	8008e6e <USBD_CtlSendStatus>
        break;
 8008b02:	e00e      	b.n	8008b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f9b2 	bl	8008e6e <USBD_CtlSendStatus>
        break;
 8008b0a:	e00a      	b.n	8008b22 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f8e5 	bl	8008cde <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <USBD_SetConfig+0x118>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff f9ac 	bl	8007e78 <USBD_ClrClassConfig>
        break;
 8008b20:	bf00      	nop
    }
  }
}
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000244 	.word	0x20000244

08008b2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	88db      	ldrh	r3, [r3, #6]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d004      	beq.n	8008b48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f8cc 	bl	8008cde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b46:	e022      	b.n	8008b8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	dc02      	bgt.n	8008b58 <USBD_GetConfig+0x2c>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dc03      	bgt.n	8008b5e <USBD_GetConfig+0x32>
 8008b56:	e015      	b.n	8008b84 <USBD_GetConfig+0x58>
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetConfig+0x48>
 8008b5c:	e012      	b.n	8008b84 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3308      	adds	r3, #8
 8008b68:	2201      	movs	r2, #1
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f920 	bl	8008db2 <USBD_CtlSendData>
        break;
 8008b72:	e00c      	b.n	8008b8e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3304      	adds	r3, #4
 8008b78:	2201      	movs	r2, #1
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f918 	bl	8008db2 <USBD_CtlSendData>
        break;
 8008b82:	e004      	b.n	8008b8e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f8a9 	bl	8008cde <USBD_CtlError>
        break;
 8008b8c:	bf00      	nop
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d81e      	bhi.n	8008bea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	88db      	ldrh	r3, [r3, #6]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d004      	beq.n	8008bbe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f891 	bl	8008cde <USBD_CtlError>
        break;
 8008bbc:	e01a      	b.n	8008bf4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f043 0202 	orr.w	r2, r3, #2
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	2202      	movs	r2, #2
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8e5 	bl	8008db2 <USBD_CtlSendData>
      break;
 8008be8:	e004      	b.n	8008bf4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f876 	bl	8008cde <USBD_CtlError>
      break;
 8008bf2:	bf00      	nop
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d106      	bne.n	8008c1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f929 	bl	8008e6e <USBD_CtlSendStatus>
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c34:	3b01      	subs	r3, #1
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d80b      	bhi.n	8008c52 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d10c      	bne.n	8008c5c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f90f 	bl	8008e6e <USBD_CtlSendStatus>
      }
      break;
 8008c50:	e004      	b.n	8008c5c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f842 	bl	8008cde <USBD_CtlError>
      break;
 8008c5a:	e000      	b.n	8008c5e <USBD_ClrFeature+0x3a>
      break;
 8008c5c:	bf00      	nop
  }
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	785a      	ldrb	r2, [r3, #1]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	3302      	adds	r3, #2
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	3303      	adds	r3, #3
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4413      	add	r3, r2
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	3305      	adds	r3, #5
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	3306      	adds	r3, #6
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	3307      	adds	r3, #7
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	021b      	lsls	r3, r3, #8
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	4413      	add	r3, r2
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	80da      	strh	r2, [r3, #6]

}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bc80      	pop	{r7}
 8008cdc:	4770      	bx	lr

08008cde <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ce8:	2180      	movs	r1, #128	; 0x80
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fc54 	bl	8009598 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fc50 	bl	8009598 <USBD_LL_StallEP>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d032      	beq.n	8008d7c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f834 	bl	8008d84 <USBD_GetLen>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	3301      	adds	r3, #1
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	75fa      	strb	r2, [r7, #23]
 8008d30:	461a      	mov	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	4413      	add	r3, r2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	7812      	ldrb	r2, [r2, #0]
 8008d3a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	75fa      	strb	r2, [r7, #23]
 8008d42:	461a      	mov	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4413      	add	r3, r2
 8008d48:	2203      	movs	r2, #3
 8008d4a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008d4c:	e012      	b.n	8008d74 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	60fa      	str	r2, [r7, #12]
 8008d54:	7dfa      	ldrb	r2, [r7, #23]
 8008d56:	1c51      	adds	r1, r2, #1
 8008d58:	75f9      	strb	r1, [r7, #23]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	440a      	add	r2, r1
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	75fa      	strb	r2, [r7, #23]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	4413      	add	r3, r2
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e8      	bne.n	8008d4e <USBD_GetString+0x4e>
    }
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008d90:	e005      	b.n	8008d9e <USBD_GetLen+0x1a>
  {
    len++;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	3301      	adds	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1f5      	bne.n	8008d92 <USBD_GetLen+0xe>
  }

  return len;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008dc8:	88fa      	ldrh	r2, [r7, #6]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008dce:	88fa      	ldrh	r2, [r7, #6]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dd4:	88fb      	ldrh	r3, [r7, #6]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fc65 	bl	80096aa <USBD_LL_Transmit>

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	4613      	mov	r3, r2
 8008df6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008df8:	88fb      	ldrh	r3, [r7, #6]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fc53 	bl	80096aa <USBD_LL_Transmit>

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2203      	movs	r2, #3
 8008e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e24:	88fa      	ldrh	r2, [r7, #6]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008e2c:	88fa      	ldrh	r2, [r7, #6]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	2100      	movs	r1, #0
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fc58 	bl	80096f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	4613      	mov	r3, r2
 8008e56:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 fc46 	bl	80096f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2204      	movs	r2, #4
 8008e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2200      	movs	r2, #0
 8008e82:	2100      	movs	r1, #0
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fc10 	bl	80096aa <USBD_LL_Transmit>

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2205      	movs	r2, #5
 8008ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fc20 	bl	80096f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4912      	ldr	r1, [pc, #72]	; (8008f0c <MX_USB_DEVICE_Init+0x50>)
 8008ec4:	4812      	ldr	r0, [pc, #72]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008ec6:	f7fe ff5e 	bl	8007d86 <USBD_Init>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ed0:	f7f8 fd48 	bl	8001964 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ed4:	490f      	ldr	r1, [pc, #60]	; (8008f14 <MX_USB_DEVICE_Init+0x58>)
 8008ed6:	480e      	ldr	r0, [pc, #56]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008ed8:	f7fe ff80 	bl	8007ddc <USBD_RegisterClass>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ee2:	f7f8 fd3f 	bl	8001964 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ee6:	490c      	ldr	r1, [pc, #48]	; (8008f18 <MX_USB_DEVICE_Init+0x5c>)
 8008ee8:	4809      	ldr	r0, [pc, #36]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008eea:	f7fe feb1 	bl	8007c50 <USBD_CDC_RegisterInterface>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ef4:	f7f8 fd36 	bl	8001964 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008efa:	f7fe ff88 	bl	8007e0e <USBD_Start>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f04:	f7f8 fd2e 	bl	8001964 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f08:	bf00      	nop
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20000130 	.word	0x20000130
 8008f10:	20000524 	.word	0x20000524
 8008f14:	2000001c 	.word	0x2000001c
 8008f18:	20000120 	.word	0x20000120

08008f1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f20:	2200      	movs	r2, #0
 8008f22:	4905      	ldr	r1, [pc, #20]	; (8008f38 <CDC_Init_FS+0x1c>)
 8008f24:	4805      	ldr	r0, [pc, #20]	; (8008f3c <CDC_Init_FS+0x20>)
 8008f26:	f7fe fea9 	bl	8007c7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f2a:	4905      	ldr	r1, [pc, #20]	; (8008f40 <CDC_Init_FS+0x24>)
 8008f2c:	4803      	ldr	r0, [pc, #12]	; (8008f3c <CDC_Init_FS+0x20>)
 8008f2e:	f7fe febe 	bl	8007cae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20000bd0 	.word	0x20000bd0
 8008f3c:	20000524 	.word	0x20000524
 8008f40:	200007e8 	.word	0x200007e8

08008f44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr
	...

08008f54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6039      	str	r1, [r7, #0]
 8008f5e:	71fb      	strb	r3, [r7, #7]
 8008f60:	4613      	mov	r3, r2
 8008f62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	2b23      	cmp	r3, #35	; 0x23
 8008f68:	d84a      	bhi.n	8009000 <CDC_Control_FS+0xac>
 8008f6a:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <CDC_Control_FS+0x1c>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08009001 	.word	0x08009001
 8008f74:	08009001 	.word	0x08009001
 8008f78:	08009001 	.word	0x08009001
 8008f7c:	08009001 	.word	0x08009001
 8008f80:	08009001 	.word	0x08009001
 8008f84:	08009001 	.word	0x08009001
 8008f88:	08009001 	.word	0x08009001
 8008f8c:	08009001 	.word	0x08009001
 8008f90:	08009001 	.word	0x08009001
 8008f94:	08009001 	.word	0x08009001
 8008f98:	08009001 	.word	0x08009001
 8008f9c:	08009001 	.word	0x08009001
 8008fa0:	08009001 	.word	0x08009001
 8008fa4:	08009001 	.word	0x08009001
 8008fa8:	08009001 	.word	0x08009001
 8008fac:	08009001 	.word	0x08009001
 8008fb0:	08009001 	.word	0x08009001
 8008fb4:	08009001 	.word	0x08009001
 8008fb8:	08009001 	.word	0x08009001
 8008fbc:	08009001 	.word	0x08009001
 8008fc0:	08009001 	.word	0x08009001
 8008fc4:	08009001 	.word	0x08009001
 8008fc8:	08009001 	.word	0x08009001
 8008fcc:	08009001 	.word	0x08009001
 8008fd0:	08009001 	.word	0x08009001
 8008fd4:	08009001 	.word	0x08009001
 8008fd8:	08009001 	.word	0x08009001
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	08009001 	.word	0x08009001
 8008fe8:	08009001 	.word	0x08009001
 8008fec:	08009001 	.word	0x08009001
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	08009001 	.word	0x08009001
 8008ff8:	08009001 	.word	0x08009001
 8008ffc:	08009001 	.word	0x08009001
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009000:	bf00      	nop
  }

  return (USBD_OK);
 8009002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop

08009010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4805      	ldr	r0, [pc, #20]	; (8009034 <CDC_Receive_FS+0x24>)
 800901e:	f7fe fe46 	bl	8007cae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009022:	4804      	ldr	r0, [pc, #16]	; (8009034 <CDC_Receive_FS+0x24>)
 8009024:	f7fe fe85 	bl	8007d32 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009028:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000524 	.word	0x20000524

08009038 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <CDC_Transmit_FS+0x48>)
 800904a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800905a:	2301      	movs	r3, #1
 800905c:	e00b      	b.n	8009076 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800905e:	887b      	ldrh	r3, [r7, #2]
 8009060:	461a      	mov	r2, r3
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	4806      	ldr	r0, [pc, #24]	; (8009080 <CDC_Transmit_FS+0x48>)
 8009066:	f7fe fe09 	bl	8007c7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800906a:	4805      	ldr	r0, [pc, #20]	; (8009080 <CDC_Transmit_FS+0x48>)
 800906c:	f7fe fe32 	bl	8007cd4 <USBD_CDC_TransmitPacket>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20000524 	.word	0x20000524

08009084 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	6039      	str	r1, [r7, #0]
 800908e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2212      	movs	r2, #18
 8009094:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009096:	4b03      	ldr	r3, [pc, #12]	; (80090a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	2000014c 	.word	0x2000014c

080090a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	6039      	str	r1, [r7, #0]
 80090b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2204      	movs	r2, #4
 80090b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090ba:	4b03      	ldr	r3, [pc, #12]	; (80090c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	20000160 	.word	0x20000160

080090cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4907      	ldr	r1, [pc, #28]	; (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
 80090e2:	4808      	ldr	r0, [pc, #32]	; (8009104 <USBD_FS_ProductStrDescriptor+0x38>)
 80090e4:	f7ff fe0c 	bl	8008d00 <USBD_GetString>
 80090e8:	e004      	b.n	80090f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	4904      	ldr	r1, [pc, #16]	; (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
 80090ee:	4805      	ldr	r0, [pc, #20]	; (8009104 <USBD_FS_ProductStrDescriptor+0x38>)
 80090f0:	f7ff fe06 	bl	8008d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090f4:	4b02      	ldr	r3, [pc, #8]	; (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000fb8 	.word	0x20000fb8
 8009104:	0800b0bc 	.word	0x0800b0bc

08009108 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	6039      	str	r1, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	4904      	ldr	r1, [pc, #16]	; (8009128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009118:	4804      	ldr	r0, [pc, #16]	; (800912c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800911a:	f7ff fdf1 	bl	8008d00 <USBD_GetString>
  return USBD_StrDesc;
 800911e:	4b02      	ldr	r3, [pc, #8]	; (8009128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20000fb8 	.word	0x20000fb8
 800912c:	0800b0d8 	.word	0x0800b0d8

08009130 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	221a      	movs	r2, #26
 8009140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009142:	f000 f843 	bl	80091cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009146:	4b02      	ldr	r3, [pc, #8]	; (8009150 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20000164 	.word	0x20000164

08009154 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4907      	ldr	r1, [pc, #28]	; (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
 800916a:	4808      	ldr	r0, [pc, #32]	; (800918c <USBD_FS_ConfigStrDescriptor+0x38>)
 800916c:	f7ff fdc8 	bl	8008d00 <USBD_GetString>
 8009170:	e004      	b.n	800917c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4904      	ldr	r1, [pc, #16]	; (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009176:	4805      	ldr	r0, [pc, #20]	; (800918c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009178:	f7ff fdc2 	bl	8008d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000fb8 	.word	0x20000fb8
 800918c:	0800b0ec 	.word	0x0800b0ec

08009190 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d105      	bne.n	80091ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4907      	ldr	r1, [pc, #28]	; (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091a6:	4808      	ldr	r0, [pc, #32]	; (80091c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091a8:	f7ff fdaa 	bl	8008d00 <USBD_GetString>
 80091ac:	e004      	b.n	80091b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	4904      	ldr	r1, [pc, #16]	; (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091b2:	4805      	ldr	r0, [pc, #20]	; (80091c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091b4:	f7ff fda4 	bl	8008d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091b8:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000fb8 	.word	0x20000fb8
 80091c8:	0800b0f8 	.word	0x0800b0f8

080091cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <Get_SerialNum+0x44>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091d8:	4b0e      	ldr	r3, [pc, #56]	; (8009214 <Get_SerialNum+0x48>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091de:	4b0e      	ldr	r3, [pc, #56]	; (8009218 <Get_SerialNum+0x4c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4413      	add	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091f2:	2208      	movs	r2, #8
 80091f4:	4909      	ldr	r1, [pc, #36]	; (800921c <Get_SerialNum+0x50>)
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 f814 	bl	8009224 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091fc:	2204      	movs	r2, #4
 80091fe:	4908      	ldr	r1, [pc, #32]	; (8009220 <Get_SerialNum+0x54>)
 8009200:	68b8      	ldr	r0, [r7, #8]
 8009202:	f000 f80f 	bl	8009224 <IntToUnicode>
  }
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	1ffff7e8 	.word	0x1ffff7e8
 8009214:	1ffff7ec 	.word	0x1ffff7ec
 8009218:	1ffff7f0 	.word	0x1ffff7f0
 800921c:	20000166 	.word	0x20000166
 8009220:	20000176 	.word	0x20000176

08009224 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4613      	mov	r3, r2
 8009230:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009236:	2300      	movs	r3, #0
 8009238:	75fb      	strb	r3, [r7, #23]
 800923a:	e027      	b.n	800928c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	0f1b      	lsrs	r3, r3, #28
 8009240:	2b09      	cmp	r3, #9
 8009242:	d80b      	bhi.n	800925c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	0f1b      	lsrs	r3, r3, #28
 8009248:	b2da      	uxtb	r2, r3
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4619      	mov	r1, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	440b      	add	r3, r1
 8009254:	3230      	adds	r2, #48	; 0x30
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	e00a      	b.n	8009272 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	0f1b      	lsrs	r3, r3, #28
 8009260:	b2da      	uxtb	r2, r3
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	4619      	mov	r1, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	440b      	add	r3, r1
 800926c:	3237      	adds	r2, #55	; 0x37
 800926e:	b2d2      	uxtb	r2, r2
 8009270:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	3301      	adds	r3, #1
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	3301      	adds	r3, #1
 800928a:	75fb      	strb	r3, [r7, #23]
 800928c:	7dfa      	ldrb	r2, [r7, #23]
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	429a      	cmp	r2, r3
 8009292:	d3d3      	bcc.n	800923c <IntToUnicode+0x18>
  }
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr

080092a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a0d      	ldr	r2, [pc, #52]	; (80092e4 <HAL_PCD_MspInit+0x44>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d113      	bne.n	80092da <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80092b2:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <HAL_PCD_MspInit+0x48>)
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	4a0c      	ldr	r2, [pc, #48]	; (80092e8 <HAL_PCD_MspInit+0x48>)
 80092b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092bc:	61d3      	str	r3, [r2, #28]
 80092be:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <HAL_PCD_MspInit+0x48>)
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80092ca:	2200      	movs	r2, #0
 80092cc:	2100      	movs	r1, #0
 80092ce:	2014      	movs	r0, #20
 80092d0:	f7f8 fdf9 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80092d4:	2014      	movs	r0, #20
 80092d6:	f7f8 fe12 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40005c00 	.word	0x40005c00
 80092e8:	40021000 	.word	0x40021000

080092ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f7fe fdcb 	bl	8007e9e <USBD_LL_SetupStage>
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	440b      	add	r3, r1
 8009330:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	4619      	mov	r1, r3
 800933a:	f7fe fdfd 	bl	8007f38 <USBD_LL_DataOutStage>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	440b      	add	r3, r1
 8009366:	333c      	adds	r3, #60	; 0x3c
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	4619      	mov	r1, r3
 800936e:	f7fe fe54 	bl	800801a <USBD_LL_DataInStage>
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe ff64 	bl	8008256 <USBD_LL_SOF>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800939e:	2301      	movs	r3, #1
 80093a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d001      	beq.n	80093ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093aa:	f7f8 fadb 	bl	8001964 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093b4:	7bfa      	ldrb	r2, [r7, #15]
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe ff14 	bl	80081e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fecd 	bl	8008164 <USBD_LL_Reset>
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe ff0e 	bl	8008204 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <HAL_PCD_SuspendCallback+0x30>)
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	4a03      	ldr	r2, [pc, #12]	; (8009404 <HAL_PCD_SuspendCallback+0x30>)
 80093f6:	f043 0306 	orr.w	r3, r3, #6
 80093fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	e000ed00 	.word	0xe000ed00

08009408 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe ff08 	bl	800822c <USBD_LL_Resume>
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800942c:	4a28      	ldr	r2, [pc, #160]	; (80094d0 <USBD_LL_Init+0xac>)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a26      	ldr	r2, [pc, #152]	; (80094d0 <USBD_LL_Init+0xac>)
 8009438:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800943c:	4b24      	ldr	r3, [pc, #144]	; (80094d0 <USBD_LL_Init+0xac>)
 800943e:	4a25      	ldr	r2, [pc, #148]	; (80094d4 <USBD_LL_Init+0xb0>)
 8009440:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009442:	4b23      	ldr	r3, [pc, #140]	; (80094d0 <USBD_LL_Init+0xac>)
 8009444:	2208      	movs	r2, #8
 8009446:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009448:	4b21      	ldr	r3, [pc, #132]	; (80094d0 <USBD_LL_Init+0xac>)
 800944a:	2202      	movs	r2, #2
 800944c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800944e:	4b20      	ldr	r3, [pc, #128]	; (80094d0 <USBD_LL_Init+0xac>)
 8009450:	2200      	movs	r2, #0
 8009452:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009454:	4b1e      	ldr	r3, [pc, #120]	; (80094d0 <USBD_LL_Init+0xac>)
 8009456:	2200      	movs	r2, #0
 8009458:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800945a:	4b1d      	ldr	r3, [pc, #116]	; (80094d0 <USBD_LL_Init+0xac>)
 800945c:	2200      	movs	r2, #0
 800945e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009460:	481b      	ldr	r0, [pc, #108]	; (80094d0 <USBD_LL_Init+0xac>)
 8009462:	f7f9 fb4d 	bl	8002b00 <HAL_PCD_Init>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800946c:	f7f8 fa7a 	bl	8001964 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009476:	2318      	movs	r3, #24
 8009478:	2200      	movs	r2, #0
 800947a:	2100      	movs	r1, #0
 800947c:	f7fa fe8f 	bl	800419e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009486:	2358      	movs	r3, #88	; 0x58
 8009488:	2200      	movs	r2, #0
 800948a:	2180      	movs	r1, #128	; 0x80
 800948c:	f7fa fe87 	bl	800419e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009496:	23c0      	movs	r3, #192	; 0xc0
 8009498:	2200      	movs	r2, #0
 800949a:	2181      	movs	r1, #129	; 0x81
 800949c:	f7fa fe7f 	bl	800419e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80094aa:	2200      	movs	r2, #0
 80094ac:	2101      	movs	r1, #1
 80094ae:	f7fa fe76 	bl	800419e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094bc:	2200      	movs	r2, #0
 80094be:	2182      	movs	r1, #130	; 0x82
 80094c0:	f7fa fe6d 	bl	800419e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	200011b8 	.word	0x200011b8
 80094d4:	40005c00 	.word	0x40005c00

080094d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f9 fc11 	bl	8002d16 <HAL_PCD_Start>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f94e 	bl	800979c <USBD_Get_USB_Status>
 8009500:	4603      	mov	r3, r0
 8009502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009504:	7bbb      	ldrb	r3, [r7, #14]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	461a      	mov	r2, r3
 800951c:	4603      	mov	r3, r0
 800951e:	70fb      	strb	r3, [r7, #3]
 8009520:	460b      	mov	r3, r1
 8009522:	70bb      	strb	r3, [r7, #2]
 8009524:	4613      	mov	r3, r2
 8009526:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009536:	78bb      	ldrb	r3, [r7, #2]
 8009538:	883a      	ldrh	r2, [r7, #0]
 800953a:	78f9      	ldrb	r1, [r7, #3]
 800953c:	f7f9 fd8b 	bl	8003056 <HAL_PCD_EP_Open>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f928 	bl	800979c <USBD_Get_USB_Status>
 800954c:	4603      	mov	r3, r0
 800954e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009550:	7bbb      	ldrb	r3, [r7, #14]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7f9 fdd2 	bl	8003122 <HAL_PCD_EP_Close>
 800957e:	4603      	mov	r3, r0
 8009580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f909 	bl	800979c <USBD_Get_USB_Status>
 800958a:	4603      	mov	r3, r0
 800958c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f9 fe92 	bl	80032e0 <HAL_PCD_EP_SetStall>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f8ea 	bl	800979c <USBD_Get_USB_Status>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095f0:	78fa      	ldrb	r2, [r7, #3]
 80095f2:	4611      	mov	r1, r2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7f9 fed3 	bl	80033a0 <HAL_PCD_EP_ClrStall>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f8cb 	bl	800979c <USBD_Get_USB_Status>
 8009606:	4603      	mov	r3, r0
 8009608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960a:	7bbb      	ldrb	r3, [r7, #14]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009626:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800962c:	2b00      	cmp	r3, #0
 800962e:	da0c      	bge.n	800964a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	440b      	add	r3, r1
 8009644:	3302      	adds	r3, #2
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	e00b      	b.n	8009662 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009650:	68f9      	ldr	r1, [r7, #12]
 8009652:	4613      	mov	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	440b      	add	r3, r1
 800965c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009660:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr

0800966c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	4611      	mov	r1, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f7f9 fcbe 	bl	800300c <HAL_PCD_SetAddress>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f880 	bl	800979c <USBD_Get_USB_Status>
 800969c:	4603      	mov	r3, r0
 800969e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b086      	sub	sp, #24
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	461a      	mov	r2, r3
 80096b6:	460b      	mov	r3, r1
 80096b8:	72fb      	strb	r3, [r7, #11]
 80096ba:	4613      	mov	r3, r2
 80096bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096cc:	893b      	ldrh	r3, [r7, #8]
 80096ce:	7af9      	ldrb	r1, [r7, #11]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	f7f9 fdc2 	bl	800325a <HAL_PCD_EP_Transmit>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 f85d 	bl	800979c <USBD_Get_USB_Status>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	461a      	mov	r2, r3
 80096fc:	460b      	mov	r3, r1
 80096fe:	72fb      	strb	r3, [r7, #11]
 8009700:	4613      	mov	r3, r2
 8009702:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009712:	893b      	ldrh	r3, [r7, #8]
 8009714:	7af9      	ldrb	r1, [r7, #11]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	f7f9 fd4b 	bl	80031b2 <HAL_PCD_EP_Receive>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	4618      	mov	r0, r3
 8009724:	f000 f83a 	bl	800979c <USBD_Get_USB_Status>
 8009728:	4603      	mov	r3, r0
 800972a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800972c:	7dbb      	ldrb	r3, [r7, #22]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f7f9 fd6d 	bl	800322c <HAL_PCD_EP_GetRxCount>
 8009752:	4603      	mov	r3, r0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009764:	4b02      	ldr	r3, [pc, #8]	; (8009770 <USBD_static_malloc+0x14>)
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr
 8009770:	20000248 	.word	0x20000248

08009774 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	bc80      	pop	{r7}
 8009784:	4770      	bx	lr

08009786 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	460b      	mov	r3, r1
 8009790:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009792:	bf00      	nop
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	bc80      	pop	{r7}
 800979a:	4770      	bx	lr

0800979c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d817      	bhi.n	80097e0 <USBD_Get_USB_Status+0x44>
 80097b0:	a201      	add	r2, pc, #4	; (adr r2, 80097b8 <USBD_Get_USB_Status+0x1c>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097c9 	.word	0x080097c9
 80097bc:	080097cf 	.word	0x080097cf
 80097c0:	080097d5 	.word	0x080097d5
 80097c4:	080097db 	.word	0x080097db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e00b      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ce:	2302      	movs	r3, #2
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e008      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	e005      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097da:	2302      	movs	r3, #2
 80097dc:	73fb      	strb	r3, [r7, #15]
    break;
 80097de:	e002      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097e0:	2302      	movs	r3, #2
 80097e2:	73fb      	strb	r3, [r7, #15]
    break;
 80097e4:	bf00      	nop
  }
  return usb_status;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bc80      	pop	{r7}
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop

080097f4 <__errno>:
 80097f4:	4b01      	ldr	r3, [pc, #4]	; (80097fc <__errno+0x8>)
 80097f6:	6818      	ldr	r0, [r3, #0]
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	20000180 	.word	0x20000180

08009800 <__libc_init_array>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	2600      	movs	r6, #0
 8009804:	4d0c      	ldr	r5, [pc, #48]	; (8009838 <__libc_init_array+0x38>)
 8009806:	4c0d      	ldr	r4, [pc, #52]	; (800983c <__libc_init_array+0x3c>)
 8009808:	1b64      	subs	r4, r4, r5
 800980a:	10a4      	asrs	r4, r4, #2
 800980c:	42a6      	cmp	r6, r4
 800980e:	d109      	bne.n	8009824 <__libc_init_array+0x24>
 8009810:	f001 fc18 	bl	800b044 <_init>
 8009814:	2600      	movs	r6, #0
 8009816:	4d0a      	ldr	r5, [pc, #40]	; (8009840 <__libc_init_array+0x40>)
 8009818:	4c0a      	ldr	r4, [pc, #40]	; (8009844 <__libc_init_array+0x44>)
 800981a:	1b64      	subs	r4, r4, r5
 800981c:	10a4      	asrs	r4, r4, #2
 800981e:	42a6      	cmp	r6, r4
 8009820:	d105      	bne.n	800982e <__libc_init_array+0x2e>
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	f855 3b04 	ldr.w	r3, [r5], #4
 8009828:	4798      	blx	r3
 800982a:	3601      	adds	r6, #1
 800982c:	e7ee      	b.n	800980c <__libc_init_array+0xc>
 800982e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009832:	4798      	blx	r3
 8009834:	3601      	adds	r6, #1
 8009836:	e7f2      	b.n	800981e <__libc_init_array+0x1e>
 8009838:	0800b198 	.word	0x0800b198
 800983c:	0800b198 	.word	0x0800b198
 8009840:	0800b198 	.word	0x0800b198
 8009844:	0800b19c 	.word	0x0800b19c

08009848 <memset>:
 8009848:	4603      	mov	r3, r0
 800984a:	4402      	add	r2, r0
 800984c:	4293      	cmp	r3, r2
 800984e:	d100      	bne.n	8009852 <memset+0xa>
 8009850:	4770      	bx	lr
 8009852:	f803 1b01 	strb.w	r1, [r3], #1
 8009856:	e7f9      	b.n	800984c <memset+0x4>

08009858 <siprintf>:
 8009858:	b40e      	push	{r1, r2, r3}
 800985a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800985e:	b500      	push	{lr}
 8009860:	b09c      	sub	sp, #112	; 0x70
 8009862:	ab1d      	add	r3, sp, #116	; 0x74
 8009864:	9002      	str	r0, [sp, #8]
 8009866:	9006      	str	r0, [sp, #24]
 8009868:	9107      	str	r1, [sp, #28]
 800986a:	9104      	str	r1, [sp, #16]
 800986c:	4808      	ldr	r0, [pc, #32]	; (8009890 <siprintf+0x38>)
 800986e:	4909      	ldr	r1, [pc, #36]	; (8009894 <siprintf+0x3c>)
 8009870:	f853 2b04 	ldr.w	r2, [r3], #4
 8009874:	9105      	str	r1, [sp, #20]
 8009876:	6800      	ldr	r0, [r0, #0]
 8009878:	a902      	add	r1, sp, #8
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	f000 f868 	bl	8009950 <_svfiprintf_r>
 8009880:	2200      	movs	r2, #0
 8009882:	9b02      	ldr	r3, [sp, #8]
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	b01c      	add	sp, #112	; 0x70
 8009888:	f85d eb04 	ldr.w	lr, [sp], #4
 800988c:	b003      	add	sp, #12
 800988e:	4770      	bx	lr
 8009890:	20000180 	.word	0x20000180
 8009894:	ffff0208 	.word	0xffff0208

08009898 <__ssputs_r>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	688e      	ldr	r6, [r1, #8]
 800989e:	4682      	mov	sl, r0
 80098a0:	429e      	cmp	r6, r3
 80098a2:	460c      	mov	r4, r1
 80098a4:	4690      	mov	r8, r2
 80098a6:	461f      	mov	r7, r3
 80098a8:	d838      	bhi.n	800991c <__ssputs_r+0x84>
 80098aa:	898a      	ldrh	r2, [r1, #12]
 80098ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098b0:	d032      	beq.n	8009918 <__ssputs_r+0x80>
 80098b2:	6825      	ldr	r5, [r4, #0]
 80098b4:	6909      	ldr	r1, [r1, #16]
 80098b6:	3301      	adds	r3, #1
 80098b8:	eba5 0901 	sub.w	r9, r5, r1
 80098bc:	6965      	ldr	r5, [r4, #20]
 80098be:	444b      	add	r3, r9
 80098c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c8:	106d      	asrs	r5, r5, #1
 80098ca:	429d      	cmp	r5, r3
 80098cc:	bf38      	it	cc
 80098ce:	461d      	movcc	r5, r3
 80098d0:	0553      	lsls	r3, r2, #21
 80098d2:	d531      	bpl.n	8009938 <__ssputs_r+0xa0>
 80098d4:	4629      	mov	r1, r5
 80098d6:	f000 fb53 	bl	8009f80 <_malloc_r>
 80098da:	4606      	mov	r6, r0
 80098dc:	b950      	cbnz	r0, 80098f4 <__ssputs_r+0x5c>
 80098de:	230c      	movs	r3, #12
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	f8ca 3000 	str.w	r3, [sl]
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f4:	464a      	mov	r2, r9
 80098f6:	6921      	ldr	r1, [r4, #16]
 80098f8:	f000 face 	bl	8009e98 <memcpy>
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	6126      	str	r6, [r4, #16]
 800990a:	444e      	add	r6, r9
 800990c:	6026      	str	r6, [r4, #0]
 800990e:	463e      	mov	r6, r7
 8009910:	6165      	str	r5, [r4, #20]
 8009912:	eba5 0509 	sub.w	r5, r5, r9
 8009916:	60a5      	str	r5, [r4, #8]
 8009918:	42be      	cmp	r6, r7
 800991a:	d900      	bls.n	800991e <__ssputs_r+0x86>
 800991c:	463e      	mov	r6, r7
 800991e:	4632      	mov	r2, r6
 8009920:	4641      	mov	r1, r8
 8009922:	6820      	ldr	r0, [r4, #0]
 8009924:	f000 fac6 	bl	8009eb4 <memmove>
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	6822      	ldr	r2, [r4, #0]
 800992c:	1b9b      	subs	r3, r3, r6
 800992e:	4432      	add	r2, r6
 8009930:	2000      	movs	r0, #0
 8009932:	60a3      	str	r3, [r4, #8]
 8009934:	6022      	str	r2, [r4, #0]
 8009936:	e7db      	b.n	80098f0 <__ssputs_r+0x58>
 8009938:	462a      	mov	r2, r5
 800993a:	f000 fb7b 	bl	800a034 <_realloc_r>
 800993e:	4606      	mov	r6, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	d1e1      	bne.n	8009908 <__ssputs_r+0x70>
 8009944:	4650      	mov	r0, sl
 8009946:	6921      	ldr	r1, [r4, #16]
 8009948:	f000 face 	bl	8009ee8 <_free_r>
 800994c:	e7c7      	b.n	80098de <__ssputs_r+0x46>
	...

08009950 <_svfiprintf_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4698      	mov	r8, r3
 8009956:	898b      	ldrh	r3, [r1, #12]
 8009958:	4607      	mov	r7, r0
 800995a:	061b      	lsls	r3, r3, #24
 800995c:	460d      	mov	r5, r1
 800995e:	4614      	mov	r4, r2
 8009960:	b09d      	sub	sp, #116	; 0x74
 8009962:	d50e      	bpl.n	8009982 <_svfiprintf_r+0x32>
 8009964:	690b      	ldr	r3, [r1, #16]
 8009966:	b963      	cbnz	r3, 8009982 <_svfiprintf_r+0x32>
 8009968:	2140      	movs	r1, #64	; 0x40
 800996a:	f000 fb09 	bl	8009f80 <_malloc_r>
 800996e:	6028      	str	r0, [r5, #0]
 8009970:	6128      	str	r0, [r5, #16]
 8009972:	b920      	cbnz	r0, 800997e <_svfiprintf_r+0x2e>
 8009974:	230c      	movs	r3, #12
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	e0d1      	b.n	8009b22 <_svfiprintf_r+0x1d2>
 800997e:	2340      	movs	r3, #64	; 0x40
 8009980:	616b      	str	r3, [r5, #20]
 8009982:	2300      	movs	r3, #0
 8009984:	9309      	str	r3, [sp, #36]	; 0x24
 8009986:	2320      	movs	r3, #32
 8009988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800998c:	2330      	movs	r3, #48	; 0x30
 800998e:	f04f 0901 	mov.w	r9, #1
 8009992:	f8cd 800c 	str.w	r8, [sp, #12]
 8009996:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b3c <_svfiprintf_r+0x1ec>
 800999a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800999e:	4623      	mov	r3, r4
 80099a0:	469a      	mov	sl, r3
 80099a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a6:	b10a      	cbz	r2, 80099ac <_svfiprintf_r+0x5c>
 80099a8:	2a25      	cmp	r2, #37	; 0x25
 80099aa:	d1f9      	bne.n	80099a0 <_svfiprintf_r+0x50>
 80099ac:	ebba 0b04 	subs.w	fp, sl, r4
 80099b0:	d00b      	beq.n	80099ca <_svfiprintf_r+0x7a>
 80099b2:	465b      	mov	r3, fp
 80099b4:	4622      	mov	r2, r4
 80099b6:	4629      	mov	r1, r5
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7ff ff6d 	bl	8009898 <__ssputs_r>
 80099be:	3001      	adds	r0, #1
 80099c0:	f000 80aa 	beq.w	8009b18 <_svfiprintf_r+0x1c8>
 80099c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c6:	445a      	add	r2, fp
 80099c8:	9209      	str	r2, [sp, #36]	; 0x24
 80099ca:	f89a 3000 	ldrb.w	r3, [sl]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 80a2 	beq.w	8009b18 <_svfiprintf_r+0x1c8>
 80099d4:	2300      	movs	r3, #0
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099de:	f10a 0a01 	add.w	sl, sl, #1
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	9307      	str	r3, [sp, #28]
 80099e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099ea:	931a      	str	r3, [sp, #104]	; 0x68
 80099ec:	4654      	mov	r4, sl
 80099ee:	2205      	movs	r2, #5
 80099f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f4:	4851      	ldr	r0, [pc, #324]	; (8009b3c <_svfiprintf_r+0x1ec>)
 80099f6:	f000 fa41 	bl	8009e7c <memchr>
 80099fa:	9a04      	ldr	r2, [sp, #16]
 80099fc:	b9d8      	cbnz	r0, 8009a36 <_svfiprintf_r+0xe6>
 80099fe:	06d0      	lsls	r0, r2, #27
 8009a00:	bf44      	itt	mi
 8009a02:	2320      	movmi	r3, #32
 8009a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a08:	0711      	lsls	r1, r2, #28
 8009a0a:	bf44      	itt	mi
 8009a0c:	232b      	movmi	r3, #43	; 0x2b
 8009a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a12:	f89a 3000 	ldrb.w	r3, [sl]
 8009a16:	2b2a      	cmp	r3, #42	; 0x2a
 8009a18:	d015      	beq.n	8009a46 <_svfiprintf_r+0xf6>
 8009a1a:	4654      	mov	r4, sl
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f04f 0c0a 	mov.w	ip, #10
 8009a22:	9a07      	ldr	r2, [sp, #28]
 8009a24:	4621      	mov	r1, r4
 8009a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2a:	3b30      	subs	r3, #48	; 0x30
 8009a2c:	2b09      	cmp	r3, #9
 8009a2e:	d94e      	bls.n	8009ace <_svfiprintf_r+0x17e>
 8009a30:	b1b0      	cbz	r0, 8009a60 <_svfiprintf_r+0x110>
 8009a32:	9207      	str	r2, [sp, #28]
 8009a34:	e014      	b.n	8009a60 <_svfiprintf_r+0x110>
 8009a36:	eba0 0308 	sub.w	r3, r0, r8
 8009a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	46a2      	mov	sl, r4
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	e7d2      	b.n	80099ec <_svfiprintf_r+0x9c>
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	1d19      	adds	r1, r3, #4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	9103      	str	r1, [sp, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfbb      	ittet	lt
 8009a52:	425b      	neglt	r3, r3
 8009a54:	f042 0202 	orrlt.w	r2, r2, #2
 8009a58:	9307      	strge	r3, [sp, #28]
 8009a5a:	9307      	strlt	r3, [sp, #28]
 8009a5c:	bfb8      	it	lt
 8009a5e:	9204      	strlt	r2, [sp, #16]
 8009a60:	7823      	ldrb	r3, [r4, #0]
 8009a62:	2b2e      	cmp	r3, #46	; 0x2e
 8009a64:	d10c      	bne.n	8009a80 <_svfiprintf_r+0x130>
 8009a66:	7863      	ldrb	r3, [r4, #1]
 8009a68:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6a:	d135      	bne.n	8009ad8 <_svfiprintf_r+0x188>
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	3402      	adds	r4, #2
 8009a70:	1d1a      	adds	r2, r3, #4
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	9203      	str	r2, [sp, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bfb8      	it	lt
 8009a7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b4c <_svfiprintf_r+0x1fc>
 8009a84:	2203      	movs	r2, #3
 8009a86:	4650      	mov	r0, sl
 8009a88:	7821      	ldrb	r1, [r4, #0]
 8009a8a:	f000 f9f7 	bl	8009e7c <memchr>
 8009a8e:	b140      	cbz	r0, 8009aa2 <_svfiprintf_r+0x152>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	eba0 000a 	sub.w	r0, r0, sl
 8009a96:	fa03 f000 	lsl.w	r0, r3, r0
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	3401      	adds	r4, #1
 8009a9e:	4303      	orrs	r3, r0
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa6:	2206      	movs	r2, #6
 8009aa8:	4825      	ldr	r0, [pc, #148]	; (8009b40 <_svfiprintf_r+0x1f0>)
 8009aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aae:	f000 f9e5 	bl	8009e7c <memchr>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d038      	beq.n	8009b28 <_svfiprintf_r+0x1d8>
 8009ab6:	4b23      	ldr	r3, [pc, #140]	; (8009b44 <_svfiprintf_r+0x1f4>)
 8009ab8:	bb1b      	cbnz	r3, 8009b02 <_svfiprintf_r+0x1b2>
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	3307      	adds	r3, #7
 8009abe:	f023 0307 	bic.w	r3, r3, #7
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac8:	4433      	add	r3, r6
 8009aca:	9309      	str	r3, [sp, #36]	; 0x24
 8009acc:	e767      	b.n	800999e <_svfiprintf_r+0x4e>
 8009ace:	460c      	mov	r4, r1
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad6:	e7a5      	b.n	8009a24 <_svfiprintf_r+0xd4>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f04f 0c0a 	mov.w	ip, #10
 8009ade:	4619      	mov	r1, r3
 8009ae0:	3401      	adds	r4, #1
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aea:	3a30      	subs	r2, #48	; 0x30
 8009aec:	2a09      	cmp	r2, #9
 8009aee:	d903      	bls.n	8009af8 <_svfiprintf_r+0x1a8>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0c5      	beq.n	8009a80 <_svfiprintf_r+0x130>
 8009af4:	9105      	str	r1, [sp, #20]
 8009af6:	e7c3      	b.n	8009a80 <_svfiprintf_r+0x130>
 8009af8:	4604      	mov	r4, r0
 8009afa:	2301      	movs	r3, #1
 8009afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b00:	e7f0      	b.n	8009ae4 <_svfiprintf_r+0x194>
 8009b02:	ab03      	add	r3, sp, #12
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	462a      	mov	r2, r5
 8009b08:	4638      	mov	r0, r7
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <_svfiprintf_r+0x1f8>)
 8009b0c:	a904      	add	r1, sp, #16
 8009b0e:	f3af 8000 	nop.w
 8009b12:	1c42      	adds	r2, r0, #1
 8009b14:	4606      	mov	r6, r0
 8009b16:	d1d6      	bne.n	8009ac6 <_svfiprintf_r+0x176>
 8009b18:	89ab      	ldrh	r3, [r5, #12]
 8009b1a:	065b      	lsls	r3, r3, #25
 8009b1c:	f53f af2c 	bmi.w	8009978 <_svfiprintf_r+0x28>
 8009b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b22:	b01d      	add	sp, #116	; 0x74
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b28:	ab03      	add	r3, sp, #12
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	4638      	mov	r0, r7
 8009b30:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <_svfiprintf_r+0x1f8>)
 8009b32:	a904      	add	r1, sp, #16
 8009b34:	f000 f87c 	bl	8009c30 <_printf_i>
 8009b38:	e7eb      	b.n	8009b12 <_svfiprintf_r+0x1c2>
 8009b3a:	bf00      	nop
 8009b3c:	0800b120 	.word	0x0800b120
 8009b40:	0800b12a 	.word	0x0800b12a
 8009b44:	00000000 	.word	0x00000000
 8009b48:	08009899 	.word	0x08009899
 8009b4c:	0800b126 	.word	0x0800b126

08009b50 <_printf_common>:
 8009b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	4616      	mov	r6, r2
 8009b56:	4699      	mov	r9, r3
 8009b58:	688a      	ldr	r2, [r1, #8]
 8009b5a:	690b      	ldr	r3, [r1, #16]
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bfb8      	it	lt
 8009b62:	4613      	movlt	r3, r2
 8009b64:	6033      	str	r3, [r6, #0]
 8009b66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b70:	b10a      	cbz	r2, 8009b76 <_printf_common+0x26>
 8009b72:	3301      	adds	r3, #1
 8009b74:	6033      	str	r3, [r6, #0]
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	0699      	lsls	r1, r3, #26
 8009b7a:	bf42      	ittt	mi
 8009b7c:	6833      	ldrmi	r3, [r6, #0]
 8009b7e:	3302      	addmi	r3, #2
 8009b80:	6033      	strmi	r3, [r6, #0]
 8009b82:	6825      	ldr	r5, [r4, #0]
 8009b84:	f015 0506 	ands.w	r5, r5, #6
 8009b88:	d106      	bne.n	8009b98 <_printf_common+0x48>
 8009b8a:	f104 0a19 	add.w	sl, r4, #25
 8009b8e:	68e3      	ldr	r3, [r4, #12]
 8009b90:	6832      	ldr	r2, [r6, #0]
 8009b92:	1a9b      	subs	r3, r3, r2
 8009b94:	42ab      	cmp	r3, r5
 8009b96:	dc28      	bgt.n	8009bea <_printf_common+0x9a>
 8009b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b9c:	1e13      	subs	r3, r2, #0
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	bf18      	it	ne
 8009ba2:	2301      	movne	r3, #1
 8009ba4:	0692      	lsls	r2, r2, #26
 8009ba6:	d42d      	bmi.n	8009c04 <_printf_common+0xb4>
 8009ba8:	4649      	mov	r1, r9
 8009baa:	4638      	mov	r0, r7
 8009bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bb0:	47c0      	blx	r8
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d020      	beq.n	8009bf8 <_printf_common+0xa8>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	68e5      	ldr	r5, [r4, #12]
 8009bba:	f003 0306 	and.w	r3, r3, #6
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	bf18      	it	ne
 8009bc2:	2500      	movne	r5, #0
 8009bc4:	6832      	ldr	r2, [r6, #0]
 8009bc6:	f04f 0600 	mov.w	r6, #0
 8009bca:	68a3      	ldr	r3, [r4, #8]
 8009bcc:	bf08      	it	eq
 8009bce:	1aad      	subeq	r5, r5, r2
 8009bd0:	6922      	ldr	r2, [r4, #16]
 8009bd2:	bf08      	it	eq
 8009bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	bfc4      	itt	gt
 8009bdc:	1a9b      	subgt	r3, r3, r2
 8009bde:	18ed      	addgt	r5, r5, r3
 8009be0:	341a      	adds	r4, #26
 8009be2:	42b5      	cmp	r5, r6
 8009be4:	d11a      	bne.n	8009c1c <_printf_common+0xcc>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e008      	b.n	8009bfc <_printf_common+0xac>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4652      	mov	r2, sl
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	47c0      	blx	r8
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d103      	bne.n	8009c00 <_printf_common+0xb0>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c00:	3501      	adds	r5, #1
 8009c02:	e7c4      	b.n	8009b8e <_printf_common+0x3e>
 8009c04:	2030      	movs	r0, #48	; 0x30
 8009c06:	18e1      	adds	r1, r4, r3
 8009c08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c12:	4422      	add	r2, r4
 8009c14:	3302      	adds	r3, #2
 8009c16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c1a:	e7c5      	b.n	8009ba8 <_printf_common+0x58>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	4622      	mov	r2, r4
 8009c20:	4649      	mov	r1, r9
 8009c22:	4638      	mov	r0, r7
 8009c24:	47c0      	blx	r8
 8009c26:	3001      	adds	r0, #1
 8009c28:	d0e6      	beq.n	8009bf8 <_printf_common+0xa8>
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	e7d9      	b.n	8009be2 <_printf_common+0x92>
	...

08009c30 <_printf_i>:
 8009c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	460c      	mov	r4, r1
 8009c36:	7e27      	ldrb	r7, [r4, #24]
 8009c38:	4691      	mov	r9, r2
 8009c3a:	2f78      	cmp	r7, #120	; 0x78
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	469a      	mov	sl, r3
 8009c40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c46:	d807      	bhi.n	8009c58 <_printf_i+0x28>
 8009c48:	2f62      	cmp	r7, #98	; 0x62
 8009c4a:	d80a      	bhi.n	8009c62 <_printf_i+0x32>
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	f000 80d9 	beq.w	8009e04 <_printf_i+0x1d4>
 8009c52:	2f58      	cmp	r7, #88	; 0x58
 8009c54:	f000 80a4 	beq.w	8009da0 <_printf_i+0x170>
 8009c58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c60:	e03a      	b.n	8009cd8 <_printf_i+0xa8>
 8009c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c66:	2b15      	cmp	r3, #21
 8009c68:	d8f6      	bhi.n	8009c58 <_printf_i+0x28>
 8009c6a:	a001      	add	r0, pc, #4	; (adr r0, 8009c70 <_printf_i+0x40>)
 8009c6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c70:	08009cc9 	.word	0x08009cc9
 8009c74:	08009cdd 	.word	0x08009cdd
 8009c78:	08009c59 	.word	0x08009c59
 8009c7c:	08009c59 	.word	0x08009c59
 8009c80:	08009c59 	.word	0x08009c59
 8009c84:	08009c59 	.word	0x08009c59
 8009c88:	08009cdd 	.word	0x08009cdd
 8009c8c:	08009c59 	.word	0x08009c59
 8009c90:	08009c59 	.word	0x08009c59
 8009c94:	08009c59 	.word	0x08009c59
 8009c98:	08009c59 	.word	0x08009c59
 8009c9c:	08009deb 	.word	0x08009deb
 8009ca0:	08009d0d 	.word	0x08009d0d
 8009ca4:	08009dcd 	.word	0x08009dcd
 8009ca8:	08009c59 	.word	0x08009c59
 8009cac:	08009c59 	.word	0x08009c59
 8009cb0:	08009e0d 	.word	0x08009e0d
 8009cb4:	08009c59 	.word	0x08009c59
 8009cb8:	08009d0d 	.word	0x08009d0d
 8009cbc:	08009c59 	.word	0x08009c59
 8009cc0:	08009c59 	.word	0x08009c59
 8009cc4:	08009dd5 	.word	0x08009dd5
 8009cc8:	680b      	ldr	r3, [r1, #0]
 8009cca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cce:	1d1a      	adds	r2, r3, #4
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	600a      	str	r2, [r1, #0]
 8009cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e0a4      	b.n	8009e26 <_printf_i+0x1f6>
 8009cdc:	6825      	ldr	r5, [r4, #0]
 8009cde:	6808      	ldr	r0, [r1, #0]
 8009ce0:	062e      	lsls	r6, r5, #24
 8009ce2:	f100 0304 	add.w	r3, r0, #4
 8009ce6:	d50a      	bpl.n	8009cfe <_printf_i+0xce>
 8009ce8:	6805      	ldr	r5, [r0, #0]
 8009cea:	600b      	str	r3, [r1, #0]
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	da03      	bge.n	8009cf8 <_printf_i+0xc8>
 8009cf0:	232d      	movs	r3, #45	; 0x2d
 8009cf2:	426d      	negs	r5, r5
 8009cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cf8:	230a      	movs	r3, #10
 8009cfa:	485e      	ldr	r0, [pc, #376]	; (8009e74 <_printf_i+0x244>)
 8009cfc:	e019      	b.n	8009d32 <_printf_i+0x102>
 8009cfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d02:	6805      	ldr	r5, [r0, #0]
 8009d04:	600b      	str	r3, [r1, #0]
 8009d06:	bf18      	it	ne
 8009d08:	b22d      	sxthne	r5, r5
 8009d0a:	e7ef      	b.n	8009cec <_printf_i+0xbc>
 8009d0c:	680b      	ldr	r3, [r1, #0]
 8009d0e:	6825      	ldr	r5, [r4, #0]
 8009d10:	1d18      	adds	r0, r3, #4
 8009d12:	6008      	str	r0, [r1, #0]
 8009d14:	0628      	lsls	r0, r5, #24
 8009d16:	d501      	bpl.n	8009d1c <_printf_i+0xec>
 8009d18:	681d      	ldr	r5, [r3, #0]
 8009d1a:	e002      	b.n	8009d22 <_printf_i+0xf2>
 8009d1c:	0669      	lsls	r1, r5, #25
 8009d1e:	d5fb      	bpl.n	8009d18 <_printf_i+0xe8>
 8009d20:	881d      	ldrh	r5, [r3, #0]
 8009d22:	2f6f      	cmp	r7, #111	; 0x6f
 8009d24:	bf0c      	ite	eq
 8009d26:	2308      	moveq	r3, #8
 8009d28:	230a      	movne	r3, #10
 8009d2a:	4852      	ldr	r0, [pc, #328]	; (8009e74 <_printf_i+0x244>)
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d32:	6866      	ldr	r6, [r4, #4]
 8009d34:	2e00      	cmp	r6, #0
 8009d36:	bfa8      	it	ge
 8009d38:	6821      	ldrge	r1, [r4, #0]
 8009d3a:	60a6      	str	r6, [r4, #8]
 8009d3c:	bfa4      	itt	ge
 8009d3e:	f021 0104 	bicge.w	r1, r1, #4
 8009d42:	6021      	strge	r1, [r4, #0]
 8009d44:	b90d      	cbnz	r5, 8009d4a <_printf_i+0x11a>
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	d04d      	beq.n	8009de6 <_printf_i+0x1b6>
 8009d4a:	4616      	mov	r6, r2
 8009d4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d50:	fb03 5711 	mls	r7, r3, r1, r5
 8009d54:	5dc7      	ldrb	r7, [r0, r7]
 8009d56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d5a:	462f      	mov	r7, r5
 8009d5c:	42bb      	cmp	r3, r7
 8009d5e:	460d      	mov	r5, r1
 8009d60:	d9f4      	bls.n	8009d4c <_printf_i+0x11c>
 8009d62:	2b08      	cmp	r3, #8
 8009d64:	d10b      	bne.n	8009d7e <_printf_i+0x14e>
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	07df      	lsls	r7, r3, #31
 8009d6a:	d508      	bpl.n	8009d7e <_printf_i+0x14e>
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	6861      	ldr	r1, [r4, #4]
 8009d70:	4299      	cmp	r1, r3
 8009d72:	bfde      	ittt	le
 8009d74:	2330      	movle	r3, #48	; 0x30
 8009d76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d7e:	1b92      	subs	r2, r2, r6
 8009d80:	6122      	str	r2, [r4, #16]
 8009d82:	464b      	mov	r3, r9
 8009d84:	4621      	mov	r1, r4
 8009d86:	4640      	mov	r0, r8
 8009d88:	f8cd a000 	str.w	sl, [sp]
 8009d8c:	aa03      	add	r2, sp, #12
 8009d8e:	f7ff fedf 	bl	8009b50 <_printf_common>
 8009d92:	3001      	adds	r0, #1
 8009d94:	d14c      	bne.n	8009e30 <_printf_i+0x200>
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	b004      	add	sp, #16
 8009d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da0:	4834      	ldr	r0, [pc, #208]	; (8009e74 <_printf_i+0x244>)
 8009da2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009da6:	680e      	ldr	r6, [r1, #0]
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	f856 5b04 	ldr.w	r5, [r6], #4
 8009dae:	061f      	lsls	r7, r3, #24
 8009db0:	600e      	str	r6, [r1, #0]
 8009db2:	d514      	bpl.n	8009dde <_printf_i+0x1ae>
 8009db4:	07d9      	lsls	r1, r3, #31
 8009db6:	bf44      	itt	mi
 8009db8:	f043 0320 	orrmi.w	r3, r3, #32
 8009dbc:	6023      	strmi	r3, [r4, #0]
 8009dbe:	b91d      	cbnz	r5, 8009dc8 <_printf_i+0x198>
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	f023 0320 	bic.w	r3, r3, #32
 8009dc6:	6023      	str	r3, [r4, #0]
 8009dc8:	2310      	movs	r3, #16
 8009dca:	e7af      	b.n	8009d2c <_printf_i+0xfc>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	f043 0320 	orr.w	r3, r3, #32
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	2378      	movs	r3, #120	; 0x78
 8009dd6:	4828      	ldr	r0, [pc, #160]	; (8009e78 <_printf_i+0x248>)
 8009dd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ddc:	e7e3      	b.n	8009da6 <_printf_i+0x176>
 8009dde:	065e      	lsls	r6, r3, #25
 8009de0:	bf48      	it	mi
 8009de2:	b2ad      	uxthmi	r5, r5
 8009de4:	e7e6      	b.n	8009db4 <_printf_i+0x184>
 8009de6:	4616      	mov	r6, r2
 8009de8:	e7bb      	b.n	8009d62 <_printf_i+0x132>
 8009dea:	680b      	ldr	r3, [r1, #0]
 8009dec:	6826      	ldr	r6, [r4, #0]
 8009dee:	1d1d      	adds	r5, r3, #4
 8009df0:	6960      	ldr	r0, [r4, #20]
 8009df2:	600d      	str	r5, [r1, #0]
 8009df4:	0635      	lsls	r5, r6, #24
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	d501      	bpl.n	8009dfe <_printf_i+0x1ce>
 8009dfa:	6018      	str	r0, [r3, #0]
 8009dfc:	e002      	b.n	8009e04 <_printf_i+0x1d4>
 8009dfe:	0671      	lsls	r1, r6, #25
 8009e00:	d5fb      	bpl.n	8009dfa <_printf_i+0x1ca>
 8009e02:	8018      	strh	r0, [r3, #0]
 8009e04:	2300      	movs	r3, #0
 8009e06:	4616      	mov	r6, r2
 8009e08:	6123      	str	r3, [r4, #16]
 8009e0a:	e7ba      	b.n	8009d82 <_printf_i+0x152>
 8009e0c:	680b      	ldr	r3, [r1, #0]
 8009e0e:	1d1a      	adds	r2, r3, #4
 8009e10:	600a      	str	r2, [r1, #0]
 8009e12:	681e      	ldr	r6, [r3, #0]
 8009e14:	2100      	movs	r1, #0
 8009e16:	4630      	mov	r0, r6
 8009e18:	6862      	ldr	r2, [r4, #4]
 8009e1a:	f000 f82f 	bl	8009e7c <memchr>
 8009e1e:	b108      	cbz	r0, 8009e24 <_printf_i+0x1f4>
 8009e20:	1b80      	subs	r0, r0, r6
 8009e22:	6060      	str	r0, [r4, #4]
 8009e24:	6863      	ldr	r3, [r4, #4]
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e2e:	e7a8      	b.n	8009d82 <_printf_i+0x152>
 8009e30:	4632      	mov	r2, r6
 8009e32:	4649      	mov	r1, r9
 8009e34:	4640      	mov	r0, r8
 8009e36:	6923      	ldr	r3, [r4, #16]
 8009e38:	47d0      	blx	sl
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d0ab      	beq.n	8009d96 <_printf_i+0x166>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	079b      	lsls	r3, r3, #30
 8009e42:	d413      	bmi.n	8009e6c <_printf_i+0x23c>
 8009e44:	68e0      	ldr	r0, [r4, #12]
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	4298      	cmp	r0, r3
 8009e4a:	bfb8      	it	lt
 8009e4c:	4618      	movlt	r0, r3
 8009e4e:	e7a4      	b.n	8009d9a <_printf_i+0x16a>
 8009e50:	2301      	movs	r3, #1
 8009e52:	4632      	mov	r2, r6
 8009e54:	4649      	mov	r1, r9
 8009e56:	4640      	mov	r0, r8
 8009e58:	47d0      	blx	sl
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d09b      	beq.n	8009d96 <_printf_i+0x166>
 8009e5e:	3501      	adds	r5, #1
 8009e60:	68e3      	ldr	r3, [r4, #12]
 8009e62:	9903      	ldr	r1, [sp, #12]
 8009e64:	1a5b      	subs	r3, r3, r1
 8009e66:	42ab      	cmp	r3, r5
 8009e68:	dcf2      	bgt.n	8009e50 <_printf_i+0x220>
 8009e6a:	e7eb      	b.n	8009e44 <_printf_i+0x214>
 8009e6c:	2500      	movs	r5, #0
 8009e6e:	f104 0619 	add.w	r6, r4, #25
 8009e72:	e7f5      	b.n	8009e60 <_printf_i+0x230>
 8009e74:	0800b131 	.word	0x0800b131
 8009e78:	0800b142 	.word	0x0800b142

08009e7c <memchr>:
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	b510      	push	{r4, lr}
 8009e80:	b2c9      	uxtb	r1, r1
 8009e82:	4402      	add	r2, r0
 8009e84:	4293      	cmp	r3, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	d101      	bne.n	8009e8e <memchr+0x12>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e003      	b.n	8009e96 <memchr+0x1a>
 8009e8e:	7804      	ldrb	r4, [r0, #0]
 8009e90:	3301      	adds	r3, #1
 8009e92:	428c      	cmp	r4, r1
 8009e94:	d1f6      	bne.n	8009e84 <memchr+0x8>
 8009e96:	bd10      	pop	{r4, pc}

08009e98 <memcpy>:
 8009e98:	440a      	add	r2, r1
 8009e9a:	4291      	cmp	r1, r2
 8009e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ea0:	d100      	bne.n	8009ea4 <memcpy+0xc>
 8009ea2:	4770      	bx	lr
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eaa:	4291      	cmp	r1, r2
 8009eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eb0:	d1f9      	bne.n	8009ea6 <memcpy+0xe>
 8009eb2:	bd10      	pop	{r4, pc}

08009eb4 <memmove>:
 8009eb4:	4288      	cmp	r0, r1
 8009eb6:	b510      	push	{r4, lr}
 8009eb8:	eb01 0402 	add.w	r4, r1, r2
 8009ebc:	d902      	bls.n	8009ec4 <memmove+0x10>
 8009ebe:	4284      	cmp	r4, r0
 8009ec0:	4623      	mov	r3, r4
 8009ec2:	d807      	bhi.n	8009ed4 <memmove+0x20>
 8009ec4:	1e43      	subs	r3, r0, #1
 8009ec6:	42a1      	cmp	r1, r4
 8009ec8:	d008      	beq.n	8009edc <memmove+0x28>
 8009eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ed2:	e7f8      	b.n	8009ec6 <memmove+0x12>
 8009ed4:	4601      	mov	r1, r0
 8009ed6:	4402      	add	r2, r0
 8009ed8:	428a      	cmp	r2, r1
 8009eda:	d100      	bne.n	8009ede <memmove+0x2a>
 8009edc:	bd10      	pop	{r4, pc}
 8009ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ee6:	e7f7      	b.n	8009ed8 <memmove+0x24>

08009ee8 <_free_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4605      	mov	r5, r0
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d043      	beq.n	8009f78 <_free_r+0x90>
 8009ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef4:	1f0c      	subs	r4, r1, #4
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	bfb8      	it	lt
 8009efa:	18e4      	addlt	r4, r4, r3
 8009efc:	f000 f8d0 	bl	800a0a0 <__malloc_lock>
 8009f00:	4a1e      	ldr	r2, [pc, #120]	; (8009f7c <_free_r+0x94>)
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	4610      	mov	r0, r2
 8009f06:	b933      	cbnz	r3, 8009f16 <_free_r+0x2e>
 8009f08:	6063      	str	r3, [r4, #4]
 8009f0a:	6014      	str	r4, [r2, #0]
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f12:	f000 b8cb 	b.w	800a0ac <__malloc_unlock>
 8009f16:	42a3      	cmp	r3, r4
 8009f18:	d90a      	bls.n	8009f30 <_free_r+0x48>
 8009f1a:	6821      	ldr	r1, [r4, #0]
 8009f1c:	1862      	adds	r2, r4, r1
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	bf01      	itttt	eq
 8009f22:	681a      	ldreq	r2, [r3, #0]
 8009f24:	685b      	ldreq	r3, [r3, #4]
 8009f26:	1852      	addeq	r2, r2, r1
 8009f28:	6022      	streq	r2, [r4, #0]
 8009f2a:	6063      	str	r3, [r4, #4]
 8009f2c:	6004      	str	r4, [r0, #0]
 8009f2e:	e7ed      	b.n	8009f0c <_free_r+0x24>
 8009f30:	461a      	mov	r2, r3
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	b10b      	cbz	r3, 8009f3a <_free_r+0x52>
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	d9fa      	bls.n	8009f30 <_free_r+0x48>
 8009f3a:	6811      	ldr	r1, [r2, #0]
 8009f3c:	1850      	adds	r0, r2, r1
 8009f3e:	42a0      	cmp	r0, r4
 8009f40:	d10b      	bne.n	8009f5a <_free_r+0x72>
 8009f42:	6820      	ldr	r0, [r4, #0]
 8009f44:	4401      	add	r1, r0
 8009f46:	1850      	adds	r0, r2, r1
 8009f48:	4283      	cmp	r3, r0
 8009f4a:	6011      	str	r1, [r2, #0]
 8009f4c:	d1de      	bne.n	8009f0c <_free_r+0x24>
 8009f4e:	6818      	ldr	r0, [r3, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	4401      	add	r1, r0
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	6053      	str	r3, [r2, #4]
 8009f58:	e7d8      	b.n	8009f0c <_free_r+0x24>
 8009f5a:	d902      	bls.n	8009f62 <_free_r+0x7a>
 8009f5c:	230c      	movs	r3, #12
 8009f5e:	602b      	str	r3, [r5, #0]
 8009f60:	e7d4      	b.n	8009f0c <_free_r+0x24>
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	1821      	adds	r1, r4, r0
 8009f66:	428b      	cmp	r3, r1
 8009f68:	bf01      	itttt	eq
 8009f6a:	6819      	ldreq	r1, [r3, #0]
 8009f6c:	685b      	ldreq	r3, [r3, #4]
 8009f6e:	1809      	addeq	r1, r1, r0
 8009f70:	6021      	streq	r1, [r4, #0]
 8009f72:	6063      	str	r3, [r4, #4]
 8009f74:	6054      	str	r4, [r2, #4]
 8009f76:	e7c9      	b.n	8009f0c <_free_r+0x24>
 8009f78:	bd38      	pop	{r3, r4, r5, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000468 	.word	0x20000468

08009f80 <_malloc_r>:
 8009f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f82:	1ccd      	adds	r5, r1, #3
 8009f84:	f025 0503 	bic.w	r5, r5, #3
 8009f88:	3508      	adds	r5, #8
 8009f8a:	2d0c      	cmp	r5, #12
 8009f8c:	bf38      	it	cc
 8009f8e:	250c      	movcc	r5, #12
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	4606      	mov	r6, r0
 8009f94:	db01      	blt.n	8009f9a <_malloc_r+0x1a>
 8009f96:	42a9      	cmp	r1, r5
 8009f98:	d903      	bls.n	8009fa2 <_malloc_r+0x22>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	6033      	str	r3, [r6, #0]
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa2:	f000 f87d 	bl	800a0a0 <__malloc_lock>
 8009fa6:	4921      	ldr	r1, [pc, #132]	; (800a02c <_malloc_r+0xac>)
 8009fa8:	680a      	ldr	r2, [r1, #0]
 8009faa:	4614      	mov	r4, r2
 8009fac:	b99c      	cbnz	r4, 8009fd6 <_malloc_r+0x56>
 8009fae:	4f20      	ldr	r7, [pc, #128]	; (800a030 <_malloc_r+0xb0>)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	b923      	cbnz	r3, 8009fbe <_malloc_r+0x3e>
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f000 f862 	bl	800a080 <_sbrk_r>
 8009fbc:	6038      	str	r0, [r7, #0]
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f000 f85d 	bl	800a080 <_sbrk_r>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d123      	bne.n	800a012 <_malloc_r+0x92>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	4630      	mov	r0, r6
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	f000 f86c 	bl	800a0ac <__malloc_unlock>
 8009fd4:	e7e3      	b.n	8009f9e <_malloc_r+0x1e>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	1b5b      	subs	r3, r3, r5
 8009fda:	d417      	bmi.n	800a00c <_malloc_r+0x8c>
 8009fdc:	2b0b      	cmp	r3, #11
 8009fde:	d903      	bls.n	8009fe8 <_malloc_r+0x68>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	441c      	add	r4, r3
 8009fe4:	6025      	str	r5, [r4, #0]
 8009fe6:	e004      	b.n	8009ff2 <_malloc_r+0x72>
 8009fe8:	6863      	ldr	r3, [r4, #4]
 8009fea:	42a2      	cmp	r2, r4
 8009fec:	bf0c      	ite	eq
 8009fee:	600b      	streq	r3, [r1, #0]
 8009ff0:	6053      	strne	r3, [r2, #4]
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 f85a 	bl	800a0ac <__malloc_unlock>
 8009ff8:	f104 000b 	add.w	r0, r4, #11
 8009ffc:	1d23      	adds	r3, r4, #4
 8009ffe:	f020 0007 	bic.w	r0, r0, #7
 800a002:	1ac2      	subs	r2, r0, r3
 800a004:	d0cc      	beq.n	8009fa0 <_malloc_r+0x20>
 800a006:	1a1b      	subs	r3, r3, r0
 800a008:	50a3      	str	r3, [r4, r2]
 800a00a:	e7c9      	b.n	8009fa0 <_malloc_r+0x20>
 800a00c:	4622      	mov	r2, r4
 800a00e:	6864      	ldr	r4, [r4, #4]
 800a010:	e7cc      	b.n	8009fac <_malloc_r+0x2c>
 800a012:	1cc4      	adds	r4, r0, #3
 800a014:	f024 0403 	bic.w	r4, r4, #3
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d0e3      	beq.n	8009fe4 <_malloc_r+0x64>
 800a01c:	1a21      	subs	r1, r4, r0
 800a01e:	4630      	mov	r0, r6
 800a020:	f000 f82e 	bl	800a080 <_sbrk_r>
 800a024:	3001      	adds	r0, #1
 800a026:	d1dd      	bne.n	8009fe4 <_malloc_r+0x64>
 800a028:	e7cf      	b.n	8009fca <_malloc_r+0x4a>
 800a02a:	bf00      	nop
 800a02c:	20000468 	.word	0x20000468
 800a030:	2000046c 	.word	0x2000046c

0800a034 <_realloc_r>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	4607      	mov	r7, r0
 800a038:	4614      	mov	r4, r2
 800a03a:	460e      	mov	r6, r1
 800a03c:	b921      	cbnz	r1, 800a048 <_realloc_r+0x14>
 800a03e:	4611      	mov	r1, r2
 800a040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a044:	f7ff bf9c 	b.w	8009f80 <_malloc_r>
 800a048:	b922      	cbnz	r2, 800a054 <_realloc_r+0x20>
 800a04a:	f7ff ff4d 	bl	8009ee8 <_free_r>
 800a04e:	4625      	mov	r5, r4
 800a050:	4628      	mov	r0, r5
 800a052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a054:	f000 f830 	bl	800a0b8 <_malloc_usable_size_r>
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d20f      	bcs.n	800a07c <_realloc_r+0x48>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4638      	mov	r0, r7
 800a060:	f7ff ff8e 	bl	8009f80 <_malloc_r>
 800a064:	4605      	mov	r5, r0
 800a066:	2800      	cmp	r0, #0
 800a068:	d0f2      	beq.n	800a050 <_realloc_r+0x1c>
 800a06a:	4631      	mov	r1, r6
 800a06c:	4622      	mov	r2, r4
 800a06e:	f7ff ff13 	bl	8009e98 <memcpy>
 800a072:	4631      	mov	r1, r6
 800a074:	4638      	mov	r0, r7
 800a076:	f7ff ff37 	bl	8009ee8 <_free_r>
 800a07a:	e7e9      	b.n	800a050 <_realloc_r+0x1c>
 800a07c:	4635      	mov	r5, r6
 800a07e:	e7e7      	b.n	800a050 <_realloc_r+0x1c>

0800a080 <_sbrk_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	2300      	movs	r3, #0
 800a084:	4d05      	ldr	r5, [pc, #20]	; (800a09c <_sbrk_r+0x1c>)
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	602b      	str	r3, [r5, #0]
 800a08c:	f7f7 fd5c 	bl	8001b48 <_sbrk>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_sbrk_r+0x1a>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	b103      	cbz	r3, 800a09a <_sbrk_r+0x1a>
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	200014a4 	.word	0x200014a4

0800a0a0 <__malloc_lock>:
 800a0a0:	4801      	ldr	r0, [pc, #4]	; (800a0a8 <__malloc_lock+0x8>)
 800a0a2:	f000 b811 	b.w	800a0c8 <__retarget_lock_acquire_recursive>
 800a0a6:	bf00      	nop
 800a0a8:	200014ac 	.word	0x200014ac

0800a0ac <__malloc_unlock>:
 800a0ac:	4801      	ldr	r0, [pc, #4]	; (800a0b4 <__malloc_unlock+0x8>)
 800a0ae:	f000 b80c 	b.w	800a0ca <__retarget_lock_release_recursive>
 800a0b2:	bf00      	nop
 800a0b4:	200014ac 	.word	0x200014ac

0800a0b8 <_malloc_usable_size_r>:
 800a0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0bc:	1f18      	subs	r0, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	bfbc      	itt	lt
 800a0c2:	580b      	ldrlt	r3, [r1, r0]
 800a0c4:	18c0      	addlt	r0, r0, r3
 800a0c6:	4770      	bx	lr

0800a0c8 <__retarget_lock_acquire_recursive>:
 800a0c8:	4770      	bx	lr

0800a0ca <__retarget_lock_release_recursive>:
 800a0ca:	4770      	bx	lr

0800a0cc <pow>:
 800a0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d0:	461f      	mov	r7, r3
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	4689      	mov	r9, r1
 800a0d6:	4616      	mov	r6, r2
 800a0d8:	f000 f8d2 	bl	800a280 <__ieee754_pow>
 800a0dc:	4b4d      	ldr	r3, [pc, #308]	; (800a214 <pow+0x148>)
 800a0de:	4604      	mov	r4, r0
 800a0e0:	f993 3000 	ldrsb.w	r3, [r3]
 800a0e4:	460d      	mov	r5, r1
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	d015      	beq.n	800a116 <pow+0x4a>
 800a0ea:	4632      	mov	r2, r6
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	f7f6 fd3f 	bl	8000b74 <__aeabi_dcmpun>
 800a0f6:	b970      	cbnz	r0, 800a116 <pow+0x4a>
 800a0f8:	4642      	mov	r2, r8
 800a0fa:	464b      	mov	r3, r9
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4649      	mov	r1, r9
 800a100:	f7f6 fd38 	bl	8000b74 <__aeabi_dcmpun>
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	b148      	cbz	r0, 800a11e <pow+0x52>
 800a10a:	4630      	mov	r0, r6
 800a10c:	4639      	mov	r1, r7
 800a10e:	f7f6 fcff 	bl	8000b10 <__aeabi_dcmpeq>
 800a112:	2800      	cmp	r0, #0
 800a114:	d17b      	bne.n	800a20e <pow+0x142>
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a11e:	4640      	mov	r0, r8
 800a120:	4649      	mov	r1, r9
 800a122:	f7f6 fcf5 	bl	8000b10 <__aeabi_dcmpeq>
 800a126:	b1e0      	cbz	r0, 800a162 <pow+0x96>
 800a128:	2200      	movs	r2, #0
 800a12a:	2300      	movs	r3, #0
 800a12c:	4630      	mov	r0, r6
 800a12e:	4639      	mov	r1, r7
 800a130:	f7f6 fcee 	bl	8000b10 <__aeabi_dcmpeq>
 800a134:	2800      	cmp	r0, #0
 800a136:	d16a      	bne.n	800a20e <pow+0x142>
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f000 fe65 	bl	800ae0a <finite>
 800a140:	2800      	cmp	r0, #0
 800a142:	d0e8      	beq.n	800a116 <pow+0x4a>
 800a144:	2200      	movs	r2, #0
 800a146:	2300      	movs	r3, #0
 800a148:	4630      	mov	r0, r6
 800a14a:	4639      	mov	r1, r7
 800a14c:	f7f6 fcea 	bl	8000b24 <__aeabi_dcmplt>
 800a150:	2800      	cmp	r0, #0
 800a152:	d0e0      	beq.n	800a116 <pow+0x4a>
 800a154:	f7ff fb4e 	bl	80097f4 <__errno>
 800a158:	2321      	movs	r3, #33	; 0x21
 800a15a:	2400      	movs	r4, #0
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	4d2e      	ldr	r5, [pc, #184]	; (800a218 <pow+0x14c>)
 800a160:	e7d9      	b.n	800a116 <pow+0x4a>
 800a162:	4620      	mov	r0, r4
 800a164:	4629      	mov	r1, r5
 800a166:	f000 fe50 	bl	800ae0a <finite>
 800a16a:	bba8      	cbnz	r0, 800a1d8 <pow+0x10c>
 800a16c:	4640      	mov	r0, r8
 800a16e:	4649      	mov	r1, r9
 800a170:	f000 fe4b 	bl	800ae0a <finite>
 800a174:	b380      	cbz	r0, 800a1d8 <pow+0x10c>
 800a176:	4630      	mov	r0, r6
 800a178:	4639      	mov	r1, r7
 800a17a:	f000 fe46 	bl	800ae0a <finite>
 800a17e:	b358      	cbz	r0, 800a1d8 <pow+0x10c>
 800a180:	4622      	mov	r2, r4
 800a182:	462b      	mov	r3, r5
 800a184:	4620      	mov	r0, r4
 800a186:	4629      	mov	r1, r5
 800a188:	f7f6 fcf4 	bl	8000b74 <__aeabi_dcmpun>
 800a18c:	b160      	cbz	r0, 800a1a8 <pow+0xdc>
 800a18e:	f7ff fb31 	bl	80097f4 <__errno>
 800a192:	2321      	movs	r3, #33	; 0x21
 800a194:	2200      	movs	r2, #0
 800a196:	6003      	str	r3, [r0, #0]
 800a198:	2300      	movs	r3, #0
 800a19a:	4610      	mov	r0, r2
 800a19c:	4619      	mov	r1, r3
 800a19e:	f7f6 fb79 	bl	8000894 <__aeabi_ddiv>
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	460d      	mov	r5, r1
 800a1a6:	e7b6      	b.n	800a116 <pow+0x4a>
 800a1a8:	f7ff fb24 	bl	80097f4 <__errno>
 800a1ac:	2322      	movs	r3, #34	; 0x22
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	6003      	str	r3, [r0, #0]
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f7f6 fcb4 	bl	8000b24 <__aeabi_dcmplt>
 800a1bc:	2400      	movs	r4, #0
 800a1be:	b148      	cbz	r0, 800a1d4 <pow+0x108>
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f000 fe2e 	bl	800ae24 <rint>
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	f7f6 fca0 	bl	8000b10 <__aeabi_dcmpeq>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0c4      	beq.n	800a15e <pow+0x92>
 800a1d4:	4d11      	ldr	r5, [pc, #68]	; (800a21c <pow+0x150>)
 800a1d6:	e79e      	b.n	800a116 <pow+0x4a>
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f6 fc96 	bl	8000b10 <__aeabi_dcmpeq>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d096      	beq.n	800a116 <pow+0x4a>
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	f000 fe0d 	bl	800ae0a <finite>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d090      	beq.n	800a116 <pow+0x4a>
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	f000 fe07 	bl	800ae0a <finite>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d08a      	beq.n	800a116 <pow+0x4a>
 800a200:	f7ff faf8 	bl	80097f4 <__errno>
 800a204:	2322      	movs	r3, #34	; 0x22
 800a206:	2400      	movs	r4, #0
 800a208:	2500      	movs	r5, #0
 800a20a:	6003      	str	r3, [r0, #0]
 800a20c:	e783      	b.n	800a116 <pow+0x4a>
 800a20e:	2400      	movs	r4, #0
 800a210:	4d03      	ldr	r5, [pc, #12]	; (800a220 <pow+0x154>)
 800a212:	e780      	b.n	800a116 <pow+0x4a>
 800a214:	200001e4 	.word	0x200001e4
 800a218:	fff00000 	.word	0xfff00000
 800a21c:	7ff00000 	.word	0x7ff00000
 800a220:	3ff00000 	.word	0x3ff00000

0800a224 <sqrt>:
 800a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a226:	4606      	mov	r6, r0
 800a228:	460f      	mov	r7, r1
 800a22a:	f000 fd3f 	bl	800acac <__ieee754_sqrt>
 800a22e:	4b12      	ldr	r3, [pc, #72]	; (800a278 <sqrt+0x54>)
 800a230:	4604      	mov	r4, r0
 800a232:	f993 3000 	ldrsb.w	r3, [r3]
 800a236:	460d      	mov	r5, r1
 800a238:	3301      	adds	r3, #1
 800a23a:	d019      	beq.n	800a270 <sqrt+0x4c>
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	f7f6 fc96 	bl	8000b74 <__aeabi_dcmpun>
 800a248:	b990      	cbnz	r0, 800a270 <sqrt+0x4c>
 800a24a:	2200      	movs	r2, #0
 800a24c:	2300      	movs	r3, #0
 800a24e:	4630      	mov	r0, r6
 800a250:	4639      	mov	r1, r7
 800a252:	f7f6 fc67 	bl	8000b24 <__aeabi_dcmplt>
 800a256:	b158      	cbz	r0, 800a270 <sqrt+0x4c>
 800a258:	f7ff facc 	bl	80097f4 <__errno>
 800a25c:	2321      	movs	r3, #33	; 0x21
 800a25e:	2200      	movs	r2, #0
 800a260:	6003      	str	r3, [r0, #0]
 800a262:	2300      	movs	r3, #0
 800a264:	4610      	mov	r0, r2
 800a266:	4619      	mov	r1, r3
 800a268:	f7f6 fb14 	bl	8000894 <__aeabi_ddiv>
 800a26c:	4604      	mov	r4, r0
 800a26e:	460d      	mov	r5, r1
 800a270:	4620      	mov	r0, r4
 800a272:	4629      	mov	r1, r5
 800a274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a276:	bf00      	nop
 800a278:	200001e4 	.word	0x200001e4
 800a27c:	00000000 	.word	0x00000000

0800a280 <__ieee754_pow>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	b093      	sub	sp, #76	; 0x4c
 800a286:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a28a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a28e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a292:	ea55 0302 	orrs.w	r3, r5, r2
 800a296:	4607      	mov	r7, r0
 800a298:	4688      	mov	r8, r1
 800a29a:	f000 84bf 	beq.w	800ac1c <__ieee754_pow+0x99c>
 800a29e:	4b7e      	ldr	r3, [pc, #504]	; (800a498 <__ieee754_pow+0x218>)
 800a2a0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	4689      	mov	r9, r1
 800a2a8:	4682      	mov	sl, r0
 800a2aa:	dc09      	bgt.n	800a2c0 <__ieee754_pow+0x40>
 800a2ac:	d103      	bne.n	800a2b6 <__ieee754_pow+0x36>
 800a2ae:	b978      	cbnz	r0, 800a2d0 <__ieee754_pow+0x50>
 800a2b0:	42a5      	cmp	r5, r4
 800a2b2:	dd02      	ble.n	800a2ba <__ieee754_pow+0x3a>
 800a2b4:	e00c      	b.n	800a2d0 <__ieee754_pow+0x50>
 800a2b6:	429d      	cmp	r5, r3
 800a2b8:	dc02      	bgt.n	800a2c0 <__ieee754_pow+0x40>
 800a2ba:	429d      	cmp	r5, r3
 800a2bc:	d10e      	bne.n	800a2dc <__ieee754_pow+0x5c>
 800a2be:	b16a      	cbz	r2, 800a2dc <__ieee754_pow+0x5c>
 800a2c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a2c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a2c8:	ea54 030a 	orrs.w	r3, r4, sl
 800a2cc:	f000 84a6 	beq.w	800ac1c <__ieee754_pow+0x99c>
 800a2d0:	4872      	ldr	r0, [pc, #456]	; (800a49c <__ieee754_pow+0x21c>)
 800a2d2:	b013      	add	sp, #76	; 0x4c
 800a2d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d8:	f000 bd9e 	b.w	800ae18 <nan>
 800a2dc:	f1b9 0f00 	cmp.w	r9, #0
 800a2e0:	da39      	bge.n	800a356 <__ieee754_pow+0xd6>
 800a2e2:	4b6f      	ldr	r3, [pc, #444]	; (800a4a0 <__ieee754_pow+0x220>)
 800a2e4:	429d      	cmp	r5, r3
 800a2e6:	dc54      	bgt.n	800a392 <__ieee754_pow+0x112>
 800a2e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a2ec:	429d      	cmp	r5, r3
 800a2ee:	f340 84a6 	ble.w	800ac3e <__ieee754_pow+0x9be>
 800a2f2:	152b      	asrs	r3, r5, #20
 800a2f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2f8:	2b14      	cmp	r3, #20
 800a2fa:	dd0f      	ble.n	800a31c <__ieee754_pow+0x9c>
 800a2fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a300:	fa22 f103 	lsr.w	r1, r2, r3
 800a304:	fa01 f303 	lsl.w	r3, r1, r3
 800a308:	4293      	cmp	r3, r2
 800a30a:	f040 8498 	bne.w	800ac3e <__ieee754_pow+0x9be>
 800a30e:	f001 0101 	and.w	r1, r1, #1
 800a312:	f1c1 0302 	rsb	r3, r1, #2
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	b182      	cbz	r2, 800a33c <__ieee754_pow+0xbc>
 800a31a:	e05e      	b.n	800a3da <__ieee754_pow+0x15a>
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	d15a      	bne.n	800a3d6 <__ieee754_pow+0x156>
 800a320:	f1c3 0314 	rsb	r3, r3, #20
 800a324:	fa45 f103 	asr.w	r1, r5, r3
 800a328:	fa01 f303 	lsl.w	r3, r1, r3
 800a32c:	42ab      	cmp	r3, r5
 800a32e:	f040 8483 	bne.w	800ac38 <__ieee754_pow+0x9b8>
 800a332:	f001 0101 	and.w	r1, r1, #1
 800a336:	f1c1 0302 	rsb	r3, r1, #2
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4b59      	ldr	r3, [pc, #356]	; (800a4a4 <__ieee754_pow+0x224>)
 800a33e:	429d      	cmp	r5, r3
 800a340:	d130      	bne.n	800a3a4 <__ieee754_pow+0x124>
 800a342:	2e00      	cmp	r6, #0
 800a344:	f280 8474 	bge.w	800ac30 <__ieee754_pow+0x9b0>
 800a348:	463a      	mov	r2, r7
 800a34a:	4643      	mov	r3, r8
 800a34c:	2000      	movs	r0, #0
 800a34e:	4955      	ldr	r1, [pc, #340]	; (800a4a4 <__ieee754_pow+0x224>)
 800a350:	f7f6 faa0 	bl	8000894 <__aeabi_ddiv>
 800a354:	e02f      	b.n	800a3b6 <__ieee754_pow+0x136>
 800a356:	2300      	movs	r3, #0
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	d13d      	bne.n	800a3da <__ieee754_pow+0x15a>
 800a35e:	4b4e      	ldr	r3, [pc, #312]	; (800a498 <__ieee754_pow+0x218>)
 800a360:	429d      	cmp	r5, r3
 800a362:	d1eb      	bne.n	800a33c <__ieee754_pow+0xbc>
 800a364:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a368:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a36c:	ea53 030a 	orrs.w	r3, r3, sl
 800a370:	f000 8454 	beq.w	800ac1c <__ieee754_pow+0x99c>
 800a374:	4b4c      	ldr	r3, [pc, #304]	; (800a4a8 <__ieee754_pow+0x228>)
 800a376:	429c      	cmp	r4, r3
 800a378:	dd0d      	ble.n	800a396 <__ieee754_pow+0x116>
 800a37a:	2e00      	cmp	r6, #0
 800a37c:	f280 8454 	bge.w	800ac28 <__ieee754_pow+0x9a8>
 800a380:	f04f 0b00 	mov.w	fp, #0
 800a384:	f04f 0c00 	mov.w	ip, #0
 800a388:	4658      	mov	r0, fp
 800a38a:	4661      	mov	r1, ip
 800a38c:	b013      	add	sp, #76	; 0x4c
 800a38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a392:	2302      	movs	r3, #2
 800a394:	e7e0      	b.n	800a358 <__ieee754_pow+0xd8>
 800a396:	2e00      	cmp	r6, #0
 800a398:	daf2      	bge.n	800a380 <__ieee754_pow+0x100>
 800a39a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a39e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a3a2:	e7f1      	b.n	800a388 <__ieee754_pow+0x108>
 800a3a4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a3a8:	d108      	bne.n	800a3bc <__ieee754_pow+0x13c>
 800a3aa:	463a      	mov	r2, r7
 800a3ac:	4643      	mov	r3, r8
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	4641      	mov	r1, r8
 800a3b2:	f7f6 f945 	bl	8000640 <__aeabi_dmul>
 800a3b6:	4683      	mov	fp, r0
 800a3b8:	468c      	mov	ip, r1
 800a3ba:	e7e5      	b.n	800a388 <__ieee754_pow+0x108>
 800a3bc:	4b3b      	ldr	r3, [pc, #236]	; (800a4ac <__ieee754_pow+0x22c>)
 800a3be:	429e      	cmp	r6, r3
 800a3c0:	d10b      	bne.n	800a3da <__ieee754_pow+0x15a>
 800a3c2:	f1b9 0f00 	cmp.w	r9, #0
 800a3c6:	db08      	blt.n	800a3da <__ieee754_pow+0x15a>
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	4641      	mov	r1, r8
 800a3cc:	b013      	add	sp, #76	; 0x4c
 800a3ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d2:	f000 bc6b 	b.w	800acac <__ieee754_sqrt>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	4638      	mov	r0, r7
 800a3dc:	4641      	mov	r1, r8
 800a3de:	f000 fd11 	bl	800ae04 <fabs>
 800a3e2:	4683      	mov	fp, r0
 800a3e4:	468c      	mov	ip, r1
 800a3e6:	f1ba 0f00 	cmp.w	sl, #0
 800a3ea:	d129      	bne.n	800a440 <__ieee754_pow+0x1c0>
 800a3ec:	b124      	cbz	r4, 800a3f8 <__ieee754_pow+0x178>
 800a3ee:	4b2d      	ldr	r3, [pc, #180]	; (800a4a4 <__ieee754_pow+0x224>)
 800a3f0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d123      	bne.n	800a440 <__ieee754_pow+0x1c0>
 800a3f8:	2e00      	cmp	r6, #0
 800a3fa:	da07      	bge.n	800a40c <__ieee754_pow+0x18c>
 800a3fc:	465a      	mov	r2, fp
 800a3fe:	4663      	mov	r3, ip
 800a400:	2000      	movs	r0, #0
 800a402:	4928      	ldr	r1, [pc, #160]	; (800a4a4 <__ieee754_pow+0x224>)
 800a404:	f7f6 fa46 	bl	8000894 <__aeabi_ddiv>
 800a408:	4683      	mov	fp, r0
 800a40a:	468c      	mov	ip, r1
 800a40c:	f1b9 0f00 	cmp.w	r9, #0
 800a410:	daba      	bge.n	800a388 <__ieee754_pow+0x108>
 800a412:	9b00      	ldr	r3, [sp, #0]
 800a414:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a418:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a41c:	4323      	orrs	r3, r4
 800a41e:	d108      	bne.n	800a432 <__ieee754_pow+0x1b2>
 800a420:	465a      	mov	r2, fp
 800a422:	4663      	mov	r3, ip
 800a424:	4658      	mov	r0, fp
 800a426:	4661      	mov	r1, ip
 800a428:	f7f5 ff52 	bl	80002d0 <__aeabi_dsub>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	e78e      	b.n	800a350 <__ieee754_pow+0xd0>
 800a432:	9b00      	ldr	r3, [sp, #0]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d1a7      	bne.n	800a388 <__ieee754_pow+0x108>
 800a438:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a43c:	469c      	mov	ip, r3
 800a43e:	e7a3      	b.n	800a388 <__ieee754_pow+0x108>
 800a440:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a444:	3b01      	subs	r3, #1
 800a446:	930c      	str	r3, [sp, #48]	; 0x30
 800a448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a44a:	9b00      	ldr	r3, [sp, #0]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	d104      	bne.n	800a45a <__ieee754_pow+0x1da>
 800a450:	463a      	mov	r2, r7
 800a452:	4643      	mov	r3, r8
 800a454:	4638      	mov	r0, r7
 800a456:	4641      	mov	r1, r8
 800a458:	e7e6      	b.n	800a428 <__ieee754_pow+0x1a8>
 800a45a:	4b15      	ldr	r3, [pc, #84]	; (800a4b0 <__ieee754_pow+0x230>)
 800a45c:	429d      	cmp	r5, r3
 800a45e:	f340 80f9 	ble.w	800a654 <__ieee754_pow+0x3d4>
 800a462:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a466:	429d      	cmp	r5, r3
 800a468:	4b0f      	ldr	r3, [pc, #60]	; (800a4a8 <__ieee754_pow+0x228>)
 800a46a:	dd09      	ble.n	800a480 <__ieee754_pow+0x200>
 800a46c:	429c      	cmp	r4, r3
 800a46e:	dc0c      	bgt.n	800a48a <__ieee754_pow+0x20a>
 800a470:	2e00      	cmp	r6, #0
 800a472:	da85      	bge.n	800a380 <__ieee754_pow+0x100>
 800a474:	a306      	add	r3, pc, #24	; (adr r3, 800a490 <__ieee754_pow+0x210>)
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	4610      	mov	r0, r2
 800a47c:	4619      	mov	r1, r3
 800a47e:	e798      	b.n	800a3b2 <__ieee754_pow+0x132>
 800a480:	429c      	cmp	r4, r3
 800a482:	dbf5      	blt.n	800a470 <__ieee754_pow+0x1f0>
 800a484:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <__ieee754_pow+0x224>)
 800a486:	429c      	cmp	r4, r3
 800a488:	dd14      	ble.n	800a4b4 <__ieee754_pow+0x234>
 800a48a:	2e00      	cmp	r6, #0
 800a48c:	dcf2      	bgt.n	800a474 <__ieee754_pow+0x1f4>
 800a48e:	e777      	b.n	800a380 <__ieee754_pow+0x100>
 800a490:	8800759c 	.word	0x8800759c
 800a494:	7e37e43c 	.word	0x7e37e43c
 800a498:	7ff00000 	.word	0x7ff00000
 800a49c:	0800b125 	.word	0x0800b125
 800a4a0:	433fffff 	.word	0x433fffff
 800a4a4:	3ff00000 	.word	0x3ff00000
 800a4a8:	3fefffff 	.word	0x3fefffff
 800a4ac:	3fe00000 	.word	0x3fe00000
 800a4b0:	41e00000 	.word	0x41e00000
 800a4b4:	4661      	mov	r1, ip
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4658      	mov	r0, fp
 800a4ba:	4b61      	ldr	r3, [pc, #388]	; (800a640 <__ieee754_pow+0x3c0>)
 800a4bc:	f7f5 ff08 	bl	80002d0 <__aeabi_dsub>
 800a4c0:	a355      	add	r3, pc, #340	; (adr r3, 800a618 <__ieee754_pow+0x398>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	f7f6 f8b9 	bl	8000640 <__aeabi_dmul>
 800a4ce:	a354      	add	r3, pc, #336	; (adr r3, 800a620 <__ieee754_pow+0x3a0>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7f6 f8b0 	bl	8000640 <__aeabi_dmul>
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	4682      	mov	sl, r0
 800a4e4:	468b      	mov	fp, r1
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	4b56      	ldr	r3, [pc, #344]	; (800a644 <__ieee754_pow+0x3c4>)
 800a4ec:	f7f6 f8a8 	bl	8000640 <__aeabi_dmul>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	a14c      	add	r1, pc, #304	; (adr r1, 800a628 <__ieee754_pow+0x3a8>)
 800a4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4fa:	f7f5 fee9 	bl	80002d0 <__aeabi_dsub>
 800a4fe:	4622      	mov	r2, r4
 800a500:	462b      	mov	r3, r5
 800a502:	f7f6 f89d 	bl	8000640 <__aeabi_dmul>
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	2000      	movs	r0, #0
 800a50c:	494e      	ldr	r1, [pc, #312]	; (800a648 <__ieee754_pow+0x3c8>)
 800a50e:	f7f5 fedf 	bl	80002d0 <__aeabi_dsub>
 800a512:	4622      	mov	r2, r4
 800a514:	462b      	mov	r3, r5
 800a516:	4680      	mov	r8, r0
 800a518:	4689      	mov	r9, r1
 800a51a:	4620      	mov	r0, r4
 800a51c:	4629      	mov	r1, r5
 800a51e:	f7f6 f88f 	bl	8000640 <__aeabi_dmul>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4640      	mov	r0, r8
 800a528:	4649      	mov	r1, r9
 800a52a:	f7f6 f889 	bl	8000640 <__aeabi_dmul>
 800a52e:	a340      	add	r3, pc, #256	; (adr r3, 800a630 <__ieee754_pow+0x3b0>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f6 f884 	bl	8000640 <__aeabi_dmul>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4650      	mov	r0, sl
 800a53e:	4659      	mov	r1, fp
 800a540:	f7f5 fec6 	bl	80002d0 <__aeabi_dsub>
 800a544:	f04f 0a00 	mov.w	sl, #0
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4604      	mov	r4, r0
 800a54e:	460d      	mov	r5, r1
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7f5 febe 	bl	80002d4 <__adddf3>
 800a558:	4632      	mov	r2, r6
 800a55a:	463b      	mov	r3, r7
 800a55c:	4650      	mov	r0, sl
 800a55e:	468b      	mov	fp, r1
 800a560:	f7f5 feb6 	bl	80002d0 <__aeabi_dsub>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4620      	mov	r0, r4
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7f5 feb0 	bl	80002d0 <__aeabi_dsub>
 800a570:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a578:	3b01      	subs	r3, #1
 800a57a:	4313      	orrs	r3, r2
 800a57c:	f04f 0600 	mov.w	r6, #0
 800a580:	f04f 0200 	mov.w	r2, #0
 800a584:	bf0c      	ite	eq
 800a586:	4b31      	ldreq	r3, [pc, #196]	; (800a64c <__ieee754_pow+0x3cc>)
 800a588:	4b2d      	ldrne	r3, [pc, #180]	; (800a640 <__ieee754_pow+0x3c0>)
 800a58a:	4604      	mov	r4, r0
 800a58c:	460d      	mov	r5, r1
 800a58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a592:	e9cd 2300 	strd	r2, r3, [sp]
 800a596:	4632      	mov	r2, r6
 800a598:	463b      	mov	r3, r7
 800a59a:	f7f5 fe99 	bl	80002d0 <__aeabi_dsub>
 800a59e:	4652      	mov	r2, sl
 800a5a0:	465b      	mov	r3, fp
 800a5a2:	f7f6 f84d 	bl	8000640 <__aeabi_dmul>
 800a5a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	4689      	mov	r9, r1
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f7f6 f845 	bl	8000640 <__aeabi_dmul>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4649      	mov	r1, r9
 800a5be:	f7f5 fe89 	bl	80002d4 <__adddf3>
 800a5c2:	4632      	mov	r2, r6
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	4689      	mov	r9, r1
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	4659      	mov	r1, fp
 800a5ce:	f7f6 f837 	bl	8000640 <__aeabi_dmul>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	460d      	mov	r5, r1
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4602      	mov	r2, r0
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4640      	mov	r0, r8
 800a5de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a5e2:	f7f5 fe77 	bl	80002d4 <__adddf3>
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <__ieee754_pow+0x3d0>)
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	4299      	cmp	r1, r3
 800a5ec:	460f      	mov	r7, r1
 800a5ee:	460e      	mov	r6, r1
 800a5f0:	f340 82ed 	ble.w	800abce <__ieee754_pow+0x94e>
 800a5f4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a5f8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a5fc:	4303      	orrs	r3, r0
 800a5fe:	f000 81e7 	beq.w	800a9d0 <__ieee754_pow+0x750>
 800a602:	a30d      	add	r3, pc, #52	; (adr r3, 800a638 <__ieee754_pow+0x3b8>)
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a60c:	f7f6 f818 	bl	8000640 <__aeabi_dmul>
 800a610:	a309      	add	r3, pc, #36	; (adr r3, 800a638 <__ieee754_pow+0x3b8>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	e6cc      	b.n	800a3b2 <__ieee754_pow+0x132>
 800a618:	60000000 	.word	0x60000000
 800a61c:	3ff71547 	.word	0x3ff71547
 800a620:	f85ddf44 	.word	0xf85ddf44
 800a624:	3e54ae0b 	.word	0x3e54ae0b
 800a628:	55555555 	.word	0x55555555
 800a62c:	3fd55555 	.word	0x3fd55555
 800a630:	652b82fe 	.word	0x652b82fe
 800a634:	3ff71547 	.word	0x3ff71547
 800a638:	8800759c 	.word	0x8800759c
 800a63c:	7e37e43c 	.word	0x7e37e43c
 800a640:	3ff00000 	.word	0x3ff00000
 800a644:	3fd00000 	.word	0x3fd00000
 800a648:	3fe00000 	.word	0x3fe00000
 800a64c:	bff00000 	.word	0xbff00000
 800a650:	408fffff 	.word	0x408fffff
 800a654:	4bd4      	ldr	r3, [pc, #848]	; (800a9a8 <__ieee754_pow+0x728>)
 800a656:	2200      	movs	r2, #0
 800a658:	ea09 0303 	and.w	r3, r9, r3
 800a65c:	b943      	cbnz	r3, 800a670 <__ieee754_pow+0x3f0>
 800a65e:	4658      	mov	r0, fp
 800a660:	4661      	mov	r1, ip
 800a662:	4bd2      	ldr	r3, [pc, #840]	; (800a9ac <__ieee754_pow+0x72c>)
 800a664:	f7f5 ffec 	bl	8000640 <__aeabi_dmul>
 800a668:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a66c:	4683      	mov	fp, r0
 800a66e:	460c      	mov	r4, r1
 800a670:	1523      	asrs	r3, r4, #20
 800a672:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a676:	4413      	add	r3, r2
 800a678:	930b      	str	r3, [sp, #44]	; 0x2c
 800a67a:	4bcd      	ldr	r3, [pc, #820]	; (800a9b0 <__ieee754_pow+0x730>)
 800a67c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a680:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a684:	429c      	cmp	r4, r3
 800a686:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a68a:	dd08      	ble.n	800a69e <__ieee754_pow+0x41e>
 800a68c:	4bc9      	ldr	r3, [pc, #804]	; (800a9b4 <__ieee754_pow+0x734>)
 800a68e:	429c      	cmp	r4, r3
 800a690:	f340 819c 	ble.w	800a9cc <__ieee754_pow+0x74c>
 800a694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a696:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a69a:	3301      	adds	r3, #1
 800a69c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a69e:	2600      	movs	r6, #0
 800a6a0:	00f3      	lsls	r3, r6, #3
 800a6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a6a4:	4bc4      	ldr	r3, [pc, #784]	; (800a9b8 <__ieee754_pow+0x738>)
 800a6a6:	4658      	mov	r0, fp
 800a6a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	f7f5 fe09 	bl	80002d0 <__aeabi_dsub>
 800a6be:	46da      	mov	sl, fp
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a6c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a6cc:	f7f5 fe02 	bl	80002d4 <__adddf3>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	49b9      	ldr	r1, [pc, #740]	; (800a9bc <__ieee754_pow+0x73c>)
 800a6d8:	f7f6 f8dc 	bl	8000894 <__aeabi_ddiv>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6e8:	f7f5 ffaa 	bl	8000640 <__aeabi_dmul>
 800a6ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6f0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a6f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	46ab      	mov	fp, r5
 800a6fe:	106d      	asrs	r5, r5, #1
 800a700:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a704:	9304      	str	r3, [sp, #16]
 800a706:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a70a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a70e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a712:	4640      	mov	r0, r8
 800a714:	4649      	mov	r1, r9
 800a716:	4614      	mov	r4, r2
 800a718:	461d      	mov	r5, r3
 800a71a:	f7f5 ff91 	bl	8000640 <__aeabi_dmul>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a726:	f7f5 fdd3 	bl	80002d0 <__aeabi_dsub>
 800a72a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a72e:	4606      	mov	r6, r0
 800a730:	460f      	mov	r7, r1
 800a732:	4620      	mov	r0, r4
 800a734:	4629      	mov	r1, r5
 800a736:	f7f5 fdcb 	bl	80002d0 <__aeabi_dsub>
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	4650      	mov	r0, sl
 800a740:	4659      	mov	r1, fp
 800a742:	f7f5 fdc5 	bl	80002d0 <__aeabi_dsub>
 800a746:	4642      	mov	r2, r8
 800a748:	464b      	mov	r3, r9
 800a74a:	f7f5 ff79 	bl	8000640 <__aeabi_dmul>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4630      	mov	r0, r6
 800a754:	4639      	mov	r1, r7
 800a756:	f7f5 fdbb 	bl	80002d0 <__aeabi_dsub>
 800a75a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a75e:	f7f5 ff6f 	bl	8000640 <__aeabi_dmul>
 800a762:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a76a:	4610      	mov	r0, r2
 800a76c:	4619      	mov	r1, r3
 800a76e:	f7f5 ff67 	bl	8000640 <__aeabi_dmul>
 800a772:	a37b      	add	r3, pc, #492	; (adr r3, 800a960 <__ieee754_pow+0x6e0>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	4604      	mov	r4, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	f7f5 ff60 	bl	8000640 <__aeabi_dmul>
 800a780:	a379      	add	r3, pc, #484	; (adr r3, 800a968 <__ieee754_pow+0x6e8>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fda5 	bl	80002d4 <__adddf3>
 800a78a:	4622      	mov	r2, r4
 800a78c:	462b      	mov	r3, r5
 800a78e:	f7f5 ff57 	bl	8000640 <__aeabi_dmul>
 800a792:	a377      	add	r3, pc, #476	; (adr r3, 800a970 <__ieee754_pow+0x6f0>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f7f5 fd9c 	bl	80002d4 <__adddf3>
 800a79c:	4622      	mov	r2, r4
 800a79e:	462b      	mov	r3, r5
 800a7a0:	f7f5 ff4e 	bl	8000640 <__aeabi_dmul>
 800a7a4:	a374      	add	r3, pc, #464	; (adr r3, 800a978 <__ieee754_pow+0x6f8>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd93 	bl	80002d4 <__adddf3>
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	f7f5 ff45 	bl	8000640 <__aeabi_dmul>
 800a7b6:	a372      	add	r3, pc, #456	; (adr r3, 800a980 <__ieee754_pow+0x700>)
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	f7f5 fd8a 	bl	80002d4 <__adddf3>
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	462b      	mov	r3, r5
 800a7c4:	f7f5 ff3c 	bl	8000640 <__aeabi_dmul>
 800a7c8:	a36f      	add	r3, pc, #444	; (adr r3, 800a988 <__ieee754_pow+0x708>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 fd81 	bl	80002d4 <__adddf3>
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	462b      	mov	r3, r5
 800a7da:	4620      	mov	r0, r4
 800a7dc:	4629      	mov	r1, r5
 800a7de:	f7f5 ff2f 	bl	8000640 <__aeabi_dmul>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7f5 ff29 	bl	8000640 <__aeabi_dmul>
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7f6:	4642      	mov	r2, r8
 800a7f8:	464b      	mov	r3, r9
 800a7fa:	f7f5 fd6b 	bl	80002d4 <__adddf3>
 800a7fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a802:	f7f5 ff1d 	bl	8000640 <__aeabi_dmul>
 800a806:	4622      	mov	r2, r4
 800a808:	462b      	mov	r3, r5
 800a80a:	f7f5 fd63 	bl	80002d4 <__adddf3>
 800a80e:	4642      	mov	r2, r8
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	464b      	mov	r3, r9
 800a816:	4640      	mov	r0, r8
 800a818:	4649      	mov	r1, r9
 800a81a:	f7f5 ff11 	bl	8000640 <__aeabi_dmul>
 800a81e:	2200      	movs	r2, #0
 800a820:	4b67      	ldr	r3, [pc, #412]	; (800a9c0 <__ieee754_pow+0x740>)
 800a822:	4682      	mov	sl, r0
 800a824:	468b      	mov	fp, r1
 800a826:	f7f5 fd55 	bl	80002d4 <__adddf3>
 800a82a:	4632      	mov	r2, r6
 800a82c:	463b      	mov	r3, r7
 800a82e:	f7f5 fd51 	bl	80002d4 <__adddf3>
 800a832:	9c04      	ldr	r4, [sp, #16]
 800a834:	460d      	mov	r5, r1
 800a836:	4622      	mov	r2, r4
 800a838:	460b      	mov	r3, r1
 800a83a:	4640      	mov	r0, r8
 800a83c:	4649      	mov	r1, r9
 800a83e:	f7f5 feff 	bl	8000640 <__aeabi_dmul>
 800a842:	2200      	movs	r2, #0
 800a844:	4680      	mov	r8, r0
 800a846:	4689      	mov	r9, r1
 800a848:	4620      	mov	r0, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	4b5c      	ldr	r3, [pc, #368]	; (800a9c0 <__ieee754_pow+0x740>)
 800a84e:	f7f5 fd3f 	bl	80002d0 <__aeabi_dsub>
 800a852:	4652      	mov	r2, sl
 800a854:	465b      	mov	r3, fp
 800a856:	f7f5 fd3b 	bl	80002d0 <__aeabi_dsub>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4630      	mov	r0, r6
 800a860:	4639      	mov	r1, r7
 800a862:	f7f5 fd35 	bl	80002d0 <__aeabi_dsub>
 800a866:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a86a:	f7f5 fee9 	bl	8000640 <__aeabi_dmul>
 800a86e:	4622      	mov	r2, r4
 800a870:	4606      	mov	r6, r0
 800a872:	460f      	mov	r7, r1
 800a874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a878:	462b      	mov	r3, r5
 800a87a:	f7f5 fee1 	bl	8000640 <__aeabi_dmul>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	4630      	mov	r0, r6
 800a884:	4639      	mov	r1, r7
 800a886:	f7f5 fd25 	bl	80002d4 <__adddf3>
 800a88a:	4606      	mov	r6, r0
 800a88c:	460f      	mov	r7, r1
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4640      	mov	r0, r8
 800a894:	4649      	mov	r1, r9
 800a896:	f7f5 fd1d 	bl	80002d4 <__adddf3>
 800a89a:	a33d      	add	r3, pc, #244	; (adr r3, 800a990 <__ieee754_pow+0x710>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	9c04      	ldr	r4, [sp, #16]
 800a8a2:	460d      	mov	r5, r1
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f7f5 fecb 	bl	8000640 <__aeabi_dmul>
 800a8aa:	4642      	mov	r2, r8
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7f5 fd0b 	bl	80002d0 <__aeabi_dsub>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	4630      	mov	r0, r6
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	f7f5 fd05 	bl	80002d0 <__aeabi_dsub>
 800a8c6:	a334      	add	r3, pc, #208	; (adr r3, 800a998 <__ieee754_pow+0x718>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	f7f5 feb8 	bl	8000640 <__aeabi_dmul>
 800a8d0:	a333      	add	r3, pc, #204	; (adr r3, 800a9a0 <__ieee754_pow+0x720>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	460f      	mov	r7, r1
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4629      	mov	r1, r5
 800a8de:	f7f5 feaf 	bl	8000640 <__aeabi_dmul>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	f7f5 fcf3 	bl	80002d4 <__adddf3>
 800a8ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8f0:	4b34      	ldr	r3, [pc, #208]	; (800a9c4 <__ieee754_pow+0x744>)
 800a8f2:	4413      	add	r3, r2
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f7f5 fcec 	bl	80002d4 <__adddf3>
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a900:	4689      	mov	r9, r1
 800a902:	f7f5 fe33 	bl	800056c <__aeabi_i2d>
 800a906:	4604      	mov	r4, r0
 800a908:	460d      	mov	r5, r1
 800a90a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a90c:	4b2e      	ldr	r3, [pc, #184]	; (800a9c8 <__ieee754_pow+0x748>)
 800a90e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a912:	4413      	add	r3, r2
 800a914:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a918:	4642      	mov	r2, r8
 800a91a:	464b      	mov	r3, r9
 800a91c:	f7f5 fcda 	bl	80002d4 <__adddf3>
 800a920:	4632      	mov	r2, r6
 800a922:	463b      	mov	r3, r7
 800a924:	f7f5 fcd6 	bl	80002d4 <__adddf3>
 800a928:	4622      	mov	r2, r4
 800a92a:	462b      	mov	r3, r5
 800a92c:	f7f5 fcd2 	bl	80002d4 <__adddf3>
 800a930:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a934:	4622      	mov	r2, r4
 800a936:	462b      	mov	r3, r5
 800a938:	4650      	mov	r0, sl
 800a93a:	468b      	mov	fp, r1
 800a93c:	f7f5 fcc8 	bl	80002d0 <__aeabi_dsub>
 800a940:	4632      	mov	r2, r6
 800a942:	463b      	mov	r3, r7
 800a944:	f7f5 fcc4 	bl	80002d0 <__aeabi_dsub>
 800a948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a94c:	f7f5 fcc0 	bl	80002d0 <__aeabi_dsub>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4640      	mov	r0, r8
 800a956:	4649      	mov	r1, r9
 800a958:	e608      	b.n	800a56c <__ieee754_pow+0x2ec>
 800a95a:	bf00      	nop
 800a95c:	f3af 8000 	nop.w
 800a960:	4a454eef 	.word	0x4a454eef
 800a964:	3fca7e28 	.word	0x3fca7e28
 800a968:	93c9db65 	.word	0x93c9db65
 800a96c:	3fcd864a 	.word	0x3fcd864a
 800a970:	a91d4101 	.word	0xa91d4101
 800a974:	3fd17460 	.word	0x3fd17460
 800a978:	518f264d 	.word	0x518f264d
 800a97c:	3fd55555 	.word	0x3fd55555
 800a980:	db6fabff 	.word	0xdb6fabff
 800a984:	3fdb6db6 	.word	0x3fdb6db6
 800a988:	33333303 	.word	0x33333303
 800a98c:	3fe33333 	.word	0x3fe33333
 800a990:	e0000000 	.word	0xe0000000
 800a994:	3feec709 	.word	0x3feec709
 800a998:	dc3a03fd 	.word	0xdc3a03fd
 800a99c:	3feec709 	.word	0x3feec709
 800a9a0:	145b01f5 	.word	0x145b01f5
 800a9a4:	be3e2fe0 	.word	0xbe3e2fe0
 800a9a8:	7ff00000 	.word	0x7ff00000
 800a9ac:	43400000 	.word	0x43400000
 800a9b0:	0003988e 	.word	0x0003988e
 800a9b4:	000bb679 	.word	0x000bb679
 800a9b8:	0800b158 	.word	0x0800b158
 800a9bc:	3ff00000 	.word	0x3ff00000
 800a9c0:	40080000 	.word	0x40080000
 800a9c4:	0800b178 	.word	0x0800b178
 800a9c8:	0800b168 	.word	0x0800b168
 800a9cc:	2601      	movs	r6, #1
 800a9ce:	e667      	b.n	800a6a0 <__ieee754_pow+0x420>
 800a9d0:	a39d      	add	r3, pc, #628	; (adr r3, 800ac48 <__ieee754_pow+0x9c8>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4649      	mov	r1, r9
 800a9da:	f7f5 fc7b 	bl	80002d4 <__adddf3>
 800a9de:	4622      	mov	r2, r4
 800a9e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9e4:	462b      	mov	r3, r5
 800a9e6:	4650      	mov	r0, sl
 800a9e8:	4639      	mov	r1, r7
 800a9ea:	f7f5 fc71 	bl	80002d0 <__aeabi_dsub>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9f6:	f7f6 f8b3 	bl	8000b60 <__aeabi_dcmpgt>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	f47f ae01 	bne.w	800a602 <__ieee754_pow+0x382>
 800aa00:	4aa5      	ldr	r2, [pc, #660]	; (800ac98 <__ieee754_pow+0xa18>)
 800aa02:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800aa06:	4293      	cmp	r3, r2
 800aa08:	f340 8103 	ble.w	800ac12 <__ieee754_pow+0x992>
 800aa0c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800aa10:	2000      	movs	r0, #0
 800aa12:	151b      	asrs	r3, r3, #20
 800aa14:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aa18:	fa4a f303 	asr.w	r3, sl, r3
 800aa1c:	4433      	add	r3, r6
 800aa1e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aa22:	4f9e      	ldr	r7, [pc, #632]	; (800ac9c <__ieee754_pow+0xa1c>)
 800aa24:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aa28:	4117      	asrs	r7, r2
 800aa2a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800aa2e:	ea23 0107 	bic.w	r1, r3, r7
 800aa32:	f1c2 0214 	rsb	r2, r2, #20
 800aa36:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	fa4a fa02 	asr.w	sl, sl, r2
 800aa40:	2e00      	cmp	r6, #0
 800aa42:	4602      	mov	r2, r0
 800aa44:	4629      	mov	r1, r5
 800aa46:	4620      	mov	r0, r4
 800aa48:	bfb8      	it	lt
 800aa4a:	f1ca 0a00 	rsblt	sl, sl, #0
 800aa4e:	f7f5 fc3f 	bl	80002d0 <__aeabi_dsub>
 800aa52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa5a:	2400      	movs	r4, #0
 800aa5c:	4642      	mov	r2, r8
 800aa5e:	464b      	mov	r3, r9
 800aa60:	f7f5 fc38 	bl	80002d4 <__adddf3>
 800aa64:	a37a      	add	r3, pc, #488	; (adr r3, 800ac50 <__ieee754_pow+0x9d0>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	460d      	mov	r5, r1
 800aa6e:	f7f5 fde7 	bl	8000640 <__aeabi_dmul>
 800aa72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	f7f5 fc27 	bl	80002d0 <__aeabi_dsub>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4640      	mov	r0, r8
 800aa88:	4649      	mov	r1, r9
 800aa8a:	f7f5 fc21 	bl	80002d0 <__aeabi_dsub>
 800aa8e:	a372      	add	r3, pc, #456	; (adr r3, 800ac58 <__ieee754_pow+0x9d8>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 fdd4 	bl	8000640 <__aeabi_dmul>
 800aa98:	a371      	add	r3, pc, #452	; (adr r3, 800ac60 <__ieee754_pow+0x9e0>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	4689      	mov	r9, r1
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	f7f5 fdcb 	bl	8000640 <__aeabi_dmul>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f5 fc0f 	bl	80002d4 <__adddf3>
 800aab6:	4604      	mov	r4, r0
 800aab8:	460d      	mov	r5, r1
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4630      	mov	r0, r6
 800aac0:	4639      	mov	r1, r7
 800aac2:	f7f5 fc07 	bl	80002d4 <__adddf3>
 800aac6:	4632      	mov	r2, r6
 800aac8:	463b      	mov	r3, r7
 800aaca:	4680      	mov	r8, r0
 800aacc:	4689      	mov	r9, r1
 800aace:	f7f5 fbff 	bl	80002d0 <__aeabi_dsub>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7f5 fbf9 	bl	80002d0 <__aeabi_dsub>
 800aade:	4642      	mov	r2, r8
 800aae0:	4606      	mov	r6, r0
 800aae2:	460f      	mov	r7, r1
 800aae4:	464b      	mov	r3, r9
 800aae6:	4640      	mov	r0, r8
 800aae8:	4649      	mov	r1, r9
 800aaea:	f7f5 fda9 	bl	8000640 <__aeabi_dmul>
 800aaee:	a35e      	add	r3, pc, #376	; (adr r3, 800ac68 <__ieee754_pow+0x9e8>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	460d      	mov	r5, r1
 800aaf8:	f7f5 fda2 	bl	8000640 <__aeabi_dmul>
 800aafc:	a35c      	add	r3, pc, #368	; (adr r3, 800ac70 <__ieee754_pow+0x9f0>)
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	f7f5 fbe5 	bl	80002d0 <__aeabi_dsub>
 800ab06:	4622      	mov	r2, r4
 800ab08:	462b      	mov	r3, r5
 800ab0a:	f7f5 fd99 	bl	8000640 <__aeabi_dmul>
 800ab0e:	a35a      	add	r3, pc, #360	; (adr r3, 800ac78 <__ieee754_pow+0x9f8>)
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f7f5 fbde 	bl	80002d4 <__adddf3>
 800ab18:	4622      	mov	r2, r4
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	f7f5 fd90 	bl	8000640 <__aeabi_dmul>
 800ab20:	a357      	add	r3, pc, #348	; (adr r3, 800ac80 <__ieee754_pow+0xa00>)
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f7f5 fbd3 	bl	80002d0 <__aeabi_dsub>
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	462b      	mov	r3, r5
 800ab2e:	f7f5 fd87 	bl	8000640 <__aeabi_dmul>
 800ab32:	a355      	add	r3, pc, #340	; (adr r3, 800ac88 <__ieee754_pow+0xa08>)
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	f7f5 fbcc 	bl	80002d4 <__adddf3>
 800ab3c:	4622      	mov	r2, r4
 800ab3e:	462b      	mov	r3, r5
 800ab40:	f7f5 fd7e 	bl	8000640 <__aeabi_dmul>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 fbc0 	bl	80002d0 <__aeabi_dsub>
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4640      	mov	r0, r8
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	f7f5 fd70 	bl	8000640 <__aeabi_dmul>
 800ab60:	2200      	movs	r2, #0
 800ab62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7f5 fbaf 	bl	80002d0 <__aeabi_dsub>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab7a:	f7f5 fe8b 	bl	8000894 <__aeabi_ddiv>
 800ab7e:	4632      	mov	r2, r6
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	463b      	mov	r3, r7
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7f5 fd59 	bl	8000640 <__aeabi_dmul>
 800ab8e:	4632      	mov	r2, r6
 800ab90:	463b      	mov	r3, r7
 800ab92:	f7f5 fb9f 	bl	80002d4 <__adddf3>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	f7f5 fb97 	bl	80002d0 <__aeabi_dsub>
 800aba2:	4642      	mov	r2, r8
 800aba4:	464b      	mov	r3, r9
 800aba6:	f7f5 fb93 	bl	80002d0 <__aeabi_dsub>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	2000      	movs	r0, #0
 800abb0:	493b      	ldr	r1, [pc, #236]	; (800aca0 <__ieee754_pow+0xa20>)
 800abb2:	f7f5 fb8d 	bl	80002d0 <__aeabi_dsub>
 800abb6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800abba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800abbe:	da2b      	bge.n	800ac18 <__ieee754_pow+0x998>
 800abc0:	4652      	mov	r2, sl
 800abc2:	f000 f9b9 	bl	800af38 <scalbn>
 800abc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abca:	f7ff bbf2 	b.w	800a3b2 <__ieee754_pow+0x132>
 800abce:	4b35      	ldr	r3, [pc, #212]	; (800aca4 <__ieee754_pow+0xa24>)
 800abd0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800abd4:	429f      	cmp	r7, r3
 800abd6:	f77f af13 	ble.w	800aa00 <__ieee754_pow+0x780>
 800abda:	4b33      	ldr	r3, [pc, #204]	; (800aca8 <__ieee754_pow+0xa28>)
 800abdc:	440b      	add	r3, r1
 800abde:	4303      	orrs	r3, r0
 800abe0:	d00b      	beq.n	800abfa <__ieee754_pow+0x97a>
 800abe2:	a32b      	add	r3, pc, #172	; (adr r3, 800ac90 <__ieee754_pow+0xa10>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abec:	f7f5 fd28 	bl	8000640 <__aeabi_dmul>
 800abf0:	a327      	add	r3, pc, #156	; (adr r3, 800ac90 <__ieee754_pow+0xa10>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f7ff bbdc 	b.w	800a3b2 <__ieee754_pow+0x132>
 800abfa:	4622      	mov	r2, r4
 800abfc:	462b      	mov	r3, r5
 800abfe:	f7f5 fb67 	bl	80002d0 <__aeabi_dsub>
 800ac02:	4642      	mov	r2, r8
 800ac04:	464b      	mov	r3, r9
 800ac06:	f7f5 ffa1 	bl	8000b4c <__aeabi_dcmpge>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	f43f aef8 	beq.w	800aa00 <__ieee754_pow+0x780>
 800ac10:	e7e7      	b.n	800abe2 <__ieee754_pow+0x962>
 800ac12:	f04f 0a00 	mov.w	sl, #0
 800ac16:	e71e      	b.n	800aa56 <__ieee754_pow+0x7d6>
 800ac18:	4621      	mov	r1, r4
 800ac1a:	e7d4      	b.n	800abc6 <__ieee754_pow+0x946>
 800ac1c:	f04f 0b00 	mov.w	fp, #0
 800ac20:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aca0 <__ieee754_pow+0xa20>
 800ac24:	f7ff bbb0 	b.w	800a388 <__ieee754_pow+0x108>
 800ac28:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ac2c:	f7ff bbac 	b.w	800a388 <__ieee754_pow+0x108>
 800ac30:	4638      	mov	r0, r7
 800ac32:	4641      	mov	r1, r8
 800ac34:	f7ff bbbf 	b.w	800a3b6 <__ieee754_pow+0x136>
 800ac38:	9200      	str	r2, [sp, #0]
 800ac3a:	f7ff bb7f 	b.w	800a33c <__ieee754_pow+0xbc>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f7ff bb69 	b.w	800a316 <__ieee754_pow+0x96>
 800ac44:	f3af 8000 	nop.w
 800ac48:	652b82fe 	.word	0x652b82fe
 800ac4c:	3c971547 	.word	0x3c971547
 800ac50:	00000000 	.word	0x00000000
 800ac54:	3fe62e43 	.word	0x3fe62e43
 800ac58:	fefa39ef 	.word	0xfefa39ef
 800ac5c:	3fe62e42 	.word	0x3fe62e42
 800ac60:	0ca86c39 	.word	0x0ca86c39
 800ac64:	be205c61 	.word	0xbe205c61
 800ac68:	72bea4d0 	.word	0x72bea4d0
 800ac6c:	3e663769 	.word	0x3e663769
 800ac70:	c5d26bf1 	.word	0xc5d26bf1
 800ac74:	3ebbbd41 	.word	0x3ebbbd41
 800ac78:	af25de2c 	.word	0xaf25de2c
 800ac7c:	3f11566a 	.word	0x3f11566a
 800ac80:	16bebd93 	.word	0x16bebd93
 800ac84:	3f66c16c 	.word	0x3f66c16c
 800ac88:	5555553e 	.word	0x5555553e
 800ac8c:	3fc55555 	.word	0x3fc55555
 800ac90:	c2f8f359 	.word	0xc2f8f359
 800ac94:	01a56e1f 	.word	0x01a56e1f
 800ac98:	3fe00000 	.word	0x3fe00000
 800ac9c:	000fffff 	.word	0x000fffff
 800aca0:	3ff00000 	.word	0x3ff00000
 800aca4:	4090cbff 	.word	0x4090cbff
 800aca8:	3f6f3400 	.word	0x3f6f3400

0800acac <__ieee754_sqrt>:
 800acac:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ae00 <__ieee754_sqrt+0x154>
 800acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb4:	ea3c 0c01 	bics.w	ip, ip, r1
 800acb8:	460b      	mov	r3, r1
 800acba:	4606      	mov	r6, r0
 800acbc:	460d      	mov	r5, r1
 800acbe:	460a      	mov	r2, r1
 800acc0:	4607      	mov	r7, r0
 800acc2:	4604      	mov	r4, r0
 800acc4:	d10e      	bne.n	800ace4 <__ieee754_sqrt+0x38>
 800acc6:	4602      	mov	r2, r0
 800acc8:	f7f5 fcba 	bl	8000640 <__aeabi_dmul>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4630      	mov	r0, r6
 800acd2:	4629      	mov	r1, r5
 800acd4:	f7f5 fafe 	bl	80002d4 <__adddf3>
 800acd8:	4606      	mov	r6, r0
 800acda:	460d      	mov	r5, r1
 800acdc:	4630      	mov	r0, r6
 800acde:	4629      	mov	r1, r5
 800ace0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace4:	2900      	cmp	r1, #0
 800ace6:	dc0d      	bgt.n	800ad04 <__ieee754_sqrt+0x58>
 800ace8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800acec:	ea5c 0707 	orrs.w	r7, ip, r7
 800acf0:	d0f4      	beq.n	800acdc <__ieee754_sqrt+0x30>
 800acf2:	b139      	cbz	r1, 800ad04 <__ieee754_sqrt+0x58>
 800acf4:	4602      	mov	r2, r0
 800acf6:	f7f5 faeb 	bl	80002d0 <__aeabi_dsub>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	f7f5 fdc9 	bl	8000894 <__aeabi_ddiv>
 800ad02:	e7e9      	b.n	800acd8 <__ieee754_sqrt+0x2c>
 800ad04:	1512      	asrs	r2, r2, #20
 800ad06:	d074      	beq.n	800adf2 <__ieee754_sqrt+0x146>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	07d5      	lsls	r5, r2, #31
 800ad0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad10:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ad14:	bf5e      	ittt	pl
 800ad16:	0fe3      	lsrpl	r3, r4, #31
 800ad18:	0064      	lslpl	r4, r4, #1
 800ad1a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ad1e:	0fe3      	lsrs	r3, r4, #31
 800ad20:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ad24:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ad28:	2516      	movs	r5, #22
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ad30:	1076      	asrs	r6, r6, #1
 800ad32:	0064      	lsls	r4, r4, #1
 800ad34:	188f      	adds	r7, r1, r2
 800ad36:	429f      	cmp	r7, r3
 800ad38:	bfde      	ittt	le
 800ad3a:	1bdb      	suble	r3, r3, r7
 800ad3c:	18b9      	addle	r1, r7, r2
 800ad3e:	1880      	addle	r0, r0, r2
 800ad40:	005b      	lsls	r3, r3, #1
 800ad42:	3d01      	subs	r5, #1
 800ad44:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ad48:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ad4c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ad50:	d1f0      	bne.n	800ad34 <__ieee754_sqrt+0x88>
 800ad52:	462a      	mov	r2, r5
 800ad54:	f04f 0e20 	mov.w	lr, #32
 800ad58:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ad5c:	428b      	cmp	r3, r1
 800ad5e:	eb07 0c05 	add.w	ip, r7, r5
 800ad62:	dc02      	bgt.n	800ad6a <__ieee754_sqrt+0xbe>
 800ad64:	d113      	bne.n	800ad8e <__ieee754_sqrt+0xe2>
 800ad66:	45a4      	cmp	ip, r4
 800ad68:	d811      	bhi.n	800ad8e <__ieee754_sqrt+0xe2>
 800ad6a:	f1bc 0f00 	cmp.w	ip, #0
 800ad6e:	eb0c 0507 	add.w	r5, ip, r7
 800ad72:	da43      	bge.n	800adfc <__ieee754_sqrt+0x150>
 800ad74:	2d00      	cmp	r5, #0
 800ad76:	db41      	blt.n	800adfc <__ieee754_sqrt+0x150>
 800ad78:	f101 0801 	add.w	r8, r1, #1
 800ad7c:	1a5b      	subs	r3, r3, r1
 800ad7e:	4641      	mov	r1, r8
 800ad80:	45a4      	cmp	ip, r4
 800ad82:	bf88      	it	hi
 800ad84:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ad88:	eba4 040c 	sub.w	r4, r4, ip
 800ad8c:	443a      	add	r2, r7
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	f1be 0e01 	subs.w	lr, lr, #1
 800ad94:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ad98:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ad9c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ada0:	d1dc      	bne.n	800ad5c <__ieee754_sqrt+0xb0>
 800ada2:	4323      	orrs	r3, r4
 800ada4:	d006      	beq.n	800adb4 <__ieee754_sqrt+0x108>
 800ada6:	1c54      	adds	r4, r2, #1
 800ada8:	bf0b      	itete	eq
 800adaa:	4672      	moveq	r2, lr
 800adac:	3201      	addne	r2, #1
 800adae:	3001      	addeq	r0, #1
 800adb0:	f022 0201 	bicne.w	r2, r2, #1
 800adb4:	1043      	asrs	r3, r0, #1
 800adb6:	07c1      	lsls	r1, r0, #31
 800adb8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800adbc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800adc0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800adc4:	bf48      	it	mi
 800adc6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800adca:	4610      	mov	r0, r2
 800adcc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800add0:	e782      	b.n	800acd8 <__ieee754_sqrt+0x2c>
 800add2:	0ae3      	lsrs	r3, r4, #11
 800add4:	3915      	subs	r1, #21
 800add6:	0564      	lsls	r4, r4, #21
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0fa      	beq.n	800add2 <__ieee754_sqrt+0x126>
 800addc:	02de      	lsls	r6, r3, #11
 800adde:	d50a      	bpl.n	800adf6 <__ieee754_sqrt+0x14a>
 800ade0:	f1c2 0020 	rsb	r0, r2, #32
 800ade4:	fa24 f000 	lsr.w	r0, r4, r0
 800ade8:	1e55      	subs	r5, r2, #1
 800adea:	4094      	lsls	r4, r2
 800adec:	4303      	orrs	r3, r0
 800adee:	1b4a      	subs	r2, r1, r5
 800adf0:	e78a      	b.n	800ad08 <__ieee754_sqrt+0x5c>
 800adf2:	4611      	mov	r1, r2
 800adf4:	e7f0      	b.n	800add8 <__ieee754_sqrt+0x12c>
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	3201      	adds	r2, #1
 800adfa:	e7ef      	b.n	800addc <__ieee754_sqrt+0x130>
 800adfc:	4688      	mov	r8, r1
 800adfe:	e7bd      	b.n	800ad7c <__ieee754_sqrt+0xd0>
 800ae00:	7ff00000 	.word	0x7ff00000

0800ae04 <fabs>:
 800ae04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae08:	4770      	bx	lr

0800ae0a <finite>:
 800ae0a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ae0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae12:	0fc0      	lsrs	r0, r0, #31
 800ae14:	4770      	bx	lr
	...

0800ae18 <nan>:
 800ae18:	2000      	movs	r0, #0
 800ae1a:	4901      	ldr	r1, [pc, #4]	; (800ae20 <nan+0x8>)
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	7ff80000 	.word	0x7ff80000

0800ae24 <rint>:
 800ae24:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800ae28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae2a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800ae2e:	2f13      	cmp	r7, #19
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	460c      	mov	r4, r1
 800ae36:	4605      	mov	r5, r0
 800ae38:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800ae3c:	dc59      	bgt.n	800aef2 <rint+0xce>
 800ae3e:	2f00      	cmp	r7, #0
 800ae40:	da2a      	bge.n	800ae98 <rint+0x74>
 800ae42:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae46:	4301      	orrs	r1, r0
 800ae48:	d022      	beq.n	800ae90 <rint+0x6c>
 800ae4a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ae4e:	4301      	orrs	r1, r0
 800ae50:	424d      	negs	r5, r1
 800ae52:	430d      	orrs	r5, r1
 800ae54:	4936      	ldr	r1, [pc, #216]	; (800af30 <rint+0x10c>)
 800ae56:	0c5c      	lsrs	r4, r3, #17
 800ae58:	0b2d      	lsrs	r5, r5, #12
 800ae5a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800ae5e:	0464      	lsls	r4, r4, #17
 800ae60:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae64:	ea45 0304 	orr.w	r3, r5, r4
 800ae68:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	4629      	mov	r1, r5
 800ae70:	f7f5 fa30 	bl	80002d4 <__adddf3>
 800ae74:	e9cd 0100 	strd	r0, r1, [sp]
 800ae78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae7c:	462b      	mov	r3, r5
 800ae7e:	4622      	mov	r2, r4
 800ae80:	f7f5 fa26 	bl	80002d0 <__aeabi_dsub>
 800ae84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae88:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4610      	mov	r0, r2
 800ae92:	4619      	mov	r1, r3
 800ae94:	b003      	add	sp, #12
 800ae96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae98:	4926      	ldr	r1, [pc, #152]	; (800af34 <rint+0x110>)
 800ae9a:	4139      	asrs	r1, r7
 800ae9c:	ea03 0001 	and.w	r0, r3, r1
 800aea0:	4310      	orrs	r0, r2
 800aea2:	d0f5      	beq.n	800ae90 <rint+0x6c>
 800aea4:	084b      	lsrs	r3, r1, #1
 800aea6:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800aeaa:	ea52 0501 	orrs.w	r5, r2, r1
 800aeae:	d00c      	beq.n	800aeca <rint+0xa6>
 800aeb0:	ea24 0303 	bic.w	r3, r4, r3
 800aeb4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800aeb8:	2f13      	cmp	r7, #19
 800aeba:	bf0c      	ite	eq
 800aebc:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800aec0:	2500      	movne	r5, #0
 800aec2:	fa44 f707 	asr.w	r7, r4, r7
 800aec6:	ea43 0407 	orr.w	r4, r3, r7
 800aeca:	4919      	ldr	r1, [pc, #100]	; (800af30 <rint+0x10c>)
 800aecc:	4623      	mov	r3, r4
 800aece:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800aed2:	462a      	mov	r2, r5
 800aed4:	e9d6 4500 	ldrd	r4, r5, [r6]
 800aed8:	4620      	mov	r0, r4
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7f5 f9fa 	bl	80002d4 <__adddf3>
 800aee0:	e9cd 0100 	strd	r0, r1, [sp]
 800aee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aee8:	4622      	mov	r2, r4
 800aeea:	462b      	mov	r3, r5
 800aeec:	f7f5 f9f0 	bl	80002d0 <__aeabi_dsub>
 800aef0:	e7cc      	b.n	800ae8c <rint+0x68>
 800aef2:	2f33      	cmp	r7, #51	; 0x33
 800aef4:	dd05      	ble.n	800af02 <rint+0xde>
 800aef6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800aefa:	d1c9      	bne.n	800ae90 <rint+0x6c>
 800aefc:	f7f5 f9ea 	bl	80002d4 <__adddf3>
 800af00:	e7c4      	b.n	800ae8c <rint+0x68>
 800af02:	f04f 31ff 	mov.w	r1, #4294967295
 800af06:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800af0a:	fa21 f10c 	lsr.w	r1, r1, ip
 800af0e:	4208      	tst	r0, r1
 800af10:	d0be      	beq.n	800ae90 <rint+0x6c>
 800af12:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800af16:	bf18      	it	ne
 800af18:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800af1c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800af20:	bf1e      	ittt	ne
 800af22:	ea20 0303 	bicne.w	r3, r0, r3
 800af26:	fa45 fc0c 	asrne.w	ip, r5, ip
 800af2a:	ea43 050c 	orrne.w	r5, r3, ip
 800af2e:	e7cc      	b.n	800aeca <rint+0xa6>
 800af30:	0800b188 	.word	0x0800b188
 800af34:	000fffff 	.word	0x000fffff

0800af38 <scalbn>:
 800af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800af3e:	4604      	mov	r4, r0
 800af40:	460d      	mov	r5, r1
 800af42:	4617      	mov	r7, r2
 800af44:	460b      	mov	r3, r1
 800af46:	b996      	cbnz	r6, 800af6e <scalbn+0x36>
 800af48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af4c:	4303      	orrs	r3, r0
 800af4e:	d039      	beq.n	800afc4 <scalbn+0x8c>
 800af50:	4b35      	ldr	r3, [pc, #212]	; (800b028 <scalbn+0xf0>)
 800af52:	2200      	movs	r2, #0
 800af54:	f7f5 fb74 	bl	8000640 <__aeabi_dmul>
 800af58:	4b34      	ldr	r3, [pc, #208]	; (800b02c <scalbn+0xf4>)
 800af5a:	4604      	mov	r4, r0
 800af5c:	429f      	cmp	r7, r3
 800af5e:	460d      	mov	r5, r1
 800af60:	da0f      	bge.n	800af82 <scalbn+0x4a>
 800af62:	a32d      	add	r3, pc, #180	; (adr r3, 800b018 <scalbn+0xe0>)
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	f7f5 fb6a 	bl	8000640 <__aeabi_dmul>
 800af6c:	e006      	b.n	800af7c <scalbn+0x44>
 800af6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800af72:	4296      	cmp	r6, r2
 800af74:	d10a      	bne.n	800af8c <scalbn+0x54>
 800af76:	4602      	mov	r2, r0
 800af78:	f7f5 f9ac 	bl	80002d4 <__adddf3>
 800af7c:	4604      	mov	r4, r0
 800af7e:	460d      	mov	r5, r1
 800af80:	e020      	b.n	800afc4 <scalbn+0x8c>
 800af82:	460b      	mov	r3, r1
 800af84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800af88:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800af8c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800af90:	19b9      	adds	r1, r7, r6
 800af92:	4291      	cmp	r1, r2
 800af94:	dd0e      	ble.n	800afb4 <scalbn+0x7c>
 800af96:	a322      	add	r3, pc, #136	; (adr r3, 800b020 <scalbn+0xe8>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800afa0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800afa4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800afa8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800afac:	4820      	ldr	r0, [pc, #128]	; (800b030 <scalbn+0xf8>)
 800afae:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800afb2:	e7d9      	b.n	800af68 <scalbn+0x30>
 800afb4:	2900      	cmp	r1, #0
 800afb6:	dd08      	ble.n	800afca <scalbn+0x92>
 800afb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800afc4:	4620      	mov	r0, r4
 800afc6:	4629      	mov	r1, r5
 800afc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800afce:	da16      	bge.n	800affe <scalbn+0xc6>
 800afd0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afd4:	429f      	cmp	r7, r3
 800afd6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800afda:	dd08      	ble.n	800afee <scalbn+0xb6>
 800afdc:	4c15      	ldr	r4, [pc, #84]	; (800b034 <scalbn+0xfc>)
 800afde:	4814      	ldr	r0, [pc, #80]	; (800b030 <scalbn+0xf8>)
 800afe0:	f363 74df 	bfi	r4, r3, #31, #1
 800afe4:	a30e      	add	r3, pc, #56	; (adr r3, 800b020 <scalbn+0xe8>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	4621      	mov	r1, r4
 800afec:	e7bc      	b.n	800af68 <scalbn+0x30>
 800afee:	4c12      	ldr	r4, [pc, #72]	; (800b038 <scalbn+0x100>)
 800aff0:	4812      	ldr	r0, [pc, #72]	; (800b03c <scalbn+0x104>)
 800aff2:	f363 74df 	bfi	r4, r3, #31, #1
 800aff6:	a308      	add	r3, pc, #32	; (adr r3, 800b018 <scalbn+0xe0>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	e7f5      	b.n	800afea <scalbn+0xb2>
 800affe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b002:	3136      	adds	r1, #54	; 0x36
 800b004:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b008:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b00c:	4620      	mov	r0, r4
 800b00e:	4629      	mov	r1, r5
 800b010:	2200      	movs	r2, #0
 800b012:	4b0b      	ldr	r3, [pc, #44]	; (800b040 <scalbn+0x108>)
 800b014:	e7a8      	b.n	800af68 <scalbn+0x30>
 800b016:	bf00      	nop
 800b018:	c2f8f359 	.word	0xc2f8f359
 800b01c:	01a56e1f 	.word	0x01a56e1f
 800b020:	8800759c 	.word	0x8800759c
 800b024:	7e37e43c 	.word	0x7e37e43c
 800b028:	43500000 	.word	0x43500000
 800b02c:	ffff3cb0 	.word	0xffff3cb0
 800b030:	8800759c 	.word	0x8800759c
 800b034:	7e37e43c 	.word	0x7e37e43c
 800b038:	01a56e1f 	.word	0x01a56e1f
 800b03c:	c2f8f359 	.word	0xc2f8f359
 800b040:	3c900000 	.word	0x3c900000

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
