
DS3231_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080091c8  080091c8  000191c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009570  08009570  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009570  08009570  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009570  08009570  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009574  08009574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  200001dc  08009754  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08009754  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ed1  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a3a  00000000  00000000  0002a0d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  0002bb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  0002c360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017dc9  00000000  00000000  0002cb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b5f  00000000  00000000  000448c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008343e  00000000  00000000  0004c428  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  000cf8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080091ac 	.word	0x080091ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080091ac 	.word	0x080091ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000da4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00b      	beq.n	8000dc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000dac:	e000      	b.n	8000db0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000dae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000db0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f9      	beq.n	8000dae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*------------------------------Отладка по SWO--------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]

	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffca 	bl	8000d84 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e0c:	f000 fb72 	bl	80014f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e10:	f000 f81c 	bl	8000e4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e14:	f000 f88e 	bl	8000f34 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000e18:	f000 f85e 	bl	8000ed8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f000 fbcb 	bl	80015b8 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (HAL_GetTick() - T >= 1000) {
 8000e22:	f000 fbbf 	bl	80015a4 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <main+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e32:	d3f6      	bcc.n	8000e22 <main+0x1a>
			T = HAL_GetTick();
 8000e34:	f000 fbb6 	bl	80015a4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <main+0x40>)
 8000e3c:	601a      	str	r2, [r3, #0]
			max_ds3231_get_time();
 8000e3e:	f000 f8ab 	bl	8000f98 <max_ds3231_get_time>
			max_ds3231_get_temperature();
 8000e42:	f000 f977 	bl	8001134 <max_ds3231_get_temperature>
		if (HAL_GetTick() - T >= 1000) {
 8000e46:	e7ec      	b.n	8000e22 <main+0x1a>
 8000e48:	20000268 	.word	0x20000268

08000e4c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b090      	sub	sp, #64	; 0x40
 8000e50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e52:	f107 0318 	add.w	r3, r7, #24
 8000e56:	2228      	movs	r2, #40	; 0x28
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 ff5e 	bl	8004d1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e76:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e80:	2302      	movs	r3, #2
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fb0f 	bl	80044b8 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x58>
		Error_Handler();
 8000ea0:	f000 f876 	bl	8000f90 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fd7a 	bl	80049b8 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x82>
		Error_Handler();
 8000eca:	f000 f861 	bl	8000f90 <Error_Handler>
	}
}
 8000ece:	bf00      	nop
 8000ed0:	3740      	adds	r7, #64	; 0x40
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <MX_I2C1_Init+0x54>)
 8000ee0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_I2C1_Init+0x58>)
 8000ee6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f16:	f000 fe5b 	bl	8001bd0 <HAL_I2C_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000f20:	f000 f836 	bl	8000f90 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000214 	.word	0x20000214
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	000186a0 	.word	0x000186a0

08000f34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	6193      	str	r3, [r2, #24]
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <MX_GPIO_Init+0x58>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000

08000f90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f96:	e7fe      	b.n	8000f96 <Error_Handler+0x6>

08000f98 <max_ds3231_get_time>:

/*-------------------------------------Глобальные переменные----------------------------------*/

/*--------------------------------Функция запроса данных о времени----------------------------*/

void max_ds3231_get_time(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
	///Функция запроса данных о времени/
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Считываем регистры с 0x00 по 0x06 включительно.
	uint8_t tx_buffer = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buffer[7] = { 0, };
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	f8c3 2003 	str.w	r2, [r3, #3]

	HAL_I2C_Master_Transmit(&hi2c1, Adress, &tx_buffer, 1, 10);
 8000fac:	1dfa      	adds	r2, r7, #7
 8000fae:	230a      	movs	r3, #10
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	21d0      	movs	r1, #208	; 0xd0
 8000fb6:	4851      	ldr	r0, [pc, #324]	; (80010fc <max_ds3231_get_time+0x164>)
 8000fb8:	f000 ff42 	bl	8001e40 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, Adress, rx_buffer, 7, 10);
 8000fbc:	463a      	mov	r2, r7
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	484d      	ldr	r0, [pc, #308]	; (80010fc <max_ds3231_get_time+0x164>)
 8000fc8:	f001 f838 	bl	800203c <HAL_I2C_Master_Receive>

	Seconds = (rx_buffer[0] >> 4) * 10 + (rx_buffer[0] & 0x0F);
 8000fcc:	783b      	ldrb	r3, [r7, #0]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	783b      	ldrb	r3, [r7, #0]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b45      	ldr	r3, [pc, #276]	; (8001100 <max_ds3231_get_time+0x168>)
 8000fea:	701a      	strb	r2, [r3, #0]
	Minutes = (rx_buffer[1] >> 4) * 10 + (rx_buffer[1] & 0x0F);
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4413      	add	r3, r2
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <max_ds3231_get_time+0x16c>)
 800100a:	701a      	strb	r2, [r3, #0]
	Hours = (rx_buffer[2] >> 4) * 10 + (rx_buffer[2] & 0x0F);
 800100c:	78bb      	ldrb	r3, [r7, #2]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	78bb      	ldrb	r3, [r7, #2]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4413      	add	r3, r2
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <max_ds3231_get_time+0x170>)
 800102a:	701a      	strb	r2, [r3, #0]
	Day = rx_buffer[3];
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	4b37      	ldr	r3, [pc, #220]	; (800110c <max_ds3231_get_time+0x174>)
 8001030:	701a      	strb	r2, [r3, #0]
	Date = (rx_buffer[4] >> 4) * 10 + (rx_buffer[4] & 0x0F);
 8001032:	793b      	ldrb	r3, [r7, #4]
 8001034:	091b      	lsrs	r3, r3, #4
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	793b      	ldrb	r3, [r7, #4]
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <max_ds3231_get_time+0x178>)
 8001050:	701a      	strb	r2, [r3, #0]
	Month = ((rx_buffer[5] >> 4) & 0x07) * 10 + (rx_buffer[5] & 0x0F);
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	797b      	ldrb	r3, [r7, #5]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <max_ds3231_get_time+0x17c>)
 8001076:	701a      	strb	r2, [r3, #0]
	Cuntury = 20 + (rx_buffer[5] >> 7);
 8001078:	797b      	ldrb	r3, [r7, #5]
 800107a:	09db      	lsrs	r3, r3, #7
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3314      	adds	r3, #20
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <max_ds3231_get_time+0x180>)
 8001084:	701a      	strb	r2, [r3, #0]
	Year = 2000 + (rx_buffer[6] >> 4) * 10 + (rx_buffer[6] & 0x0F);
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	b2db      	uxtb	r3, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4413      	add	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	4413      	add	r3, r2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <max_ds3231_get_time+0x184>)
 80010ae:	801a      	strh	r2, [r3, #0]

	/*-----------------------Если включена отладка по SWO-------------------------------------*/
	printf("\r\n");
 80010b0:	481b      	ldr	r0, [pc, #108]	; (8001120 <max_ds3231_get_time+0x188>)
 80010b2:	f004 fcdf 	bl	8005a74 <puts>
	printf("Moscow time:\r\n");
 80010b6:	481b      	ldr	r0, [pc, #108]	; (8001124 <max_ds3231_get_time+0x18c>)
 80010b8:	f004 fcdc 	bl	8005a74 <puts>
	printf("%02d:%02d:%02d\r\n", Hours, Minutes, Seconds);
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <max_ds3231_get_time+0x170>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <max_ds3231_get_time+0x16c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <max_ds3231_get_time+0x168>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <max_ds3231_get_time+0x190>)
 80010ce:	f004 fc5d 	bl	800598c <iprintf>
	printf("%02d:%02d:%d\r\n", Date, Month, Year);
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <max_ds3231_get_time+0x178>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <max_ds3231_get_time+0x17c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <max_ds3231_get_time+0x184>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <max_ds3231_get_time+0x194>)
 80010e4:	f004 fc52 	bl	800598c <iprintf>
	printf("Cuntury = %d\r\n", Cuntury);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <max_ds3231_get_time+0x180>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4810      	ldr	r0, [pc, #64]	; (8001130 <max_ds3231_get_time+0x198>)
 80010f0:	f004 fc4c 	bl	800598c <iprintf>
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000214 	.word	0x20000214
 8001100:	200001f8 	.word	0x200001f8
 8001104:	200001f9 	.word	0x200001f9
 8001108:	200001fa 	.word	0x200001fa
 800110c:	200001fb 	.word	0x200001fb
 8001110:	200001fc 	.word	0x200001fc
 8001114:	200001fd 	.word	0x200001fd
 8001118:	200001fe 	.word	0x200001fe
 800111c:	20000200 	.word	0x20000200
 8001120:	080091c8 	.word	0x080091c8
 8001124:	080091cc 	.word	0x080091cc
 8001128:	080091dc 	.word	0x080091dc
 800112c:	080091f0 	.word	0x080091f0
 8001130:	08009200 	.word	0x08009200

08001134 <max_ds3231_get_temperature>:

/*--------------------------------Функция запроса данных о времени----------------------------*/

/*------------------------------Функция запроса данных о температуре--------------------------*/

void max_ds3231_get_temperature(void) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b087      	sub	sp, #28
 8001138:	af02      	add	r7, sp, #8
	///Функция запроса данных о времени/
	///(См. Datasheet DS3231. Cтр.11, табл. 1).
	///Считываем регистры с 0x11 по 0x12 включительно.
	uint8_t rx_buffer[2] = { 0, };
 800113a:	2300      	movs	r3, #0
 800113c:	813b      	strh	r3, [r7, #8]
	uint8_t tx_buffer = 0x11;
 800113e:	2311      	movs	r3, #17
 8001140:	71fb      	strb	r3, [r7, #7]
	float temp_fractional_part = 0.0f;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, &tx_buffer, 1, 10);
 8001148:	1dfa      	adds	r2, r7, #7
 800114a:	230a      	movs	r3, #10
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	21d0      	movs	r1, #208	; 0xd0
 8001152:	482f      	ldr	r0, [pc, #188]	; (8001210 <max_ds3231_get_temperature+0xdc>)
 8001154:	f000 fe74 	bl	8001e40 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, Adress, rx_buffer, 2, 10);
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	230a      	movs	r3, #10
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2302      	movs	r3, #2
 8001162:	21d0      	movs	r1, #208	; 0xd0
 8001164:	482a      	ldr	r0, [pc, #168]	; (8001210 <max_ds3231_get_temperature+0xdc>)
 8001166:	f000 ff69 	bl	800203c <HAL_I2C_Master_Receive>

	max_ds3231_temp = 0.0f;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <max_ds3231_get_temperature+0xe0>)
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
	temp_fractional_part = 0.0f;
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]

	if (rx_buffer[1] == 0x00) {
 8001178:	7a7b      	ldrb	r3, [r7, #9]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d103      	bne.n	8001186 <max_ds3231_get_temperature+0x52>
		temp_fractional_part = 0.0f;
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e013      	b.n	80011ae <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0x40) {
 8001186:	7a7b      	ldrb	r3, [r7, #9]
 8001188:	2b40      	cmp	r3, #64	; 0x40
 800118a:	d103      	bne.n	8001194 <max_ds3231_get_temperature+0x60>
		temp_fractional_part = 0.25f;
 800118c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e00c      	b.n	80011ae <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0x80) {
 8001194:	7a7b      	ldrb	r3, [r7, #9]
 8001196:	2b80      	cmp	r3, #128	; 0x80
 8001198:	d103      	bne.n	80011a2 <max_ds3231_get_temperature+0x6e>
		temp_fractional_part = 0.5f;
 800119a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	e005      	b.n	80011ae <max_ds3231_get_temperature+0x7a>
	} else if (rx_buffer[1] == 0xC0) {
 80011a2:	7a7b      	ldrb	r3, [r7, #9]
 80011a4:	2bc0      	cmp	r3, #192	; 0xc0
 80011a6:	d102      	bne.n	80011ae <max_ds3231_get_temperature+0x7a>
		temp_fractional_part = 0.75f;
 80011a8:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80011ac:	60fb      	str	r3, [r7, #12]
	}

	if (rx_buffer[0] < 0x80) {
 80011ae:	7a3b      	ldrb	r3, [r7, #8]
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0d      	blt.n	80011d2 <max_ds3231_get_temperature+0x9e>
		max_ds3231_temp = rx_buffer[0] + temp_fractional_part;
 80011b6:	7a3b      	ldrb	r3, [r7, #8]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fd8f 	bl	8000cdc <__aeabi_i2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	68f9      	ldr	r1, [r7, #12]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fcd6 	bl	8000b74 <__addsf3>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <max_ds3231_get_temperature+0xe0>)
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e00d      	b.n	80011ee <max_ds3231_get_temperature+0xba>
	} else {
		max_ds3231_temp = (rx_buffer[0] + temp_fractional_part) * (-1);
 80011d2:	7a3b      	ldrb	r3, [r7, #8]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd81 	bl	8000cdc <__aeabi_i2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	68f9      	ldr	r1, [r7, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fcc8 	bl	8000b74 <__addsf3>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <max_ds3231_get_temperature+0xe0>)
 80011ec:	6013      	str	r3, [r2, #0]
	}
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
	printf("Temperature: %.2f\r\n", max_ds3231_temp);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <max_ds3231_get_temperature+0xe0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f918 	bl	8000428 <__aeabi_f2d>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	461a      	mov	r2, r3
 80011fe:	4623      	mov	r3, r4
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <max_ds3231_get_temperature+0xe4>)
 8001202:	f004 fbc3 	bl	800598c <iprintf>
	/*-----------------------Если включена отладка по SWO-------------------------------------*/
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	bf00      	nop
 8001210:	20000214 	.word	0x20000214
 8001214:	20000204 	.word	0x20000204
 8001218:	08009210 	.word	0x08009210

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_MspInit+0x5c>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_MspInit+0x5c>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_MspInit+0x5c>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_MspInit+0x5c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_MspInit+0x60>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_MspInit+0x60>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_I2C_MspInit+0x90>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d133      	bne.n	8001308 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_I2C_MspInit+0x94>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_I2C_MspInit+0x94>)
 80012a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012aa:	61d3      	str	r3, [r2, #28]
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_I2C_MspInit+0x94>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_I2C_MspInit+0x94>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a15      	ldr	r2, [pc, #84]	; (8001314 <HAL_I2C_MspInit+0x94>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_I2C_MspInit+0x94>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d0:	23c0      	movs	r3, #192	; 0xc0
 80012d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <HAL_I2C_MspInit+0x98>)
 80012e4:	f000 fb1a 	bl	800191c <HAL_GPIO_Init>

    /* Peripheral clock enable */

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	201f      	movs	r0, #31
 80012ee:	f000 fa5c 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012f2:	201f      	movs	r0, #31
 80012f4:	f000 fa75 	bl	80017e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2020      	movs	r0, #32
 80012fe:	f000 fa54 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001302:	2020      	movs	r0, #32
 8001304:	f000 fa6d 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40005400 	.word	0x40005400
 8001314:	40021000 	.word	0x40021000
 8001318:	40010c00 	.word	0x40010c00

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001362:	f000 f90d 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <I2C1_EV_IRQHandler+0x10>)
 8001372:	f001 f8bd 	bl	80024f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000214 	.word	0x20000214

08001380 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <I2C1_ER_IRQHandler+0x10>)
 8001386:	f001 fa20 	bl	80027ca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000214 	.word	0x20000214

08001394 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
	}

return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f4:	605a      	str	r2, [r3, #4]
	return 0;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <_isatty>:

int _isatty(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
	return 0;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f003 fc32 	bl	8004cc8 <__errno>
 8001464:	4602      	mov	r2, r0
 8001466:	230c      	movs	r3, #12
 8001468:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20005000 	.word	0x20005000
 8001490:	00000400 	.word	0x00000400
 8001494:	20000208 	.word	0x20000208
 8001498:	20000278 	.word	0x20000278

0800149c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014aa:	e003      	b.n	80014b4 <LoopCopyDataInit>

080014ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014b2:	3104      	adds	r1, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014bc:	d3f6      	bcc.n	80014ac <CopyDataInit>
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014c0:	e002      	b.n	80014c8 <LoopFillZerobss>

080014c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014c4:	f842 3b04 	str.w	r3, [r2], #4

080014c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014cc:	d3f9      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ce:	f7ff ffe5 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d2:	f003 fbff 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d6:	f7ff fc97 	bl	8000e08 <main>
  bx lr
 80014da:	4770      	bx	lr
  ldr r3, =_sidata
 80014dc:	08009578 	.word	0x08009578
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014e4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80014e8:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80014ec:	20000274 	.word	0x20000274

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_Init+0x28>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_Init+0x28>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f000 f945 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150a:	2000      	movs	r0, #0
 800150c:	f000 f808 	bl	8001520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001510:	f7ff fe84 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40022000 	.word	0x40022000

08001520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_InitTick+0x54>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	fbb3 f3f1 	udiv	r3, r3, r1
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f95d 	bl	80017fe <HAL_SYSTICK_Config>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e00e      	b.n	800156c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d80a      	bhi.n	800156a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f000 f925 	bl	80017aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <HAL_InitTick+0x5c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000000 	.word	0x20000000
 8001578:	20000008 	.word	0x20000008
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x1c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x20>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a03      	ldr	r2, [pc, #12]	; (80015a0 <HAL_IncTick+0x20>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000008 	.word	0x20000008
 80015a0:	2000026c 	.word	0x2000026c

080015a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <HAL_GetTick+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	2000026c 	.word	0x2000026c

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff fff0 	bl	80015a4 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_Delay+0x40>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffe0 	bl	80015a4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000008 	.word	0x20000008

080015fc <__NVIC_SetPriorityGrouping>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4906      	ldr	r1, [pc, #24]	; (8001694 <__NVIC_EnableIRQ+0x34>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <SysTick_Config>:
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff90 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff2d 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff42 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff90 	bl	80016ec <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5f 	bl	8001698 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff35 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa2 	bl	8001750 <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800182a:	2b02      	cmp	r3, #2
 800182c:	d005      	beq.n	800183a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2204      	movs	r2, #4
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e051      	b.n	80018de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 020e 	bic.w	r2, r2, #14
 8001848:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <HAL_DMA_Abort_IT+0xd0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d029      	beq.n	80018b8 <HAL_DMA_Abort_IT+0xa0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <HAL_DMA_Abort_IT+0xd4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d022      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x9c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_DMA_Abort_IT+0xd8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d01a      	beq.n	80018ae <HAL_DMA_Abort_IT+0x96>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <HAL_DMA_Abort_IT+0xdc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d012      	beq.n	80018a8 <HAL_DMA_Abort_IT+0x90>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <HAL_DMA_Abort_IT+0xe0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00a      	beq.n	80018a2 <HAL_DMA_Abort_IT+0x8a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <HAL_DMA_Abort_IT+0xe4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d102      	bne.n	800189c <HAL_DMA_Abort_IT+0x84>
 8001896:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800189a:	e00e      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 800189c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018a0:	e00b      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a6:	e008      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	e005      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b2:	e002      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018b4:	2310      	movs	r3, #16
 80018b6:	e000      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018b8:	2301      	movs	r3, #1
 80018ba:	4a11      	ldr	r2, [pc, #68]	; (8001900 <HAL_DMA_Abort_IT+0xe8>)
 80018bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
    } 
  }
  return status;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40020008 	.word	0x40020008
 80018ec:	4002001c 	.word	0x4002001c
 80018f0:	40020030 	.word	0x40020030
 80018f4:	40020044 	.word	0x40020044
 80018f8:	40020058 	.word	0x40020058
 80018fc:	4002006c 	.word	0x4002006c
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b08b      	sub	sp, #44	; 0x2c
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192e:	e127      	b.n	8001b80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001930:	2201      	movs	r2, #1
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	429a      	cmp	r2, r3
 800194a:	f040 8116 	bne.w	8001b7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b12      	cmp	r3, #18
 8001954:	d034      	beq.n	80019c0 <HAL_GPIO_Init+0xa4>
 8001956:	2b12      	cmp	r3, #18
 8001958:	d80d      	bhi.n	8001976 <HAL_GPIO_Init+0x5a>
 800195a:	2b02      	cmp	r3, #2
 800195c:	d02b      	beq.n	80019b6 <HAL_GPIO_Init+0x9a>
 800195e:	2b02      	cmp	r3, #2
 8001960:	d804      	bhi.n	800196c <HAL_GPIO_Init+0x50>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d031      	beq.n	80019ca <HAL_GPIO_Init+0xae>
 8001966:	2b01      	cmp	r3, #1
 8001968:	d01c      	beq.n	80019a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196a:	e048      	b.n	80019fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800196c:	2b03      	cmp	r3, #3
 800196e:	d043      	beq.n	80019f8 <HAL_GPIO_Init+0xdc>
 8001970:	2b11      	cmp	r3, #17
 8001972:	d01b      	beq.n	80019ac <HAL_GPIO_Init+0x90>
          break;
 8001974:	e043      	b.n	80019fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001976:	4a89      	ldr	r2, [pc, #548]	; (8001b9c <HAL_GPIO_Init+0x280>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d026      	beq.n	80019ca <HAL_GPIO_Init+0xae>
 800197c:	4a87      	ldr	r2, [pc, #540]	; (8001b9c <HAL_GPIO_Init+0x280>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d806      	bhi.n	8001990 <HAL_GPIO_Init+0x74>
 8001982:	4a87      	ldr	r2, [pc, #540]	; (8001ba0 <HAL_GPIO_Init+0x284>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d020      	beq.n	80019ca <HAL_GPIO_Init+0xae>
 8001988:	4a86      	ldr	r2, [pc, #536]	; (8001ba4 <HAL_GPIO_Init+0x288>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <HAL_GPIO_Init+0xae>
          break;
 800198e:	e036      	b.n	80019fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001990:	4a85      	ldr	r2, [pc, #532]	; (8001ba8 <HAL_GPIO_Init+0x28c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0xae>
 8001996:	4a85      	ldr	r2, [pc, #532]	; (8001bac <HAL_GPIO_Init+0x290>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d016      	beq.n	80019ca <HAL_GPIO_Init+0xae>
 800199c:	4a84      	ldr	r2, [pc, #528]	; (8001bb0 <HAL_GPIO_Init+0x294>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0xae>
          break;
 80019a2:	e02c      	b.n	80019fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e028      	b.n	80019fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	3304      	adds	r3, #4
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e023      	b.n	80019fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	3308      	adds	r3, #8
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e01e      	b.n	80019fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	330c      	adds	r3, #12
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e019      	b.n	80019fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019d2:	2304      	movs	r3, #4
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e012      	b.n	80019fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	611a      	str	r2, [r3, #16]
          break;
 80019ea:	e008      	b.n	80019fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ec:	2308      	movs	r3, #8
 80019ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	615a      	str	r2, [r3, #20]
          break;
 80019f6:	e002      	b.n	80019fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2bff      	cmp	r3, #255	; 0xff
 8001a02:	d801      	bhi.n	8001a08 <HAL_GPIO_Init+0xec>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	e001      	b.n	8001a0c <HAL_GPIO_Init+0xf0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2bff      	cmp	r3, #255	; 0xff
 8001a12:	d802      	bhi.n	8001a1a <HAL_GPIO_Init+0xfe>
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_Init+0x104>
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	3b08      	subs	r3, #8
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	210f      	movs	r1, #15
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	401a      	ands	r2, r3
 8001a32:	6a39      	ldr	r1, [r7, #32]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8096 	beq.w	8001b7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4e:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_GPIO_Init+0x298>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_GPIO_Init+0x298>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6193      	str	r3, [r2, #24]
 8001a5a:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <HAL_GPIO_Init+0x298>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a66:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <HAL_GPIO_Init+0x29c>)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4b      	ldr	r2, [pc, #300]	; (8001bbc <HAL_GPIO_Init+0x2a0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x19e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_GPIO_Init+0x2a4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x19a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a49      	ldr	r2, [pc, #292]	; (8001bc4 <HAL_GPIO_Init+0x2a8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x196>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <HAL_GPIO_Init+0x2ac>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x192>
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x1a0>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x1a0>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x1a0>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x1a0>
 8001aba:	2300      	movs	r3, #0
 8001abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001acc:	493a      	ldr	r1, [pc, #232]	; (8001bb8 <HAL_GPIO_Init+0x29c>)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4938      	ldr	r1, [pc, #224]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
 8001af2:	e006      	b.n	8001b02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	4933      	ldr	r1, [pc, #204]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	492e      	ldr	r1, [pc, #184]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	4929      	ldr	r1, [pc, #164]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	4924      	ldr	r1, [pc, #144]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	491f      	ldr	r1, [pc, #124]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	491a      	ldr	r1, [pc, #104]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60cb      	str	r3, [r1, #12]
 8001b6a:	e006      	b.n	8001b7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4915      	ldr	r1, [pc, #84]	; (8001bcc <HAL_GPIO_Init+0x2b0>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f47f aed0 	bne.w	8001930 <HAL_GPIO_Init+0x14>
  }
}
 8001b90:	bf00      	nop
 8001b92:	372c      	adds	r7, #44	; 0x2c
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10110000 	.word	0x10110000
 8001ba4:	10120000 	.word	0x10120000
 8001ba8:	10310000 	.word	0x10310000
 8001bac:	10320000 	.word	0x10320000
 8001bb0:	10220000 	.word	0x10220000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	40010c00 	.word	0x40010c00
 8001bc4:	40011000 	.word	0x40011000
 8001bc8:	40011400 	.word	0x40011400
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e11f      	b.n	8001e22 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fb42 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c34:	f003 f816 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4a7b      	ldr	r2, [pc, #492]	; (8001e2c <HAL_I2C_Init+0x25c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d807      	bhi.n	8001c54 <HAL_I2C_Init+0x84>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a7a      	ldr	r2, [pc, #488]	; (8001e30 <HAL_I2C_Init+0x260>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf94      	ite	ls
 8001c4c:	2301      	movls	r3, #1
 8001c4e:	2300      	movhi	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e006      	b.n	8001c62 <HAL_I2C_Init+0x92>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a77      	ldr	r2, [pc, #476]	; (8001e34 <HAL_I2C_Init+0x264>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bf94      	ite	ls
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	2300      	movhi	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0db      	b.n	8001e22 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a72      	ldr	r2, [pc, #456]	; (8001e38 <HAL_I2C_Init+0x268>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a64      	ldr	r2, [pc, #400]	; (8001e2c <HAL_I2C_Init+0x25c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_I2C_Init+0xd4>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	e009      	b.n	8001cb8 <HAL_I2C_Init+0xe8>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	4a63      	ldr	r2, [pc, #396]	; (8001e3c <HAL_I2C_Init+0x26c>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4956      	ldr	r1, [pc, #344]	; (8001e2c <HAL_I2C_Init+0x25c>)
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	d80d      	bhi.n	8001cf4 <HAL_I2C_Init+0x124>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e59      	subs	r1, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	bf38      	it	cc
 8001cf0:	2304      	movcc	r3, #4
 8001cf2:	e04f      	b.n	8001d94 <HAL_I2C_Init+0x1c4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <HAL_I2C_Init+0x150>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1e58      	subs	r0, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e012      	b.n	8001d46 <HAL_I2C_Init+0x176>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Init+0x17e>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e022      	b.n	8001d94 <HAL_I2C_Init+0x1c4>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10e      	bne.n	8001d74 <HAL_I2C_Init+0x1a4>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1e58      	subs	r0, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	440b      	add	r3, r1
 8001d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d72:	e00f      	b.n	8001d94 <HAL_I2C_Init+0x1c4>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1e58      	subs	r0, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	0099      	lsls	r1, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	6809      	ldr	r1, [r1, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6911      	ldr	r1, [r2, #16]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68d2      	ldr	r2, [r2, #12]
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	000186a0 	.word	0x000186a0
 8001e30:	001e847f 	.word	0x001e847f
 8001e34:	003d08ff 	.word	0x003d08ff
 8001e38:	431bde83 	.word	0x431bde83
 8001e3c:	10624dd3 	.word	0x10624dd3

08001e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	817b      	strh	r3, [r7, #10]
 8001e50:	4613      	mov	r3, r2
 8001e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fba6 	bl	80015a4 <HAL_GetTick>
 8001e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	f040 80e0 	bne.w	8002028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2319      	movs	r3, #25
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4970      	ldr	r1, [pc, #448]	; (8002034 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f002 f8f8 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e0d3      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2C_Master_Transmit+0x50>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e0cc      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d007      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2221      	movs	r2, #33	; 0x21
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	893a      	ldrh	r2, [r7, #8]
 8001ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ef8:	8979      	ldrh	r1, [r7, #10]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f001 feba 	bl	8003c78 <I2C_MasterRequestWrite>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e08d      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f24:	e066      	b.n	8001ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	6a39      	ldr	r1, [r7, #32]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f002 f972 	bl	8004214 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06b      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_I2C_Master_Transmit+0x188>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d017      	beq.n	8001fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	6a39      	ldr	r1, [r7, #32]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f002 f962 	bl	8004296 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e01a      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d194      	bne.n	8001f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	00100002 	.word	0x00100002
 8002038:	ffff0000 	.word	0xffff0000

0800203c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	461a      	mov	r2, r3
 8002048:	460b      	mov	r3, r1
 800204a:	817b      	strh	r3, [r7, #10]
 800204c:	4613      	mov	r3, r2
 800204e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff faa6 	bl	80015a4 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 8238 	bne.w	80024d8 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2319      	movs	r3, #25
 800206e:	2201      	movs	r2, #1
 8002070:	497e      	ldr	r1, [pc, #504]	; (800226c <HAL_I2C_Master_Receive+0x230>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f001 fff8 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	e22b      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Receive+0x54>
 800208c:	2302      	movs	r3, #2
 800208e:	e224      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d007      	beq.n	80020b6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2222      	movs	r2, #34	; 0x22
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2210      	movs	r2, #16
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <HAL_I2C_Master_Receive+0x234>)
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f001 fe3c 	bl	8003d7c <I2C_MasterRequestRead>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1e5      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	2b00      	cmp	r3, #0
 8002114:	d113      	bne.n	800213e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e1b9      	b.n	80024b2 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	2b01      	cmp	r3, #1
 8002144:	d11d      	bne.n	8002182 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800217e:	b662      	cpsie	i
 8002180:	e197      	b.n	80024b2 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	2b02      	cmp	r3, #2
 8002188:	d11d      	bne.n	80021c6 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800219a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c2:	b662      	cpsie	i
 80021c4:	e175      	b.n	80024b2 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021ec:	e161      	b.n	80024b2 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	f200 811a 	bhi.w	800242c <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d123      	bne.n	8002248 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f002 f8b9 	bl	800437c <I2C_WaitOnRXNEFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e162      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002246:	e134      	b.n	80024b2 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	2b02      	cmp	r3, #2
 800224e:	d150      	bne.n	80022f2 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	2200      	movs	r2, #0
 8002258:	4906      	ldr	r1, [pc, #24]	; (8002274 <HAL_I2C_Master_Receive+0x238>)
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f001 ff04 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e137      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
 800226a:	bf00      	nop
 800226c:	00100002 	.word	0x00100002
 8002270:	ffff0000 	.word	0xffff0000
 8002274:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002288:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022bc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f0:	e0df      	b.n	80024b2 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	2200      	movs	r2, #0
 80022fa:	497a      	ldr	r1, [pc, #488]	; (80024e4 <HAL_I2C_Master_Receive+0x4a8>)
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f001 feb3 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0e6      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800231c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002350:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_I2C_Master_Receive+0x4ac>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	08db      	lsrs	r3, r3, #3
 8002356:	4a65      	ldr	r2, [pc, #404]	; (80024ec <HAL_I2C_Master_Receive+0x4b0>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	0a1a      	lsrs	r2, r3, #8
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00da      	lsls	r2, r3, #3
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	3b01      	subs	r3, #1
 800236e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d117      	bne.n	80023a6 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002398:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e099      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d1da      	bne.n	800236a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800242a:	e042      	b.n	80024b2 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f001 ffa3 	bl	800437c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e04c      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d118      	bne.n	80024b2 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f47f ae99 	bne.w	80021ee <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	00010004 	.word	0x00010004
 80024e8:	20000000 	.word	0x20000000
 80024ec:	14f8b589 	.word	0x14f8b589

080024f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002510:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b10      	cmp	r3, #16
 800251e:	d003      	beq.n	8002528 <HAL_I2C_EV_IRQHandler+0x38>
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	f040 80bd 	bne.w	80026a2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10d      	bne.n	800255e <HAL_I2C_EV_IRQHandler+0x6e>
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002548:	d003      	beq.n	8002552 <HAL_I2C_EV_IRQHandler+0x62>
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002550:	d101      	bne.n	8002556 <HAL_I2C_EV_IRQHandler+0x66>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_I2C_EV_IRQHandler+0x68>
 8002556:	2300      	movs	r3, #0
 8002558:	2b01      	cmp	r3, #1
 800255a:	f000 812e 	beq.w	80027ba <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00c      	beq.n	8002582 <HAL_I2C_EV_IRQHandler+0x92>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	0a5b      	lsrs	r3, r3, #9
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f001 ff85 	bl	8004484 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fd60 	bl	8003040 <I2C_Master_SB>
 8002580:	e08e      	b.n	80026a0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08db      	lsrs	r3, r3, #3
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	0a5b      	lsrs	r3, r3, #9
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fdd5 	bl	800314a <I2C_Master_ADD10>
 80025a0:	e07e      	b.n	80026a0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	0a5b      	lsrs	r3, r3, #9
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fdee 	bl	800319c <I2C_Master_ADDR>
 80025c0:	e06e      	b.n	80026a0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d037      	beq.n	800263e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025dc:	f000 80ef 	beq.w	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	09db      	lsrs	r3, r3, #7
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00f      	beq.n	800260c <HAL_I2C_EV_IRQHandler+0x11c>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	0a9b      	lsrs	r3, r3, #10
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_I2C_EV_IRQHandler+0x11c>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f9ed 	bl	80029e4 <I2C_MasterTransmit_TXE>
 800260a:	e049      	b.n	80026a0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80d2 	beq.w	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	0a5b      	lsrs	r3, r3, #9
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80cb 	beq.w	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b10      	cmp	r3, #16
 800262c:	d103      	bne.n	8002636 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa74 	bl	8002b1c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002634:	e0c3      	b.n	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fad8 	bl	8002bec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800263c:	e0bf      	b.n	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800264c:	f000 80b7 	beq.w	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00f      	beq.n	800267c <HAL_I2C_EV_IRQHandler+0x18c>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	0a9b      	lsrs	r3, r3, #10
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_I2C_EV_IRQHandler+0x18c>
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb48 	bl	8002d0a <I2C_MasterReceive_RXNE>
 800267a:	e011      	b.n	80026a0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 809a 	beq.w	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	0a5b      	lsrs	r3, r3, #9
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8093 	beq.w	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fbe7 	bl	8002e6c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800269e:	e08e      	b.n	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
 80026a0:	e08d      	b.n	80027be <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e007      	b.n	80026c4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d012      	beq.n	80026f6 <HAL_I2C_EV_IRQHandler+0x206>
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80026ec:	69b9      	ldr	r1, [r7, #24]
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 ffab 	bl	800364a <I2C_Slave_ADDR>
 80026f4:	e066      	b.n	80027c4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_I2C_EV_IRQHandler+0x226>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	0a5b      	lsrs	r3, r3, #9
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 ffe0 	bl	80036d4 <I2C_Slave_STOPF>
 8002714:	e056      	b.n	80027c4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002716:	7bbb      	ldrb	r3, [r7, #14]
 8002718:	2b21      	cmp	r3, #33	; 0x21
 800271a:	d002      	beq.n	8002722 <HAL_I2C_EV_IRQHandler+0x232>
 800271c:	7bbb      	ldrb	r3, [r7, #14]
 800271e:	2b29      	cmp	r3, #41	; 0x29
 8002720:	d125      	bne.n	800276e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	09db      	lsrs	r3, r3, #7
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00f      	beq.n	800274e <HAL_I2C_EV_IRQHandler+0x25e>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	0a9b      	lsrs	r3, r3, #10
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_I2C_EV_IRQHandler+0x25e>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fec3 	bl	80034d2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800274c:	e039      	b.n	80027c2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d033      	beq.n	80027c2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0a5b      	lsrs	r3, r3, #9
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d02d      	beq.n	80027c2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fef0 	bl	800354c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800276c:	e029      	b.n	80027c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00f      	beq.n	800279a <HAL_I2C_EV_IRQHandler+0x2aa>
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	0a9b      	lsrs	r3, r3, #10
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_I2C_EV_IRQHandler+0x2aa>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d103      	bne.n	800279a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fefa 	bl	800358c <I2C_SlaveReceive_RXNE>
 8002798:	e014      	b.n	80027c4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00e      	beq.n	80027c4 <HAL_I2C_EV_IRQHandler+0x2d4>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	0a5b      	lsrs	r3, r3, #9
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 ff28 	bl	8003608 <I2C_SlaveReceive_BTF>
 80027b8:	e004      	b.n	80027c4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80027ba:	bf00      	nop
 80027bc:	e002      	b.n	80027c4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b08a      	sub	sp, #40	; 0x28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_I2C_ER_IRQHandler+0x5e>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d010      	beq.n	8002828 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002816:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	0a5b      	lsrs	r3, r3, #9
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00e      	beq.n	8002852 <HAL_I2C_ER_IRQHandler+0x88>
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002850:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	0a9b      	lsrs	r3, r3, #10
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d03f      	beq.n	80028de <HAL_I2C_ER_IRQHandler+0x114>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d039      	beq.n	80028de <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800286a:	7efb      	ldrb	r3, [r7, #27]
 800286c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002884:	7ebb      	ldrb	r3, [r7, #26]
 8002886:	2b20      	cmp	r3, #32
 8002888:	d112      	bne.n	80028b0 <HAL_I2C_ER_IRQHandler+0xe6>
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10f      	bne.n	80028b0 <HAL_I2C_ER_IRQHandler+0xe6>
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b21      	cmp	r3, #33	; 0x21
 8002894:	d008      	beq.n	80028a8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	2b29      	cmp	r3, #41	; 0x29
 800289a:	d005      	beq.n	80028a8 <HAL_I2C_ER_IRQHandler+0xde>
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b28      	cmp	r3, #40	; 0x28
 80028a0:	d106      	bne.n	80028b0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b21      	cmp	r3, #33	; 0x21
 80028a6:	d103      	bne.n	80028b0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f001 f843 	bl	8003934 <I2C_Slave_AF>
 80028ae:	e016      	b.n	80028de <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028c2:	7efb      	ldrb	r3, [r7, #27]
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d002      	beq.n	80028ce <HAL_I2C_ER_IRQHandler+0x104>
 80028c8:	7efb      	ldrb	r3, [r7, #27]
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d107      	bne.n	80028de <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	0adb      	lsrs	r3, r3, #11
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00e      	beq.n	8002908 <HAL_I2C_ER_IRQHandler+0x13e>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002906:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f001 f87a 	bl	8003a14 <I2C_ITError>
  }
}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	70fb      	strb	r3, [r7, #3]
 800297c:	4613      	mov	r3, r2
 800297e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d150      	bne.n	8002aac <I2C_MasterTransmit_TXE+0xc8>
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b21      	cmp	r3, #33	; 0x21
 8002a0e:	d14d      	bne.n	8002aac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d01d      	beq.n	8002a52 <I2C_MasterTransmit_TXE+0x6e>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d01a      	beq.n	8002a52 <I2C_MasterTransmit_TXE+0x6e>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a22:	d016      	beq.n	8002a52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2211      	movs	r2, #17
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ff6c 	bl	8002928 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a50:	e060      	b.n	8002b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d107      	bne.n	8002a9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff81 	bl	800299c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a9a:	e03b      	b.n	8002b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff3f 	bl	8002928 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002aaa:	e033      	b.n	8002b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b21      	cmp	r3, #33	; 0x21
 8002ab0:	d005      	beq.n	8002abe <I2C_MasterTransmit_TXE+0xda>
 8002ab2:	7bbb      	ldrb	r3, [r7, #14]
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d12d      	bne.n	8002b14 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b22      	cmp	r3, #34	; 0x22
 8002abc:	d12a      	bne.n	8002b14 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d108      	bne.n	8002ada <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ad8:	e01c      	b.n	8002b14 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d103      	bne.n	8002aee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f880 	bl	8002bec <I2C_MemoryTransmit_TXE_BTF>
}
 8002aec:	e012      	b.n	8002b14 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b12:	e7ff      	b.n	8002b14 <I2C_MasterTransmit_TXE+0x130>
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b21      	cmp	r3, #33	; 0x21
 8002b34:	d156      	bne.n	8002be4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d012      	beq.n	8002b66 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b64:	e03e      	b.n	8002be4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d01d      	beq.n	8002ba8 <I2C_MasterTransmit_BTF+0x8c>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d01a      	beq.n	8002ba8 <I2C_MasterTransmit_BTF+0x8c>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b78:	d016      	beq.n	8002ba8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b88:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2211      	movs	r2, #17
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fec1 	bl	8002928 <HAL_I2C_MasterTxCpltCallback>
}
 8002ba6:	e01d      	b.n	8002be4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bb6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fea2 	bl	8002928 <HAL_I2C_MasterTxCpltCallback>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11d      	bne.n	8002c40 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10b      	bne.n	8002c24 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	1c9a      	adds	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c22:	e06e      	b.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	121b      	asrs	r3, r3, #8
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c3e:	e060      	b.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10b      	bne.n	8002c60 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c5e:	e050      	b.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d14c      	bne.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b22      	cmp	r3, #34	; 0x22
 8002c6c:	d108      	bne.n	8002c80 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7c:	601a      	str	r2, [r3, #0]
}
 8002c7e:	e040      	b.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b21      	cmp	r3, #33	; 0x21
 8002c8e:	d112      	bne.n	8002cb6 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cb4:	e025      	b.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d120      	bne.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b21      	cmp	r3, #33	; 0x21
 8002cc4:	d11d      	bne.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cd4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff fe4d 	bl	800299c <HAL_I2C_MemTxCpltCallback>
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b22      	cmp	r3, #34	; 0x22
 8002d1c:	f040 80a2 	bne.w	8002e64 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d921      	bls.n	8002d72 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	f040 8082 	bne.w	8002e64 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002d70:	e078      	b.n	8002e64 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d074      	beq.n	8002e64 <I2C_MasterReceive_RXNE+0x15a>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d002      	beq.n	8002d86 <I2C_MasterReceive_RXNE+0x7c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d16e      	bne.n	8002e64 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f001 fac6 	bl	8004318 <I2C_WaitOnSTOPRequestThroughIT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d142      	bne.n	8002e18 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002db0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d10a      	bne.n	8002e02 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fdd7 	bl	80029ae <HAL_I2C_MemRxCpltCallback>
}
 8002e00:	e030      	b.n	8002e64 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2212      	movs	r2, #18
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fd92 	bl	800293a <HAL_I2C_MasterRxCpltCallback>
}
 8002e16:	e025      	b.n	8002e64 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fdae 	bl	80029c0 <HAL_I2C_ErrorCallback>
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d11b      	bne.n	8002ebc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e92:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002eba:	e0bd      	b.n	8003038 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d129      	bne.n	8002f1a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d00a      	beq.n	8002ef2 <I2C_MasterReceive_BTF+0x86>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d007      	beq.n	8002ef2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f18:	e08e      	b.n	8003038 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d176      	bne.n	8003012 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d002      	beq.n	8002f30 <I2C_MasterReceive_BTF+0xc4>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d108      	bne.n	8002f42 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	e019      	b.n	8002f76 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d002      	beq.n	8002f4e <I2C_MasterReceive_BTF+0xe2>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d108      	bne.n	8002f60 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e00a      	b.n	8002f76 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d007      	beq.n	8002f76 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f74:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fd0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d10a      	bne.n	8002ffc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fcda 	bl	80029ae <HAL_I2C_MemRxCpltCallback>
}
 8002ffa:	e01d      	b.n	8003038 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2212      	movs	r2, #18
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fc95 	bl	800293a <HAL_I2C_MasterRxCpltCallback>
}
 8003010:	e012      	b.n	8003038 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d117      	bne.n	8003084 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800306c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800306e:	e067      	b.n	8003140 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	b2da      	uxtb	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]
}
 8003082:	e05d      	b.n	8003140 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308c:	d133      	bne.n	80030f6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b21      	cmp	r3, #33	; 0x21
 8003098:	d109      	bne.n	80030ae <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030aa:	611a      	str	r2, [r3, #16]
 80030ac:	e008      	b.n	80030c0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <I2C_Master_SB+0x92>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d108      	bne.n	80030e4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d032      	beq.n	8003140 <I2C_Master_SB+0x100>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d02d      	beq.n	8003140 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f2:	605a      	str	r2, [r3, #4]
}
 80030f4:	e024      	b.n	8003140 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	b29b      	uxth	r3, r3
 8003104:	11db      	asrs	r3, r3, #7
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f003 0306 	and.w	r3, r3, #6
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f063 030f 	orn	r3, r3, #15
 8003112:	b2da      	uxtb	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	611a      	str	r2, [r3, #16]
}
 800311a:	e011      	b.n	8003140 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10d      	bne.n	8003140 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	b29b      	uxth	r3, r3
 800312a:	11db      	asrs	r3, r3, #7
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f003 0306 	and.w	r3, r3, #6
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f063 030e 	orn	r3, r3, #14
 8003138:	b2da      	uxtb	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	b2da      	uxtb	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <I2C_Master_ADD10+0x24>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d011      	beq.n	8003192 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <I2C_Master_ADD10+0x38>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003190:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800319c:	b480      	push	{r7}
 800319e:	b091      	sub	sp, #68	; 0x44
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b22      	cmp	r3, #34	; 0x22
 80031c4:	f040 8174 	bne.w	80034b0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10f      	bne.n	80031f0 <I2C_Master_ADDR+0x54>
 80031d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d10b      	bne.n	80031f0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d8:	2300      	movs	r3, #0
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	e16b      	b.n	80034c8 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11d      	bne.n	8003234 <I2C_Master_ADDR+0x98>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003200:	d118      	bne.n	8003234 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	651a      	str	r2, [r3, #80]	; 0x50
 8003232:	e149      	b.n	80034c8 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e120      	b.n	80034a8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 808a 	bne.w	8003386 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003278:	d137      	bne.n	80032ea <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003288:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003298:	d113      	bne.n	80032c2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	e0f2      	b.n	80034a8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e0de      	b.n	80034a8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d02e      	beq.n	800334e <I2C_Master_ADDR+0x1b2>
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d02b      	beq.n	800334e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d102      	bne.n	8003302 <I2C_Master_ADDR+0x166>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d125      	bne.n	800334e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	2b04      	cmp	r3, #4
 8003306:	d00e      	beq.n	8003326 <I2C_Master_ADDR+0x18a>
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	2b02      	cmp	r3, #2
 800330c:	d00b      	beq.n	8003326 <I2C_Master_ADDR+0x18a>
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2b10      	cmp	r3, #16
 8003312:	d008      	beq.n	8003326 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e007      	b.n	8003336 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003334:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	e0ac      	b.n	80034a8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e090      	b.n	80034a8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d158      	bne.n	8003442 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	2b04      	cmp	r3, #4
 8003394:	d021      	beq.n	80033da <I2C_Master_ADDR+0x23e>
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	2b02      	cmp	r3, #2
 800339a:	d01e      	beq.n	80033da <I2C_Master_ADDR+0x23e>
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d01b      	beq.n	80033da <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e012      	b.n	8003400 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033e8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340e:	d14b      	bne.n	80034a8 <I2C_Master_ADDR+0x30c>
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003416:	d00b      	beq.n	8003430 <I2C_Master_ADDR+0x294>
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	2b01      	cmp	r3, #1
 800341c:	d008      	beq.n	8003430 <I2C_Master_ADDR+0x294>
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	2b08      	cmp	r3, #8
 8003422:	d005      	beq.n	8003430 <I2C_Master_ADDR+0x294>
 8003424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003426:	2b10      	cmp	r3, #16
 8003428:	d002      	beq.n	8003430 <I2C_Master_ADDR+0x294>
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2b20      	cmp	r3, #32
 800342e:	d13b      	bne.n	80034a8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	e032      	b.n	80034a8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003450:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003460:	d117      	bne.n	8003492 <I2C_Master_ADDR+0x2f6>
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003468:	d00b      	beq.n	8003482 <I2C_Master_ADDR+0x2e6>
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	2b01      	cmp	r3, #1
 800346e:	d008      	beq.n	8003482 <I2C_Master_ADDR+0x2e6>
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	2b08      	cmp	r3, #8
 8003474:	d005      	beq.n	8003482 <I2C_Master_ADDR+0x2e6>
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	2b10      	cmp	r3, #16
 800347a:	d002      	beq.n	8003482 <I2C_Master_ADDR+0x2e6>
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	2b20      	cmp	r3, #32
 8003480:	d107      	bne.n	8003492 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003490:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80034ae:	e00b      	b.n	80034c8 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
}
 80034c6:	e7ff      	b.n	80034c8 <I2C_Master_ADDR+0x32c>
 80034c8:	bf00      	nop
 80034ca:	3744      	adds	r7, #68	; 0x44
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d02b      	beq.n	8003544 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d114      	bne.n	8003544 <I2C_SlaveTransmit_TXE+0x72>
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b29      	cmp	r3, #41	; 0x29
 800351e:	d111      	bne.n	8003544 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2221      	movs	r2, #33	; 0x21
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2228      	movs	r2, #40	; 0x28
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fa04 	bl	800294c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d011      	beq.n	8003582 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02c      	beq.n	8003600 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d114      	bne.n	8003600 <I2C_SlaveReceive_RXNE+0x74>
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b2a      	cmp	r3, #42	; 0x2a
 80035da:	d111      	bne.n	8003600 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2222      	movs	r2, #34	; 0x22
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2228      	movs	r2, #40	; 0x28
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff f9af 	bl	800295e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003664:	2b28      	cmp	r3, #40	; 0x28
 8003666:	d127      	bne.n	80036b8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	09db      	lsrs	r3, r3, #7
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	81bb      	strh	r3, [r7, #12]
 800369a:	e002      	b.n	80036a2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80036aa:	89ba      	ldrh	r2, [r7, #12]
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	4619      	mov	r1, r3
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff f95d 	bl	8002970 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80036b6:	e008      	b.n	80036ca <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003730:	d172      	bne.n	8003818 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b22      	cmp	r3, #34	; 0x22
 8003736:	d002      	beq.n	800373e <I2C_Slave_STOPF+0x6a>
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b2a      	cmp	r3, #42	; 0x2a
 800373c:	d135      	bne.n	80037aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0204 	orr.w	r2, r3, #4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003770:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe f8c4 	bl	8001904 <HAL_DMA_GetState>
 800377c:	4603      	mov	r3, r0
 800377e:	2b01      	cmp	r3, #1
 8003780:	d049      	beq.n	8003816 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	4a69      	ldr	r2, [pc, #420]	; (800392c <I2C_Slave_STOPF+0x258>)
 8003788:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe f842 	bl	8001818 <HAL_DMA_Abort_IT>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d03d      	beq.n	8003816 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a4:	4610      	mov	r0, r2
 80037a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037a8:	e035      	b.n	8003816 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f043 0204 	orr.w	r2, r3, #4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe f88e 	bl	8001904 <HAL_DMA_GetState>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d014      	beq.n	8003818 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	4a4e      	ldr	r2, [pc, #312]	; (800392c <I2C_Slave_STOPF+0x258>)
 80037f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe f80c 	bl	8001818 <HAL_DMA_Abort_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003810:	4610      	mov	r0, r2
 8003812:	4798      	blx	r3
 8003814:	e000      	b.n	8003818 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003816:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03e      	beq.n	80038a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b04      	cmp	r3, #4
 800382e:	d112      	bne.n	8003856 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d112      	bne.n	800388a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f8b3 	bl	8003a14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80038ae:	e039      	b.n	8003924 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b2a      	cmp	r3, #42	; 0x2a
 80038b4:	d109      	bne.n	80038ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2228      	movs	r2, #40	; 0x28
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff f84a 	bl	800295e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b28      	cmp	r3, #40	; 0x28
 80038d4:	d111      	bne.n	80038fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a15      	ldr	r2, [pc, #84]	; (8003930 <I2C_Slave_STOPF+0x25c>)
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff f849 	bl	800298a <HAL_I2C_ListenCpltCallback>
}
 80038f8:	e014      	b.n	8003924 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	2b22      	cmp	r3, #34	; 0x22
 8003900:	d002      	beq.n	8003908 <I2C_Slave_STOPF+0x234>
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b22      	cmp	r3, #34	; 0x22
 8003906:	d10d      	bne.n	8003924 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff f81d 	bl	800295e <HAL_I2C_SlaveRxCpltCallback>
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	08003f19 	.word	0x08003f19
 8003930:	ffff0000 	.word	0xffff0000

08003934 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d002      	beq.n	8003956 <I2C_Slave_AF+0x22>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b20      	cmp	r3, #32
 8003954:	d129      	bne.n	80039aa <I2C_Slave_AF+0x76>
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b28      	cmp	r3, #40	; 0x28
 800395a:	d126      	bne.n	80039aa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <I2C_Slave_AF+0xdc>)
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003970:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800397a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fe fff1 	bl	800298a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80039a8:	e02e      	b.n	8003a08 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b21      	cmp	r3, #33	; 0x21
 80039ae:	d126      	bne.n	80039fe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <I2C_Slave_AF+0xdc>)
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2221      	movs	r2, #33	; 0x21
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039da:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039e4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe ffa8 	bl	800294c <HAL_I2C_SlaveTxCpltCallback>
}
 80039fc:	e004      	b.n	8003a08 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a06:	615a      	str	r2, [r3, #20]
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	ffff0000 	.word	0xffff0000

08003a14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d002      	beq.n	8003a38 <I2C_ITError+0x24>
 8003a32:	7bbb      	ldrb	r3, [r7, #14]
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d10a      	bne.n	8003a4e <I2C_ITError+0x3a>
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b22      	cmp	r3, #34	; 0x22
 8003a3c:	d107      	bne.n	8003a4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a54:	2b28      	cmp	r3, #40	; 0x28
 8003a56:	d107      	bne.n	8003a68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2228      	movs	r2, #40	; 0x28
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a66:	e015      	b.n	8003a94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a76:	d00a      	beq.n	8003a8e <I2C_ITError+0x7a>
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b60      	cmp	r3, #96	; 0x60
 8003a7c:	d007      	beq.n	8003a8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa2:	d161      	bne.n	8003b68 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d020      	beq.n	8003b02 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	4a6a      	ldr	r2, [pc, #424]	; (8003c70 <I2C_ITError+0x25c>)
 8003ac6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fea3 	bl	8001818 <HAL_DMA_Abort_IT>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8089 	beq.w	8003bec <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003afc:	4610      	mov	r0, r2
 8003afe:	4798      	blx	r3
 8003b00:	e074      	b.n	8003bec <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	4a5a      	ldr	r2, [pc, #360]	; (8003c70 <I2C_ITError+0x25c>)
 8003b08:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fe82 	bl	8001818 <HAL_DMA_Abort_IT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d068      	beq.n	8003bec <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d10b      	bne.n	8003b40 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b62:	4610      	mov	r0, r2
 8003b64:	4798      	blx	r3
 8003b66:	e041      	b.n	8003bec <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b60      	cmp	r3, #96	; 0x60
 8003b72:	d125      	bne.n	8003bc0 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d10b      	bne.n	8003ba8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fe ff0a 	bl	80029d2 <HAL_I2C_AbortCpltCallback>
 8003bbe:	e015      	b.n	8003bec <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d10b      	bne.n	8003be6 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fe feea 	bl	80029c0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10e      	bne.n	8003c1a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c28:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d113      	bne.n	8003c66 <I2C_ITError+0x252>
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b28      	cmp	r3, #40	; 0x28
 8003c42:	d110      	bne.n	8003c66 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <I2C_ITError+0x260>)
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7fe fe92 	bl	800298a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	08003f19 	.word	0x08003f19
 8003c74:	ffff0000 	.word	0xffff0000

08003c78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	460b      	mov	r3, r1
 8003c86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d006      	beq.n	8003ca2 <I2C_MasterRequestWrite+0x2a>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d003      	beq.n	8003ca2 <I2C_MasterRequestWrite+0x2a>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ca0:	d108      	bne.n	8003cb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e00b      	b.n	8003ccc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	2b12      	cmp	r3, #18
 8003cba:	d107      	bne.n	8003ccc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f9c5 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf2:	d103      	bne.n	8003cfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e035      	b.n	8003d6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d08:	d108      	bne.n	8003d1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	e01b      	b.n	8003d54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d1c:	897b      	ldrh	r3, [r7, #10]
 8003d1e:	11db      	asrs	r3, r3, #7
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f003 0306 	and.w	r3, r3, #6
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f063 030f 	orn	r3, r3, #15
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	490e      	ldr	r1, [pc, #56]	; (8003d74 <I2C_MasterRequestWrite+0xfc>)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f9eb 	bl	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e010      	b.n	8003d6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d4a:	897b      	ldrh	r3, [r7, #10]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4907      	ldr	r1, [pc, #28]	; (8003d78 <I2C_MasterRequestWrite+0x100>)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f9db 	bl	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	00010008 	.word	0x00010008
 8003d78:	00010002 	.word	0x00010002

08003d7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d006      	beq.n	8003db6 <I2C_MasterRequestRead+0x3a>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d003      	beq.n	8003db6 <I2C_MasterRequestRead+0x3a>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003db4:	d108      	bne.n	8003dc8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e00b      	b.n	8003de0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	2b11      	cmp	r3, #17
 8003dce:	d107      	bne.n	8003de0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f93b 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e06:	d103      	bne.n	8003e10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e079      	b.n	8003f08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1c:	d108      	bne.n	8003e30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e1e:	897b      	ldrh	r3, [r7, #10]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]
 8003e2e:	e05f      	b.n	8003ef0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e30:	897b      	ldrh	r3, [r7, #10]
 8003e32:	11db      	asrs	r3, r3, #7
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f003 0306 	and.w	r3, r3, #6
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f063 030f 	orn	r3, r3, #15
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4930      	ldr	r1, [pc, #192]	; (8003f10 <I2C_MasterRequestRead+0x194>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f961 	bl	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e054      	b.n	8003f08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4929      	ldr	r1, [pc, #164]	; (8003f14 <I2C_MasterRequestRead+0x198>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f951 	bl	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e044      	b.n	8003f08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f8d9 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eca:	d103      	bne.n	8003ed4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e017      	b.n	8003f08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ed8:	897b      	ldrh	r3, [r7, #10]
 8003eda:	11db      	asrs	r3, r3, #7
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0306 	and.w	r3, r3, #6
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f063 030e 	orn	r3, r3, #14
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4907      	ldr	r1, [pc, #28]	; (8003f14 <I2C_MasterRequestRead+0x198>)
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f90d 	bl	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	00010008 	.word	0x00010008
 8003f14:	00010002 	.word	0x00010002

08003f18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f30:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f32:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <I2C_DMAAbort+0x148>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	08db      	lsrs	r3, r3, #3
 8003f38:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <I2C_DMAAbort+0x14c>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0a1a      	lsrs	r2, r3, #8
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00da      	lsls	r2, r3, #3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003f5e:	e00a      	b.n	8003f76 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f74:	d0ea      	beq.n	8003f4c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	2200      	movs	r2, #0
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	2200      	movs	r2, #0
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb8:	2200      	movs	r2, #0
 8003fba:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	2200      	movs	r2, #0
 8003fca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b60      	cmp	r3, #96	; 0x60
 8003fe6:	d10e      	bne.n	8004006 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7fe fce7 	bl	80029d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004004:	e027      	b.n	8004056 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800400c:	2b28      	cmp	r3, #40	; 0x28
 800400e:	d117      	bne.n	8004040 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800402e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2228      	movs	r2, #40	; 0x28
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800403e:	e007      	b.n	8004050 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004050:	6978      	ldr	r0, [r7, #20]
 8004052:	f7fe fcb5 	bl	80029c0 <HAL_I2C_ErrorCallback>
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000000 	.word	0x20000000
 8004064:	14f8b589 	.word	0x14f8b589

08004068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004078:	e025      	b.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d021      	beq.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004082:	f7fd fa8f 	bl	80015a4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d116      	bne.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f043 0220 	orr.w	r2, r3, #32
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e023      	b.n	800410e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10d      	bne.n	80040ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	43da      	mvns	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4013      	ands	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf0c      	ite	eq
 80040e2:	2301      	moveq	r3, #1
 80040e4:	2300      	movne	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	e00c      	b.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	429a      	cmp	r2, r3
 800410a:	d0b6      	beq.n	800407a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004124:	e051      	b.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004134:	d123      	bne.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004144:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800414e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f043 0204 	orr.w	r2, r3, #4
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e046      	b.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d021      	beq.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7fd fa0d 	bl	80015a4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d116      	bne.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e020      	b.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d10c      	bne.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e00b      	b.n	8004206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d18d      	bne.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004220:	e02d      	b.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f900 	bl	8004428 <I2C_IsAcknowledgeFailed>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e02d      	b.n	800428e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d021      	beq.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fd f9b3 	bl	80015a4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d116      	bne.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f043 0220 	orr.w	r2, r3, #32
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e007      	b.n	800428e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b80      	cmp	r3, #128	; 0x80
 800428a:	d1ca      	bne.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042a2:	e02d      	b.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f8bf 	bl	8004428 <I2C_IsAcknowledgeFailed>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e02d      	b.n	8004310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d021      	beq.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042bc:	f7fd f972 	bl	80015a4 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d116      	bne.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	f043 0220 	orr.w	r2, r3, #32
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e007      	b.n	8004310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d1ca      	bne.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	08db      	lsrs	r3, r3, #3
 800432a:	4a13      	ldr	r2, [pc, #76]	; (8004378 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	0a1a      	lsrs	r2, r3, #8
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b01      	subs	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d107      	bne.n	8004356 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e008      	b.n	8004368 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004364:	d0e9      	beq.n	800433a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000000 	.word	0x20000000
 8004378:	14f8b589 	.word	0x14f8b589

0800437c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004388:	e042      	b.n	8004410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b10      	cmp	r3, #16
 8004396:	d119      	bne.n	80043cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0210 	mvn.w	r2, #16
 80043a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e029      	b.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043cc:	f7fd f8ea 	bl	80015a4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e007      	b.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d1b5      	bne.n	800438a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443e:	d11b      	bne.n	8004478 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004448:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f043 0204 	orr.w	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004494:	d103      	bne.n	800449e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800449c:	e007      	b.n	80044ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044a6:	d102      	bne.n	80044ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2208      	movs	r2, #8
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e26c      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8087 	beq.w	80045e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d8:	4b92      	ldr	r3, [pc, #584]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d00c      	beq.n	80044fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044e4:	4b8f      	ldr	r3, [pc, #572]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d112      	bne.n	8004516 <HAL_RCC_OscConfig+0x5e>
 80044f0:	4b8c      	ldr	r3, [pc, #560]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fc:	d10b      	bne.n	8004516 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fe:	4b89      	ldr	r3, [pc, #548]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d06c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x12c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d168      	bne.n	80045e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e246      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x76>
 8004520:	4b80      	ldr	r3, [pc, #512]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a7f      	ldr	r2, [pc, #508]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e02e      	b.n	800458c <HAL_RCC_OscConfig+0xd4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x98>
 8004536:	4b7b      	ldr	r3, [pc, #492]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7a      	ldr	r2, [pc, #488]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 800453c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b78      	ldr	r3, [pc, #480]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a77      	ldr	r2, [pc, #476]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e01d      	b.n	800458c <HAL_RCC_OscConfig+0xd4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0xbc>
 800455a:	4b72      	ldr	r3, [pc, #456]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a71      	ldr	r2, [pc, #452]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6e      	ldr	r2, [pc, #440]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0xd4>
 8004574:	4b6b      	ldr	r3, [pc, #428]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6a      	ldr	r2, [pc, #424]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 800457a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b68      	ldr	r3, [pc, #416]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a67      	ldr	r2, [pc, #412]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d013      	beq.n	80045bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fd f806 	bl	80015a4 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fd f802 	bl	80015a4 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e1fa      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b5d      	ldr	r3, [pc, #372]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0xe4>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fc fff2 	bl	80015a4 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fc ffee 	bl	80015a4 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e1e6      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x10c>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d063      	beq.n	80046ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045f2:	4b4c      	ldr	r3, [pc, #304]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045fe:	4b49      	ldr	r3, [pc, #292]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b08      	cmp	r3, #8
 8004608:	d11c      	bne.n	8004644 <HAL_RCC_OscConfig+0x18c>
 800460a:	4b46      	ldr	r3, [pc, #280]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d116      	bne.n	8004644 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	4b43      	ldr	r3, [pc, #268]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_RCC_OscConfig+0x176>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d001      	beq.n	800462e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e1ba      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462e:	4b3d      	ldr	r3, [pc, #244]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4939      	ldr	r1, [pc, #228]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004642:	e03a      	b.n	80046ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_RCC_OscConfig+0x270>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004652:	f7fc ffa7 	bl	80015a4 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465a:	f7fc ffa3 	bl	80015a4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e19b      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004678:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4927      	ldr	r1, [pc, #156]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
 800468c:	e015      	b.n	80046ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468e:	4b26      	ldr	r3, [pc, #152]	; (8004728 <HAL_RCC_OscConfig+0x270>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fc ff86 	bl	80015a4 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469c:	f7fc ff82 	bl	80015a4 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e17a      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d03a      	beq.n	800473c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d019      	beq.n	8004702 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ce:	4b17      	ldr	r3, [pc, #92]	; (800472c <HAL_RCC_OscConfig+0x274>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d4:	f7fc ff66 	bl	80015a4 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046dc:	f7fc ff62 	bl	80015a4 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e15a      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046fa:	2001      	movs	r0, #1
 80046fc:	f000 fac6 	bl	8004c8c <RCC_Delay>
 8004700:	e01c      	b.n	800473c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_RCC_OscConfig+0x274>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004708:	f7fc ff4c 	bl	80015a4 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470e:	e00f      	b.n	8004730 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004710:	f7fc ff48 	bl	80015a4 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d908      	bls.n	8004730 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e140      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
 8004722:	bf00      	nop
 8004724:	40021000 	.word	0x40021000
 8004728:	42420000 	.word	0x42420000
 800472c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b9e      	ldr	r3, [pc, #632]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e9      	bne.n	8004710 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80a6 	beq.w	8004896 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b97      	ldr	r3, [pc, #604]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10d      	bne.n	8004776 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b94      	ldr	r3, [pc, #592]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4a93      	ldr	r2, [pc, #588]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	61d3      	str	r3, [r2, #28]
 8004766:	4b91      	ldr	r3, [pc, #580]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004776:	4b8e      	ldr	r3, [pc, #568]	; (80049b0 <HAL_RCC_OscConfig+0x4f8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d118      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004782:	4b8b      	ldr	r3, [pc, #556]	; (80049b0 <HAL_RCC_OscConfig+0x4f8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a8a      	ldr	r2, [pc, #552]	; (80049b0 <HAL_RCC_OscConfig+0x4f8>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800478c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478e:	f7fc ff09 	bl	80015a4 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004796:	f7fc ff05 	bl	80015a4 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b64      	cmp	r3, #100	; 0x64
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0fd      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	4b81      	ldr	r3, [pc, #516]	; (80049b0 <HAL_RCC_OscConfig+0x4f8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d106      	bne.n	80047ca <HAL_RCC_OscConfig+0x312>
 80047bc:	4b7b      	ldr	r3, [pc, #492]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4a7a      	ldr	r2, [pc, #488]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6213      	str	r3, [r2, #32]
 80047c8:	e02d      	b.n	8004826 <HAL_RCC_OscConfig+0x36e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0x334>
 80047d2:	4b76      	ldr	r3, [pc, #472]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	4a75      	ldr	r2, [pc, #468]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	6213      	str	r3, [r2, #32]
 80047de:	4b73      	ldr	r3, [pc, #460]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4a72      	ldr	r2, [pc, #456]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80047e4:	f023 0304 	bic.w	r3, r3, #4
 80047e8:	6213      	str	r3, [r2, #32]
 80047ea:	e01c      	b.n	8004826 <HAL_RCC_OscConfig+0x36e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b05      	cmp	r3, #5
 80047f2:	d10c      	bne.n	800480e <HAL_RCC_OscConfig+0x356>
 80047f4:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4a6c      	ldr	r2, [pc, #432]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	6213      	str	r3, [r2, #32]
 8004800:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4a69      	ldr	r2, [pc, #420]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6213      	str	r3, [r2, #32]
 800480c:	e00b      	b.n	8004826 <HAL_RCC_OscConfig+0x36e>
 800480e:	4b67      	ldr	r3, [pc, #412]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	4a66      	ldr	r2, [pc, #408]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	6213      	str	r3, [r2, #32]
 800481a:	4b64      	ldr	r3, [pc, #400]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	4a63      	ldr	r2, [pc, #396]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d015      	beq.n	800485a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482e:	f7fc feb9 	bl	80015a4 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fc feb5 	bl	80015a4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e0ab      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484c:	4b57      	ldr	r3, [pc, #348]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0ee      	beq.n	8004836 <HAL_RCC_OscConfig+0x37e>
 8004858:	e014      	b.n	8004884 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485a:	f7fc fea3 	bl	80015a4 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004860:	e00a      	b.n	8004878 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004862:	f7fc fe9f 	bl	80015a4 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004870:	4293      	cmp	r3, r2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e095      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004878:	4b4c      	ldr	r3, [pc, #304]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1ee      	bne.n	8004862 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d105      	bne.n	8004896 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488a:	4b48      	ldr	r3, [pc, #288]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	4a47      	ldr	r2, [pc, #284]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004894:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8081 	beq.w	80049a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a0:	4b42      	ldr	r3, [pc, #264]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d061      	beq.n	8004970 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d146      	bne.n	8004942 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b4:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <HAL_RCC_OscConfig+0x4fc>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ba:	f7fc fe73 	bl	80015a4 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c2:	f7fc fe6f 	bl	80015a4 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e067      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d4:	4b35      	ldr	r3, [pc, #212]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f0      	bne.n	80048c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e8:	d108      	bne.n	80048fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048ea:	4b30      	ldr	r3, [pc, #192]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	492d      	ldr	r1, [pc, #180]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048fc:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a19      	ldr	r1, [r3, #32]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	430b      	orrs	r3, r1
 800490e:	4927      	ldr	r1, [pc, #156]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004914:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_OscConfig+0x4fc>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fc fe43 	bl	80015a4 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004922:	f7fc fe3f 	bl	80015a4 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e037      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x46a>
 8004940:	e02f      	b.n	80049a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <HAL_RCC_OscConfig+0x4fc>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fc fe2c 	bl	80015a4 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004950:	f7fc fe28 	bl	80015a4 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e020      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x498>
 800496e:	e018      	b.n	80049a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e013      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_OscConfig+0x4f4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	429a      	cmp	r2, r3
 800498e:	d106      	bne.n	800499e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
 80049b4:	42420060 	.word	0x42420060

080049b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0d0      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049cc:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d910      	bls.n	80049fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b67      	ldr	r3, [pc, #412]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 0207 	bic.w	r2, r3, #7
 80049e2:	4965      	ldr	r1, [pc, #404]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b63      	ldr	r3, [pc, #396]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0b8      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d020      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a14:	4b59      	ldr	r3, [pc, #356]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a58      	ldr	r2, [pc, #352]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a2c:	4b53      	ldr	r3, [pc, #332]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a52      	ldr	r2, [pc, #328]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a38:	4b50      	ldr	r3, [pc, #320]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	494d      	ldr	r1, [pc, #308]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d040      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5e:	4b47      	ldr	r3, [pc, #284]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d115      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e07f      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a76:	4b41      	ldr	r3, [pc, #260]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e073      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a86:	4b3d      	ldr	r3, [pc, #244]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06b      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a96:	4b39      	ldr	r3, [pc, #228]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4936      	ldr	r1, [pc, #216]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa8:	f7fc fd7c 	bl	80015a4 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab0:	f7fc fd78 	bl	80015a4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e053      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 020c 	and.w	r2, r3, #12
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d1eb      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d210      	bcs.n	8004b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 0207 	bic.w	r2, r3, #7
 8004aee:	4922      	ldr	r1, [pc, #136]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af6:	4b20      	ldr	r3, [pc, #128]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e032      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b14:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4916      	ldr	r1, [pc, #88]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	490e      	ldr	r1, [pc, #56]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b46:	f000 f821 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
 8004b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <HAL_RCC_ClockConfig+0x1cc>)
 8004b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_ClockConfig+0x1d0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fc fcda 	bl	8001520 <HAL_InitTick>

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	08009238 	.word	0x08009238
 8004b84:	20000000 	.word	0x20000000
 8004b88:	20000004 	.word	0x20000004

08004b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b8c:	b490      	push	{r4, r7}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b92:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b94:	1d3c      	adds	r4, r7, #4
 8004b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b9c:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bb6:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x40>
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x46>
 8004bca:	e02d      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bcc:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bce:	623b      	str	r3, [r7, #32]
      break;
 8004bd0:	e02d      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	0c9b      	lsrs	r3, r3, #18
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bde:	4413      	add	r3, r2
 8004be0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004be4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	0c5b      	lsrs	r3, r3, #17
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bfe:	4413      	add	r3, r2
 8004c00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	4a0f      	ldr	r2, [pc, #60]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c0a:	fb02 f203 	mul.w	r2, r2, r3
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
 8004c16:	e004      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	4a0c      	ldr	r2, [pc, #48]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	623b      	str	r3, [r7, #32]
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c2a:	623b      	str	r3, [r7, #32]
      break;
 8004c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3728      	adds	r7, #40	; 0x28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc90      	pop	{r4, r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	08009224 	.word	0x08009224
 8004c40:	08009234 	.word	0x08009234
 8004c44:	40021000 	.word	0x40021000
 8004c48:	007a1200 	.word	0x007a1200
 8004c4c:	003d0900 	.word	0x003d0900

08004c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c54:	4b02      	ldr	r3, [pc, #8]	; (8004c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c56:	681b      	ldr	r3, [r3, #0]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	20000000 	.word	0x20000000

08004c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c68:	f7ff fff2 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c6c:	4601      	mov	r1, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4a03      	ldr	r2, [pc, #12]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7a:	5cd3      	ldrb	r3, [r2, r3]
 8004c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	08009248 	.word	0x08009248

08004c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c94:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <RCC_Delay+0x34>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <RCC_Delay+0x38>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	0a5b      	lsrs	r3, r3, #9
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ca8:	bf00      	nop
  }
  while (Delay --);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1e5a      	subs	r2, r3, #1
 8004cae:	60fa      	str	r2, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f9      	bne.n	8004ca8 <RCC_Delay+0x1c>
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000000 	.word	0x20000000
 8004cc4:	10624dd3 	.word	0x10624dd3

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	; (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	2000000c 	.word	0x2000000c

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	4e0c      	ldr	r6, [pc, #48]	; (8004d0c <__libc_init_array+0x38>)
 8004cda:	4c0d      	ldr	r4, [pc, #52]	; (8004d10 <__libc_init_array+0x3c>)
 8004cdc:	1ba4      	subs	r4, r4, r6
 8004cde:	10a4      	asrs	r4, r4, #2
 8004ce0:	42a5      	cmp	r5, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	f004 fa62 	bl	80091ac <_init>
 8004ce8:	2500      	movs	r5, #0
 8004cea:	4e0a      	ldr	r6, [pc, #40]	; (8004d14 <__libc_init_array+0x40>)
 8004cec:	4c0a      	ldr	r4, [pc, #40]	; (8004d18 <__libc_init_array+0x44>)
 8004cee:	1ba4      	subs	r4, r4, r6
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	42a5      	cmp	r5, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cfc:	4798      	blx	r3
 8004cfe:	3501      	adds	r5, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d06:	4798      	blx	r3
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08009570 	.word	0x08009570
 8004d10:	08009570 	.word	0x08009570
 8004d14:	08009570 	.word	0x08009570
 8004d18:	08009574 	.word	0x08009574

08004d1c <memset>:
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4402      	add	r2, r0
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d100      	bne.n	8004d26 <memset+0xa>
 8004d24:	4770      	bx	lr
 8004d26:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2a:	e7f9      	b.n	8004d20 <memset+0x4>

08004d2c <__cvt>:
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d32:	461e      	mov	r6, r3
 8004d34:	bfbb      	ittet	lt
 8004d36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d3a:	461e      	movlt	r6, r3
 8004d3c:	2300      	movge	r3, #0
 8004d3e:	232d      	movlt	r3, #45	; 0x2d
 8004d40:	b088      	sub	sp, #32
 8004d42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d44:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004d48:	f027 0720 	bic.w	r7, r7, #32
 8004d4c:	2f46      	cmp	r7, #70	; 0x46
 8004d4e:	4614      	mov	r4, r2
 8004d50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d52:	700b      	strb	r3, [r1, #0]
 8004d54:	d004      	beq.n	8004d60 <__cvt+0x34>
 8004d56:	2f45      	cmp	r7, #69	; 0x45
 8004d58:	d100      	bne.n	8004d5c <__cvt+0x30>
 8004d5a:	3501      	adds	r5, #1
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e000      	b.n	8004d62 <__cvt+0x36>
 8004d60:	2303      	movs	r3, #3
 8004d62:	aa07      	add	r2, sp, #28
 8004d64:	9204      	str	r2, [sp, #16]
 8004d66:	aa06      	add	r2, sp, #24
 8004d68:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d6c:	e9cd 3500 	strd	r3, r5, [sp]
 8004d70:	4622      	mov	r2, r4
 8004d72:	4633      	mov	r3, r6
 8004d74:	f001 feb8 	bl	8006ae8 <_dtoa_r>
 8004d78:	2f47      	cmp	r7, #71	; 0x47
 8004d7a:	4680      	mov	r8, r0
 8004d7c:	d102      	bne.n	8004d84 <__cvt+0x58>
 8004d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d80:	07db      	lsls	r3, r3, #31
 8004d82:	d526      	bpl.n	8004dd2 <__cvt+0xa6>
 8004d84:	2f46      	cmp	r7, #70	; 0x46
 8004d86:	eb08 0905 	add.w	r9, r8, r5
 8004d8a:	d111      	bne.n	8004db0 <__cvt+0x84>
 8004d8c:	f898 3000 	ldrb.w	r3, [r8]
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	d10a      	bne.n	8004daa <__cvt+0x7e>
 8004d94:	2200      	movs	r2, #0
 8004d96:	2300      	movs	r3, #0
 8004d98:	4620      	mov	r0, r4
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	f7fb fe04 	bl	80009a8 <__aeabi_dcmpeq>
 8004da0:	b918      	cbnz	r0, 8004daa <__cvt+0x7e>
 8004da2:	f1c5 0501 	rsb	r5, r5, #1
 8004da6:	f8ca 5000 	str.w	r5, [sl]
 8004daa:	f8da 3000 	ldr.w	r3, [sl]
 8004dae:	4499      	add	r9, r3
 8004db0:	2200      	movs	r2, #0
 8004db2:	2300      	movs	r3, #0
 8004db4:	4620      	mov	r0, r4
 8004db6:	4631      	mov	r1, r6
 8004db8:	f7fb fdf6 	bl	80009a8 <__aeabi_dcmpeq>
 8004dbc:	b938      	cbnz	r0, 8004dce <__cvt+0xa2>
 8004dbe:	2230      	movs	r2, #48	; 0x30
 8004dc0:	9b07      	ldr	r3, [sp, #28]
 8004dc2:	454b      	cmp	r3, r9
 8004dc4:	d205      	bcs.n	8004dd2 <__cvt+0xa6>
 8004dc6:	1c59      	adds	r1, r3, #1
 8004dc8:	9107      	str	r1, [sp, #28]
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e7f8      	b.n	8004dc0 <__cvt+0x94>
 8004dce:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	9b07      	ldr	r3, [sp, #28]
 8004dd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004dd8:	eba3 0308 	sub.w	r3, r3, r8
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	b008      	add	sp, #32
 8004de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004de4 <__exponent>:
 8004de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004de6:	2900      	cmp	r1, #0
 8004de8:	bfb4      	ite	lt
 8004dea:	232d      	movlt	r3, #45	; 0x2d
 8004dec:	232b      	movge	r3, #43	; 0x2b
 8004dee:	4604      	mov	r4, r0
 8004df0:	bfb8      	it	lt
 8004df2:	4249      	neglt	r1, r1
 8004df4:	2909      	cmp	r1, #9
 8004df6:	f804 2b02 	strb.w	r2, [r4], #2
 8004dfa:	7043      	strb	r3, [r0, #1]
 8004dfc:	dd21      	ble.n	8004e42 <__exponent+0x5e>
 8004dfe:	f10d 0307 	add.w	r3, sp, #7
 8004e02:	461f      	mov	r7, r3
 8004e04:	260a      	movs	r6, #10
 8004e06:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e0a:	fb06 1115 	mls	r1, r6, r5, r1
 8004e0e:	2d09      	cmp	r5, #9
 8004e10:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004e14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e18:	f103 32ff 	add.w	r2, r3, #4294967295
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	dc09      	bgt.n	8004e34 <__exponent+0x50>
 8004e20:	3130      	adds	r1, #48	; 0x30
 8004e22:	3b02      	subs	r3, #2
 8004e24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e28:	42bb      	cmp	r3, r7
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	d304      	bcc.n	8004e38 <__exponent+0x54>
 8004e2e:	1a10      	subs	r0, r2, r0
 8004e30:	b003      	add	sp, #12
 8004e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e34:	4613      	mov	r3, r2
 8004e36:	e7e6      	b.n	8004e06 <__exponent+0x22>
 8004e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e3c:	f804 2b01 	strb.w	r2, [r4], #1
 8004e40:	e7f2      	b.n	8004e28 <__exponent+0x44>
 8004e42:	2330      	movs	r3, #48	; 0x30
 8004e44:	4419      	add	r1, r3
 8004e46:	7083      	strb	r3, [r0, #2]
 8004e48:	1d02      	adds	r2, r0, #4
 8004e4a:	70c1      	strb	r1, [r0, #3]
 8004e4c:	e7ef      	b.n	8004e2e <__exponent+0x4a>
	...

08004e50 <_printf_float>:
 8004e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e54:	b091      	sub	sp, #68	; 0x44
 8004e56:	460c      	mov	r4, r1
 8004e58:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004e5a:	4693      	mov	fp, r2
 8004e5c:	461e      	mov	r6, r3
 8004e5e:	4605      	mov	r5, r0
 8004e60:	f003 f89e 	bl	8007fa0 <_localeconv_r>
 8004e64:	6803      	ldr	r3, [r0, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6a:	f7fb f971 	bl	8000150 <strlen>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	930e      	str	r3, [sp, #56]	; 0x38
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	900a      	str	r0, [sp, #40]	; 0x28
 8004e76:	3307      	adds	r3, #7
 8004e78:	f023 0307 	bic.w	r3, r3, #7
 8004e7c:	f103 0208 	add.w	r2, r3, #8
 8004e80:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004e84:	f8d4 a000 	ldr.w	sl, [r4]
 8004e88:	603a      	str	r2, [r7, #0]
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e92:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004e96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea0:	4ba6      	ldr	r3, [pc, #664]	; (800513c <_printf_float+0x2ec>)
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ea6:	f7fb fdb1 	bl	8000a0c <__aeabi_dcmpun>
 8004eaa:	bb68      	cbnz	r0, 8004f08 <_printf_float+0xb8>
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	4ba2      	ldr	r3, [pc, #648]	; (800513c <_printf_float+0x2ec>)
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eb6:	f7fb fd8b 	bl	80009d0 <__aeabi_dcmple>
 8004eba:	bb28      	cbnz	r0, 8004f08 <_printf_float+0xb8>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	f7fb fd7a 	bl	80009bc <__aeabi_dcmplt>
 8004ec8:	b110      	cbz	r0, 8004ed0 <_printf_float+0x80>
 8004eca:	232d      	movs	r3, #45	; 0x2d
 8004ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed0:	4f9b      	ldr	r7, [pc, #620]	; (8005140 <_printf_float+0x2f0>)
 8004ed2:	4b9c      	ldr	r3, [pc, #624]	; (8005144 <_printf_float+0x2f4>)
 8004ed4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ed8:	bf98      	it	ls
 8004eda:	461f      	movls	r7, r3
 8004edc:	2303      	movs	r3, #3
 8004ede:	f04f 0900 	mov.w	r9, #0
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	f02a 0304 	bic.w	r3, sl, #4
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	9600      	str	r6, [sp, #0]
 8004eec:	465b      	mov	r3, fp
 8004eee:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 f9e2 	bl	80052bc <_printf_common>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f040 8090 	bne.w	800501e <_printf_float+0x1ce>
 8004efe:	f04f 30ff 	mov.w	r0, #4294967295
 8004f02:	b011      	add	sp, #68	; 0x44
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	463a      	mov	r2, r7
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	4649      	mov	r1, r9
 8004f10:	f7fb fd7c 	bl	8000a0c <__aeabi_dcmpun>
 8004f14:	b110      	cbz	r0, 8004f1c <_printf_float+0xcc>
 8004f16:	4f8c      	ldr	r7, [pc, #560]	; (8005148 <_printf_float+0x2f8>)
 8004f18:	4b8c      	ldr	r3, [pc, #560]	; (800514c <_printf_float+0x2fc>)
 8004f1a:	e7db      	b.n	8004ed4 <_printf_float+0x84>
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004f22:	1c59      	adds	r1, r3, #1
 8004f24:	a80d      	add	r0, sp, #52	; 0x34
 8004f26:	a90e      	add	r1, sp, #56	; 0x38
 8004f28:	d140      	bne.n	8004fac <_printf_float+0x15c>
 8004f2a:	2306      	movs	r3, #6
 8004f2c:	6063      	str	r3, [r4, #4]
 8004f2e:	f04f 0c00 	mov.w	ip, #0
 8004f32:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004f36:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004f3a:	6863      	ldr	r3, [r4, #4]
 8004f3c:	6022      	str	r2, [r4, #0]
 8004f3e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	463a      	mov	r2, r7
 8004f46:	464b      	mov	r3, r9
 8004f48:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f7ff feed 	bl	8004d2c <__cvt>
 8004f52:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004f56:	2b47      	cmp	r3, #71	; 0x47
 8004f58:	4607      	mov	r7, r0
 8004f5a:	d109      	bne.n	8004f70 <_printf_float+0x120>
 8004f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f5e:	1cd8      	adds	r0, r3, #3
 8004f60:	db02      	blt.n	8004f68 <_printf_float+0x118>
 8004f62:	6862      	ldr	r2, [r4, #4]
 8004f64:	4293      	cmp	r3, r2
 8004f66:	dd47      	ble.n	8004ff8 <_printf_float+0x1a8>
 8004f68:	f1a8 0802 	sub.w	r8, r8, #2
 8004f6c:	fa5f f888 	uxtb.w	r8, r8
 8004f70:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004f74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f76:	d824      	bhi.n	8004fc2 <_printf_float+0x172>
 8004f78:	3901      	subs	r1, #1
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f80:	910d      	str	r1, [sp, #52]	; 0x34
 8004f82:	f7ff ff2f 	bl	8004de4 <__exponent>
 8004f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f88:	4681      	mov	r9, r0
 8004f8a:	1813      	adds	r3, r2, r0
 8004f8c:	2a01      	cmp	r2, #1
 8004f8e:	6123      	str	r3, [r4, #16]
 8004f90:	dc02      	bgt.n	8004f98 <_printf_float+0x148>
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	07d1      	lsls	r1, r2, #31
 8004f96:	d501      	bpl.n	8004f9c <_printf_float+0x14c>
 8004f98:	3301      	adds	r3, #1
 8004f9a:	6123      	str	r3, [r4, #16]
 8004f9c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0a2      	beq.n	8004eea <_printf_float+0x9a>
 8004fa4:	232d      	movs	r3, #45	; 0x2d
 8004fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004faa:	e79e      	b.n	8004eea <_printf_float+0x9a>
 8004fac:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004fb0:	f000 816e 	beq.w	8005290 <_printf_float+0x440>
 8004fb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fb8:	d1b9      	bne.n	8004f2e <_printf_float+0xde>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1b7      	bne.n	8004f2e <_printf_float+0xde>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e7b4      	b.n	8004f2c <_printf_float+0xdc>
 8004fc2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004fc6:	d119      	bne.n	8004ffc <_printf_float+0x1ac>
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	dd0c      	ble.n	8004fe8 <_printf_float+0x198>
 8004fce:	6121      	str	r1, [r4, #16]
 8004fd0:	b913      	cbnz	r3, 8004fd8 <_printf_float+0x188>
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	07d2      	lsls	r2, r2, #31
 8004fd6:	d502      	bpl.n	8004fde <_printf_float+0x18e>
 8004fd8:	3301      	adds	r3, #1
 8004fda:	440b      	add	r3, r1
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fe0:	f04f 0900 	mov.w	r9, #0
 8004fe4:	65a3      	str	r3, [r4, #88]	; 0x58
 8004fe6:	e7d9      	b.n	8004f9c <_printf_float+0x14c>
 8004fe8:	b913      	cbnz	r3, 8004ff0 <_printf_float+0x1a0>
 8004fea:	6822      	ldr	r2, [r4, #0]
 8004fec:	07d0      	lsls	r0, r2, #31
 8004fee:	d501      	bpl.n	8004ff4 <_printf_float+0x1a4>
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	e7f3      	b.n	8004fdc <_printf_float+0x18c>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e7f1      	b.n	8004fdc <_printf_float+0x18c>
 8004ff8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004ffc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005000:	4293      	cmp	r3, r2
 8005002:	db05      	blt.n	8005010 <_printf_float+0x1c0>
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	07d1      	lsls	r1, r2, #31
 800500a:	d5e8      	bpl.n	8004fde <_printf_float+0x18e>
 800500c:	3301      	adds	r3, #1
 800500e:	e7e5      	b.n	8004fdc <_printf_float+0x18c>
 8005010:	2b00      	cmp	r3, #0
 8005012:	bfcc      	ite	gt
 8005014:	2301      	movgt	r3, #1
 8005016:	f1c3 0302 	rsble	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	e7de      	b.n	8004fdc <_printf_float+0x18c>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	055a      	lsls	r2, r3, #21
 8005022:	d407      	bmi.n	8005034 <_printf_float+0x1e4>
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	463a      	mov	r2, r7
 8005028:	4659      	mov	r1, fp
 800502a:	4628      	mov	r0, r5
 800502c:	47b0      	blx	r6
 800502e:	3001      	adds	r0, #1
 8005030:	d129      	bne.n	8005086 <_printf_float+0x236>
 8005032:	e764      	b.n	8004efe <_printf_float+0xae>
 8005034:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005038:	f240 80d7 	bls.w	80051ea <_printf_float+0x39a>
 800503c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005040:	2200      	movs	r2, #0
 8005042:	2300      	movs	r3, #0
 8005044:	f7fb fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005048:	b388      	cbz	r0, 80050ae <_printf_float+0x25e>
 800504a:	2301      	movs	r3, #1
 800504c:	4a40      	ldr	r2, [pc, #256]	; (8005150 <_printf_float+0x300>)
 800504e:	4659      	mov	r1, fp
 8005050:	4628      	mov	r0, r5
 8005052:	47b0      	blx	r6
 8005054:	3001      	adds	r0, #1
 8005056:	f43f af52 	beq.w	8004efe <_printf_float+0xae>
 800505a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800505e:	429a      	cmp	r2, r3
 8005060:	db02      	blt.n	8005068 <_printf_float+0x218>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	07d8      	lsls	r0, r3, #31
 8005066:	d50e      	bpl.n	8005086 <_printf_float+0x236>
 8005068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506c:	4659      	mov	r1, fp
 800506e:	4628      	mov	r0, r5
 8005070:	47b0      	blx	r6
 8005072:	3001      	adds	r0, #1
 8005074:	f43f af43 	beq.w	8004efe <_printf_float+0xae>
 8005078:	2700      	movs	r7, #0
 800507a:	f104 081a 	add.w	r8, r4, #26
 800507e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005080:	3b01      	subs	r3, #1
 8005082:	42bb      	cmp	r3, r7
 8005084:	dc09      	bgt.n	800509a <_printf_float+0x24a>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	079f      	lsls	r7, r3, #30
 800508a:	f100 80fd 	bmi.w	8005288 <_printf_float+0x438>
 800508e:	68e0      	ldr	r0, [r4, #12]
 8005090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005092:	4298      	cmp	r0, r3
 8005094:	bfb8      	it	lt
 8005096:	4618      	movlt	r0, r3
 8005098:	e733      	b.n	8004f02 <_printf_float+0xb2>
 800509a:	2301      	movs	r3, #1
 800509c:	4642      	mov	r2, r8
 800509e:	4659      	mov	r1, fp
 80050a0:	4628      	mov	r0, r5
 80050a2:	47b0      	blx	r6
 80050a4:	3001      	adds	r0, #1
 80050a6:	f43f af2a 	beq.w	8004efe <_printf_float+0xae>
 80050aa:	3701      	adds	r7, #1
 80050ac:	e7e7      	b.n	800507e <_printf_float+0x22e>
 80050ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	dc2b      	bgt.n	800510c <_printf_float+0x2bc>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4a26      	ldr	r2, [pc, #152]	; (8005150 <_printf_float+0x300>)
 80050b8:	4659      	mov	r1, fp
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b0      	blx	r6
 80050be:	3001      	adds	r0, #1
 80050c0:	f43f af1d 	beq.w	8004efe <_printf_float+0xae>
 80050c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050c6:	b923      	cbnz	r3, 80050d2 <_printf_float+0x282>
 80050c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050ca:	b913      	cbnz	r3, 80050d2 <_printf_float+0x282>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	07d9      	lsls	r1, r3, #31
 80050d0:	d5d9      	bpl.n	8005086 <_printf_float+0x236>
 80050d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050d6:	4659      	mov	r1, fp
 80050d8:	4628      	mov	r0, r5
 80050da:	47b0      	blx	r6
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f af0e 	beq.w	8004efe <_printf_float+0xae>
 80050e2:	f04f 0800 	mov.w	r8, #0
 80050e6:	f104 091a 	add.w	r9, r4, #26
 80050ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ec:	425b      	negs	r3, r3
 80050ee:	4543      	cmp	r3, r8
 80050f0:	dc01      	bgt.n	80050f6 <_printf_float+0x2a6>
 80050f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050f4:	e797      	b.n	8005026 <_printf_float+0x1d6>
 80050f6:	2301      	movs	r3, #1
 80050f8:	464a      	mov	r2, r9
 80050fa:	4659      	mov	r1, fp
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b0      	blx	r6
 8005100:	3001      	adds	r0, #1
 8005102:	f43f aefc 	beq.w	8004efe <_printf_float+0xae>
 8005106:	f108 0801 	add.w	r8, r8, #1
 800510a:	e7ee      	b.n	80050ea <_printf_float+0x29a>
 800510c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800510e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005110:	429a      	cmp	r2, r3
 8005112:	bfa8      	it	ge
 8005114:	461a      	movge	r2, r3
 8005116:	2a00      	cmp	r2, #0
 8005118:	4690      	mov	r8, r2
 800511a:	dd07      	ble.n	800512c <_printf_float+0x2dc>
 800511c:	4613      	mov	r3, r2
 800511e:	4659      	mov	r1, fp
 8005120:	463a      	mov	r2, r7
 8005122:	4628      	mov	r0, r5
 8005124:	47b0      	blx	r6
 8005126:	3001      	adds	r0, #1
 8005128:	f43f aee9 	beq.w	8004efe <_printf_float+0xae>
 800512c:	f104 031a 	add.w	r3, r4, #26
 8005130:	f04f 0a00 	mov.w	sl, #0
 8005134:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005138:	930b      	str	r3, [sp, #44]	; 0x2c
 800513a:	e015      	b.n	8005168 <_printf_float+0x318>
 800513c:	7fefffff 	.word	0x7fefffff
 8005140:	08009258 	.word	0x08009258
 8005144:	08009254 	.word	0x08009254
 8005148:	08009260 	.word	0x08009260
 800514c:	0800925c 	.word	0x0800925c
 8005150:	08009264 	.word	0x08009264
 8005154:	2301      	movs	r3, #1
 8005156:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005158:	4659      	mov	r1, fp
 800515a:	4628      	mov	r0, r5
 800515c:	47b0      	blx	r6
 800515e:	3001      	adds	r0, #1
 8005160:	f43f aecd 	beq.w	8004efe <_printf_float+0xae>
 8005164:	f10a 0a01 	add.w	sl, sl, #1
 8005168:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800516c:	eba9 0308 	sub.w	r3, r9, r8
 8005170:	4553      	cmp	r3, sl
 8005172:	dcef      	bgt.n	8005154 <_printf_float+0x304>
 8005174:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005178:	429a      	cmp	r2, r3
 800517a:	444f      	add	r7, r9
 800517c:	db14      	blt.n	80051a8 <_printf_float+0x358>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	07da      	lsls	r2, r3, #31
 8005182:	d411      	bmi.n	80051a8 <_printf_float+0x358>
 8005184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005186:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005188:	eba3 0209 	sub.w	r2, r3, r9
 800518c:	eba3 0901 	sub.w	r9, r3, r1
 8005190:	4591      	cmp	r9, r2
 8005192:	bfa8      	it	ge
 8005194:	4691      	movge	r9, r2
 8005196:	f1b9 0f00 	cmp.w	r9, #0
 800519a:	dc0d      	bgt.n	80051b8 <_printf_float+0x368>
 800519c:	2700      	movs	r7, #0
 800519e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051a2:	f104 081a 	add.w	r8, r4, #26
 80051a6:	e018      	b.n	80051da <_printf_float+0x38a>
 80051a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ac:	4659      	mov	r1, fp
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b0      	blx	r6
 80051b2:	3001      	adds	r0, #1
 80051b4:	d1e6      	bne.n	8005184 <_printf_float+0x334>
 80051b6:	e6a2      	b.n	8004efe <_printf_float+0xae>
 80051b8:	464b      	mov	r3, r9
 80051ba:	463a      	mov	r2, r7
 80051bc:	4659      	mov	r1, fp
 80051be:	4628      	mov	r0, r5
 80051c0:	47b0      	blx	r6
 80051c2:	3001      	adds	r0, #1
 80051c4:	d1ea      	bne.n	800519c <_printf_float+0x34c>
 80051c6:	e69a      	b.n	8004efe <_printf_float+0xae>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4642      	mov	r2, r8
 80051cc:	4659      	mov	r1, fp
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b0      	blx	r6
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f ae93 	beq.w	8004efe <_printf_float+0xae>
 80051d8:	3701      	adds	r7, #1
 80051da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	eba3 0309 	sub.w	r3, r3, r9
 80051e4:	42bb      	cmp	r3, r7
 80051e6:	dcef      	bgt.n	80051c8 <_printf_float+0x378>
 80051e8:	e74d      	b.n	8005086 <_printf_float+0x236>
 80051ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051ec:	2a01      	cmp	r2, #1
 80051ee:	dc01      	bgt.n	80051f4 <_printf_float+0x3a4>
 80051f0:	07db      	lsls	r3, r3, #31
 80051f2:	d538      	bpl.n	8005266 <_printf_float+0x416>
 80051f4:	2301      	movs	r3, #1
 80051f6:	463a      	mov	r2, r7
 80051f8:	4659      	mov	r1, fp
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b0      	blx	r6
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f ae7d 	beq.w	8004efe <_printf_float+0xae>
 8005204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005208:	4659      	mov	r1, fp
 800520a:	4628      	mov	r0, r5
 800520c:	47b0      	blx	r6
 800520e:	3001      	adds	r0, #1
 8005210:	f107 0701 	add.w	r7, r7, #1
 8005214:	f43f ae73 	beq.w	8004efe <_printf_float+0xae>
 8005218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800521c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800521e:	2200      	movs	r2, #0
 8005220:	f103 38ff 	add.w	r8, r3, #4294967295
 8005224:	2300      	movs	r3, #0
 8005226:	f7fb fbbf 	bl	80009a8 <__aeabi_dcmpeq>
 800522a:	b9c0      	cbnz	r0, 800525e <_printf_float+0x40e>
 800522c:	4643      	mov	r3, r8
 800522e:	463a      	mov	r2, r7
 8005230:	4659      	mov	r1, fp
 8005232:	4628      	mov	r0, r5
 8005234:	47b0      	blx	r6
 8005236:	3001      	adds	r0, #1
 8005238:	d10d      	bne.n	8005256 <_printf_float+0x406>
 800523a:	e660      	b.n	8004efe <_printf_float+0xae>
 800523c:	2301      	movs	r3, #1
 800523e:	4642      	mov	r2, r8
 8005240:	4659      	mov	r1, fp
 8005242:	4628      	mov	r0, r5
 8005244:	47b0      	blx	r6
 8005246:	3001      	adds	r0, #1
 8005248:	f43f ae59 	beq.w	8004efe <_printf_float+0xae>
 800524c:	3701      	adds	r7, #1
 800524e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005250:	3b01      	subs	r3, #1
 8005252:	42bb      	cmp	r3, r7
 8005254:	dcf2      	bgt.n	800523c <_printf_float+0x3ec>
 8005256:	464b      	mov	r3, r9
 8005258:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800525c:	e6e4      	b.n	8005028 <_printf_float+0x1d8>
 800525e:	2700      	movs	r7, #0
 8005260:	f104 081a 	add.w	r8, r4, #26
 8005264:	e7f3      	b.n	800524e <_printf_float+0x3fe>
 8005266:	2301      	movs	r3, #1
 8005268:	e7e1      	b.n	800522e <_printf_float+0x3de>
 800526a:	2301      	movs	r3, #1
 800526c:	4642      	mov	r2, r8
 800526e:	4659      	mov	r1, fp
 8005270:	4628      	mov	r0, r5
 8005272:	47b0      	blx	r6
 8005274:	3001      	adds	r0, #1
 8005276:	f43f ae42 	beq.w	8004efe <_printf_float+0xae>
 800527a:	3701      	adds	r7, #1
 800527c:	68e3      	ldr	r3, [r4, #12]
 800527e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	42bb      	cmp	r3, r7
 8005284:	dcf1      	bgt.n	800526a <_printf_float+0x41a>
 8005286:	e702      	b.n	800508e <_printf_float+0x23e>
 8005288:	2700      	movs	r7, #0
 800528a:	f104 0819 	add.w	r8, r4, #25
 800528e:	e7f5      	b.n	800527c <_printf_float+0x42c>
 8005290:	2b00      	cmp	r3, #0
 8005292:	f43f ae94 	beq.w	8004fbe <_printf_float+0x16e>
 8005296:	f04f 0c00 	mov.w	ip, #0
 800529a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800529e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80052a2:	6022      	str	r2, [r4, #0]
 80052a4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80052a8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	463a      	mov	r2, r7
 80052b0:	464b      	mov	r3, r9
 80052b2:	4628      	mov	r0, r5
 80052b4:	f7ff fd3a 	bl	8004d2c <__cvt>
 80052b8:	4607      	mov	r7, r0
 80052ba:	e64f      	b.n	8004f5c <_printf_float+0x10c>

080052bc <_printf_common>:
 80052bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c0:	4691      	mov	r9, r2
 80052c2:	461f      	mov	r7, r3
 80052c4:	688a      	ldr	r2, [r1, #8]
 80052c6:	690b      	ldr	r3, [r1, #16]
 80052c8:	4606      	mov	r6, r0
 80052ca:	4293      	cmp	r3, r2
 80052cc:	bfb8      	it	lt
 80052ce:	4613      	movlt	r3, r2
 80052d0:	f8c9 3000 	str.w	r3, [r9]
 80052d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d8:	460c      	mov	r4, r1
 80052da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052de:	b112      	cbz	r2, 80052e6 <_printf_common+0x2a>
 80052e0:	3301      	adds	r3, #1
 80052e2:	f8c9 3000 	str.w	r3, [r9]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	0699      	lsls	r1, r3, #26
 80052ea:	bf42      	ittt	mi
 80052ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052f0:	3302      	addmi	r3, #2
 80052f2:	f8c9 3000 	strmi.w	r3, [r9]
 80052f6:	6825      	ldr	r5, [r4, #0]
 80052f8:	f015 0506 	ands.w	r5, r5, #6
 80052fc:	d107      	bne.n	800530e <_printf_common+0x52>
 80052fe:	f104 0a19 	add.w	sl, r4, #25
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	f8d9 2000 	ldr.w	r2, [r9]
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	42ab      	cmp	r3, r5
 800530c:	dc29      	bgt.n	8005362 <_printf_common+0xa6>
 800530e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	3300      	adds	r3, #0
 8005316:	bf18      	it	ne
 8005318:	2301      	movne	r3, #1
 800531a:	0692      	lsls	r2, r2, #26
 800531c:	d42e      	bmi.n	800537c <_printf_common+0xc0>
 800531e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005322:	4639      	mov	r1, r7
 8005324:	4630      	mov	r0, r6
 8005326:	47c0      	blx	r8
 8005328:	3001      	adds	r0, #1
 800532a:	d021      	beq.n	8005370 <_printf_common+0xb4>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	68e5      	ldr	r5, [r4, #12]
 8005330:	f003 0306 	and.w	r3, r3, #6
 8005334:	2b04      	cmp	r3, #4
 8005336:	bf18      	it	ne
 8005338:	2500      	movne	r5, #0
 800533a:	f8d9 2000 	ldr.w	r2, [r9]
 800533e:	f04f 0900 	mov.w	r9, #0
 8005342:	bf08      	it	eq
 8005344:	1aad      	subeq	r5, r5, r2
 8005346:	68a3      	ldr	r3, [r4, #8]
 8005348:	6922      	ldr	r2, [r4, #16]
 800534a:	bf08      	it	eq
 800534c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005350:	4293      	cmp	r3, r2
 8005352:	bfc4      	itt	gt
 8005354:	1a9b      	subgt	r3, r3, r2
 8005356:	18ed      	addgt	r5, r5, r3
 8005358:	341a      	adds	r4, #26
 800535a:	454d      	cmp	r5, r9
 800535c:	d11a      	bne.n	8005394 <_printf_common+0xd8>
 800535e:	2000      	movs	r0, #0
 8005360:	e008      	b.n	8005374 <_printf_common+0xb8>
 8005362:	2301      	movs	r3, #1
 8005364:	4652      	mov	r2, sl
 8005366:	4639      	mov	r1, r7
 8005368:	4630      	mov	r0, r6
 800536a:	47c0      	blx	r8
 800536c:	3001      	adds	r0, #1
 800536e:	d103      	bne.n	8005378 <_printf_common+0xbc>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	3501      	adds	r5, #1
 800537a:	e7c2      	b.n	8005302 <_printf_common+0x46>
 800537c:	2030      	movs	r0, #48	; 0x30
 800537e:	18e1      	adds	r1, r4, r3
 8005380:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800538a:	4422      	add	r2, r4
 800538c:	3302      	adds	r3, #2
 800538e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005392:	e7c4      	b.n	800531e <_printf_common+0x62>
 8005394:	2301      	movs	r3, #1
 8005396:	4622      	mov	r2, r4
 8005398:	4639      	mov	r1, r7
 800539a:	4630      	mov	r0, r6
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d0e6      	beq.n	8005370 <_printf_common+0xb4>
 80053a2:	f109 0901 	add.w	r9, r9, #1
 80053a6:	e7d8      	b.n	800535a <_printf_common+0x9e>

080053a8 <_printf_i>:
 80053a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80053b0:	460c      	mov	r4, r1
 80053b2:	7e09      	ldrb	r1, [r1, #24]
 80053b4:	b085      	sub	sp, #20
 80053b6:	296e      	cmp	r1, #110	; 0x6e
 80053b8:	4617      	mov	r7, r2
 80053ba:	4606      	mov	r6, r0
 80053bc:	4698      	mov	r8, r3
 80053be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053c0:	f000 80b3 	beq.w	800552a <_printf_i+0x182>
 80053c4:	d822      	bhi.n	800540c <_printf_i+0x64>
 80053c6:	2963      	cmp	r1, #99	; 0x63
 80053c8:	d036      	beq.n	8005438 <_printf_i+0x90>
 80053ca:	d80a      	bhi.n	80053e2 <_printf_i+0x3a>
 80053cc:	2900      	cmp	r1, #0
 80053ce:	f000 80b9 	beq.w	8005544 <_printf_i+0x19c>
 80053d2:	2958      	cmp	r1, #88	; 0x58
 80053d4:	f000 8083 	beq.w	80054de <_printf_i+0x136>
 80053d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80053e0:	e032      	b.n	8005448 <_printf_i+0xa0>
 80053e2:	2964      	cmp	r1, #100	; 0x64
 80053e4:	d001      	beq.n	80053ea <_printf_i+0x42>
 80053e6:	2969      	cmp	r1, #105	; 0x69
 80053e8:	d1f6      	bne.n	80053d8 <_printf_i+0x30>
 80053ea:	6820      	ldr	r0, [r4, #0]
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	0605      	lsls	r5, r0, #24
 80053f0:	f103 0104 	add.w	r1, r3, #4
 80053f4:	d52a      	bpl.n	800544c <_printf_i+0xa4>
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6011      	str	r1, [r2, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da03      	bge.n	8005406 <_printf_i+0x5e>
 80053fe:	222d      	movs	r2, #45	; 0x2d
 8005400:	425b      	negs	r3, r3
 8005402:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005406:	486f      	ldr	r0, [pc, #444]	; (80055c4 <_printf_i+0x21c>)
 8005408:	220a      	movs	r2, #10
 800540a:	e039      	b.n	8005480 <_printf_i+0xd8>
 800540c:	2973      	cmp	r1, #115	; 0x73
 800540e:	f000 809d 	beq.w	800554c <_printf_i+0x1a4>
 8005412:	d808      	bhi.n	8005426 <_printf_i+0x7e>
 8005414:	296f      	cmp	r1, #111	; 0x6f
 8005416:	d020      	beq.n	800545a <_printf_i+0xb2>
 8005418:	2970      	cmp	r1, #112	; 0x70
 800541a:	d1dd      	bne.n	80053d8 <_printf_i+0x30>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	f043 0320 	orr.w	r3, r3, #32
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	e003      	b.n	800542e <_printf_i+0x86>
 8005426:	2975      	cmp	r1, #117	; 0x75
 8005428:	d017      	beq.n	800545a <_printf_i+0xb2>
 800542a:	2978      	cmp	r1, #120	; 0x78
 800542c:	d1d4      	bne.n	80053d8 <_printf_i+0x30>
 800542e:	2378      	movs	r3, #120	; 0x78
 8005430:	4865      	ldr	r0, [pc, #404]	; (80055c8 <_printf_i+0x220>)
 8005432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005436:	e055      	b.n	80054e4 <_printf_i+0x13c>
 8005438:	6813      	ldr	r3, [r2, #0]
 800543a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800543e:	1d19      	adds	r1, r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6011      	str	r1, [r2, #0]
 8005444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005448:	2301      	movs	r3, #1
 800544a:	e08c      	b.n	8005566 <_printf_i+0x1be>
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005452:	6011      	str	r1, [r2, #0]
 8005454:	bf18      	it	ne
 8005456:	b21b      	sxthne	r3, r3
 8005458:	e7cf      	b.n	80053fa <_printf_i+0x52>
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	6825      	ldr	r5, [r4, #0]
 800545e:	1d18      	adds	r0, r3, #4
 8005460:	6010      	str	r0, [r2, #0]
 8005462:	0628      	lsls	r0, r5, #24
 8005464:	d501      	bpl.n	800546a <_printf_i+0xc2>
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	e002      	b.n	8005470 <_printf_i+0xc8>
 800546a:	0668      	lsls	r0, r5, #25
 800546c:	d5fb      	bpl.n	8005466 <_printf_i+0xbe>
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	296f      	cmp	r1, #111	; 0x6f
 8005472:	bf14      	ite	ne
 8005474:	220a      	movne	r2, #10
 8005476:	2208      	moveq	r2, #8
 8005478:	4852      	ldr	r0, [pc, #328]	; (80055c4 <_printf_i+0x21c>)
 800547a:	2100      	movs	r1, #0
 800547c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005480:	6865      	ldr	r5, [r4, #4]
 8005482:	2d00      	cmp	r5, #0
 8005484:	60a5      	str	r5, [r4, #8]
 8005486:	f2c0 8095 	blt.w	80055b4 <_printf_i+0x20c>
 800548a:	6821      	ldr	r1, [r4, #0]
 800548c:	f021 0104 	bic.w	r1, r1, #4
 8005490:	6021      	str	r1, [r4, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d13d      	bne.n	8005512 <_printf_i+0x16a>
 8005496:	2d00      	cmp	r5, #0
 8005498:	f040 808e 	bne.w	80055b8 <_printf_i+0x210>
 800549c:	4665      	mov	r5, ip
 800549e:	2a08      	cmp	r2, #8
 80054a0:	d10b      	bne.n	80054ba <_printf_i+0x112>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	07db      	lsls	r3, r3, #31
 80054a6:	d508      	bpl.n	80054ba <_printf_i+0x112>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	6862      	ldr	r2, [r4, #4]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	bfde      	ittt	le
 80054b0:	2330      	movle	r3, #48	; 0x30
 80054b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054ba:	ebac 0305 	sub.w	r3, ip, r5
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	f8cd 8000 	str.w	r8, [sp]
 80054c4:	463b      	mov	r3, r7
 80054c6:	aa03      	add	r2, sp, #12
 80054c8:	4621      	mov	r1, r4
 80054ca:	4630      	mov	r0, r6
 80054cc:	f7ff fef6 	bl	80052bc <_printf_common>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d14d      	bne.n	8005570 <_printf_i+0x1c8>
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	b005      	add	sp, #20
 80054da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054de:	4839      	ldr	r0, [pc, #228]	; (80055c4 <_printf_i+0x21c>)
 80054e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054e4:	6813      	ldr	r3, [r2, #0]
 80054e6:	6821      	ldr	r1, [r4, #0]
 80054e8:	1d1d      	adds	r5, r3, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6015      	str	r5, [r2, #0]
 80054ee:	060a      	lsls	r2, r1, #24
 80054f0:	d50b      	bpl.n	800550a <_printf_i+0x162>
 80054f2:	07ca      	lsls	r2, r1, #31
 80054f4:	bf44      	itt	mi
 80054f6:	f041 0120 	orrmi.w	r1, r1, #32
 80054fa:	6021      	strmi	r1, [r4, #0]
 80054fc:	b91b      	cbnz	r3, 8005506 <_printf_i+0x15e>
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	f022 0220 	bic.w	r2, r2, #32
 8005504:	6022      	str	r2, [r4, #0]
 8005506:	2210      	movs	r2, #16
 8005508:	e7b7      	b.n	800547a <_printf_i+0xd2>
 800550a:	064d      	lsls	r5, r1, #25
 800550c:	bf48      	it	mi
 800550e:	b29b      	uxthmi	r3, r3
 8005510:	e7ef      	b.n	80054f2 <_printf_i+0x14a>
 8005512:	4665      	mov	r5, ip
 8005514:	fbb3 f1f2 	udiv	r1, r3, r2
 8005518:	fb02 3311 	mls	r3, r2, r1, r3
 800551c:	5cc3      	ldrb	r3, [r0, r3]
 800551e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005522:	460b      	mov	r3, r1
 8005524:	2900      	cmp	r1, #0
 8005526:	d1f5      	bne.n	8005514 <_printf_i+0x16c>
 8005528:	e7b9      	b.n	800549e <_printf_i+0xf6>
 800552a:	6813      	ldr	r3, [r2, #0]
 800552c:	6825      	ldr	r5, [r4, #0]
 800552e:	1d18      	adds	r0, r3, #4
 8005530:	6961      	ldr	r1, [r4, #20]
 8005532:	6010      	str	r0, [r2, #0]
 8005534:	0628      	lsls	r0, r5, #24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	d501      	bpl.n	800553e <_printf_i+0x196>
 800553a:	6019      	str	r1, [r3, #0]
 800553c:	e002      	b.n	8005544 <_printf_i+0x19c>
 800553e:	066a      	lsls	r2, r5, #25
 8005540:	d5fb      	bpl.n	800553a <_printf_i+0x192>
 8005542:	8019      	strh	r1, [r3, #0]
 8005544:	2300      	movs	r3, #0
 8005546:	4665      	mov	r5, ip
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	e7b9      	b.n	80054c0 <_printf_i+0x118>
 800554c:	6813      	ldr	r3, [r2, #0]
 800554e:	1d19      	adds	r1, r3, #4
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	681d      	ldr	r5, [r3, #0]
 8005554:	6862      	ldr	r2, [r4, #4]
 8005556:	2100      	movs	r1, #0
 8005558:	4628      	mov	r0, r5
 800555a:	f002 fdad 	bl	80080b8 <memchr>
 800555e:	b108      	cbz	r0, 8005564 <_printf_i+0x1bc>
 8005560:	1b40      	subs	r0, r0, r5
 8005562:	6060      	str	r0, [r4, #4]
 8005564:	6863      	ldr	r3, [r4, #4]
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	2300      	movs	r3, #0
 800556a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556e:	e7a7      	b.n	80054c0 <_printf_i+0x118>
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	462a      	mov	r2, r5
 8005574:	4639      	mov	r1, r7
 8005576:	4630      	mov	r0, r6
 8005578:	47c0      	blx	r8
 800557a:	3001      	adds	r0, #1
 800557c:	d0aa      	beq.n	80054d4 <_printf_i+0x12c>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	079b      	lsls	r3, r3, #30
 8005582:	d413      	bmi.n	80055ac <_printf_i+0x204>
 8005584:	68e0      	ldr	r0, [r4, #12]
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	4298      	cmp	r0, r3
 800558a:	bfb8      	it	lt
 800558c:	4618      	movlt	r0, r3
 800558e:	e7a3      	b.n	80054d8 <_printf_i+0x130>
 8005590:	2301      	movs	r3, #1
 8005592:	464a      	mov	r2, r9
 8005594:	4639      	mov	r1, r7
 8005596:	4630      	mov	r0, r6
 8005598:	47c0      	blx	r8
 800559a:	3001      	adds	r0, #1
 800559c:	d09a      	beq.n	80054d4 <_printf_i+0x12c>
 800559e:	3501      	adds	r5, #1
 80055a0:	68e3      	ldr	r3, [r4, #12]
 80055a2:	9a03      	ldr	r2, [sp, #12]
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	42ab      	cmp	r3, r5
 80055a8:	dcf2      	bgt.n	8005590 <_printf_i+0x1e8>
 80055aa:	e7eb      	b.n	8005584 <_printf_i+0x1dc>
 80055ac:	2500      	movs	r5, #0
 80055ae:	f104 0919 	add.w	r9, r4, #25
 80055b2:	e7f5      	b.n	80055a0 <_printf_i+0x1f8>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ac      	bne.n	8005512 <_printf_i+0x16a>
 80055b8:	7803      	ldrb	r3, [r0, #0]
 80055ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c2:	e76c      	b.n	800549e <_printf_i+0xf6>
 80055c4:	08009266 	.word	0x08009266
 80055c8:	08009277 	.word	0x08009277

080055cc <_scanf_float>:
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	469a      	mov	sl, r3
 80055d2:	688b      	ldr	r3, [r1, #8]
 80055d4:	4616      	mov	r6, r2
 80055d6:	1e5a      	subs	r2, r3, #1
 80055d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80055dc:	bf88      	it	hi
 80055de:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80055e2:	b087      	sub	sp, #28
 80055e4:	bf85      	ittet	hi
 80055e6:	189b      	addhi	r3, r3, r2
 80055e8:	9301      	strhi	r3, [sp, #4]
 80055ea:	2300      	movls	r3, #0
 80055ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055f0:	4688      	mov	r8, r1
 80055f2:	f04f 0b00 	mov.w	fp, #0
 80055f6:	bf8c      	ite	hi
 80055f8:	608b      	strhi	r3, [r1, #8]
 80055fa:	9301      	strls	r3, [sp, #4]
 80055fc:	680b      	ldr	r3, [r1, #0]
 80055fe:	4607      	mov	r7, r0
 8005600:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005604:	f848 3b1c 	str.w	r3, [r8], #28
 8005608:	460c      	mov	r4, r1
 800560a:	4645      	mov	r5, r8
 800560c:	465a      	mov	r2, fp
 800560e:	46d9      	mov	r9, fp
 8005610:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005614:	f8cd b008 	str.w	fp, [sp, #8]
 8005618:	68a1      	ldr	r1, [r4, #8]
 800561a:	b181      	cbz	r1, 800563e <_scanf_float+0x72>
 800561c:	6833      	ldr	r3, [r6, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b49      	cmp	r3, #73	; 0x49
 8005622:	d071      	beq.n	8005708 <_scanf_float+0x13c>
 8005624:	d84d      	bhi.n	80056c2 <_scanf_float+0xf6>
 8005626:	2b39      	cmp	r3, #57	; 0x39
 8005628:	d840      	bhi.n	80056ac <_scanf_float+0xe0>
 800562a:	2b31      	cmp	r3, #49	; 0x31
 800562c:	f080 8088 	bcs.w	8005740 <_scanf_float+0x174>
 8005630:	2b2d      	cmp	r3, #45	; 0x2d
 8005632:	f000 8090 	beq.w	8005756 <_scanf_float+0x18a>
 8005636:	d815      	bhi.n	8005664 <_scanf_float+0x98>
 8005638:	2b2b      	cmp	r3, #43	; 0x2b
 800563a:	f000 808c 	beq.w	8005756 <_scanf_float+0x18a>
 800563e:	f1b9 0f00 	cmp.w	r9, #0
 8005642:	d003      	beq.n	800564c <_scanf_float+0x80>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	3a01      	subs	r2, #1
 800564e:	2a01      	cmp	r2, #1
 8005650:	f200 80ea 	bhi.w	8005828 <_scanf_float+0x25c>
 8005654:	4545      	cmp	r5, r8
 8005656:	f200 80dc 	bhi.w	8005812 <_scanf_float+0x246>
 800565a:	2601      	movs	r6, #1
 800565c:	4630      	mov	r0, r6
 800565e:	b007      	add	sp, #28
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	2b2e      	cmp	r3, #46	; 0x2e
 8005666:	f000 809f 	beq.w	80057a8 <_scanf_float+0x1dc>
 800566a:	2b30      	cmp	r3, #48	; 0x30
 800566c:	d1e7      	bne.n	800563e <_scanf_float+0x72>
 800566e:	6820      	ldr	r0, [r4, #0]
 8005670:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005674:	d064      	beq.n	8005740 <_scanf_float+0x174>
 8005676:	9b01      	ldr	r3, [sp, #4]
 8005678:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800567c:	6020      	str	r0, [r4, #0]
 800567e:	f109 0901 	add.w	r9, r9, #1
 8005682:	b11b      	cbz	r3, 800568c <_scanf_float+0xc0>
 8005684:	3b01      	subs	r3, #1
 8005686:	3101      	adds	r1, #1
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	60a1      	str	r1, [r4, #8]
 800568c:	68a3      	ldr	r3, [r4, #8]
 800568e:	3b01      	subs	r3, #1
 8005690:	60a3      	str	r3, [r4, #8]
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	3301      	adds	r3, #1
 8005696:	6123      	str	r3, [r4, #16]
 8005698:	6873      	ldr	r3, [r6, #4]
 800569a:	3b01      	subs	r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	6073      	str	r3, [r6, #4]
 80056a0:	f340 80ac 	ble.w	80057fc <_scanf_float+0x230>
 80056a4:	6833      	ldr	r3, [r6, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	e7b5      	b.n	8005618 <_scanf_float+0x4c>
 80056ac:	2b45      	cmp	r3, #69	; 0x45
 80056ae:	f000 8085 	beq.w	80057bc <_scanf_float+0x1f0>
 80056b2:	2b46      	cmp	r3, #70	; 0x46
 80056b4:	d06a      	beq.n	800578c <_scanf_float+0x1c0>
 80056b6:	2b41      	cmp	r3, #65	; 0x41
 80056b8:	d1c1      	bne.n	800563e <_scanf_float+0x72>
 80056ba:	2a01      	cmp	r2, #1
 80056bc:	d1bf      	bne.n	800563e <_scanf_float+0x72>
 80056be:	2202      	movs	r2, #2
 80056c0:	e046      	b.n	8005750 <_scanf_float+0x184>
 80056c2:	2b65      	cmp	r3, #101	; 0x65
 80056c4:	d07a      	beq.n	80057bc <_scanf_float+0x1f0>
 80056c6:	d818      	bhi.n	80056fa <_scanf_float+0x12e>
 80056c8:	2b54      	cmp	r3, #84	; 0x54
 80056ca:	d066      	beq.n	800579a <_scanf_float+0x1ce>
 80056cc:	d811      	bhi.n	80056f2 <_scanf_float+0x126>
 80056ce:	2b4e      	cmp	r3, #78	; 0x4e
 80056d0:	d1b5      	bne.n	800563e <_scanf_float+0x72>
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d146      	bne.n	8005764 <_scanf_float+0x198>
 80056d6:	f1b9 0f00 	cmp.w	r9, #0
 80056da:	d145      	bne.n	8005768 <_scanf_float+0x19c>
 80056dc:	6821      	ldr	r1, [r4, #0]
 80056de:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80056e2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80056e6:	d13f      	bne.n	8005768 <_scanf_float+0x19c>
 80056e8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80056ec:	6021      	str	r1, [r4, #0]
 80056ee:	2201      	movs	r2, #1
 80056f0:	e02e      	b.n	8005750 <_scanf_float+0x184>
 80056f2:	2b59      	cmp	r3, #89	; 0x59
 80056f4:	d01e      	beq.n	8005734 <_scanf_float+0x168>
 80056f6:	2b61      	cmp	r3, #97	; 0x61
 80056f8:	e7de      	b.n	80056b8 <_scanf_float+0xec>
 80056fa:	2b6e      	cmp	r3, #110	; 0x6e
 80056fc:	d0e9      	beq.n	80056d2 <_scanf_float+0x106>
 80056fe:	d815      	bhi.n	800572c <_scanf_float+0x160>
 8005700:	2b66      	cmp	r3, #102	; 0x66
 8005702:	d043      	beq.n	800578c <_scanf_float+0x1c0>
 8005704:	2b69      	cmp	r3, #105	; 0x69
 8005706:	d19a      	bne.n	800563e <_scanf_float+0x72>
 8005708:	f1bb 0f00 	cmp.w	fp, #0
 800570c:	d138      	bne.n	8005780 <_scanf_float+0x1b4>
 800570e:	f1b9 0f00 	cmp.w	r9, #0
 8005712:	d197      	bne.n	8005644 <_scanf_float+0x78>
 8005714:	6821      	ldr	r1, [r4, #0]
 8005716:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800571a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800571e:	d195      	bne.n	800564c <_scanf_float+0x80>
 8005720:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005724:	6021      	str	r1, [r4, #0]
 8005726:	f04f 0b01 	mov.w	fp, #1
 800572a:	e011      	b.n	8005750 <_scanf_float+0x184>
 800572c:	2b74      	cmp	r3, #116	; 0x74
 800572e:	d034      	beq.n	800579a <_scanf_float+0x1ce>
 8005730:	2b79      	cmp	r3, #121	; 0x79
 8005732:	d184      	bne.n	800563e <_scanf_float+0x72>
 8005734:	f1bb 0f07 	cmp.w	fp, #7
 8005738:	d181      	bne.n	800563e <_scanf_float+0x72>
 800573a:	f04f 0b08 	mov.w	fp, #8
 800573e:	e007      	b.n	8005750 <_scanf_float+0x184>
 8005740:	eb12 0f0b 	cmn.w	r2, fp
 8005744:	f47f af7b 	bne.w	800563e <_scanf_float+0x72>
 8005748:	6821      	ldr	r1, [r4, #0]
 800574a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800574e:	6021      	str	r1, [r4, #0]
 8005750:	702b      	strb	r3, [r5, #0]
 8005752:	3501      	adds	r5, #1
 8005754:	e79a      	b.n	800568c <_scanf_float+0xc0>
 8005756:	6821      	ldr	r1, [r4, #0]
 8005758:	0608      	lsls	r0, r1, #24
 800575a:	f57f af70 	bpl.w	800563e <_scanf_float+0x72>
 800575e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005762:	e7f4      	b.n	800574e <_scanf_float+0x182>
 8005764:	2a02      	cmp	r2, #2
 8005766:	d047      	beq.n	80057f8 <_scanf_float+0x22c>
 8005768:	f1bb 0f01 	cmp.w	fp, #1
 800576c:	d003      	beq.n	8005776 <_scanf_float+0x1aa>
 800576e:	f1bb 0f04 	cmp.w	fp, #4
 8005772:	f47f af64 	bne.w	800563e <_scanf_float+0x72>
 8005776:	f10b 0b01 	add.w	fp, fp, #1
 800577a:	fa5f fb8b 	uxtb.w	fp, fp
 800577e:	e7e7      	b.n	8005750 <_scanf_float+0x184>
 8005780:	f1bb 0f03 	cmp.w	fp, #3
 8005784:	d0f7      	beq.n	8005776 <_scanf_float+0x1aa>
 8005786:	f1bb 0f05 	cmp.w	fp, #5
 800578a:	e7f2      	b.n	8005772 <_scanf_float+0x1a6>
 800578c:	f1bb 0f02 	cmp.w	fp, #2
 8005790:	f47f af55 	bne.w	800563e <_scanf_float+0x72>
 8005794:	f04f 0b03 	mov.w	fp, #3
 8005798:	e7da      	b.n	8005750 <_scanf_float+0x184>
 800579a:	f1bb 0f06 	cmp.w	fp, #6
 800579e:	f47f af4e 	bne.w	800563e <_scanf_float+0x72>
 80057a2:	f04f 0b07 	mov.w	fp, #7
 80057a6:	e7d3      	b.n	8005750 <_scanf_float+0x184>
 80057a8:	6821      	ldr	r1, [r4, #0]
 80057aa:	0588      	lsls	r0, r1, #22
 80057ac:	f57f af47 	bpl.w	800563e <_scanf_float+0x72>
 80057b0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80057b4:	6021      	str	r1, [r4, #0]
 80057b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80057ba:	e7c9      	b.n	8005750 <_scanf_float+0x184>
 80057bc:	6821      	ldr	r1, [r4, #0]
 80057be:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80057c2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80057c6:	d006      	beq.n	80057d6 <_scanf_float+0x20a>
 80057c8:	0548      	lsls	r0, r1, #21
 80057ca:	f57f af38 	bpl.w	800563e <_scanf_float+0x72>
 80057ce:	f1b9 0f00 	cmp.w	r9, #0
 80057d2:	f43f af3b 	beq.w	800564c <_scanf_float+0x80>
 80057d6:	0588      	lsls	r0, r1, #22
 80057d8:	bf58      	it	pl
 80057da:	9802      	ldrpl	r0, [sp, #8]
 80057dc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80057e0:	bf58      	it	pl
 80057e2:	eba9 0000 	subpl.w	r0, r9, r0
 80057e6:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80057ea:	bf58      	it	pl
 80057ec:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80057f0:	6021      	str	r1, [r4, #0]
 80057f2:	f04f 0900 	mov.w	r9, #0
 80057f6:	e7ab      	b.n	8005750 <_scanf_float+0x184>
 80057f8:	2203      	movs	r2, #3
 80057fa:	e7a9      	b.n	8005750 <_scanf_float+0x184>
 80057fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005800:	4631      	mov	r1, r6
 8005802:	4638      	mov	r0, r7
 8005804:	9205      	str	r2, [sp, #20]
 8005806:	4798      	blx	r3
 8005808:	9a05      	ldr	r2, [sp, #20]
 800580a:	2800      	cmp	r0, #0
 800580c:	f43f af04 	beq.w	8005618 <_scanf_float+0x4c>
 8005810:	e715      	b.n	800563e <_scanf_float+0x72>
 8005812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005816:	4632      	mov	r2, r6
 8005818:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800581c:	4638      	mov	r0, r7
 800581e:	4798      	blx	r3
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	3b01      	subs	r3, #1
 8005824:	6123      	str	r3, [r4, #16]
 8005826:	e715      	b.n	8005654 <_scanf_float+0x88>
 8005828:	f10b 33ff 	add.w	r3, fp, #4294967295
 800582c:	2b06      	cmp	r3, #6
 800582e:	d80a      	bhi.n	8005846 <_scanf_float+0x27a>
 8005830:	f1bb 0f02 	cmp.w	fp, #2
 8005834:	d967      	bls.n	8005906 <_scanf_float+0x33a>
 8005836:	f1ab 0b03 	sub.w	fp, fp, #3
 800583a:	fa5f fb8b 	uxtb.w	fp, fp
 800583e:	eba5 0b0b 	sub.w	fp, r5, fp
 8005842:	455d      	cmp	r5, fp
 8005844:	d14a      	bne.n	80058dc <_scanf_float+0x310>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	05da      	lsls	r2, r3, #23
 800584a:	d51f      	bpl.n	800588c <_scanf_float+0x2c0>
 800584c:	055b      	lsls	r3, r3, #21
 800584e:	d467      	bmi.n	8005920 <_scanf_float+0x354>
 8005850:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	2965      	cmp	r1, #101	; 0x65
 8005858:	f103 33ff 	add.w	r3, r3, #4294967295
 800585c:	f105 3bff 	add.w	fp, r5, #4294967295
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	d00d      	beq.n	8005880 <_scanf_float+0x2b4>
 8005864:	2945      	cmp	r1, #69	; 0x45
 8005866:	d00b      	beq.n	8005880 <_scanf_float+0x2b4>
 8005868:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800586c:	4632      	mov	r2, r6
 800586e:	4638      	mov	r0, r7
 8005870:	4798      	blx	r3
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005878:	3b01      	subs	r3, #1
 800587a:	f1a5 0b02 	sub.w	fp, r5, #2
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005884:	4632      	mov	r2, r6
 8005886:	4638      	mov	r0, r7
 8005888:	4798      	blx	r3
 800588a:	465d      	mov	r5, fp
 800588c:	6826      	ldr	r6, [r4, #0]
 800588e:	f016 0610 	ands.w	r6, r6, #16
 8005892:	d176      	bne.n	8005982 <_scanf_float+0x3b6>
 8005894:	702e      	strb	r6, [r5, #0]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800589c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a0:	d141      	bne.n	8005926 <_scanf_float+0x35a>
 80058a2:	9b02      	ldr	r3, [sp, #8]
 80058a4:	eba9 0303 	sub.w	r3, r9, r3
 80058a8:	425a      	negs	r2, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d148      	bne.n	8005940 <_scanf_float+0x374>
 80058ae:	4641      	mov	r1, r8
 80058b0:	2200      	movs	r2, #0
 80058b2:	4638      	mov	r0, r7
 80058b4:	f000 ff2c 	bl	8006710 <_strtod_r>
 80058b8:	6825      	ldr	r5, [r4, #0]
 80058ba:	4680      	mov	r8, r0
 80058bc:	f015 0f02 	tst.w	r5, #2
 80058c0:	4689      	mov	r9, r1
 80058c2:	f8da 3000 	ldr.w	r3, [sl]
 80058c6:	d046      	beq.n	8005956 <_scanf_float+0x38a>
 80058c8:	1d1a      	adds	r2, r3, #4
 80058ca:	f8ca 2000 	str.w	r2, [sl]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	e9c3 8900 	strd	r8, r9, [r3]
 80058d4:	68e3      	ldr	r3, [r4, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60e3      	str	r3, [r4, #12]
 80058da:	e6bf      	b.n	800565c <_scanf_float+0x90>
 80058dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058e0:	4632      	mov	r2, r6
 80058e2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80058e6:	4638      	mov	r0, r7
 80058e8:	4798      	blx	r3
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	e7a7      	b.n	8005842 <_scanf_float+0x276>
 80058f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058f6:	4632      	mov	r2, r6
 80058f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80058fc:	4638      	mov	r0, r7
 80058fe:	4798      	blx	r3
 8005900:	6923      	ldr	r3, [r4, #16]
 8005902:	3b01      	subs	r3, #1
 8005904:	6123      	str	r3, [r4, #16]
 8005906:	4545      	cmp	r5, r8
 8005908:	d8f3      	bhi.n	80058f2 <_scanf_float+0x326>
 800590a:	e6a6      	b.n	800565a <_scanf_float+0x8e>
 800590c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005910:	4632      	mov	r2, r6
 8005912:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005916:	4638      	mov	r0, r7
 8005918:	4798      	blx	r3
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	3b01      	subs	r3, #1
 800591e:	6123      	str	r3, [r4, #16]
 8005920:	4545      	cmp	r5, r8
 8005922:	d8f3      	bhi.n	800590c <_scanf_float+0x340>
 8005924:	e699      	b.n	800565a <_scanf_float+0x8e>
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0c0      	beq.n	80058ae <_scanf_float+0x2e2>
 800592c:	9904      	ldr	r1, [sp, #16]
 800592e:	230a      	movs	r3, #10
 8005930:	4632      	mov	r2, r6
 8005932:	3101      	adds	r1, #1
 8005934:	4638      	mov	r0, r7
 8005936:	f000 ff77 	bl	8006828 <_strtol_r>
 800593a:	9b03      	ldr	r3, [sp, #12]
 800593c:	9d04      	ldr	r5, [sp, #16]
 800593e:	1ac2      	subs	r2, r0, r3
 8005940:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005944:	429d      	cmp	r5, r3
 8005946:	bf28      	it	cs
 8005948:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800594c:	490e      	ldr	r1, [pc, #56]	; (8005988 <_scanf_float+0x3bc>)
 800594e:	4628      	mov	r0, r5
 8005950:	f000 f89c 	bl	8005a8c <siprintf>
 8005954:	e7ab      	b.n	80058ae <_scanf_float+0x2e2>
 8005956:	1d1f      	adds	r7, r3, #4
 8005958:	f015 0504 	ands.w	r5, r5, #4
 800595c:	f8ca 7000 	str.w	r7, [sl]
 8005960:	d1b5      	bne.n	80058ce <_scanf_float+0x302>
 8005962:	681f      	ldr	r7, [r3, #0]
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	f7fb f850 	bl	8000a0c <__aeabi_dcmpun>
 800596c:	b120      	cbz	r0, 8005978 <_scanf_float+0x3ac>
 800596e:	4628      	mov	r0, r5
 8005970:	f000 f888 	bl	8005a84 <nanf>
 8005974:	6038      	str	r0, [r7, #0]
 8005976:	e7ad      	b.n	80058d4 <_scanf_float+0x308>
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fb f8a4 	bl	8000ac8 <__aeabi_d2f>
 8005980:	e7f8      	b.n	8005974 <_scanf_float+0x3a8>
 8005982:	2600      	movs	r6, #0
 8005984:	e66a      	b.n	800565c <_scanf_float+0x90>
 8005986:	bf00      	nop
 8005988:	08009288 	.word	0x08009288

0800598c <iprintf>:
 800598c:	b40f      	push	{r0, r1, r2, r3}
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <iprintf+0x2c>)
 8005990:	b513      	push	{r0, r1, r4, lr}
 8005992:	681c      	ldr	r4, [r3, #0]
 8005994:	b124      	cbz	r4, 80059a0 <iprintf+0x14>
 8005996:	69a3      	ldr	r3, [r4, #24]
 8005998:	b913      	cbnz	r3, 80059a0 <iprintf+0x14>
 800599a:	4620      	mov	r0, r4
 800599c:	f001 ff48 	bl	8007830 <__sinit>
 80059a0:	ab05      	add	r3, sp, #20
 80059a2:	9a04      	ldr	r2, [sp, #16]
 80059a4:	68a1      	ldr	r1, [r4, #8]
 80059a6:	4620      	mov	r0, r4
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	f003 f9c5 	bl	8008d38 <_vfiprintf_r>
 80059ae:	b002      	add	sp, #8
 80059b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b4:	b004      	add	sp, #16
 80059b6:	4770      	bx	lr
 80059b8:	2000000c 	.word	0x2000000c

080059bc <_puts_r>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	460e      	mov	r6, r1
 80059c0:	4605      	mov	r5, r0
 80059c2:	b118      	cbz	r0, 80059cc <_puts_r+0x10>
 80059c4:	6983      	ldr	r3, [r0, #24]
 80059c6:	b90b      	cbnz	r3, 80059cc <_puts_r+0x10>
 80059c8:	f001 ff32 	bl	8007830 <__sinit>
 80059cc:	69ab      	ldr	r3, [r5, #24]
 80059ce:	68ac      	ldr	r4, [r5, #8]
 80059d0:	b913      	cbnz	r3, 80059d8 <_puts_r+0x1c>
 80059d2:	4628      	mov	r0, r5
 80059d4:	f001 ff2c 	bl	8007830 <__sinit>
 80059d8:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <_puts_r+0xac>)
 80059da:	429c      	cmp	r4, r3
 80059dc:	d117      	bne.n	8005a0e <_puts_r+0x52>
 80059de:	686c      	ldr	r4, [r5, #4]
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	071b      	lsls	r3, r3, #28
 80059e4:	d51d      	bpl.n	8005a22 <_puts_r+0x66>
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	b1db      	cbz	r3, 8005a22 <_puts_r+0x66>
 80059ea:	3e01      	subs	r6, #1
 80059ec:	68a3      	ldr	r3, [r4, #8]
 80059ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059f2:	3b01      	subs	r3, #1
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	b9e9      	cbnz	r1, 8005a34 <_puts_r+0x78>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	da2e      	bge.n	8005a5a <_puts_r+0x9e>
 80059fc:	4622      	mov	r2, r4
 80059fe:	210a      	movs	r1, #10
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 ff23 	bl	800684c <__swbuf_r>
 8005a06:	3001      	adds	r0, #1
 8005a08:	d011      	beq.n	8005a2e <_puts_r+0x72>
 8005a0a:	200a      	movs	r0, #10
 8005a0c:	e011      	b.n	8005a32 <_puts_r+0x76>
 8005a0e:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <_puts_r+0xb0>)
 8005a10:	429c      	cmp	r4, r3
 8005a12:	d101      	bne.n	8005a18 <_puts_r+0x5c>
 8005a14:	68ac      	ldr	r4, [r5, #8]
 8005a16:	e7e3      	b.n	80059e0 <_puts_r+0x24>
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <_puts_r+0xb4>)
 8005a1a:	429c      	cmp	r4, r3
 8005a1c:	bf08      	it	eq
 8005a1e:	68ec      	ldreq	r4, [r5, #12]
 8005a20:	e7de      	b.n	80059e0 <_puts_r+0x24>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 ff63 	bl	80068f0 <__swsetup_r>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d0dd      	beq.n	80059ea <_puts_r+0x2e>
 8005a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da04      	bge.n	8005a42 <_puts_r+0x86>
 8005a38:	69a2      	ldr	r2, [r4, #24]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	dc06      	bgt.n	8005a4c <_puts_r+0x90>
 8005a3e:	290a      	cmp	r1, #10
 8005a40:	d004      	beq.n	8005a4c <_puts_r+0x90>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	7019      	strb	r1, [r3, #0]
 8005a4a:	e7cf      	b.n	80059ec <_puts_r+0x30>
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 fefc 	bl	800684c <__swbuf_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d1c9      	bne.n	80059ec <_puts_r+0x30>
 8005a58:	e7e9      	b.n	8005a2e <_puts_r+0x72>
 8005a5a:	200a      	movs	r0, #10
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	7018      	strb	r0, [r3, #0]
 8005a64:	e7e5      	b.n	8005a32 <_puts_r+0x76>
 8005a66:	bf00      	nop
 8005a68:	08009310 	.word	0x08009310
 8005a6c:	08009330 	.word	0x08009330
 8005a70:	080092f0 	.word	0x080092f0

08005a74 <puts>:
 8005a74:	4b02      	ldr	r3, [pc, #8]	; (8005a80 <puts+0xc>)
 8005a76:	4601      	mov	r1, r0
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	f7ff bf9f 	b.w	80059bc <_puts_r>
 8005a7e:	bf00      	nop
 8005a80:	2000000c 	.word	0x2000000c

08005a84 <nanf>:
 8005a84:	4800      	ldr	r0, [pc, #0]	; (8005a88 <nanf+0x4>)
 8005a86:	4770      	bx	lr
 8005a88:	7fc00000 	.word	0x7fc00000

08005a8c <siprintf>:
 8005a8c:	b40e      	push	{r1, r2, r3}
 8005a8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a92:	b500      	push	{lr}
 8005a94:	b09c      	sub	sp, #112	; 0x70
 8005a96:	ab1d      	add	r3, sp, #116	; 0x74
 8005a98:	9002      	str	r0, [sp, #8]
 8005a9a:	9006      	str	r0, [sp, #24]
 8005a9c:	9107      	str	r1, [sp, #28]
 8005a9e:	9104      	str	r1, [sp, #16]
 8005aa0:	4808      	ldr	r0, [pc, #32]	; (8005ac4 <siprintf+0x38>)
 8005aa2:	4909      	ldr	r1, [pc, #36]	; (8005ac8 <siprintf+0x3c>)
 8005aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa8:	9105      	str	r1, [sp, #20]
 8005aaa:	6800      	ldr	r0, [r0, #0]
 8005aac:	a902      	add	r1, sp, #8
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	f003 f822 	bl	8008af8 <_svfiprintf_r>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	9b02      	ldr	r3, [sp, #8]
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	b01c      	add	sp, #112	; 0x70
 8005abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac0:	b003      	add	sp, #12
 8005ac2:	4770      	bx	lr
 8005ac4:	2000000c 	.word	0x2000000c
 8005ac8:	ffff0208 	.word	0xffff0208

08005acc <sulp>:
 8005acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad0:	460f      	mov	r7, r1
 8005ad2:	4690      	mov	r8, r2
 8005ad4:	f002 fdd4 	bl	8008680 <__ulp>
 8005ad8:	4604      	mov	r4, r0
 8005ada:	460d      	mov	r5, r1
 8005adc:	f1b8 0f00 	cmp.w	r8, #0
 8005ae0:	d011      	beq.n	8005b06 <sulp+0x3a>
 8005ae2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005ae6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dd0b      	ble.n	8005b06 <sulp+0x3a>
 8005aee:	2400      	movs	r4, #0
 8005af0:	051b      	lsls	r3, r3, #20
 8005af2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005af6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	f7fa fceb 	bl	80004d8 <__aeabi_dmul>
 8005b02:	4604      	mov	r4, r0
 8005b04:	460d      	mov	r5, r1
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005b10 <_strtod_l>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	461f      	mov	r7, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	b0a1      	sub	sp, #132	; 0x84
 8005b1a:	4683      	mov	fp, r0
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	460e      	mov	r6, r1
 8005b20:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b22:	931c      	str	r3, [sp, #112]	; 0x70
 8005b24:	f002 fa39 	bl	8007f9a <__localeconv_l>
 8005b28:	4680      	mov	r8, r0
 8005b2a:	6800      	ldr	r0, [r0, #0]
 8005b2c:	f7fa fb10 	bl	8000150 <strlen>
 8005b30:	f04f 0900 	mov.w	r9, #0
 8005b34:	4604      	mov	r4, r0
 8005b36:	f04f 0a00 	mov.w	sl, #0
 8005b3a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	2a0d      	cmp	r2, #13
 8005b42:	d832      	bhi.n	8005baa <_strtod_l+0x9a>
 8005b44:	2a09      	cmp	r2, #9
 8005b46:	d236      	bcs.n	8005bb6 <_strtod_l+0xa6>
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	d03e      	beq.n	8005bca <_strtod_l+0xba>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b50:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005b52:	782b      	ldrb	r3, [r5, #0]
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	f040 80ac 	bne.w	8005cb2 <_strtod_l+0x1a2>
 8005b5a:	786b      	ldrb	r3, [r5, #1]
 8005b5c:	2b58      	cmp	r3, #88	; 0x58
 8005b5e:	d001      	beq.n	8005b64 <_strtod_l+0x54>
 8005b60:	2b78      	cmp	r3, #120	; 0x78
 8005b62:	d167      	bne.n	8005c34 <_strtod_l+0x124>
 8005b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b66:	9702      	str	r7, [sp, #8]
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	ab1c      	add	r3, sp, #112	; 0x70
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	4a89      	ldr	r2, [pc, #548]	; (8005d94 <_strtod_l+0x284>)
 8005b70:	ab1d      	add	r3, sp, #116	; 0x74
 8005b72:	a91b      	add	r1, sp, #108	; 0x6c
 8005b74:	4658      	mov	r0, fp
 8005b76:	f001 ff35 	bl	80079e4 <__gethex>
 8005b7a:	f010 0407 	ands.w	r4, r0, #7
 8005b7e:	4606      	mov	r6, r0
 8005b80:	d005      	beq.n	8005b8e <_strtod_l+0x7e>
 8005b82:	2c06      	cmp	r4, #6
 8005b84:	d12b      	bne.n	8005bde <_strtod_l+0xce>
 8005b86:	2300      	movs	r3, #0
 8005b88:	3501      	adds	r5, #1
 8005b8a:	951b      	str	r5, [sp, #108]	; 0x6c
 8005b8c:	930d      	str	r3, [sp, #52]	; 0x34
 8005b8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 85a6 	bne.w	80066e2 <_strtod_l+0xbd2>
 8005b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b98:	b1e3      	cbz	r3, 8005bd4 <_strtod_l+0xc4>
 8005b9a:	464a      	mov	r2, r9
 8005b9c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	b021      	add	sp, #132	; 0x84
 8005ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005baa:	2a2b      	cmp	r2, #43	; 0x2b
 8005bac:	d015      	beq.n	8005bda <_strtod_l+0xca>
 8005bae:	2a2d      	cmp	r2, #45	; 0x2d
 8005bb0:	d004      	beq.n	8005bbc <_strtod_l+0xac>
 8005bb2:	2a20      	cmp	r2, #32
 8005bb4:	d1ca      	bne.n	8005b4c <_strtod_l+0x3c>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bba:	e7bf      	b.n	8005b3c <_strtod_l+0x2c>
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	920d      	str	r2, [sp, #52]	; 0x34
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	921b      	str	r2, [sp, #108]	; 0x6c
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1c2      	bne.n	8005b50 <_strtod_l+0x40>
 8005bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bcc:	961b      	str	r6, [sp, #108]	; 0x6c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 8585 	bne.w	80066de <_strtod_l+0xbce>
 8005bd4:	464a      	mov	r2, r9
 8005bd6:	4653      	mov	r3, sl
 8005bd8:	e7e2      	b.n	8005ba0 <_strtod_l+0x90>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	e7ef      	b.n	8005bbe <_strtod_l+0xae>
 8005bde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005be0:	b13a      	cbz	r2, 8005bf2 <_strtod_l+0xe2>
 8005be2:	2135      	movs	r1, #53	; 0x35
 8005be4:	a81e      	add	r0, sp, #120	; 0x78
 8005be6:	f002 fe3e 	bl	8008866 <__copybits>
 8005bea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005bec:	4658      	mov	r0, fp
 8005bee:	f002 fab0 	bl	8008152 <_Bfree>
 8005bf2:	3c01      	subs	r4, #1
 8005bf4:	2c04      	cmp	r4, #4
 8005bf6:	d806      	bhi.n	8005c06 <_strtod_l+0xf6>
 8005bf8:	e8df f004 	tbb	[pc, r4]
 8005bfc:	1714030a 	.word	0x1714030a
 8005c00:	0a          	.byte	0x0a
 8005c01:	00          	.byte	0x00
 8005c02:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005c06:	0731      	lsls	r1, r6, #28
 8005c08:	d5c1      	bpl.n	8005b8e <_strtod_l+0x7e>
 8005c0a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005c0e:	e7be      	b.n	8005b8e <_strtod_l+0x7e>
 8005c10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c12:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005c16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c1e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005c22:	e7f0      	b.n	8005c06 <_strtod_l+0xf6>
 8005c24:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005d98 <_strtod_l+0x288>
 8005c28:	e7ed      	b.n	8005c06 <_strtod_l+0xf6>
 8005c2a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005c2e:	f04f 39ff 	mov.w	r9, #4294967295
 8005c32:	e7e8      	b.n	8005c06 <_strtod_l+0xf6>
 8005c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d0f9      	beq.n	8005c34 <_strtod_l+0x124>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0a4      	beq.n	8005b8e <_strtod_l+0x7e>
 8005c44:	2301      	movs	r3, #1
 8005c46:	2500      	movs	r5, #0
 8005c48:	220a      	movs	r2, #10
 8005c4a:	9307      	str	r3, [sp, #28]
 8005c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c4e:	9506      	str	r5, [sp, #24]
 8005c50:	9308      	str	r3, [sp, #32]
 8005c52:	9504      	str	r5, [sp, #16]
 8005c54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005c56:	7807      	ldrb	r7, [r0, #0]
 8005c58:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005c5c:	b2d9      	uxtb	r1, r3
 8005c5e:	2909      	cmp	r1, #9
 8005c60:	d929      	bls.n	8005cb6 <_strtod_l+0x1a6>
 8005c62:	4622      	mov	r2, r4
 8005c64:	f8d8 1000 	ldr.w	r1, [r8]
 8005c68:	f003 f9cf 	bl	800900a <strncmp>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d031      	beq.n	8005cd4 <_strtod_l+0x1c4>
 8005c70:	2000      	movs	r0, #0
 8005c72:	463b      	mov	r3, r7
 8005c74:	4602      	mov	r2, r0
 8005c76:	9c04      	ldr	r4, [sp, #16]
 8005c78:	9005      	str	r0, [sp, #20]
 8005c7a:	2b65      	cmp	r3, #101	; 0x65
 8005c7c:	d001      	beq.n	8005c82 <_strtod_l+0x172>
 8005c7e:	2b45      	cmp	r3, #69	; 0x45
 8005c80:	d114      	bne.n	8005cac <_strtod_l+0x19c>
 8005c82:	b924      	cbnz	r4, 8005c8e <_strtod_l+0x17e>
 8005c84:	b910      	cbnz	r0, 8005c8c <_strtod_l+0x17c>
 8005c86:	9b07      	ldr	r3, [sp, #28]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d09e      	beq.n	8005bca <_strtod_l+0xba>
 8005c8c:	2400      	movs	r4, #0
 8005c8e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005c90:	1c73      	adds	r3, r6, #1
 8005c92:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c94:	7873      	ldrb	r3, [r6, #1]
 8005c96:	2b2b      	cmp	r3, #43	; 0x2b
 8005c98:	d078      	beq.n	8005d8c <_strtod_l+0x27c>
 8005c9a:	2b2d      	cmp	r3, #45	; 0x2d
 8005c9c:	d070      	beq.n	8005d80 <_strtod_l+0x270>
 8005c9e:	f04f 0c00 	mov.w	ip, #0
 8005ca2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005ca6:	2f09      	cmp	r7, #9
 8005ca8:	d97c      	bls.n	8005da4 <_strtod_l+0x294>
 8005caa:	961b      	str	r6, [sp, #108]	; 0x6c
 8005cac:	f04f 0e00 	mov.w	lr, #0
 8005cb0:	e09a      	b.n	8005de8 <_strtod_l+0x2d8>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e7c7      	b.n	8005c46 <_strtod_l+0x136>
 8005cb6:	9904      	ldr	r1, [sp, #16]
 8005cb8:	3001      	adds	r0, #1
 8005cba:	2908      	cmp	r1, #8
 8005cbc:	bfd7      	itett	le
 8005cbe:	9906      	ldrle	r1, [sp, #24]
 8005cc0:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005cc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005cc8:	9306      	strle	r3, [sp, #24]
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	901b      	str	r0, [sp, #108]	; 0x6c
 8005cce:	3301      	adds	r3, #1
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	e7bf      	b.n	8005c54 <_strtod_l+0x144>
 8005cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cd6:	191a      	adds	r2, r3, r4
 8005cd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005cda:	9a04      	ldr	r2, [sp, #16]
 8005cdc:	5d1b      	ldrb	r3, [r3, r4]
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d037      	beq.n	8005d52 <_strtod_l+0x242>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	9c04      	ldr	r4, [sp, #16]
 8005ce6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005cea:	2909      	cmp	r1, #9
 8005cec:	d913      	bls.n	8005d16 <_strtod_l+0x206>
 8005cee:	2101      	movs	r1, #1
 8005cf0:	9105      	str	r1, [sp, #20]
 8005cf2:	e7c2      	b.n	8005c7a <_strtod_l+0x16a>
 8005cf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8005cfc:	785b      	ldrb	r3, [r3, #1]
 8005cfe:	2b30      	cmp	r3, #48	; 0x30
 8005d00:	d0f8      	beq.n	8005cf4 <_strtod_l+0x1e4>
 8005d02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005d06:	2a08      	cmp	r2, #8
 8005d08:	f200 84f0 	bhi.w	80066ec <_strtod_l+0xbdc>
 8005d0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005d0e:	9208      	str	r2, [sp, #32]
 8005d10:	4602      	mov	r2, r0
 8005d12:	2000      	movs	r0, #0
 8005d14:	4604      	mov	r4, r0
 8005d16:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005d1a:	f100 0101 	add.w	r1, r0, #1
 8005d1e:	d012      	beq.n	8005d46 <_strtod_l+0x236>
 8005d20:	440a      	add	r2, r1
 8005d22:	270a      	movs	r7, #10
 8005d24:	4621      	mov	r1, r4
 8005d26:	eb00 0c04 	add.w	ip, r0, r4
 8005d2a:	458c      	cmp	ip, r1
 8005d2c:	d113      	bne.n	8005d56 <_strtod_l+0x246>
 8005d2e:	1821      	adds	r1, r4, r0
 8005d30:	2908      	cmp	r1, #8
 8005d32:	f104 0401 	add.w	r4, r4, #1
 8005d36:	4404      	add	r4, r0
 8005d38:	dc19      	bgt.n	8005d6e <_strtod_l+0x25e>
 8005d3a:	210a      	movs	r1, #10
 8005d3c:	9b06      	ldr	r3, [sp, #24]
 8005d3e:	fb01 e303 	mla	r3, r1, r3, lr
 8005d42:	9306      	str	r3, [sp, #24]
 8005d44:	2100      	movs	r1, #0
 8005d46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d48:	1c58      	adds	r0, r3, #1
 8005d4a:	901b      	str	r0, [sp, #108]	; 0x6c
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	4608      	mov	r0, r1
 8005d50:	e7c9      	b.n	8005ce6 <_strtod_l+0x1d6>
 8005d52:	9804      	ldr	r0, [sp, #16]
 8005d54:	e7d3      	b.n	8005cfe <_strtod_l+0x1ee>
 8005d56:	2908      	cmp	r1, #8
 8005d58:	f101 0101 	add.w	r1, r1, #1
 8005d5c:	dc03      	bgt.n	8005d66 <_strtod_l+0x256>
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	437b      	muls	r3, r7
 8005d62:	9306      	str	r3, [sp, #24]
 8005d64:	e7e1      	b.n	8005d2a <_strtod_l+0x21a>
 8005d66:	2910      	cmp	r1, #16
 8005d68:	bfd8      	it	le
 8005d6a:	437d      	mulle	r5, r7
 8005d6c:	e7dd      	b.n	8005d2a <_strtod_l+0x21a>
 8005d6e:	2c10      	cmp	r4, #16
 8005d70:	bfdc      	itt	le
 8005d72:	210a      	movle	r1, #10
 8005d74:	fb01 e505 	mlale	r5, r1, r5, lr
 8005d78:	e7e4      	b.n	8005d44 <_strtod_l+0x234>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	e781      	b.n	8005c84 <_strtod_l+0x174>
 8005d80:	f04f 0c01 	mov.w	ip, #1
 8005d84:	1cb3      	adds	r3, r6, #2
 8005d86:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d88:	78b3      	ldrb	r3, [r6, #2]
 8005d8a:	e78a      	b.n	8005ca2 <_strtod_l+0x192>
 8005d8c:	f04f 0c00 	mov.w	ip, #0
 8005d90:	e7f8      	b.n	8005d84 <_strtod_l+0x274>
 8005d92:	bf00      	nop
 8005d94:	08009290 	.word	0x08009290
 8005d98:	7ff00000 	.word	0x7ff00000
 8005d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d9e:	1c5f      	adds	r7, r3, #1
 8005da0:	971b      	str	r7, [sp, #108]	; 0x6c
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b30      	cmp	r3, #48	; 0x30
 8005da6:	d0f9      	beq.n	8005d9c <_strtod_l+0x28c>
 8005da8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005dac:	2f08      	cmp	r7, #8
 8005dae:	f63f af7d 	bhi.w	8005cac <_strtod_l+0x19c>
 8005db2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005db6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005db8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dbc:	1c5f      	adds	r7, r3, #1
 8005dbe:	971b      	str	r7, [sp, #108]	; 0x6c
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005dc6:	f1b8 0f09 	cmp.w	r8, #9
 8005dca:	d937      	bls.n	8005e3c <_strtod_l+0x32c>
 8005dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dce:	1a7f      	subs	r7, r7, r1
 8005dd0:	2f08      	cmp	r7, #8
 8005dd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005dd6:	dc37      	bgt.n	8005e48 <_strtod_l+0x338>
 8005dd8:	45be      	cmp	lr, r7
 8005dda:	bfa8      	it	ge
 8005ddc:	46be      	movge	lr, r7
 8005dde:	f1bc 0f00 	cmp.w	ip, #0
 8005de2:	d001      	beq.n	8005de8 <_strtod_l+0x2d8>
 8005de4:	f1ce 0e00 	rsb	lr, lr, #0
 8005de8:	2c00      	cmp	r4, #0
 8005dea:	d151      	bne.n	8005e90 <_strtod_l+0x380>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	f47f aece 	bne.w	8005b8e <_strtod_l+0x7e>
 8005df2:	9a07      	ldr	r2, [sp, #28]
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	f47f aeca 	bne.w	8005b8e <_strtod_l+0x7e>
 8005dfa:	9a05      	ldr	r2, [sp, #20]
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	f47f aee4 	bne.w	8005bca <_strtod_l+0xba>
 8005e02:	2b4e      	cmp	r3, #78	; 0x4e
 8005e04:	d027      	beq.n	8005e56 <_strtod_l+0x346>
 8005e06:	dc21      	bgt.n	8005e4c <_strtod_l+0x33c>
 8005e08:	2b49      	cmp	r3, #73	; 0x49
 8005e0a:	f47f aede 	bne.w	8005bca <_strtod_l+0xba>
 8005e0e:	49a4      	ldr	r1, [pc, #656]	; (80060a0 <_strtod_l+0x590>)
 8005e10:	a81b      	add	r0, sp, #108	; 0x6c
 8005e12:	f002 f81b 	bl	8007e4c <__match>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f aed7 	beq.w	8005bca <_strtod_l+0xba>
 8005e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e1e:	49a1      	ldr	r1, [pc, #644]	; (80060a4 <_strtod_l+0x594>)
 8005e20:	3b01      	subs	r3, #1
 8005e22:	a81b      	add	r0, sp, #108	; 0x6c
 8005e24:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e26:	f002 f811 	bl	8007e4c <__match>
 8005e2a:	b910      	cbnz	r0, 8005e32 <_strtod_l+0x322>
 8005e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e2e:	3301      	adds	r3, #1
 8005e30:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e32:	f8df a284 	ldr.w	sl, [pc, #644]	; 80060b8 <_strtod_l+0x5a8>
 8005e36:	f04f 0900 	mov.w	r9, #0
 8005e3a:	e6a8      	b.n	8005b8e <_strtod_l+0x7e>
 8005e3c:	210a      	movs	r1, #10
 8005e3e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005e42:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005e46:	e7b8      	b.n	8005dba <_strtod_l+0x2aa>
 8005e48:	46be      	mov	lr, r7
 8005e4a:	e7c8      	b.n	8005dde <_strtod_l+0x2ce>
 8005e4c:	2b69      	cmp	r3, #105	; 0x69
 8005e4e:	d0de      	beq.n	8005e0e <_strtod_l+0x2fe>
 8005e50:	2b6e      	cmp	r3, #110	; 0x6e
 8005e52:	f47f aeba 	bne.w	8005bca <_strtod_l+0xba>
 8005e56:	4994      	ldr	r1, [pc, #592]	; (80060a8 <_strtod_l+0x598>)
 8005e58:	a81b      	add	r0, sp, #108	; 0x6c
 8005e5a:	f001 fff7 	bl	8007e4c <__match>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f43f aeb3 	beq.w	8005bca <_strtod_l+0xba>
 8005e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b28      	cmp	r3, #40	; 0x28
 8005e6a:	d10e      	bne.n	8005e8a <_strtod_l+0x37a>
 8005e6c:	aa1e      	add	r2, sp, #120	; 0x78
 8005e6e:	498f      	ldr	r1, [pc, #572]	; (80060ac <_strtod_l+0x59c>)
 8005e70:	a81b      	add	r0, sp, #108	; 0x6c
 8005e72:	f001 ffff 	bl	8007e74 <__hexnan>
 8005e76:	2805      	cmp	r0, #5
 8005e78:	d107      	bne.n	8005e8a <_strtod_l+0x37a>
 8005e7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e7c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005e80:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005e84:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005e88:	e681      	b.n	8005b8e <_strtod_l+0x7e>
 8005e8a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80060c0 <_strtod_l+0x5b0>
 8005e8e:	e7d2      	b.n	8005e36 <_strtod_l+0x326>
 8005e90:	ebae 0302 	sub.w	r3, lr, r2
 8005e94:	9307      	str	r3, [sp, #28]
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	9806      	ldr	r0, [sp, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bf08      	it	eq
 8005e9e:	4623      	moveq	r3, r4
 8005ea0:	2c10      	cmp	r4, #16
 8005ea2:	9304      	str	r3, [sp, #16]
 8005ea4:	46a0      	mov	r8, r4
 8005ea6:	bfa8      	it	ge
 8005ea8:	f04f 0810 	movge.w	r8, #16
 8005eac:	f7fa fa9a 	bl	80003e4 <__aeabi_ui2d>
 8005eb0:	2c09      	cmp	r4, #9
 8005eb2:	4681      	mov	r9, r0
 8005eb4:	468a      	mov	sl, r1
 8005eb6:	dc13      	bgt.n	8005ee0 <_strtod_l+0x3d0>
 8005eb8:	9b07      	ldr	r3, [sp, #28]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f43f ae67 	beq.w	8005b8e <_strtod_l+0x7e>
 8005ec0:	9b07      	ldr	r3, [sp, #28]
 8005ec2:	dd7e      	ble.n	8005fc2 <_strtod_l+0x4b2>
 8005ec4:	2b16      	cmp	r3, #22
 8005ec6:	dc65      	bgt.n	8005f94 <_strtod_l+0x484>
 8005ec8:	4a79      	ldr	r2, [pc, #484]	; (80060b0 <_strtod_l+0x5a0>)
 8005eca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005ece:	464a      	mov	r2, r9
 8005ed0:	e9de 0100 	ldrd	r0, r1, [lr]
 8005ed4:	4653      	mov	r3, sl
 8005ed6:	f7fa faff 	bl	80004d8 <__aeabi_dmul>
 8005eda:	4681      	mov	r9, r0
 8005edc:	468a      	mov	sl, r1
 8005ede:	e656      	b.n	8005b8e <_strtod_l+0x7e>
 8005ee0:	4b73      	ldr	r3, [pc, #460]	; (80060b0 <_strtod_l+0x5a0>)
 8005ee2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005ee6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005eea:	f7fa faf5 	bl	80004d8 <__aeabi_dmul>
 8005eee:	4606      	mov	r6, r0
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	460f      	mov	r7, r1
 8005ef4:	f7fa fa76 	bl	80003e4 <__aeabi_ui2d>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4630      	mov	r0, r6
 8005efe:	4639      	mov	r1, r7
 8005f00:	f7fa f934 	bl	800016c <__adddf3>
 8005f04:	2c0f      	cmp	r4, #15
 8005f06:	4681      	mov	r9, r0
 8005f08:	468a      	mov	sl, r1
 8005f0a:	ddd5      	ble.n	8005eb8 <_strtod_l+0x3a8>
 8005f0c:	9b07      	ldr	r3, [sp, #28]
 8005f0e:	eba4 0808 	sub.w	r8, r4, r8
 8005f12:	4498      	add	r8, r3
 8005f14:	f1b8 0f00 	cmp.w	r8, #0
 8005f18:	f340 809a 	ble.w	8006050 <_strtod_l+0x540>
 8005f1c:	f018 030f 	ands.w	r3, r8, #15
 8005f20:	d00a      	beq.n	8005f38 <_strtod_l+0x428>
 8005f22:	4963      	ldr	r1, [pc, #396]	; (80060b0 <_strtod_l+0x5a0>)
 8005f24:	464a      	mov	r2, r9
 8005f26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f2e:	4653      	mov	r3, sl
 8005f30:	f7fa fad2 	bl	80004d8 <__aeabi_dmul>
 8005f34:	4681      	mov	r9, r0
 8005f36:	468a      	mov	sl, r1
 8005f38:	f038 080f 	bics.w	r8, r8, #15
 8005f3c:	d077      	beq.n	800602e <_strtod_l+0x51e>
 8005f3e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005f42:	dd4b      	ble.n	8005fdc <_strtod_l+0x4cc>
 8005f44:	f04f 0800 	mov.w	r8, #0
 8005f48:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f4c:	f8cd 8020 	str.w	r8, [sp, #32]
 8005f50:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f54:	2322      	movs	r3, #34	; 0x22
 8005f56:	f04f 0900 	mov.w	r9, #0
 8005f5a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80060b8 <_strtod_l+0x5a8>
 8005f5e:	f8cb 3000 	str.w	r3, [fp]
 8005f62:	9b08      	ldr	r3, [sp, #32]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f43f ae12 	beq.w	8005b8e <_strtod_l+0x7e>
 8005f6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f6c:	4658      	mov	r0, fp
 8005f6e:	f002 f8f0 	bl	8008152 <_Bfree>
 8005f72:	9906      	ldr	r1, [sp, #24]
 8005f74:	4658      	mov	r0, fp
 8005f76:	f002 f8ec 	bl	8008152 <_Bfree>
 8005f7a:	9904      	ldr	r1, [sp, #16]
 8005f7c:	4658      	mov	r0, fp
 8005f7e:	f002 f8e8 	bl	8008152 <_Bfree>
 8005f82:	9908      	ldr	r1, [sp, #32]
 8005f84:	4658      	mov	r0, fp
 8005f86:	f002 f8e4 	bl	8008152 <_Bfree>
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	4658      	mov	r0, fp
 8005f8e:	f002 f8e0 	bl	8008152 <_Bfree>
 8005f92:	e5fc      	b.n	8005b8e <_strtod_l+0x7e>
 8005f94:	9a07      	ldr	r2, [sp, #28]
 8005f96:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	dbb6      	blt.n	8005f0c <_strtod_l+0x3fc>
 8005f9e:	4d44      	ldr	r5, [pc, #272]	; (80060b0 <_strtod_l+0x5a0>)
 8005fa0:	f1c4 040f 	rsb	r4, r4, #15
 8005fa4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005fa8:	464a      	mov	r2, r9
 8005faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fae:	4653      	mov	r3, sl
 8005fb0:	f7fa fa92 	bl	80004d8 <__aeabi_dmul>
 8005fb4:	9b07      	ldr	r3, [sp, #28]
 8005fb6:	1b1c      	subs	r4, r3, r4
 8005fb8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005fbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fc0:	e789      	b.n	8005ed6 <_strtod_l+0x3c6>
 8005fc2:	f113 0f16 	cmn.w	r3, #22
 8005fc6:	dba1      	blt.n	8005f0c <_strtod_l+0x3fc>
 8005fc8:	4a39      	ldr	r2, [pc, #228]	; (80060b0 <_strtod_l+0x5a0>)
 8005fca:	4648      	mov	r0, r9
 8005fcc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005fd0:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	f7fa fba9 	bl	800072c <__aeabi_ddiv>
 8005fda:	e77e      	b.n	8005eda <_strtod_l+0x3ca>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4648      	mov	r0, r9
 8005fe0:	4651      	mov	r1, sl
 8005fe2:	461d      	mov	r5, r3
 8005fe4:	4e33      	ldr	r6, [pc, #204]	; (80060b4 <_strtod_l+0x5a4>)
 8005fe6:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005fea:	f1b8 0f01 	cmp.w	r8, #1
 8005fee:	dc21      	bgt.n	8006034 <_strtod_l+0x524>
 8005ff0:	b10b      	cbz	r3, 8005ff6 <_strtod_l+0x4e6>
 8005ff2:	4681      	mov	r9, r0
 8005ff4:	468a      	mov	sl, r1
 8005ff6:	4b2f      	ldr	r3, [pc, #188]	; (80060b4 <_strtod_l+0x5a4>)
 8005ff8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005ffc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006000:	464a      	mov	r2, r9
 8006002:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006006:	4653      	mov	r3, sl
 8006008:	f7fa fa66 	bl	80004d8 <__aeabi_dmul>
 800600c:	4b2a      	ldr	r3, [pc, #168]	; (80060b8 <_strtod_l+0x5a8>)
 800600e:	460a      	mov	r2, r1
 8006010:	400b      	ands	r3, r1
 8006012:	492a      	ldr	r1, [pc, #168]	; (80060bc <_strtod_l+0x5ac>)
 8006014:	4681      	mov	r9, r0
 8006016:	428b      	cmp	r3, r1
 8006018:	d894      	bhi.n	8005f44 <_strtod_l+0x434>
 800601a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800601e:	428b      	cmp	r3, r1
 8006020:	bf86      	itte	hi
 8006022:	f04f 39ff 	movhi.w	r9, #4294967295
 8006026:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80060c4 <_strtod_l+0x5b4>
 800602a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800602e:	2300      	movs	r3, #0
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	e07b      	b.n	800612c <_strtod_l+0x61c>
 8006034:	f018 0f01 	tst.w	r8, #1
 8006038:	d006      	beq.n	8006048 <_strtod_l+0x538>
 800603a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f7fa fa49 	bl	80004d8 <__aeabi_dmul>
 8006046:	2301      	movs	r3, #1
 8006048:	3501      	adds	r5, #1
 800604a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800604e:	e7cc      	b.n	8005fea <_strtod_l+0x4da>
 8006050:	d0ed      	beq.n	800602e <_strtod_l+0x51e>
 8006052:	f1c8 0800 	rsb	r8, r8, #0
 8006056:	f018 020f 	ands.w	r2, r8, #15
 800605a:	d00a      	beq.n	8006072 <_strtod_l+0x562>
 800605c:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <_strtod_l+0x5a0>)
 800605e:	4648      	mov	r0, r9
 8006060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006064:	4651      	mov	r1, sl
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa fb5f 	bl	800072c <__aeabi_ddiv>
 800606e:	4681      	mov	r9, r0
 8006070:	468a      	mov	sl, r1
 8006072:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006076:	d0da      	beq.n	800602e <_strtod_l+0x51e>
 8006078:	f1b8 0f1f 	cmp.w	r8, #31
 800607c:	dd24      	ble.n	80060c8 <_strtod_l+0x5b8>
 800607e:	f04f 0800 	mov.w	r8, #0
 8006082:	f8cd 8010 	str.w	r8, [sp, #16]
 8006086:	f8cd 8020 	str.w	r8, [sp, #32]
 800608a:	f8cd 8018 	str.w	r8, [sp, #24]
 800608e:	2322      	movs	r3, #34	; 0x22
 8006090:	f04f 0900 	mov.w	r9, #0
 8006094:	f04f 0a00 	mov.w	sl, #0
 8006098:	f8cb 3000 	str.w	r3, [fp]
 800609c:	e761      	b.n	8005f62 <_strtod_l+0x452>
 800609e:	bf00      	nop
 80060a0:	08009259 	.word	0x08009259
 80060a4:	080092e3 	.word	0x080092e3
 80060a8:	08009261 	.word	0x08009261
 80060ac:	080092a4 	.word	0x080092a4
 80060b0:	08009388 	.word	0x08009388
 80060b4:	08009360 	.word	0x08009360
 80060b8:	7ff00000 	.word	0x7ff00000
 80060bc:	7ca00000 	.word	0x7ca00000
 80060c0:	fff80000 	.word	0xfff80000
 80060c4:	7fefffff 	.word	0x7fefffff
 80060c8:	f018 0310 	ands.w	r3, r8, #16
 80060cc:	bf18      	it	ne
 80060ce:	236a      	movne	r3, #106	; 0x6a
 80060d0:	4648      	mov	r0, r9
 80060d2:	9305      	str	r3, [sp, #20]
 80060d4:	4651      	mov	r1, sl
 80060d6:	2300      	movs	r3, #0
 80060d8:	4da1      	ldr	r5, [pc, #644]	; (8006360 <_strtod_l+0x850>)
 80060da:	f1b8 0f00 	cmp.w	r8, #0
 80060de:	f300 8113 	bgt.w	8006308 <_strtod_l+0x7f8>
 80060e2:	b10b      	cbz	r3, 80060e8 <_strtod_l+0x5d8>
 80060e4:	4681      	mov	r9, r0
 80060e6:	468a      	mov	sl, r1
 80060e8:	9b05      	ldr	r3, [sp, #20]
 80060ea:	b1bb      	cbz	r3, 800611c <_strtod_l+0x60c>
 80060ec:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80060f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	4651      	mov	r1, sl
 80060f8:	dd10      	ble.n	800611c <_strtod_l+0x60c>
 80060fa:	2b1f      	cmp	r3, #31
 80060fc:	f340 8110 	ble.w	8006320 <_strtod_l+0x810>
 8006100:	2b34      	cmp	r3, #52	; 0x34
 8006102:	bfd8      	it	le
 8006104:	f04f 32ff 	movle.w	r2, #4294967295
 8006108:	f04f 0900 	mov.w	r9, #0
 800610c:	bfcf      	iteee	gt
 800610e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8006112:	3b20      	suble	r3, #32
 8006114:	fa02 f303 	lslle.w	r3, r2, r3
 8006118:	ea03 0a01 	andle.w	sl, r3, r1
 800611c:	2200      	movs	r2, #0
 800611e:	2300      	movs	r3, #0
 8006120:	4648      	mov	r0, r9
 8006122:	4651      	mov	r1, sl
 8006124:	f7fa fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8006128:	2800      	cmp	r0, #0
 800612a:	d1a8      	bne.n	800607e <_strtod_l+0x56e>
 800612c:	9b06      	ldr	r3, [sp, #24]
 800612e:	9a04      	ldr	r2, [sp, #16]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	9908      	ldr	r1, [sp, #32]
 8006134:	4623      	mov	r3, r4
 8006136:	4658      	mov	r0, fp
 8006138:	f002 f85d 	bl	80081f6 <__s2b>
 800613c:	9008      	str	r0, [sp, #32]
 800613e:	2800      	cmp	r0, #0
 8006140:	f43f af00 	beq.w	8005f44 <_strtod_l+0x434>
 8006144:	9a07      	ldr	r2, [sp, #28]
 8006146:	9b07      	ldr	r3, [sp, #28]
 8006148:	2a00      	cmp	r2, #0
 800614a:	f1c3 0300 	rsb	r3, r3, #0
 800614e:	bfa8      	it	ge
 8006150:	2300      	movge	r3, #0
 8006152:	f04f 0800 	mov.w	r8, #0
 8006156:	930e      	str	r3, [sp, #56]	; 0x38
 8006158:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800615c:	9316      	str	r3, [sp, #88]	; 0x58
 800615e:	f8cd 8010 	str.w	r8, [sp, #16]
 8006162:	9b08      	ldr	r3, [sp, #32]
 8006164:	4658      	mov	r0, fp
 8006166:	6859      	ldr	r1, [r3, #4]
 8006168:	f001 ffbf 	bl	80080ea <_Balloc>
 800616c:	9006      	str	r0, [sp, #24]
 800616e:	2800      	cmp	r0, #0
 8006170:	f43f aef0 	beq.w	8005f54 <_strtod_l+0x444>
 8006174:	9b08      	ldr	r3, [sp, #32]
 8006176:	300c      	adds	r0, #12
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	f103 010c 	add.w	r1, r3, #12
 800617e:	3202      	adds	r2, #2
 8006180:	0092      	lsls	r2, r2, #2
 8006182:	f001 ffa7 	bl	80080d4 <memcpy>
 8006186:	ab1e      	add	r3, sp, #120	; 0x78
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	ab1d      	add	r3, sp, #116	; 0x74
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	464a      	mov	r2, r9
 8006190:	4653      	mov	r3, sl
 8006192:	4658      	mov	r0, fp
 8006194:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006198:	f002 fae8 	bl	800876c <__d2b>
 800619c:	901c      	str	r0, [sp, #112]	; 0x70
 800619e:	2800      	cmp	r0, #0
 80061a0:	f43f aed8 	beq.w	8005f54 <_strtod_l+0x444>
 80061a4:	2101      	movs	r1, #1
 80061a6:	4658      	mov	r0, fp
 80061a8:	f002 f8b1 	bl	800830e <__i2b>
 80061ac:	9004      	str	r0, [sp, #16]
 80061ae:	4603      	mov	r3, r0
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f43f aecf 	beq.w	8005f54 <_strtod_l+0x444>
 80061b6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80061b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80061ba:	2d00      	cmp	r5, #0
 80061bc:	bfab      	itete	ge
 80061be:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80061c0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80061c2:	18ee      	addge	r6, r5, r3
 80061c4:	1b5c      	sublt	r4, r3, r5
 80061c6:	9b05      	ldr	r3, [sp, #20]
 80061c8:	bfa8      	it	ge
 80061ca:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80061cc:	eba5 0503 	sub.w	r5, r5, r3
 80061d0:	4415      	add	r5, r2
 80061d2:	4b64      	ldr	r3, [pc, #400]	; (8006364 <_strtod_l+0x854>)
 80061d4:	f105 35ff 	add.w	r5, r5, #4294967295
 80061d8:	bfb8      	it	lt
 80061da:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80061dc:	429d      	cmp	r5, r3
 80061de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80061e2:	f280 80af 	bge.w	8006344 <_strtod_l+0x834>
 80061e6:	1b5b      	subs	r3, r3, r5
 80061e8:	2b1f      	cmp	r3, #31
 80061ea:	eba2 0203 	sub.w	r2, r2, r3
 80061ee:	f04f 0701 	mov.w	r7, #1
 80061f2:	f300 809c 	bgt.w	800632e <_strtod_l+0x81e>
 80061f6:	2500      	movs	r5, #0
 80061f8:	fa07 f303 	lsl.w	r3, r7, r3
 80061fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80061fe:	18b7      	adds	r7, r6, r2
 8006200:	9b05      	ldr	r3, [sp, #20]
 8006202:	42be      	cmp	r6, r7
 8006204:	4414      	add	r4, r2
 8006206:	441c      	add	r4, r3
 8006208:	4633      	mov	r3, r6
 800620a:	bfa8      	it	ge
 800620c:	463b      	movge	r3, r7
 800620e:	42a3      	cmp	r3, r4
 8006210:	bfa8      	it	ge
 8006212:	4623      	movge	r3, r4
 8006214:	2b00      	cmp	r3, #0
 8006216:	bfc2      	ittt	gt
 8006218:	1aff      	subgt	r7, r7, r3
 800621a:	1ae4      	subgt	r4, r4, r3
 800621c:	1af6      	subgt	r6, r6, r3
 800621e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006220:	b1bb      	cbz	r3, 8006252 <_strtod_l+0x742>
 8006222:	461a      	mov	r2, r3
 8006224:	9904      	ldr	r1, [sp, #16]
 8006226:	4658      	mov	r0, fp
 8006228:	f002 f910 	bl	800844c <__pow5mult>
 800622c:	9004      	str	r0, [sp, #16]
 800622e:	2800      	cmp	r0, #0
 8006230:	f43f ae90 	beq.w	8005f54 <_strtod_l+0x444>
 8006234:	4601      	mov	r1, r0
 8006236:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006238:	4658      	mov	r0, fp
 800623a:	f002 f871 	bl	8008320 <__multiply>
 800623e:	9009      	str	r0, [sp, #36]	; 0x24
 8006240:	2800      	cmp	r0, #0
 8006242:	f43f ae87 	beq.w	8005f54 <_strtod_l+0x444>
 8006246:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006248:	4658      	mov	r0, fp
 800624a:	f001 ff82 	bl	8008152 <_Bfree>
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	931c      	str	r3, [sp, #112]	; 0x70
 8006252:	2f00      	cmp	r7, #0
 8006254:	dc7a      	bgt.n	800634c <_strtod_l+0x83c>
 8006256:	9b07      	ldr	r3, [sp, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd08      	ble.n	800626e <_strtod_l+0x75e>
 800625c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800625e:	9906      	ldr	r1, [sp, #24]
 8006260:	4658      	mov	r0, fp
 8006262:	f002 f8f3 	bl	800844c <__pow5mult>
 8006266:	9006      	str	r0, [sp, #24]
 8006268:	2800      	cmp	r0, #0
 800626a:	f43f ae73 	beq.w	8005f54 <_strtod_l+0x444>
 800626e:	2c00      	cmp	r4, #0
 8006270:	dd08      	ble.n	8006284 <_strtod_l+0x774>
 8006272:	4622      	mov	r2, r4
 8006274:	9906      	ldr	r1, [sp, #24]
 8006276:	4658      	mov	r0, fp
 8006278:	f002 f936 	bl	80084e8 <__lshift>
 800627c:	9006      	str	r0, [sp, #24]
 800627e:	2800      	cmp	r0, #0
 8006280:	f43f ae68 	beq.w	8005f54 <_strtod_l+0x444>
 8006284:	2e00      	cmp	r6, #0
 8006286:	dd08      	ble.n	800629a <_strtod_l+0x78a>
 8006288:	4632      	mov	r2, r6
 800628a:	9904      	ldr	r1, [sp, #16]
 800628c:	4658      	mov	r0, fp
 800628e:	f002 f92b 	bl	80084e8 <__lshift>
 8006292:	9004      	str	r0, [sp, #16]
 8006294:	2800      	cmp	r0, #0
 8006296:	f43f ae5d 	beq.w	8005f54 <_strtod_l+0x444>
 800629a:	9a06      	ldr	r2, [sp, #24]
 800629c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800629e:	4658      	mov	r0, fp
 80062a0:	f002 f990 	bl	80085c4 <__mdiff>
 80062a4:	4680      	mov	r8, r0
 80062a6:	2800      	cmp	r0, #0
 80062a8:	f43f ae54 	beq.w	8005f54 <_strtod_l+0x444>
 80062ac:	2400      	movs	r4, #0
 80062ae:	68c3      	ldr	r3, [r0, #12]
 80062b0:	9904      	ldr	r1, [sp, #16]
 80062b2:	60c4      	str	r4, [r0, #12]
 80062b4:	930c      	str	r3, [sp, #48]	; 0x30
 80062b6:	f002 f96b 	bl	8008590 <__mcmp>
 80062ba:	42a0      	cmp	r0, r4
 80062bc:	da54      	bge.n	8006368 <_strtod_l+0x858>
 80062be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062c0:	b9f3      	cbnz	r3, 8006300 <_strtod_l+0x7f0>
 80062c2:	f1b9 0f00 	cmp.w	r9, #0
 80062c6:	d11b      	bne.n	8006300 <_strtod_l+0x7f0>
 80062c8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80062cc:	b9c3      	cbnz	r3, 8006300 <_strtod_l+0x7f0>
 80062ce:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80062d2:	0d1b      	lsrs	r3, r3, #20
 80062d4:	051b      	lsls	r3, r3, #20
 80062d6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80062da:	d911      	bls.n	8006300 <_strtod_l+0x7f0>
 80062dc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80062e0:	b91b      	cbnz	r3, 80062ea <_strtod_l+0x7da>
 80062e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	dd0a      	ble.n	8006300 <_strtod_l+0x7f0>
 80062ea:	4641      	mov	r1, r8
 80062ec:	2201      	movs	r2, #1
 80062ee:	4658      	mov	r0, fp
 80062f0:	f002 f8fa 	bl	80084e8 <__lshift>
 80062f4:	9904      	ldr	r1, [sp, #16]
 80062f6:	4680      	mov	r8, r0
 80062f8:	f002 f94a 	bl	8008590 <__mcmp>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	dc68      	bgt.n	80063d2 <_strtod_l+0x8c2>
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d172      	bne.n	80063ec <_strtod_l+0x8dc>
 8006306:	e630      	b.n	8005f6a <_strtod_l+0x45a>
 8006308:	f018 0f01 	tst.w	r8, #1
 800630c:	d004      	beq.n	8006318 <_strtod_l+0x808>
 800630e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006312:	f7fa f8e1 	bl	80004d8 <__aeabi_dmul>
 8006316:	2301      	movs	r3, #1
 8006318:	ea4f 0868 	mov.w	r8, r8, asr #1
 800631c:	3508      	adds	r5, #8
 800631e:	e6dc      	b.n	80060da <_strtod_l+0x5ca>
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	ea03 0909 	and.w	r9, r3, r9
 800632c:	e6f6      	b.n	800611c <_strtod_l+0x60c>
 800632e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006332:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006336:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800633a:	35e2      	adds	r5, #226	; 0xe2
 800633c:	fa07 f505 	lsl.w	r5, r7, r5
 8006340:	970f      	str	r7, [sp, #60]	; 0x3c
 8006342:	e75c      	b.n	80061fe <_strtod_l+0x6ee>
 8006344:	2301      	movs	r3, #1
 8006346:	2500      	movs	r5, #0
 8006348:	930f      	str	r3, [sp, #60]	; 0x3c
 800634a:	e758      	b.n	80061fe <_strtod_l+0x6ee>
 800634c:	463a      	mov	r2, r7
 800634e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006350:	4658      	mov	r0, fp
 8006352:	f002 f8c9 	bl	80084e8 <__lshift>
 8006356:	901c      	str	r0, [sp, #112]	; 0x70
 8006358:	2800      	cmp	r0, #0
 800635a:	f47f af7c 	bne.w	8006256 <_strtod_l+0x746>
 800635e:	e5f9      	b.n	8005f54 <_strtod_l+0x444>
 8006360:	080092b8 	.word	0x080092b8
 8006364:	fffffc02 	.word	0xfffffc02
 8006368:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800636c:	f040 8089 	bne.w	8006482 <_strtod_l+0x972>
 8006370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006372:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006376:	b342      	cbz	r2, 80063ca <_strtod_l+0x8ba>
 8006378:	4aaf      	ldr	r2, [pc, #700]	; (8006638 <_strtod_l+0xb28>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d156      	bne.n	800642c <_strtod_l+0x91c>
 800637e:	9b05      	ldr	r3, [sp, #20]
 8006380:	4648      	mov	r0, r9
 8006382:	b1eb      	cbz	r3, 80063c0 <_strtod_l+0x8b0>
 8006384:	4653      	mov	r3, sl
 8006386:	4aad      	ldr	r2, [pc, #692]	; (800663c <_strtod_l+0xb2c>)
 8006388:	f04f 31ff 	mov.w	r1, #4294967295
 800638c:	401a      	ands	r2, r3
 800638e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006392:	d818      	bhi.n	80063c6 <_strtod_l+0x8b6>
 8006394:	0d12      	lsrs	r2, r2, #20
 8006396:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800639a:	fa01 f303 	lsl.w	r3, r1, r3
 800639e:	4298      	cmp	r0, r3
 80063a0:	d144      	bne.n	800642c <_strtod_l+0x91c>
 80063a2:	4ba7      	ldr	r3, [pc, #668]	; (8006640 <_strtod_l+0xb30>)
 80063a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d102      	bne.n	80063b0 <_strtod_l+0x8a0>
 80063aa:	3001      	adds	r0, #1
 80063ac:	f43f add2 	beq.w	8005f54 <_strtod_l+0x444>
 80063b0:	4ba2      	ldr	r3, [pc, #648]	; (800663c <_strtod_l+0xb2c>)
 80063b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b4:	f04f 0900 	mov.w	r9, #0
 80063b8:	401a      	ands	r2, r3
 80063ba:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80063be:	e79f      	b.n	8006300 <_strtod_l+0x7f0>
 80063c0:	f04f 33ff 	mov.w	r3, #4294967295
 80063c4:	e7eb      	b.n	800639e <_strtod_l+0x88e>
 80063c6:	460b      	mov	r3, r1
 80063c8:	e7e9      	b.n	800639e <_strtod_l+0x88e>
 80063ca:	bb7b      	cbnz	r3, 800642c <_strtod_l+0x91c>
 80063cc:	f1b9 0f00 	cmp.w	r9, #0
 80063d0:	d12c      	bne.n	800642c <_strtod_l+0x91c>
 80063d2:	9905      	ldr	r1, [sp, #20]
 80063d4:	4653      	mov	r3, sl
 80063d6:	4a99      	ldr	r2, [pc, #612]	; (800663c <_strtod_l+0xb2c>)
 80063d8:	b1f1      	cbz	r1, 8006418 <_strtod_l+0x908>
 80063da:	ea02 010a 	and.w	r1, r2, sl
 80063de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80063e2:	dc19      	bgt.n	8006418 <_strtod_l+0x908>
 80063e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80063e8:	f77f ae51 	ble.w	800608e <_strtod_l+0x57e>
 80063ec:	2300      	movs	r3, #0
 80063ee:	4a95      	ldr	r2, [pc, #596]	; (8006644 <_strtod_l+0xb34>)
 80063f0:	4648      	mov	r0, r9
 80063f2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80063f6:	4651      	mov	r1, sl
 80063f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80063fc:	f7fa f86c 	bl	80004d8 <__aeabi_dmul>
 8006400:	4681      	mov	r9, r0
 8006402:	468a      	mov	sl, r1
 8006404:	2900      	cmp	r1, #0
 8006406:	f47f adb0 	bne.w	8005f6a <_strtod_l+0x45a>
 800640a:	2800      	cmp	r0, #0
 800640c:	f47f adad 	bne.w	8005f6a <_strtod_l+0x45a>
 8006410:	2322      	movs	r3, #34	; 0x22
 8006412:	f8cb 3000 	str.w	r3, [fp]
 8006416:	e5a8      	b.n	8005f6a <_strtod_l+0x45a>
 8006418:	4013      	ands	r3, r2
 800641a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800641e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8006422:	f04f 39ff 	mov.w	r9, #4294967295
 8006426:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800642a:	e769      	b.n	8006300 <_strtod_l+0x7f0>
 800642c:	b19d      	cbz	r5, 8006456 <_strtod_l+0x946>
 800642e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006430:	421d      	tst	r5, r3
 8006432:	f43f af65 	beq.w	8006300 <_strtod_l+0x7f0>
 8006436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006438:	9a05      	ldr	r2, [sp, #20]
 800643a:	4648      	mov	r0, r9
 800643c:	4651      	mov	r1, sl
 800643e:	b173      	cbz	r3, 800645e <_strtod_l+0x94e>
 8006440:	f7ff fb44 	bl	8005acc <sulp>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800644c:	f7f9 fe8e 	bl	800016c <__adddf3>
 8006450:	4681      	mov	r9, r0
 8006452:	468a      	mov	sl, r1
 8006454:	e754      	b.n	8006300 <_strtod_l+0x7f0>
 8006456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006458:	ea13 0f09 	tst.w	r3, r9
 800645c:	e7e9      	b.n	8006432 <_strtod_l+0x922>
 800645e:	f7ff fb35 	bl	8005acc <sulp>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800646a:	f7f9 fe7d 	bl	8000168 <__aeabi_dsub>
 800646e:	2200      	movs	r2, #0
 8006470:	2300      	movs	r3, #0
 8006472:	4681      	mov	r9, r0
 8006474:	468a      	mov	sl, r1
 8006476:	f7fa fa97 	bl	80009a8 <__aeabi_dcmpeq>
 800647a:	2800      	cmp	r0, #0
 800647c:	f47f ae07 	bne.w	800608e <_strtod_l+0x57e>
 8006480:	e73e      	b.n	8006300 <_strtod_l+0x7f0>
 8006482:	9904      	ldr	r1, [sp, #16]
 8006484:	4640      	mov	r0, r8
 8006486:	f002 f9c0 	bl	800880a <__ratio>
 800648a:	2200      	movs	r2, #0
 800648c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006490:	4606      	mov	r6, r0
 8006492:	460f      	mov	r7, r1
 8006494:	f7fa fa9c 	bl	80009d0 <__aeabi_dcmple>
 8006498:	2800      	cmp	r0, #0
 800649a:	d075      	beq.n	8006588 <_strtod_l+0xa78>
 800649c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d047      	beq.n	8006532 <_strtod_l+0xa22>
 80064a2:	2600      	movs	r6, #0
 80064a4:	4f68      	ldr	r7, [pc, #416]	; (8006648 <_strtod_l+0xb38>)
 80064a6:	4d68      	ldr	r5, [pc, #416]	; (8006648 <_strtod_l+0xb38>)
 80064a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ae:	0d1b      	lsrs	r3, r3, #20
 80064b0:	051b      	lsls	r3, r3, #20
 80064b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80064b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064b6:	4b65      	ldr	r3, [pc, #404]	; (800664c <_strtod_l+0xb3c>)
 80064b8:	429a      	cmp	r2, r3
 80064ba:	f040 80cf 	bne.w	800665c <_strtod_l+0xb4c>
 80064be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064c2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80064c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c8:	4648      	mov	r0, r9
 80064ca:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80064ce:	4651      	mov	r1, sl
 80064d0:	f002 f8d6 	bl	8008680 <__ulp>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	f7f9 fffc 	bl	80004d8 <__aeabi_dmul>
 80064e0:	464a      	mov	r2, r9
 80064e2:	4653      	mov	r3, sl
 80064e4:	f7f9 fe42 	bl	800016c <__adddf3>
 80064e8:	460b      	mov	r3, r1
 80064ea:	4954      	ldr	r1, [pc, #336]	; (800663c <_strtod_l+0xb2c>)
 80064ec:	4a58      	ldr	r2, [pc, #352]	; (8006650 <_strtod_l+0xb40>)
 80064ee:	4019      	ands	r1, r3
 80064f0:	4291      	cmp	r1, r2
 80064f2:	4681      	mov	r9, r0
 80064f4:	d95e      	bls.n	80065b4 <_strtod_l+0xaa4>
 80064f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d103      	bne.n	8006508 <_strtod_l+0x9f8>
 8006500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006502:	3301      	adds	r3, #1
 8006504:	f43f ad26 	beq.w	8005f54 <_strtod_l+0x444>
 8006508:	f04f 39ff 	mov.w	r9, #4294967295
 800650c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006640 <_strtod_l+0xb30>
 8006510:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006512:	4658      	mov	r0, fp
 8006514:	f001 fe1d 	bl	8008152 <_Bfree>
 8006518:	9906      	ldr	r1, [sp, #24]
 800651a:	4658      	mov	r0, fp
 800651c:	f001 fe19 	bl	8008152 <_Bfree>
 8006520:	9904      	ldr	r1, [sp, #16]
 8006522:	4658      	mov	r0, fp
 8006524:	f001 fe15 	bl	8008152 <_Bfree>
 8006528:	4641      	mov	r1, r8
 800652a:	4658      	mov	r0, fp
 800652c:	f001 fe11 	bl	8008152 <_Bfree>
 8006530:	e617      	b.n	8006162 <_strtod_l+0x652>
 8006532:	f1b9 0f00 	cmp.w	r9, #0
 8006536:	d119      	bne.n	800656c <_strtod_l+0xa5c>
 8006538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800653e:	b9e3      	cbnz	r3, 800657a <_strtod_l+0xa6a>
 8006540:	2200      	movs	r2, #0
 8006542:	4b41      	ldr	r3, [pc, #260]	; (8006648 <_strtod_l+0xb38>)
 8006544:	4630      	mov	r0, r6
 8006546:	4639      	mov	r1, r7
 8006548:	f7fa fa38 	bl	80009bc <__aeabi_dcmplt>
 800654c:	b9c8      	cbnz	r0, 8006582 <_strtod_l+0xa72>
 800654e:	2200      	movs	r2, #0
 8006550:	4b40      	ldr	r3, [pc, #256]	; (8006654 <_strtod_l+0xb44>)
 8006552:	4630      	mov	r0, r6
 8006554:	4639      	mov	r1, r7
 8006556:	f7f9 ffbf 	bl	80004d8 <__aeabi_dmul>
 800655a:	4604      	mov	r4, r0
 800655c:	460d      	mov	r5, r1
 800655e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006562:	9418      	str	r4, [sp, #96]	; 0x60
 8006564:	9319      	str	r3, [sp, #100]	; 0x64
 8006566:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800656a:	e79d      	b.n	80064a8 <_strtod_l+0x998>
 800656c:	f1b9 0f01 	cmp.w	r9, #1
 8006570:	d103      	bne.n	800657a <_strtod_l+0xa6a>
 8006572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	f43f ad8a 	beq.w	800608e <_strtod_l+0x57e>
 800657a:	2600      	movs	r6, #0
 800657c:	4f36      	ldr	r7, [pc, #216]	; (8006658 <_strtod_l+0xb48>)
 800657e:	2400      	movs	r4, #0
 8006580:	e791      	b.n	80064a6 <_strtod_l+0x996>
 8006582:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006584:	4d33      	ldr	r5, [pc, #204]	; (8006654 <_strtod_l+0xb44>)
 8006586:	e7ea      	b.n	800655e <_strtod_l+0xa4e>
 8006588:	4b32      	ldr	r3, [pc, #200]	; (8006654 <_strtod_l+0xb44>)
 800658a:	2200      	movs	r2, #0
 800658c:	4630      	mov	r0, r6
 800658e:	4639      	mov	r1, r7
 8006590:	f7f9 ffa2 	bl	80004d8 <__aeabi_dmul>
 8006594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
 800659a:	b933      	cbnz	r3, 80065aa <_strtod_l+0xa9a>
 800659c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065a0:	9010      	str	r0, [sp, #64]	; 0x40
 80065a2:	9311      	str	r3, [sp, #68]	; 0x44
 80065a4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80065a8:	e77e      	b.n	80064a8 <_strtod_l+0x998>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80065b2:	e7f7      	b.n	80065a4 <_strtod_l+0xa94>
 80065b4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80065b8:	9b05      	ldr	r3, [sp, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1a8      	bne.n	8006510 <_strtod_l+0xa00>
 80065be:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80065c2:	0d1b      	lsrs	r3, r3, #20
 80065c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065c6:	051b      	lsls	r3, r3, #20
 80065c8:	429a      	cmp	r2, r3
 80065ca:	4656      	mov	r6, sl
 80065cc:	d1a0      	bne.n	8006510 <_strtod_l+0xa00>
 80065ce:	4629      	mov	r1, r5
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7fa fa31 	bl	8000a38 <__aeabi_d2iz>
 80065d6:	f7f9 ff15 	bl	8000404 <__aeabi_i2d>
 80065da:	460b      	mov	r3, r1
 80065dc:	4602      	mov	r2, r0
 80065de:	4629      	mov	r1, r5
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7f9 fdc1 	bl	8000168 <__aeabi_dsub>
 80065e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065e8:	4604      	mov	r4, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	b933      	cbnz	r3, 80065fc <_strtod_l+0xaec>
 80065ee:	f1b9 0f00 	cmp.w	r9, #0
 80065f2:	d103      	bne.n	80065fc <_strtod_l+0xaec>
 80065f4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	d06a      	beq.n	80066d2 <_strtod_l+0xbc2>
 80065fc:	a30a      	add	r3, pc, #40	; (adr r3, 8006628 <_strtod_l+0xb18>)
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	4620      	mov	r0, r4
 8006604:	4629      	mov	r1, r5
 8006606:	f7fa f9d9 	bl	80009bc <__aeabi_dcmplt>
 800660a:	2800      	cmp	r0, #0
 800660c:	f47f acad 	bne.w	8005f6a <_strtod_l+0x45a>
 8006610:	a307      	add	r3, pc, #28	; (adr r3, 8006630 <_strtod_l+0xb20>)
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	4620      	mov	r0, r4
 8006618:	4629      	mov	r1, r5
 800661a:	f7fa f9ed 	bl	80009f8 <__aeabi_dcmpgt>
 800661e:	2800      	cmp	r0, #0
 8006620:	f43f af76 	beq.w	8006510 <_strtod_l+0xa00>
 8006624:	e4a1      	b.n	8005f6a <_strtod_l+0x45a>
 8006626:	bf00      	nop
 8006628:	94a03595 	.word	0x94a03595
 800662c:	3fdfffff 	.word	0x3fdfffff
 8006630:	35afe535 	.word	0x35afe535
 8006634:	3fe00000 	.word	0x3fe00000
 8006638:	000fffff 	.word	0x000fffff
 800663c:	7ff00000 	.word	0x7ff00000
 8006640:	7fefffff 	.word	0x7fefffff
 8006644:	39500000 	.word	0x39500000
 8006648:	3ff00000 	.word	0x3ff00000
 800664c:	7fe00000 	.word	0x7fe00000
 8006650:	7c9fffff 	.word	0x7c9fffff
 8006654:	3fe00000 	.word	0x3fe00000
 8006658:	bff00000 	.word	0xbff00000
 800665c:	9b05      	ldr	r3, [sp, #20]
 800665e:	b313      	cbz	r3, 80066a6 <_strtod_l+0xb96>
 8006660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006662:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006666:	d81e      	bhi.n	80066a6 <_strtod_l+0xb96>
 8006668:	a325      	add	r3, pc, #148	; (adr r3, 8006700 <_strtod_l+0xbf0>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7fa f9ad 	bl	80009d0 <__aeabi_dcmple>
 8006676:	b190      	cbz	r0, 800669e <_strtod_l+0xb8e>
 8006678:	4629      	mov	r1, r5
 800667a:	4620      	mov	r0, r4
 800667c:	f7fa fa04 	bl	8000a88 <__aeabi_d2uiz>
 8006680:	2800      	cmp	r0, #0
 8006682:	bf08      	it	eq
 8006684:	2001      	moveq	r0, #1
 8006686:	f7f9 fead 	bl	80003e4 <__aeabi_ui2d>
 800668a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800668c:	4604      	mov	r4, r0
 800668e:	460d      	mov	r5, r1
 8006690:	b9d3      	cbnz	r3, 80066c8 <_strtod_l+0xbb8>
 8006692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006696:	9012      	str	r0, [sp, #72]	; 0x48
 8006698:	9313      	str	r3, [sp, #76]	; 0x4c
 800669a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800669e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066a0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80066a4:	1a9f      	subs	r7, r3, r2
 80066a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066aa:	f001 ffe9 	bl	8008680 <__ulp>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	f7f9 ff0f 	bl	80004d8 <__aeabi_dmul>
 80066ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066be:	f7f9 fd55 	bl	800016c <__adddf3>
 80066c2:	4681      	mov	r9, r0
 80066c4:	468a      	mov	sl, r1
 80066c6:	e777      	b.n	80065b8 <_strtod_l+0xaa8>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80066d0:	e7e3      	b.n	800669a <_strtod_l+0xb8a>
 80066d2:	a30d      	add	r3, pc, #52	; (adr r3, 8006708 <_strtod_l+0xbf8>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7fa f970 	bl	80009bc <__aeabi_dcmplt>
 80066dc:	e79f      	b.n	800661e <_strtod_l+0xb0e>
 80066de:	2300      	movs	r3, #0
 80066e0:	930d      	str	r3, [sp, #52]	; 0x34
 80066e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	f7ff ba55 	b.w	8005b96 <_strtod_l+0x86>
 80066ec:	2b65      	cmp	r3, #101	; 0x65
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f43f ab42 	beq.w	8005d7a <_strtod_l+0x26a>
 80066f6:	2101      	movs	r1, #1
 80066f8:	4614      	mov	r4, r2
 80066fa:	9105      	str	r1, [sp, #20]
 80066fc:	f7ff babf 	b.w	8005c7e <_strtod_l+0x16e>
 8006700:	ffc00000 	.word	0xffc00000
 8006704:	41dfffff 	.word	0x41dfffff
 8006708:	94a03595 	.word	0x94a03595
 800670c:	3fcfffff 	.word	0x3fcfffff

08006710 <_strtod_r>:
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <_strtod_r+0x18>)
 8006712:	b410      	push	{r4}
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4c05      	ldr	r4, [pc, #20]	; (800672c <_strtod_r+0x1c>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf08      	it	eq
 800671e:	4623      	moveq	r3, r4
 8006720:	bc10      	pop	{r4}
 8006722:	f7ff b9f5 	b.w	8005b10 <_strtod_l>
 8006726:	bf00      	nop
 8006728:	2000000c 	.word	0x2000000c
 800672c:	20000070 	.word	0x20000070

08006730 <_strtol_l.isra.0>:
 8006730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	4680      	mov	r8, r0
 8006736:	4689      	mov	r9, r1
 8006738:	4692      	mov	sl, r2
 800673a:	461e      	mov	r6, r3
 800673c:	460f      	mov	r7, r1
 800673e:	463d      	mov	r5, r7
 8006740:	9808      	ldr	r0, [sp, #32]
 8006742:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006746:	f001 fc25 	bl	8007f94 <__locale_ctype_ptr_l>
 800674a:	4420      	add	r0, r4
 800674c:	7843      	ldrb	r3, [r0, #1]
 800674e:	f013 0308 	ands.w	r3, r3, #8
 8006752:	d132      	bne.n	80067ba <_strtol_l.isra.0+0x8a>
 8006754:	2c2d      	cmp	r4, #45	; 0x2d
 8006756:	d132      	bne.n	80067be <_strtol_l.isra.0+0x8e>
 8006758:	2201      	movs	r2, #1
 800675a:	787c      	ldrb	r4, [r7, #1]
 800675c:	1cbd      	adds	r5, r7, #2
 800675e:	2e00      	cmp	r6, #0
 8006760:	d05d      	beq.n	800681e <_strtol_l.isra.0+0xee>
 8006762:	2e10      	cmp	r6, #16
 8006764:	d109      	bne.n	800677a <_strtol_l.isra.0+0x4a>
 8006766:	2c30      	cmp	r4, #48	; 0x30
 8006768:	d107      	bne.n	800677a <_strtol_l.isra.0+0x4a>
 800676a:	782b      	ldrb	r3, [r5, #0]
 800676c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006770:	2b58      	cmp	r3, #88	; 0x58
 8006772:	d14f      	bne.n	8006814 <_strtol_l.isra.0+0xe4>
 8006774:	2610      	movs	r6, #16
 8006776:	786c      	ldrb	r4, [r5, #1]
 8006778:	3502      	adds	r5, #2
 800677a:	2a00      	cmp	r2, #0
 800677c:	bf14      	ite	ne
 800677e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006782:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006786:	2700      	movs	r7, #0
 8006788:	fbb1 fcf6 	udiv	ip, r1, r6
 800678c:	4638      	mov	r0, r7
 800678e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006792:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006796:	2b09      	cmp	r3, #9
 8006798:	d817      	bhi.n	80067ca <_strtol_l.isra.0+0x9a>
 800679a:	461c      	mov	r4, r3
 800679c:	42a6      	cmp	r6, r4
 800679e:	dd23      	ble.n	80067e8 <_strtol_l.isra.0+0xb8>
 80067a0:	1c7b      	adds	r3, r7, #1
 80067a2:	d007      	beq.n	80067b4 <_strtol_l.isra.0+0x84>
 80067a4:	4584      	cmp	ip, r0
 80067a6:	d31c      	bcc.n	80067e2 <_strtol_l.isra.0+0xb2>
 80067a8:	d101      	bne.n	80067ae <_strtol_l.isra.0+0x7e>
 80067aa:	45a6      	cmp	lr, r4
 80067ac:	db19      	blt.n	80067e2 <_strtol_l.isra.0+0xb2>
 80067ae:	2701      	movs	r7, #1
 80067b0:	fb00 4006 	mla	r0, r0, r6, r4
 80067b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067b8:	e7eb      	b.n	8006792 <_strtol_l.isra.0+0x62>
 80067ba:	462f      	mov	r7, r5
 80067bc:	e7bf      	b.n	800673e <_strtol_l.isra.0+0xe>
 80067be:	2c2b      	cmp	r4, #43	; 0x2b
 80067c0:	bf04      	itt	eq
 80067c2:	1cbd      	addeq	r5, r7, #2
 80067c4:	787c      	ldrbeq	r4, [r7, #1]
 80067c6:	461a      	mov	r2, r3
 80067c8:	e7c9      	b.n	800675e <_strtol_l.isra.0+0x2e>
 80067ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80067ce:	2b19      	cmp	r3, #25
 80067d0:	d801      	bhi.n	80067d6 <_strtol_l.isra.0+0xa6>
 80067d2:	3c37      	subs	r4, #55	; 0x37
 80067d4:	e7e2      	b.n	800679c <_strtol_l.isra.0+0x6c>
 80067d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80067da:	2b19      	cmp	r3, #25
 80067dc:	d804      	bhi.n	80067e8 <_strtol_l.isra.0+0xb8>
 80067de:	3c57      	subs	r4, #87	; 0x57
 80067e0:	e7dc      	b.n	800679c <_strtol_l.isra.0+0x6c>
 80067e2:	f04f 37ff 	mov.w	r7, #4294967295
 80067e6:	e7e5      	b.n	80067b4 <_strtol_l.isra.0+0x84>
 80067e8:	1c7b      	adds	r3, r7, #1
 80067ea:	d108      	bne.n	80067fe <_strtol_l.isra.0+0xce>
 80067ec:	2322      	movs	r3, #34	; 0x22
 80067ee:	4608      	mov	r0, r1
 80067f0:	f8c8 3000 	str.w	r3, [r8]
 80067f4:	f1ba 0f00 	cmp.w	sl, #0
 80067f8:	d107      	bne.n	800680a <_strtol_l.isra.0+0xda>
 80067fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fe:	b102      	cbz	r2, 8006802 <_strtol_l.isra.0+0xd2>
 8006800:	4240      	negs	r0, r0
 8006802:	f1ba 0f00 	cmp.w	sl, #0
 8006806:	d0f8      	beq.n	80067fa <_strtol_l.isra.0+0xca>
 8006808:	b10f      	cbz	r7, 800680e <_strtol_l.isra.0+0xde>
 800680a:	f105 39ff 	add.w	r9, r5, #4294967295
 800680e:	f8ca 9000 	str.w	r9, [sl]
 8006812:	e7f2      	b.n	80067fa <_strtol_l.isra.0+0xca>
 8006814:	2430      	movs	r4, #48	; 0x30
 8006816:	2e00      	cmp	r6, #0
 8006818:	d1af      	bne.n	800677a <_strtol_l.isra.0+0x4a>
 800681a:	2608      	movs	r6, #8
 800681c:	e7ad      	b.n	800677a <_strtol_l.isra.0+0x4a>
 800681e:	2c30      	cmp	r4, #48	; 0x30
 8006820:	d0a3      	beq.n	800676a <_strtol_l.isra.0+0x3a>
 8006822:	260a      	movs	r6, #10
 8006824:	e7a9      	b.n	800677a <_strtol_l.isra.0+0x4a>
	...

08006828 <_strtol_r>:
 8006828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800682a:	4c06      	ldr	r4, [pc, #24]	; (8006844 <_strtol_r+0x1c>)
 800682c:	4d06      	ldr	r5, [pc, #24]	; (8006848 <_strtol_r+0x20>)
 800682e:	6824      	ldr	r4, [r4, #0]
 8006830:	6a24      	ldr	r4, [r4, #32]
 8006832:	2c00      	cmp	r4, #0
 8006834:	bf08      	it	eq
 8006836:	462c      	moveq	r4, r5
 8006838:	9400      	str	r4, [sp, #0]
 800683a:	f7ff ff79 	bl	8006730 <_strtol_l.isra.0>
 800683e:	b003      	add	sp, #12
 8006840:	bd30      	pop	{r4, r5, pc}
 8006842:	bf00      	nop
 8006844:	2000000c 	.word	0x2000000c
 8006848:	20000070 	.word	0x20000070

0800684c <__swbuf_r>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	460e      	mov	r6, r1
 8006850:	4614      	mov	r4, r2
 8006852:	4605      	mov	r5, r0
 8006854:	b118      	cbz	r0, 800685e <__swbuf_r+0x12>
 8006856:	6983      	ldr	r3, [r0, #24]
 8006858:	b90b      	cbnz	r3, 800685e <__swbuf_r+0x12>
 800685a:	f000 ffe9 	bl	8007830 <__sinit>
 800685e:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <__swbuf_r+0x98>)
 8006860:	429c      	cmp	r4, r3
 8006862:	d12a      	bne.n	80068ba <__swbuf_r+0x6e>
 8006864:	686c      	ldr	r4, [r5, #4]
 8006866:	69a3      	ldr	r3, [r4, #24]
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	071a      	lsls	r2, r3, #28
 800686e:	d52e      	bpl.n	80068ce <__swbuf_r+0x82>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	b363      	cbz	r3, 80068ce <__swbuf_r+0x82>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	6820      	ldr	r0, [r4, #0]
 8006878:	b2f6      	uxtb	r6, r6
 800687a:	1ac0      	subs	r0, r0, r3
 800687c:	6963      	ldr	r3, [r4, #20]
 800687e:	4637      	mov	r7, r6
 8006880:	4283      	cmp	r3, r0
 8006882:	dc04      	bgt.n	800688e <__swbuf_r+0x42>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 ff68 	bl	800775c <_fflush_r>
 800688c:	bb28      	cbnz	r0, 80068da <__swbuf_r+0x8e>
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	3001      	adds	r0, #1
 8006892:	3b01      	subs	r3, #1
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	701e      	strb	r6, [r3, #0]
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	4283      	cmp	r3, r0
 80068a2:	d004      	beq.n	80068ae <__swbuf_r+0x62>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	07db      	lsls	r3, r3, #31
 80068a8:	d519      	bpl.n	80068de <__swbuf_r+0x92>
 80068aa:	2e0a      	cmp	r6, #10
 80068ac:	d117      	bne.n	80068de <__swbuf_r+0x92>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 ff53 	bl	800775c <_fflush_r>
 80068b6:	b190      	cbz	r0, 80068de <__swbuf_r+0x92>
 80068b8:	e00f      	b.n	80068da <__swbuf_r+0x8e>
 80068ba:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <__swbuf_r+0x9c>)
 80068bc:	429c      	cmp	r4, r3
 80068be:	d101      	bne.n	80068c4 <__swbuf_r+0x78>
 80068c0:	68ac      	ldr	r4, [r5, #8]
 80068c2:	e7d0      	b.n	8006866 <__swbuf_r+0x1a>
 80068c4:	4b09      	ldr	r3, [pc, #36]	; (80068ec <__swbuf_r+0xa0>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	bf08      	it	eq
 80068ca:	68ec      	ldreq	r4, [r5, #12]
 80068cc:	e7cb      	b.n	8006866 <__swbuf_r+0x1a>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	f000 f80d 	bl	80068f0 <__swsetup_r>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d0cc      	beq.n	8006874 <__swbuf_r+0x28>
 80068da:	f04f 37ff 	mov.w	r7, #4294967295
 80068de:	4638      	mov	r0, r7
 80068e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e2:	bf00      	nop
 80068e4:	08009310 	.word	0x08009310
 80068e8:	08009330 	.word	0x08009330
 80068ec:	080092f0 	.word	0x080092f0

080068f0 <__swsetup_r>:
 80068f0:	4b32      	ldr	r3, [pc, #200]	; (80069bc <__swsetup_r+0xcc>)
 80068f2:	b570      	push	{r4, r5, r6, lr}
 80068f4:	681d      	ldr	r5, [r3, #0]
 80068f6:	4606      	mov	r6, r0
 80068f8:	460c      	mov	r4, r1
 80068fa:	b125      	cbz	r5, 8006906 <__swsetup_r+0x16>
 80068fc:	69ab      	ldr	r3, [r5, #24]
 80068fe:	b913      	cbnz	r3, 8006906 <__swsetup_r+0x16>
 8006900:	4628      	mov	r0, r5
 8006902:	f000 ff95 	bl	8007830 <__sinit>
 8006906:	4b2e      	ldr	r3, [pc, #184]	; (80069c0 <__swsetup_r+0xd0>)
 8006908:	429c      	cmp	r4, r3
 800690a:	d10f      	bne.n	800692c <__swsetup_r+0x3c>
 800690c:	686c      	ldr	r4, [r5, #4]
 800690e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006912:	b29a      	uxth	r2, r3
 8006914:	0715      	lsls	r5, r2, #28
 8006916:	d42c      	bmi.n	8006972 <__swsetup_r+0x82>
 8006918:	06d0      	lsls	r0, r2, #27
 800691a:	d411      	bmi.n	8006940 <__swsetup_r+0x50>
 800691c:	2209      	movs	r2, #9
 800691e:	6032      	str	r2, [r6, #0]
 8006920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	e03e      	b.n	80069aa <__swsetup_r+0xba>
 800692c:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <__swsetup_r+0xd4>)
 800692e:	429c      	cmp	r4, r3
 8006930:	d101      	bne.n	8006936 <__swsetup_r+0x46>
 8006932:	68ac      	ldr	r4, [r5, #8]
 8006934:	e7eb      	b.n	800690e <__swsetup_r+0x1e>
 8006936:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <__swsetup_r+0xd8>)
 8006938:	429c      	cmp	r4, r3
 800693a:	bf08      	it	eq
 800693c:	68ec      	ldreq	r4, [r5, #12]
 800693e:	e7e6      	b.n	800690e <__swsetup_r+0x1e>
 8006940:	0751      	lsls	r1, r2, #29
 8006942:	d512      	bpl.n	800696a <__swsetup_r+0x7a>
 8006944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006946:	b141      	cbz	r1, 800695a <__swsetup_r+0x6a>
 8006948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800694c:	4299      	cmp	r1, r3
 800694e:	d002      	beq.n	8006956 <__swsetup_r+0x66>
 8006950:	4630      	mov	r0, r6
 8006952:	f001 ffd1 	bl	80088f8 <_free_r>
 8006956:	2300      	movs	r3, #0
 8006958:	6363      	str	r3, [r4, #52]	; 0x34
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	2300      	movs	r3, #0
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f043 0308 	orr.w	r3, r3, #8
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	b94b      	cbnz	r3, 800698a <__swsetup_r+0x9a>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800697c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006980:	d003      	beq.n	800698a <__swsetup_r+0x9a>
 8006982:	4621      	mov	r1, r4
 8006984:	4630      	mov	r0, r6
 8006986:	f001 fb3d 	bl	8008004 <__smakebuf_r>
 800698a:	89a2      	ldrh	r2, [r4, #12]
 800698c:	f012 0301 	ands.w	r3, r2, #1
 8006990:	d00c      	beq.n	80069ac <__swsetup_r+0xbc>
 8006992:	2300      	movs	r3, #0
 8006994:	60a3      	str	r3, [r4, #8]
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	425b      	negs	r3, r3
 800699a:	61a3      	str	r3, [r4, #24]
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	b953      	cbnz	r3, 80069b6 <__swsetup_r+0xc6>
 80069a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80069a8:	d1ba      	bne.n	8006920 <__swsetup_r+0x30>
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	0792      	lsls	r2, r2, #30
 80069ae:	bf58      	it	pl
 80069b0:	6963      	ldrpl	r3, [r4, #20]
 80069b2:	60a3      	str	r3, [r4, #8]
 80069b4:	e7f2      	b.n	800699c <__swsetup_r+0xac>
 80069b6:	2000      	movs	r0, #0
 80069b8:	e7f7      	b.n	80069aa <__swsetup_r+0xba>
 80069ba:	bf00      	nop
 80069bc:	2000000c 	.word	0x2000000c
 80069c0:	08009310 	.word	0x08009310
 80069c4:	08009330 	.word	0x08009330
 80069c8:	080092f0 	.word	0x080092f0

080069cc <quorem>:
 80069cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	6903      	ldr	r3, [r0, #16]
 80069d2:	690c      	ldr	r4, [r1, #16]
 80069d4:	4680      	mov	r8, r0
 80069d6:	42a3      	cmp	r3, r4
 80069d8:	f2c0 8084 	blt.w	8006ae4 <quorem+0x118>
 80069dc:	3c01      	subs	r4, #1
 80069de:	f101 0714 	add.w	r7, r1, #20
 80069e2:	f100 0614 	add.w	r6, r0, #20
 80069e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80069ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80069ee:	3501      	adds	r5, #1
 80069f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80069f4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80069f8:	eb06 030c 	add.w	r3, r6, ip
 80069fc:	eb07 090c 	add.w	r9, r7, ip
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	b39d      	cbz	r5, 8006a6c <quorem+0xa0>
 8006a04:	f04f 0a00 	mov.w	sl, #0
 8006a08:	4638      	mov	r0, r7
 8006a0a:	46b6      	mov	lr, r6
 8006a0c:	46d3      	mov	fp, sl
 8006a0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a12:	b293      	uxth	r3, r2
 8006a14:	fb05 a303 	mla	r3, r5, r3, sl
 8006a18:	0c12      	lsrs	r2, r2, #16
 8006a1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a1e:	fb05 a202 	mla	r2, r5, r2, sl
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	ebab 0303 	sub.w	r3, fp, r3
 8006a28:	f8de b000 	ldr.w	fp, [lr]
 8006a2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006a30:	fa1f fb8b 	uxth.w	fp, fp
 8006a34:	445b      	add	r3, fp
 8006a36:	fa1f fb82 	uxth.w	fp, r2
 8006a3a:	f8de 2000 	ldr.w	r2, [lr]
 8006a3e:	4581      	cmp	r9, r0
 8006a40:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a4e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006a52:	f84e 3b04 	str.w	r3, [lr], #4
 8006a56:	d2da      	bcs.n	8006a0e <quorem+0x42>
 8006a58:	f856 300c 	ldr.w	r3, [r6, ip]
 8006a5c:	b933      	cbnz	r3, 8006a6c <quorem+0xa0>
 8006a5e:	9b01      	ldr	r3, [sp, #4]
 8006a60:	3b04      	subs	r3, #4
 8006a62:	429e      	cmp	r6, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	d331      	bcc.n	8006acc <quorem+0x100>
 8006a68:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	f001 fd8f 	bl	8008590 <__mcmp>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	db26      	blt.n	8006ac4 <quorem+0xf8>
 8006a76:	4630      	mov	r0, r6
 8006a78:	f04f 0c00 	mov.w	ip, #0
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006a82:	f8d0 e000 	ldr.w	lr, [r0]
 8006a86:	b28b      	uxth	r3, r1
 8006a88:	ebac 0303 	sub.w	r3, ip, r3
 8006a8c:	fa1f f28e 	uxth.w	r2, lr
 8006a90:	4413      	add	r3, r2
 8006a92:	0c0a      	lsrs	r2, r1, #16
 8006a94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa2:	45b9      	cmp	r9, r7
 8006aa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006aa8:	f840 3b04 	str.w	r3, [r0], #4
 8006aac:	d2e7      	bcs.n	8006a7e <quorem+0xb2>
 8006aae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006ab2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006ab6:	b92a      	cbnz	r2, 8006ac4 <quorem+0xf8>
 8006ab8:	3b04      	subs	r3, #4
 8006aba:	429e      	cmp	r6, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	d30b      	bcc.n	8006ad8 <quorem+0x10c>
 8006ac0:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	b003      	add	sp, #12
 8006ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006acc:	6812      	ldr	r2, [r2, #0]
 8006ace:	3b04      	subs	r3, #4
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	d1c9      	bne.n	8006a68 <quorem+0x9c>
 8006ad4:	3c01      	subs	r4, #1
 8006ad6:	e7c4      	b.n	8006a62 <quorem+0x96>
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	3b04      	subs	r3, #4
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d1ef      	bne.n	8006ac0 <quorem+0xf4>
 8006ae0:	3c01      	subs	r4, #1
 8006ae2:	e7ea      	b.n	8006aba <quorem+0xee>
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e7ee      	b.n	8006ac6 <quorem+0xfa>

08006ae8 <_dtoa_r>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	4616      	mov	r6, r2
 8006aee:	461f      	mov	r7, r3
 8006af0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006af2:	b095      	sub	sp, #84	; 0x54
 8006af4:	4604      	mov	r4, r0
 8006af6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006afa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006afe:	b93d      	cbnz	r5, 8006b10 <_dtoa_r+0x28>
 8006b00:	2010      	movs	r0, #16
 8006b02:	f001 fabf 	bl	8008084 <malloc>
 8006b06:	6260      	str	r0, [r4, #36]	; 0x24
 8006b08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b0c:	6005      	str	r5, [r0, #0]
 8006b0e:	60c5      	str	r5, [r0, #12]
 8006b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	b151      	cbz	r1, 8006b2c <_dtoa_r+0x44>
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4093      	lsls	r3, r2
 8006b1c:	604a      	str	r2, [r1, #4]
 8006b1e:	608b      	str	r3, [r1, #8]
 8006b20:	4620      	mov	r0, r4
 8006b22:	f001 fb16 	bl	8008152 <_Bfree>
 8006b26:	2200      	movs	r2, #0
 8006b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	1e3b      	subs	r3, r7, #0
 8006b2e:	bfaf      	iteee	ge
 8006b30:	2300      	movge	r3, #0
 8006b32:	2201      	movlt	r2, #1
 8006b34:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b38:	9303      	strlt	r3, [sp, #12]
 8006b3a:	bfac      	ite	ge
 8006b3c:	f8c8 3000 	strge.w	r3, [r8]
 8006b40:	f8c8 2000 	strlt.w	r2, [r8]
 8006b44:	4bae      	ldr	r3, [pc, #696]	; (8006e00 <_dtoa_r+0x318>)
 8006b46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b4a:	ea33 0308 	bics.w	r3, r3, r8
 8006b4e:	d11b      	bne.n	8006b88 <_dtoa_r+0xa0>
 8006b50:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	b923      	cbnz	r3, 8006b66 <_dtoa_r+0x7e>
 8006b5c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f000 8545 	beq.w	80075f0 <_dtoa_r+0xb08>
 8006b66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b68:	b953      	cbnz	r3, 8006b80 <_dtoa_r+0x98>
 8006b6a:	4ba6      	ldr	r3, [pc, #664]	; (8006e04 <_dtoa_r+0x31c>)
 8006b6c:	e021      	b.n	8006bb2 <_dtoa_r+0xca>
 8006b6e:	4ba6      	ldr	r3, [pc, #664]	; (8006e08 <_dtoa_r+0x320>)
 8006b70:	9306      	str	r3, [sp, #24]
 8006b72:	3308      	adds	r3, #8
 8006b74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	9806      	ldr	r0, [sp, #24]
 8006b7a:	b015      	add	sp, #84	; 0x54
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	4ba0      	ldr	r3, [pc, #640]	; (8006e04 <_dtoa_r+0x31c>)
 8006b82:	9306      	str	r3, [sp, #24]
 8006b84:	3303      	adds	r3, #3
 8006b86:	e7f5      	b.n	8006b74 <_dtoa_r+0x8c>
 8006b88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8006b98:	4682      	mov	sl, r0
 8006b9a:	b160      	cbz	r0, 8006bb6 <_dtoa_r+0xce>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8520 	beq.w	80075ea <_dtoa_r+0xb02>
 8006baa:	4b98      	ldr	r3, [pc, #608]	; (8006e0c <_dtoa_r+0x324>)
 8006bac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	9306      	str	r3, [sp, #24]
 8006bb4:	e7e0      	b.n	8006b78 <_dtoa_r+0x90>
 8006bb6:	ab12      	add	r3, sp, #72	; 0x48
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	ab13      	add	r3, sp, #76	; 0x4c
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4632      	mov	r2, r6
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f001 fdd2 	bl	800876c <__d2b>
 8006bc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006bcc:	4683      	mov	fp, r0
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	d07d      	beq.n	8006cce <_dtoa_r+0x1e6>
 8006bd2:	46b0      	mov	r8, r6
 8006bd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bd8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006bdc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006be0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006be4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006be8:	2200      	movs	r2, #0
 8006bea:	4b89      	ldr	r3, [pc, #548]	; (8006e10 <_dtoa_r+0x328>)
 8006bec:	4640      	mov	r0, r8
 8006bee:	4649      	mov	r1, r9
 8006bf0:	f7f9 faba 	bl	8000168 <__aeabi_dsub>
 8006bf4:	a37c      	add	r3, pc, #496	; (adr r3, 8006de8 <_dtoa_r+0x300>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fc6d 	bl	80004d8 <__aeabi_dmul>
 8006bfe:	a37c      	add	r3, pc, #496	; (adr r3, 8006df0 <_dtoa_r+0x308>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 fab2 	bl	800016c <__adddf3>
 8006c08:	4606      	mov	r6, r0
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	f7f9 fbf9 	bl	8000404 <__aeabi_i2d>
 8006c12:	a379      	add	r3, pc, #484	; (adr r3, 8006df8 <_dtoa_r+0x310>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 fc5e 	bl	80004d8 <__aeabi_dmul>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4630      	mov	r0, r6
 8006c22:	4639      	mov	r1, r7
 8006c24:	f7f9 faa2 	bl	800016c <__adddf3>
 8006c28:	4606      	mov	r6, r0
 8006c2a:	460f      	mov	r7, r1
 8006c2c:	f7f9 ff04 	bl	8000a38 <__aeabi_d2iz>
 8006c30:	2200      	movs	r2, #0
 8006c32:	4682      	mov	sl, r0
 8006c34:	2300      	movs	r3, #0
 8006c36:	4630      	mov	r0, r6
 8006c38:	4639      	mov	r1, r7
 8006c3a:	f7f9 febf 	bl	80009bc <__aeabi_dcmplt>
 8006c3e:	b148      	cbz	r0, 8006c54 <_dtoa_r+0x16c>
 8006c40:	4650      	mov	r0, sl
 8006c42:	f7f9 fbdf 	bl	8000404 <__aeabi_i2d>
 8006c46:	4632      	mov	r2, r6
 8006c48:	463b      	mov	r3, r7
 8006c4a:	f7f9 fead 	bl	80009a8 <__aeabi_dcmpeq>
 8006c4e:	b908      	cbnz	r0, 8006c54 <_dtoa_r+0x16c>
 8006c50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c54:	f1ba 0f16 	cmp.w	sl, #22
 8006c58:	d85a      	bhi.n	8006d10 <_dtoa_r+0x228>
 8006c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c5e:	496d      	ldr	r1, [pc, #436]	; (8006e14 <_dtoa_r+0x32c>)
 8006c60:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c68:	f7f9 fec6 	bl	80009f8 <__aeabi_dcmpgt>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d051      	beq.n	8006d14 <_dtoa_r+0x22c>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c76:	930d      	str	r3, [sp, #52]	; 0x34
 8006c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c7a:	1b5d      	subs	r5, r3, r5
 8006c7c:	1e6b      	subs	r3, r5, #1
 8006c7e:	9307      	str	r3, [sp, #28]
 8006c80:	bf43      	ittte	mi
 8006c82:	2300      	movmi	r3, #0
 8006c84:	f1c5 0901 	rsbmi	r9, r5, #1
 8006c88:	9307      	strmi	r3, [sp, #28]
 8006c8a:	f04f 0900 	movpl.w	r9, #0
 8006c8e:	f1ba 0f00 	cmp.w	sl, #0
 8006c92:	db41      	blt.n	8006d18 <_dtoa_r+0x230>
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006c9a:	4453      	add	r3, sl
 8006c9c:	9307      	str	r3, [sp, #28]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9308      	str	r3, [sp, #32]
 8006ca2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ca4:	2b09      	cmp	r3, #9
 8006ca6:	f200 808f 	bhi.w	8006dc8 <_dtoa_r+0x2e0>
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	bfc4      	itt	gt
 8006cae:	3b04      	subgt	r3, #4
 8006cb0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006cb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cb4:	bfc8      	it	gt
 8006cb6:	2500      	movgt	r5, #0
 8006cb8:	f1a3 0302 	sub.w	r3, r3, #2
 8006cbc:	bfd8      	it	le
 8006cbe:	2501      	movle	r5, #1
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	f200 808d 	bhi.w	8006de0 <_dtoa_r+0x2f8>
 8006cc6:	e8df f003 	tbb	[pc, r3]
 8006cca:	7d7b      	.short	0x7d7b
 8006ccc:	6f2f      	.short	0x6f2f
 8006cce:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006cd2:	441d      	add	r5, r3
 8006cd4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006cd8:	2820      	cmp	r0, #32
 8006cda:	dd13      	ble.n	8006d04 <_dtoa_r+0x21c>
 8006cdc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006ce0:	9b02      	ldr	r3, [sp, #8]
 8006ce2:	fa08 f800 	lsl.w	r8, r8, r0
 8006ce6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006cea:	fa23 f000 	lsr.w	r0, r3, r0
 8006cee:	ea48 0000 	orr.w	r0, r8, r0
 8006cf2:	f7f9 fb77 	bl	80003e4 <__aeabi_ui2d>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006cfe:	3d01      	subs	r5, #1
 8006d00:	9310      	str	r3, [sp, #64]	; 0x40
 8006d02:	e771      	b.n	8006be8 <_dtoa_r+0x100>
 8006d04:	9b02      	ldr	r3, [sp, #8]
 8006d06:	f1c0 0020 	rsb	r0, r0, #32
 8006d0a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d0e:	e7f0      	b.n	8006cf2 <_dtoa_r+0x20a>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e7b0      	b.n	8006c76 <_dtoa_r+0x18e>
 8006d14:	900d      	str	r0, [sp, #52]	; 0x34
 8006d16:	e7af      	b.n	8006c78 <_dtoa_r+0x190>
 8006d18:	f1ca 0300 	rsb	r3, sl, #0
 8006d1c:	9308      	str	r3, [sp, #32]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	eba9 090a 	sub.w	r9, r9, sl
 8006d24:	930c      	str	r3, [sp, #48]	; 0x30
 8006d26:	e7bc      	b.n	8006ca2 <_dtoa_r+0x1ba>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dd74      	ble.n	8006e1c <_dtoa_r+0x334>
 8006d32:	4698      	mov	r8, r3
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	2200      	movs	r2, #0
 8006d38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d3a:	6072      	str	r2, [r6, #4]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	f102 0014 	add.w	r0, r2, #20
 8006d42:	4298      	cmp	r0, r3
 8006d44:	6871      	ldr	r1, [r6, #4]
 8006d46:	d96e      	bls.n	8006e26 <_dtoa_r+0x33e>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f001 f9ce 	bl	80080ea <_Balloc>
 8006d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d50:	6030      	str	r0, [r6, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f1b8 0f0e 	cmp.w	r8, #14
 8006d58:	9306      	str	r3, [sp, #24]
 8006d5a:	f200 80ed 	bhi.w	8006f38 <_dtoa_r+0x450>
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	f000 80ea 	beq.w	8006f38 <_dtoa_r+0x450>
 8006d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d68:	f1ba 0f00 	cmp.w	sl, #0
 8006d6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006d70:	dd77      	ble.n	8006e62 <_dtoa_r+0x37a>
 8006d72:	4a28      	ldr	r2, [pc, #160]	; (8006e14 <_dtoa_r+0x32c>)
 8006d74:	f00a 030f 	and.w	r3, sl, #15
 8006d78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006d7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d80:	06f0      	lsls	r0, r6, #27
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d8a:	d568      	bpl.n	8006e5e <_dtoa_r+0x376>
 8006d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006d90:	4b21      	ldr	r3, [pc, #132]	; (8006e18 <_dtoa_r+0x330>)
 8006d92:	2503      	movs	r5, #3
 8006d94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d98:	f7f9 fcc8 	bl	800072c <__aeabi_ddiv>
 8006d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da0:	f006 060f 	and.w	r6, r6, #15
 8006da4:	4f1c      	ldr	r7, [pc, #112]	; (8006e18 <_dtoa_r+0x330>)
 8006da6:	e04f      	b.n	8006e48 <_dtoa_r+0x360>
 8006da8:	2301      	movs	r3, #1
 8006daa:	9309      	str	r3, [sp, #36]	; 0x24
 8006dac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006dae:	4453      	add	r3, sl
 8006db0:	f103 0801 	add.w	r8, r3, #1
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	4643      	mov	r3, r8
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	bfb8      	it	lt
 8006dbc:	2301      	movlt	r3, #1
 8006dbe:	e7ba      	b.n	8006d36 <_dtoa_r+0x24e>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e7b2      	b.n	8006d2a <_dtoa_r+0x242>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e7f0      	b.n	8006daa <_dtoa_r+0x2c2>
 8006dc8:	2501      	movs	r5, #1
 8006dca:	2300      	movs	r3, #0
 8006dcc:	9509      	str	r5, [sp, #36]	; 0x24
 8006dce:	931e      	str	r3, [sp, #120]	; 0x78
 8006dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	9304      	str	r3, [sp, #16]
 8006dd8:	4698      	mov	r8, r3
 8006dda:	2312      	movs	r3, #18
 8006ddc:	921f      	str	r2, [sp, #124]	; 0x7c
 8006dde:	e7aa      	b.n	8006d36 <_dtoa_r+0x24e>
 8006de0:	2301      	movs	r3, #1
 8006de2:	9309      	str	r3, [sp, #36]	; 0x24
 8006de4:	e7f4      	b.n	8006dd0 <_dtoa_r+0x2e8>
 8006de6:	bf00      	nop
 8006de8:	636f4361 	.word	0x636f4361
 8006dec:	3fd287a7 	.word	0x3fd287a7
 8006df0:	8b60c8b3 	.word	0x8b60c8b3
 8006df4:	3fc68a28 	.word	0x3fc68a28
 8006df8:	509f79fb 	.word	0x509f79fb
 8006dfc:	3fd34413 	.word	0x3fd34413
 8006e00:	7ff00000 	.word	0x7ff00000
 8006e04:	080092e9 	.word	0x080092e9
 8006e08:	080092e0 	.word	0x080092e0
 8006e0c:	08009265 	.word	0x08009265
 8006e10:	3ff80000 	.word	0x3ff80000
 8006e14:	08009388 	.word	0x08009388
 8006e18:	08009360 	.word	0x08009360
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	4698      	mov	r8, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	e7da      	b.n	8006ddc <_dtoa_r+0x2f4>
 8006e26:	3101      	adds	r1, #1
 8006e28:	6071      	str	r1, [r6, #4]
 8006e2a:	0052      	lsls	r2, r2, #1
 8006e2c:	e787      	b.n	8006d3e <_dtoa_r+0x256>
 8006e2e:	07f1      	lsls	r1, r6, #31
 8006e30:	d508      	bpl.n	8006e44 <_dtoa_r+0x35c>
 8006e32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3a:	f7f9 fb4d 	bl	80004d8 <__aeabi_dmul>
 8006e3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e42:	3501      	adds	r5, #1
 8006e44:	1076      	asrs	r6, r6, #1
 8006e46:	3708      	adds	r7, #8
 8006e48:	2e00      	cmp	r6, #0
 8006e4a:	d1f0      	bne.n	8006e2e <_dtoa_r+0x346>
 8006e4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e54:	f7f9 fc6a 	bl	800072c <__aeabi_ddiv>
 8006e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e5c:	e01b      	b.n	8006e96 <_dtoa_r+0x3ae>
 8006e5e:	2502      	movs	r5, #2
 8006e60:	e7a0      	b.n	8006da4 <_dtoa_r+0x2bc>
 8006e62:	f000 80a4 	beq.w	8006fae <_dtoa_r+0x4c6>
 8006e66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006e6a:	f1ca 0600 	rsb	r6, sl, #0
 8006e6e:	4ba0      	ldr	r3, [pc, #640]	; (80070f0 <_dtoa_r+0x608>)
 8006e70:	f006 020f 	and.w	r2, r6, #15
 8006e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f7f9 fb2c 	bl	80004d8 <__aeabi_dmul>
 8006e80:	2502      	movs	r5, #2
 8006e82:	2300      	movs	r3, #0
 8006e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e88:	4f9a      	ldr	r7, [pc, #616]	; (80070f4 <_dtoa_r+0x60c>)
 8006e8a:	1136      	asrs	r6, r6, #4
 8006e8c:	2e00      	cmp	r6, #0
 8006e8e:	f040 8083 	bne.w	8006f98 <_dtoa_r+0x4b0>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e0      	bne.n	8006e58 <_dtoa_r+0x370>
 8006e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 808a 	beq.w	8006fb2 <_dtoa_r+0x4ca>
 8006e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ea2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4b92      	ldr	r3, [pc, #584]	; (80070f8 <_dtoa_r+0x610>)
 8006eae:	f7f9 fd85 	bl	80009bc <__aeabi_dcmplt>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d07d      	beq.n	8006fb2 <_dtoa_r+0x4ca>
 8006eb6:	f1b8 0f00 	cmp.w	r8, #0
 8006eba:	d07a      	beq.n	8006fb2 <_dtoa_r+0x4ca>
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dd36      	ble.n	8006f30 <_dtoa_r+0x448>
 8006ec2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	4b8c      	ldr	r3, [pc, #560]	; (80070fc <_dtoa_r+0x614>)
 8006eca:	f7f9 fb05 	bl	80004d8 <__aeabi_dmul>
 8006ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed2:	9e04      	ldr	r6, [sp, #16]
 8006ed4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006ed8:	3501      	adds	r5, #1
 8006eda:	4628      	mov	r0, r5
 8006edc:	f7f9 fa92 	bl	8000404 <__aeabi_i2d>
 8006ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ee4:	f7f9 faf8 	bl	80004d8 <__aeabi_dmul>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4b85      	ldr	r3, [pc, #532]	; (8007100 <_dtoa_r+0x618>)
 8006eec:	f7f9 f93e 	bl	800016c <__adddf3>
 8006ef0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006ef4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ef8:	950b      	str	r5, [sp, #44]	; 0x2c
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	d15c      	bne.n	8006fb8 <_dtoa_r+0x4d0>
 8006efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f02:	2200      	movs	r2, #0
 8006f04:	4b7f      	ldr	r3, [pc, #508]	; (8007104 <_dtoa_r+0x61c>)
 8006f06:	f7f9 f92f 	bl	8000168 <__aeabi_dsub>
 8006f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f12:	f7f9 fd71 	bl	80009f8 <__aeabi_dcmpgt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f040 8281 	bne.w	800741e <_dtoa_r+0x936>
 8006f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f22:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006f26:	f7f9 fd49 	bl	80009bc <__aeabi_dcmplt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f040 8275 	bne.w	800741a <_dtoa_r+0x932>
 8006f30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f2c0 814b 	blt.w	80071d6 <_dtoa_r+0x6ee>
 8006f40:	f1ba 0f0e 	cmp.w	sl, #14
 8006f44:	f300 8147 	bgt.w	80071d6 <_dtoa_r+0x6ee>
 8006f48:	4b69      	ldr	r3, [pc, #420]	; (80070f0 <_dtoa_r+0x608>)
 8006f4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f280 80d7 	bge.w	800710c <_dtoa_r+0x624>
 8006f5e:	f1b8 0f00 	cmp.w	r8, #0
 8006f62:	f300 80d3 	bgt.w	800710c <_dtoa_r+0x624>
 8006f66:	f040 8257 	bne.w	8007418 <_dtoa_r+0x930>
 8006f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4b64      	ldr	r3, [pc, #400]	; (8007104 <_dtoa_r+0x61c>)
 8006f72:	f7f9 fab1 	bl	80004d8 <__aeabi_dmul>
 8006f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f7a:	f7f9 fd33 	bl	80009e4 <__aeabi_dcmpge>
 8006f7e:	4646      	mov	r6, r8
 8006f80:	4647      	mov	r7, r8
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f040 822d 	bne.w	80073e2 <_dtoa_r+0x8fa>
 8006f88:	9b06      	ldr	r3, [sp, #24]
 8006f8a:	9a06      	ldr	r2, [sp, #24]
 8006f8c:	1c5d      	adds	r5, r3, #1
 8006f8e:	2331      	movs	r3, #49	; 0x31
 8006f90:	f10a 0a01 	add.w	sl, sl, #1
 8006f94:	7013      	strb	r3, [r2, #0]
 8006f96:	e228      	b.n	80073ea <_dtoa_r+0x902>
 8006f98:	07f2      	lsls	r2, r6, #31
 8006f9a:	d505      	bpl.n	8006fa8 <_dtoa_r+0x4c0>
 8006f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa0:	f7f9 fa9a 	bl	80004d8 <__aeabi_dmul>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	3501      	adds	r5, #1
 8006fa8:	1076      	asrs	r6, r6, #1
 8006faa:	3708      	adds	r7, #8
 8006fac:	e76e      	b.n	8006e8c <_dtoa_r+0x3a4>
 8006fae:	2502      	movs	r5, #2
 8006fb0:	e771      	b.n	8006e96 <_dtoa_r+0x3ae>
 8006fb2:	4657      	mov	r7, sl
 8006fb4:	4646      	mov	r6, r8
 8006fb6:	e790      	b.n	8006eda <_dtoa_r+0x3f2>
 8006fb8:	4b4d      	ldr	r3, [pc, #308]	; (80070f0 <_dtoa_r+0x608>)
 8006fba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fbe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d048      	beq.n	800705a <_dtoa_r+0x572>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	2000      	movs	r0, #0
 8006fce:	494e      	ldr	r1, [pc, #312]	; (8007108 <_dtoa_r+0x620>)
 8006fd0:	f7f9 fbac 	bl	800072c <__aeabi_ddiv>
 8006fd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fd8:	f7f9 f8c6 	bl	8000168 <__aeabi_dsub>
 8006fdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006fe0:	9d06      	ldr	r5, [sp, #24]
 8006fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe6:	f7f9 fd27 	bl	8000a38 <__aeabi_d2iz>
 8006fea:	9011      	str	r0, [sp, #68]	; 0x44
 8006fec:	f7f9 fa0a 	bl	8000404 <__aeabi_i2d>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff8:	f7f9 f8b6 	bl	8000168 <__aeabi_dsub>
 8006ffc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007002:	3330      	adds	r3, #48	; 0x30
 8007004:	f805 3b01 	strb.w	r3, [r5], #1
 8007008:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800700c:	f7f9 fcd6 	bl	80009bc <__aeabi_dcmplt>
 8007010:	2800      	cmp	r0, #0
 8007012:	d163      	bne.n	80070dc <_dtoa_r+0x5f4>
 8007014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007018:	2000      	movs	r0, #0
 800701a:	4937      	ldr	r1, [pc, #220]	; (80070f8 <_dtoa_r+0x610>)
 800701c:	f7f9 f8a4 	bl	8000168 <__aeabi_dsub>
 8007020:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007024:	f7f9 fcca 	bl	80009bc <__aeabi_dcmplt>
 8007028:	2800      	cmp	r0, #0
 800702a:	f040 80b5 	bne.w	8007198 <_dtoa_r+0x6b0>
 800702e:	9b06      	ldr	r3, [sp, #24]
 8007030:	1aeb      	subs	r3, r5, r3
 8007032:	429e      	cmp	r6, r3
 8007034:	f77f af7c 	ble.w	8006f30 <_dtoa_r+0x448>
 8007038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800703c:	2200      	movs	r2, #0
 800703e:	4b2f      	ldr	r3, [pc, #188]	; (80070fc <_dtoa_r+0x614>)
 8007040:	f7f9 fa4a 	bl	80004d8 <__aeabi_dmul>
 8007044:	2200      	movs	r2, #0
 8007046:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800704a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704e:	4b2b      	ldr	r3, [pc, #172]	; (80070fc <_dtoa_r+0x614>)
 8007050:	f7f9 fa42 	bl	80004d8 <__aeabi_dmul>
 8007054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007058:	e7c3      	b.n	8006fe2 <_dtoa_r+0x4fa>
 800705a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800705e:	f7f9 fa3b 	bl	80004d8 <__aeabi_dmul>
 8007062:	9b06      	ldr	r3, [sp, #24]
 8007064:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007068:	199d      	adds	r5, r3, r6
 800706a:	461e      	mov	r6, r3
 800706c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007070:	f7f9 fce2 	bl	8000a38 <__aeabi_d2iz>
 8007074:	9011      	str	r0, [sp, #68]	; 0x44
 8007076:	f7f9 f9c5 	bl	8000404 <__aeabi_i2d>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007082:	f7f9 f871 	bl	8000168 <__aeabi_dsub>
 8007086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800708c:	3330      	adds	r3, #48	; 0x30
 800708e:	f806 3b01 	strb.w	r3, [r6], #1
 8007092:	42ae      	cmp	r6, r5
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	d124      	bne.n	80070e4 <_dtoa_r+0x5fc>
 800709a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800709e:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <_dtoa_r+0x620>)
 80070a0:	f7f9 f864 	bl	800016c <__adddf3>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ac:	f7f9 fca4 	bl	80009f8 <__aeabi_dcmpgt>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d171      	bne.n	8007198 <_dtoa_r+0x6b0>
 80070b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070b8:	2000      	movs	r0, #0
 80070ba:	4913      	ldr	r1, [pc, #76]	; (8007108 <_dtoa_r+0x620>)
 80070bc:	f7f9 f854 	bl	8000168 <__aeabi_dsub>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c8:	f7f9 fc78 	bl	80009bc <__aeabi_dcmplt>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	f43f af2f 	beq.w	8006f30 <_dtoa_r+0x448>
 80070d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070d6:	1e6a      	subs	r2, r5, #1
 80070d8:	2b30      	cmp	r3, #48	; 0x30
 80070da:	d001      	beq.n	80070e0 <_dtoa_r+0x5f8>
 80070dc:	46ba      	mov	sl, r7
 80070de:	e04a      	b.n	8007176 <_dtoa_r+0x68e>
 80070e0:	4615      	mov	r5, r2
 80070e2:	e7f6      	b.n	80070d2 <_dtoa_r+0x5ea>
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <_dtoa_r+0x614>)
 80070e6:	f7f9 f9f7 	bl	80004d8 <__aeabi_dmul>
 80070ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070ee:	e7bd      	b.n	800706c <_dtoa_r+0x584>
 80070f0:	08009388 	.word	0x08009388
 80070f4:	08009360 	.word	0x08009360
 80070f8:	3ff00000 	.word	0x3ff00000
 80070fc:	40240000 	.word	0x40240000
 8007100:	401c0000 	.word	0x401c0000
 8007104:	40140000 	.word	0x40140000
 8007108:	3fe00000 	.word	0x3fe00000
 800710c:	9d06      	ldr	r5, [sp, #24]
 800710e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007116:	4630      	mov	r0, r6
 8007118:	4639      	mov	r1, r7
 800711a:	f7f9 fb07 	bl	800072c <__aeabi_ddiv>
 800711e:	f7f9 fc8b 	bl	8000a38 <__aeabi_d2iz>
 8007122:	4681      	mov	r9, r0
 8007124:	f7f9 f96e 	bl	8000404 <__aeabi_i2d>
 8007128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800712c:	f7f9 f9d4 	bl	80004d8 <__aeabi_dmul>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	f7f9 f816 	bl	8000168 <__aeabi_dsub>
 800713c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007140:	f805 6b01 	strb.w	r6, [r5], #1
 8007144:	9e06      	ldr	r6, [sp, #24]
 8007146:	4602      	mov	r2, r0
 8007148:	1bae      	subs	r6, r5, r6
 800714a:	45b0      	cmp	r8, r6
 800714c:	460b      	mov	r3, r1
 800714e:	d135      	bne.n	80071bc <_dtoa_r+0x6d4>
 8007150:	f7f9 f80c 	bl	800016c <__adddf3>
 8007154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007158:	4606      	mov	r6, r0
 800715a:	460f      	mov	r7, r1
 800715c:	f7f9 fc4c 	bl	80009f8 <__aeabi_dcmpgt>
 8007160:	b9c8      	cbnz	r0, 8007196 <_dtoa_r+0x6ae>
 8007162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007166:	4630      	mov	r0, r6
 8007168:	4639      	mov	r1, r7
 800716a:	f7f9 fc1d 	bl	80009a8 <__aeabi_dcmpeq>
 800716e:	b110      	cbz	r0, 8007176 <_dtoa_r+0x68e>
 8007170:	f019 0f01 	tst.w	r9, #1
 8007174:	d10f      	bne.n	8007196 <_dtoa_r+0x6ae>
 8007176:	4659      	mov	r1, fp
 8007178:	4620      	mov	r0, r4
 800717a:	f000 ffea 	bl	8008152 <_Bfree>
 800717e:	2300      	movs	r3, #0
 8007180:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007182:	702b      	strb	r3, [r5, #0]
 8007184:	f10a 0301 	add.w	r3, sl, #1
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800718c:	2b00      	cmp	r3, #0
 800718e:	f43f acf3 	beq.w	8006b78 <_dtoa_r+0x90>
 8007192:	601d      	str	r5, [r3, #0]
 8007194:	e4f0      	b.n	8006b78 <_dtoa_r+0x90>
 8007196:	4657      	mov	r7, sl
 8007198:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800719c:	1e6b      	subs	r3, r5, #1
 800719e:	2a39      	cmp	r2, #57	; 0x39
 80071a0:	d106      	bne.n	80071b0 <_dtoa_r+0x6c8>
 80071a2:	9a06      	ldr	r2, [sp, #24]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d107      	bne.n	80071b8 <_dtoa_r+0x6d0>
 80071a8:	2330      	movs	r3, #48	; 0x30
 80071aa:	7013      	strb	r3, [r2, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	3701      	adds	r7, #1
 80071b0:	781a      	ldrb	r2, [r3, #0]
 80071b2:	3201      	adds	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	e791      	b.n	80070dc <_dtoa_r+0x5f4>
 80071b8:	461d      	mov	r5, r3
 80071ba:	e7ed      	b.n	8007198 <_dtoa_r+0x6b0>
 80071bc:	2200      	movs	r2, #0
 80071be:	4b99      	ldr	r3, [pc, #612]	; (8007424 <_dtoa_r+0x93c>)
 80071c0:	f7f9 f98a 	bl	80004d8 <__aeabi_dmul>
 80071c4:	2200      	movs	r2, #0
 80071c6:	2300      	movs	r3, #0
 80071c8:	4606      	mov	r6, r0
 80071ca:	460f      	mov	r7, r1
 80071cc:	f7f9 fbec 	bl	80009a8 <__aeabi_dcmpeq>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d09e      	beq.n	8007112 <_dtoa_r+0x62a>
 80071d4:	e7cf      	b.n	8007176 <_dtoa_r+0x68e>
 80071d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d8:	2a00      	cmp	r2, #0
 80071da:	f000 8088 	beq.w	80072ee <_dtoa_r+0x806>
 80071de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80071e0:	2a01      	cmp	r2, #1
 80071e2:	dc6d      	bgt.n	80072c0 <_dtoa_r+0x7d8>
 80071e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	d066      	beq.n	80072b8 <_dtoa_r+0x7d0>
 80071ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071ee:	464d      	mov	r5, r9
 80071f0:	9e08      	ldr	r6, [sp, #32]
 80071f2:	9a07      	ldr	r2, [sp, #28]
 80071f4:	2101      	movs	r1, #1
 80071f6:	441a      	add	r2, r3
 80071f8:	4620      	mov	r0, r4
 80071fa:	4499      	add	r9, r3
 80071fc:	9207      	str	r2, [sp, #28]
 80071fe:	f001 f886 	bl	800830e <__i2b>
 8007202:	4607      	mov	r7, r0
 8007204:	2d00      	cmp	r5, #0
 8007206:	dd0b      	ble.n	8007220 <_dtoa_r+0x738>
 8007208:	9b07      	ldr	r3, [sp, #28]
 800720a:	2b00      	cmp	r3, #0
 800720c:	dd08      	ble.n	8007220 <_dtoa_r+0x738>
 800720e:	42ab      	cmp	r3, r5
 8007210:	bfa8      	it	ge
 8007212:	462b      	movge	r3, r5
 8007214:	9a07      	ldr	r2, [sp, #28]
 8007216:	eba9 0903 	sub.w	r9, r9, r3
 800721a:	1aed      	subs	r5, r5, r3
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	9307      	str	r3, [sp, #28]
 8007220:	9b08      	ldr	r3, [sp, #32]
 8007222:	b1eb      	cbz	r3, 8007260 <_dtoa_r+0x778>
 8007224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d065      	beq.n	80072f6 <_dtoa_r+0x80e>
 800722a:	b18e      	cbz	r6, 8007250 <_dtoa_r+0x768>
 800722c:	4639      	mov	r1, r7
 800722e:	4632      	mov	r2, r6
 8007230:	4620      	mov	r0, r4
 8007232:	f001 f90b 	bl	800844c <__pow5mult>
 8007236:	465a      	mov	r2, fp
 8007238:	4601      	mov	r1, r0
 800723a:	4607      	mov	r7, r0
 800723c:	4620      	mov	r0, r4
 800723e:	f001 f86f 	bl	8008320 <__multiply>
 8007242:	4659      	mov	r1, fp
 8007244:	900a      	str	r0, [sp, #40]	; 0x28
 8007246:	4620      	mov	r0, r4
 8007248:	f000 ff83 	bl	8008152 <_Bfree>
 800724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724e:	469b      	mov	fp, r3
 8007250:	9b08      	ldr	r3, [sp, #32]
 8007252:	1b9a      	subs	r2, r3, r6
 8007254:	d004      	beq.n	8007260 <_dtoa_r+0x778>
 8007256:	4659      	mov	r1, fp
 8007258:	4620      	mov	r0, r4
 800725a:	f001 f8f7 	bl	800844c <__pow5mult>
 800725e:	4683      	mov	fp, r0
 8007260:	2101      	movs	r1, #1
 8007262:	4620      	mov	r0, r4
 8007264:	f001 f853 	bl	800830e <__i2b>
 8007268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800726a:	4606      	mov	r6, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 81c6 	beq.w	80075fe <_dtoa_r+0xb16>
 8007272:	461a      	mov	r2, r3
 8007274:	4601      	mov	r1, r0
 8007276:	4620      	mov	r0, r4
 8007278:	f001 f8e8 	bl	800844c <__pow5mult>
 800727c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800727e:	4606      	mov	r6, r0
 8007280:	2b01      	cmp	r3, #1
 8007282:	dc3e      	bgt.n	8007302 <_dtoa_r+0x81a>
 8007284:	9b02      	ldr	r3, [sp, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d137      	bne.n	80072fa <_dtoa_r+0x812>
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007290:	2b00      	cmp	r3, #0
 8007292:	d134      	bne.n	80072fe <_dtoa_r+0x816>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800729a:	0d1b      	lsrs	r3, r3, #20
 800729c:	051b      	lsls	r3, r3, #20
 800729e:	b12b      	cbz	r3, 80072ac <_dtoa_r+0x7c4>
 80072a0:	9b07      	ldr	r3, [sp, #28]
 80072a2:	f109 0901 	add.w	r9, r9, #1
 80072a6:	3301      	adds	r3, #1
 80072a8:	9307      	str	r3, [sp, #28]
 80072aa:	2301      	movs	r3, #1
 80072ac:	9308      	str	r3, [sp, #32]
 80072ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d128      	bne.n	8007306 <_dtoa_r+0x81e>
 80072b4:	2001      	movs	r0, #1
 80072b6:	e02e      	b.n	8007316 <_dtoa_r+0x82e>
 80072b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072be:	e796      	b.n	80071ee <_dtoa_r+0x706>
 80072c0:	9b08      	ldr	r3, [sp, #32]
 80072c2:	f108 36ff 	add.w	r6, r8, #4294967295
 80072c6:	42b3      	cmp	r3, r6
 80072c8:	bfb7      	itett	lt
 80072ca:	9b08      	ldrlt	r3, [sp, #32]
 80072cc:	1b9e      	subge	r6, r3, r6
 80072ce:	1af2      	sublt	r2, r6, r3
 80072d0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80072d2:	bfbf      	itttt	lt
 80072d4:	9608      	strlt	r6, [sp, #32]
 80072d6:	189b      	addlt	r3, r3, r2
 80072d8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80072da:	2600      	movlt	r6, #0
 80072dc:	f1b8 0f00 	cmp.w	r8, #0
 80072e0:	bfb9      	ittee	lt
 80072e2:	eba9 0508 	sublt.w	r5, r9, r8
 80072e6:	2300      	movlt	r3, #0
 80072e8:	464d      	movge	r5, r9
 80072ea:	4643      	movge	r3, r8
 80072ec:	e781      	b.n	80071f2 <_dtoa_r+0x70a>
 80072ee:	9e08      	ldr	r6, [sp, #32]
 80072f0:	464d      	mov	r5, r9
 80072f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072f4:	e786      	b.n	8007204 <_dtoa_r+0x71c>
 80072f6:	9a08      	ldr	r2, [sp, #32]
 80072f8:	e7ad      	b.n	8007256 <_dtoa_r+0x76e>
 80072fa:	2300      	movs	r3, #0
 80072fc:	e7d6      	b.n	80072ac <_dtoa_r+0x7c4>
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	e7d4      	b.n	80072ac <_dtoa_r+0x7c4>
 8007302:	2300      	movs	r3, #0
 8007304:	9308      	str	r3, [sp, #32]
 8007306:	6933      	ldr	r3, [r6, #16]
 8007308:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800730c:	6918      	ldr	r0, [r3, #16]
 800730e:	f000 ffb0 	bl	8008272 <__hi0bits>
 8007312:	f1c0 0020 	rsb	r0, r0, #32
 8007316:	9b07      	ldr	r3, [sp, #28]
 8007318:	4418      	add	r0, r3
 800731a:	f010 001f 	ands.w	r0, r0, #31
 800731e:	d047      	beq.n	80073b0 <_dtoa_r+0x8c8>
 8007320:	f1c0 0320 	rsb	r3, r0, #32
 8007324:	2b04      	cmp	r3, #4
 8007326:	dd3b      	ble.n	80073a0 <_dtoa_r+0x8b8>
 8007328:	9b07      	ldr	r3, [sp, #28]
 800732a:	f1c0 001c 	rsb	r0, r0, #28
 800732e:	4481      	add	r9, r0
 8007330:	4405      	add	r5, r0
 8007332:	4403      	add	r3, r0
 8007334:	9307      	str	r3, [sp, #28]
 8007336:	f1b9 0f00 	cmp.w	r9, #0
 800733a:	dd05      	ble.n	8007348 <_dtoa_r+0x860>
 800733c:	4659      	mov	r1, fp
 800733e:	464a      	mov	r2, r9
 8007340:	4620      	mov	r0, r4
 8007342:	f001 f8d1 	bl	80084e8 <__lshift>
 8007346:	4683      	mov	fp, r0
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dd05      	ble.n	800735a <_dtoa_r+0x872>
 800734e:	4631      	mov	r1, r6
 8007350:	461a      	mov	r2, r3
 8007352:	4620      	mov	r0, r4
 8007354:	f001 f8c8 	bl	80084e8 <__lshift>
 8007358:	4606      	mov	r6, r0
 800735a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800735c:	b353      	cbz	r3, 80073b4 <_dtoa_r+0x8cc>
 800735e:	4631      	mov	r1, r6
 8007360:	4658      	mov	r0, fp
 8007362:	f001 f915 	bl	8008590 <__mcmp>
 8007366:	2800      	cmp	r0, #0
 8007368:	da24      	bge.n	80073b4 <_dtoa_r+0x8cc>
 800736a:	2300      	movs	r3, #0
 800736c:	4659      	mov	r1, fp
 800736e:	220a      	movs	r2, #10
 8007370:	4620      	mov	r0, r4
 8007372:	f000 ff05 	bl	8008180 <__multadd>
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	f10a 3aff 	add.w	sl, sl, #4294967295
 800737c:	4683      	mov	fp, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 8144 	beq.w	800760c <_dtoa_r+0xb24>
 8007384:	2300      	movs	r3, #0
 8007386:	4639      	mov	r1, r7
 8007388:	220a      	movs	r2, #10
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fef8 	bl	8008180 <__multadd>
 8007390:	9b04      	ldr	r3, [sp, #16]
 8007392:	4607      	mov	r7, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc4d      	bgt.n	8007434 <_dtoa_r+0x94c>
 8007398:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800739a:	2b02      	cmp	r3, #2
 800739c:	dd4a      	ble.n	8007434 <_dtoa_r+0x94c>
 800739e:	e011      	b.n	80073c4 <_dtoa_r+0x8dc>
 80073a0:	d0c9      	beq.n	8007336 <_dtoa_r+0x84e>
 80073a2:	9a07      	ldr	r2, [sp, #28]
 80073a4:	331c      	adds	r3, #28
 80073a6:	441a      	add	r2, r3
 80073a8:	4499      	add	r9, r3
 80073aa:	441d      	add	r5, r3
 80073ac:	4613      	mov	r3, r2
 80073ae:	e7c1      	b.n	8007334 <_dtoa_r+0x84c>
 80073b0:	4603      	mov	r3, r0
 80073b2:	e7f6      	b.n	80073a2 <_dtoa_r+0x8ba>
 80073b4:	f1b8 0f00 	cmp.w	r8, #0
 80073b8:	dc36      	bgt.n	8007428 <_dtoa_r+0x940>
 80073ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073bc:	2b02      	cmp	r3, #2
 80073be:	dd33      	ble.n	8007428 <_dtoa_r+0x940>
 80073c0:	f8cd 8010 	str.w	r8, [sp, #16]
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	b963      	cbnz	r3, 80073e2 <_dtoa_r+0x8fa>
 80073c8:	4631      	mov	r1, r6
 80073ca:	2205      	movs	r2, #5
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fed7 	bl	8008180 <__multadd>
 80073d2:	4601      	mov	r1, r0
 80073d4:	4606      	mov	r6, r0
 80073d6:	4658      	mov	r0, fp
 80073d8:	f001 f8da 	bl	8008590 <__mcmp>
 80073dc:	2800      	cmp	r0, #0
 80073de:	f73f add3 	bgt.w	8006f88 <_dtoa_r+0x4a0>
 80073e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073e4:	9d06      	ldr	r5, [sp, #24]
 80073e6:	ea6f 0a03 	mvn.w	sl, r3
 80073ea:	f04f 0900 	mov.w	r9, #0
 80073ee:	4631      	mov	r1, r6
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 feae 	bl	8008152 <_Bfree>
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	f43f aebd 	beq.w	8007176 <_dtoa_r+0x68e>
 80073fc:	f1b9 0f00 	cmp.w	r9, #0
 8007400:	d005      	beq.n	800740e <_dtoa_r+0x926>
 8007402:	45b9      	cmp	r9, r7
 8007404:	d003      	beq.n	800740e <_dtoa_r+0x926>
 8007406:	4649      	mov	r1, r9
 8007408:	4620      	mov	r0, r4
 800740a:	f000 fea2 	bl	8008152 <_Bfree>
 800740e:	4639      	mov	r1, r7
 8007410:	4620      	mov	r0, r4
 8007412:	f000 fe9e 	bl	8008152 <_Bfree>
 8007416:	e6ae      	b.n	8007176 <_dtoa_r+0x68e>
 8007418:	2600      	movs	r6, #0
 800741a:	4637      	mov	r7, r6
 800741c:	e7e1      	b.n	80073e2 <_dtoa_r+0x8fa>
 800741e:	46ba      	mov	sl, r7
 8007420:	4637      	mov	r7, r6
 8007422:	e5b1      	b.n	8006f88 <_dtoa_r+0x4a0>
 8007424:	40240000 	.word	0x40240000
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	f8cd 8010 	str.w	r8, [sp, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 80f3 	beq.w	800761a <_dtoa_r+0xb32>
 8007434:	2d00      	cmp	r5, #0
 8007436:	dd05      	ble.n	8007444 <_dtoa_r+0x95c>
 8007438:	4639      	mov	r1, r7
 800743a:	462a      	mov	r2, r5
 800743c:	4620      	mov	r0, r4
 800743e:	f001 f853 	bl	80084e8 <__lshift>
 8007442:	4607      	mov	r7, r0
 8007444:	9b08      	ldr	r3, [sp, #32]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d04c      	beq.n	80074e4 <_dtoa_r+0x9fc>
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fe4c 	bl	80080ea <_Balloc>
 8007452:	4605      	mov	r5, r0
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	f107 010c 	add.w	r1, r7, #12
 800745a:	3202      	adds	r2, #2
 800745c:	0092      	lsls	r2, r2, #2
 800745e:	300c      	adds	r0, #12
 8007460:	f000 fe38 	bl	80080d4 <memcpy>
 8007464:	2201      	movs	r2, #1
 8007466:	4629      	mov	r1, r5
 8007468:	4620      	mov	r0, r4
 800746a:	f001 f83d 	bl	80084e8 <__lshift>
 800746e:	46b9      	mov	r9, r7
 8007470:	4607      	mov	r7, r0
 8007472:	9b06      	ldr	r3, [sp, #24]
 8007474:	9307      	str	r3, [sp, #28]
 8007476:	9b02      	ldr	r3, [sp, #8]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	9308      	str	r3, [sp, #32]
 800747e:	4631      	mov	r1, r6
 8007480:	4658      	mov	r0, fp
 8007482:	f7ff faa3 	bl	80069cc <quorem>
 8007486:	4649      	mov	r1, r9
 8007488:	4605      	mov	r5, r0
 800748a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800748e:	4658      	mov	r0, fp
 8007490:	f001 f87e 	bl	8008590 <__mcmp>
 8007494:	463a      	mov	r2, r7
 8007496:	9002      	str	r0, [sp, #8]
 8007498:	4631      	mov	r1, r6
 800749a:	4620      	mov	r0, r4
 800749c:	f001 f892 	bl	80085c4 <__mdiff>
 80074a0:	68c3      	ldr	r3, [r0, #12]
 80074a2:	4602      	mov	r2, r0
 80074a4:	bb03      	cbnz	r3, 80074e8 <_dtoa_r+0xa00>
 80074a6:	4601      	mov	r1, r0
 80074a8:	9009      	str	r0, [sp, #36]	; 0x24
 80074aa:	4658      	mov	r0, fp
 80074ac:	f001 f870 	bl	8008590 <__mcmp>
 80074b0:	4603      	mov	r3, r0
 80074b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074b4:	4611      	mov	r1, r2
 80074b6:	4620      	mov	r0, r4
 80074b8:	9309      	str	r3, [sp, #36]	; 0x24
 80074ba:	f000 fe4a 	bl	8008152 <_Bfree>
 80074be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c0:	b9a3      	cbnz	r3, 80074ec <_dtoa_r+0xa04>
 80074c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074c4:	b992      	cbnz	r2, 80074ec <_dtoa_r+0xa04>
 80074c6:	9a08      	ldr	r2, [sp, #32]
 80074c8:	b982      	cbnz	r2, 80074ec <_dtoa_r+0xa04>
 80074ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074ce:	d029      	beq.n	8007524 <_dtoa_r+0xa3c>
 80074d0:	9b02      	ldr	r3, [sp, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dd01      	ble.n	80074da <_dtoa_r+0x9f2>
 80074d6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80074da:	9b07      	ldr	r3, [sp, #28]
 80074dc:	1c5d      	adds	r5, r3, #1
 80074de:	f883 8000 	strb.w	r8, [r3]
 80074e2:	e784      	b.n	80073ee <_dtoa_r+0x906>
 80074e4:	4638      	mov	r0, r7
 80074e6:	e7c2      	b.n	800746e <_dtoa_r+0x986>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e7e3      	b.n	80074b4 <_dtoa_r+0x9cc>
 80074ec:	9a02      	ldr	r2, [sp, #8]
 80074ee:	2a00      	cmp	r2, #0
 80074f0:	db04      	blt.n	80074fc <_dtoa_r+0xa14>
 80074f2:	d123      	bne.n	800753c <_dtoa_r+0xa54>
 80074f4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074f6:	bb0a      	cbnz	r2, 800753c <_dtoa_r+0xa54>
 80074f8:	9a08      	ldr	r2, [sp, #32]
 80074fa:	b9fa      	cbnz	r2, 800753c <_dtoa_r+0xa54>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	ddec      	ble.n	80074da <_dtoa_r+0x9f2>
 8007500:	4659      	mov	r1, fp
 8007502:	2201      	movs	r2, #1
 8007504:	4620      	mov	r0, r4
 8007506:	f000 ffef 	bl	80084e8 <__lshift>
 800750a:	4631      	mov	r1, r6
 800750c:	4683      	mov	fp, r0
 800750e:	f001 f83f 	bl	8008590 <__mcmp>
 8007512:	2800      	cmp	r0, #0
 8007514:	dc03      	bgt.n	800751e <_dtoa_r+0xa36>
 8007516:	d1e0      	bne.n	80074da <_dtoa_r+0x9f2>
 8007518:	f018 0f01 	tst.w	r8, #1
 800751c:	d0dd      	beq.n	80074da <_dtoa_r+0x9f2>
 800751e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007522:	d1d8      	bne.n	80074d6 <_dtoa_r+0x9ee>
 8007524:	9b07      	ldr	r3, [sp, #28]
 8007526:	9a07      	ldr	r2, [sp, #28]
 8007528:	1c5d      	adds	r5, r3, #1
 800752a:	2339      	movs	r3, #57	; 0x39
 800752c:	7013      	strb	r3, [r2, #0]
 800752e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007532:	1e6a      	subs	r2, r5, #1
 8007534:	2b39      	cmp	r3, #57	; 0x39
 8007536:	d04d      	beq.n	80075d4 <_dtoa_r+0xaec>
 8007538:	3301      	adds	r3, #1
 800753a:	e052      	b.n	80075e2 <_dtoa_r+0xafa>
 800753c:	9a07      	ldr	r2, [sp, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f102 0501 	add.w	r5, r2, #1
 8007544:	dd06      	ble.n	8007554 <_dtoa_r+0xa6c>
 8007546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800754a:	d0eb      	beq.n	8007524 <_dtoa_r+0xa3c>
 800754c:	f108 0801 	add.w	r8, r8, #1
 8007550:	9b07      	ldr	r3, [sp, #28]
 8007552:	e7c4      	b.n	80074de <_dtoa_r+0x9f6>
 8007554:	9b06      	ldr	r3, [sp, #24]
 8007556:	9a04      	ldr	r2, [sp, #16]
 8007558:	1aeb      	subs	r3, r5, r3
 800755a:	4293      	cmp	r3, r2
 800755c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007560:	d021      	beq.n	80075a6 <_dtoa_r+0xabe>
 8007562:	4659      	mov	r1, fp
 8007564:	2300      	movs	r3, #0
 8007566:	220a      	movs	r2, #10
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fe09 	bl	8008180 <__multadd>
 800756e:	45b9      	cmp	r9, r7
 8007570:	4683      	mov	fp, r0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	f04f 020a 	mov.w	r2, #10
 800757a:	4649      	mov	r1, r9
 800757c:	4620      	mov	r0, r4
 800757e:	d105      	bne.n	800758c <_dtoa_r+0xaa4>
 8007580:	f000 fdfe 	bl	8008180 <__multadd>
 8007584:	4681      	mov	r9, r0
 8007586:	4607      	mov	r7, r0
 8007588:	9507      	str	r5, [sp, #28]
 800758a:	e778      	b.n	800747e <_dtoa_r+0x996>
 800758c:	f000 fdf8 	bl	8008180 <__multadd>
 8007590:	4639      	mov	r1, r7
 8007592:	4681      	mov	r9, r0
 8007594:	2300      	movs	r3, #0
 8007596:	220a      	movs	r2, #10
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fdf1 	bl	8008180 <__multadd>
 800759e:	4607      	mov	r7, r0
 80075a0:	e7f2      	b.n	8007588 <_dtoa_r+0xaa0>
 80075a2:	f04f 0900 	mov.w	r9, #0
 80075a6:	4659      	mov	r1, fp
 80075a8:	2201      	movs	r2, #1
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 ff9c 	bl	80084e8 <__lshift>
 80075b0:	4631      	mov	r1, r6
 80075b2:	4683      	mov	fp, r0
 80075b4:	f000 ffec 	bl	8008590 <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	dcb8      	bgt.n	800752e <_dtoa_r+0xa46>
 80075bc:	d102      	bne.n	80075c4 <_dtoa_r+0xadc>
 80075be:	f018 0f01 	tst.w	r8, #1
 80075c2:	d1b4      	bne.n	800752e <_dtoa_r+0xa46>
 80075c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075c8:	1e6a      	subs	r2, r5, #1
 80075ca:	2b30      	cmp	r3, #48	; 0x30
 80075cc:	f47f af0f 	bne.w	80073ee <_dtoa_r+0x906>
 80075d0:	4615      	mov	r5, r2
 80075d2:	e7f7      	b.n	80075c4 <_dtoa_r+0xadc>
 80075d4:	9b06      	ldr	r3, [sp, #24]
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d105      	bne.n	80075e6 <_dtoa_r+0xafe>
 80075da:	2331      	movs	r3, #49	; 0x31
 80075dc:	9a06      	ldr	r2, [sp, #24]
 80075de:	f10a 0a01 	add.w	sl, sl, #1
 80075e2:	7013      	strb	r3, [r2, #0]
 80075e4:	e703      	b.n	80073ee <_dtoa_r+0x906>
 80075e6:	4615      	mov	r5, r2
 80075e8:	e7a1      	b.n	800752e <_dtoa_r+0xa46>
 80075ea:	4b17      	ldr	r3, [pc, #92]	; (8007648 <_dtoa_r+0xb60>)
 80075ec:	f7ff bae1 	b.w	8006bb2 <_dtoa_r+0xca>
 80075f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f47f aabb 	bne.w	8006b6e <_dtoa_r+0x86>
 80075f8:	4b14      	ldr	r3, [pc, #80]	; (800764c <_dtoa_r+0xb64>)
 80075fa:	f7ff bada 	b.w	8006bb2 <_dtoa_r+0xca>
 80075fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007600:	2b01      	cmp	r3, #1
 8007602:	f77f ae3f 	ble.w	8007284 <_dtoa_r+0x79c>
 8007606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007608:	9308      	str	r3, [sp, #32]
 800760a:	e653      	b.n	80072b4 <_dtoa_r+0x7cc>
 800760c:	9b04      	ldr	r3, [sp, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dc03      	bgt.n	800761a <_dtoa_r+0xb32>
 8007612:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007614:	2b02      	cmp	r3, #2
 8007616:	f73f aed5 	bgt.w	80073c4 <_dtoa_r+0x8dc>
 800761a:	9d06      	ldr	r5, [sp, #24]
 800761c:	4631      	mov	r1, r6
 800761e:	4658      	mov	r0, fp
 8007620:	f7ff f9d4 	bl	80069cc <quorem>
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800762a:	f805 8b01 	strb.w	r8, [r5], #1
 800762e:	9a04      	ldr	r2, [sp, #16]
 8007630:	1aeb      	subs	r3, r5, r3
 8007632:	429a      	cmp	r2, r3
 8007634:	ddb5      	ble.n	80075a2 <_dtoa_r+0xaba>
 8007636:	4659      	mov	r1, fp
 8007638:	2300      	movs	r3, #0
 800763a:	220a      	movs	r2, #10
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fd9f 	bl	8008180 <__multadd>
 8007642:	4683      	mov	fp, r0
 8007644:	e7ea      	b.n	800761c <_dtoa_r+0xb34>
 8007646:	bf00      	nop
 8007648:	08009264 	.word	0x08009264
 800764c:	080092e0 	.word	0x080092e0

08007650 <__sflush_r>:
 8007650:	898a      	ldrh	r2, [r1, #12]
 8007652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007656:	4605      	mov	r5, r0
 8007658:	0710      	lsls	r0, r2, #28
 800765a:	460c      	mov	r4, r1
 800765c:	d458      	bmi.n	8007710 <__sflush_r+0xc0>
 800765e:	684b      	ldr	r3, [r1, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dc05      	bgt.n	8007670 <__sflush_r+0x20>
 8007664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	dc02      	bgt.n	8007670 <__sflush_r+0x20>
 800766a:	2000      	movs	r0, #0
 800766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007672:	2e00      	cmp	r6, #0
 8007674:	d0f9      	beq.n	800766a <__sflush_r+0x1a>
 8007676:	2300      	movs	r3, #0
 8007678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800767c:	682f      	ldr	r7, [r5, #0]
 800767e:	6a21      	ldr	r1, [r4, #32]
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	d032      	beq.n	80076ea <__sflush_r+0x9a>
 8007684:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	075a      	lsls	r2, r3, #29
 800768a:	d505      	bpl.n	8007698 <__sflush_r+0x48>
 800768c:	6863      	ldr	r3, [r4, #4]
 800768e:	1ac0      	subs	r0, r0, r3
 8007690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007692:	b10b      	cbz	r3, 8007698 <__sflush_r+0x48>
 8007694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007696:	1ac0      	subs	r0, r0, r3
 8007698:	2300      	movs	r3, #0
 800769a:	4602      	mov	r2, r0
 800769c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800769e:	6a21      	ldr	r1, [r4, #32]
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b0      	blx	r6
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	d106      	bne.n	80076b8 <__sflush_r+0x68>
 80076aa:	6829      	ldr	r1, [r5, #0]
 80076ac:	291d      	cmp	r1, #29
 80076ae:	d848      	bhi.n	8007742 <__sflush_r+0xf2>
 80076b0:	4a29      	ldr	r2, [pc, #164]	; (8007758 <__sflush_r+0x108>)
 80076b2:	40ca      	lsrs	r2, r1
 80076b4:	07d6      	lsls	r6, r2, #31
 80076b6:	d544      	bpl.n	8007742 <__sflush_r+0xf2>
 80076b8:	2200      	movs	r2, #0
 80076ba:	6062      	str	r2, [r4, #4]
 80076bc:	6922      	ldr	r2, [r4, #16]
 80076be:	04d9      	lsls	r1, r3, #19
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	d504      	bpl.n	80076ce <__sflush_r+0x7e>
 80076c4:	1c42      	adds	r2, r0, #1
 80076c6:	d101      	bne.n	80076cc <__sflush_r+0x7c>
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	b903      	cbnz	r3, 80076ce <__sflush_r+0x7e>
 80076cc:	6560      	str	r0, [r4, #84]	; 0x54
 80076ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076d0:	602f      	str	r7, [r5, #0]
 80076d2:	2900      	cmp	r1, #0
 80076d4:	d0c9      	beq.n	800766a <__sflush_r+0x1a>
 80076d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076da:	4299      	cmp	r1, r3
 80076dc:	d002      	beq.n	80076e4 <__sflush_r+0x94>
 80076de:	4628      	mov	r0, r5
 80076e0:	f001 f90a 	bl	80088f8 <_free_r>
 80076e4:	2000      	movs	r0, #0
 80076e6:	6360      	str	r0, [r4, #52]	; 0x34
 80076e8:	e7c0      	b.n	800766c <__sflush_r+0x1c>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b0      	blx	r6
 80076f0:	1c41      	adds	r1, r0, #1
 80076f2:	d1c8      	bne.n	8007686 <__sflush_r+0x36>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0c5      	beq.n	8007686 <__sflush_r+0x36>
 80076fa:	2b1d      	cmp	r3, #29
 80076fc:	d001      	beq.n	8007702 <__sflush_r+0xb2>
 80076fe:	2b16      	cmp	r3, #22
 8007700:	d101      	bne.n	8007706 <__sflush_r+0xb6>
 8007702:	602f      	str	r7, [r5, #0]
 8007704:	e7b1      	b.n	800766a <__sflush_r+0x1a>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	e7ad      	b.n	800766c <__sflush_r+0x1c>
 8007710:	690f      	ldr	r7, [r1, #16]
 8007712:	2f00      	cmp	r7, #0
 8007714:	d0a9      	beq.n	800766a <__sflush_r+0x1a>
 8007716:	0793      	lsls	r3, r2, #30
 8007718:	bf18      	it	ne
 800771a:	2300      	movne	r3, #0
 800771c:	680e      	ldr	r6, [r1, #0]
 800771e:	bf08      	it	eq
 8007720:	694b      	ldreq	r3, [r1, #20]
 8007722:	eba6 0807 	sub.w	r8, r6, r7
 8007726:	600f      	str	r7, [r1, #0]
 8007728:	608b      	str	r3, [r1, #8]
 800772a:	f1b8 0f00 	cmp.w	r8, #0
 800772e:	dd9c      	ble.n	800766a <__sflush_r+0x1a>
 8007730:	4643      	mov	r3, r8
 8007732:	463a      	mov	r2, r7
 8007734:	6a21      	ldr	r1, [r4, #32]
 8007736:	4628      	mov	r0, r5
 8007738:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800773a:	47b0      	blx	r6
 800773c:	2800      	cmp	r0, #0
 800773e:	dc06      	bgt.n	800774e <__sflush_r+0xfe>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	e78e      	b.n	800766c <__sflush_r+0x1c>
 800774e:	4407      	add	r7, r0
 8007750:	eba8 0800 	sub.w	r8, r8, r0
 8007754:	e7e9      	b.n	800772a <__sflush_r+0xda>
 8007756:	bf00      	nop
 8007758:	20400001 	.word	0x20400001

0800775c <_fflush_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	690b      	ldr	r3, [r1, #16]
 8007760:	4605      	mov	r5, r0
 8007762:	460c      	mov	r4, r1
 8007764:	b1db      	cbz	r3, 800779e <_fflush_r+0x42>
 8007766:	b118      	cbz	r0, 8007770 <_fflush_r+0x14>
 8007768:	6983      	ldr	r3, [r0, #24]
 800776a:	b90b      	cbnz	r3, 8007770 <_fflush_r+0x14>
 800776c:	f000 f860 	bl	8007830 <__sinit>
 8007770:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <_fflush_r+0x48>)
 8007772:	429c      	cmp	r4, r3
 8007774:	d109      	bne.n	800778a <_fflush_r+0x2e>
 8007776:	686c      	ldr	r4, [r5, #4]
 8007778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800777c:	b17b      	cbz	r3, 800779e <_fflush_r+0x42>
 800777e:	4621      	mov	r1, r4
 8007780:	4628      	mov	r0, r5
 8007782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007786:	f7ff bf63 	b.w	8007650 <__sflush_r>
 800778a:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <_fflush_r+0x4c>)
 800778c:	429c      	cmp	r4, r3
 800778e:	d101      	bne.n	8007794 <_fflush_r+0x38>
 8007790:	68ac      	ldr	r4, [r5, #8]
 8007792:	e7f1      	b.n	8007778 <_fflush_r+0x1c>
 8007794:	4b05      	ldr	r3, [pc, #20]	; (80077ac <_fflush_r+0x50>)
 8007796:	429c      	cmp	r4, r3
 8007798:	bf08      	it	eq
 800779a:	68ec      	ldreq	r4, [r5, #12]
 800779c:	e7ec      	b.n	8007778 <_fflush_r+0x1c>
 800779e:	2000      	movs	r0, #0
 80077a0:	bd38      	pop	{r3, r4, r5, pc}
 80077a2:	bf00      	nop
 80077a4:	08009310 	.word	0x08009310
 80077a8:	08009330 	.word	0x08009330
 80077ac:	080092f0 	.word	0x080092f0

080077b0 <std>:
 80077b0:	2300      	movs	r3, #0
 80077b2:	b510      	push	{r4, lr}
 80077b4:	4604      	mov	r4, r0
 80077b6:	e9c0 3300 	strd	r3, r3, [r0]
 80077ba:	6083      	str	r3, [r0, #8]
 80077bc:	8181      	strh	r1, [r0, #12]
 80077be:	6643      	str	r3, [r0, #100]	; 0x64
 80077c0:	81c2      	strh	r2, [r0, #14]
 80077c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077c6:	6183      	str	r3, [r0, #24]
 80077c8:	4619      	mov	r1, r3
 80077ca:	2208      	movs	r2, #8
 80077cc:	305c      	adds	r0, #92	; 0x5c
 80077ce:	f7fd faa5 	bl	8004d1c <memset>
 80077d2:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <std+0x38>)
 80077d4:	6224      	str	r4, [r4, #32]
 80077d6:	6263      	str	r3, [r4, #36]	; 0x24
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <std+0x3c>)
 80077da:	62a3      	str	r3, [r4, #40]	; 0x28
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <std+0x40>)
 80077de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077e0:	4b04      	ldr	r3, [pc, #16]	; (80077f4 <std+0x44>)
 80077e2:	6323      	str	r3, [r4, #48]	; 0x30
 80077e4:	bd10      	pop	{r4, pc}
 80077e6:	bf00      	nop
 80077e8:	08008f85 	.word	0x08008f85
 80077ec:	08008fa7 	.word	0x08008fa7
 80077f0:	08008fdf 	.word	0x08008fdf
 80077f4:	08009003 	.word	0x08009003

080077f8 <_cleanup_r>:
 80077f8:	4901      	ldr	r1, [pc, #4]	; (8007800 <_cleanup_r+0x8>)
 80077fa:	f000 b885 	b.w	8007908 <_fwalk_reent>
 80077fe:	bf00      	nop
 8007800:	0800775d 	.word	0x0800775d

08007804 <__sfmoreglue>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	2568      	movs	r5, #104	; 0x68
 8007808:	1e4a      	subs	r2, r1, #1
 800780a:	4355      	muls	r5, r2
 800780c:	460e      	mov	r6, r1
 800780e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007812:	f001 f8bd 	bl	8008990 <_malloc_r>
 8007816:	4604      	mov	r4, r0
 8007818:	b140      	cbz	r0, 800782c <__sfmoreglue+0x28>
 800781a:	2100      	movs	r1, #0
 800781c:	e9c0 1600 	strd	r1, r6, [r0]
 8007820:	300c      	adds	r0, #12
 8007822:	60a0      	str	r0, [r4, #8]
 8007824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007828:	f7fd fa78 	bl	8004d1c <memset>
 800782c:	4620      	mov	r0, r4
 800782e:	bd70      	pop	{r4, r5, r6, pc}

08007830 <__sinit>:
 8007830:	6983      	ldr	r3, [r0, #24]
 8007832:	b510      	push	{r4, lr}
 8007834:	4604      	mov	r4, r0
 8007836:	bb33      	cbnz	r3, 8007886 <__sinit+0x56>
 8007838:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800783c:	6503      	str	r3, [r0, #80]	; 0x50
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <__sinit+0x58>)
 8007840:	4a12      	ldr	r2, [pc, #72]	; (800788c <__sinit+0x5c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6282      	str	r2, [r0, #40]	; 0x28
 8007846:	4298      	cmp	r0, r3
 8007848:	bf04      	itt	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	6183      	streq	r3, [r0, #24]
 800784e:	f000 f81f 	bl	8007890 <__sfp>
 8007852:	6060      	str	r0, [r4, #4]
 8007854:	4620      	mov	r0, r4
 8007856:	f000 f81b 	bl	8007890 <__sfp>
 800785a:	60a0      	str	r0, [r4, #8]
 800785c:	4620      	mov	r0, r4
 800785e:	f000 f817 	bl	8007890 <__sfp>
 8007862:	2200      	movs	r2, #0
 8007864:	60e0      	str	r0, [r4, #12]
 8007866:	2104      	movs	r1, #4
 8007868:	6860      	ldr	r0, [r4, #4]
 800786a:	f7ff ffa1 	bl	80077b0 <std>
 800786e:	2201      	movs	r2, #1
 8007870:	2109      	movs	r1, #9
 8007872:	68a0      	ldr	r0, [r4, #8]
 8007874:	f7ff ff9c 	bl	80077b0 <std>
 8007878:	2202      	movs	r2, #2
 800787a:	2112      	movs	r1, #18
 800787c:	68e0      	ldr	r0, [r4, #12]
 800787e:	f7ff ff97 	bl	80077b0 <std>
 8007882:	2301      	movs	r3, #1
 8007884:	61a3      	str	r3, [r4, #24]
 8007886:	bd10      	pop	{r4, pc}
 8007888:	08009250 	.word	0x08009250
 800788c:	080077f9 	.word	0x080077f9

08007890 <__sfp>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <__sfp+0x70>)
 8007894:	4607      	mov	r7, r0
 8007896:	681e      	ldr	r6, [r3, #0]
 8007898:	69b3      	ldr	r3, [r6, #24]
 800789a:	b913      	cbnz	r3, 80078a2 <__sfp+0x12>
 800789c:	4630      	mov	r0, r6
 800789e:	f7ff ffc7 	bl	8007830 <__sinit>
 80078a2:	3648      	adds	r6, #72	; 0x48
 80078a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	d503      	bpl.n	80078b4 <__sfp+0x24>
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	b133      	cbz	r3, 80078be <__sfp+0x2e>
 80078b0:	6836      	ldr	r6, [r6, #0]
 80078b2:	e7f7      	b.n	80078a4 <__sfp+0x14>
 80078b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078b8:	b16d      	cbz	r5, 80078d6 <__sfp+0x46>
 80078ba:	3468      	adds	r4, #104	; 0x68
 80078bc:	e7f4      	b.n	80078a8 <__sfp+0x18>
 80078be:	2104      	movs	r1, #4
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff ff9f 	bl	8007804 <__sfmoreglue>
 80078c6:	6030      	str	r0, [r6, #0]
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d1f1      	bne.n	80078b0 <__sfp+0x20>
 80078cc:	230c      	movs	r3, #12
 80078ce:	4604      	mov	r4, r0
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	4620      	mov	r0, r4
 80078d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d6:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <__sfp+0x74>)
 80078d8:	6665      	str	r5, [r4, #100]	; 0x64
 80078da:	e9c4 5500 	strd	r5, r5, [r4]
 80078de:	60a5      	str	r5, [r4, #8]
 80078e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80078e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80078e8:	2208      	movs	r2, #8
 80078ea:	4629      	mov	r1, r5
 80078ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078f0:	f7fd fa14 	bl	8004d1c <memset>
 80078f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078fc:	e7e9      	b.n	80078d2 <__sfp+0x42>
 80078fe:	bf00      	nop
 8007900:	08009250 	.word	0x08009250
 8007904:	ffff0001 	.word	0xffff0001

08007908 <_fwalk_reent>:
 8007908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800790c:	4680      	mov	r8, r0
 800790e:	4689      	mov	r9, r1
 8007910:	2600      	movs	r6, #0
 8007912:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007916:	b914      	cbnz	r4, 800791e <_fwalk_reent+0x16>
 8007918:	4630      	mov	r0, r6
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007922:	3f01      	subs	r7, #1
 8007924:	d501      	bpl.n	800792a <_fwalk_reent+0x22>
 8007926:	6824      	ldr	r4, [r4, #0]
 8007928:	e7f5      	b.n	8007916 <_fwalk_reent+0xe>
 800792a:	89ab      	ldrh	r3, [r5, #12]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d907      	bls.n	8007940 <_fwalk_reent+0x38>
 8007930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007934:	3301      	adds	r3, #1
 8007936:	d003      	beq.n	8007940 <_fwalk_reent+0x38>
 8007938:	4629      	mov	r1, r5
 800793a:	4640      	mov	r0, r8
 800793c:	47c8      	blx	r9
 800793e:	4306      	orrs	r6, r0
 8007940:	3568      	adds	r5, #104	; 0x68
 8007942:	e7ee      	b.n	8007922 <_fwalk_reent+0x1a>

08007944 <rshift>:
 8007944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007946:	6906      	ldr	r6, [r0, #16]
 8007948:	114b      	asrs	r3, r1, #5
 800794a:	429e      	cmp	r6, r3
 800794c:	f100 0414 	add.w	r4, r0, #20
 8007950:	dd31      	ble.n	80079b6 <rshift+0x72>
 8007952:	f011 011f 	ands.w	r1, r1, #31
 8007956:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800795a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800795e:	d108      	bne.n	8007972 <rshift+0x2e>
 8007960:	4621      	mov	r1, r4
 8007962:	42b2      	cmp	r2, r6
 8007964:	460b      	mov	r3, r1
 8007966:	d211      	bcs.n	800798c <rshift+0x48>
 8007968:	f852 3b04 	ldr.w	r3, [r2], #4
 800796c:	f841 3b04 	str.w	r3, [r1], #4
 8007970:	e7f7      	b.n	8007962 <rshift+0x1e>
 8007972:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007976:	4623      	mov	r3, r4
 8007978:	f1c1 0c20 	rsb	ip, r1, #32
 800797c:	40cd      	lsrs	r5, r1
 800797e:	3204      	adds	r2, #4
 8007980:	42b2      	cmp	r2, r6
 8007982:	4617      	mov	r7, r2
 8007984:	d30d      	bcc.n	80079a2 <rshift+0x5e>
 8007986:	601d      	str	r5, [r3, #0]
 8007988:	b105      	cbz	r5, 800798c <rshift+0x48>
 800798a:	3304      	adds	r3, #4
 800798c:	42a3      	cmp	r3, r4
 800798e:	eba3 0204 	sub.w	r2, r3, r4
 8007992:	bf08      	it	eq
 8007994:	2300      	moveq	r3, #0
 8007996:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800799a:	6102      	str	r2, [r0, #16]
 800799c:	bf08      	it	eq
 800799e:	6143      	streq	r3, [r0, #20]
 80079a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a2:	683f      	ldr	r7, [r7, #0]
 80079a4:	fa07 f70c 	lsl.w	r7, r7, ip
 80079a8:	433d      	orrs	r5, r7
 80079aa:	f843 5b04 	str.w	r5, [r3], #4
 80079ae:	f852 5b04 	ldr.w	r5, [r2], #4
 80079b2:	40cd      	lsrs	r5, r1
 80079b4:	e7e4      	b.n	8007980 <rshift+0x3c>
 80079b6:	4623      	mov	r3, r4
 80079b8:	e7e8      	b.n	800798c <rshift+0x48>

080079ba <__hexdig_fun>:
 80079ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80079be:	2b09      	cmp	r3, #9
 80079c0:	d802      	bhi.n	80079c8 <__hexdig_fun+0xe>
 80079c2:	3820      	subs	r0, #32
 80079c4:	b2c0      	uxtb	r0, r0
 80079c6:	4770      	bx	lr
 80079c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80079cc:	2b05      	cmp	r3, #5
 80079ce:	d801      	bhi.n	80079d4 <__hexdig_fun+0x1a>
 80079d0:	3847      	subs	r0, #71	; 0x47
 80079d2:	e7f7      	b.n	80079c4 <__hexdig_fun+0xa>
 80079d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80079d8:	2b05      	cmp	r3, #5
 80079da:	d801      	bhi.n	80079e0 <__hexdig_fun+0x26>
 80079dc:	3827      	subs	r0, #39	; 0x27
 80079de:	e7f1      	b.n	80079c4 <__hexdig_fun+0xa>
 80079e0:	2000      	movs	r0, #0
 80079e2:	4770      	bx	lr

080079e4 <__gethex>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	b08b      	sub	sp, #44	; 0x2c
 80079ea:	9002      	str	r0, [sp, #8]
 80079ec:	9816      	ldr	r0, [sp, #88]	; 0x58
 80079ee:	468a      	mov	sl, r1
 80079f0:	4690      	mov	r8, r2
 80079f2:	9306      	str	r3, [sp, #24]
 80079f4:	f000 fad1 	bl	8007f9a <__localeconv_l>
 80079f8:	6803      	ldr	r3, [r0, #0]
 80079fa:	f04f 0b00 	mov.w	fp, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	9303      	str	r3, [sp, #12]
 8007a02:	f7f8 fba5 	bl	8000150 <strlen>
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	9001      	str	r0, [sp, #4]
 8007a0a:	4403      	add	r3, r0
 8007a0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	f8da 3000 	ldr.w	r3, [sl]
 8007a16:	3302      	adds	r3, #2
 8007a18:	461f      	mov	r7, r3
 8007a1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a1e:	2830      	cmp	r0, #48	; 0x30
 8007a20:	d06c      	beq.n	8007afc <__gethex+0x118>
 8007a22:	f7ff ffca 	bl	80079ba <__hexdig_fun>
 8007a26:	4604      	mov	r4, r0
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d16a      	bne.n	8007b02 <__gethex+0x11e>
 8007a2c:	9a01      	ldr	r2, [sp, #4]
 8007a2e:	9903      	ldr	r1, [sp, #12]
 8007a30:	4638      	mov	r0, r7
 8007a32:	f001 faea 	bl	800900a <strncmp>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d166      	bne.n	8007b08 <__gethex+0x124>
 8007a3a:	9b01      	ldr	r3, [sp, #4]
 8007a3c:	5cf8      	ldrb	r0, [r7, r3]
 8007a3e:	18fe      	adds	r6, r7, r3
 8007a40:	f7ff ffbb 	bl	80079ba <__hexdig_fun>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d062      	beq.n	8007b0e <__gethex+0x12a>
 8007a48:	4633      	mov	r3, r6
 8007a4a:	7818      	ldrb	r0, [r3, #0]
 8007a4c:	461f      	mov	r7, r3
 8007a4e:	2830      	cmp	r0, #48	; 0x30
 8007a50:	f103 0301 	add.w	r3, r3, #1
 8007a54:	d0f9      	beq.n	8007a4a <__gethex+0x66>
 8007a56:	f7ff ffb0 	bl	80079ba <__hexdig_fun>
 8007a5a:	fab0 f580 	clz	r5, r0
 8007a5e:	4634      	mov	r4, r6
 8007a60:	f04f 0b01 	mov.w	fp, #1
 8007a64:	096d      	lsrs	r5, r5, #5
 8007a66:	463a      	mov	r2, r7
 8007a68:	4616      	mov	r6, r2
 8007a6a:	7830      	ldrb	r0, [r6, #0]
 8007a6c:	3201      	adds	r2, #1
 8007a6e:	f7ff ffa4 	bl	80079ba <__hexdig_fun>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d1f8      	bne.n	8007a68 <__gethex+0x84>
 8007a76:	9a01      	ldr	r2, [sp, #4]
 8007a78:	9903      	ldr	r1, [sp, #12]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f001 fac5 	bl	800900a <strncmp>
 8007a80:	b950      	cbnz	r0, 8007a98 <__gethex+0xb4>
 8007a82:	b954      	cbnz	r4, 8007a9a <__gethex+0xb6>
 8007a84:	9b01      	ldr	r3, [sp, #4]
 8007a86:	18f4      	adds	r4, r6, r3
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4616      	mov	r6, r2
 8007a8c:	7830      	ldrb	r0, [r6, #0]
 8007a8e:	3201      	adds	r2, #1
 8007a90:	f7ff ff93 	bl	80079ba <__hexdig_fun>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d1f8      	bne.n	8007a8a <__gethex+0xa6>
 8007a98:	b10c      	cbz	r4, 8007a9e <__gethex+0xba>
 8007a9a:	1ba4      	subs	r4, r4, r6
 8007a9c:	00a4      	lsls	r4, r4, #2
 8007a9e:	7833      	ldrb	r3, [r6, #0]
 8007aa0:	2b50      	cmp	r3, #80	; 0x50
 8007aa2:	d001      	beq.n	8007aa8 <__gethex+0xc4>
 8007aa4:	2b70      	cmp	r3, #112	; 0x70
 8007aa6:	d140      	bne.n	8007b2a <__gethex+0x146>
 8007aa8:	7873      	ldrb	r3, [r6, #1]
 8007aaa:	2b2b      	cmp	r3, #43	; 0x2b
 8007aac:	d031      	beq.n	8007b12 <__gethex+0x12e>
 8007aae:	2b2d      	cmp	r3, #45	; 0x2d
 8007ab0:	d033      	beq.n	8007b1a <__gethex+0x136>
 8007ab2:	f04f 0900 	mov.w	r9, #0
 8007ab6:	1c71      	adds	r1, r6, #1
 8007ab8:	7808      	ldrb	r0, [r1, #0]
 8007aba:	f7ff ff7e 	bl	80079ba <__hexdig_fun>
 8007abe:	1e43      	subs	r3, r0, #1
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b18      	cmp	r3, #24
 8007ac4:	d831      	bhi.n	8007b2a <__gethex+0x146>
 8007ac6:	f1a0 0210 	sub.w	r2, r0, #16
 8007aca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ace:	f7ff ff74 	bl	80079ba <__hexdig_fun>
 8007ad2:	1e43      	subs	r3, r0, #1
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b18      	cmp	r3, #24
 8007ad8:	d922      	bls.n	8007b20 <__gethex+0x13c>
 8007ada:	f1b9 0f00 	cmp.w	r9, #0
 8007ade:	d000      	beq.n	8007ae2 <__gethex+0xfe>
 8007ae0:	4252      	negs	r2, r2
 8007ae2:	4414      	add	r4, r2
 8007ae4:	f8ca 1000 	str.w	r1, [sl]
 8007ae8:	b30d      	cbz	r5, 8007b2e <__gethex+0x14a>
 8007aea:	f1bb 0f00 	cmp.w	fp, #0
 8007aee:	bf0c      	ite	eq
 8007af0:	2706      	moveq	r7, #6
 8007af2:	2700      	movne	r7, #0
 8007af4:	4638      	mov	r0, r7
 8007af6:	b00b      	add	sp, #44	; 0x2c
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afc:	f10b 0b01 	add.w	fp, fp, #1
 8007b00:	e78a      	b.n	8007a18 <__gethex+0x34>
 8007b02:	2500      	movs	r5, #0
 8007b04:	462c      	mov	r4, r5
 8007b06:	e7ae      	b.n	8007a66 <__gethex+0x82>
 8007b08:	463e      	mov	r6, r7
 8007b0a:	2501      	movs	r5, #1
 8007b0c:	e7c7      	b.n	8007a9e <__gethex+0xba>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	e7fb      	b.n	8007b0a <__gethex+0x126>
 8007b12:	f04f 0900 	mov.w	r9, #0
 8007b16:	1cb1      	adds	r1, r6, #2
 8007b18:	e7ce      	b.n	8007ab8 <__gethex+0xd4>
 8007b1a:	f04f 0901 	mov.w	r9, #1
 8007b1e:	e7fa      	b.n	8007b16 <__gethex+0x132>
 8007b20:	230a      	movs	r3, #10
 8007b22:	fb03 0202 	mla	r2, r3, r2, r0
 8007b26:	3a10      	subs	r2, #16
 8007b28:	e7cf      	b.n	8007aca <__gethex+0xe6>
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	e7da      	b.n	8007ae4 <__gethex+0x100>
 8007b2e:	4629      	mov	r1, r5
 8007b30:	1bf3      	subs	r3, r6, r7
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2b07      	cmp	r3, #7
 8007b36:	dc49      	bgt.n	8007bcc <__gethex+0x1e8>
 8007b38:	9802      	ldr	r0, [sp, #8]
 8007b3a:	f000 fad6 	bl	80080ea <_Balloc>
 8007b3e:	f04f 0b00 	mov.w	fp, #0
 8007b42:	4605      	mov	r5, r0
 8007b44:	46da      	mov	sl, fp
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	f100 0914 	add.w	r9, r0, #20
 8007b4c:	f1c3 0301 	rsb	r3, r3, #1
 8007b50:	f8cd 9010 	str.w	r9, [sp, #16]
 8007b54:	9308      	str	r3, [sp, #32]
 8007b56:	42b7      	cmp	r7, r6
 8007b58:	d33b      	bcc.n	8007bd2 <__gethex+0x1ee>
 8007b5a:	9804      	ldr	r0, [sp, #16]
 8007b5c:	f840 ab04 	str.w	sl, [r0], #4
 8007b60:	eba0 0009 	sub.w	r0, r0, r9
 8007b64:	1080      	asrs	r0, r0, #2
 8007b66:	6128      	str	r0, [r5, #16]
 8007b68:	0147      	lsls	r7, r0, #5
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	f000 fb81 	bl	8008272 <__hi0bits>
 8007b70:	f8d8 6000 	ldr.w	r6, [r8]
 8007b74:	1a3f      	subs	r7, r7, r0
 8007b76:	42b7      	cmp	r7, r6
 8007b78:	dd64      	ble.n	8007c44 <__gethex+0x260>
 8007b7a:	1bbf      	subs	r7, r7, r6
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 fe8b 	bl	800889a <__any_on>
 8007b84:	4682      	mov	sl, r0
 8007b86:	b178      	cbz	r0, 8007ba8 <__gethex+0x1c4>
 8007b88:	f04f 0a01 	mov.w	sl, #1
 8007b8c:	1e7b      	subs	r3, r7, #1
 8007b8e:	1159      	asrs	r1, r3, #5
 8007b90:	f003 021f 	and.w	r2, r3, #31
 8007b94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007b98:	fa0a f202 	lsl.w	r2, sl, r2
 8007b9c:	420a      	tst	r2, r1
 8007b9e:	d003      	beq.n	8007ba8 <__gethex+0x1c4>
 8007ba0:	4553      	cmp	r3, sl
 8007ba2:	dc46      	bgt.n	8007c32 <__gethex+0x24e>
 8007ba4:	f04f 0a02 	mov.w	sl, #2
 8007ba8:	4639      	mov	r1, r7
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7ff feca 	bl	8007944 <rshift>
 8007bb0:	443c      	add	r4, r7
 8007bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bb6:	42a3      	cmp	r3, r4
 8007bb8:	da52      	bge.n	8007c60 <__gethex+0x27c>
 8007bba:	4629      	mov	r1, r5
 8007bbc:	9802      	ldr	r0, [sp, #8]
 8007bbe:	f000 fac8 	bl	8008152 <_Bfree>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007bc6:	27a3      	movs	r7, #163	; 0xa3
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	e793      	b.n	8007af4 <__gethex+0x110>
 8007bcc:	3101      	adds	r1, #1
 8007bce:	105b      	asrs	r3, r3, #1
 8007bd0:	e7b0      	b.n	8007b34 <__gethex+0x150>
 8007bd2:	1e73      	subs	r3, r6, #1
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	9a07      	ldr	r2, [sp, #28]
 8007bd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d018      	beq.n	8007c12 <__gethex+0x22e>
 8007be0:	f1bb 0f20 	cmp.w	fp, #32
 8007be4:	d107      	bne.n	8007bf6 <__gethex+0x212>
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	f8c3 a000 	str.w	sl, [r3]
 8007bec:	f04f 0a00 	mov.w	sl, #0
 8007bf0:	46d3      	mov	fp, sl
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007bfa:	f7ff fede 	bl	80079ba <__hexdig_fun>
 8007bfe:	f000 000f 	and.w	r0, r0, #15
 8007c02:	fa00 f00b 	lsl.w	r0, r0, fp
 8007c06:	ea4a 0a00 	orr.w	sl, sl, r0
 8007c0a:	f10b 0b04 	add.w	fp, fp, #4
 8007c0e:	9b05      	ldr	r3, [sp, #20]
 8007c10:	e00d      	b.n	8007c2e <__gethex+0x24a>
 8007c12:	9b05      	ldr	r3, [sp, #20]
 8007c14:	9a08      	ldr	r2, [sp, #32]
 8007c16:	4413      	add	r3, r2
 8007c18:	42bb      	cmp	r3, r7
 8007c1a:	d3e1      	bcc.n	8007be0 <__gethex+0x1fc>
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	9a01      	ldr	r2, [sp, #4]
 8007c20:	9903      	ldr	r1, [sp, #12]
 8007c22:	9309      	str	r3, [sp, #36]	; 0x24
 8007c24:	f001 f9f1 	bl	800900a <strncmp>
 8007c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d1d8      	bne.n	8007be0 <__gethex+0x1fc>
 8007c2e:	461e      	mov	r6, r3
 8007c30:	e791      	b.n	8007b56 <__gethex+0x172>
 8007c32:	1eb9      	subs	r1, r7, #2
 8007c34:	4628      	mov	r0, r5
 8007c36:	f000 fe30 	bl	800889a <__any_on>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d0b2      	beq.n	8007ba4 <__gethex+0x1c0>
 8007c3e:	f04f 0a03 	mov.w	sl, #3
 8007c42:	e7b1      	b.n	8007ba8 <__gethex+0x1c4>
 8007c44:	da09      	bge.n	8007c5a <__gethex+0x276>
 8007c46:	1bf7      	subs	r7, r6, r7
 8007c48:	4629      	mov	r1, r5
 8007c4a:	463a      	mov	r2, r7
 8007c4c:	9802      	ldr	r0, [sp, #8]
 8007c4e:	f000 fc4b 	bl	80084e8 <__lshift>
 8007c52:	4605      	mov	r5, r0
 8007c54:	1be4      	subs	r4, r4, r7
 8007c56:	f100 0914 	add.w	r9, r0, #20
 8007c5a:	f04f 0a00 	mov.w	sl, #0
 8007c5e:	e7a8      	b.n	8007bb2 <__gethex+0x1ce>
 8007c60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007c64:	42a0      	cmp	r0, r4
 8007c66:	dd6b      	ble.n	8007d40 <__gethex+0x35c>
 8007c68:	1b04      	subs	r4, r0, r4
 8007c6a:	42a6      	cmp	r6, r4
 8007c6c:	dc2e      	bgt.n	8007ccc <__gethex+0x2e8>
 8007c6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d022      	beq.n	8007cbc <__gethex+0x2d8>
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d024      	beq.n	8007cc4 <__gethex+0x2e0>
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d115      	bne.n	8007caa <__gethex+0x2c6>
 8007c7e:	42a6      	cmp	r6, r4
 8007c80:	d113      	bne.n	8007caa <__gethex+0x2c6>
 8007c82:	2e01      	cmp	r6, #1
 8007c84:	dc0b      	bgt.n	8007c9e <__gethex+0x2ba>
 8007c86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c8a:	9a06      	ldr	r2, [sp, #24]
 8007c8c:	2762      	movs	r7, #98	; 0x62
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	2301      	movs	r3, #1
 8007c92:	612b      	str	r3, [r5, #16]
 8007c94:	f8c9 3000 	str.w	r3, [r9]
 8007c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c9a:	601d      	str	r5, [r3, #0]
 8007c9c:	e72a      	b.n	8007af4 <__gethex+0x110>
 8007c9e:	1e71      	subs	r1, r6, #1
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 fdfa 	bl	800889a <__any_on>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d1ed      	bne.n	8007c86 <__gethex+0x2a2>
 8007caa:	4629      	mov	r1, r5
 8007cac:	9802      	ldr	r0, [sp, #8]
 8007cae:	f000 fa50 	bl	8008152 <_Bfree>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cb6:	2750      	movs	r7, #80	; 0x50
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	e71b      	b.n	8007af4 <__gethex+0x110>
 8007cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0e1      	beq.n	8007c86 <__gethex+0x2a2>
 8007cc2:	e7f2      	b.n	8007caa <__gethex+0x2c6>
 8007cc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1dd      	bne.n	8007c86 <__gethex+0x2a2>
 8007cca:	e7ee      	b.n	8007caa <__gethex+0x2c6>
 8007ccc:	1e67      	subs	r7, r4, #1
 8007cce:	f1ba 0f00 	cmp.w	sl, #0
 8007cd2:	d132      	bne.n	8007d3a <__gethex+0x356>
 8007cd4:	b127      	cbz	r7, 8007ce0 <__gethex+0x2fc>
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 fdde 	bl	800889a <__any_on>
 8007cde:	4682      	mov	sl, r0
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	117a      	asrs	r2, r7, #5
 8007ce4:	f007 071f 	and.w	r7, r7, #31
 8007ce8:	fa03 f707 	lsl.w	r7, r3, r7
 8007cec:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	421f      	tst	r7, r3
 8007cf4:	f04f 0702 	mov.w	r7, #2
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	bf18      	it	ne
 8007cfc:	f04a 0a02 	orrne.w	sl, sl, #2
 8007d00:	1b36      	subs	r6, r6, r4
 8007d02:	f7ff fe1f 	bl	8007944 <rshift>
 8007d06:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007d0a:	f1ba 0f00 	cmp.w	sl, #0
 8007d0e:	d048      	beq.n	8007da2 <__gethex+0x3be>
 8007d10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d015      	beq.n	8007d44 <__gethex+0x360>
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d017      	beq.n	8007d4c <__gethex+0x368>
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d109      	bne.n	8007d34 <__gethex+0x350>
 8007d20:	f01a 0f02 	tst.w	sl, #2
 8007d24:	d006      	beq.n	8007d34 <__gethex+0x350>
 8007d26:	f8d9 3000 	ldr.w	r3, [r9]
 8007d2a:	ea4a 0a03 	orr.w	sl, sl, r3
 8007d2e:	f01a 0f01 	tst.w	sl, #1
 8007d32:	d10e      	bne.n	8007d52 <__gethex+0x36e>
 8007d34:	f047 0710 	orr.w	r7, r7, #16
 8007d38:	e033      	b.n	8007da2 <__gethex+0x3be>
 8007d3a:	f04f 0a01 	mov.w	sl, #1
 8007d3e:	e7cf      	b.n	8007ce0 <__gethex+0x2fc>
 8007d40:	2701      	movs	r7, #1
 8007d42:	e7e2      	b.n	8007d0a <__gethex+0x326>
 8007d44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d46:	f1c3 0301 	rsb	r3, r3, #1
 8007d4a:	9315      	str	r3, [sp, #84]	; 0x54
 8007d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0f0      	beq.n	8007d34 <__gethex+0x350>
 8007d52:	f04f 0c00 	mov.w	ip, #0
 8007d56:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007d5a:	f105 0314 	add.w	r3, r5, #20
 8007d5e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007d62:	eb03 010a 	add.w	r1, r3, sl
 8007d66:	4618      	mov	r0, r3
 8007d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007d70:	d01c      	beq.n	8007dac <__gethex+0x3c8>
 8007d72:	3201      	adds	r2, #1
 8007d74:	6002      	str	r2, [r0, #0]
 8007d76:	2f02      	cmp	r7, #2
 8007d78:	f105 0314 	add.w	r3, r5, #20
 8007d7c:	d138      	bne.n	8007df0 <__gethex+0x40c>
 8007d7e:	f8d8 2000 	ldr.w	r2, [r8]
 8007d82:	3a01      	subs	r2, #1
 8007d84:	42b2      	cmp	r2, r6
 8007d86:	d10a      	bne.n	8007d9e <__gethex+0x3ba>
 8007d88:	2201      	movs	r2, #1
 8007d8a:	1171      	asrs	r1, r6, #5
 8007d8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d90:	f006 061f 	and.w	r6, r6, #31
 8007d94:	fa02 f606 	lsl.w	r6, r2, r6
 8007d98:	421e      	tst	r6, r3
 8007d9a:	bf18      	it	ne
 8007d9c:	4617      	movne	r7, r2
 8007d9e:	f047 0720 	orr.w	r7, r7, #32
 8007da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007da4:	601d      	str	r5, [r3, #0]
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	601c      	str	r4, [r3, #0]
 8007daa:	e6a3      	b.n	8007af4 <__gethex+0x110>
 8007dac:	4299      	cmp	r1, r3
 8007dae:	f843 cc04 	str.w	ip, [r3, #-4]
 8007db2:	d8d8      	bhi.n	8007d66 <__gethex+0x382>
 8007db4:	68ab      	ldr	r3, [r5, #8]
 8007db6:	4599      	cmp	r9, r3
 8007db8:	db12      	blt.n	8007de0 <__gethex+0x3fc>
 8007dba:	6869      	ldr	r1, [r5, #4]
 8007dbc:	9802      	ldr	r0, [sp, #8]
 8007dbe:	3101      	adds	r1, #1
 8007dc0:	f000 f993 	bl	80080ea <_Balloc>
 8007dc4:	4683      	mov	fp, r0
 8007dc6:	692a      	ldr	r2, [r5, #16]
 8007dc8:	f105 010c 	add.w	r1, r5, #12
 8007dcc:	3202      	adds	r2, #2
 8007dce:	0092      	lsls	r2, r2, #2
 8007dd0:	300c      	adds	r0, #12
 8007dd2:	f000 f97f 	bl	80080d4 <memcpy>
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	9802      	ldr	r0, [sp, #8]
 8007dda:	f000 f9ba 	bl	8008152 <_Bfree>
 8007dde:	465d      	mov	r5, fp
 8007de0:	692b      	ldr	r3, [r5, #16]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	612a      	str	r2, [r5, #16]
 8007de6:	2201      	movs	r2, #1
 8007de8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007dec:	615a      	str	r2, [r3, #20]
 8007dee:	e7c2      	b.n	8007d76 <__gethex+0x392>
 8007df0:	692a      	ldr	r2, [r5, #16]
 8007df2:	454a      	cmp	r2, r9
 8007df4:	dd0b      	ble.n	8007e0e <__gethex+0x42a>
 8007df6:	2101      	movs	r1, #1
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f7ff fda3 	bl	8007944 <rshift>
 8007dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e02:	3401      	adds	r4, #1
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	f6ff aed8 	blt.w	8007bba <__gethex+0x1d6>
 8007e0a:	2701      	movs	r7, #1
 8007e0c:	e7c7      	b.n	8007d9e <__gethex+0x3ba>
 8007e0e:	f016 061f 	ands.w	r6, r6, #31
 8007e12:	d0fa      	beq.n	8007e0a <__gethex+0x426>
 8007e14:	449a      	add	sl, r3
 8007e16:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007e1a:	f000 fa2a 	bl	8008272 <__hi0bits>
 8007e1e:	f1c6 0620 	rsb	r6, r6, #32
 8007e22:	42b0      	cmp	r0, r6
 8007e24:	dbe7      	blt.n	8007df6 <__gethex+0x412>
 8007e26:	e7f0      	b.n	8007e0a <__gethex+0x426>

08007e28 <L_shift>:
 8007e28:	f1c2 0208 	rsb	r2, r2, #8
 8007e2c:	0092      	lsls	r2, r2, #2
 8007e2e:	b570      	push	{r4, r5, r6, lr}
 8007e30:	f1c2 0620 	rsb	r6, r2, #32
 8007e34:	6843      	ldr	r3, [r0, #4]
 8007e36:	6804      	ldr	r4, [r0, #0]
 8007e38:	fa03 f506 	lsl.w	r5, r3, r6
 8007e3c:	432c      	orrs	r4, r5
 8007e3e:	40d3      	lsrs	r3, r2
 8007e40:	6004      	str	r4, [r0, #0]
 8007e42:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e46:	4288      	cmp	r0, r1
 8007e48:	d3f4      	bcc.n	8007e34 <L_shift+0xc>
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}

08007e4c <__match>:
 8007e4c:	b530      	push	{r4, r5, lr}
 8007e4e:	6803      	ldr	r3, [r0, #0]
 8007e50:	3301      	adds	r3, #1
 8007e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e56:	b914      	cbnz	r4, 8007e5e <__match+0x12>
 8007e58:	6003      	str	r3, [r0, #0]
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	bd30      	pop	{r4, r5, pc}
 8007e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007e66:	2d19      	cmp	r5, #25
 8007e68:	bf98      	it	ls
 8007e6a:	3220      	addls	r2, #32
 8007e6c:	42a2      	cmp	r2, r4
 8007e6e:	d0f0      	beq.n	8007e52 <__match+0x6>
 8007e70:	2000      	movs	r0, #0
 8007e72:	e7f3      	b.n	8007e5c <__match+0x10>

08007e74 <__hexnan>:
 8007e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e78:	2500      	movs	r5, #0
 8007e7a:	680b      	ldr	r3, [r1, #0]
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	115f      	asrs	r7, r3, #5
 8007e80:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007e84:	f013 031f 	ands.w	r3, r3, #31
 8007e88:	bf18      	it	ne
 8007e8a:	3704      	addne	r7, #4
 8007e8c:	1f3e      	subs	r6, r7, #4
 8007e8e:	4690      	mov	r8, r2
 8007e90:	46b1      	mov	r9, r6
 8007e92:	4634      	mov	r4, r6
 8007e94:	46ab      	mov	fp, r5
 8007e96:	b087      	sub	sp, #28
 8007e98:	6801      	ldr	r1, [r0, #0]
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	f847 5c04 	str.w	r5, [r7, #-4]
 8007ea0:	9502      	str	r5, [sp, #8]
 8007ea2:	784a      	ldrb	r2, [r1, #1]
 8007ea4:	1c4b      	adds	r3, r1, #1
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	b342      	cbz	r2, 8007efc <__hexnan+0x88>
 8007eaa:	4610      	mov	r0, r2
 8007eac:	9105      	str	r1, [sp, #20]
 8007eae:	9204      	str	r2, [sp, #16]
 8007eb0:	f7ff fd83 	bl	80079ba <__hexdig_fun>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d143      	bne.n	8007f40 <__hexnan+0xcc>
 8007eb8:	9a04      	ldr	r2, [sp, #16]
 8007eba:	9905      	ldr	r1, [sp, #20]
 8007ebc:	2a20      	cmp	r2, #32
 8007ebe:	d818      	bhi.n	8007ef2 <__hexnan+0x7e>
 8007ec0:	9b02      	ldr	r3, [sp, #8]
 8007ec2:	459b      	cmp	fp, r3
 8007ec4:	dd13      	ble.n	8007eee <__hexnan+0x7a>
 8007ec6:	454c      	cmp	r4, r9
 8007ec8:	d206      	bcs.n	8007ed8 <__hexnan+0x64>
 8007eca:	2d07      	cmp	r5, #7
 8007ecc:	dc04      	bgt.n	8007ed8 <__hexnan+0x64>
 8007ece:	462a      	mov	r2, r5
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff ffa8 	bl	8007e28 <L_shift>
 8007ed8:	4544      	cmp	r4, r8
 8007eda:	d944      	bls.n	8007f66 <__hexnan+0xf2>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f1a4 0904 	sub.w	r9, r4, #4
 8007ee2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	464c      	mov	r4, r9
 8007eea:	f8cd b008 	str.w	fp, [sp, #8]
 8007eee:	9903      	ldr	r1, [sp, #12]
 8007ef0:	e7d7      	b.n	8007ea2 <__hexnan+0x2e>
 8007ef2:	2a29      	cmp	r2, #41	; 0x29
 8007ef4:	d14a      	bne.n	8007f8c <__hexnan+0x118>
 8007ef6:	3102      	adds	r1, #2
 8007ef8:	f8ca 1000 	str.w	r1, [sl]
 8007efc:	f1bb 0f00 	cmp.w	fp, #0
 8007f00:	d044      	beq.n	8007f8c <__hexnan+0x118>
 8007f02:	454c      	cmp	r4, r9
 8007f04:	d206      	bcs.n	8007f14 <__hexnan+0xa0>
 8007f06:	2d07      	cmp	r5, #7
 8007f08:	dc04      	bgt.n	8007f14 <__hexnan+0xa0>
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f7ff ff8a 	bl	8007e28 <L_shift>
 8007f14:	4544      	cmp	r4, r8
 8007f16:	d928      	bls.n	8007f6a <__hexnan+0xf6>
 8007f18:	4643      	mov	r3, r8
 8007f1a:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f1e:	42a6      	cmp	r6, r4
 8007f20:	f843 2b04 	str.w	r2, [r3], #4
 8007f24:	d2f9      	bcs.n	8007f1a <__hexnan+0xa6>
 8007f26:	2200      	movs	r2, #0
 8007f28:	f843 2b04 	str.w	r2, [r3], #4
 8007f2c:	429e      	cmp	r6, r3
 8007f2e:	d2fb      	bcs.n	8007f28 <__hexnan+0xb4>
 8007f30:	6833      	ldr	r3, [r6, #0]
 8007f32:	b91b      	cbnz	r3, 8007f3c <__hexnan+0xc8>
 8007f34:	4546      	cmp	r6, r8
 8007f36:	d127      	bne.n	8007f88 <__hexnan+0x114>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	6033      	str	r3, [r6, #0]
 8007f3c:	2005      	movs	r0, #5
 8007f3e:	e026      	b.n	8007f8e <__hexnan+0x11a>
 8007f40:	3501      	adds	r5, #1
 8007f42:	2d08      	cmp	r5, #8
 8007f44:	f10b 0b01 	add.w	fp, fp, #1
 8007f48:	dd06      	ble.n	8007f58 <__hexnan+0xe4>
 8007f4a:	4544      	cmp	r4, r8
 8007f4c:	d9cf      	bls.n	8007eee <__hexnan+0x7a>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2501      	movs	r5, #1
 8007f52:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f56:	3c04      	subs	r4, #4
 8007f58:	6822      	ldr	r2, [r4, #0]
 8007f5a:	f000 000f 	and.w	r0, r0, #15
 8007f5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007f62:	6020      	str	r0, [r4, #0]
 8007f64:	e7c3      	b.n	8007eee <__hexnan+0x7a>
 8007f66:	2508      	movs	r5, #8
 8007f68:	e7c1      	b.n	8007eee <__hexnan+0x7a>
 8007f6a:	9b01      	ldr	r3, [sp, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0df      	beq.n	8007f30 <__hexnan+0xbc>
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295
 8007f74:	f1c3 0320 	rsb	r3, r3, #32
 8007f78:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007f80:	401a      	ands	r2, r3
 8007f82:	f847 2c04 	str.w	r2, [r7, #-4]
 8007f86:	e7d3      	b.n	8007f30 <__hexnan+0xbc>
 8007f88:	3e04      	subs	r6, #4
 8007f8a:	e7d1      	b.n	8007f30 <__hexnan+0xbc>
 8007f8c:	2004      	movs	r0, #4
 8007f8e:	b007      	add	sp, #28
 8007f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f94 <__locale_ctype_ptr_l>:
 8007f94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007f98:	4770      	bx	lr

08007f9a <__localeconv_l>:
 8007f9a:	30f0      	adds	r0, #240	; 0xf0
 8007f9c:	4770      	bx	lr
	...

08007fa0 <_localeconv_r>:
 8007fa0:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <_localeconv_r+0x14>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6a18      	ldr	r0, [r3, #32]
 8007fa6:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <_localeconv_r+0x18>)
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	bf08      	it	eq
 8007fac:	4618      	moveq	r0, r3
 8007fae:	30f0      	adds	r0, #240	; 0xf0
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	2000000c 	.word	0x2000000c
 8007fb8:	20000070 	.word	0x20000070

08007fbc <__swhatbuf_r>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	460e      	mov	r6, r1
 8007fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc4:	b096      	sub	sp, #88	; 0x58
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	4614      	mov	r4, r2
 8007fca:	461d      	mov	r5, r3
 8007fcc:	da07      	bge.n	8007fde <__swhatbuf_r+0x22>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	89b3      	ldrh	r3, [r6, #12]
 8007fd4:	061a      	lsls	r2, r3, #24
 8007fd6:	d410      	bmi.n	8007ffa <__swhatbuf_r+0x3e>
 8007fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fdc:	e00e      	b.n	8007ffc <__swhatbuf_r+0x40>
 8007fde:	466a      	mov	r2, sp
 8007fe0:	f001 f854 	bl	800908c <_fstat_r>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	dbf2      	blt.n	8007fce <__swhatbuf_r+0x12>
 8007fe8:	9a01      	ldr	r2, [sp, #4]
 8007fea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ff2:	425a      	negs	r2, r3
 8007ff4:	415a      	adcs	r2, r3
 8007ff6:	602a      	str	r2, [r5, #0]
 8007ff8:	e7ee      	b.n	8007fd8 <__swhatbuf_r+0x1c>
 8007ffa:	2340      	movs	r3, #64	; 0x40
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	b016      	add	sp, #88	; 0x58
 8008002:	bd70      	pop	{r4, r5, r6, pc}

08008004 <__smakebuf_r>:
 8008004:	898b      	ldrh	r3, [r1, #12]
 8008006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008008:	079d      	lsls	r5, r3, #30
 800800a:	4606      	mov	r6, r0
 800800c:	460c      	mov	r4, r1
 800800e:	d507      	bpl.n	8008020 <__smakebuf_r+0x1c>
 8008010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	2301      	movs	r3, #1
 800801a:	6163      	str	r3, [r4, #20]
 800801c:	b002      	add	sp, #8
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	ab01      	add	r3, sp, #4
 8008022:	466a      	mov	r2, sp
 8008024:	f7ff ffca 	bl	8007fbc <__swhatbuf_r>
 8008028:	9900      	ldr	r1, [sp, #0]
 800802a:	4605      	mov	r5, r0
 800802c:	4630      	mov	r0, r6
 800802e:	f000 fcaf 	bl	8008990 <_malloc_r>
 8008032:	b948      	cbnz	r0, 8008048 <__smakebuf_r+0x44>
 8008034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008038:	059a      	lsls	r2, r3, #22
 800803a:	d4ef      	bmi.n	800801c <__smakebuf_r+0x18>
 800803c:	f023 0303 	bic.w	r3, r3, #3
 8008040:	f043 0302 	orr.w	r3, r3, #2
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	e7e3      	b.n	8008010 <__smakebuf_r+0xc>
 8008048:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <__smakebuf_r+0x7c>)
 800804a:	62b3      	str	r3, [r6, #40]	; 0x28
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	6020      	str	r0, [r4, #0]
 8008050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008054:	81a3      	strh	r3, [r4, #12]
 8008056:	9b00      	ldr	r3, [sp, #0]
 8008058:	6120      	str	r0, [r4, #16]
 800805a:	6163      	str	r3, [r4, #20]
 800805c:	9b01      	ldr	r3, [sp, #4]
 800805e:	b15b      	cbz	r3, 8008078 <__smakebuf_r+0x74>
 8008060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008064:	4630      	mov	r0, r6
 8008066:	f001 f823 	bl	80090b0 <_isatty_r>
 800806a:	b128      	cbz	r0, 8008078 <__smakebuf_r+0x74>
 800806c:	89a3      	ldrh	r3, [r4, #12]
 800806e:	f023 0303 	bic.w	r3, r3, #3
 8008072:	f043 0301 	orr.w	r3, r3, #1
 8008076:	81a3      	strh	r3, [r4, #12]
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	431d      	orrs	r5, r3
 800807c:	81a5      	strh	r5, [r4, #12]
 800807e:	e7cd      	b.n	800801c <__smakebuf_r+0x18>
 8008080:	080077f9 	.word	0x080077f9

08008084 <malloc>:
 8008084:	4b02      	ldr	r3, [pc, #8]	; (8008090 <malloc+0xc>)
 8008086:	4601      	mov	r1, r0
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	f000 bc81 	b.w	8008990 <_malloc_r>
 800808e:	bf00      	nop
 8008090:	2000000c 	.word	0x2000000c

08008094 <__ascii_mbtowc>:
 8008094:	b082      	sub	sp, #8
 8008096:	b901      	cbnz	r1, 800809a <__ascii_mbtowc+0x6>
 8008098:	a901      	add	r1, sp, #4
 800809a:	b142      	cbz	r2, 80080ae <__ascii_mbtowc+0x1a>
 800809c:	b14b      	cbz	r3, 80080b2 <__ascii_mbtowc+0x1e>
 800809e:	7813      	ldrb	r3, [r2, #0]
 80080a0:	600b      	str	r3, [r1, #0]
 80080a2:	7812      	ldrb	r2, [r2, #0]
 80080a4:	1c10      	adds	r0, r2, #0
 80080a6:	bf18      	it	ne
 80080a8:	2001      	movne	r0, #1
 80080aa:	b002      	add	sp, #8
 80080ac:	4770      	bx	lr
 80080ae:	4610      	mov	r0, r2
 80080b0:	e7fb      	b.n	80080aa <__ascii_mbtowc+0x16>
 80080b2:	f06f 0001 	mvn.w	r0, #1
 80080b6:	e7f8      	b.n	80080aa <__ascii_mbtowc+0x16>

080080b8 <memchr>:
 80080b8:	b510      	push	{r4, lr}
 80080ba:	b2c9      	uxtb	r1, r1
 80080bc:	4402      	add	r2, r0
 80080be:	4290      	cmp	r0, r2
 80080c0:	4603      	mov	r3, r0
 80080c2:	d101      	bne.n	80080c8 <memchr+0x10>
 80080c4:	2300      	movs	r3, #0
 80080c6:	e003      	b.n	80080d0 <memchr+0x18>
 80080c8:	781c      	ldrb	r4, [r3, #0]
 80080ca:	3001      	adds	r0, #1
 80080cc:	428c      	cmp	r4, r1
 80080ce:	d1f6      	bne.n	80080be <memchr+0x6>
 80080d0:	4618      	mov	r0, r3
 80080d2:	bd10      	pop	{r4, pc}

080080d4 <memcpy>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	1e43      	subs	r3, r0, #1
 80080d8:	440a      	add	r2, r1
 80080da:	4291      	cmp	r1, r2
 80080dc:	d100      	bne.n	80080e0 <memcpy+0xc>
 80080de:	bd10      	pop	{r4, pc}
 80080e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e8:	e7f7      	b.n	80080da <memcpy+0x6>

080080ea <_Balloc>:
 80080ea:	b570      	push	{r4, r5, r6, lr}
 80080ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080ee:	4604      	mov	r4, r0
 80080f0:	460e      	mov	r6, r1
 80080f2:	b93d      	cbnz	r5, 8008104 <_Balloc+0x1a>
 80080f4:	2010      	movs	r0, #16
 80080f6:	f7ff ffc5 	bl	8008084 <malloc>
 80080fa:	6260      	str	r0, [r4, #36]	; 0x24
 80080fc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008100:	6005      	str	r5, [r0, #0]
 8008102:	60c5      	str	r5, [r0, #12]
 8008104:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008106:	68eb      	ldr	r3, [r5, #12]
 8008108:	b183      	cbz	r3, 800812c <_Balloc+0x42>
 800810a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008112:	b9b8      	cbnz	r0, 8008144 <_Balloc+0x5a>
 8008114:	2101      	movs	r1, #1
 8008116:	fa01 f506 	lsl.w	r5, r1, r6
 800811a:	1d6a      	adds	r2, r5, #5
 800811c:	0092      	lsls	r2, r2, #2
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fbdc 	bl	80088dc <_calloc_r>
 8008124:	b160      	cbz	r0, 8008140 <_Balloc+0x56>
 8008126:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800812a:	e00e      	b.n	800814a <_Balloc+0x60>
 800812c:	2221      	movs	r2, #33	; 0x21
 800812e:	2104      	movs	r1, #4
 8008130:	4620      	mov	r0, r4
 8008132:	f000 fbd3 	bl	80088dc <_calloc_r>
 8008136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008138:	60e8      	str	r0, [r5, #12]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e4      	bne.n	800810a <_Balloc+0x20>
 8008140:	2000      	movs	r0, #0
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	6802      	ldr	r2, [r0, #0]
 8008146:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800814a:	2300      	movs	r3, #0
 800814c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008150:	e7f7      	b.n	8008142 <_Balloc+0x58>

08008152 <_Bfree>:
 8008152:	b570      	push	{r4, r5, r6, lr}
 8008154:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008156:	4606      	mov	r6, r0
 8008158:	460d      	mov	r5, r1
 800815a:	b93c      	cbnz	r4, 800816c <_Bfree+0x1a>
 800815c:	2010      	movs	r0, #16
 800815e:	f7ff ff91 	bl	8008084 <malloc>
 8008162:	6270      	str	r0, [r6, #36]	; 0x24
 8008164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008168:	6004      	str	r4, [r0, #0]
 800816a:	60c4      	str	r4, [r0, #12]
 800816c:	b13d      	cbz	r5, 800817e <_Bfree+0x2c>
 800816e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008170:	686a      	ldr	r2, [r5, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008178:	6029      	str	r1, [r5, #0]
 800817a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800817e:	bd70      	pop	{r4, r5, r6, pc}

08008180 <__multadd>:
 8008180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008184:	461f      	mov	r7, r3
 8008186:	4606      	mov	r6, r0
 8008188:	460c      	mov	r4, r1
 800818a:	2300      	movs	r3, #0
 800818c:	690d      	ldr	r5, [r1, #16]
 800818e:	f101 0c14 	add.w	ip, r1, #20
 8008192:	f8dc 0000 	ldr.w	r0, [ip]
 8008196:	3301      	adds	r3, #1
 8008198:	b281      	uxth	r1, r0
 800819a:	fb02 7101 	mla	r1, r2, r1, r7
 800819e:	0c00      	lsrs	r0, r0, #16
 80081a0:	0c0f      	lsrs	r7, r1, #16
 80081a2:	fb02 7000 	mla	r0, r2, r0, r7
 80081a6:	b289      	uxth	r1, r1
 80081a8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80081ac:	429d      	cmp	r5, r3
 80081ae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80081b2:	f84c 1b04 	str.w	r1, [ip], #4
 80081b6:	dcec      	bgt.n	8008192 <__multadd+0x12>
 80081b8:	b1d7      	cbz	r7, 80081f0 <__multadd+0x70>
 80081ba:	68a3      	ldr	r3, [r4, #8]
 80081bc:	42ab      	cmp	r3, r5
 80081be:	dc12      	bgt.n	80081e6 <__multadd+0x66>
 80081c0:	6861      	ldr	r1, [r4, #4]
 80081c2:	4630      	mov	r0, r6
 80081c4:	3101      	adds	r1, #1
 80081c6:	f7ff ff90 	bl	80080ea <_Balloc>
 80081ca:	4680      	mov	r8, r0
 80081cc:	6922      	ldr	r2, [r4, #16]
 80081ce:	f104 010c 	add.w	r1, r4, #12
 80081d2:	3202      	adds	r2, #2
 80081d4:	0092      	lsls	r2, r2, #2
 80081d6:	300c      	adds	r0, #12
 80081d8:	f7ff ff7c 	bl	80080d4 <memcpy>
 80081dc:	4621      	mov	r1, r4
 80081de:	4630      	mov	r0, r6
 80081e0:	f7ff ffb7 	bl	8008152 <_Bfree>
 80081e4:	4644      	mov	r4, r8
 80081e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081ea:	3501      	adds	r5, #1
 80081ec:	615f      	str	r7, [r3, #20]
 80081ee:	6125      	str	r5, [r4, #16]
 80081f0:	4620      	mov	r0, r4
 80081f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081f6 <__s2b>:
 80081f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081fa:	4615      	mov	r5, r2
 80081fc:	2209      	movs	r2, #9
 80081fe:	461f      	mov	r7, r3
 8008200:	3308      	adds	r3, #8
 8008202:	460c      	mov	r4, r1
 8008204:	fb93 f3f2 	sdiv	r3, r3, r2
 8008208:	4606      	mov	r6, r0
 800820a:	2201      	movs	r2, #1
 800820c:	2100      	movs	r1, #0
 800820e:	429a      	cmp	r2, r3
 8008210:	db20      	blt.n	8008254 <__s2b+0x5e>
 8008212:	4630      	mov	r0, r6
 8008214:	f7ff ff69 	bl	80080ea <_Balloc>
 8008218:	9b08      	ldr	r3, [sp, #32]
 800821a:	2d09      	cmp	r5, #9
 800821c:	6143      	str	r3, [r0, #20]
 800821e:	f04f 0301 	mov.w	r3, #1
 8008222:	6103      	str	r3, [r0, #16]
 8008224:	dd19      	ble.n	800825a <__s2b+0x64>
 8008226:	f104 0809 	add.w	r8, r4, #9
 800822a:	46c1      	mov	r9, r8
 800822c:	442c      	add	r4, r5
 800822e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008232:	4601      	mov	r1, r0
 8008234:	3b30      	subs	r3, #48	; 0x30
 8008236:	220a      	movs	r2, #10
 8008238:	4630      	mov	r0, r6
 800823a:	f7ff ffa1 	bl	8008180 <__multadd>
 800823e:	45a1      	cmp	r9, r4
 8008240:	d1f5      	bne.n	800822e <__s2b+0x38>
 8008242:	eb08 0405 	add.w	r4, r8, r5
 8008246:	3c08      	subs	r4, #8
 8008248:	1b2d      	subs	r5, r5, r4
 800824a:	1963      	adds	r3, r4, r5
 800824c:	42bb      	cmp	r3, r7
 800824e:	db07      	blt.n	8008260 <__s2b+0x6a>
 8008250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008254:	0052      	lsls	r2, r2, #1
 8008256:	3101      	adds	r1, #1
 8008258:	e7d9      	b.n	800820e <__s2b+0x18>
 800825a:	340a      	adds	r4, #10
 800825c:	2509      	movs	r5, #9
 800825e:	e7f3      	b.n	8008248 <__s2b+0x52>
 8008260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008264:	4601      	mov	r1, r0
 8008266:	3b30      	subs	r3, #48	; 0x30
 8008268:	220a      	movs	r2, #10
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff ff88 	bl	8008180 <__multadd>
 8008270:	e7eb      	b.n	800824a <__s2b+0x54>

08008272 <__hi0bits>:
 8008272:	0c02      	lsrs	r2, r0, #16
 8008274:	0412      	lsls	r2, r2, #16
 8008276:	4603      	mov	r3, r0
 8008278:	b9b2      	cbnz	r2, 80082a8 <__hi0bits+0x36>
 800827a:	0403      	lsls	r3, r0, #16
 800827c:	2010      	movs	r0, #16
 800827e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008282:	bf04      	itt	eq
 8008284:	021b      	lsleq	r3, r3, #8
 8008286:	3008      	addeq	r0, #8
 8008288:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800828c:	bf04      	itt	eq
 800828e:	011b      	lsleq	r3, r3, #4
 8008290:	3004      	addeq	r0, #4
 8008292:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008296:	bf04      	itt	eq
 8008298:	009b      	lsleq	r3, r3, #2
 800829a:	3002      	addeq	r0, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	db06      	blt.n	80082ae <__hi0bits+0x3c>
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	d503      	bpl.n	80082ac <__hi0bits+0x3a>
 80082a4:	3001      	adds	r0, #1
 80082a6:	4770      	bx	lr
 80082a8:	2000      	movs	r0, #0
 80082aa:	e7e8      	b.n	800827e <__hi0bits+0xc>
 80082ac:	2020      	movs	r0, #32
 80082ae:	4770      	bx	lr

080082b0 <__lo0bits>:
 80082b0:	6803      	ldr	r3, [r0, #0]
 80082b2:	4601      	mov	r1, r0
 80082b4:	f013 0207 	ands.w	r2, r3, #7
 80082b8:	d00b      	beq.n	80082d2 <__lo0bits+0x22>
 80082ba:	07da      	lsls	r2, r3, #31
 80082bc:	d423      	bmi.n	8008306 <__lo0bits+0x56>
 80082be:	0798      	lsls	r0, r3, #30
 80082c0:	bf49      	itett	mi
 80082c2:	085b      	lsrmi	r3, r3, #1
 80082c4:	089b      	lsrpl	r3, r3, #2
 80082c6:	2001      	movmi	r0, #1
 80082c8:	600b      	strmi	r3, [r1, #0]
 80082ca:	bf5c      	itt	pl
 80082cc:	600b      	strpl	r3, [r1, #0]
 80082ce:	2002      	movpl	r0, #2
 80082d0:	4770      	bx	lr
 80082d2:	b298      	uxth	r0, r3
 80082d4:	b9a8      	cbnz	r0, 8008302 <__lo0bits+0x52>
 80082d6:	2010      	movs	r0, #16
 80082d8:	0c1b      	lsrs	r3, r3, #16
 80082da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082de:	bf04      	itt	eq
 80082e0:	0a1b      	lsreq	r3, r3, #8
 80082e2:	3008      	addeq	r0, #8
 80082e4:	071a      	lsls	r2, r3, #28
 80082e6:	bf04      	itt	eq
 80082e8:	091b      	lsreq	r3, r3, #4
 80082ea:	3004      	addeq	r0, #4
 80082ec:	079a      	lsls	r2, r3, #30
 80082ee:	bf04      	itt	eq
 80082f0:	089b      	lsreq	r3, r3, #2
 80082f2:	3002      	addeq	r0, #2
 80082f4:	07da      	lsls	r2, r3, #31
 80082f6:	d402      	bmi.n	80082fe <__lo0bits+0x4e>
 80082f8:	085b      	lsrs	r3, r3, #1
 80082fa:	d006      	beq.n	800830a <__lo0bits+0x5a>
 80082fc:	3001      	adds	r0, #1
 80082fe:	600b      	str	r3, [r1, #0]
 8008300:	4770      	bx	lr
 8008302:	4610      	mov	r0, r2
 8008304:	e7e9      	b.n	80082da <__lo0bits+0x2a>
 8008306:	2000      	movs	r0, #0
 8008308:	4770      	bx	lr
 800830a:	2020      	movs	r0, #32
 800830c:	4770      	bx	lr

0800830e <__i2b>:
 800830e:	b510      	push	{r4, lr}
 8008310:	460c      	mov	r4, r1
 8008312:	2101      	movs	r1, #1
 8008314:	f7ff fee9 	bl	80080ea <_Balloc>
 8008318:	2201      	movs	r2, #1
 800831a:	6144      	str	r4, [r0, #20]
 800831c:	6102      	str	r2, [r0, #16]
 800831e:	bd10      	pop	{r4, pc}

08008320 <__multiply>:
 8008320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4614      	mov	r4, r2
 8008326:	690a      	ldr	r2, [r1, #16]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	4688      	mov	r8, r1
 800832c:	429a      	cmp	r2, r3
 800832e:	bfbe      	ittt	lt
 8008330:	460b      	movlt	r3, r1
 8008332:	46a0      	movlt	r8, r4
 8008334:	461c      	movlt	r4, r3
 8008336:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800833a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800833e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008342:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008346:	eb07 0609 	add.w	r6, r7, r9
 800834a:	42b3      	cmp	r3, r6
 800834c:	bfb8      	it	lt
 800834e:	3101      	addlt	r1, #1
 8008350:	f7ff fecb 	bl	80080ea <_Balloc>
 8008354:	f100 0514 	add.w	r5, r0, #20
 8008358:	462b      	mov	r3, r5
 800835a:	2200      	movs	r2, #0
 800835c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008360:	4573      	cmp	r3, lr
 8008362:	d316      	bcc.n	8008392 <__multiply+0x72>
 8008364:	f104 0214 	add.w	r2, r4, #20
 8008368:	f108 0114 	add.w	r1, r8, #20
 800836c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008370:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	9b00      	ldr	r3, [sp, #0]
 8008378:	9201      	str	r2, [sp, #4]
 800837a:	4293      	cmp	r3, r2
 800837c:	d80c      	bhi.n	8008398 <__multiply+0x78>
 800837e:	2e00      	cmp	r6, #0
 8008380:	dd03      	ble.n	800838a <__multiply+0x6a>
 8008382:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008386:	2b00      	cmp	r3, #0
 8008388:	d05d      	beq.n	8008446 <__multiply+0x126>
 800838a:	6106      	str	r6, [r0, #16]
 800838c:	b003      	add	sp, #12
 800838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008392:	f843 2b04 	str.w	r2, [r3], #4
 8008396:	e7e3      	b.n	8008360 <__multiply+0x40>
 8008398:	f8b2 b000 	ldrh.w	fp, [r2]
 800839c:	f1bb 0f00 	cmp.w	fp, #0
 80083a0:	d023      	beq.n	80083ea <__multiply+0xca>
 80083a2:	4689      	mov	r9, r1
 80083a4:	46ac      	mov	ip, r5
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	f859 4b04 	ldr.w	r4, [r9], #4
 80083ae:	f8dc a000 	ldr.w	sl, [ip]
 80083b2:	b2a3      	uxth	r3, r4
 80083b4:	fa1f fa8a 	uxth.w	sl, sl
 80083b8:	fb0b a303 	mla	r3, fp, r3, sl
 80083bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083c0:	f8dc 4000 	ldr.w	r4, [ip]
 80083c4:	4443      	add	r3, r8
 80083c6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083ca:	fb0b 840a 	mla	r4, fp, sl, r8
 80083ce:	46e2      	mov	sl, ip
 80083d0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80083da:	454f      	cmp	r7, r9
 80083dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083e0:	f84a 3b04 	str.w	r3, [sl], #4
 80083e4:	d82b      	bhi.n	800843e <__multiply+0x11e>
 80083e6:	f8cc 8004 	str.w	r8, [ip, #4]
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	3204      	adds	r2, #4
 80083ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80083f2:	f1ba 0f00 	cmp.w	sl, #0
 80083f6:	d020      	beq.n	800843a <__multiply+0x11a>
 80083f8:	4689      	mov	r9, r1
 80083fa:	46a8      	mov	r8, r5
 80083fc:	f04f 0b00 	mov.w	fp, #0
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	f8b9 c000 	ldrh.w	ip, [r9]
 8008406:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800840a:	b29b      	uxth	r3, r3
 800840c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008410:	46c4      	mov	ip, r8
 8008412:	445c      	add	r4, fp
 8008414:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008418:	f84c 3b04 	str.w	r3, [ip], #4
 800841c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008420:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008424:	0c1b      	lsrs	r3, r3, #16
 8008426:	fb0a b303 	mla	r3, sl, r3, fp
 800842a:	454f      	cmp	r7, r9
 800842c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008430:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008434:	d805      	bhi.n	8008442 <__multiply+0x122>
 8008436:	f8c8 3004 	str.w	r3, [r8, #4]
 800843a:	3504      	adds	r5, #4
 800843c:	e79b      	b.n	8008376 <__multiply+0x56>
 800843e:	46d4      	mov	ip, sl
 8008440:	e7b3      	b.n	80083aa <__multiply+0x8a>
 8008442:	46e0      	mov	r8, ip
 8008444:	e7dd      	b.n	8008402 <__multiply+0xe2>
 8008446:	3e01      	subs	r6, #1
 8008448:	e799      	b.n	800837e <__multiply+0x5e>
	...

0800844c <__pow5mult>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	4615      	mov	r5, r2
 8008452:	f012 0203 	ands.w	r2, r2, #3
 8008456:	4606      	mov	r6, r0
 8008458:	460f      	mov	r7, r1
 800845a:	d007      	beq.n	800846c <__pow5mult+0x20>
 800845c:	4c21      	ldr	r4, [pc, #132]	; (80084e4 <__pow5mult+0x98>)
 800845e:	3a01      	subs	r2, #1
 8008460:	2300      	movs	r3, #0
 8008462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008466:	f7ff fe8b 	bl	8008180 <__multadd>
 800846a:	4607      	mov	r7, r0
 800846c:	10ad      	asrs	r5, r5, #2
 800846e:	d035      	beq.n	80084dc <__pow5mult+0x90>
 8008470:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008472:	b93c      	cbnz	r4, 8008484 <__pow5mult+0x38>
 8008474:	2010      	movs	r0, #16
 8008476:	f7ff fe05 	bl	8008084 <malloc>
 800847a:	6270      	str	r0, [r6, #36]	; 0x24
 800847c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008480:	6004      	str	r4, [r0, #0]
 8008482:	60c4      	str	r4, [r0, #12]
 8008484:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800848c:	b94c      	cbnz	r4, 80084a2 <__pow5mult+0x56>
 800848e:	f240 2171 	movw	r1, #625	; 0x271
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff ff3b 	bl	800830e <__i2b>
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	f8c8 0008 	str.w	r0, [r8, #8]
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	f04f 0800 	mov.w	r8, #0
 80084a6:	07eb      	lsls	r3, r5, #31
 80084a8:	d50a      	bpl.n	80084c0 <__pow5mult+0x74>
 80084aa:	4639      	mov	r1, r7
 80084ac:	4622      	mov	r2, r4
 80084ae:	4630      	mov	r0, r6
 80084b0:	f7ff ff36 	bl	8008320 <__multiply>
 80084b4:	4681      	mov	r9, r0
 80084b6:	4639      	mov	r1, r7
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7ff fe4a 	bl	8008152 <_Bfree>
 80084be:	464f      	mov	r7, r9
 80084c0:	106d      	asrs	r5, r5, #1
 80084c2:	d00b      	beq.n	80084dc <__pow5mult+0x90>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	b938      	cbnz	r0, 80084d8 <__pow5mult+0x8c>
 80084c8:	4622      	mov	r2, r4
 80084ca:	4621      	mov	r1, r4
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7ff ff27 	bl	8008320 <__multiply>
 80084d2:	6020      	str	r0, [r4, #0]
 80084d4:	f8c0 8000 	str.w	r8, [r0]
 80084d8:	4604      	mov	r4, r0
 80084da:	e7e4      	b.n	80084a6 <__pow5mult+0x5a>
 80084dc:	4638      	mov	r0, r7
 80084de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e2:	bf00      	nop
 80084e4:	08009450 	.word	0x08009450

080084e8 <__lshift>:
 80084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	460c      	mov	r4, r1
 80084ee:	4607      	mov	r7, r0
 80084f0:	4616      	mov	r6, r2
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084f8:	eb0a 0903 	add.w	r9, sl, r3
 80084fc:	6849      	ldr	r1, [r1, #4]
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	f109 0501 	add.w	r5, r9, #1
 8008504:	42ab      	cmp	r3, r5
 8008506:	db32      	blt.n	800856e <__lshift+0x86>
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff fdee 	bl	80080ea <_Balloc>
 800850e:	2300      	movs	r3, #0
 8008510:	4680      	mov	r8, r0
 8008512:	461a      	mov	r2, r3
 8008514:	f100 0114 	add.w	r1, r0, #20
 8008518:	4553      	cmp	r3, sl
 800851a:	db2b      	blt.n	8008574 <__lshift+0x8c>
 800851c:	6920      	ldr	r0, [r4, #16]
 800851e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008522:	f104 0314 	add.w	r3, r4, #20
 8008526:	f016 021f 	ands.w	r2, r6, #31
 800852a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800852e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008532:	d025      	beq.n	8008580 <__lshift+0x98>
 8008534:	2000      	movs	r0, #0
 8008536:	f1c2 0e20 	rsb	lr, r2, #32
 800853a:	468a      	mov	sl, r1
 800853c:	681e      	ldr	r6, [r3, #0]
 800853e:	4096      	lsls	r6, r2
 8008540:	4330      	orrs	r0, r6
 8008542:	f84a 0b04 	str.w	r0, [sl], #4
 8008546:	f853 0b04 	ldr.w	r0, [r3], #4
 800854a:	459c      	cmp	ip, r3
 800854c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008550:	d814      	bhi.n	800857c <__lshift+0x94>
 8008552:	6048      	str	r0, [r1, #4]
 8008554:	b108      	cbz	r0, 800855a <__lshift+0x72>
 8008556:	f109 0502 	add.w	r5, r9, #2
 800855a:	3d01      	subs	r5, #1
 800855c:	4638      	mov	r0, r7
 800855e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008562:	4621      	mov	r1, r4
 8008564:	f7ff fdf5 	bl	8008152 <_Bfree>
 8008568:	4640      	mov	r0, r8
 800856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856e:	3101      	adds	r1, #1
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	e7c7      	b.n	8008504 <__lshift+0x1c>
 8008574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008578:	3301      	adds	r3, #1
 800857a:	e7cd      	b.n	8008518 <__lshift+0x30>
 800857c:	4651      	mov	r1, sl
 800857e:	e7dc      	b.n	800853a <__lshift+0x52>
 8008580:	3904      	subs	r1, #4
 8008582:	f853 2b04 	ldr.w	r2, [r3], #4
 8008586:	459c      	cmp	ip, r3
 8008588:	f841 2f04 	str.w	r2, [r1, #4]!
 800858c:	d8f9      	bhi.n	8008582 <__lshift+0x9a>
 800858e:	e7e4      	b.n	800855a <__lshift+0x72>

08008590 <__mcmp>:
 8008590:	6903      	ldr	r3, [r0, #16]
 8008592:	690a      	ldr	r2, [r1, #16]
 8008594:	b530      	push	{r4, r5, lr}
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	d10c      	bne.n	80085b4 <__mcmp+0x24>
 800859a:	0092      	lsls	r2, r2, #2
 800859c:	3014      	adds	r0, #20
 800859e:	3114      	adds	r1, #20
 80085a0:	1884      	adds	r4, r0, r2
 80085a2:	4411      	add	r1, r2
 80085a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085ac:	4295      	cmp	r5, r2
 80085ae:	d003      	beq.n	80085b8 <__mcmp+0x28>
 80085b0:	d305      	bcc.n	80085be <__mcmp+0x2e>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4618      	mov	r0, r3
 80085b6:	bd30      	pop	{r4, r5, pc}
 80085b8:	42a0      	cmp	r0, r4
 80085ba:	d3f3      	bcc.n	80085a4 <__mcmp+0x14>
 80085bc:	e7fa      	b.n	80085b4 <__mcmp+0x24>
 80085be:	f04f 33ff 	mov.w	r3, #4294967295
 80085c2:	e7f7      	b.n	80085b4 <__mcmp+0x24>

080085c4 <__mdiff>:
 80085c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	460d      	mov	r5, r1
 80085ca:	4607      	mov	r7, r0
 80085cc:	4611      	mov	r1, r2
 80085ce:	4628      	mov	r0, r5
 80085d0:	4614      	mov	r4, r2
 80085d2:	f7ff ffdd 	bl	8008590 <__mcmp>
 80085d6:	1e06      	subs	r6, r0, #0
 80085d8:	d108      	bne.n	80085ec <__mdiff+0x28>
 80085da:	4631      	mov	r1, r6
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff fd84 	bl	80080ea <_Balloc>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80085e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ec:	bfa4      	itt	ge
 80085ee:	4623      	movge	r3, r4
 80085f0:	462c      	movge	r4, r5
 80085f2:	4638      	mov	r0, r7
 80085f4:	6861      	ldr	r1, [r4, #4]
 80085f6:	bfa6      	itte	ge
 80085f8:	461d      	movge	r5, r3
 80085fa:	2600      	movge	r6, #0
 80085fc:	2601      	movlt	r6, #1
 80085fe:	f7ff fd74 	bl	80080ea <_Balloc>
 8008602:	f04f 0e00 	mov.w	lr, #0
 8008606:	60c6      	str	r6, [r0, #12]
 8008608:	692b      	ldr	r3, [r5, #16]
 800860a:	6926      	ldr	r6, [r4, #16]
 800860c:	f104 0214 	add.w	r2, r4, #20
 8008610:	f105 0914 	add.w	r9, r5, #20
 8008614:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008618:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800861c:	f100 0114 	add.w	r1, r0, #20
 8008620:	f852 ab04 	ldr.w	sl, [r2], #4
 8008624:	f859 5b04 	ldr.w	r5, [r9], #4
 8008628:	fa1f f38a 	uxth.w	r3, sl
 800862c:	4473      	add	r3, lr
 800862e:	b2ac      	uxth	r4, r5
 8008630:	1b1b      	subs	r3, r3, r4
 8008632:	0c2c      	lsrs	r4, r5, #16
 8008634:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008638:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800863c:	b29b      	uxth	r3, r3
 800863e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008642:	45c8      	cmp	r8, r9
 8008644:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008648:	4694      	mov	ip, r2
 800864a:	f841 4b04 	str.w	r4, [r1], #4
 800864e:	d8e7      	bhi.n	8008620 <__mdiff+0x5c>
 8008650:	45bc      	cmp	ip, r7
 8008652:	d304      	bcc.n	800865e <__mdiff+0x9a>
 8008654:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008658:	b183      	cbz	r3, 800867c <__mdiff+0xb8>
 800865a:	6106      	str	r6, [r0, #16]
 800865c:	e7c4      	b.n	80085e8 <__mdiff+0x24>
 800865e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008662:	b2a2      	uxth	r2, r4
 8008664:	4472      	add	r2, lr
 8008666:	1413      	asrs	r3, r2, #16
 8008668:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800866c:	b292      	uxth	r2, r2
 800866e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008672:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008676:	f841 2b04 	str.w	r2, [r1], #4
 800867a:	e7e9      	b.n	8008650 <__mdiff+0x8c>
 800867c:	3e01      	subs	r6, #1
 800867e:	e7e9      	b.n	8008654 <__mdiff+0x90>

08008680 <__ulp>:
 8008680:	4b10      	ldr	r3, [pc, #64]	; (80086c4 <__ulp+0x44>)
 8008682:	400b      	ands	r3, r1
 8008684:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008688:	2b00      	cmp	r3, #0
 800868a:	dd02      	ble.n	8008692 <__ulp+0x12>
 800868c:	2000      	movs	r0, #0
 800868e:	4619      	mov	r1, r3
 8008690:	4770      	bx	lr
 8008692:	425b      	negs	r3, r3
 8008694:	151b      	asrs	r3, r3, #20
 8008696:	2b13      	cmp	r3, #19
 8008698:	f04f 0000 	mov.w	r0, #0
 800869c:	f04f 0100 	mov.w	r1, #0
 80086a0:	dc04      	bgt.n	80086ac <__ulp+0x2c>
 80086a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80086a6:	fa42 f103 	asr.w	r1, r2, r3
 80086aa:	4770      	bx	lr
 80086ac:	2201      	movs	r2, #1
 80086ae:	3b14      	subs	r3, #20
 80086b0:	2b1e      	cmp	r3, #30
 80086b2:	bfce      	itee	gt
 80086b4:	4613      	movgt	r3, r2
 80086b6:	f1c3 031f 	rsble	r3, r3, #31
 80086ba:	fa02 f303 	lslle.w	r3, r2, r3
 80086be:	4618      	mov	r0, r3
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	7ff00000 	.word	0x7ff00000

080086c8 <__b2d>:
 80086c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086cc:	6907      	ldr	r7, [r0, #16]
 80086ce:	f100 0914 	add.w	r9, r0, #20
 80086d2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80086d6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80086da:	f1a7 0804 	sub.w	r8, r7, #4
 80086de:	4630      	mov	r0, r6
 80086e0:	f7ff fdc7 	bl	8008272 <__hi0bits>
 80086e4:	f1c0 0320 	rsb	r3, r0, #32
 80086e8:	280a      	cmp	r0, #10
 80086ea:	600b      	str	r3, [r1, #0]
 80086ec:	491e      	ldr	r1, [pc, #120]	; (8008768 <__b2d+0xa0>)
 80086ee:	dc17      	bgt.n	8008720 <__b2d+0x58>
 80086f0:	45c1      	cmp	r9, r8
 80086f2:	bf28      	it	cs
 80086f4:	2200      	movcs	r2, #0
 80086f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80086fa:	fa26 f30c 	lsr.w	r3, r6, ip
 80086fe:	bf38      	it	cc
 8008700:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008704:	ea43 0501 	orr.w	r5, r3, r1
 8008708:	f100 0315 	add.w	r3, r0, #21
 800870c:	fa06 f303 	lsl.w	r3, r6, r3
 8008710:	fa22 f20c 	lsr.w	r2, r2, ip
 8008714:	ea43 0402 	orr.w	r4, r3, r2
 8008718:	4620      	mov	r0, r4
 800871a:	4629      	mov	r1, r5
 800871c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008720:	45c1      	cmp	r9, r8
 8008722:	bf3a      	itte	cc
 8008724:	f1a7 0808 	subcc.w	r8, r7, #8
 8008728:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800872c:	2200      	movcs	r2, #0
 800872e:	f1b0 030b 	subs.w	r3, r0, #11
 8008732:	d015      	beq.n	8008760 <__b2d+0x98>
 8008734:	409e      	lsls	r6, r3
 8008736:	f1c3 0720 	rsb	r7, r3, #32
 800873a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800873e:	fa22 f107 	lsr.w	r1, r2, r7
 8008742:	45c8      	cmp	r8, r9
 8008744:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008748:	ea46 0501 	orr.w	r5, r6, r1
 800874c:	bf94      	ite	ls
 800874e:	2100      	movls	r1, #0
 8008750:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008754:	fa02 f003 	lsl.w	r0, r2, r3
 8008758:	40f9      	lsrs	r1, r7
 800875a:	ea40 0401 	orr.w	r4, r0, r1
 800875e:	e7db      	b.n	8008718 <__b2d+0x50>
 8008760:	ea46 0501 	orr.w	r5, r6, r1
 8008764:	4614      	mov	r4, r2
 8008766:	e7d7      	b.n	8008718 <__b2d+0x50>
 8008768:	3ff00000 	.word	0x3ff00000

0800876c <__d2b>:
 800876c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008770:	461c      	mov	r4, r3
 8008772:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008776:	2101      	movs	r1, #1
 8008778:	4690      	mov	r8, r2
 800877a:	f7ff fcb6 	bl	80080ea <_Balloc>
 800877e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008782:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008786:	4607      	mov	r7, r0
 8008788:	bb34      	cbnz	r4, 80087d8 <__d2b+0x6c>
 800878a:	9201      	str	r2, [sp, #4]
 800878c:	f1b8 0200 	subs.w	r2, r8, #0
 8008790:	d027      	beq.n	80087e2 <__d2b+0x76>
 8008792:	a802      	add	r0, sp, #8
 8008794:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008798:	f7ff fd8a 	bl	80082b0 <__lo0bits>
 800879c:	9900      	ldr	r1, [sp, #0]
 800879e:	b1f0      	cbz	r0, 80087de <__d2b+0x72>
 80087a0:	9a01      	ldr	r2, [sp, #4]
 80087a2:	f1c0 0320 	rsb	r3, r0, #32
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	430b      	orrs	r3, r1
 80087ac:	40c2      	lsrs	r2, r0
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	9201      	str	r2, [sp, #4]
 80087b2:	9b01      	ldr	r3, [sp, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bf14      	ite	ne
 80087b8:	2102      	movne	r1, #2
 80087ba:	2101      	moveq	r1, #1
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	6139      	str	r1, [r7, #16]
 80087c0:	b1c4      	cbz	r4, 80087f4 <__d2b+0x88>
 80087c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80087c6:	4404      	add	r4, r0
 80087c8:	6034      	str	r4, [r6, #0]
 80087ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087ce:	6028      	str	r0, [r5, #0]
 80087d0:	4638      	mov	r0, r7
 80087d2:	b002      	add	sp, #8
 80087d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80087dc:	e7d5      	b.n	800878a <__d2b+0x1e>
 80087de:	6179      	str	r1, [r7, #20]
 80087e0:	e7e7      	b.n	80087b2 <__d2b+0x46>
 80087e2:	a801      	add	r0, sp, #4
 80087e4:	f7ff fd64 	bl	80082b0 <__lo0bits>
 80087e8:	2101      	movs	r1, #1
 80087ea:	9b01      	ldr	r3, [sp, #4]
 80087ec:	6139      	str	r1, [r7, #16]
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	3020      	adds	r0, #32
 80087f2:	e7e5      	b.n	80087c0 <__d2b+0x54>
 80087f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80087fc:	6030      	str	r0, [r6, #0]
 80087fe:	6918      	ldr	r0, [r3, #16]
 8008800:	f7ff fd37 	bl	8008272 <__hi0bits>
 8008804:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008808:	e7e1      	b.n	80087ce <__d2b+0x62>

0800880a <__ratio>:
 800880a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880e:	4688      	mov	r8, r1
 8008810:	4669      	mov	r1, sp
 8008812:	4681      	mov	r9, r0
 8008814:	f7ff ff58 	bl	80086c8 <__b2d>
 8008818:	468b      	mov	fp, r1
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	4640      	mov	r0, r8
 8008820:	a901      	add	r1, sp, #4
 8008822:	f7ff ff51 	bl	80086c8 <__b2d>
 8008826:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800882a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800882e:	460d      	mov	r5, r1
 8008830:	eba3 0c02 	sub.w	ip, r3, r2
 8008834:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfd5      	itete	le
 8008842:	460a      	movle	r2, r1
 8008844:	463a      	movgt	r2, r7
 8008846:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800884a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800884e:	bfd8      	it	le
 8008850:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008854:	462b      	mov	r3, r5
 8008856:	4602      	mov	r2, r0
 8008858:	4659      	mov	r1, fp
 800885a:	4630      	mov	r0, r6
 800885c:	f7f7 ff66 	bl	800072c <__aeabi_ddiv>
 8008860:	b003      	add	sp, #12
 8008862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008866 <__copybits>:
 8008866:	3901      	subs	r1, #1
 8008868:	b510      	push	{r4, lr}
 800886a:	1149      	asrs	r1, r1, #5
 800886c:	6914      	ldr	r4, [r2, #16]
 800886e:	3101      	adds	r1, #1
 8008870:	f102 0314 	add.w	r3, r2, #20
 8008874:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008878:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800887c:	42a3      	cmp	r3, r4
 800887e:	4602      	mov	r2, r0
 8008880:	d303      	bcc.n	800888a <__copybits+0x24>
 8008882:	2300      	movs	r3, #0
 8008884:	428a      	cmp	r2, r1
 8008886:	d305      	bcc.n	8008894 <__copybits+0x2e>
 8008888:	bd10      	pop	{r4, pc}
 800888a:	f853 2b04 	ldr.w	r2, [r3], #4
 800888e:	f840 2b04 	str.w	r2, [r0], #4
 8008892:	e7f3      	b.n	800887c <__copybits+0x16>
 8008894:	f842 3b04 	str.w	r3, [r2], #4
 8008898:	e7f4      	b.n	8008884 <__copybits+0x1e>

0800889a <__any_on>:
 800889a:	f100 0214 	add.w	r2, r0, #20
 800889e:	6900      	ldr	r0, [r0, #16]
 80088a0:	114b      	asrs	r3, r1, #5
 80088a2:	4298      	cmp	r0, r3
 80088a4:	b510      	push	{r4, lr}
 80088a6:	db11      	blt.n	80088cc <__any_on+0x32>
 80088a8:	dd0a      	ble.n	80088c0 <__any_on+0x26>
 80088aa:	f011 011f 	ands.w	r1, r1, #31
 80088ae:	d007      	beq.n	80088c0 <__any_on+0x26>
 80088b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80088b4:	fa24 f001 	lsr.w	r0, r4, r1
 80088b8:	fa00 f101 	lsl.w	r1, r0, r1
 80088bc:	428c      	cmp	r4, r1
 80088be:	d10b      	bne.n	80088d8 <__any_on+0x3e>
 80088c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d803      	bhi.n	80088d0 <__any_on+0x36>
 80088c8:	2000      	movs	r0, #0
 80088ca:	bd10      	pop	{r4, pc}
 80088cc:	4603      	mov	r3, r0
 80088ce:	e7f7      	b.n	80088c0 <__any_on+0x26>
 80088d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088d4:	2900      	cmp	r1, #0
 80088d6:	d0f5      	beq.n	80088c4 <__any_on+0x2a>
 80088d8:	2001      	movs	r0, #1
 80088da:	e7f6      	b.n	80088ca <__any_on+0x30>

080088dc <_calloc_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	fb02 f401 	mul.w	r4, r2, r1
 80088e2:	4621      	mov	r1, r4
 80088e4:	f000 f854 	bl	8008990 <_malloc_r>
 80088e8:	4605      	mov	r5, r0
 80088ea:	b118      	cbz	r0, 80088f4 <_calloc_r+0x18>
 80088ec:	4622      	mov	r2, r4
 80088ee:	2100      	movs	r1, #0
 80088f0:	f7fc fa14 	bl	8004d1c <memset>
 80088f4:	4628      	mov	r0, r5
 80088f6:	bd38      	pop	{r3, r4, r5, pc}

080088f8 <_free_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4605      	mov	r5, r0
 80088fc:	2900      	cmp	r1, #0
 80088fe:	d043      	beq.n	8008988 <_free_r+0x90>
 8008900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008904:	1f0c      	subs	r4, r1, #4
 8008906:	2b00      	cmp	r3, #0
 8008908:	bfb8      	it	lt
 800890a:	18e4      	addlt	r4, r4, r3
 800890c:	f000 fc0b 	bl	8009126 <__malloc_lock>
 8008910:	4a1e      	ldr	r2, [pc, #120]	; (800898c <_free_r+0x94>)
 8008912:	6813      	ldr	r3, [r2, #0]
 8008914:	4610      	mov	r0, r2
 8008916:	b933      	cbnz	r3, 8008926 <_free_r+0x2e>
 8008918:	6063      	str	r3, [r4, #4]
 800891a:	6014      	str	r4, [r2, #0]
 800891c:	4628      	mov	r0, r5
 800891e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008922:	f000 bc01 	b.w	8009128 <__malloc_unlock>
 8008926:	42a3      	cmp	r3, r4
 8008928:	d90b      	bls.n	8008942 <_free_r+0x4a>
 800892a:	6821      	ldr	r1, [r4, #0]
 800892c:	1862      	adds	r2, r4, r1
 800892e:	4293      	cmp	r3, r2
 8008930:	bf01      	itttt	eq
 8008932:	681a      	ldreq	r2, [r3, #0]
 8008934:	685b      	ldreq	r3, [r3, #4]
 8008936:	1852      	addeq	r2, r2, r1
 8008938:	6022      	streq	r2, [r4, #0]
 800893a:	6063      	str	r3, [r4, #4]
 800893c:	6004      	str	r4, [r0, #0]
 800893e:	e7ed      	b.n	800891c <_free_r+0x24>
 8008940:	4613      	mov	r3, r2
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	b10a      	cbz	r2, 800894a <_free_r+0x52>
 8008946:	42a2      	cmp	r2, r4
 8008948:	d9fa      	bls.n	8008940 <_free_r+0x48>
 800894a:	6819      	ldr	r1, [r3, #0]
 800894c:	1858      	adds	r0, r3, r1
 800894e:	42a0      	cmp	r0, r4
 8008950:	d10b      	bne.n	800896a <_free_r+0x72>
 8008952:	6820      	ldr	r0, [r4, #0]
 8008954:	4401      	add	r1, r0
 8008956:	1858      	adds	r0, r3, r1
 8008958:	4282      	cmp	r2, r0
 800895a:	6019      	str	r1, [r3, #0]
 800895c:	d1de      	bne.n	800891c <_free_r+0x24>
 800895e:	6810      	ldr	r0, [r2, #0]
 8008960:	6852      	ldr	r2, [r2, #4]
 8008962:	4401      	add	r1, r0
 8008964:	6019      	str	r1, [r3, #0]
 8008966:	605a      	str	r2, [r3, #4]
 8008968:	e7d8      	b.n	800891c <_free_r+0x24>
 800896a:	d902      	bls.n	8008972 <_free_r+0x7a>
 800896c:	230c      	movs	r3, #12
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	e7d4      	b.n	800891c <_free_r+0x24>
 8008972:	6820      	ldr	r0, [r4, #0]
 8008974:	1821      	adds	r1, r4, r0
 8008976:	428a      	cmp	r2, r1
 8008978:	bf01      	itttt	eq
 800897a:	6811      	ldreq	r1, [r2, #0]
 800897c:	6852      	ldreq	r2, [r2, #4]
 800897e:	1809      	addeq	r1, r1, r0
 8008980:	6021      	streq	r1, [r4, #0]
 8008982:	6062      	str	r2, [r4, #4]
 8008984:	605c      	str	r4, [r3, #4]
 8008986:	e7c9      	b.n	800891c <_free_r+0x24>
 8008988:	bd38      	pop	{r3, r4, r5, pc}
 800898a:	bf00      	nop
 800898c:	2000020c 	.word	0x2000020c

08008990 <_malloc_r>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	1ccd      	adds	r5, r1, #3
 8008994:	f025 0503 	bic.w	r5, r5, #3
 8008998:	3508      	adds	r5, #8
 800899a:	2d0c      	cmp	r5, #12
 800899c:	bf38      	it	cc
 800899e:	250c      	movcc	r5, #12
 80089a0:	2d00      	cmp	r5, #0
 80089a2:	4606      	mov	r6, r0
 80089a4:	db01      	blt.n	80089aa <_malloc_r+0x1a>
 80089a6:	42a9      	cmp	r1, r5
 80089a8:	d903      	bls.n	80089b2 <_malloc_r+0x22>
 80089aa:	230c      	movs	r3, #12
 80089ac:	6033      	str	r3, [r6, #0]
 80089ae:	2000      	movs	r0, #0
 80089b0:	bd70      	pop	{r4, r5, r6, pc}
 80089b2:	f000 fbb8 	bl	8009126 <__malloc_lock>
 80089b6:	4a21      	ldr	r2, [pc, #132]	; (8008a3c <_malloc_r+0xac>)
 80089b8:	6814      	ldr	r4, [r2, #0]
 80089ba:	4621      	mov	r1, r4
 80089bc:	b991      	cbnz	r1, 80089e4 <_malloc_r+0x54>
 80089be:	4c20      	ldr	r4, [pc, #128]	; (8008a40 <_malloc_r+0xb0>)
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	b91b      	cbnz	r3, 80089cc <_malloc_r+0x3c>
 80089c4:	4630      	mov	r0, r6
 80089c6:	f000 facd 	bl	8008f64 <_sbrk_r>
 80089ca:	6020      	str	r0, [r4, #0]
 80089cc:	4629      	mov	r1, r5
 80089ce:	4630      	mov	r0, r6
 80089d0:	f000 fac8 	bl	8008f64 <_sbrk_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d124      	bne.n	8008a22 <_malloc_r+0x92>
 80089d8:	230c      	movs	r3, #12
 80089da:	4630      	mov	r0, r6
 80089dc:	6033      	str	r3, [r6, #0]
 80089de:	f000 fba3 	bl	8009128 <__malloc_unlock>
 80089e2:	e7e4      	b.n	80089ae <_malloc_r+0x1e>
 80089e4:	680b      	ldr	r3, [r1, #0]
 80089e6:	1b5b      	subs	r3, r3, r5
 80089e8:	d418      	bmi.n	8008a1c <_malloc_r+0x8c>
 80089ea:	2b0b      	cmp	r3, #11
 80089ec:	d90f      	bls.n	8008a0e <_malloc_r+0x7e>
 80089ee:	600b      	str	r3, [r1, #0]
 80089f0:	18cc      	adds	r4, r1, r3
 80089f2:	50cd      	str	r5, [r1, r3]
 80089f4:	4630      	mov	r0, r6
 80089f6:	f000 fb97 	bl	8009128 <__malloc_unlock>
 80089fa:	f104 000b 	add.w	r0, r4, #11
 80089fe:	1d23      	adds	r3, r4, #4
 8008a00:	f020 0007 	bic.w	r0, r0, #7
 8008a04:	1ac3      	subs	r3, r0, r3
 8008a06:	d0d3      	beq.n	80089b0 <_malloc_r+0x20>
 8008a08:	425a      	negs	r2, r3
 8008a0a:	50e2      	str	r2, [r4, r3]
 8008a0c:	e7d0      	b.n	80089b0 <_malloc_r+0x20>
 8008a0e:	684b      	ldr	r3, [r1, #4]
 8008a10:	428c      	cmp	r4, r1
 8008a12:	bf16      	itet	ne
 8008a14:	6063      	strne	r3, [r4, #4]
 8008a16:	6013      	streq	r3, [r2, #0]
 8008a18:	460c      	movne	r4, r1
 8008a1a:	e7eb      	b.n	80089f4 <_malloc_r+0x64>
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	6849      	ldr	r1, [r1, #4]
 8008a20:	e7cc      	b.n	80089bc <_malloc_r+0x2c>
 8008a22:	1cc4      	adds	r4, r0, #3
 8008a24:	f024 0403 	bic.w	r4, r4, #3
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d005      	beq.n	8008a38 <_malloc_r+0xa8>
 8008a2c:	1a21      	subs	r1, r4, r0
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f000 fa98 	bl	8008f64 <_sbrk_r>
 8008a34:	3001      	adds	r0, #1
 8008a36:	d0cf      	beq.n	80089d8 <_malloc_r+0x48>
 8008a38:	6025      	str	r5, [r4, #0]
 8008a3a:	e7db      	b.n	80089f4 <_malloc_r+0x64>
 8008a3c:	2000020c 	.word	0x2000020c
 8008a40:	20000210 	.word	0x20000210

08008a44 <__ssputs_r>:
 8008a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	688e      	ldr	r6, [r1, #8]
 8008a4a:	4682      	mov	sl, r0
 8008a4c:	429e      	cmp	r6, r3
 8008a4e:	460c      	mov	r4, r1
 8008a50:	4690      	mov	r8, r2
 8008a52:	4699      	mov	r9, r3
 8008a54:	d837      	bhi.n	8008ac6 <__ssputs_r+0x82>
 8008a56:	898a      	ldrh	r2, [r1, #12]
 8008a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a5c:	d031      	beq.n	8008ac2 <__ssputs_r+0x7e>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	6825      	ldr	r5, [r4, #0]
 8008a62:	6909      	ldr	r1, [r1, #16]
 8008a64:	1a6f      	subs	r7, r5, r1
 8008a66:	6965      	ldr	r5, [r4, #20]
 8008a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a70:	f109 0301 	add.w	r3, r9, #1
 8008a74:	443b      	add	r3, r7
 8008a76:	429d      	cmp	r5, r3
 8008a78:	bf38      	it	cc
 8008a7a:	461d      	movcc	r5, r3
 8008a7c:	0553      	lsls	r3, r2, #21
 8008a7e:	d530      	bpl.n	8008ae2 <__ssputs_r+0x9e>
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7ff ff85 	bl	8008990 <_malloc_r>
 8008a86:	4606      	mov	r6, r0
 8008a88:	b950      	cbnz	r0, 8008aa0 <__ssputs_r+0x5c>
 8008a8a:	230c      	movs	r3, #12
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a90:	f8ca 3000 	str.w	r3, [sl]
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa0:	463a      	mov	r2, r7
 8008aa2:	6921      	ldr	r1, [r4, #16]
 8008aa4:	f7ff fb16 	bl	80080d4 <memcpy>
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab2:	81a3      	strh	r3, [r4, #12]
 8008ab4:	6126      	str	r6, [r4, #16]
 8008ab6:	443e      	add	r6, r7
 8008ab8:	6026      	str	r6, [r4, #0]
 8008aba:	464e      	mov	r6, r9
 8008abc:	6165      	str	r5, [r4, #20]
 8008abe:	1bed      	subs	r5, r5, r7
 8008ac0:	60a5      	str	r5, [r4, #8]
 8008ac2:	454e      	cmp	r6, r9
 8008ac4:	d900      	bls.n	8008ac8 <__ssputs_r+0x84>
 8008ac6:	464e      	mov	r6, r9
 8008ac8:	4632      	mov	r2, r6
 8008aca:	4641      	mov	r1, r8
 8008acc:	6820      	ldr	r0, [r4, #0]
 8008ace:	f000 fb11 	bl	80090f4 <memmove>
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	1b9b      	subs	r3, r3, r6
 8008ad8:	60a3      	str	r3, [r4, #8]
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	441e      	add	r6, r3
 8008ade:	6026      	str	r6, [r4, #0]
 8008ae0:	e7dc      	b.n	8008a9c <__ssputs_r+0x58>
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	f000 fb21 	bl	800912a <_realloc_r>
 8008ae8:	4606      	mov	r6, r0
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d1e2      	bne.n	8008ab4 <__ssputs_r+0x70>
 8008aee:	6921      	ldr	r1, [r4, #16]
 8008af0:	4650      	mov	r0, sl
 8008af2:	f7ff ff01 	bl	80088f8 <_free_r>
 8008af6:	e7c8      	b.n	8008a8a <__ssputs_r+0x46>

08008af8 <_svfiprintf_r>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	461d      	mov	r5, r3
 8008afe:	898b      	ldrh	r3, [r1, #12]
 8008b00:	b09d      	sub	sp, #116	; 0x74
 8008b02:	061f      	lsls	r7, r3, #24
 8008b04:	4680      	mov	r8, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	4616      	mov	r6, r2
 8008b0a:	d50f      	bpl.n	8008b2c <_svfiprintf_r+0x34>
 8008b0c:	690b      	ldr	r3, [r1, #16]
 8008b0e:	b96b      	cbnz	r3, 8008b2c <_svfiprintf_r+0x34>
 8008b10:	2140      	movs	r1, #64	; 0x40
 8008b12:	f7ff ff3d 	bl	8008990 <_malloc_r>
 8008b16:	6020      	str	r0, [r4, #0]
 8008b18:	6120      	str	r0, [r4, #16]
 8008b1a:	b928      	cbnz	r0, 8008b28 <_svfiprintf_r+0x30>
 8008b1c:	230c      	movs	r3, #12
 8008b1e:	f8c8 3000 	str.w	r3, [r8]
 8008b22:	f04f 30ff 	mov.w	r0, #4294967295
 8008b26:	e0c8      	b.n	8008cba <_svfiprintf_r+0x1c2>
 8008b28:	2340      	movs	r3, #64	; 0x40
 8008b2a:	6163      	str	r3, [r4, #20]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b30:	2320      	movs	r3, #32
 8008b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b36:	2330      	movs	r3, #48	; 0x30
 8008b38:	f04f 0b01 	mov.w	fp, #1
 8008b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b40:	9503      	str	r5, [sp, #12]
 8008b42:	4637      	mov	r7, r6
 8008b44:	463d      	mov	r5, r7
 8008b46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b4a:	b10b      	cbz	r3, 8008b50 <_svfiprintf_r+0x58>
 8008b4c:	2b25      	cmp	r3, #37	; 0x25
 8008b4e:	d13e      	bne.n	8008bce <_svfiprintf_r+0xd6>
 8008b50:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b54:	d00b      	beq.n	8008b6e <_svfiprintf_r+0x76>
 8008b56:	4653      	mov	r3, sl
 8008b58:	4632      	mov	r2, r6
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	f7ff ff71 	bl	8008a44 <__ssputs_r>
 8008b62:	3001      	adds	r0, #1
 8008b64:	f000 80a4 	beq.w	8008cb0 <_svfiprintf_r+0x1b8>
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	4453      	add	r3, sl
 8008b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b6e:	783b      	ldrb	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 809d 	beq.w	8008cb0 <_svfiprintf_r+0x1b8>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b88:	931a      	str	r3, [sp, #104]	; 0x68
 8008b8a:	462f      	mov	r7, r5
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b92:	4850      	ldr	r0, [pc, #320]	; (8008cd4 <_svfiprintf_r+0x1dc>)
 8008b94:	f7ff fa90 	bl	80080b8 <memchr>
 8008b98:	9b04      	ldr	r3, [sp, #16]
 8008b9a:	b9d0      	cbnz	r0, 8008bd2 <_svfiprintf_r+0xda>
 8008b9c:	06d9      	lsls	r1, r3, #27
 8008b9e:	bf44      	itt	mi
 8008ba0:	2220      	movmi	r2, #32
 8008ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ba6:	071a      	lsls	r2, r3, #28
 8008ba8:	bf44      	itt	mi
 8008baa:	222b      	movmi	r2, #43	; 0x2b
 8008bac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bb0:	782a      	ldrb	r2, [r5, #0]
 8008bb2:	2a2a      	cmp	r2, #42	; 0x2a
 8008bb4:	d015      	beq.n	8008be2 <_svfiprintf_r+0xea>
 8008bb6:	462f      	mov	r7, r5
 8008bb8:	2000      	movs	r0, #0
 8008bba:	250a      	movs	r5, #10
 8008bbc:	9a07      	ldr	r2, [sp, #28]
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bc4:	3b30      	subs	r3, #48	; 0x30
 8008bc6:	2b09      	cmp	r3, #9
 8008bc8:	d94d      	bls.n	8008c66 <_svfiprintf_r+0x16e>
 8008bca:	b1b8      	cbz	r0, 8008bfc <_svfiprintf_r+0x104>
 8008bcc:	e00f      	b.n	8008bee <_svfiprintf_r+0xf6>
 8008bce:	462f      	mov	r7, r5
 8008bd0:	e7b8      	b.n	8008b44 <_svfiprintf_r+0x4c>
 8008bd2:	4a40      	ldr	r2, [pc, #256]	; (8008cd4 <_svfiprintf_r+0x1dc>)
 8008bd4:	463d      	mov	r5, r7
 8008bd6:	1a80      	subs	r0, r0, r2
 8008bd8:	fa0b f000 	lsl.w	r0, fp, r0
 8008bdc:	4318      	orrs	r0, r3
 8008bde:	9004      	str	r0, [sp, #16]
 8008be0:	e7d3      	b.n	8008b8a <_svfiprintf_r+0x92>
 8008be2:	9a03      	ldr	r2, [sp, #12]
 8008be4:	1d11      	adds	r1, r2, #4
 8008be6:	6812      	ldr	r2, [r2, #0]
 8008be8:	9103      	str	r1, [sp, #12]
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	db01      	blt.n	8008bf2 <_svfiprintf_r+0xfa>
 8008bee:	9207      	str	r2, [sp, #28]
 8008bf0:	e004      	b.n	8008bfc <_svfiprintf_r+0x104>
 8008bf2:	4252      	negs	r2, r2
 8008bf4:	f043 0302 	orr.w	r3, r3, #2
 8008bf8:	9207      	str	r2, [sp, #28]
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	783b      	ldrb	r3, [r7, #0]
 8008bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8008c00:	d10c      	bne.n	8008c1c <_svfiprintf_r+0x124>
 8008c02:	787b      	ldrb	r3, [r7, #1]
 8008c04:	2b2a      	cmp	r3, #42	; 0x2a
 8008c06:	d133      	bne.n	8008c70 <_svfiprintf_r+0x178>
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	3702      	adds	r7, #2
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	9203      	str	r2, [sp, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bfb8      	it	lt
 8008c16:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c1a:	9305      	str	r3, [sp, #20]
 8008c1c:	4d2e      	ldr	r5, [pc, #184]	; (8008cd8 <_svfiprintf_r+0x1e0>)
 8008c1e:	2203      	movs	r2, #3
 8008c20:	7839      	ldrb	r1, [r7, #0]
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7ff fa48 	bl	80080b8 <memchr>
 8008c28:	b138      	cbz	r0, 8008c3a <_svfiprintf_r+0x142>
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	1b40      	subs	r0, r0, r5
 8008c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	3701      	adds	r7, #1
 8008c36:	4303      	orrs	r3, r0
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	7839      	ldrb	r1, [r7, #0]
 8008c3c:	2206      	movs	r2, #6
 8008c3e:	4827      	ldr	r0, [pc, #156]	; (8008cdc <_svfiprintf_r+0x1e4>)
 8008c40:	1c7e      	adds	r6, r7, #1
 8008c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c46:	f7ff fa37 	bl	80080b8 <memchr>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d038      	beq.n	8008cc0 <_svfiprintf_r+0x1c8>
 8008c4e:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <_svfiprintf_r+0x1e8>)
 8008c50:	bb13      	cbnz	r3, 8008c98 <_svfiprintf_r+0x1a0>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	3307      	adds	r3, #7
 8008c56:	f023 0307 	bic.w	r3, r3, #7
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c60:	444b      	add	r3, r9
 8008c62:	9309      	str	r3, [sp, #36]	; 0x24
 8008c64:	e76d      	b.n	8008b42 <_svfiprintf_r+0x4a>
 8008c66:	fb05 3202 	mla	r2, r5, r2, r3
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	460f      	mov	r7, r1
 8008c6e:	e7a6      	b.n	8008bbe <_svfiprintf_r+0xc6>
 8008c70:	2300      	movs	r3, #0
 8008c72:	250a      	movs	r5, #10
 8008c74:	4619      	mov	r1, r3
 8008c76:	3701      	adds	r7, #1
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c80:	3a30      	subs	r2, #48	; 0x30
 8008c82:	2a09      	cmp	r2, #9
 8008c84:	d903      	bls.n	8008c8e <_svfiprintf_r+0x196>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0c8      	beq.n	8008c1c <_svfiprintf_r+0x124>
 8008c8a:	9105      	str	r1, [sp, #20]
 8008c8c:	e7c6      	b.n	8008c1c <_svfiprintf_r+0x124>
 8008c8e:	fb05 2101 	mla	r1, r5, r1, r2
 8008c92:	2301      	movs	r3, #1
 8008c94:	4607      	mov	r7, r0
 8008c96:	e7f0      	b.n	8008c7a <_svfiprintf_r+0x182>
 8008c98:	ab03      	add	r3, sp, #12
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <_svfiprintf_r+0x1ec>)
 8008ca0:	a904      	add	r1, sp, #16
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f7fc f8d4 	bl	8004e50 <_printf_float>
 8008ca8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008cac:	4681      	mov	r9, r0
 8008cae:	d1d6      	bne.n	8008c5e <_svfiprintf_r+0x166>
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	065b      	lsls	r3, r3, #25
 8008cb4:	f53f af35 	bmi.w	8008b22 <_svfiprintf_r+0x2a>
 8008cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cba:	b01d      	add	sp, #116	; 0x74
 8008cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc0:	ab03      	add	r3, sp, #12
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4b07      	ldr	r3, [pc, #28]	; (8008ce4 <_svfiprintf_r+0x1ec>)
 8008cc8:	a904      	add	r1, sp, #16
 8008cca:	4640      	mov	r0, r8
 8008ccc:	f7fc fb6c 	bl	80053a8 <_printf_i>
 8008cd0:	e7ea      	b.n	8008ca8 <_svfiprintf_r+0x1b0>
 8008cd2:	bf00      	nop
 8008cd4:	0800945c 	.word	0x0800945c
 8008cd8:	08009462 	.word	0x08009462
 8008cdc:	08009466 	.word	0x08009466
 8008ce0:	08004e51 	.word	0x08004e51
 8008ce4:	08008a45 	.word	0x08008a45

08008ce8 <__sfputc_r>:
 8008ce8:	6893      	ldr	r3, [r2, #8]
 8008cea:	b410      	push	{r4}
 8008cec:	3b01      	subs	r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	6093      	str	r3, [r2, #8]
 8008cf2:	da07      	bge.n	8008d04 <__sfputc_r+0x1c>
 8008cf4:	6994      	ldr	r4, [r2, #24]
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	db01      	blt.n	8008cfe <__sfputc_r+0x16>
 8008cfa:	290a      	cmp	r1, #10
 8008cfc:	d102      	bne.n	8008d04 <__sfputc_r+0x1c>
 8008cfe:	bc10      	pop	{r4}
 8008d00:	f7fd bda4 	b.w	800684c <__swbuf_r>
 8008d04:	6813      	ldr	r3, [r2, #0]
 8008d06:	1c58      	adds	r0, r3, #1
 8008d08:	6010      	str	r0, [r2, #0]
 8008d0a:	7019      	strb	r1, [r3, #0]
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	bc10      	pop	{r4}
 8008d10:	4770      	bx	lr

08008d12 <__sfputs_r>:
 8008d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	18d5      	adds	r5, r2, r3
 8008d1c:	42ac      	cmp	r4, r5
 8008d1e:	d101      	bne.n	8008d24 <__sfputs_r+0x12>
 8008d20:	2000      	movs	r0, #0
 8008d22:	e007      	b.n	8008d34 <__sfputs_r+0x22>
 8008d24:	463a      	mov	r2, r7
 8008d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7ff ffdc 	bl	8008ce8 <__sfputc_r>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d1f3      	bne.n	8008d1c <__sfputs_r+0xa>
 8008d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d38 <_vfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	b09d      	sub	sp, #116	; 0x74
 8008d40:	4617      	mov	r7, r2
 8008d42:	461d      	mov	r5, r3
 8008d44:	4606      	mov	r6, r0
 8008d46:	b118      	cbz	r0, 8008d50 <_vfiprintf_r+0x18>
 8008d48:	6983      	ldr	r3, [r0, #24]
 8008d4a:	b90b      	cbnz	r3, 8008d50 <_vfiprintf_r+0x18>
 8008d4c:	f7fe fd70 	bl	8007830 <__sinit>
 8008d50:	4b7c      	ldr	r3, [pc, #496]	; (8008f44 <_vfiprintf_r+0x20c>)
 8008d52:	429c      	cmp	r4, r3
 8008d54:	d158      	bne.n	8008e08 <_vfiprintf_r+0xd0>
 8008d56:	6874      	ldr	r4, [r6, #4]
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	0718      	lsls	r0, r3, #28
 8008d5c:	d55e      	bpl.n	8008e1c <_vfiprintf_r+0xe4>
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d05b      	beq.n	8008e1c <_vfiprintf_r+0xe4>
 8008d64:	2300      	movs	r3, #0
 8008d66:	9309      	str	r3, [sp, #36]	; 0x24
 8008d68:	2320      	movs	r3, #32
 8008d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d6e:	2330      	movs	r3, #48	; 0x30
 8008d70:	f04f 0b01 	mov.w	fp, #1
 8008d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d78:	9503      	str	r5, [sp, #12]
 8008d7a:	46b8      	mov	r8, r7
 8008d7c:	4645      	mov	r5, r8
 8008d7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d82:	b10b      	cbz	r3, 8008d88 <_vfiprintf_r+0x50>
 8008d84:	2b25      	cmp	r3, #37	; 0x25
 8008d86:	d154      	bne.n	8008e32 <_vfiprintf_r+0xfa>
 8008d88:	ebb8 0a07 	subs.w	sl, r8, r7
 8008d8c:	d00b      	beq.n	8008da6 <_vfiprintf_r+0x6e>
 8008d8e:	4653      	mov	r3, sl
 8008d90:	463a      	mov	r2, r7
 8008d92:	4621      	mov	r1, r4
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff ffbc 	bl	8008d12 <__sfputs_r>
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f000 80c2 	beq.w	8008f24 <_vfiprintf_r+0x1ec>
 8008da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da2:	4453      	add	r3, sl
 8008da4:	9309      	str	r3, [sp, #36]	; 0x24
 8008da6:	f898 3000 	ldrb.w	r3, [r8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 80ba 	beq.w	8008f24 <_vfiprintf_r+0x1ec>
 8008db0:	2300      	movs	r3, #0
 8008db2:	f04f 32ff 	mov.w	r2, #4294967295
 8008db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dba:	9304      	str	r3, [sp, #16]
 8008dbc:	9307      	str	r3, [sp, #28]
 8008dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8008dc4:	46a8      	mov	r8, r5
 8008dc6:	2205      	movs	r2, #5
 8008dc8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008dcc:	485e      	ldr	r0, [pc, #376]	; (8008f48 <_vfiprintf_r+0x210>)
 8008dce:	f7ff f973 	bl	80080b8 <memchr>
 8008dd2:	9b04      	ldr	r3, [sp, #16]
 8008dd4:	bb78      	cbnz	r0, 8008e36 <_vfiprintf_r+0xfe>
 8008dd6:	06d9      	lsls	r1, r3, #27
 8008dd8:	bf44      	itt	mi
 8008dda:	2220      	movmi	r2, #32
 8008ddc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008de0:	071a      	lsls	r2, r3, #28
 8008de2:	bf44      	itt	mi
 8008de4:	222b      	movmi	r2, #43	; 0x2b
 8008de6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008dea:	782a      	ldrb	r2, [r5, #0]
 8008dec:	2a2a      	cmp	r2, #42	; 0x2a
 8008dee:	d02a      	beq.n	8008e46 <_vfiprintf_r+0x10e>
 8008df0:	46a8      	mov	r8, r5
 8008df2:	2000      	movs	r0, #0
 8008df4:	250a      	movs	r5, #10
 8008df6:	9a07      	ldr	r2, [sp, #28]
 8008df8:	4641      	mov	r1, r8
 8008dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dfe:	3b30      	subs	r3, #48	; 0x30
 8008e00:	2b09      	cmp	r3, #9
 8008e02:	d969      	bls.n	8008ed8 <_vfiprintf_r+0x1a0>
 8008e04:	b360      	cbz	r0, 8008e60 <_vfiprintf_r+0x128>
 8008e06:	e024      	b.n	8008e52 <_vfiprintf_r+0x11a>
 8008e08:	4b50      	ldr	r3, [pc, #320]	; (8008f4c <_vfiprintf_r+0x214>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	d101      	bne.n	8008e12 <_vfiprintf_r+0xda>
 8008e0e:	68b4      	ldr	r4, [r6, #8]
 8008e10:	e7a2      	b.n	8008d58 <_vfiprintf_r+0x20>
 8008e12:	4b4f      	ldr	r3, [pc, #316]	; (8008f50 <_vfiprintf_r+0x218>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	bf08      	it	eq
 8008e18:	68f4      	ldreq	r4, [r6, #12]
 8008e1a:	e79d      	b.n	8008d58 <_vfiprintf_r+0x20>
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f7fd fd66 	bl	80068f0 <__swsetup_r>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d09d      	beq.n	8008d64 <_vfiprintf_r+0x2c>
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	b01d      	add	sp, #116	; 0x74
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	46a8      	mov	r8, r5
 8008e34:	e7a2      	b.n	8008d7c <_vfiprintf_r+0x44>
 8008e36:	4a44      	ldr	r2, [pc, #272]	; (8008f48 <_vfiprintf_r+0x210>)
 8008e38:	4645      	mov	r5, r8
 8008e3a:	1a80      	subs	r0, r0, r2
 8008e3c:	fa0b f000 	lsl.w	r0, fp, r0
 8008e40:	4318      	orrs	r0, r3
 8008e42:	9004      	str	r0, [sp, #16]
 8008e44:	e7be      	b.n	8008dc4 <_vfiprintf_r+0x8c>
 8008e46:	9a03      	ldr	r2, [sp, #12]
 8008e48:	1d11      	adds	r1, r2, #4
 8008e4a:	6812      	ldr	r2, [r2, #0]
 8008e4c:	9103      	str	r1, [sp, #12]
 8008e4e:	2a00      	cmp	r2, #0
 8008e50:	db01      	blt.n	8008e56 <_vfiprintf_r+0x11e>
 8008e52:	9207      	str	r2, [sp, #28]
 8008e54:	e004      	b.n	8008e60 <_vfiprintf_r+0x128>
 8008e56:	4252      	negs	r2, r2
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	9207      	str	r2, [sp, #28]
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	f898 3000 	ldrb.w	r3, [r8]
 8008e64:	2b2e      	cmp	r3, #46	; 0x2e
 8008e66:	d10e      	bne.n	8008e86 <_vfiprintf_r+0x14e>
 8008e68:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e6e:	d138      	bne.n	8008ee2 <_vfiprintf_r+0x1aa>
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	f108 0802 	add.w	r8, r8, #2
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	9203      	str	r2, [sp, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bfb8      	it	lt
 8008e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	4d33      	ldr	r5, [pc, #204]	; (8008f54 <_vfiprintf_r+0x21c>)
 8008e88:	2203      	movs	r2, #3
 8008e8a:	f898 1000 	ldrb.w	r1, [r8]
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f7ff f912 	bl	80080b8 <memchr>
 8008e94:	b140      	cbz	r0, 8008ea8 <_vfiprintf_r+0x170>
 8008e96:	2340      	movs	r3, #64	; 0x40
 8008e98:	1b40      	subs	r0, r0, r5
 8008e9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	f108 0801 	add.w	r8, r8, #1
 8008ea4:	4303      	orrs	r3, r0
 8008ea6:	9304      	str	r3, [sp, #16]
 8008ea8:	f898 1000 	ldrb.w	r1, [r8]
 8008eac:	2206      	movs	r2, #6
 8008eae:	482a      	ldr	r0, [pc, #168]	; (8008f58 <_vfiprintf_r+0x220>)
 8008eb0:	f108 0701 	add.w	r7, r8, #1
 8008eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eb8:	f7ff f8fe 	bl	80080b8 <memchr>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d037      	beq.n	8008f30 <_vfiprintf_r+0x1f8>
 8008ec0:	4b26      	ldr	r3, [pc, #152]	; (8008f5c <_vfiprintf_r+0x224>)
 8008ec2:	bb1b      	cbnz	r3, 8008f0c <_vfiprintf_r+0x1d4>
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	3307      	adds	r3, #7
 8008ec8:	f023 0307 	bic.w	r3, r3, #7
 8008ecc:	3308      	adds	r3, #8
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed2:	444b      	add	r3, r9
 8008ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed6:	e750      	b.n	8008d7a <_vfiprintf_r+0x42>
 8008ed8:	fb05 3202 	mla	r2, r5, r2, r3
 8008edc:	2001      	movs	r0, #1
 8008ede:	4688      	mov	r8, r1
 8008ee0:	e78a      	b.n	8008df8 <_vfiprintf_r+0xc0>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	250a      	movs	r5, #10
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	f108 0801 	add.w	r8, r8, #1
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	4640      	mov	r0, r8
 8008ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef4:	3a30      	subs	r2, #48	; 0x30
 8008ef6:	2a09      	cmp	r2, #9
 8008ef8:	d903      	bls.n	8008f02 <_vfiprintf_r+0x1ca>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0c3      	beq.n	8008e86 <_vfiprintf_r+0x14e>
 8008efe:	9105      	str	r1, [sp, #20]
 8008f00:	e7c1      	b.n	8008e86 <_vfiprintf_r+0x14e>
 8008f02:	fb05 2101 	mla	r1, r5, r1, r2
 8008f06:	2301      	movs	r3, #1
 8008f08:	4680      	mov	r8, r0
 8008f0a:	e7f0      	b.n	8008eee <_vfiprintf_r+0x1b6>
 8008f0c:	ab03      	add	r3, sp, #12
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	4622      	mov	r2, r4
 8008f12:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <_vfiprintf_r+0x228>)
 8008f14:	a904      	add	r1, sp, #16
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7fb ff9a 	bl	8004e50 <_printf_float>
 8008f1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f20:	4681      	mov	r9, r0
 8008f22:	d1d5      	bne.n	8008ed0 <_vfiprintf_r+0x198>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	065b      	lsls	r3, r3, #25
 8008f28:	f53f af7e 	bmi.w	8008e28 <_vfiprintf_r+0xf0>
 8008f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f2e:	e77d      	b.n	8008e2c <_vfiprintf_r+0xf4>
 8008f30:	ab03      	add	r3, sp, #12
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	4622      	mov	r2, r4
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <_vfiprintf_r+0x228>)
 8008f38:	a904      	add	r1, sp, #16
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7fc fa34 	bl	80053a8 <_printf_i>
 8008f40:	e7ec      	b.n	8008f1c <_vfiprintf_r+0x1e4>
 8008f42:	bf00      	nop
 8008f44:	08009310 	.word	0x08009310
 8008f48:	0800945c 	.word	0x0800945c
 8008f4c:	08009330 	.word	0x08009330
 8008f50:	080092f0 	.word	0x080092f0
 8008f54:	08009462 	.word	0x08009462
 8008f58:	08009466 	.word	0x08009466
 8008f5c:	08004e51 	.word	0x08004e51
 8008f60:	08008d13 	.word	0x08008d13

08008f64 <_sbrk_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	2300      	movs	r3, #0
 8008f68:	4c05      	ldr	r4, [pc, #20]	; (8008f80 <_sbrk_r+0x1c>)
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	f7f8 fa5e 	bl	8001430 <_sbrk>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_sbrk_r+0x1a>
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_sbrk_r+0x1a>
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20000270 	.word	0x20000270

08008f84 <__sread>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	460c      	mov	r4, r1
 8008f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8c:	f000 f8f4 	bl	8009178 <_read_r>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	bfab      	itete	ge
 8008f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f96:	89a3      	ldrhlt	r3, [r4, #12]
 8008f98:	181b      	addge	r3, r3, r0
 8008f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f9e:	bfac      	ite	ge
 8008fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fa2:	81a3      	strhlt	r3, [r4, #12]
 8008fa4:	bd10      	pop	{r4, pc}

08008fa6 <__swrite>:
 8008fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	461f      	mov	r7, r3
 8008fac:	898b      	ldrh	r3, [r1, #12]
 8008fae:	4605      	mov	r5, r0
 8008fb0:	05db      	lsls	r3, r3, #23
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	d505      	bpl.n	8008fc4 <__swrite+0x1e>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc0:	f000 f886 	bl	80090d0 <_lseek_r>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	4632      	mov	r2, r6
 8008fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	f000 b835 	b.w	8009048 <_write_r>

08008fde <__sseek>:
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe6:	f000 f873 	bl	80090d0 <_lseek_r>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	bf15      	itete	ne
 8008ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ffa:	81a3      	strheq	r3, [r4, #12]
 8008ffc:	bf18      	it	ne
 8008ffe:	81a3      	strhne	r3, [r4, #12]
 8009000:	bd10      	pop	{r4, pc}

08009002 <__sclose>:
 8009002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009006:	f000 b831 	b.w	800906c <_close_r>

0800900a <strncmp>:
 800900a:	b510      	push	{r4, lr}
 800900c:	b16a      	cbz	r2, 800902a <strncmp+0x20>
 800900e:	3901      	subs	r1, #1
 8009010:	1884      	adds	r4, r0, r2
 8009012:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009016:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800901a:	4293      	cmp	r3, r2
 800901c:	d103      	bne.n	8009026 <strncmp+0x1c>
 800901e:	42a0      	cmp	r0, r4
 8009020:	d001      	beq.n	8009026 <strncmp+0x1c>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f5      	bne.n	8009012 <strncmp+0x8>
 8009026:	1a98      	subs	r0, r3, r2
 8009028:	bd10      	pop	{r4, pc}
 800902a:	4610      	mov	r0, r2
 800902c:	e7fc      	b.n	8009028 <strncmp+0x1e>

0800902e <__ascii_wctomb>:
 800902e:	b149      	cbz	r1, 8009044 <__ascii_wctomb+0x16>
 8009030:	2aff      	cmp	r2, #255	; 0xff
 8009032:	bf8b      	itete	hi
 8009034:	238a      	movhi	r3, #138	; 0x8a
 8009036:	700a      	strbls	r2, [r1, #0]
 8009038:	6003      	strhi	r3, [r0, #0]
 800903a:	2001      	movls	r0, #1
 800903c:	bf88      	it	hi
 800903e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009042:	4770      	bx	lr
 8009044:	4608      	mov	r0, r1
 8009046:	4770      	bx	lr

08009048 <_write_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4605      	mov	r5, r0
 800904c:	4608      	mov	r0, r1
 800904e:	4611      	mov	r1, r2
 8009050:	2200      	movs	r2, #0
 8009052:	4c05      	ldr	r4, [pc, #20]	; (8009068 <_write_r+0x20>)
 8009054:	6022      	str	r2, [r4, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f7f7 feba 	bl	8000dd0 <_write>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_write_r+0x1e>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	b103      	cbz	r3, 8009066 <_write_r+0x1e>
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20000270 	.word	0x20000270

0800906c <_close_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	2300      	movs	r3, #0
 8009070:	4c05      	ldr	r4, [pc, #20]	; (8009088 <_close_r+0x1c>)
 8009072:	4605      	mov	r5, r0
 8009074:	4608      	mov	r0, r1
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	f7f8 f9a9 	bl	80013ce <_close>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_close_r+0x1a>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	b103      	cbz	r3, 8009086 <_close_r+0x1a>
 8009084:	602b      	str	r3, [r5, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	20000270 	.word	0x20000270

0800908c <_fstat_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	2300      	movs	r3, #0
 8009090:	4c06      	ldr	r4, [pc, #24]	; (80090ac <_fstat_r+0x20>)
 8009092:	4605      	mov	r5, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	f7f8 f9a3 	bl	80013e4 <_fstat>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_fstat_r+0x1c>
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_fstat_r+0x1c>
 80090a6:	602b      	str	r3, [r5, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	20000270 	.word	0x20000270

080090b0 <_isatty_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	2300      	movs	r3, #0
 80090b4:	4c05      	ldr	r4, [pc, #20]	; (80090cc <_isatty_r+0x1c>)
 80090b6:	4605      	mov	r5, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	f7f8 f9a1 	bl	8001402 <_isatty>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_isatty_r+0x1a>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_isatty_r+0x1a>
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20000270 	.word	0x20000270

080090d0 <_lseek_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4605      	mov	r5, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	4611      	mov	r1, r2
 80090d8:	2200      	movs	r2, #0
 80090da:	4c05      	ldr	r4, [pc, #20]	; (80090f0 <_lseek_r+0x20>)
 80090dc:	6022      	str	r2, [r4, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	f7f8 f999 	bl	8001416 <_lseek>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_lseek_r+0x1e>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_lseek_r+0x1e>
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	20000270 	.word	0x20000270

080090f4 <memmove>:
 80090f4:	4288      	cmp	r0, r1
 80090f6:	b510      	push	{r4, lr}
 80090f8:	eb01 0302 	add.w	r3, r1, r2
 80090fc:	d807      	bhi.n	800910e <memmove+0x1a>
 80090fe:	1e42      	subs	r2, r0, #1
 8009100:	4299      	cmp	r1, r3
 8009102:	d00a      	beq.n	800911a <memmove+0x26>
 8009104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009108:	f802 4f01 	strb.w	r4, [r2, #1]!
 800910c:	e7f8      	b.n	8009100 <memmove+0xc>
 800910e:	4283      	cmp	r3, r0
 8009110:	d9f5      	bls.n	80090fe <memmove+0xa>
 8009112:	1881      	adds	r1, r0, r2
 8009114:	1ad2      	subs	r2, r2, r3
 8009116:	42d3      	cmn	r3, r2
 8009118:	d100      	bne.n	800911c <memmove+0x28>
 800911a:	bd10      	pop	{r4, pc}
 800911c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009120:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009124:	e7f7      	b.n	8009116 <memmove+0x22>

08009126 <__malloc_lock>:
 8009126:	4770      	bx	lr

08009128 <__malloc_unlock>:
 8009128:	4770      	bx	lr

0800912a <_realloc_r>:
 800912a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912c:	4607      	mov	r7, r0
 800912e:	4614      	mov	r4, r2
 8009130:	460e      	mov	r6, r1
 8009132:	b921      	cbnz	r1, 800913e <_realloc_r+0x14>
 8009134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009138:	4611      	mov	r1, r2
 800913a:	f7ff bc29 	b.w	8008990 <_malloc_r>
 800913e:	b922      	cbnz	r2, 800914a <_realloc_r+0x20>
 8009140:	f7ff fbda 	bl	80088f8 <_free_r>
 8009144:	4625      	mov	r5, r4
 8009146:	4628      	mov	r0, r5
 8009148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914a:	f000 f827 	bl	800919c <_malloc_usable_size_r>
 800914e:	42a0      	cmp	r0, r4
 8009150:	d20f      	bcs.n	8009172 <_realloc_r+0x48>
 8009152:	4621      	mov	r1, r4
 8009154:	4638      	mov	r0, r7
 8009156:	f7ff fc1b 	bl	8008990 <_malloc_r>
 800915a:	4605      	mov	r5, r0
 800915c:	2800      	cmp	r0, #0
 800915e:	d0f2      	beq.n	8009146 <_realloc_r+0x1c>
 8009160:	4631      	mov	r1, r6
 8009162:	4622      	mov	r2, r4
 8009164:	f7fe ffb6 	bl	80080d4 <memcpy>
 8009168:	4631      	mov	r1, r6
 800916a:	4638      	mov	r0, r7
 800916c:	f7ff fbc4 	bl	80088f8 <_free_r>
 8009170:	e7e9      	b.n	8009146 <_realloc_r+0x1c>
 8009172:	4635      	mov	r5, r6
 8009174:	e7e7      	b.n	8009146 <_realloc_r+0x1c>
	...

08009178 <_read_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4605      	mov	r5, r0
 800917c:	4608      	mov	r0, r1
 800917e:	4611      	mov	r1, r2
 8009180:	2200      	movs	r2, #0
 8009182:	4c05      	ldr	r4, [pc, #20]	; (8009198 <_read_r+0x20>)
 8009184:	6022      	str	r2, [r4, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	f7f8 f904 	bl	8001394 <_read>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d102      	bne.n	8009196 <_read_r+0x1e>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	b103      	cbz	r3, 8009196 <_read_r+0x1e>
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	bd38      	pop	{r3, r4, r5, pc}
 8009198:	20000270 	.word	0x20000270

0800919c <_malloc_usable_size_r>:
 800919c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a0:	1f18      	subs	r0, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfbc      	itt	lt
 80091a6:	580b      	ldrlt	r3, [r1, r0]
 80091a8:	18c0      	addlt	r0, r0, r3
 80091aa:	4770      	bx	lr

080091ac <_init>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr

080091b8 <_fini>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr
