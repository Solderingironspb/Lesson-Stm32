
ADC005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001d64  08001d64  00011d64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d9c  08001d9c  00011d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001da0  08001da0  00011da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  2000000c  08001db0  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000b0  08001db0  000200b0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006f0e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000019ff  00000000  00000000  00026f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026c2  00000000  00000000  00028942  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000548  00000000  00000000  0002b008  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f0  00000000  00000000  0002b550  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003407  00000000  00000000  0002bc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001e78  00000000  00000000  0002f047  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030ebf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d78  00000000  00000000  00030f3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d4c 	.word	0x08001d4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001d4c 	.word	0x08001d4c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_InitTick+0x3c>)
{
 800060c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	fbb3 f3f0 	udiv	r3, r3, r0
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_InitTick+0x40>)
 800061a:	6810      	ldr	r0, [r2, #0]
 800061c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000620:	f000 fc22 	bl	8000e68 <HAL_SYSTICK_Config>
 8000624:	4604      	mov	r4, r0
 8000626:	b958      	cbnz	r0, 8000640 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000628:	2d0f      	cmp	r5, #15
 800062a:	d809      	bhi.n	8000640 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062c:	4602      	mov	r2, r0
 800062e:	4629      	mov	r1, r5
 8000630:	f04f 30ff 	mov.w	r0, #4294967295
 8000634:	f000 fbd6 	bl	8000de4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_InitTick+0x44>)
 800063a:	4620      	mov	r0, r4
 800063c:	601d      	str	r5, [r3, #0]
 800063e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000640:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000642:	bd38      	pop	{r3, r4, r5, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x20>)
{
 8000652:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000656:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065e:	f000 fbaf 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ffd0 	bl	8000608 <HAL_InitTick>
  HAL_MspInit();
 8000668:	f001 fa6c 	bl	8001b44 <HAL_MspInit>
}
 800066c:	2000      	movs	r0, #0
 800066e:	bd08      	pop	{r3, pc}
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x10>)
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_IncTick+0x14>)
 8000678:	6811      	ldr	r1, [r2, #0]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	440b      	add	r3, r1
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000028 	.word	0x20000028
 8000688:	20000000 	.word	0x20000000

0800068c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <HAL_GetTick+0x8>)
 800068e:	6818      	ldr	r0, [r3, #0]
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028

08000698 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000698:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800069a:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800069c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800069e:	f012 0f50 	tst.w	r2, #80	; 0x50
 80006a2:	d11b      	bne.n	80006dc <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	6892      	ldr	r2, [r2, #8]
 80006b0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80006b4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80006b8:	d10c      	bne.n	80006d4 <ADC_DMAConvCplt+0x3c>
 80006ba:	7b1a      	ldrb	r2, [r3, #12]
 80006bc:	b952      	cbnz	r2, 80006d4 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80006be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006c8:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006ca:	bf5e      	ittt	pl
 80006cc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80006ce:	f042 0201 	orrpl.w	r2, r2, #1
 80006d2:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f957 	bl	8001988 <HAL_ADC_ConvCpltCallback>
 80006da:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80006dc:	6a1b      	ldr	r3, [r3, #32]
  }
}
 80006de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	4718      	bx	r3

080006e6 <HAL_ADC_ConvHalfCpltCallback>:
 80006e6:	4770      	bx	lr

080006e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80006e8:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80006ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80006ec:	f7ff fffb 	bl	80006e6 <HAL_ADC_ConvHalfCpltCallback>
 80006f0:	bd08      	pop	{r3, pc}

080006f2 <HAL_ADC_LevelOutOfWindowCallback>:
 80006f2:	4770      	bx	lr

080006f4 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80006f4:	6803      	ldr	r3, [r0, #0]
{
 80006f6:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80006f8:	685a      	ldr	r2, [r3, #4]
{
 80006fa:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80006fc:	0690      	lsls	r0, r2, #26
 80006fe:	d527      	bpl.n	8000750 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	0791      	lsls	r1, r2, #30
 8000704:	d524      	bpl.n	8000750 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000706:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000708:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800070a:	bf5e      	ittt	pl
 800070c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800070e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000712:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800071a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800071e:	d110      	bne.n	8000742 <HAL_ADC_IRQHandler+0x4e>
 8000720:	7b22      	ldrb	r2, [r4, #12]
 8000722:	b972      	cbnz	r2, 8000742 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	f022 0220 	bic.w	r2, r2, #32
 800072a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800072c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800072e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000732:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000736:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000738:	bf5e      	ittt	pl
 800073a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800073c:	f043 0301 	orrpl.w	r3, r3, #1
 8000740:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000742:	4620      	mov	r0, r4
 8000744:	f001 f920 	bl	8001988 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000748:	f06f 0212 	mvn.w	r2, #18
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	0610      	lsls	r0, r2, #24
 8000756:	d530      	bpl.n	80007ba <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	0751      	lsls	r1, r2, #29
 800075c:	d52d      	bpl.n	80007ba <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800075e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000760:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000762:	bf5e      	ittt	pl
 8000764:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000766:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800076a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000772:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000776:	d00a      	beq.n	800078e <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000778:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800077a:	0550      	lsls	r0, r2, #21
 800077c:	d416      	bmi.n	80007ac <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000784:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000788:	d110      	bne.n	80007ac <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800078a:	7b22      	ldrb	r2, [r4, #12]
 800078c:	b972      	cbnz	r2, 80007ac <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800078e:	685a      	ldr	r2, [r3, #4]
 8000790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000794:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800079c:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800079e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007a0:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007a2:	bf5e      	ittt	pl
 80007a4:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80007a6:	f043 0301 	orrpl.w	r3, r3, #1
 80007aa:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80007ac:	4620      	mov	r0, r4
 80007ae:	f000 fb05 	bl	8000dbc <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80007b2:	f06f 020c 	mvn.w	r2, #12
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	0652      	lsls	r2, r2, #25
 80007c0:	d50d      	bpl.n	80007de <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	07db      	lsls	r3, r3, #31
 80007c6:	d50a      	bpl.n	80007de <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007ca:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d0:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007d2:	f7ff ff8e 	bl	80006f2 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80007d6:	f06f 0201 	mvn.w	r2, #1
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	bd10      	pop	{r4, pc}

080007e0 <HAL_ADC_ErrorCallback>:
{
 80007e0:	4770      	bx	lr

080007e2 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80007e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80007e4:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80007e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80007ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80007f6:	f7ff fff3 	bl	80007e0 <HAL_ADC_ErrorCallback>
 80007fa:	bd08      	pop	{r3, pc}

080007fc <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80007fc:	2300      	movs	r3, #0
{ 
 80007fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000800:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000802:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000806:	2b01      	cmp	r3, #1
 8000808:	d074      	beq.n	80008f4 <HAL_ADC_ConfigChannel+0xf8>
 800080a:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800080c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800080e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000812:	2d06      	cmp	r5, #6
 8000814:	6802      	ldr	r2, [r0, #0]
 8000816:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800081a:	680c      	ldr	r4, [r1, #0]
 800081c:	d825      	bhi.n	800086a <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800081e:	442b      	add	r3, r5
 8000820:	251f      	movs	r5, #31
 8000822:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000824:	3b05      	subs	r3, #5
 8000826:	409d      	lsls	r5, r3
 8000828:	ea26 0505 	bic.w	r5, r6, r5
 800082c:	fa04 f303 	lsl.w	r3, r4, r3
 8000830:	432b      	orrs	r3, r5
 8000832:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000834:	2c09      	cmp	r4, #9
 8000836:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800083a:	688d      	ldr	r5, [r1, #8]
 800083c:	d92f      	bls.n	800089e <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800083e:	2607      	movs	r6, #7
 8000840:	4423      	add	r3, r4
 8000842:	68d1      	ldr	r1, [r2, #12]
 8000844:	3b1e      	subs	r3, #30
 8000846:	409e      	lsls	r6, r3
 8000848:	ea21 0106 	bic.w	r1, r1, r6
 800084c:	fa05 f303 	lsl.w	r3, r5, r3
 8000850:	430b      	orrs	r3, r1
 8000852:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000854:	f1a4 0310 	sub.w	r3, r4, #16
 8000858:	2b01      	cmp	r3, #1
 800085a:	d92b      	bls.n	80008b4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800085c:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800085e:	2200      	movs	r2, #0
 8000860:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000864:	4618      	mov	r0, r3
 8000866:	b002      	add	sp, #8
 8000868:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800086a:	2d0c      	cmp	r5, #12
 800086c:	d80b      	bhi.n	8000886 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800086e:	442b      	add	r3, r5
 8000870:	251f      	movs	r5, #31
 8000872:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000874:	3b23      	subs	r3, #35	; 0x23
 8000876:	409d      	lsls	r5, r3
 8000878:	ea26 0505 	bic.w	r5, r6, r5
 800087c:	fa04 f303 	lsl.w	r3, r4, r3
 8000880:	432b      	orrs	r3, r5
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	e7d6      	b.n	8000834 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000886:	442b      	add	r3, r5
 8000888:	251f      	movs	r5, #31
 800088a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800088c:	3b41      	subs	r3, #65	; 0x41
 800088e:	409d      	lsls	r5, r3
 8000890:	ea26 0505 	bic.w	r5, r6, r5
 8000894:	fa04 f303 	lsl.w	r3, r4, r3
 8000898:	432b      	orrs	r3, r5
 800089a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800089c:	e7ca      	b.n	8000834 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800089e:	2607      	movs	r6, #7
 80008a0:	6911      	ldr	r1, [r2, #16]
 80008a2:	4423      	add	r3, r4
 80008a4:	409e      	lsls	r6, r3
 80008a6:	ea21 0106 	bic.w	r1, r1, r6
 80008aa:	fa05 f303 	lsl.w	r3, r5, r3
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6113      	str	r3, [r2, #16]
 80008b2:	e7cf      	b.n	8000854 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_ADC_ConfigChannel+0xfc>)
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d116      	bne.n	80008e8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008ba:	6893      	ldr	r3, [r2, #8]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	d4cd      	bmi.n	800085c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008c0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008c2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008c8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008ca:	d1c7      	bne.n	800085c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_ADC_ConfigChannel+0x100>)
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <HAL_ADC_ConfigChannel+0x104>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80008d6:	230a      	movs	r3, #10
 80008d8:	4353      	muls	r3, r2
            wait_loop_index--;
 80008da:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80008dc:	9b01      	ldr	r3, [sp, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0bc      	beq.n	800085c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80008e2:	9b01      	ldr	r3, [sp, #4]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	e7f8      	b.n	80008da <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008ea:	f043 0320 	orr.w	r3, r3, #32
 80008ee:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e7b4      	b.n	800085e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80008f4:	2302      	movs	r3, #2
 80008f6:	e7b5      	b.n	8000864 <HAL_ADC_ConfigChannel+0x68>
 80008f8:	40012400 	.word	0x40012400
 80008fc:	20000008 	.word	0x20000008
 8000900:	000f4240 	.word	0x000f4240

08000904 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000904:	2300      	movs	r3, #0
{
 8000906:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000908:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800090a:	6803      	ldr	r3, [r0, #0]
{
 800090c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	07d2      	lsls	r2, r2, #31
 8000912:	d502      	bpl.n	800091a <ADC_Enable+0x16>
  return HAL_OK;
 8000914:	2000      	movs	r0, #0
}
 8000916:	b002      	add	sp, #8
 8000918:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	f042 0201 	orr.w	r2, r2, #1
 8000920:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <ADC_Enable+0x68>)
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <ADC_Enable+0x6c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800092c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800092e:	9b01      	ldr	r3, [sp, #4]
 8000930:	b9c3      	cbnz	r3, 8000964 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000932:	f7ff feab 	bl	800068c <HAL_GetTick>
 8000936:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	689d      	ldr	r5, [r3, #8]
 800093c:	f015 0501 	ands.w	r5, r5, #1
 8000940:	d1e8      	bne.n	8000914 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000942:	f7ff fea3 	bl	800068c <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	2802      	cmp	r0, #2
 800094a:	d9f5      	bls.n	8000938 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800094c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800094e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800095a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000962:	e7d8      	b.n	8000916 <ADC_Enable+0x12>
      wait_loop_index--;
 8000964:	9b01      	ldr	r3, [sp, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	e7e0      	b.n	800092c <ADC_Enable+0x28>
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	000f4240 	.word	0x000f4240

08000974 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8000974:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000978:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800097a:	2b01      	cmp	r3, #1
{
 800097c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800097e:	d058      	beq.n	8000a32 <HAL_ADC_Start_IT+0xbe>
 8000980:	2301      	movs	r3, #1
 8000982:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000986:	f7ff ffbd 	bl	8000904 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800098a:	2800      	cmp	r0, #0
 800098c:	d14d      	bne.n	8000a2a <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 800098e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000990:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8000992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000996:	f023 0301 	bic.w	r3, r3, #1
 800099a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d104      	bne.n	80009b0 <HAL_ADC_Start_IT+0x3c>
 80009a6:	4925      	ldr	r1, [pc, #148]	; (8000a3c <HAL_ADC_Start_IT+0xc8>)
 80009a8:	684a      	ldr	r2, [r1, #4]
 80009aa:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80009ae:	d132      	bne.n	8000a16 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80009b6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009b8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009ba:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009bc:	bf41      	itttt	mi
 80009be:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80009c0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80009c4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80009c8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009d0:	bf1c      	itt	ne
 80009d2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80009d4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80009d8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80009da:	2200      	movs	r2, #0
 80009dc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009e0:	f06f 0202 	mvn.w	r2, #2
 80009e4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	f042 0220 	orr.w	r2, r2, #32
 80009ec:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80009f4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80009f8:	d113      	bne.n	8000a22 <HAL_ADC_Start_IT+0xae>
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_ADC_Start_IT+0xc4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d105      	bne.n	8000a0c <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a00:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000a04:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a06:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000a0a:	d10a      	bne.n	8000a22 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a0c:	689a      	ldr	r2, [r3, #8]
 8000a0e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a1c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a1e:	684a      	ldr	r2, [r1, #4]
 8000a20:	e7cb      	b.n	80009ba <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a28:	e7f3      	b.n	8000a12 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000a30:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000a32:	2002      	movs	r0, #2
}
 8000a34:	bd10      	pop	{r4, pc}
 8000a36:	bf00      	nop
 8000a38:	40012800 	.word	0x40012800
 8000a3c:	40012400 	.word	0x40012400

08000a40 <HAL_ADC_Start_DMA>:
{
 8000a40:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000a44:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a46:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <HAL_ADC_Start_DMA+0x108>)
 8000a48:	6802      	ldr	r2, [r0, #0]
{
 8000a4a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a4c:	429a      	cmp	r2, r3
{
 8000a4e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a50:	d002      	beq.n	8000a58 <HAL_ADC_Start_DMA+0x18>
 8000a52:	493e      	ldr	r1, [pc, #248]	; (8000b4c <HAL_ADC_Start_DMA+0x10c>)
 8000a54:	428a      	cmp	r2, r1
 8000a56:	d103      	bne.n	8000a60 <HAL_ADC_Start_DMA+0x20>
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000a5e:	d16e      	bne.n	8000b3e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000a60:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d06c      	beq.n	8000b42 <HAL_ADC_Start_DMA+0x102>
 8000a68:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000a6a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000a6c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000a70:	f7ff ff48 	bl	8000904 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000a74:	4606      	mov	r6, r0
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d15d      	bne.n	8000b36 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000a7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a7c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000a7e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000a84:	f020 0001 	bic.w	r0, r0, #1
 8000a88:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a8c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000a8e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a90:	d104      	bne.n	8000a9c <HAL_ADC_Start_DMA+0x5c>
 8000a92:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <HAL_ADC_Start_DMA+0x108>)
 8000a94:	6853      	ldr	r3, [r2, #4]
 8000a96:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000a9a:	d13e      	bne.n	8000b1a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000aa2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa4:	684b      	ldr	r3, [r1, #4]
 8000aa6:	055a      	lsls	r2, r3, #21
 8000aa8:	d505      	bpl.n	8000ab6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000aac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ab4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ab8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aba:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000abe:	bf18      	it	ne
 8000ac0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ac2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ac4:	bf18      	it	ne
 8000ac6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000aca:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000acc:	2300      	movs	r3, #0
 8000ace:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ad4:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ad6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_ADC_Start_DMA+0x114>)
 8000ada:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <HAL_ADC_Start_DMA+0x118>)
 8000ade:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ae0:	f06f 0302 	mvn.w	r3, #2
 8000ae4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ae8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000af4:	4643      	mov	r3, r8
 8000af6:	f000 f9fd 	bl	8000ef4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000b02:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	bf0c      	ite	eq
 8000b0a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b0e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000b12:	609a      	str	r2, [r3, #8]
}
 8000b14:	4630      	mov	r0, r6
 8000b16:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b20:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b22:	6853      	ldr	r3, [r2, #4]
 8000b24:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b26:	bf41      	itttt	mi
 8000b28:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000b2a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000b2e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000b32:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000b34:	e7bf      	b.n	8000ab6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8000b36:	2300      	movs	r3, #0
 8000b38:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000b3c:	e7ea      	b.n	8000b14 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000b3e:	2601      	movs	r6, #1
 8000b40:	e7e8      	b.n	8000b14 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000b42:	2602      	movs	r6, #2
 8000b44:	e7e6      	b.n	8000b14 <HAL_ADC_Start_DMA+0xd4>
 8000b46:	bf00      	nop
 8000b48:	40012400 	.word	0x40012400
 8000b4c:	40012800 	.word	0x40012800
 8000b50:	08000699 	.word	0x08000699
 8000b54:	080006e9 	.word	0x080006e9
 8000b58:	080007e3 	.word	0x080007e3

08000b5c <ADC_ConversionStop_Disable>:
{
 8000b5c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b5e:	6803      	ldr	r3, [r0, #0]
{
 8000b60:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	07d2      	lsls	r2, r2, #31
 8000b66:	d401      	bmi.n	8000b6c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000b68:	2000      	movs	r0, #0
 8000b6a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000b74:	f7ff fd8a 	bl	800068c <HAL_GetTick>
 8000b78:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	07db      	lsls	r3, r3, #31
 8000b80:	d5f2      	bpl.n	8000b68 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b82:	f7ff fd83 	bl	800068c <HAL_GetTick>
 8000b86:	1b40      	subs	r0, r0, r5
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d9f6      	bls.n	8000b7a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b90:	f043 0310 	orr.w	r3, r3, #16
 8000b94:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b9e:	bd38      	pop	{r3, r4, r5, pc}

08000ba0 <HAL_ADC_Init>:
{
 8000ba0:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d071      	beq.n	8000c8c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ba8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000baa:	b923      	cbnz	r3, 8000bb6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000bac:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000bae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000bb2:	f000 ffe9 	bl	8001b88 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f7ff ffd0 	bl	8000b5c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bbe:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000bc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bc4:	d164      	bne.n	8000c90 <HAL_ADC_Init+0xf0>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d162      	bne.n	8000c90 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bca:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000bcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	f023 0302 	bic.w	r3, r3, #2
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bda:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bdc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000bde:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000be0:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000be2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000be6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bea:	d038      	beq.n	8000c5e <HAL_ADC_Init+0xbe>
 8000bec:	2901      	cmp	r1, #1
 8000bee:	bf14      	ite	ne
 8000bf0:	4606      	movne	r6, r0
 8000bf2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf6:	7d25      	ldrb	r5, [r4, #20]
 8000bf8:	2d01      	cmp	r5, #1
 8000bfa:	d107      	bne.n	8000c0c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d130      	bne.n	8000c62 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c00:	69a3      	ldr	r3, [r4, #24]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000c08:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000c0c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c0e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000c12:	685d      	ldr	r5, [r3, #4]
 8000c14:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000c18:	ea45 0506 	orr.w	r5, r5, r6
 8000c1c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000c1e:	689e      	ldr	r6, [r3, #8]
 8000c20:	4d1d      	ldr	r5, [pc, #116]	; (8000c98 <HAL_ADC_Init+0xf8>)
 8000c22:	ea05 0506 	and.w	r5, r5, r6
 8000c26:	ea45 0502 	orr.w	r5, r5, r2
 8000c2a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c2c:	d001      	beq.n	8000c32 <HAL_ADC_Init+0x92>
 8000c2e:	2901      	cmp	r1, #1
 8000c30:	d120      	bne.n	8000c74 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c32:	6921      	ldr	r1, [r4, #16]
 8000c34:	3901      	subs	r1, #1
 8000c36:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000c38:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000c3a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000c3e:	4329      	orrs	r1, r5
 8000c40:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c42:	6899      	ldr	r1, [r3, #8]
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_ADC_Init+0xfc>)
 8000c46:	400b      	ands	r3, r1
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d115      	bne.n	8000c78 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000c50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c52:	f023 0303 	bic.w	r3, r3, #3
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c5e:	460e      	mov	r6, r1
 8000c60:	e7c9      	b.n	8000bf6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c72:	e7cb      	b.n	8000c0c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000c74:	2100      	movs	r1, #0
 8000c76:	e7df      	b.n	8000c38 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c7a:	f023 0312 	bic.w	r3, r3, #18
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000c8c:	2001      	movs	r0, #1
}
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c96:	e7f9      	b.n	8000c8c <HAL_ADC_Init+0xec>
 8000c98:	ffe1f7fd 	.word	0xffe1f7fd
 8000c9c:	ff1f0efe 	.word	0xff1f0efe

08000ca0 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8000ca0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000ca4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000ca6:	2b01      	cmp	r3, #1
{
 8000ca8:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000caa:	d01d      	beq.n	8000ce8 <HAL_ADC_Stop_DMA+0x48>
 8000cac:	2301      	movs	r3, #1
 8000cae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cb2:	f7ff ff53 	bl	8000b5c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8000cb6:	b980      	cbnz	r0, 8000cda <HAL_ADC_Stop_DMA+0x3a>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cb8:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000cba:	6a20      	ldr	r0, [r4, #32]
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cbc:	6893      	ldr	r3, [r2, #8]
 8000cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cc2:	6093      	str	r3, [r2, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000cc4:	f000 f953 	bl	8000f6e <HAL_DMA_Abort>
      ADC_STATE_CLR_SET(hadc->State,
 8000cc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8000cca:	b950      	cbnz	r0, 8000ce2 <HAL_ADC_Stop_DMA+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 8000ccc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cd0:	f023 0301 	bic.w	r3, r3, #1
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000cd8:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 8000ce0:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce6:	e7f7      	b.n	8000cd8 <HAL_ADC_Stop_DMA+0x38>
  __HAL_LOCK(hadc);
 8000ce8:	2002      	movs	r0, #2
}
 8000cea:	bd10      	pop	{r4, pc}

08000cec <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000cec:	2300      	movs	r3, #0
{
 8000cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000cf0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000cf6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d05a      	beq.n	8000db2 <HAL_ADCEx_Calibration_Start+0xc6>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d02:	f7ff ff2b 	bl	8000b5c <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d06:	4605      	mov	r5, r0
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d132      	bne.n	8000d72 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000d0e:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000d10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d14:	f023 0302 	bic.w	r3, r3, #2
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <HAL_ADCEx_Calibration_Start+0xcc>)
 8000d20:	681e      	ldr	r6, [r3, #0]
 8000d22:	f000 fdbb 	bl	800189c <HAL_RCCEx_GetPeriphCLKFreq>
 8000d26:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000d2a:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8000d2c:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	bb1b      	cbnz	r3, 8000d7a <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000d32:	4620      	mov	r0, r4
 8000d34:	f7ff fde6 	bl	8000904 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000d38:	6822      	ldr	r2, [r4, #0]
 8000d3a:	6893      	ldr	r3, [r2, #8]
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000d42:	f7ff fca3 	bl	800068c <HAL_GetTick>
 8000d46:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	0712      	lsls	r2, r2, #28
 8000d4e:	d418      	bmi.n	8000d82 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	f042 0204 	orr.w	r2, r2, #4
 8000d56:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000d58:	f7ff fc98 	bl	800068c <HAL_GetTick>
 8000d5c:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	075b      	lsls	r3, r3, #29
 8000d64:	d41f      	bmi.n	8000da6 <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d68:	f023 0303 	bic.w	r3, r3, #3
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d72:	2300      	movs	r3, #0
 8000d74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d78:	e012      	b.n	8000da0 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 8000d7a:	9b01      	ldr	r3, [sp, #4]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	e7d5      	b.n	8000d2e <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000d82:	f7ff fc83 	bl	800068c <HAL_GetTick>
 8000d86:	1b80      	subs	r0, r0, r6
 8000d88:	280a      	cmp	r0, #10
 8000d8a:	d9dd      	bls.n	8000d48 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8000d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 8000d8e:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000d90:	f023 0312 	bic.w	r3, r3, #18
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000da0:	4628      	mov	r0, r5
 8000da2:	b002      	add	sp, #8
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000da6:	f7ff fc71 	bl	800068c <HAL_GetTick>
 8000daa:	1b80      	subs	r0, r0, r6
 8000dac:	280a      	cmp	r0, #10
 8000dae:	d9d6      	bls.n	8000d5e <HAL_ADCEx_Calibration_Start+0x72>
 8000db0:	e7ec      	b.n	8000d8c <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8000db2:	2502      	movs	r5, #2
 8000db4:	e7f4      	b.n	8000da0 <HAL_ADCEx_Calibration_Start+0xb4>
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008

08000dbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000dbc:	4770      	bx	lr
	...

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dce:	041b      	lsls	r3, r3, #16
 8000dd0:	0c1b      	lsrs	r3, r3, #16
 8000dd2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000dda:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ddc:	60d3      	str	r3, [r2, #12]
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b530      	push	{r4, r5, lr}
 8000de8:	68dc      	ldr	r4, [r3, #12]
 8000dea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dee:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	bf28      	it	cs
 8000df8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e00:	bf98      	it	ls
 8000e02:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	fa05 f303 	lsl.w	r3, r5, r3
 8000e08:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0c:	bf88      	it	hi
 8000e0e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4019      	ands	r1, r3
 8000e12:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	fa05 f404 	lsl.w	r4, r5, r4
 8000e18:	3c01      	subs	r4, #1
 8000e1a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1e:	ea42 0201 	orr.w	r2, r2, r1
 8000e22:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	bfa9      	itett	ge
 8000e28:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	4b06      	ldrlt	r3, [pc, #24]	; (8000e48 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	b2d2      	uxtbge	r2, r2
 8000e30:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	bfbb      	ittet	lt
 8000e36:	f000 000f 	andlt.w	r0, r0, #15
 8000e3a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	541a      	strblt	r2, [r3, r0]
 8000e42:	bd30      	pop	{r4, r5, pc}
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	e000ed14 	.word	0xe000ed14

08000e4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	db08      	blt.n	8000e62 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e50:	2301      	movs	r3, #1
 8000e52:	0942      	lsrs	r2, r0, #5
 8000e54:	f000 001f 	and.w	r0, r0, #31
 8000e58:	fa03 f000 	lsl.w	r0, r3, r0
 8000e5c:	4b01      	ldr	r3, [pc, #4]	; (8000e64 <HAL_NVIC_EnableIRQ+0x18>)
 8000e5e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	3801      	subs	r0, #1
 8000e6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e6e:	d20a      	bcs.n	8000e86 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e94:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e96:	b330      	cbz	r0, 8000ee6 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e98:	2214      	movs	r2, #20
 8000e9a:	6801      	ldr	r1, [r0, #0]
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e9e:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ea0:	440b      	add	r3, r1
 8000ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000eac:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000eae:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000eb0:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eb2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000eb6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eba:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	6904      	ldr	r4, [r0, #16]
 8000ec2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec4:	6944      	ldr	r4, [r0, #20]
 8000ec6:	4323      	orrs	r3, r4
 8000ec8:	6984      	ldr	r4, [r0, #24]
 8000eca:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ecc:	69c4      	ldr	r4, [r0, #28]
 8000ece:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000ed0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ed2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed6:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000edc:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ede:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
}
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	bf00      	nop
 8000eec:	bffdfff8 	.word	0xbffdfff8
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ef6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000efa:	2c01      	cmp	r4, #1
 8000efc:	d035      	beq.n	8000f6a <HAL_DMA_Start_IT+0x76>
 8000efe:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f00:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000f04:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f04f 0600 	mov.w	r6, #0
 8000f0e:	f04f 0402 	mov.w	r4, #2
 8000f12:	d128      	bne.n	8000f66 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f14:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f18:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f1a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000f1c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f1e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000f20:	f026 0601 	bic.w	r6, r6, #1
 8000f24:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f26:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000f28:	40bd      	lsls	r5, r7
 8000f2a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f2c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f2e:	6843      	ldr	r3, [r0, #4]
 8000f30:	6805      	ldr	r5, [r0, #0]
 8000f32:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000f34:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f36:	bf0b      	itete	eq
 8000f38:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000f3a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000f3c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000f3e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000f40:	b14b      	cbz	r3, 8000f56 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f48:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f4a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	602b      	str	r3, [r5, #0]
 8000f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	f043 030a 	orr.w	r3, r3, #10
 8000f64:	e7f0      	b.n	8000f48 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000f66:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000f6a:	2002      	movs	r0, #2
}
 8000f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f6e <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d006      	beq.n	8000f84 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	2304      	movs	r3, #4
 8000f78:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000f80:	2001      	movs	r0, #1
 8000f82:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f84:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f86:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f022 020e 	bic.w	r2, r2, #14
 8000f8e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hdma);      
 8000fa2:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000fa4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000fa8:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8000fac:	4618      	mov	r0, r3
}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_DMA_IRQHandler>:
{
 8000fb0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fb2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fb4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fb6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fb8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000fba:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fbc:	4095      	lsls	r5, r2
 8000fbe:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000fc0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fc2:	d032      	beq.n	800102a <HAL_DMA_IRQHandler+0x7a>
 8000fc4:	074d      	lsls	r5, r1, #29
 8000fc6:	d530      	bpl.n	800102a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fcc:	bf5e      	ittt	pl
 8000fce:	681a      	ldrpl	r2, [r3, #0]
 8000fd0:	f022 0204 	bicpl.w	r2, r2, #4
 8000fd4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fd6:	4a3e      	ldr	r2, [pc, #248]	; (80010d0 <HAL_DMA_IRQHandler+0x120>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d019      	beq.n	8001010 <HAL_DMA_IRQHandler+0x60>
 8000fdc:	3214      	adds	r2, #20
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d018      	beq.n	8001014 <HAL_DMA_IRQHandler+0x64>
 8000fe2:	3214      	adds	r2, #20
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d017      	beq.n	8001018 <HAL_DMA_IRQHandler+0x68>
 8000fe8:	3214      	adds	r2, #20
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d017      	beq.n	800101e <HAL_DMA_IRQHandler+0x6e>
 8000fee:	3214      	adds	r2, #20
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d017      	beq.n	8001024 <HAL_DMA_IRQHandler+0x74>
 8000ff4:	3214      	adds	r2, #20
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	bf0c      	ite	eq
 8000ffa:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000ffe:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001002:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <HAL_DMA_IRQHandler+0x124>)
 8001004:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001006:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001008:	2b00      	cmp	r3, #0
 800100a:	d05e      	beq.n	80010ca <HAL_DMA_IRQHandler+0x11a>
}
 800100c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800100e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001010:	2304      	movs	r3, #4
 8001012:	e7f6      	b.n	8001002 <HAL_DMA_IRQHandler+0x52>
 8001014:	2340      	movs	r3, #64	; 0x40
 8001016:	e7f4      	b.n	8001002 <HAL_DMA_IRQHandler+0x52>
 8001018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101c:	e7f1      	b.n	8001002 <HAL_DMA_IRQHandler+0x52>
 800101e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001022:	e7ee      	b.n	8001002 <HAL_DMA_IRQHandler+0x52>
 8001024:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001028:	e7eb      	b.n	8001002 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800102a:	2502      	movs	r5, #2
 800102c:	4095      	lsls	r5, r2
 800102e:	4225      	tst	r5, r4
 8001030:	d035      	beq.n	800109e <HAL_DMA_IRQHandler+0xee>
 8001032:	078d      	lsls	r5, r1, #30
 8001034:	d533      	bpl.n	800109e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	0694      	lsls	r4, r2, #26
 800103a:	d406      	bmi.n	800104a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	f022 020a 	bic.w	r2, r2, #10
 8001042:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001044:	2201      	movs	r2, #1
 8001046:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800104a:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <HAL_DMA_IRQHandler+0x120>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d019      	beq.n	8001084 <HAL_DMA_IRQHandler+0xd4>
 8001050:	3214      	adds	r2, #20
 8001052:	4293      	cmp	r3, r2
 8001054:	d018      	beq.n	8001088 <HAL_DMA_IRQHandler+0xd8>
 8001056:	3214      	adds	r2, #20
 8001058:	4293      	cmp	r3, r2
 800105a:	d017      	beq.n	800108c <HAL_DMA_IRQHandler+0xdc>
 800105c:	3214      	adds	r2, #20
 800105e:	4293      	cmp	r3, r2
 8001060:	d017      	beq.n	8001092 <HAL_DMA_IRQHandler+0xe2>
 8001062:	3214      	adds	r2, #20
 8001064:	4293      	cmp	r3, r2
 8001066:	d017      	beq.n	8001098 <HAL_DMA_IRQHandler+0xe8>
 8001068:	3214      	adds	r2, #20
 800106a:	4293      	cmp	r3, r2
 800106c:	bf0c      	ite	eq
 800106e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001072:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_DMA_IRQHandler+0x124>)
 8001078:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800107a:	2300      	movs	r3, #0
 800107c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001080:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001082:	e7c1      	b.n	8001008 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001084:	2302      	movs	r3, #2
 8001086:	e7f6      	b.n	8001076 <HAL_DMA_IRQHandler+0xc6>
 8001088:	2320      	movs	r3, #32
 800108a:	e7f4      	b.n	8001076 <HAL_DMA_IRQHandler+0xc6>
 800108c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001090:	e7f1      	b.n	8001076 <HAL_DMA_IRQHandler+0xc6>
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	e7ee      	b.n	8001076 <HAL_DMA_IRQHandler+0xc6>
 8001098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109c:	e7eb      	b.n	8001076 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800109e:	2508      	movs	r5, #8
 80010a0:	4095      	lsls	r5, r2
 80010a2:	4225      	tst	r5, r4
 80010a4:	d011      	beq.n	80010ca <HAL_DMA_IRQHandler+0x11a>
 80010a6:	0709      	lsls	r1, r1, #28
 80010a8:	d50f      	bpl.n	80010ca <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	f021 010e 	bic.w	r1, r1, #14
 80010b0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010b2:	2301      	movs	r3, #1
 80010b4:	fa03 f202 	lsl.w	r2, r3, r2
 80010b8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010ba:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80010bc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80010c0:	2300      	movs	r3, #0
 80010c2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80010c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010c8:	e79e      	b.n	8001008 <HAL_DMA_IRQHandler+0x58>
}
 80010ca:	bc70      	pop	{r4, r5, r6}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40020008 	.word	0x40020008
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010dc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80010de:	4626      	mov	r6, r4
 80010e0:	4b66      	ldr	r3, [pc, #408]	; (800127c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010e2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800128c <HAL_GPIO_Init+0x1b4>
 80010e6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001290 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	680a      	ldr	r2, [r1, #0]
 80010ec:	fa32 f506 	lsrs.w	r5, r2, r6
 80010f0:	d102      	bne.n	80010f8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80010f2:	b003      	add	sp, #12
 80010f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80010f8:	f04f 0801 	mov.w	r8, #1
 80010fc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001100:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001104:	4590      	cmp	r8, r2
 8001106:	d17f      	bne.n	8001208 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8001108:	684d      	ldr	r5, [r1, #4]
 800110a:	2d12      	cmp	r5, #18
 800110c:	f000 80aa 	beq.w	8001264 <HAL_GPIO_Init+0x18c>
 8001110:	f200 8083 	bhi.w	800121a <HAL_GPIO_Init+0x142>
 8001114:	2d02      	cmp	r5, #2
 8001116:	f000 80a2 	beq.w	800125e <HAL_GPIO_Init+0x186>
 800111a:	d877      	bhi.n	800120c <HAL_GPIO_Init+0x134>
 800111c:	2d00      	cmp	r5, #0
 800111e:	f000 8089 	beq.w	8001234 <HAL_GPIO_Init+0x15c>
 8001122:	2d01      	cmp	r5, #1
 8001124:	f000 8099 	beq.w	800125a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001128:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800112c:	2aff      	cmp	r2, #255	; 0xff
 800112e:	bf93      	iteet	ls
 8001130:	4682      	movls	sl, r0
 8001132:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001136:	3d08      	subhi	r5, #8
 8001138:	f8d0 b000 	ldrls.w	fp, [r0]
 800113c:	bf92      	itee	ls
 800113e:	00b5      	lslls	r5, r6, #2
 8001140:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001144:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001146:	fa09 f805 	lsl.w	r8, r9, r5
 800114a:	ea2b 0808 	bic.w	r8, fp, r8
 800114e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001152:	bf88      	it	hi
 8001154:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001158:	ea48 0505 	orr.w	r5, r8, r5
 800115c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001160:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001164:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001168:	d04e      	beq.n	8001208 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800116a:	4d45      	ldr	r5, [pc, #276]	; (8001280 <HAL_GPIO_Init+0x1a8>)
 800116c:	4f44      	ldr	r7, [pc, #272]	; (8001280 <HAL_GPIO_Init+0x1a8>)
 800116e:	69ad      	ldr	r5, [r5, #24]
 8001170:	f026 0803 	bic.w	r8, r6, #3
 8001174:	f045 0501 	orr.w	r5, r5, #1
 8001178:	61bd      	str	r5, [r7, #24]
 800117a:	69bd      	ldr	r5, [r7, #24]
 800117c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001180:	f005 0501 	and.w	r5, r5, #1
 8001184:	9501      	str	r5, [sp, #4]
 8001186:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800118a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800118e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001190:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001194:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001198:	fa09 f90b 	lsl.w	r9, r9, fp
 800119c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011a0:	4d38      	ldr	r5, [pc, #224]	; (8001284 <HAL_GPIO_Init+0x1ac>)
 80011a2:	42a8      	cmp	r0, r5
 80011a4:	d063      	beq.n	800126e <HAL_GPIO_Init+0x196>
 80011a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011aa:	42a8      	cmp	r0, r5
 80011ac:	d061      	beq.n	8001272 <HAL_GPIO_Init+0x19a>
 80011ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011b2:	42a8      	cmp	r0, r5
 80011b4:	d05f      	beq.n	8001276 <HAL_GPIO_Init+0x19e>
 80011b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ba:	42a8      	cmp	r0, r5
 80011bc:	bf0c      	ite	eq
 80011be:	2503      	moveq	r5, #3
 80011c0:	2504      	movne	r5, #4
 80011c2:	fa05 f50b 	lsl.w	r5, r5, fp
 80011c6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80011ca:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80011ce:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011d4:	bf14      	ite	ne
 80011d6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d8:	4395      	biceq	r5, r2
 80011da:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80011dc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011de:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011e2:	bf14      	ite	ne
 80011e4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011e6:	4395      	biceq	r5, r2
 80011e8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ea:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f0:	bf14      	ite	ne
 80011f2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011f4:	4395      	biceq	r5, r2
 80011f6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011fe:	bf14      	ite	ne
 8001200:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001202:	ea25 0202 	biceq.w	r2, r5, r2
 8001206:	60da      	str	r2, [r3, #12]
	position++;
 8001208:	3601      	adds	r6, #1
 800120a:	e76e      	b.n	80010ea <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800120c:	2d03      	cmp	r5, #3
 800120e:	d022      	beq.n	8001256 <HAL_GPIO_Init+0x17e>
 8001210:	2d11      	cmp	r5, #17
 8001212:	d189      	bne.n	8001128 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001214:	68cc      	ldr	r4, [r1, #12]
 8001216:	3404      	adds	r4, #4
          break;
 8001218:	e786      	b.n	8001128 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800121a:	4f1b      	ldr	r7, [pc, #108]	; (8001288 <HAL_GPIO_Init+0x1b0>)
 800121c:	42bd      	cmp	r5, r7
 800121e:	d009      	beq.n	8001234 <HAL_GPIO_Init+0x15c>
 8001220:	d812      	bhi.n	8001248 <HAL_GPIO_Init+0x170>
 8001222:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001294 <HAL_GPIO_Init+0x1bc>
 8001226:	454d      	cmp	r5, r9
 8001228:	d004      	beq.n	8001234 <HAL_GPIO_Init+0x15c>
 800122a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800122e:	454d      	cmp	r5, r9
 8001230:	f47f af7a 	bne.w	8001128 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001234:	688c      	ldr	r4, [r1, #8]
 8001236:	b1c4      	cbz	r4, 800126a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001238:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800123a:	bf0c      	ite	eq
 800123c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001240:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2408      	movs	r4, #8
 8001246:	e76f      	b.n	8001128 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001248:	4575      	cmp	r5, lr
 800124a:	d0f3      	beq.n	8001234 <HAL_GPIO_Init+0x15c>
 800124c:	4565      	cmp	r5, ip
 800124e:	d0f1      	beq.n	8001234 <HAL_GPIO_Init+0x15c>
 8001250:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001298 <HAL_GPIO_Init+0x1c0>
 8001254:	e7eb      	b.n	800122e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001256:	2400      	movs	r4, #0
 8001258:	e766      	b.n	8001128 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800125a:	68cc      	ldr	r4, [r1, #12]
          break;
 800125c:	e764      	b.n	8001128 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125e:	68cc      	ldr	r4, [r1, #12]
 8001260:	3408      	adds	r4, #8
          break;
 8001262:	e761      	b.n	8001128 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001264:	68cc      	ldr	r4, [r1, #12]
 8001266:	340c      	adds	r4, #12
          break;
 8001268:	e75e      	b.n	8001128 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800126a:	2404      	movs	r4, #4
 800126c:	e75c      	b.n	8001128 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800126e:	2500      	movs	r5, #0
 8001270:	e7a7      	b.n	80011c2 <HAL_GPIO_Init+0xea>
 8001272:	2501      	movs	r5, #1
 8001274:	e7a5      	b.n	80011c2 <HAL_GPIO_Init+0xea>
 8001276:	2502      	movs	r5, #2
 8001278:	e7a3      	b.n	80011c2 <HAL_GPIO_Init+0xea>
 800127a:	bf00      	nop
 800127c:	40010400 	.word	0x40010400
 8001280:	40021000 	.word	0x40021000
 8001284:	40010800 	.word	0x40010800
 8001288:	10210000 	.word	0x10210000
 800128c:	10310000 	.word	0x10310000
 8001290:	10320000 	.word	0x10320000
 8001294:	10110000 	.word	0x10110000
 8001298:	10220000 	.word	0x10220000

0800129c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	4605      	mov	r5, r0
 80012a2:	b908      	cbnz	r0, 80012a8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
 80012a6:	e03c      	b.n	8001322 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a8:	6803      	ldr	r3, [r0, #0]
 80012aa:	07db      	lsls	r3, r3, #31
 80012ac:	d410      	bmi.n	80012d0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	079f      	lsls	r7, r3, #30
 80012b2:	d45d      	bmi.n	8001370 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	0719      	lsls	r1, r3, #28
 80012b8:	f100 8094 	bmi.w	80013e4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	075a      	lsls	r2, r3, #29
 80012c0:	f100 80be 	bmi.w	8001440 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c4:	69e8      	ldr	r0, [r5, #28]
 80012c6:	2800      	cmp	r0, #0
 80012c8:	f040 812c 	bne.w	8001524 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80012cc:	2000      	movs	r0, #0
 80012ce:	e028      	b.n	8001322 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d0:	4c8f      	ldr	r4, [pc, #572]	; (8001510 <HAL_RCC_OscConfig+0x274>)
 80012d2:	6863      	ldr	r3, [r4, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d007      	beq.n	80012ec <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012dc:	6863      	ldr	r3, [r4, #4]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_OscConfig+0x5e>
 80012e6:	6863      	ldr	r3, [r4, #4]
 80012e8:	03de      	lsls	r6, r3, #15
 80012ea:	d506      	bpl.n	80012fa <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	039c      	lsls	r4, r3, #14
 80012f0:	d5dd      	bpl.n	80012ae <HAL_RCC_OscConfig+0x12>
 80012f2:	686b      	ldr	r3, [r5, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1da      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
 80012f8:	e7d4      	b.n	80012a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fa:	686b      	ldr	r3, [r5, #4]
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001300:	d112      	bne.n	8001328 <HAL_RCC_OscConfig+0x8c>
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800130a:	f7ff f9bf 	bl	800068c <HAL_GetTick>
 800130e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	0398      	lsls	r0, r3, #14
 8001314:	d4cb      	bmi.n	80012ae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001316:	f7ff f9b9 	bl	800068c <HAL_GetTick>
 800131a:	1b80      	subs	r0, r0, r6
 800131c:	2864      	cmp	r0, #100	; 0x64
 800131e:	d9f7      	bls.n	8001310 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001320:	2003      	movs	r0, #3
}
 8001322:	b002      	add	sp, #8
 8001324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	b99b      	cbnz	r3, 8001352 <HAL_RCC_OscConfig+0xb6>
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001338:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800133a:	f7ff f9a7 	bl	800068c <HAL_GetTick>
 800133e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	0399      	lsls	r1, r3, #14
 8001344:	d5b3      	bpl.n	80012ae <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001346:	f7ff f9a1 	bl	800068c <HAL_GetTick>
 800134a:	1b80      	subs	r0, r0, r6
 800134c:	2864      	cmp	r0, #100	; 0x64
 800134e:	d9f7      	bls.n	8001340 <HAL_RCC_OscConfig+0xa4>
 8001350:	e7e6      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	d103      	bne.n	8001362 <HAL_RCC_OscConfig+0xc6>
 800135a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135e:	6023      	str	r3, [r4, #0]
 8001360:	e7cf      	b.n	8001302 <HAL_RCC_OscConfig+0x66>
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6023      	str	r3, [r4, #0]
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	e7cb      	b.n	8001308 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001370:	4c67      	ldr	r4, [pc, #412]	; (8001510 <HAL_RCC_OscConfig+0x274>)
 8001372:	6863      	ldr	r3, [r4, #4]
 8001374:	f013 0f0c 	tst.w	r3, #12
 8001378:	d007      	beq.n	800138a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800137a:	6863      	ldr	r3, [r4, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d110      	bne.n	80013a6 <HAL_RCC_OscConfig+0x10a>
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	03da      	lsls	r2, r3, #15
 8001388:	d40d      	bmi.n	80013a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	079b      	lsls	r3, r3, #30
 800138e:	d502      	bpl.n	8001396 <HAL_RCC_OscConfig+0xfa>
 8001390:	692b      	ldr	r3, [r5, #16]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d186      	bne.n	80012a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	696a      	ldr	r2, [r5, #20]
 800139a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800139e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013a2:	6023      	str	r3, [r4, #0]
 80013a4:	e786      	b.n	80012b4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a6:	692a      	ldr	r2, [r5, #16]
 80013a8:	4b5a      	ldr	r3, [pc, #360]	; (8001514 <HAL_RCC_OscConfig+0x278>)
 80013aa:	b16a      	cbz	r2, 80013c8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013b0:	f7ff f96c 	bl	800068c <HAL_GetTick>
 80013b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	079f      	lsls	r7, r3, #30
 80013ba:	d4ec      	bmi.n	8001396 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013bc:	f7ff f966 	bl	800068c <HAL_GetTick>
 80013c0:	1b80      	subs	r0, r0, r6
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d9f7      	bls.n	80013b6 <HAL_RCC_OscConfig+0x11a>
 80013c6:	e7ab      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80013c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013ca:	f7ff f95f 	bl	800068c <HAL_GetTick>
 80013ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	0798      	lsls	r0, r3, #30
 80013d4:	f57f af6e 	bpl.w	80012b4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff f958 	bl	800068c <HAL_GetTick>
 80013dc:	1b80      	subs	r0, r0, r6
 80013de:	2802      	cmp	r0, #2
 80013e0:	d9f6      	bls.n	80013d0 <HAL_RCC_OscConfig+0x134>
 80013e2:	e79d      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e4:	69aa      	ldr	r2, [r5, #24]
 80013e6:	4c4a      	ldr	r4, [pc, #296]	; (8001510 <HAL_RCC_OscConfig+0x274>)
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_RCC_OscConfig+0x27c>)
 80013ea:	b1da      	cbz	r2, 8001424 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013f0:	f7ff f94c 	bl	800068c <HAL_GetTick>
 80013f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013f8:	079b      	lsls	r3, r3, #30
 80013fa:	d50d      	bpl.n	8001418 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001400:	4b46      	ldr	r3, [pc, #280]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fbb3 f3f2 	udiv	r3, r3, r2
 8001408:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800140a:	bf00      	nop
  }
  while (Delay --);
 800140c:	9b01      	ldr	r3, [sp, #4]
 800140e:	1e5a      	subs	r2, r3, #1
 8001410:	9201      	str	r2, [sp, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <HAL_RCC_OscConfig+0x16e>
 8001416:	e751      	b.n	80012bc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff f938 	bl	800068c <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	2802      	cmp	r0, #2
 8001420:	d9e9      	bls.n	80013f6 <HAL_RCC_OscConfig+0x15a>
 8001422:	e77d      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001424:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001426:	f7ff f931 	bl	800068c <HAL_GetTick>
 800142a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800142e:	079f      	lsls	r7, r3, #30
 8001430:	f57f af44 	bpl.w	80012bc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff f92a 	bl	800068c <HAL_GetTick>
 8001438:	1b80      	subs	r0, r0, r6
 800143a:	2802      	cmp	r0, #2
 800143c:	d9f6      	bls.n	800142c <HAL_RCC_OscConfig+0x190>
 800143e:	e76f      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001440:	4c33      	ldr	r4, [pc, #204]	; (8001510 <HAL_RCC_OscConfig+0x274>)
 8001442:	69e3      	ldr	r3, [r4, #28]
 8001444:	00d8      	lsls	r0, r3, #3
 8001446:	d424      	bmi.n	8001492 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001448:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	69e3      	ldr	r3, [r4, #28]
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	61e3      	str	r3, [r4, #28]
 8001452:	69e3      	ldr	r3, [r4, #28]
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	4e30      	ldr	r6, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x284>)
 800145e:	6833      	ldr	r3, [r6, #0]
 8001460:	05d9      	lsls	r1, r3, #23
 8001462:	d518      	bpl.n	8001496 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	68eb      	ldr	r3, [r5, #12]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d126      	bne.n	80014b8 <HAL_RCC_OscConfig+0x21c>
 800146a:	6a23      	ldr	r3, [r4, #32]
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001472:	f7ff f90b 	bl	800068c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800147a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	6a23      	ldr	r3, [r4, #32]
 800147e:	079b      	lsls	r3, r3, #30
 8001480:	d53f      	bpl.n	8001502 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001482:	2f00      	cmp	r7, #0
 8001484:	f43f af1e 	beq.w	80012c4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001488:	69e3      	ldr	r3, [r4, #28]
 800148a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148e:	61e3      	str	r3, [r4, #28]
 8001490:	e718      	b.n	80012c4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2700      	movs	r7, #0
 8001494:	e7e2      	b.n	800145c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	6833      	ldr	r3, [r6, #0]
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800149e:	f7ff f8f5 	bl	800068c <HAL_GetTick>
 80014a2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	6833      	ldr	r3, [r6, #0]
 80014a6:	05da      	lsls	r2, r3, #23
 80014a8:	d4dc      	bmi.n	8001464 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff f8ef 	bl	800068c <HAL_GetTick>
 80014ae:	eba0 0008 	sub.w	r0, r0, r8
 80014b2:	2864      	cmp	r0, #100	; 0x64
 80014b4:	d9f6      	bls.n	80014a4 <HAL_RCC_OscConfig+0x208>
 80014b6:	e733      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	b9ab      	cbnz	r3, 80014e6 <HAL_RCC_OscConfig+0x24a>
 80014ba:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6223      	str	r3, [r4, #32]
 80014c6:	6a23      	ldr	r3, [r4, #32]
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80014ce:	f7ff f8dd 	bl	800068c <HAL_GetTick>
 80014d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	6a23      	ldr	r3, [r4, #32]
 80014d6:	0798      	lsls	r0, r3, #30
 80014d8:	d5d3      	bpl.n	8001482 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff f8d7 	bl	800068c <HAL_GetTick>
 80014de:	1b80      	subs	r0, r0, r6
 80014e0:	4540      	cmp	r0, r8
 80014e2:	d9f7      	bls.n	80014d4 <HAL_RCC_OscConfig+0x238>
 80014e4:	e71c      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	6a23      	ldr	r3, [r4, #32]
 80014ea:	d103      	bne.n	80014f4 <HAL_RCC_OscConfig+0x258>
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6223      	str	r3, [r4, #32]
 80014f2:	e7ba      	b.n	800146a <HAL_RCC_OscConfig+0x1ce>
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	6223      	str	r3, [r4, #32]
 80014fa:	6a23      	ldr	r3, [r4, #32]
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	e7b6      	b.n	8001470 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff f8c3 	bl	800068c <HAL_GetTick>
 8001506:	eba0 0008 	sub.w	r0, r0, r8
 800150a:	42b0      	cmp	r0, r6
 800150c:	d9b6      	bls.n	800147c <HAL_RCC_OscConfig+0x1e0>
 800150e:	e707      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
 8001510:	40021000 	.word	0x40021000
 8001514:	42420000 	.word	0x42420000
 8001518:	42420480 	.word	0x42420480
 800151c:	20000008 	.word	0x20000008
 8001520:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x334>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	461c      	mov	r4, r3
 800152a:	f002 020c 	and.w	r2, r2, #12
 800152e:	2a08      	cmp	r2, #8
 8001530:	d03d      	beq.n	80015ae <HAL_RCC_OscConfig+0x312>
 8001532:	2300      	movs	r3, #0
 8001534:	4e27      	ldr	r6, [pc, #156]	; (80015d4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001536:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001538:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153a:	d12b      	bne.n	8001594 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800153c:	f7ff f8a6 	bl	800068c <HAL_GetTick>
 8001540:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	0199      	lsls	r1, r3, #6
 8001546:	d41f      	bmi.n	8001588 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001548:	6a2b      	ldr	r3, [r5, #32]
 800154a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154e:	d105      	bne.n	800155c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001550:	6862      	ldr	r2, [r4, #4]
 8001552:	68a9      	ldr	r1, [r5, #8]
 8001554:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001558:	430a      	orrs	r2, r1
 800155a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800155c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800155e:	6862      	ldr	r2, [r4, #4]
 8001560:	430b      	orrs	r3, r1
 8001562:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001566:	4313      	orrs	r3, r2
 8001568:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800156a:	2301      	movs	r3, #1
 800156c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800156e:	f7ff f88d 	bl	800068c <HAL_GetTick>
 8001572:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	019a      	lsls	r2, r3, #6
 8001578:	f53f aea8 	bmi.w	80012cc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff f886 	bl	800068c <HAL_GetTick>
 8001580:	1b40      	subs	r0, r0, r5
 8001582:	2802      	cmp	r0, #2
 8001584:	d9f6      	bls.n	8001574 <HAL_RCC_OscConfig+0x2d8>
 8001586:	e6cb      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff f880 	bl	800068c <HAL_GetTick>
 800158c:	1bc0      	subs	r0, r0, r7
 800158e:	2802      	cmp	r0, #2
 8001590:	d9d7      	bls.n	8001542 <HAL_RCC_OscConfig+0x2a6>
 8001592:	e6c5      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001594:	f7ff f87a 	bl	800068c <HAL_GetTick>
 8001598:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	019b      	lsls	r3, r3, #6
 800159e:	f57f ae95 	bpl.w	80012cc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff f873 	bl	800068c <HAL_GetTick>
 80015a6:	1b40      	subs	r0, r0, r5
 80015a8:	2802      	cmp	r0, #2
 80015aa:	d9f6      	bls.n	800159a <HAL_RCC_OscConfig+0x2fe>
 80015ac:	e6b8      	b.n	8001320 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ae:	2801      	cmp	r0, #1
 80015b0:	f43f aeb7 	beq.w	8001322 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80015b4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	6a2b      	ldr	r3, [r5, #32]
 80015b8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80015bc:	429a      	cmp	r2, r3
 80015be:	f47f ae71 	bne.w	80012a4 <HAL_RCC_OscConfig+0x8>
 80015c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015c4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80015c8:	1ac0      	subs	r0, r0, r3
 80015ca:	bf18      	it	ne
 80015cc:	2001      	movne	r0, #1
 80015ce:	e6a8      	b.n	8001322 <HAL_RCC_OscConfig+0x86>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	42420060 	.word	0x42420060

080015d8 <HAL_RCC_GetSysClockFreq>:
{
 80015d8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80015dc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015de:	ac02      	add	r4, sp, #8
 80015e0:	f103 0510 	add.w	r5, r3, #16
 80015e4:	4622      	mov	r2, r4
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	6859      	ldr	r1, [r3, #4]
 80015ea:	3308      	adds	r3, #8
 80015ec:	c203      	stmia	r2!, {r0, r1}
 80015ee:	42ab      	cmp	r3, r5
 80015f0:	4614      	mov	r4, r2
 80015f2:	d1f7      	bne.n	80015e4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015f4:	2301      	movs	r3, #1
 80015f6:	f88d 3004 	strb.w	r3, [sp, #4]
 80015fa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80015fc:	4911      	ldr	r1, [pc, #68]	; (8001644 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015fe:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001602:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001604:	f003 020c 	and.w	r2, r3, #12
 8001608:	2a08      	cmp	r2, #8
 800160a:	d117      	bne.n	800163c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800160c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001610:	a806      	add	r0, sp, #24
 8001612:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001614:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001616:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800161a:	d50c      	bpl.n	8001636 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800161c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800161e:	480a      	ldr	r0, [pc, #40]	; (8001648 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001620:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001624:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001626:	aa06      	add	r2, sp, #24
 8001628:	4413      	add	r3, r2
 800162a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800162e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001632:	b007      	add	sp, #28
 8001634:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_RCC_GetSysClockFreq+0x74>)
 8001638:	4350      	muls	r0, r2
 800163a:	e7fa      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800163e:	e7f8      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x5a>
 8001640:	08001d64 	.word	0x08001d64
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200
 800164c:	003d0900 	.word	0x003d0900

08001650 <HAL_RCC_ClockConfig>:
{
 8001650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001654:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001656:	4604      	mov	r4, r0
 8001658:	b910      	cbnz	r0, 8001660 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800165a:	2001      	movs	r0, #1
 800165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001660:	4a45      	ldr	r2, [pc, #276]	; (8001778 <HAL_RCC_ClockConfig+0x128>)
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	428b      	cmp	r3, r1
 800166a:	d329      	bcc.n	80016c0 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	6821      	ldr	r1, [r4, #0]
 800166e:	078e      	lsls	r6, r1, #30
 8001670:	d431      	bmi.n	80016d6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001672:	07ca      	lsls	r2, r1, #31
 8001674:	d444      	bmi.n	8001700 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <HAL_RCC_ClockConfig+0x128>)
 8001678:	6813      	ldr	r3, [r2, #0]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	429d      	cmp	r5, r3
 8001680:	d367      	bcc.n	8001752 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001682:	6822      	ldr	r2, [r4, #0]
 8001684:	4d3d      	ldr	r5, [pc, #244]	; (800177c <HAL_RCC_ClockConfig+0x12c>)
 8001686:	f012 0f04 	tst.w	r2, #4
 800168a:	d16e      	bne.n	800176a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168c:	0713      	lsls	r3, r2, #28
 800168e:	d506      	bpl.n	800169e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001690:	686b      	ldr	r3, [r5, #4]
 8001692:	6922      	ldr	r2, [r4, #16]
 8001694:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001698:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800169c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800169e:	f7ff ff9b 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 80016a2:	686b      	ldr	r3, [r5, #4]
 80016a4:	4a36      	ldr	r2, [pc, #216]	; (8001780 <HAL_RCC_ClockConfig+0x130>)
 80016a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	40d8      	lsrs	r0, r3
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_RCC_ClockConfig+0x134>)
 80016b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80016b2:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_RCC_ClockConfig+0x138>)
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	f7fe ffa7 	bl	8000608 <HAL_InitTick>
  return HAL_OK;
 80016ba:	2000      	movs	r0, #0
 80016bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	f023 0307 	bic.w	r3, r3, #7
 80016c6:	430b      	orrs	r3, r1
 80016c8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	4299      	cmp	r1, r3
 80016d2:	d1c2      	bne.n	800165a <HAL_RCC_ClockConfig+0xa>
 80016d4:	e7ca      	b.n	800166c <HAL_RCC_ClockConfig+0x1c>
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	bf1e      	ittt	ne
 80016de:	685a      	ldrne	r2, [r3, #4]
 80016e0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80016e4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	bf42      	ittt	mi
 80016ea:	685a      	ldrmi	r2, [r3, #4]
 80016ec:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80016f0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	68a0      	ldr	r0, [r4, #8]
 80016f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016fa:	4302      	orrs	r2, r0
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	e7b8      	b.n	8001672 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001700:	6862      	ldr	r2, [r4, #4]
 8001702:	4e1e      	ldr	r6, [pc, #120]	; (800177c <HAL_RCC_ClockConfig+0x12c>)
 8001704:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001708:	d11b      	bne.n	8001742 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	d0a4      	beq.n	800165a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001710:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001712:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	4313      	orrs	r3, r2
 800171c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800171e:	f7fe ffb5 	bl	800068c <HAL_GetTick>
 8001722:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001724:	6873      	ldr	r3, [r6, #4]
 8001726:	6862      	ldr	r2, [r4, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001730:	d0a1      	beq.n	8001676 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001732:	f7fe ffab 	bl	800068c <HAL_GetTick>
 8001736:	1bc0      	subs	r0, r0, r7
 8001738:	4540      	cmp	r0, r8
 800173a:	d9f3      	bls.n	8001724 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800173c:	2003      	movs	r0, #3
}
 800173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	2a02      	cmp	r2, #2
 8001744:	d102      	bne.n	800174c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800174a:	e7e0      	b.n	800170e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	f013 0f02 	tst.w	r3, #2
 8001750:	e7dd      	b.n	800170e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	f023 0307 	bic.w	r3, r3, #7
 8001758:	432b      	orrs	r3, r5
 800175a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175c:	6813      	ldr	r3, [r2, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	429d      	cmp	r5, r3
 8001764:	f47f af79 	bne.w	800165a <HAL_RCC_ClockConfig+0xa>
 8001768:	e78b      	b.n	8001682 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176a:	686b      	ldr	r3, [r5, #4]
 800176c:	68e1      	ldr	r1, [r4, #12]
 800176e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001772:	430b      	orrs	r3, r1
 8001774:	606b      	str	r3, [r5, #4]
 8001776:	e789      	b.n	800168c <HAL_RCC_ClockConfig+0x3c>
 8001778:	40022000 	.word	0x40022000
 800177c:	40021000 	.word	0x40021000
 8001780:	08001d84 	.word	0x08001d84
 8001784:	20000008 	.word	0x20000008
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800179a:	6810      	ldr	r0, [r2, #0]
}
 800179c:	40d8      	lsrs	r0, r3
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	08001d94 	.word	0x08001d94
 80017a8:	20000008 	.word	0x20000008

080017ac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017ac:	6803      	ldr	r3, [r0, #0]
{
 80017ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017b2:	07d9      	lsls	r1, r3, #31
{
 80017b4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017b6:	d520      	bpl.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b8:	4c35      	ldr	r4, [pc, #212]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80017ba:	69e3      	ldr	r3, [r4, #28]
 80017bc:	00da      	lsls	r2, r3, #3
 80017be:	d432      	bmi.n	8001826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80017c0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	69e3      	ldr	r3, [r4, #28]
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	61e3      	str	r3, [r4, #28]
 80017ca:	69e3      	ldr	r3, [r4, #28]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	4e2f      	ldr	r6, [pc, #188]	; (8001894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80017d6:	6833      	ldr	r3, [r6, #0]
 80017d8:	05db      	lsls	r3, r3, #23
 80017da:	d526      	bpl.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017dc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017de:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80017e2:	d136      	bne.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017e4:	6a23      	ldr	r3, [r4, #32]
 80017e6:	686a      	ldr	r2, [r5, #4]
 80017e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ec:	4313      	orrs	r3, r2
 80017ee:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f0:	b11f      	cbz	r7, 80017fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f2:	69e3      	ldr	r3, [r4, #28]
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80017fa:	6828      	ldr	r0, [r5, #0]
 80017fc:	0783      	lsls	r3, r0, #30
 80017fe:	d506      	bpl.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001800:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001802:	68a9      	ldr	r1, [r5, #8]
 8001804:	6853      	ldr	r3, [r2, #4]
 8001806:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800180a:	430b      	orrs	r3, r1
 800180c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800180e:	f010 0010 	ands.w	r0, r0, #16
 8001812:	d01b      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001816:	68e9      	ldr	r1, [r5, #12]
 8001818:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800181a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800181c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001820:	430b      	orrs	r3, r1
 8001822:	6053      	str	r3, [r2, #4]
 8001824:	e012      	b.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001826:	2700      	movs	r7, #0
 8001828:	e7d4      	b.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	6833      	ldr	r3, [r6, #0]
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001832:	f7fe ff2b 	bl	800068c <HAL_GetTick>
 8001836:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	6833      	ldr	r3, [r6, #0]
 800183a:	05d8      	lsls	r0, r3, #23
 800183c:	d4ce      	bmi.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7fe ff25 	bl	800068c <HAL_GetTick>
 8001842:	eba0 0008 	sub.w	r0, r0, r8
 8001846:	2864      	cmp	r0, #100	; 0x64
 8001848:	d9f6      	bls.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800184a:	2003      	movs	r0, #3
}
 800184c:	b002      	add	sp, #8
 800184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001852:	686a      	ldr	r2, [r5, #4]
 8001854:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001858:	4293      	cmp	r3, r2
 800185a:	d0c3      	beq.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800185c:	2001      	movs	r0, #1
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001860:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001862:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001864:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001866:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800186a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800186c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800186e:	07d9      	lsls	r1, r3, #31
 8001870:	d5b8      	bpl.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001872:	f7fe ff0b 	bl	800068c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800187a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	6a23      	ldr	r3, [r4, #32]
 800187e:	079a      	lsls	r2, r3, #30
 8001880:	d4b0      	bmi.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7fe ff03 	bl	800068c <HAL_GetTick>
 8001886:	1b80      	subs	r0, r0, r6
 8001888:	4540      	cmp	r0, r8
 800188a:	d9f7      	bls.n	800187c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800188c:	e7dd      	b.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	40007000 	.word	0x40007000
 8001898:	42420440 	.word	0x42420440

0800189c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800189c:	b570      	push	{r4, r5, r6, lr}
 800189e:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 80018a2:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018a4:	ad02      	add	r5, sp, #8
 80018a6:	f103 0610 	add.w	r6, r3, #16
 80018aa:	462a      	mov	r2, r5
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	3308      	adds	r3, #8
 80018b2:	c203      	stmia	r2!, {r0, r1}
 80018b4:	42b3      	cmp	r3, r6
 80018b6:	4615      	mov	r5, r2
 80018b8:	d1f7      	bne.n	80018aa <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018ba:	2301      	movs	r3, #1
 80018bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80018c0:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80018c2:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018c4:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80018c8:	d047      	beq.n	800195a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80018ca:	2c10      	cmp	r4, #16
 80018cc:	d017      	beq.n	80018fe <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80018ce:	2c01      	cmp	r4, #1
 80018d0:	d14f      	bne.n	8001972 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80018d2:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80018d6:	4a29      	ldr	r2, [pc, #164]	; (800197c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80018d8:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80018da:	4019      	ands	r1, r3
 80018dc:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80018e0:	d044      	beq.n	800196c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80018e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ea:	d12d      	bne.n	8001948 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 80018ec:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80018f0:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80018f2:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80018f6:	bf08      	it	eq
 80018f8:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80018fa:	b006      	add	sp, #24
 80018fc:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001900:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001908:	d0f7      	beq.n	80018fa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800190a:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800190e:	a806      	add	r0, sp, #24
 8001910:	4402      	add	r2, r0
 8001912:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001916:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001918:	bf41      	itttt	mi
 800191a:	685a      	ldrmi	r2, [r3, #4]
 800191c:	a906      	addmi	r1, sp, #24
 800191e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001922:	1852      	addmi	r2, r2, r1
 8001924:	bf44      	itt	mi
 8001926:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800192a:	4a15      	ldrmi	r2, [pc, #84]	; (8001980 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800192c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800192e:	bf4c      	ite	mi
 8001930:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001934:	4a13      	ldrpl	r2, [pc, #76]	; (8001984 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001936:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001938:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800193c:	d4dd      	bmi.n	80018fa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 800193e:	2303      	movs	r3, #3
 8001940:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001942:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001946:	e7d8      	b.n	80018fa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800194c:	d111      	bne.n	8001972 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800194e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001950:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001954:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001958:	e7cd      	b.n	80018f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800195a:	f7ff ff17 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001966:	3301      	adds	r3, #1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	e7ea      	b.n	8001942 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 800196c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001970:	e7c3      	b.n	80018fa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001972:	2000      	movs	r0, #0
 8001974:	e7c1      	b.n	80018fa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001976:	bf00      	nop
 8001978:	08001d74 	.word	0x08001d74
 800197c:	40021000 	.word	0x40021000
 8001980:	007a1200 	.word	0x007a1200
 8001984:	003d0900 	.word	0x003d0900

08001988 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001988:	b538      	push	{r3, r4, r5, lr}
	if (hadc->Instance == ADC1) {
 800198a:	6802      	ldr	r2, [r0, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_ADC_ConvCpltCallback+0x50>)
 800198e:	429a      	cmp	r2, r3
 8001990:	d121      	bne.n	80019d6 <HAL_ADC_ConvCpltCallback+0x4e>
		HAL_ADC_Stop_DMA(&hadc1);
		voltage[0] = (adc_value[0] * 3.315f) / 4095;
 8001992:	4c12      	ldr	r4, [pc, #72]	; (80019dc <HAL_ADC_ConvCpltCallback+0x54>)
		HAL_ADC_Stop_DMA(&hadc1);
 8001994:	4812      	ldr	r0, [pc, #72]	; (80019e0 <HAL_ADC_ConvCpltCallback+0x58>)
 8001996:	f7ff f983 	bl	8000ca0 <HAL_ADC_Stop_DMA>
		voltage[0] = (adc_value[0] * 3.315f) / 4095;
 800199a:	8820      	ldrh	r0, [r4, #0]
 800199c:	4d11      	ldr	r5, [pc, #68]	; (80019e4 <HAL_ADC_ConvCpltCallback+0x5c>)
 800199e:	b280      	uxth	r0, r0
 80019a0:	f7fe fc8e 	bl	80002c0 <__aeabi_i2f>
 80019a4:	4910      	ldr	r1, [pc, #64]	; (80019e8 <HAL_ADC_ConvCpltCallback+0x60>)
 80019a6:	f7fe fcdf 	bl	8000368 <__aeabi_fmul>
 80019aa:	4910      	ldr	r1, [pc, #64]	; (80019ec <HAL_ADC_ConvCpltCallback+0x64>)
 80019ac:	f7fe fd90 	bl	80004d0 <__aeabi_fdiv>
 80019b0:	6028      	str	r0, [r5, #0]
		voltage[1] = (adc_value[1] * 3.315f) / 4095;
 80019b2:	8860      	ldrh	r0, [r4, #2]
 80019b4:	b280      	uxth	r0, r0
 80019b6:	f7fe fc83 	bl	80002c0 <__aeabi_i2f>
 80019ba:	490b      	ldr	r1, [pc, #44]	; (80019e8 <HAL_ADC_ConvCpltCallback+0x60>)
 80019bc:	f7fe fcd4 	bl	8000368 <__aeabi_fmul>
 80019c0:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_ADC_ConvCpltCallback+0x64>)
 80019c2:	f7fe fd85 	bl	80004d0 <__aeabi_fdiv>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_value, 2);
 80019c6:	4621      	mov	r1, r4
		voltage[1] = (adc_value[1] * 3.315f) / 4095;
 80019c8:	6068      	str	r0, [r5, #4]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_value, 2);
 80019ca:	2202      	movs	r2, #2
	}
}
 80019cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_value, 2);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <HAL_ADC_ConvCpltCallback+0x58>)
 80019d2:	f7ff b835 	b.w	8000a40 <HAL_ADC_Start_DMA>
 80019d6:	bd38      	pop	{r3, r4, r5, pc}
 80019d8:	40012400 	.word	0x40012400
 80019dc:	20000038 	.word	0x20000038
 80019e0:	2000003c 	.word	0x2000003c
 80019e4:	20000030 	.word	0x20000030
 80019e8:	405428f6 	.word	0x405428f6
 80019ec:	457ff000 	.word	0x457ff000

080019f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019f0:	2228      	movs	r2, #40	; 0x28
void SystemClock_Config(void) {
 80019f2:	b510      	push	{r4, lr}
 80019f4:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019f6:	eb0d 0002 	add.w	r0, sp, r2
 80019fa:	2100      	movs	r1, #0
 80019fc:	f000 f99e 	bl	8001d3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a00:	2214      	movs	r2, #20
 8001a02:	2100      	movs	r1, #0
 8001a04:	eb0d 0002 	add.w	r0, sp, r2
 8001a08:	f000 f998 	bl	8001d3c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2210      	movs	r2, #16
 8001a10:	a801      	add	r0, sp, #4
 8001a12:	f000 f993 	bl	8001d3c <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a1c:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1e:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a20:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a22:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a26:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2a:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a2c:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2e:	9411      	str	r4, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a30:	f7ff fc34 	bl	800129c <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a34:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a3a:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001a3e:	4621      	mov	r1, r4
 8001a40:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a42:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a44:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a46:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a48:	9406      	str	r4, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001a4a:	f7ff fe01 	bl	8001650 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001a52:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a54:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a56:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001a58:	f7ff fea8 	bl	80017ac <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8001a5c:	b014      	add	sp, #80	; 0x50
 8001a5e:	bd10      	pop	{r4, pc}

08001a60 <main>:
int main(void) {
 8001a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_Init();
 8001a62:	f7fe fdf5 	bl	8000650 <HAL_Init>
	SystemClock_Config();
 8001a66:	f7ff ffc3 	bl	80019f0 <SystemClock_Config>
 * @retval None
 */
static void MX_GPIO_Init(void) {

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001a6a:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <main+0xcc>)
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a6c:	200b      	movs	r0, #11
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001a6e:	699a      	ldr	r2, [r3, #24]
	hadc1.Instance = ADC1;
 8001a70:	4c2f      	ldr	r4, [pc, #188]	; (8001b30 <main+0xd0>)
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	619a      	str	r2, [r3, #24]
 8001a78:	699a      	ldr	r2, [r3, #24]
	hadc1.Init.NbrOfConversion = 2;
 8001a7a:	2502      	movs	r5, #2
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001a7c:	f002 0220 	and.w	r2, r2, #32
 8001a80:	9201      	str	r2, [sp, #4]
 8001a82:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	f042 0204 	orr.w	r2, r2, #4
 8001a8a:	619a      	str	r2, [r3, #24]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	f002 0204 	and.w	r2, r2, #4
 8001a92:	9202      	str	r2, [sp, #8]
 8001a94:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_DMA1_CLK_ENABLE()
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	615a      	str	r2, [r3, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
	__HAL_RCC_DMA1_CLK_ENABLE()
 8001aa0:	695b      	ldr	r3, [r3, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001aa2:	4611      	mov	r1, r2
	__HAL_RCC_DMA1_CLK_ENABLE()
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001aac:	f7ff f99a 	bl	8000de4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ab0:	200b      	movs	r0, #11
 8001ab2:	f7ff f9cb 	bl	8000e4c <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <main+0xd4>)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001ab8:	2300      	movs	r3, #0
	hadc1.Instance = ADC1;
 8001aba:	6022      	str	r2, [r4, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac0:	60a2      	str	r2, [r4, #8]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ac2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001ac6:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ac8:	61e2      	str	r2, [r4, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001aca:	7323      	strb	r3, [r4, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001acc:	7523      	strb	r3, [r4, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ace:	6063      	str	r3, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001ad0:	9303      	str	r3, [sp, #12]
 8001ad2:	9304      	str	r3, [sp, #16]
 8001ad4:	9305      	str	r3, [sp, #20]
	hadc1.Init.NbrOfConversion = 2;
 8001ad6:	6125      	str	r5, [r4, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001ad8:	f7ff f862 	bl	8000ba0 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	9303      	str	r3, [sp, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ae0:	9304      	str	r3, [sp, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001ae2:	2307      	movs	r3, #7
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001ae4:	a903      	add	r1, sp, #12
 8001ae6:	4620      	mov	r0, r4
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001ae8:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001aea:	f7fe fe87 	bl	80007fc <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001aee:	a903      	add	r1, sp, #12
 8001af0:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_2;
 8001af2:	9503      	str	r5, [sp, #12]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001af4:	9504      	str	r5, [sp, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001af6:	f7fe fe81 	bl	80007fc <HAL_ADC_ConfigChannel>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff f8f6 	bl	8000cec <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_value, 2);
 8001b00:	462a      	mov	r2, r5
 8001b02:	490d      	ldr	r1, [pc, #52]	; (8001b38 <main+0xd8>)
 8001b04:	4620      	mov	r0, r4
 8001b06:	f7fe ff9b 	bl	8000a40 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7fe ff32 	bl	8000974 <HAL_ADC_Start_IT>
	T = HAL_GetTick();
 8001b10:	f7fe fdbc 	bl	800068c <HAL_GetTick>
 8001b14:	4c09      	ldr	r4, [pc, #36]	; (8001b3c <main+0xdc>)
 8001b16:	6020      	str	r0, [r4, #0]
		if (HAL_GetTick() - T >= 1000){
 8001b18:	f7fe fdb8 	bl	800068c <HAL_GetTick>
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	1ac0      	subs	r0, r0, r3
 8001b20:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b24:	d3f8      	bcc.n	8001b18 <main+0xb8>
			T=HAL_GetTick();
 8001b26:	f7fe fdb1 	bl	800068c <HAL_GetTick>
 8001b2a:	e7f4      	b.n	8001b16 <main+0xb6>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	2000003c 	.word	0x2000003c
 8001b34:	40012400 	.word	0x40012400
 8001b38:	20000038 	.word	0x20000038
 8001b3c:	2000002c 	.word	0x2000002c

08001b40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_MspInit+0x3c>)
{
 8001b46:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	619a      	str	r2, [r3, #24]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	f002 0201 	and.w	r2, r2, #1
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	69da      	ldr	r2, [r3, #28]
 8001b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b60:	61da      	str	r2, [r3, #28]
 8001b62:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b6e:	6853      	ldr	r3, [r2, #4]
 8001b70:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7a:	b002      	add	sp, #8
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010000 	.word	0x40010000

08001b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b88:	b530      	push	{r4, r5, lr}
 8001b8a:	4605      	mov	r5, r0
 8001b8c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	2210      	movs	r2, #16
 8001b90:	2100      	movs	r1, #0
 8001b92:	a802      	add	r0, sp, #8
 8001b94:	f000 f8d2 	bl	8001d3c <memset>
  if(hadc->Instance==ADC1)
 8001b98:	682a      	ldr	r2, [r5, #0]
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_ADC_MspInit+0x98>)
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d13c      	bne.n	8001c1a <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ba0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001ba4:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	481f      	ldr	r0, [pc, #124]	; (8001c24 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bac:	619a      	str	r2, [r3, #24]
 8001bae:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001bb6:	9200      	str	r2, [sp, #0]
 8001bb8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bbc:	4c1a      	ldr	r4, [pc, #104]	; (8001c28 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	f042 0204 	orr.w	r2, r2, #4
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001bce:	2306      	movs	r3, #6
 8001bd0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f7ff fa7f 	bl	80010d8 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be2:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bea:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001bec:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bee:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf0:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bf2:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf4:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf6:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bf8:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bfa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bfc:	f7ff f94a 	bl	8000e94 <HAL_DMA_Init>
 8001c00:	b108      	cbz	r0, 8001c06 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001c02:	f7ff ff9d 	bl	8001b40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c08:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c0a:	2012      	movs	r0, #18
 8001c0c:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c0e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c10:	f7ff f8e8 	bl	8000de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c14:	2012      	movs	r0, #18
 8001c16:	f7ff f919 	bl	8000e4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c1a:	b007      	add	sp, #28
 8001c1c:	bd30      	pop	{r4, r5, pc}
 8001c1e:	bf00      	nop
 8001c20:	40012400 	.word	0x40012400
 8001c24:	40010800 	.word	0x40010800
 8001c28:	2000006c 	.word	0x2000006c
 8001c2c:	40020008 	.word	0x40020008

08001c30 <NMI_Handler>:
 8001c30:	4770      	bx	lr

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	e7fe      	b.n	8001c32 <HardFault_Handler>

08001c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	e7fe      	b.n	8001c38 <UsageFault_Handler>

08001c3a <SVC_Handler>:
 8001c3a:	4770      	bx	lr

08001c3c <DebugMon_Handler>:
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f7fe bd18 	b.w	8000674 <HAL_IncTick>

08001c44 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c44:	4801      	ldr	r0, [pc, #4]	; (8001c4c <DMA1_Channel1_IRQHandler+0x8>)
 8001c46:	f7ff b9b3 	b.w	8000fb0 <HAL_DMA_IRQHandler>
 8001c4a:	bf00      	nop
 8001c4c:	2000006c 	.word	0x2000006c

08001c50 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <ADC1_2_IRQHandler+0x8>)
 8001c52:	f7fe bd4f 	b.w	80006f4 <HAL_ADC_IRQHandler>
 8001c56:	bf00      	nop
 8001c58:	2000003c 	.word	0x2000003c

08001c5c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <SystemInit+0x40>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <SystemInit+0x44>)
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c78:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c80:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001c88:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <SystemInit+0x48>)
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	f8ff0000 	.word	0xf8ff0000
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ca8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001caa:	e003      	b.n	8001cb4 <LoopCopyDataInit>

08001cac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cb2:	3104      	adds	r1, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cb4:	480a      	ldr	r0, [pc, #40]	; (8001ce0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cbc:	d3f6      	bcc.n	8001cac <CopyDataInit>
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001cc0:	e002      	b.n	8001cc8 <LoopFillZerobss>

08001cc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001cc4:	f842 3b04 	str.w	r3, [r2], #4

08001cc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001cca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ccc:	d3f9      	bcc.n	8001cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cce:	f7ff ffc5 	bl	8001c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f000 f80f 	bl	8001cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd6:	f7ff fec3 	bl	8001a60 <main>
  bx lr
 8001cda:	4770      	bx	lr
  ldr r3, =_sidata
 8001cdc:	08001da4 	.word	0x08001da4
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ce4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001ce8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001cec:	200000b0 	.word	0x200000b0

08001cf0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <CAN1_RX1_IRQHandler>
	...

08001cf4 <__libc_init_array>:
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	2500      	movs	r5, #0
 8001cf8:	4e0c      	ldr	r6, [pc, #48]	; (8001d2c <__libc_init_array+0x38>)
 8001cfa:	4c0d      	ldr	r4, [pc, #52]	; (8001d30 <__libc_init_array+0x3c>)
 8001cfc:	1ba4      	subs	r4, r4, r6
 8001cfe:	10a4      	asrs	r4, r4, #2
 8001d00:	42a5      	cmp	r5, r4
 8001d02:	d109      	bne.n	8001d18 <__libc_init_array+0x24>
 8001d04:	f000 f822 	bl	8001d4c <_init>
 8001d08:	2500      	movs	r5, #0
 8001d0a:	4e0a      	ldr	r6, [pc, #40]	; (8001d34 <__libc_init_array+0x40>)
 8001d0c:	4c0a      	ldr	r4, [pc, #40]	; (8001d38 <__libc_init_array+0x44>)
 8001d0e:	1ba4      	subs	r4, r4, r6
 8001d10:	10a4      	asrs	r4, r4, #2
 8001d12:	42a5      	cmp	r5, r4
 8001d14:	d105      	bne.n	8001d22 <__libc_init_array+0x2e>
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
 8001d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d1c:	4798      	blx	r3
 8001d1e:	3501      	adds	r5, #1
 8001d20:	e7ee      	b.n	8001d00 <__libc_init_array+0xc>
 8001d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d26:	4798      	blx	r3
 8001d28:	3501      	adds	r5, #1
 8001d2a:	e7f2      	b.n	8001d12 <__libc_init_array+0x1e>
 8001d2c:	08001d9c 	.word	0x08001d9c
 8001d30:	08001d9c 	.word	0x08001d9c
 8001d34:	08001d9c 	.word	0x08001d9c
 8001d38:	08001da0 	.word	0x08001da0

08001d3c <memset>:
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4402      	add	r2, r0
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d100      	bne.n	8001d46 <memset+0xa>
 8001d44:	4770      	bx	lr
 8001d46:	f803 1b01 	strb.w	r1, [r3], #1
 8001d4a:	e7f9      	b.n	8001d40 <memset+0x4>

08001d4c <_init>:
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	bf00      	nop
 8001d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d52:	bc08      	pop	{r3}
 8001d54:	469e      	mov	lr, r3
 8001d56:	4770      	bx	lr

08001d58 <_fini>:
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	bf00      	nop
 8001d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5e:	bc08      	pop	{r3}
 8001d60:	469e      	mov	lr, r3
 8001d62:	4770      	bx	lr
