
ST7920_Practic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08006be8  08006be8  00016be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec0  08006ec0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006ec0  08006ec0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ec0  08006ec0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  200001e0  080070a8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  080070a8  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000863f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017c2  00000000  00000000  00028848  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  0002a010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  0002a748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000170ea  00000000  00000000  0002add0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b5d  00000000  00000000  00041eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081ea8  00000000  00000000  00048a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca8bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002910  00000000  00000000  000ca93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006bcc 	.word	0x08006bcc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006bcc 	.word	0x08006bcc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <ST7920_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void ST7920_Send_command(uint8_t Data) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <ST7920_Send_command+0x60>)
 8000b74:	2202      	movs	r2, #2
 8000b76:	611a      	str	r2, [r3, #16]
	uint8_t tx_buffer = 0xF8; //Отправка команды. RW = 0/RS = 0
 8000b78:	23f8      	movs	r3, #248	; 0xf8
 8000b7a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000b7c:	f107 030f 	add.w	r3, r7, #15
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	4811      	ldr	r0, [pc, #68]	; (8000bcc <ST7920_Send_command+0x64>)
 8000b86:	f001 ffcd 	bl	8002b24 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0;  //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000b94:	f107 030f 	add.w	r3, r7, #15
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480b      	ldr	r0, [pc, #44]	; (8000bcc <ST7920_Send_command+0x64>)
 8000b9e:	f001 ffc1 	bl	8002b24 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000baa:	f107 030f 	add.w	r3, r7, #15
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <ST7920_Send_command+0x64>)
 8000bb4:	f001 ffb6 	bl	8002b24 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <ST7920_Send_command+0x60>)
 8000bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bbe:	611a      	str	r2, [r3, #16]
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	20000608 	.word	0x20000608

08000bd0 <ST7920_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
static void ST7920_Send_data(uint8_t Data) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <ST7920_Send_data+0x60>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	611a      	str	r2, [r3, #16]
	uint8_t tx_buffer = 0xFA; //Отправка данных. RW = 0/RS = 1
 8000be0:	23fa      	movs	r3, #250	; 0xfa
 8000be2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000be4:	f107 030f 	add.w	r3, r7, #15
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <ST7920_Send_data+0x64>)
 8000bee:	f001 ff99 	bl	8002b24 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0; //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f023 030f 	bic.w	r3, r3, #15
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000bfc:	f107 030f 	add.w	r3, r7, #15
 8000c00:	2201      	movs	r2, #1
 8000c02:	4619      	mov	r1, r3
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <ST7920_Send_data+0x64>)
 8000c06:	f001 ff8d 	bl	8002b24 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000c12:	f107 030f 	add.w	r3, r7, #15
 8000c16:	2201      	movs	r2, #1
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <ST7920_Send_data+0x64>)
 8000c1c:	f001 ff82 	bl	8002b24 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <ST7920_Send_data+0x60>)
 8000c22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c26:	611a      	str	r2, [r3, #16]
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40010800 	.word	0x40010800
 8000c34:	20000608 	.word	0x20000608

08000c38 <ST7920_Init>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void ST7920_Init(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	RST_reset(); //Дернем ножку RST
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <ST7920_Init+0x80>)
 8000c40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c44:	611a      	str	r2, [r3, #16]
	HAL_Delay(10);
 8000c46:	200a      	movs	r0, #10
 8000c48:	f000 fe86 	bl	8001958 <HAL_Delay>
	RST_set();
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <ST7920_Init+0x80>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	611a      	str	r2, [r3, #16]
	HAL_Delay(40); //Ждем 40 мс
 8000c52:	2028      	movs	r0, #40	; 0x28
 8000c54:	f000 fe80 	bl	8001958 <HAL_Delay>

	//Далее все согласно Datasheet://
	uint8_t tx_buffer = 0x30; //Function set
 8000c58:	2330      	movs	r3, #48	; 0x30
 8000c5a:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff82 	bl	8000b68 <ST7920_Send_command>
	HAL_Delay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 fe77 	bl	8001958 <HAL_Delay>
	ST7920_Send_command(tx_buffer);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff7b 	bl	8000b68 <ST7920_Send_command>
	HAL_Delay(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 fe70 	bl	8001958 <HAL_Delay>
	tx_buffer = 0x0C; //D = 1, C = 0, B = 0.
 8000c78:	230c      	movs	r3, #12
 8000c7a:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff72 	bl	8000b68 <ST7920_Send_command>
	HAL_Delay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 fe67 	bl	8001958 <HAL_Delay>
	tx_buffer = 0x01;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Display Clean
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff69 	bl	8000b68 <ST7920_Send_command>
	HAL_Delay(12);
 8000c96:	200c      	movs	r0, #12
 8000c98:	f000 fe5e 	bl	8001958 <HAL_Delay>
	tx_buffer = 0x06;
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Cursor increment right no shift
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff60 	bl	8000b68 <ST7920_Send_command>
	HAL_Delay(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 fe55 	bl	8001958 <HAL_Delay>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40010800 	.word	0x40010800

08000cbc <ST7920_Graphic_mode>:
}
/*----------------Функция вывода символьного текста на дисплей--------------------*/

/*----------------Функция включения/выключения графического режима----------------*/
void ST7920_Graphic_mode(bool enable)   // 1-enable, 0-disable
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00c      	beq.n	8000ce6 <ST7920_Graphic_mode+0x2a>
		ST7920_Send_command(0x34);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 1. Переходим в extended instruction.
 8000ccc:	2034      	movs	r0, #52	; 0x34
 8000cce:	f7ff ff4b 	bl	8000b68 <ST7920_Send_command>
		HAL_Delay(1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f000 fe40 	bl	8001958 <HAL_Delay>
		ST7920_Send_command(0x36);  // Включаем графический режим
 8000cd8:	2036      	movs	r0, #54	; 0x36
 8000cda:	f7ff ff45 	bl	8000b68 <ST7920_Send_command>
		HAL_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 fe3a 	bl	8001958 <HAL_Delay>

	else if (!enable) {
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
		HAL_Delay(1);
	}
}
 8000ce4:	e00b      	b.n	8000cfe <ST7920_Graphic_mode+0x42>
	else if (!enable) {
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f083 0301 	eor.w	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <ST7920_Graphic_mode+0x42>
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
 8000cf2:	2030      	movs	r0, #48	; 0x30
 8000cf4:	f7ff ff38 	bl	8000b68 <ST7920_Send_command>
		HAL_Delay(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 fe2d 	bl	8001958 <HAL_Delay>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <ST7920_Draw_bitmap>:
	ST7920_Clean_Frame_buffer();
}
/*---------------Функция очистки дисплея в графическом режиме--------------------*/

/*-------------------Функция вывода изображения на экран дисплея--------------------------*/
void ST7920_Draw_bitmap(const unsigned char *bitmap) {
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
/// Функция вывода изображения на дисплей
/// Работает с памятью ST7920.
/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	81bb      	strh	r3, [r7, #12]
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	73bb      	strb	r3, [r7, #14]
 8000d16:	e13a      	b.n	8000f8e <ST7920_Draw_bitmap+0x288>
		for (x = 0; x < 8; x++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e130      	b.n	8000f80 <ST7920_Draw_bitmap+0x27a>
			if (y < 32) {
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	2b1f      	cmp	r3, #31
 8000d22:	d80e      	bhi.n	8000d42 <ST7920_Draw_bitmap+0x3c>
				ST7920_Send_command(0x80 | y);				//y(0-31)
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff1b 	bl	8000b68 <ST7920_Send_command>
				ST7920_Send_command(0x80 | x);				//x(0-8)
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff14 	bl	8000b68 <ST7920_Send_command>
 8000d40:	e011      	b.n	8000d66 <ST7920_Draw_bitmap+0x60>
			} else {
				ST7920_Send_command(0x80 | (y - 32));		//y(0-31)
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
 8000d44:	3b20      	subs	r3, #32
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff08 	bl	8000b68 <ST7920_Send_command>
				ST7920_Send_command(0x88 | x);				//x(0-8)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff01 	bl	8000b68 <ST7920_Send_command>
			}

			i = ((y / 8) * 128) + (x * 16);
 8000d66:	7bbb      	ldrb	r3, [r7, #14]
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	00da      	lsls	r2, r3, #3
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	4413      	add	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	81bb      	strh	r3, [r7, #12]
			Db = y % 8;
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	72fb      	strb	r3, [r7, #11]

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8000d80:	89bb      	ldrh	r3, [r7, #12]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	fa42 f303 	asr.w	r3, r2, r3
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	b25a      	sxtb	r2, r3
 8000d94:	89bb      	ldrh	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	440b      	add	r3, r1
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	7afb      	ldrb	r3, [r7, #11]
 8000da2:	fa41 f303 	asr.w	r3, r1, r3
 8000da6:	019b      	lsls	r3, r3, #6
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	89bb      	ldrh	r3, [r7, #12]
 8000db6:	3302      	adds	r3, #2
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	440b      	add	r3, r1
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	fa41 f303 	asr.w	r3, r1, r3
 8000dc6:	015b      	lsls	r3, r3, #5
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	f003 0320 	and.w	r3, r3, #32
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
 8000dd4:	89bb      	ldrh	r3, [r7, #12]
 8000dd6:	3303      	adds	r3, #3
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	440b      	add	r3, r1
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4619      	mov	r1, r3
 8000de0:	7afb      	ldrb	r3, [r7, #11]
 8000de2:	fa41 f303 	asr.w	r3, r1, r3
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b25a      	sxtb	r2, r3
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	3304      	adds	r3, #4
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	7afb      	ldrb	r3, [r7, #11]
 8000e02:	fa41 f303 	asr.w	r3, r1, r3
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	89bb      	ldrh	r3, [r7, #12]
 8000e16:	3305      	adds	r3, #5
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	440b      	add	r3, r1
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	7afb      	ldrb	r3, [r7, #11]
 8000e22:	fa41 f303 	asr.w	r3, r1, r3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
 8000e34:	89bb      	ldrh	r3, [r7, #12]
 8000e36:	3306      	adds	r3, #6
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	440b      	add	r3, r1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	7afb      	ldrb	r3, [r7, #11]
 8000e42:	fa41 f303 	asr.w	r3, r1, r3
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b25a      	sxtb	r2, r3
 8000e54:	89bb      	ldrh	r3, [r7, #12]
 8000e56:	3307      	adds	r3, #7
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	440b      	add	r3, r1
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	7afb      	ldrb	r3, [r7, #11]
 8000e62:	fa41 f303 	asr.w	r3, r1, r3
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8000e72:	72bb      	strb	r3, [r7, #10]
			ST7920_Send_data(Temp);
 8000e74:	7abb      	ldrb	r3, [r7, #10]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff feaa 	bl	8000bd0 <ST7920_Send_data>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 8000e7c:	89bb      	ldrh	r3, [r7, #12]
 8000e7e:	3308      	adds	r3, #8
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	fa42 f303 	asr.w	r3, r2, r3
 8000e8e:	01db      	lsls	r3, r3, #7
 8000e90:	b25a      	sxtb	r2, r3
 8000e92:	89bb      	ldrh	r3, [r7, #12]
 8000e94:	3309      	adds	r3, #9
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	440b      	add	r3, r1
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	fa41 f303 	asr.w	r3, r1, r3
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b25a      	sxtb	r2, r3
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	330a      	adds	r3, #10
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	440b      	add	r3, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	7afb      	ldrb	r3, [r7, #11]
 8000ec0:	fa41 f303 	asr.w	r3, r1, r3
 8000ec4:	015b      	lsls	r3, r3, #5
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
 8000ed2:	89bb      	ldrh	r3, [r7, #12]
 8000ed4:	330b      	adds	r3, #11
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	440b      	add	r3, r1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	7afb      	ldrb	r3, [r7, #11]
 8000ee0:	fa41 f303 	asr.w	r3, r1, r3
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b25a      	sxtb	r2, r3
 8000ef2:	89bb      	ldrh	r3, [r7, #12]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	440b      	add	r3, r1
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	fa41 f303 	asr.w	r3, r1, r3
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b25a      	sxtb	r2, r3
 8000f12:	89bb      	ldrh	r3, [r7, #12]
 8000f14:	330d      	adds	r3, #13
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	440b      	add	r3, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	fa41 f303 	asr.w	r3, r1, r3
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
 8000f32:	89bb      	ldrh	r3, [r7, #12]
 8000f34:	330e      	adds	r3, #14
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	440b      	add	r3, r1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	fa41 f303 	asr.w	r3, r1, r3
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	89bb      	ldrh	r3, [r7, #12]
 8000f54:	330f      	adds	r3, #15
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	440b      	add	r3, r1
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	7afb      	ldrb	r3, [r7, #11]
 8000f60:	fa41 f303 	asr.w	r3, r1, r3
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 8000f70:	72bb      	strb	r3, [r7, #10]

			ST7920_Send_data(Temp);
 8000f72:	7abb      	ldrb	r3, [r7, #10]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe2b 	bl	8000bd0 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	f67f aecb 	bls.w	8000d1e <ST7920_Draw_bitmap+0x18>
	for (y = 0; y < 64; y++) {
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	2b3f      	cmp	r3, #63	; 0x3f
 8000f92:	f67f aec1 	bls.w	8000d18 <ST7920_Draw_bitmap+0x12>
		}
	}
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <ST7920_Draw_pixel>:
/*-------------------Функция вывода изображения на экран дисплея--------------------------*/

/*---------------------Функция рисования пикселя на экране----------------------------*/
void ST7920_Draw_pixel(uint8_t x, uint8_t y) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
/// Функция рисования точки.
/// param\ x - координата по X(от 0 до 127)
/// paran\ y - координата по Y(от 0 до 63)
	if (y < ST7920_height && x < ST7920_width) {
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <ST7920_Draw_pixel+0x64>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	79ba      	ldrb	r2, [r7, #6]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d21e      	bcs.n	8000ff8 <ST7920_Draw_pixel+0x58>
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <ST7920_Draw_pixel+0x68>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d219      	bcs.n	8000ff8 <ST7920_Draw_pixel+0x58>
		Frame_buffer[(x) + ((y / 8) * 128)] |= 0x01 << y % 8;
 8000fc4:	79fa      	ldrb	r2, [r7, #7]
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	b2d8      	uxtb	r0, r3
 8000fcc:	4603      	mov	r3, r0
 8000fce:	01db      	lsls	r3, r3, #7
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <ST7920_Draw_pixel+0x6c>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b259      	sxtb	r1, r3
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	4603      	mov	r3, r0
 8000fee:	01db      	lsls	r3, r3, #7
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2c9      	uxtb	r1, r1
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <ST7920_Draw_pixel+0x6c>)
 8000ff6:	54d1      	strb	r1, [r2, r3]
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000001 	.word	0x20000001
 8001008:	20000000 	.word	0x20000000
 800100c:	200001fc 	.word	0x200001fc

08001010 <ST7920_Update>:
	}
}
/*---------------------Функция удаления пикселя на экране----------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void ST7920_Update(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	/// Функция вывода буфера кадра на дисплей
	/// Подготовьте буфер кадра, перед тем, как обновить изображение
	ST7920_Draw_bitmap(Frame_buffer);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <ST7920_Update+0x10>)
 8001016:	f7ff fe76 	bl	8000d06 <ST7920_Draw_bitmap>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001fc 	.word	0x200001fc

08001024 <ST7920_Draw_line>:
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
}
/*------------------------Функция очистки буфера кадра-------------------------*/

void ST7920_Draw_line(uint8_t x_start, uint8_t y_start, uint8_t x_end, uint8_t y_end) {
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4604      	mov	r4, r0
 800102c:	4608      	mov	r0, r1
 800102e:	4611      	mov	r1, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4623      	mov	r3, r4
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	4603      	mov	r3, r0
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	460b      	mov	r3, r1
 800103c:	717b      	strb	r3, [r7, #5]
 800103e:	4613      	mov	r3, r2
 8001040:	713b      	strb	r3, [r7, #4]
	int dx = (x_end >= x_start) ? x_end - x_start : x_start - x_end;
 8001042:	797a      	ldrb	r2, [r7, #5]
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	429a      	cmp	r2, r3
 8001048:	d303      	bcc.n	8001052 <ST7920_Draw_line+0x2e>
 800104a:	797a      	ldrb	r2, [r7, #5]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	e002      	b.n	8001058 <ST7920_Draw_line+0x34>
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	797b      	ldrb	r3, [r7, #5]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	61bb      	str	r3, [r7, #24]
	int dy = (y_end >= y_start) ? y_end - y_start : y_start - y_end;
 800105a:	793a      	ldrb	r2, [r7, #4]
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	429a      	cmp	r2, r3
 8001060:	d303      	bcc.n	800106a <ST7920_Draw_line+0x46>
 8001062:	793a      	ldrb	r2, [r7, #4]
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	e002      	b.n	8001070 <ST7920_Draw_line+0x4c>
 800106a:	79ba      	ldrb	r2, [r7, #6]
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
	int sx = (x_start < x_end) ? 1 : -1;
 8001072:	79fa      	ldrb	r2, [r7, #7]
 8001074:	797b      	ldrb	r3, [r7, #5]
 8001076:	429a      	cmp	r2, r3
 8001078:	d201      	bcs.n	800107e <ST7920_Draw_line+0x5a>
 800107a:	2301      	movs	r3, #1
 800107c:	e001      	b.n	8001082 <ST7920_Draw_line+0x5e>
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	613b      	str	r3, [r7, #16]
	int sy = (y_start < y_end) ? 1 : -1;
 8001084:	79ba      	ldrb	r2, [r7, #6]
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d201      	bcs.n	8001090 <ST7920_Draw_line+0x6c>
 800108c:	2301      	movs	r3, #1
 800108e:	e001      	b.n	8001094 <ST7920_Draw_line+0x70>
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	60fb      	str	r3, [r7, #12]
	int err = dx - dy;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	61fb      	str	r3, [r7, #28]

	for (;;) {
		ST7920_Draw_pixel(x_start, y_start);
 800109e:	79ba      	ldrb	r2, [r7, #6]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff7b 	bl	8000fa0 <ST7920_Draw_pixel>
		if (x_start == x_end && y_start == y_end)
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d103      	bne.n	80010ba <ST7920_Draw_line+0x96>
 80010b2:	79ba      	ldrb	r2, [r7, #6]
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d01e      	beq.n	80010f8 <ST7920_Draw_line+0xd4>
			break;
		int e2 = err + err;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
		if (e2 > -dy) {
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	425b      	negs	r3, r3
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dd08      	ble.n	80010dc <ST7920_Draw_line+0xb8>
			err -= dy;
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	61fb      	str	r3, [r7, #28]
			x_start += sx;
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4413      	add	r3, r2
 80010da:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 < dx) {
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dadc      	bge.n	800109e <ST7920_Draw_line+0x7a>
			err += dx;
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	4413      	add	r3, r2
 80010ea:	61fb      	str	r3, [r7, #28]
			y_start += sy;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	4413      	add	r3, r2
 80010f4:	71bb      	strb	r3, [r7, #6]
	for (;;) {
 80010f6:	e7d2      	b.n	800109e <ST7920_Draw_line+0x7a>
			break;
 80010f8:	bf00      	nop
		}
	}
}
 80010fa:	bf00      	nop
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}

08001102 <ST7920_Draw_circle>:
	}
}
/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/

/*---------------------------------Вывести пустотелую окружность-----------------------------------*/
void ST7920_Draw_circle(uint8_t x, uint8_t y, uint8_t radius) {
 8001102:	b580      	push	{r7, lr}
 8001104:	b088      	sub	sp, #32
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	460b      	mov	r3, r1
 800110e:	71bb      	strb	r3, [r7, #6]
 8001110:	4613      	mov	r3, r2
 8001112:	717b      	strb	r3, [r7, #5]
/// Вывести пустотелую окружность
/// \param x - точка центра окружности по оси "x"
/// \param y - точка центра окружности по оси "y"
/// \param radius - радиус окружности

	int f = 1 - (int) radius;
 8001114:	797b      	ldrb	r3, [r7, #5]
 8001116:	f1c3 0301 	rsb	r3, r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
	int ddF_x = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	61bb      	str	r3, [r7, #24]

	int ddF_y = -2 * (int) radius;
 8001120:	797a      	ldrb	r2, [r7, #5]
 8001122:	4613      	mov	r3, r2
 8001124:	07db      	lsls	r3, r3, #31
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	617b      	str	r3, [r7, #20]
	int x_0 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]

	ST7920_Draw_pixel(x, y + radius);
 8001130:	79ba      	ldrb	r2, [r7, #6]
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	4413      	add	r3, r2
 8001136:	b2da      	uxtb	r2, r3
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff2f 	bl	8000fa0 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x, y - radius);
 8001142:	79ba      	ldrb	r2, [r7, #6]
 8001144:	797b      	ldrb	r3, [r7, #5]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	b2da      	uxtb	r2, r3
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff26 	bl	8000fa0 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x + radius, y);
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	4413      	add	r3, r2
 800115a:	b2db      	uxtb	r3, r3
 800115c:	79ba      	ldrb	r2, [r7, #6]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff1d 	bl	8000fa0 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x - radius, y);
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	79ba      	ldrb	r2, [r7, #6]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff14 	bl	8000fa0 <ST7920_Draw_pixel>

	int y_0 = radius;
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	60fb      	str	r3, [r7, #12]
	while (x_0 < y_0) {
 800117c:	e07e      	b.n	800127c <ST7920_Draw_circle+0x17a>
		if (f >= 0) {
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db09      	blt.n	8001198 <ST7920_Draw_circle+0x96>
			y_0--;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3b01      	subs	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
			ddF_y += 2;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3302      	adds	r3, #2
 800118e:	617b      	str	r3, [r7, #20]
			f += ddF_y;
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	4413      	add	r3, r2
 8001196:	61fb      	str	r3, [r7, #28]
		}
		x_0++;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	3301      	adds	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
		ddF_x += 2;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3302      	adds	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
		f += ddF_x;
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4413      	add	r3, r2
 80011aa:	61fb      	str	r3, [r7, #28]
		ST7920_Draw_pixel(x + x_0, y + y_0);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	4413      	add	r3, r2
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff feed 	bl	8000fa0 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - x_0, y + y_0);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b2d8      	uxtb	r0, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	4413      	add	r3, r2
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fee0 	bl	8000fa0 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + x_0, y - y_0);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4413      	add	r3, r2
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	79ba      	ldrb	r2, [r7, #6]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fed3 	bl	8000fa0 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - x_0, y - y_0);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	b2d8      	uxtb	r0, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	79ba      	ldrb	r2, [r7, #6]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fec6 	bl	8000fa0 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + y_0, y + x_0);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4413      	add	r3, r2
 800121c:	b2d8      	uxtb	r0, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	4413      	add	r3, r2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff feb9 	bl	8000fa0 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - y_0, y + x_0);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b2d8      	uxtb	r0, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	4413      	add	r3, r2
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff feac 	bl	8000fa0 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + y_0, y - x_0);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4413      	add	r3, r2
 8001250:	b2d8      	uxtb	r0, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	79ba      	ldrb	r2, [r7, #6]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fe9f 	bl	8000fa0 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - y_0, y - x_0);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b2d8      	uxtb	r0, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	79ba      	ldrb	r2, [r7, #6]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fe92 	bl	8000fa0 <ST7920_Draw_pixel>
	while (x_0 < y_0) {
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	f6ff af7c 	blt.w	800117e <ST7920_Draw_circle+0x7c>
	}
}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <ST7920_Draw_triangle_filled>:
	ST7920_Draw_line(x3, y3, x1, y1);
}
/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/

/*----------------------------------Вывести закрашенный треугольник--------------------------------*/
void ST7920_Draw_triangle_filled(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3) {
 800128e:	b590      	push	{r4, r7, lr}
 8001290:	b08b      	sub	sp, #44	; 0x2c
 8001292:	af00      	add	r7, sp, #0
 8001294:	4604      	mov	r4, r0
 8001296:	4608      	mov	r0, r1
 8001298:	4611      	mov	r1, r2
 800129a:	461a      	mov	r2, r3
 800129c:	4623      	mov	r3, r4
 800129e:	80fb      	strh	r3, [r7, #6]
 80012a0:	4603      	mov	r3, r0
 80012a2:	80bb      	strh	r3, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	803b      	strh	r3, [r7, #0]
/// \param y_2 - вторая точка треугольника. Координата по оси "y"
/// \param x_3 - третья точка треугольника. Координата по оси "x"
/// \param y_3 - третья точка треугольника. Координата по оси "y"

#define ABS(x)   ((x) > 0 ? (x) : -(x))
int16_t deltax = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	823b      	strh	r3, [r7, #16]
int16_t deltay = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	81fb      	strh	r3, [r7, #14]
int16_t x = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	84fb      	strh	r3, [r7, #38]	; 0x26
int16_t y = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	84bb      	strh	r3, [r7, #36]	; 0x24
int16_t xinc1 = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	847b      	strh	r3, [r7, #34]	; 0x22
int16_t xinc2 = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	843b      	strh	r3, [r7, #32]
int16_t yinc1 = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	83fb      	strh	r3, [r7, #30]
int16_t yinc2 = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	83bb      	strh	r3, [r7, #28]
int16_t den = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	837b      	strh	r3, [r7, #26]
int16_t num = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	833b      	strh	r3, [r7, #24]
int16_t numadd = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	82fb      	strh	r3, [r7, #22]
int16_t numpixels = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	82bb      	strh	r3, [r7, #20]
int16_t curpixel = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 80012e0:	887a      	ldrh	r2, [r7, #2]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bfb8      	it	lt
 80012ea:	425b      	neglt	r3, r3
 80012ec:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80012ee:	883a      	ldrh	r2, [r7, #0]
 80012f0:	88bb      	ldrh	r3, [r7, #4]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bfb8      	it	lt
 80012f8:	425b      	neglt	r3, r3
 80012fa:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <ST7920_Draw_triangle_filled+0x88>
		xinc1 = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	843b      	strh	r3, [r7, #32]
 8001314:	e005      	b.n	8001322 <ST7920_Draw_triangle_filled+0x94>
	} else {
		xinc1 = -1;
 8001316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131a:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 800131c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001320:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8001322:	883a      	ldrh	r2, [r7, #0]
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d304      	bcc.n	8001334 <ST7920_Draw_triangle_filled+0xa6>
		yinc1 = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	83bb      	strh	r3, [r7, #28]
 8001332:	e005      	b.n	8001340 <ST7920_Draw_triangle_filled+0xb2>
	} else {
		yinc1 = -1;
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 800133a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133e:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8001340:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001348:	429a      	cmp	r2, r3
 800134a:	db10      	blt.n	800136e <ST7920_Draw_triangle_filled+0xe0>
		xinc1 = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8001354:	8a3b      	ldrh	r3, [r7, #16]
 8001356:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001358:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800135c:	0fda      	lsrs	r2, r3, #31
 800135e:	4413      	add	r3, r2
 8001360:	105b      	asrs	r3, r3, #1
 8001362:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001368:	8a3b      	ldrh	r3, [r7, #16]
 800136a:	82bb      	strh	r3, [r7, #20]
 800136c:	e00f      	b.n	800138e <ST7920_Draw_triangle_filled+0x100>
	} else {
		xinc2 = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 800137a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137e:	0fda      	lsrs	r2, r3, #31
 8001380:	4413      	add	r3, r2
 8001382:	105b      	asrs	r3, r3, #1
 8001384:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800138e:	2300      	movs	r3, #0
 8001390:	827b      	strh	r3, [r7, #18]
 8001392:	e033      	b.n	80013fc <ST7920_Draw_triangle_filled+0x16e>
		ST7920_Draw_line(x, y, x3, y3);
 8001394:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001396:	b2d8      	uxtb	r0, r3
 8001398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800139a:	b2d9      	uxtb	r1, r3
 800139c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f7ff fe3e 	bl	8001024 <ST7920_Draw_line>

		num += numadd;
 80013a8:	8b3a      	ldrh	r2, [r7, #24]
 80013aa:	8afb      	ldrh	r3, [r7, #22]
 80013ac:	4413      	add	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 80013b2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80013b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	db0e      	blt.n	80013dc <ST7920_Draw_triangle_filled+0x14e>
			num -= den;
 80013be:	8b3a      	ldrh	r2, [r7, #24]
 80013c0:	8b7b      	ldrh	r3, [r7, #26]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 80013c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013cc:	4413      	add	r3, r2
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 80013d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013d4:	8bfb      	ldrh	r3, [r7, #30]
 80013d6:	4413      	add	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 80013dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013de:	8c3b      	ldrh	r3, [r7, #32]
 80013e0:	4413      	add	r3, r2
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80013e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013e8:	8bbb      	ldrh	r3, [r7, #28]
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80013f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	827b      	strh	r3, [r7, #18]
 80013fc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001400:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	ddc5      	ble.n	8001394 <ST7920_Draw_triangle_filled+0x106>
	}
}
 8001408:	bf00      	nop
 800140a:	372c      	adds	r7, #44	; 0x2c
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}

08001410 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001416:	f000 fa3d 	bl	8001894 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800141a:	f000 f820 	bl	800145e <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800141e:	f000 f8b7 	bl	8001590 <MX_GPIO_Init>
	MX_DMA_Init();
 8001422:	f000 f897 	bl	8001554 <MX_DMA_Init>
	MX_SPI1_Init();
 8001426:	f000 f85f 	bl	80014e8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 800142a:	2064      	movs	r0, #100	; 0x64
 800142c:	f000 fa94 	bl	8001958 <HAL_Delay>
	ST7920_Init();
 8001430:	f7ff fc02 	bl	8000c38 <ST7920_Init>
	ST7920_Graphic_mode(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fc41 	bl	8000cbc <ST7920_Graphic_mode>
	ST7920_Draw_triangle_filled(0, 63, 50, 20, 120, 60);
 800143a:	233c      	movs	r3, #60	; 0x3c
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	2378      	movs	r3, #120	; 0x78
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2314      	movs	r3, #20
 8001444:	2232      	movs	r2, #50	; 0x32
 8001446:	213f      	movs	r1, #63	; 0x3f
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ff20 	bl	800128e <ST7920_Draw_triangle_filled>
ST7920_Draw_circle(110, 10, 10);
 800144e:	220a      	movs	r2, #10
 8001450:	210a      	movs	r1, #10
 8001452:	206e      	movs	r0, #110	; 0x6e
 8001454:	f7ff fe55 	bl	8001102 <ST7920_Draw_circle>



	ST7920_Update();
 8001458:	f7ff fdda 	bl	8001010 <ST7920_Update>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800145c:	e7fe      	b.n	800145c <main+0x4c>

0800145e <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800145e:	b580      	push	{r7, lr}
 8001460:	b090      	sub	sp, #64	; 0x40
 8001462:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	2228      	movs	r2, #40	; 0x28
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fe69 	bl	8003144 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148e:	2301      	movs	r3, #1
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800149a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800149c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fece 	bl	8002248 <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x58>
		Error_Handler();
 80014b2:	f000 f8ab 	bl	800160c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b6:	230f      	movs	r3, #15
 80014b8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2302      	movs	r3, #2
 80014bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2102      	movs	r1, #2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f939 	bl	8002748 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x82>
		Error_Handler();
 80014dc:	f000 f896 	bl	800160c <Error_Handler>
	}
}
 80014e0:	bf00      	nop
 80014e2:	3740      	adds	r7, #64	; 0x40
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_SPI1_Init+0x64>)
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <MX_SPI1_Init+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_SPI1_Init+0x64>)
 80014f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_SPI1_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_SPI1_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_SPI1_Init+0x64>)
 8001508:	2202      	movs	r2, #2
 800150a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_SPI1_Init+0x64>)
 800150e:	2201      	movs	r2, #1
 8001510:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_SPI1_Init+0x64>)
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_SPI1_Init+0x64>)
 800151c:	2208      	movs	r2, #8
 800151e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_SPI1_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_SPI1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_SPI1_Init+0x64>)
 8001534:	220a      	movs	r2, #10
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_SPI1_Init+0x64>)
 800153a:	f001 fa6f 	bl	8002a1c <HAL_SPI_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001544:	f000 f862 	bl	800160c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000608 	.word	0x20000608
 8001550:	40013000 	.word	0x40013000

08001554 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_DMA_Init+0x38>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <MX_DMA_Init+0x38>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6153      	str	r3, [r2, #20]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_DMA_Init+0x38>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	200d      	movs	r0, #13
 8001578:	f000 fae7 	bl	8001b4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800157c:	200d      	movs	r0, #13
 800157e:	f000 fb00 	bl	8001b82 <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_GPIO_Init+0x74>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a16      	ldr	r2, [pc, #88]	; (8001604 <MX_GPIO_Init+0x74>)
 80015aa:	f043 0320 	orr.w	r3, r3, #32
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_GPIO_Init+0x74>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_GPIO_Init+0x74>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a10      	ldr	r2, [pc, #64]	; (8001604 <MX_GPIO_Init+0x74>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_GPIO_Init+0x74>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_Pin | RST_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2106      	movs	r1, #6
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <MX_GPIO_Init+0x78>)
 80015da:	f000 fe1d 	bl	8002218 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CS_Pin RST_Pin */
	GPIO_InitStruct.Pin = CS_Pin | RST_Pin;
 80015de:	2306      	movs	r3, #6
 80015e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2302      	movs	r3, #2
 80015ec:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	4619      	mov	r1, r3
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_GPIO_Init+0x78>)
 80015f6:	f000 fcb5 	bl	8001f64 <HAL_GPIO_Init>

}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800

0800160c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001612:	e7fe      	b.n	8001612 <Error_Handler+0x6>

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_MspInit+0x5c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x5c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_MspInit+0x60>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_MspInit+0x60>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000

08001678 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2c      	ldr	r2, [pc, #176]	; (8001744 <HAL_SPI_MspInit+0xcc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d151      	bne.n	800173c <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_SPI_MspInit+0xd0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <HAL_SPI_MspInit+0xd0>)
 800169e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_SPI_MspInit+0xd0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_SPI_MspInit+0xd0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_SPI_MspInit+0xd0>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_SPI_MspInit+0xd0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016c8:	23a0      	movs	r3, #160	; 0xa0
 80016ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4619      	mov	r1, r3
 80016da:	481c      	ldr	r0, [pc, #112]	; (800174c <HAL_SPI_MspInit+0xd4>)
 80016dc:	f000 fc42 	bl	8001f64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <HAL_SPI_MspInit+0xdc>)
 80016e4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 80016e8:	2210      	movs	r2, #16
 80016ea:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001710:	480f      	ldr	r0, [pc, #60]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 8001712:	f000 fa51 	bl	8001bb8 <HAL_DMA_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 800171c:	f7ff ff76 	bl	800160c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 8001724:	649a      	str	r2, [r3, #72]	; 0x48
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_SPI_MspInit+0xd8>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	2023      	movs	r0, #35	; 0x23
 8001732:	f000 fa0a 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001736:	2023      	movs	r0, #35	; 0x23
 8001738:	f000 fa23 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013000 	.word	0x40013000
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800
 8001750:	20000668 	.word	0x20000668
 8001754:	40020030 	.word	0x40020030

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179e:	f000 f8bf 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA1_Channel3_IRQHandler+0x10>)
 80017ae:	f000 fad3 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000668 	.word	0x20000668

080017bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <SPI1_IRQHandler+0x10>)
 80017c2:	f001 fa39 	bl	8002c38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000608 	.word	0x20000608

080017d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <_sbrk+0x5c>)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <_sbrk+0x60>)
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x64>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <_sbrk+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d207      	bcs.n	8001810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001800:	f001 fc76 	bl	80030f0 <__errno>
 8001804:	4602      	mov	r2, r0
 8001806:	230c      	movs	r3, #12
 8001808:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e009      	b.n	8001824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <_sbrk+0x64>)
 8001820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20005000 	.word	0x20005000
 8001830:	00000400 	.word	0x00000400
 8001834:	200005fc 	.word	0x200005fc
 8001838:	200006b8 	.word	0x200006b8

0800183c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001848:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800184a:	e003      	b.n	8001854 <LoopCopyDataInit>

0800184c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800184e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001850:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001852:	3104      	adds	r1, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001854:	480a      	ldr	r0, [pc, #40]	; (8001880 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001858:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800185a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800185c:	d3f6      	bcc.n	800184c <CopyDataInit>
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001860:	e002      	b.n	8001868 <LoopFillZerobss>

08001862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001864:	f842 3b04 	str.w	r3, [r2], #4

08001868 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800186a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800186c:	d3f9      	bcc.n	8001862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800186e:	f7ff ffe5 	bl	800183c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f001 fc43 	bl	80030fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001876:	f7ff fdcb 	bl	8001410 <main>
  bx lr
 800187a:	4770      	bx	lr
  ldr r3, =_sidata
 800187c:	08006ec8 	.word	0x08006ec8
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001884:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001888:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 800188c:	200006b4 	.word	0x200006b4

08001890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC1_2_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_Init+0x28>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_Init+0x28>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f945 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f808 	bl	80018c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff feb0 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40022000 	.word	0x40022000

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x54>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x58>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f95d 	bl	8001b9e <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00e      	b.n	800190c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d80a      	bhi.n	800190a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f000 f925 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_InitTick+0x5c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000004 	.word	0x20000004
 8001918:	2000000c 	.word	0x2000000c
 800191c:	20000008 	.word	0x20000008

08001920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x1c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x20>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a03      	ldr	r2, [pc, #12]	; (8001940 <HAL_IncTick+0x20>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	2000000c 	.word	0x2000000c
 8001940:	200006ac 	.word	0x200006ac

08001944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <HAL_GetTick+0x10>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	200006ac 	.word	0x200006ac

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff fff0 	bl	8001944 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d005      	beq.n	800197e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_Delay+0x40>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197e:	bf00      	nop
 8001980:	f7ff ffe0 	bl	8001944 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d8f7      	bhi.n	8001980 <HAL_Delay+0x28>
  {
  }
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000000c 	.word	0x2000000c

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4906      	ldr	r1, [pc, #24]	; (8001a34 <__NVIC_EnableIRQ+0x34>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff90 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff2d 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff42 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff90 	bl	8001a8c <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5f 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff35 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e043      	b.n	8001c56 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_DMA_Init+0xa8>)
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <HAL_DMA_Init+0xac>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	009a      	lsls	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_DMA_Init+0xb0>)
 8001bea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	bffdfff8 	.word	0xbffdfff8
 8001c64:	cccccccd 	.word	0xcccccccd
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d005      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2204      	movs	r2, #4
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e051      	b.n	8001d32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 020e 	bic.w	r2, r2, #14
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_DMA_Abort_IT+0xd0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d029      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xa0>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <HAL_DMA_Abort_IT+0xd4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d022      	beq.n	8001d08 <HAL_DMA_Abort_IT+0x9c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <HAL_DMA_Abort_IT+0xd8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d01a      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x96>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <HAL_DMA_Abort_IT+0xdc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d012      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x90>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_DMA_Abort_IT+0xe0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00a      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0x8a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <HAL_DMA_Abort_IT+0xe4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d102      	bne.n	8001cf0 <HAL_DMA_Abort_IT+0x84>
 8001cea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cee:	e00e      	b.n	8001d0e <HAL_DMA_Abort_IT+0xa2>
 8001cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf4:	e00b      	b.n	8001d0e <HAL_DMA_Abort_IT+0xa2>
 8001cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cfa:	e008      	b.n	8001d0e <HAL_DMA_Abort_IT+0xa2>
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	e005      	b.n	8001d0e <HAL_DMA_Abort_IT+0xa2>
 8001d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d06:	e002      	b.n	8001d0e <HAL_DMA_Abort_IT+0xa2>
 8001d08:	2310      	movs	r3, #16
 8001d0a:	e000      	b.n	8001d0e <HAL_DMA_Abort_IT+0xa2>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_DMA_Abort_IT+0xe8>)
 8001d10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
    } 
  }
  return status;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40020008 	.word	0x40020008
 8001d40:	4002001c 	.word	0x4002001c
 8001d44:	40020030 	.word	0x40020030
 8001d48:	40020044 	.word	0x40020044
 8001d4c:	40020058 	.word	0x40020058
 8001d50:	4002006c 	.word	0x4002006c
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	2204      	movs	r2, #4
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d04f      	beq.n	8001e20 <HAL_DMA_IRQHandler+0xc8>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d04a      	beq.n	8001e20 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0204 	bic.w	r2, r2, #4
 8001da6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a66      	ldr	r2, [pc, #408]	; (8001f48 <HAL_DMA_IRQHandler+0x1f0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d029      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xae>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a65      	ldr	r2, [pc, #404]	; (8001f4c <HAL_DMA_IRQHandler+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xaa>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a63      	ldr	r2, [pc, #396]	; (8001f50 <HAL_DMA_IRQHandler+0x1f8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0xa4>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a62      	ldr	r2, [pc, #392]	; (8001f54 <HAL_DMA_IRQHandler+0x1fc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d012      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x9e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a60      	ldr	r2, [pc, #384]	; (8001f58 <HAL_DMA_IRQHandler+0x200>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x98>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a5f      	ldr	r2, [pc, #380]	; (8001f5c <HAL_DMA_IRQHandler+0x204>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d102      	bne.n	8001dea <HAL_DMA_IRQHandler+0x92>
 8001de4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001de8:	e00e      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001dea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dee:	e00b      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001df0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001df4:	e008      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dfa:	e005      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e00:	e002      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001e02:	2340      	movs	r3, #64	; 0x40
 8001e04:	e000      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001e06:	2304      	movs	r3, #4
 8001e08:	4a55      	ldr	r2, [pc, #340]	; (8001f60 <HAL_DMA_IRQHandler+0x208>)
 8001e0a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8094 	beq.w	8001f3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e1e:	e08e      	b.n	8001f3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	2202      	movs	r2, #2
 8001e26:	409a      	lsls	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d056      	beq.n	8001ede <HAL_DMA_IRQHandler+0x186>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d051      	beq.n	8001ede <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 020a 	bic.w	r2, r2, #10
 8001e56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <HAL_DMA_IRQHandler+0x1f0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d029      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x166>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a37      	ldr	r2, [pc, #220]	; (8001f4c <HAL_DMA_IRQHandler+0x1f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <HAL_DMA_IRQHandler+0x162>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a35      	ldr	r2, [pc, #212]	; (8001f50 <HAL_DMA_IRQHandler+0x1f8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01a      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x15c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a34      	ldr	r2, [pc, #208]	; (8001f54 <HAL_DMA_IRQHandler+0x1fc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d012      	beq.n	8001eae <HAL_DMA_IRQHandler+0x156>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_DMA_IRQHandler+0x200>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00a      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x150>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <HAL_DMA_IRQHandler+0x204>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d102      	bne.n	8001ea2 <HAL_DMA_IRQHandler+0x14a>
 8001e9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ea0:	e00e      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea6:	e00b      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eac:	e008      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb2:	e005      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	e002      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e000      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	4a27      	ldr	r2, [pc, #156]	; (8001f60 <HAL_DMA_IRQHandler+0x208>)
 8001ec2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d034      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001edc:	e02f      	b.n	8001f3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d028      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x1e8>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d023      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 020e 	bic.w	r2, r2, #14
 8001f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
    }
  }
  return;
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
}
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40020008 	.word	0x40020008
 8001f4c:	4002001c 	.word	0x4002001c
 8001f50:	40020030 	.word	0x40020030
 8001f54:	40020044 	.word	0x40020044
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	4002006c 	.word	0x4002006c
 8001f60:	40020000 	.word	0x40020000

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	e127      	b.n	80021c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8116 	bne.w	80021c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d034      	beq.n	8002008 <HAL_GPIO_Init+0xa4>
 8001f9e:	2b12      	cmp	r3, #18
 8001fa0:	d80d      	bhi.n	8001fbe <HAL_GPIO_Init+0x5a>
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d02b      	beq.n	8001ffe <HAL_GPIO_Init+0x9a>
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d804      	bhi.n	8001fb4 <HAL_GPIO_Init+0x50>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d031      	beq.n	8002012 <HAL_GPIO_Init+0xae>
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d01c      	beq.n	8001fec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fb2:	e048      	b.n	8002046 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d043      	beq.n	8002040 <HAL_GPIO_Init+0xdc>
 8001fb8:	2b11      	cmp	r3, #17
 8001fba:	d01b      	beq.n	8001ff4 <HAL_GPIO_Init+0x90>
          break;
 8001fbc:	e043      	b.n	8002046 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fbe:	4a89      	ldr	r2, [pc, #548]	; (80021e4 <HAL_GPIO_Init+0x280>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d026      	beq.n	8002012 <HAL_GPIO_Init+0xae>
 8001fc4:	4a87      	ldr	r2, [pc, #540]	; (80021e4 <HAL_GPIO_Init+0x280>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d806      	bhi.n	8001fd8 <HAL_GPIO_Init+0x74>
 8001fca:	4a87      	ldr	r2, [pc, #540]	; (80021e8 <HAL_GPIO_Init+0x284>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d020      	beq.n	8002012 <HAL_GPIO_Init+0xae>
 8001fd0:	4a86      	ldr	r2, [pc, #536]	; (80021ec <HAL_GPIO_Init+0x288>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_GPIO_Init+0xae>
          break;
 8001fd6:	e036      	b.n	8002046 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fd8:	4a85      	ldr	r2, [pc, #532]	; (80021f0 <HAL_GPIO_Init+0x28c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d019      	beq.n	8002012 <HAL_GPIO_Init+0xae>
 8001fde:	4a85      	ldr	r2, [pc, #532]	; (80021f4 <HAL_GPIO_Init+0x290>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d016      	beq.n	8002012 <HAL_GPIO_Init+0xae>
 8001fe4:	4a84      	ldr	r2, [pc, #528]	; (80021f8 <HAL_GPIO_Init+0x294>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0xae>
          break;
 8001fea:	e02c      	b.n	8002046 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e028      	b.n	8002046 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e023      	b.n	8002046 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	3308      	adds	r3, #8
 8002004:	623b      	str	r3, [r7, #32]
          break;
 8002006:	e01e      	b.n	8002046 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	330c      	adds	r3, #12
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e019      	b.n	8002046 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800201a:	2304      	movs	r3, #4
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e012      	b.n	8002046 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002028:	2308      	movs	r3, #8
 800202a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	611a      	str	r2, [r3, #16]
          break;
 8002032:	e008      	b.n	8002046 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002034:	2308      	movs	r3, #8
 8002036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	615a      	str	r2, [r3, #20]
          break;
 800203e:	e002      	b.n	8002046 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
          break;
 8002044:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2bff      	cmp	r3, #255	; 0xff
 800204a:	d801      	bhi.n	8002050 <HAL_GPIO_Init+0xec>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	e001      	b.n	8002054 <HAL_GPIO_Init+0xf0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2bff      	cmp	r3, #255	; 0xff
 800205a:	d802      	bhi.n	8002062 <HAL_GPIO_Init+0xfe>
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x104>
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	3b08      	subs	r3, #8
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	210f      	movs	r1, #15
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	401a      	ands	r2, r3
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	431a      	orrs	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8096 	beq.w	80021c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002096:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_GPIO_Init+0x298>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_GPIO_Init+0x298>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6193      	str	r3, [r2, #24]
 80020a2:	4b56      	ldr	r3, [pc, #344]	; (80021fc <HAL_GPIO_Init+0x298>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ae:	4a54      	ldr	r2, [pc, #336]	; (8002200 <HAL_GPIO_Init+0x29c>)
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <HAL_GPIO_Init+0x2a0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x19e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <HAL_GPIO_Init+0x2a4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x19a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a49      	ldr	r2, [pc, #292]	; (800220c <HAL_GPIO_Init+0x2a8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x196>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a48      	ldr	r2, [pc, #288]	; (8002210 <HAL_GPIO_Init+0x2ac>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x192>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x1a0>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_Init+0x1a0>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_Init+0x1a0>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x1a0>
 8002102:	2300      	movs	r3, #0
 8002104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002106:	f002 0203 	and.w	r2, r2, #3
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4093      	lsls	r3, r2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002114:	493a      	ldr	r1, [pc, #232]	; (8002200 <HAL_GPIO_Init+0x29c>)
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800212e:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4938      	ldr	r1, [pc, #224]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
 800213a:	e006      	b.n	800214a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	43db      	mvns	r3, r3
 8002144:	4933      	ldr	r1, [pc, #204]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8002146:	4013      	ands	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d006      	beq.n	8002164 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	492e      	ldr	r1, [pc, #184]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
 8002162:	e006      	b.n	8002172 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	43db      	mvns	r3, r3
 800216c:	4929      	ldr	r1, [pc, #164]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 800216e:	4013      	ands	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	4924      	ldr	r1, [pc, #144]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
 800218a:	e006      	b.n	800219a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	43db      	mvns	r3, r3
 8002194:	491f      	ldr	r1, [pc, #124]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8002196:	4013      	ands	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	491a      	ldr	r1, [pc, #104]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60cb      	str	r3, [r1, #12]
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	4915      	ldr	r1, [pc, #84]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 80021be:	4013      	ands	r3, r2
 80021c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	3301      	adds	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f47f aed0 	bne.w	8001f78 <HAL_GPIO_Init+0x14>
  }
}
 80021d8:	bf00      	nop
 80021da:	372c      	adds	r7, #44	; 0x2c
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	10210000 	.word	0x10210000
 80021e8:	10110000 	.word	0x10110000
 80021ec:	10120000 	.word	0x10120000
 80021f0:	10310000 	.word	0x10310000
 80021f4:	10320000 	.word	0x10320000
 80021f8:	10220000 	.word	0x10220000
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000
 8002204:	40010800 	.word	0x40010800
 8002208:	40010c00 	.word	0x40010c00
 800220c:	40011000 	.word	0x40011000
 8002210:	40011400 	.word	0x40011400
 8002214:	40010400 	.word	0x40010400

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002234:	e003      	b.n	800223e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e26c      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8087 	beq.w	8002376 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002268:	4b92      	ldr	r3, [pc, #584]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b04      	cmp	r3, #4
 8002272:	d00c      	beq.n	800228e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002274:	4b8f      	ldr	r3, [pc, #572]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d112      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
 8002280:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d10b      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228e:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d06c      	beq.n	8002374 <HAL_RCC_OscConfig+0x12c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d168      	bne.n	8002374 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e246      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x76>
 80022b0:	4b80      	ldr	r3, [pc, #512]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a7f      	ldr	r2, [pc, #508]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e02e      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b7b      	ldr	r3, [pc, #492]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7a      	ldr	r2, [pc, #488]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a77      	ldr	r2, [pc, #476]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0xbc>
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a71      	ldr	r2, [pc, #452]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 8002304:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fb0e 	bl	8001944 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fb0a 	bl	8001944 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1fa      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xe4>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fafa 	bl	8001944 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff faf6 	bl	8001944 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1e6      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x10c>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d063      	beq.n	800244a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002382:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800238e:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b08      	cmp	r3, #8
 8002398:	d11c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x18c>
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1ba      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4939      	ldr	r1, [pc, #228]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	e03a      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff faaf 	bl	8001944 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff faab 	bl	8001944 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e19b      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4927      	ldr	r1, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fa8e 	bl	8001944 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff fa8a 	bl	8001944 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e17a      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03a      	beq.n	80024cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d019      	beq.n	8002492 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7ff fa6e 	bl	8001944 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fa6a 	bl	8001944 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e15a      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800248a:	2001      	movs	r0, #1
 800248c:	f000 faa8 	bl	80029e0 <RCC_Delay>
 8002490:	e01c      	b.n	80024cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7ff fa54 	bl	8001944 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249e:	e00f      	b.n	80024c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7ff fa50 	bl	8001944 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d908      	bls.n	80024c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e140      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	42420000 	.word	0x42420000
 80024bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	4b9e      	ldr	r3, [pc, #632]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e9      	bne.n	80024a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a6 	beq.w	8002626 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b97      	ldr	r3, [pc, #604]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b94      	ldr	r3, [pc, #592]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a93      	ldr	r2, [pc, #588]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61d3      	str	r3, [r2, #28]
 80024f6:	4b91      	ldr	r3, [pc, #580]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002506:	4b8e      	ldr	r3, [pc, #568]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d118      	bne.n	8002544 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002512:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a8a      	ldr	r2, [pc, #552]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251e:	f7ff fa11 	bl	8001944 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002526:	f7ff fa0d 	bl	8001944 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0fd      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x312>
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e02d      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x334>
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a75      	ldr	r2, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a72      	ldr	r2, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6213      	str	r3, [r2, #32]
 800257a:	e01c      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d10c      	bne.n	800259e <HAL_RCC_OscConfig+0x356>
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a6c      	ldr	r2, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a69      	ldr	r2, [pc, #420]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a66      	ldr	r2, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	4b64      	ldr	r3, [pc, #400]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a63      	ldr	r2, [pc, #396]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d015      	beq.n	80025ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7ff f9c1 	bl	8001944 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff f9bd 	bl	8001944 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0ab      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ee      	beq.n	80025c6 <HAL_RCC_OscConfig+0x37e>
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7ff f9ab 	bl	8001944 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7ff f9a7 	bl	8001944 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e095      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b48      	ldr	r3, [pc, #288]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a47      	ldr	r2, [pc, #284]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002624:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8081 	beq.w	8002732 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002630:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d061      	beq.n	8002700 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d146      	bne.n	80026d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7ff f97b 	bl	8001944 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7ff f977 	bl	8001944 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e067      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d108      	bne.n	800268c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	492d      	ldr	r1, [pc, #180]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a19      	ldr	r1, [r3, #32]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	430b      	orrs	r3, r1
 800269e:	4927      	ldr	r1, [pc, #156]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff f94b 	bl	8001944 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff f947 	bl	8001944 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e037      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46a>
 80026d0:	e02f      	b.n	8002732 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff f934 	bl	8001944 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff f930 	bl	8001944 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e020      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x498>
 80026fe:	e018      	b.n	8002732 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e013      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	429a      	cmp	r2, r3
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
 8002744:	42420060 	.word	0x42420060

08002748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0d0      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d910      	bls.n	800278c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b67      	ldr	r3, [pc, #412]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0207 	bic.w	r2, r3, #7
 8002772:	4965      	ldr	r1, [pc, #404]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b63      	ldr	r3, [pc, #396]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b8      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a4:	4b59      	ldr	r3, [pc, #356]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a52      	ldr	r2, [pc, #328]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	494d      	ldr	r1, [pc, #308]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d040      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e073      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e06b      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4936      	ldr	r1, [pc, #216]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7ff f884 	bl	8001944 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7ff f880 	bl	8001944 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e053      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d210      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 0207 	bic.w	r2, r3, #7
 800287e:	4922      	ldr	r1, [pc, #136]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e032      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4916      	ldr	r1, [pc, #88]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	490e      	ldr	r1, [pc, #56]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028d6:	f000 f821 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028da:	4601      	mov	r1, r0
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	fa21 f303 	lsr.w	r3, r1, r3
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1cc>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1d0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe ffe2 	bl	80018c0 <HAL_InitTick>

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000
 800290c:	40021000 	.word	0x40021000
 8002910:	08006bfc 	.word	0x08006bfc
 8002914:	20000004 	.word	0x20000004
 8002918:	20000008 	.word	0x20000008

0800291c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b490      	push	{r4, r7}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002924:	1d3c      	adds	r4, r7, #4
 8002926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d002      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x40>
 8002956:	2b08      	cmp	r3, #8
 8002958:	d003      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x46>
 800295a:	e02d      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800295e:	623b      	str	r3, [r7, #32]
      break;
 8002960:	e02d      	b.n	80029be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	0c9b      	lsrs	r3, r3, #18
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800296e:	4413      	add	r3, r2
 8002970:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002974:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	0c5b      	lsrs	r3, r3, #17
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800298e:	4413      	add	r3, r2
 8002990:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002994:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800299a:	fb02 f203 	mul.w	r2, r2, r3
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	e004      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	623b      	str	r3, [r7, #32]
      break;
 80029b6:	e002      	b.n	80029be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ba:	623b      	str	r3, [r7, #32]
      break;
 80029bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029be:	6a3b      	ldr	r3, [r7, #32]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3728      	adds	r7, #40	; 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc90      	pop	{r4, r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	08006be8 	.word	0x08006be8
 80029d0:	08006bf8 	.word	0x08006bf8
 80029d4:	40021000 	.word	0x40021000
 80029d8:	007a1200 	.word	0x007a1200
 80029dc:	003d0900 	.word	0x003d0900

080029e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <RCC_Delay+0x34>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <RCC_Delay+0x38>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a5b      	lsrs	r3, r3, #9
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029fc:	bf00      	nop
  }
  while (Delay --);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	60fa      	str	r2, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <RCC_Delay+0x1c>
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000004 	.word	0x20000004
 8002a18:	10624dd3 	.word	0x10624dd3

08002a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e076      	b.n	8002b1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d108      	bne.n	8002a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3e:	d009      	beq.n	8002a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
 8002a46:	e005      	b.n	8002a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fe02 	bl	8001678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	ea42 0103 	orr.w	r1, r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	0c1a      	lsrs	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f002 0204 	and.w	r2, r2, #4
 8002afa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_SPI_Transmit_IT+0x20>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e06f      	b.n	8002c24 <HAL_SPI_Transmit_IT+0x100>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_SPI_Transmit_IT+0x34>
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b5c:	e05d      	b.n	8002c1a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b6e:	e054      	b.n	8002c1a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2203      	movs	r2, #3
 8002b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	88fa      	ldrh	r2, [r7, #6]
 8002b8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_SPI_Transmit_IT+0x10c>)
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
 8002bb6:	e002      	b.n	8002bbe <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_SPI_Transmit_IT+0x110>)
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc6:	d10f      	bne.n	8002be8 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002bf6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d008      	beq.n	8002c18 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e000      	b.n	8002c1a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8002c18:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	08002e9b 	.word	0x08002e9b
 8002c34:	08002e55 	.word	0x08002e55

08002c38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10f      	bne.n	8002c7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
    return;
 8002c7a:	e0bf      	b.n	8002dfc <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_SPI_IRQHandler+0x66>
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	09db      	lsrs	r3, r3, #7
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
    return;
 8002c9c:	e0ae      	b.n	8002dfc <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_SPI_IRQHandler+0x80>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80a2 	beq.w	8002dfc <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 809b 	beq.w	8002dfc <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d023      	beq.n	8002d1a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d011      	beq.n	8002d02 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0204 	orr.w	r2, r3, #4
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	e00b      	b.n	8002d1a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
        return;
 8002d18:	e070      	b.n	8002dfc <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d014      	beq.n	8002d50 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d050      	beq.n	8002dfa <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d66:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <HAL_SPI_IRQHandler+0x14c>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d034      	beq.n	8002dee <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0203 	bic.w	r2, r2, #3
 8002d92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_SPI_IRQHandler+0x1cc>)
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe ff5f 	bl	8001c6c <HAL_DMA_Abort_IT>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d016      	beq.n	8002df6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <HAL_SPI_IRQHandler+0x1cc>)
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe ff49 	bl	8001c6c <HAL_DMA_Abort_IT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002dec:	e003      	b.n	8002df6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f813 	bl	8002e1a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002df4:	e000      	b.n	8002df8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002df6:	bf00      	nop
    return;
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
  }
}
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	08002e2d 	.word	0x08002e2d

08002e08 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff ffe7 	bl	8002e1a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	330c      	adds	r3, #12
 8002e66:	7812      	ldrb	r2, [r2, #0]
 8002e68:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f8cd 	bl	800302c <SPI_CloseTx_ISR>
  }
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8ab 	bl	800302c <SPI_CloseTx_ISR>
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ef0:	f7fe fd28 	bl	8001944 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f00:	f7fe fd20 	bl	8001944 <HAL_GetTick>
 8002f04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f06:	4b39      	ldr	r3, [pc, #228]	; (8002fec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	015b      	lsls	r3, r3, #5
 8002f0c:	0d1b      	lsrs	r3, r3, #20
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f16:	e054      	b.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d050      	beq.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f20:	f7fe fd10 	bl	8001944 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d902      	bls.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d13d      	bne.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4e:	d111      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f58:	d004      	beq.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f62:	d107      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7c:	d10f      	bne.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e017      	b.n	8002fe2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d19b      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000004 	.word	0x20000004

08002ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff ff6a 	bl	8002ee0 <SPI_WaitFlagStateUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e000      	b.n	8003024 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <SPI_CloseTx_ISR+0xbc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <SPI_CloseTx_ISR+0xc0>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0a5b      	lsrs	r3, r3, #9
 8003040:	2264      	movs	r2, #100	; 0x64
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003048:	f7fe fc7c 	bl	8001944 <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003060:	e009      	b.n	8003076 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3b01      	subs	r3, #1
 8003066:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0eb      	beq.n	800304e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003084:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	2164      	movs	r1, #100	; 0x64
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffb0 	bl	8002ff0 <SPI_EndRxTxTransaction>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fea2 	bl	8002e1a <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80030d6:	e002      	b.n	80030de <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fe95 	bl	8002e08 <HAL_SPI_TxCpltCallback>
}
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000004 	.word	0x20000004
 80030ec:	057619f1 	.word	0x057619f1

080030f0 <__errno>:
 80030f0:	4b01      	ldr	r3, [pc, #4]	; (80030f8 <__errno+0x8>)
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000010 	.word	0x20000010

080030fc <__libc_init_array>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	2500      	movs	r5, #0
 8003100:	4e0c      	ldr	r6, [pc, #48]	; (8003134 <__libc_init_array+0x38>)
 8003102:	4c0d      	ldr	r4, [pc, #52]	; (8003138 <__libc_init_array+0x3c>)
 8003104:	1ba4      	subs	r4, r4, r6
 8003106:	10a4      	asrs	r4, r4, #2
 8003108:	42a5      	cmp	r5, r4
 800310a:	d109      	bne.n	8003120 <__libc_init_array+0x24>
 800310c:	f003 fd5e 	bl	8006bcc <_init>
 8003110:	2500      	movs	r5, #0
 8003112:	4e0a      	ldr	r6, [pc, #40]	; (800313c <__libc_init_array+0x40>)
 8003114:	4c0a      	ldr	r4, [pc, #40]	; (8003140 <__libc_init_array+0x44>)
 8003116:	1ba4      	subs	r4, r4, r6
 8003118:	10a4      	asrs	r4, r4, #2
 800311a:	42a5      	cmp	r5, r4
 800311c:	d105      	bne.n	800312a <__libc_init_array+0x2e>
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003124:	4798      	blx	r3
 8003126:	3501      	adds	r5, #1
 8003128:	e7ee      	b.n	8003108 <__libc_init_array+0xc>
 800312a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800312e:	4798      	blx	r3
 8003130:	3501      	adds	r5, #1
 8003132:	e7f2      	b.n	800311a <__libc_init_array+0x1e>
 8003134:	08006ec0 	.word	0x08006ec0
 8003138:	08006ec0 	.word	0x08006ec0
 800313c:	08006ec0 	.word	0x08006ec0
 8003140:	08006ec4 	.word	0x08006ec4

08003144 <memset>:
 8003144:	4603      	mov	r3, r0
 8003146:	4402      	add	r2, r0
 8003148:	4293      	cmp	r3, r2
 800314a:	d100      	bne.n	800314e <memset+0xa>
 800314c:	4770      	bx	lr
 800314e:	f803 1b01 	strb.w	r1, [r3], #1
 8003152:	e7f9      	b.n	8003148 <memset+0x4>

08003154 <__cvt>:
 8003154:	2b00      	cmp	r3, #0
 8003156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800315a:	461e      	mov	r6, r3
 800315c:	bfbb      	ittet	lt
 800315e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003162:	461e      	movlt	r6, r3
 8003164:	2300      	movge	r3, #0
 8003166:	232d      	movlt	r3, #45	; 0x2d
 8003168:	b088      	sub	sp, #32
 800316a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800316c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003170:	f027 0720 	bic.w	r7, r7, #32
 8003174:	2f46      	cmp	r7, #70	; 0x46
 8003176:	4614      	mov	r4, r2
 8003178:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800317a:	700b      	strb	r3, [r1, #0]
 800317c:	d004      	beq.n	8003188 <__cvt+0x34>
 800317e:	2f45      	cmp	r7, #69	; 0x45
 8003180:	d100      	bne.n	8003184 <__cvt+0x30>
 8003182:	3501      	adds	r5, #1
 8003184:	2302      	movs	r3, #2
 8003186:	e000      	b.n	800318a <__cvt+0x36>
 8003188:	2303      	movs	r3, #3
 800318a:	aa07      	add	r2, sp, #28
 800318c:	9204      	str	r2, [sp, #16]
 800318e:	aa06      	add	r2, sp, #24
 8003190:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003194:	e9cd 3500 	strd	r3, r5, [sp]
 8003198:	4622      	mov	r2, r4
 800319a:	4633      	mov	r3, r6
 800319c:	f001 fd7c 	bl	8004c98 <_dtoa_r>
 80031a0:	2f47      	cmp	r7, #71	; 0x47
 80031a2:	4680      	mov	r8, r0
 80031a4:	d102      	bne.n	80031ac <__cvt+0x58>
 80031a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031a8:	07db      	lsls	r3, r3, #31
 80031aa:	d526      	bpl.n	80031fa <__cvt+0xa6>
 80031ac:	2f46      	cmp	r7, #70	; 0x46
 80031ae:	eb08 0905 	add.w	r9, r8, r5
 80031b2:	d111      	bne.n	80031d8 <__cvt+0x84>
 80031b4:	f898 3000 	ldrb.w	r3, [r8]
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d10a      	bne.n	80031d2 <__cvt+0x7e>
 80031bc:	2200      	movs	r2, #0
 80031be:	2300      	movs	r3, #0
 80031c0:	4620      	mov	r0, r4
 80031c2:	4631      	mov	r1, r6
 80031c4:	f7fd fbf0 	bl	80009a8 <__aeabi_dcmpeq>
 80031c8:	b918      	cbnz	r0, 80031d2 <__cvt+0x7e>
 80031ca:	f1c5 0501 	rsb	r5, r5, #1
 80031ce:	f8ca 5000 	str.w	r5, [sl]
 80031d2:	f8da 3000 	ldr.w	r3, [sl]
 80031d6:	4499      	add	r9, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	2300      	movs	r3, #0
 80031dc:	4620      	mov	r0, r4
 80031de:	4631      	mov	r1, r6
 80031e0:	f7fd fbe2 	bl	80009a8 <__aeabi_dcmpeq>
 80031e4:	b938      	cbnz	r0, 80031f6 <__cvt+0xa2>
 80031e6:	2230      	movs	r2, #48	; 0x30
 80031e8:	9b07      	ldr	r3, [sp, #28]
 80031ea:	454b      	cmp	r3, r9
 80031ec:	d205      	bcs.n	80031fa <__cvt+0xa6>
 80031ee:	1c59      	adds	r1, r3, #1
 80031f0:	9107      	str	r1, [sp, #28]
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e7f8      	b.n	80031e8 <__cvt+0x94>
 80031f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80031fa:	4640      	mov	r0, r8
 80031fc:	9b07      	ldr	r3, [sp, #28]
 80031fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003200:	eba3 0308 	sub.w	r3, r3, r8
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	b008      	add	sp, #32
 8003208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800320c <__exponent>:
 800320c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800320e:	2900      	cmp	r1, #0
 8003210:	bfb4      	ite	lt
 8003212:	232d      	movlt	r3, #45	; 0x2d
 8003214:	232b      	movge	r3, #43	; 0x2b
 8003216:	4604      	mov	r4, r0
 8003218:	bfb8      	it	lt
 800321a:	4249      	neglt	r1, r1
 800321c:	2909      	cmp	r1, #9
 800321e:	f804 2b02 	strb.w	r2, [r4], #2
 8003222:	7043      	strb	r3, [r0, #1]
 8003224:	dd21      	ble.n	800326a <__exponent+0x5e>
 8003226:	f10d 0307 	add.w	r3, sp, #7
 800322a:	461f      	mov	r7, r3
 800322c:	260a      	movs	r6, #10
 800322e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003232:	fb06 1115 	mls	r1, r6, r5, r1
 8003236:	2d09      	cmp	r5, #9
 8003238:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800323c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003240:	f103 32ff 	add.w	r2, r3, #4294967295
 8003244:	4629      	mov	r1, r5
 8003246:	dc09      	bgt.n	800325c <__exponent+0x50>
 8003248:	3130      	adds	r1, #48	; 0x30
 800324a:	3b02      	subs	r3, #2
 800324c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003250:	42bb      	cmp	r3, r7
 8003252:	4622      	mov	r2, r4
 8003254:	d304      	bcc.n	8003260 <__exponent+0x54>
 8003256:	1a10      	subs	r0, r2, r0
 8003258:	b003      	add	sp, #12
 800325a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800325c:	4613      	mov	r3, r2
 800325e:	e7e6      	b.n	800322e <__exponent+0x22>
 8003260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003264:	f804 2b01 	strb.w	r2, [r4], #1
 8003268:	e7f2      	b.n	8003250 <__exponent+0x44>
 800326a:	2330      	movs	r3, #48	; 0x30
 800326c:	4419      	add	r1, r3
 800326e:	7083      	strb	r3, [r0, #2]
 8003270:	1d02      	adds	r2, r0, #4
 8003272:	70c1      	strb	r1, [r0, #3]
 8003274:	e7ef      	b.n	8003256 <__exponent+0x4a>
	...

08003278 <_printf_float>:
 8003278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800327c:	b091      	sub	sp, #68	; 0x44
 800327e:	460c      	mov	r4, r1
 8003280:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003282:	4693      	mov	fp, r2
 8003284:	461e      	mov	r6, r3
 8003286:	4605      	mov	r5, r0
 8003288:	f002 fde8 	bl	8005e5c <_localeconv_r>
 800328c:	6803      	ldr	r3, [r0, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	9309      	str	r3, [sp, #36]	; 0x24
 8003292:	f7fc ff5d 	bl	8000150 <strlen>
 8003296:	2300      	movs	r3, #0
 8003298:	930e      	str	r3, [sp, #56]	; 0x38
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	900a      	str	r0, [sp, #40]	; 0x28
 800329e:	3307      	adds	r3, #7
 80032a0:	f023 0307 	bic.w	r3, r3, #7
 80032a4:	f103 0208 	add.w	r2, r3, #8
 80032a8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80032ac:	f8d4 a000 	ldr.w	sl, [r4]
 80032b0:	603a      	str	r2, [r7, #0]
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032ba:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80032be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80032c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	4ba6      	ldr	r3, [pc, #664]	; (8003564 <_printf_float+0x2ec>)
 80032ca:	4638      	mov	r0, r7
 80032cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032ce:	f7fd fb9d 	bl	8000a0c <__aeabi_dcmpun>
 80032d2:	bb68      	cbnz	r0, 8003330 <_printf_float+0xb8>
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	4ba2      	ldr	r3, [pc, #648]	; (8003564 <_printf_float+0x2ec>)
 80032da:	4638      	mov	r0, r7
 80032dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032de:	f7fd fb77 	bl	80009d0 <__aeabi_dcmple>
 80032e2:	bb28      	cbnz	r0, 8003330 <_printf_float+0xb8>
 80032e4:	2200      	movs	r2, #0
 80032e6:	2300      	movs	r3, #0
 80032e8:	4638      	mov	r0, r7
 80032ea:	4649      	mov	r1, r9
 80032ec:	f7fd fb66 	bl	80009bc <__aeabi_dcmplt>
 80032f0:	b110      	cbz	r0, 80032f8 <_printf_float+0x80>
 80032f2:	232d      	movs	r3, #45	; 0x2d
 80032f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032f8:	4f9b      	ldr	r7, [pc, #620]	; (8003568 <_printf_float+0x2f0>)
 80032fa:	4b9c      	ldr	r3, [pc, #624]	; (800356c <_printf_float+0x2f4>)
 80032fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003300:	bf98      	it	ls
 8003302:	461f      	movls	r7, r3
 8003304:	2303      	movs	r3, #3
 8003306:	f04f 0900 	mov.w	r9, #0
 800330a:	6123      	str	r3, [r4, #16]
 800330c:	f02a 0304 	bic.w	r3, sl, #4
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	9600      	str	r6, [sp, #0]
 8003314:	465b      	mov	r3, fp
 8003316:	aa0f      	add	r2, sp, #60	; 0x3c
 8003318:	4621      	mov	r1, r4
 800331a:	4628      	mov	r0, r5
 800331c:	f000 f9e2 	bl	80036e4 <_printf_common>
 8003320:	3001      	adds	r0, #1
 8003322:	f040 8090 	bne.w	8003446 <_printf_float+0x1ce>
 8003326:	f04f 30ff 	mov.w	r0, #4294967295
 800332a:	b011      	add	sp, #68	; 0x44
 800332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003330:	463a      	mov	r2, r7
 8003332:	464b      	mov	r3, r9
 8003334:	4638      	mov	r0, r7
 8003336:	4649      	mov	r1, r9
 8003338:	f7fd fb68 	bl	8000a0c <__aeabi_dcmpun>
 800333c:	b110      	cbz	r0, 8003344 <_printf_float+0xcc>
 800333e:	4f8c      	ldr	r7, [pc, #560]	; (8003570 <_printf_float+0x2f8>)
 8003340:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <_printf_float+0x2fc>)
 8003342:	e7db      	b.n	80032fc <_printf_float+0x84>
 8003344:	6863      	ldr	r3, [r4, #4]
 8003346:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	a80d      	add	r0, sp, #52	; 0x34
 800334e:	a90e      	add	r1, sp, #56	; 0x38
 8003350:	d140      	bne.n	80033d4 <_printf_float+0x15c>
 8003352:	2306      	movs	r3, #6
 8003354:	6063      	str	r3, [r4, #4]
 8003356:	f04f 0c00 	mov.w	ip, #0
 800335a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800335e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	6022      	str	r2, [r4, #0]
 8003366:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	463a      	mov	r2, r7
 800336e:	464b      	mov	r3, r9
 8003370:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003374:	4628      	mov	r0, r5
 8003376:	f7ff feed 	bl	8003154 <__cvt>
 800337a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800337e:	2b47      	cmp	r3, #71	; 0x47
 8003380:	4607      	mov	r7, r0
 8003382:	d109      	bne.n	8003398 <_printf_float+0x120>
 8003384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003386:	1cd8      	adds	r0, r3, #3
 8003388:	db02      	blt.n	8003390 <_printf_float+0x118>
 800338a:	6862      	ldr	r2, [r4, #4]
 800338c:	4293      	cmp	r3, r2
 800338e:	dd47      	ble.n	8003420 <_printf_float+0x1a8>
 8003390:	f1a8 0802 	sub.w	r8, r8, #2
 8003394:	fa5f f888 	uxtb.w	r8, r8
 8003398:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800339c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800339e:	d824      	bhi.n	80033ea <_printf_float+0x172>
 80033a0:	3901      	subs	r1, #1
 80033a2:	4642      	mov	r2, r8
 80033a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033a8:	910d      	str	r1, [sp, #52]	; 0x34
 80033aa:	f7ff ff2f 	bl	800320c <__exponent>
 80033ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033b0:	4681      	mov	r9, r0
 80033b2:	1813      	adds	r3, r2, r0
 80033b4:	2a01      	cmp	r2, #1
 80033b6:	6123      	str	r3, [r4, #16]
 80033b8:	dc02      	bgt.n	80033c0 <_printf_float+0x148>
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	07d1      	lsls	r1, r2, #31
 80033be:	d501      	bpl.n	80033c4 <_printf_float+0x14c>
 80033c0:	3301      	adds	r3, #1
 80033c2:	6123      	str	r3, [r4, #16]
 80033c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0a2      	beq.n	8003312 <_printf_float+0x9a>
 80033cc:	232d      	movs	r3, #45	; 0x2d
 80033ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033d2:	e79e      	b.n	8003312 <_printf_float+0x9a>
 80033d4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80033d8:	f000 816e 	beq.w	80036b8 <_printf_float+0x440>
 80033dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033e0:	d1b9      	bne.n	8003356 <_printf_float+0xde>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1b7      	bne.n	8003356 <_printf_float+0xde>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e7b4      	b.n	8003354 <_printf_float+0xdc>
 80033ea:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80033ee:	d119      	bne.n	8003424 <_printf_float+0x1ac>
 80033f0:	2900      	cmp	r1, #0
 80033f2:	6863      	ldr	r3, [r4, #4]
 80033f4:	dd0c      	ble.n	8003410 <_printf_float+0x198>
 80033f6:	6121      	str	r1, [r4, #16]
 80033f8:	b913      	cbnz	r3, 8003400 <_printf_float+0x188>
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	07d2      	lsls	r2, r2, #31
 80033fe:	d502      	bpl.n	8003406 <_printf_float+0x18e>
 8003400:	3301      	adds	r3, #1
 8003402:	440b      	add	r3, r1
 8003404:	6123      	str	r3, [r4, #16]
 8003406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003408:	f04f 0900 	mov.w	r9, #0
 800340c:	65a3      	str	r3, [r4, #88]	; 0x58
 800340e:	e7d9      	b.n	80033c4 <_printf_float+0x14c>
 8003410:	b913      	cbnz	r3, 8003418 <_printf_float+0x1a0>
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	07d0      	lsls	r0, r2, #31
 8003416:	d501      	bpl.n	800341c <_printf_float+0x1a4>
 8003418:	3302      	adds	r3, #2
 800341a:	e7f3      	b.n	8003404 <_printf_float+0x18c>
 800341c:	2301      	movs	r3, #1
 800341e:	e7f1      	b.n	8003404 <_printf_float+0x18c>
 8003420:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003424:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003428:	4293      	cmp	r3, r2
 800342a:	db05      	blt.n	8003438 <_printf_float+0x1c0>
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	6123      	str	r3, [r4, #16]
 8003430:	07d1      	lsls	r1, r2, #31
 8003432:	d5e8      	bpl.n	8003406 <_printf_float+0x18e>
 8003434:	3301      	adds	r3, #1
 8003436:	e7e5      	b.n	8003404 <_printf_float+0x18c>
 8003438:	2b00      	cmp	r3, #0
 800343a:	bfcc      	ite	gt
 800343c:	2301      	movgt	r3, #1
 800343e:	f1c3 0302 	rsble	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	e7de      	b.n	8003404 <_printf_float+0x18c>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	055a      	lsls	r2, r3, #21
 800344a:	d407      	bmi.n	800345c <_printf_float+0x1e4>
 800344c:	6923      	ldr	r3, [r4, #16]
 800344e:	463a      	mov	r2, r7
 8003450:	4659      	mov	r1, fp
 8003452:	4628      	mov	r0, r5
 8003454:	47b0      	blx	r6
 8003456:	3001      	adds	r0, #1
 8003458:	d129      	bne.n	80034ae <_printf_float+0x236>
 800345a:	e764      	b.n	8003326 <_printf_float+0xae>
 800345c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003460:	f240 80d7 	bls.w	8003612 <_printf_float+0x39a>
 8003464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003468:	2200      	movs	r2, #0
 800346a:	2300      	movs	r3, #0
 800346c:	f7fd fa9c 	bl	80009a8 <__aeabi_dcmpeq>
 8003470:	b388      	cbz	r0, 80034d6 <_printf_float+0x25e>
 8003472:	2301      	movs	r3, #1
 8003474:	4a40      	ldr	r2, [pc, #256]	; (8003578 <_printf_float+0x300>)
 8003476:	4659      	mov	r1, fp
 8003478:	4628      	mov	r0, r5
 800347a:	47b0      	blx	r6
 800347c:	3001      	adds	r0, #1
 800347e:	f43f af52 	beq.w	8003326 <_printf_float+0xae>
 8003482:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003486:	429a      	cmp	r2, r3
 8003488:	db02      	blt.n	8003490 <_printf_float+0x218>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	07d8      	lsls	r0, r3, #31
 800348e:	d50e      	bpl.n	80034ae <_printf_float+0x236>
 8003490:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003494:	4659      	mov	r1, fp
 8003496:	4628      	mov	r0, r5
 8003498:	47b0      	blx	r6
 800349a:	3001      	adds	r0, #1
 800349c:	f43f af43 	beq.w	8003326 <_printf_float+0xae>
 80034a0:	2700      	movs	r7, #0
 80034a2:	f104 081a 	add.w	r8, r4, #26
 80034a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034a8:	3b01      	subs	r3, #1
 80034aa:	42bb      	cmp	r3, r7
 80034ac:	dc09      	bgt.n	80034c2 <_printf_float+0x24a>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	079f      	lsls	r7, r3, #30
 80034b2:	f100 80fd 	bmi.w	80036b0 <_printf_float+0x438>
 80034b6:	68e0      	ldr	r0, [r4, #12]
 80034b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034ba:	4298      	cmp	r0, r3
 80034bc:	bfb8      	it	lt
 80034be:	4618      	movlt	r0, r3
 80034c0:	e733      	b.n	800332a <_printf_float+0xb2>
 80034c2:	2301      	movs	r3, #1
 80034c4:	4642      	mov	r2, r8
 80034c6:	4659      	mov	r1, fp
 80034c8:	4628      	mov	r0, r5
 80034ca:	47b0      	blx	r6
 80034cc:	3001      	adds	r0, #1
 80034ce:	f43f af2a 	beq.w	8003326 <_printf_float+0xae>
 80034d2:	3701      	adds	r7, #1
 80034d4:	e7e7      	b.n	80034a6 <_printf_float+0x22e>
 80034d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034d8:	2b00      	cmp	r3, #0
 80034da:	dc2b      	bgt.n	8003534 <_printf_float+0x2bc>
 80034dc:	2301      	movs	r3, #1
 80034de:	4a26      	ldr	r2, [pc, #152]	; (8003578 <_printf_float+0x300>)
 80034e0:	4659      	mov	r1, fp
 80034e2:	4628      	mov	r0, r5
 80034e4:	47b0      	blx	r6
 80034e6:	3001      	adds	r0, #1
 80034e8:	f43f af1d 	beq.w	8003326 <_printf_float+0xae>
 80034ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034ee:	b923      	cbnz	r3, 80034fa <_printf_float+0x282>
 80034f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034f2:	b913      	cbnz	r3, 80034fa <_printf_float+0x282>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	07d9      	lsls	r1, r3, #31
 80034f8:	d5d9      	bpl.n	80034ae <_printf_float+0x236>
 80034fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034fe:	4659      	mov	r1, fp
 8003500:	4628      	mov	r0, r5
 8003502:	47b0      	blx	r6
 8003504:	3001      	adds	r0, #1
 8003506:	f43f af0e 	beq.w	8003326 <_printf_float+0xae>
 800350a:	f04f 0800 	mov.w	r8, #0
 800350e:	f104 091a 	add.w	r9, r4, #26
 8003512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003514:	425b      	negs	r3, r3
 8003516:	4543      	cmp	r3, r8
 8003518:	dc01      	bgt.n	800351e <_printf_float+0x2a6>
 800351a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800351c:	e797      	b.n	800344e <_printf_float+0x1d6>
 800351e:	2301      	movs	r3, #1
 8003520:	464a      	mov	r2, r9
 8003522:	4659      	mov	r1, fp
 8003524:	4628      	mov	r0, r5
 8003526:	47b0      	blx	r6
 8003528:	3001      	adds	r0, #1
 800352a:	f43f aefc 	beq.w	8003326 <_printf_float+0xae>
 800352e:	f108 0801 	add.w	r8, r8, #1
 8003532:	e7ee      	b.n	8003512 <_printf_float+0x29a>
 8003534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003538:	429a      	cmp	r2, r3
 800353a:	bfa8      	it	ge
 800353c:	461a      	movge	r2, r3
 800353e:	2a00      	cmp	r2, #0
 8003540:	4690      	mov	r8, r2
 8003542:	dd07      	ble.n	8003554 <_printf_float+0x2dc>
 8003544:	4613      	mov	r3, r2
 8003546:	4659      	mov	r1, fp
 8003548:	463a      	mov	r2, r7
 800354a:	4628      	mov	r0, r5
 800354c:	47b0      	blx	r6
 800354e:	3001      	adds	r0, #1
 8003550:	f43f aee9 	beq.w	8003326 <_printf_float+0xae>
 8003554:	f104 031a 	add.w	r3, r4, #26
 8003558:	f04f 0a00 	mov.w	sl, #0
 800355c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003560:	930b      	str	r3, [sp, #44]	; 0x2c
 8003562:	e015      	b.n	8003590 <_printf_float+0x318>
 8003564:	7fefffff 	.word	0x7fefffff
 8003568:	08006c10 	.word	0x08006c10
 800356c:	08006c0c 	.word	0x08006c0c
 8003570:	08006c18 	.word	0x08006c18
 8003574:	08006c14 	.word	0x08006c14
 8003578:	08006c1c 	.word	0x08006c1c
 800357c:	2301      	movs	r3, #1
 800357e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003580:	4659      	mov	r1, fp
 8003582:	4628      	mov	r0, r5
 8003584:	47b0      	blx	r6
 8003586:	3001      	adds	r0, #1
 8003588:	f43f aecd 	beq.w	8003326 <_printf_float+0xae>
 800358c:	f10a 0a01 	add.w	sl, sl, #1
 8003590:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003594:	eba9 0308 	sub.w	r3, r9, r8
 8003598:	4553      	cmp	r3, sl
 800359a:	dcef      	bgt.n	800357c <_printf_float+0x304>
 800359c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035a0:	429a      	cmp	r2, r3
 80035a2:	444f      	add	r7, r9
 80035a4:	db14      	blt.n	80035d0 <_printf_float+0x358>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	07da      	lsls	r2, r3, #31
 80035aa:	d411      	bmi.n	80035d0 <_printf_float+0x358>
 80035ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035b0:	eba3 0209 	sub.w	r2, r3, r9
 80035b4:	eba3 0901 	sub.w	r9, r3, r1
 80035b8:	4591      	cmp	r9, r2
 80035ba:	bfa8      	it	ge
 80035bc:	4691      	movge	r9, r2
 80035be:	f1b9 0f00 	cmp.w	r9, #0
 80035c2:	dc0d      	bgt.n	80035e0 <_printf_float+0x368>
 80035c4:	2700      	movs	r7, #0
 80035c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035ca:	f104 081a 	add.w	r8, r4, #26
 80035ce:	e018      	b.n	8003602 <_printf_float+0x38a>
 80035d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035d4:	4659      	mov	r1, fp
 80035d6:	4628      	mov	r0, r5
 80035d8:	47b0      	blx	r6
 80035da:	3001      	adds	r0, #1
 80035dc:	d1e6      	bne.n	80035ac <_printf_float+0x334>
 80035de:	e6a2      	b.n	8003326 <_printf_float+0xae>
 80035e0:	464b      	mov	r3, r9
 80035e2:	463a      	mov	r2, r7
 80035e4:	4659      	mov	r1, fp
 80035e6:	4628      	mov	r0, r5
 80035e8:	47b0      	blx	r6
 80035ea:	3001      	adds	r0, #1
 80035ec:	d1ea      	bne.n	80035c4 <_printf_float+0x34c>
 80035ee:	e69a      	b.n	8003326 <_printf_float+0xae>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4642      	mov	r2, r8
 80035f4:	4659      	mov	r1, fp
 80035f6:	4628      	mov	r0, r5
 80035f8:	47b0      	blx	r6
 80035fa:	3001      	adds	r0, #1
 80035fc:	f43f ae93 	beq.w	8003326 <_printf_float+0xae>
 8003600:	3701      	adds	r7, #1
 8003602:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	eba3 0309 	sub.w	r3, r3, r9
 800360c:	42bb      	cmp	r3, r7
 800360e:	dcef      	bgt.n	80035f0 <_printf_float+0x378>
 8003610:	e74d      	b.n	80034ae <_printf_float+0x236>
 8003612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003614:	2a01      	cmp	r2, #1
 8003616:	dc01      	bgt.n	800361c <_printf_float+0x3a4>
 8003618:	07db      	lsls	r3, r3, #31
 800361a:	d538      	bpl.n	800368e <_printf_float+0x416>
 800361c:	2301      	movs	r3, #1
 800361e:	463a      	mov	r2, r7
 8003620:	4659      	mov	r1, fp
 8003622:	4628      	mov	r0, r5
 8003624:	47b0      	blx	r6
 8003626:	3001      	adds	r0, #1
 8003628:	f43f ae7d 	beq.w	8003326 <_printf_float+0xae>
 800362c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003630:	4659      	mov	r1, fp
 8003632:	4628      	mov	r0, r5
 8003634:	47b0      	blx	r6
 8003636:	3001      	adds	r0, #1
 8003638:	f107 0701 	add.w	r7, r7, #1
 800363c:	f43f ae73 	beq.w	8003326 <_printf_float+0xae>
 8003640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003646:	2200      	movs	r2, #0
 8003648:	f103 38ff 	add.w	r8, r3, #4294967295
 800364c:	2300      	movs	r3, #0
 800364e:	f7fd f9ab 	bl	80009a8 <__aeabi_dcmpeq>
 8003652:	b9c0      	cbnz	r0, 8003686 <_printf_float+0x40e>
 8003654:	4643      	mov	r3, r8
 8003656:	463a      	mov	r2, r7
 8003658:	4659      	mov	r1, fp
 800365a:	4628      	mov	r0, r5
 800365c:	47b0      	blx	r6
 800365e:	3001      	adds	r0, #1
 8003660:	d10d      	bne.n	800367e <_printf_float+0x406>
 8003662:	e660      	b.n	8003326 <_printf_float+0xae>
 8003664:	2301      	movs	r3, #1
 8003666:	4642      	mov	r2, r8
 8003668:	4659      	mov	r1, fp
 800366a:	4628      	mov	r0, r5
 800366c:	47b0      	blx	r6
 800366e:	3001      	adds	r0, #1
 8003670:	f43f ae59 	beq.w	8003326 <_printf_float+0xae>
 8003674:	3701      	adds	r7, #1
 8003676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003678:	3b01      	subs	r3, #1
 800367a:	42bb      	cmp	r3, r7
 800367c:	dcf2      	bgt.n	8003664 <_printf_float+0x3ec>
 800367e:	464b      	mov	r3, r9
 8003680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003684:	e6e4      	b.n	8003450 <_printf_float+0x1d8>
 8003686:	2700      	movs	r7, #0
 8003688:	f104 081a 	add.w	r8, r4, #26
 800368c:	e7f3      	b.n	8003676 <_printf_float+0x3fe>
 800368e:	2301      	movs	r3, #1
 8003690:	e7e1      	b.n	8003656 <_printf_float+0x3de>
 8003692:	2301      	movs	r3, #1
 8003694:	4642      	mov	r2, r8
 8003696:	4659      	mov	r1, fp
 8003698:	4628      	mov	r0, r5
 800369a:	47b0      	blx	r6
 800369c:	3001      	adds	r0, #1
 800369e:	f43f ae42 	beq.w	8003326 <_printf_float+0xae>
 80036a2:	3701      	adds	r7, #1
 80036a4:	68e3      	ldr	r3, [r4, #12]
 80036a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	42bb      	cmp	r3, r7
 80036ac:	dcf1      	bgt.n	8003692 <_printf_float+0x41a>
 80036ae:	e702      	b.n	80034b6 <_printf_float+0x23e>
 80036b0:	2700      	movs	r7, #0
 80036b2:	f104 0819 	add.w	r8, r4, #25
 80036b6:	e7f5      	b.n	80036a4 <_printf_float+0x42c>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f43f ae94 	beq.w	80033e6 <_printf_float+0x16e>
 80036be:	f04f 0c00 	mov.w	ip, #0
 80036c2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80036c6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80036ca:	6022      	str	r2, [r4, #0]
 80036cc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80036d0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	463a      	mov	r2, r7
 80036d8:	464b      	mov	r3, r9
 80036da:	4628      	mov	r0, r5
 80036dc:	f7ff fd3a 	bl	8003154 <__cvt>
 80036e0:	4607      	mov	r7, r0
 80036e2:	e64f      	b.n	8003384 <_printf_float+0x10c>

080036e4 <_printf_common>:
 80036e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e8:	4691      	mov	r9, r2
 80036ea:	461f      	mov	r7, r3
 80036ec:	688a      	ldr	r2, [r1, #8]
 80036ee:	690b      	ldr	r3, [r1, #16]
 80036f0:	4606      	mov	r6, r0
 80036f2:	4293      	cmp	r3, r2
 80036f4:	bfb8      	it	lt
 80036f6:	4613      	movlt	r3, r2
 80036f8:	f8c9 3000 	str.w	r3, [r9]
 80036fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003700:	460c      	mov	r4, r1
 8003702:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003706:	b112      	cbz	r2, 800370e <_printf_common+0x2a>
 8003708:	3301      	adds	r3, #1
 800370a:	f8c9 3000 	str.w	r3, [r9]
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	0699      	lsls	r1, r3, #26
 8003712:	bf42      	ittt	mi
 8003714:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003718:	3302      	addmi	r3, #2
 800371a:	f8c9 3000 	strmi.w	r3, [r9]
 800371e:	6825      	ldr	r5, [r4, #0]
 8003720:	f015 0506 	ands.w	r5, r5, #6
 8003724:	d107      	bne.n	8003736 <_printf_common+0x52>
 8003726:	f104 0a19 	add.w	sl, r4, #25
 800372a:	68e3      	ldr	r3, [r4, #12]
 800372c:	f8d9 2000 	ldr.w	r2, [r9]
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	42ab      	cmp	r3, r5
 8003734:	dc29      	bgt.n	800378a <_printf_common+0xa6>
 8003736:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800373a:	6822      	ldr	r2, [r4, #0]
 800373c:	3300      	adds	r3, #0
 800373e:	bf18      	it	ne
 8003740:	2301      	movne	r3, #1
 8003742:	0692      	lsls	r2, r2, #26
 8003744:	d42e      	bmi.n	80037a4 <_printf_common+0xc0>
 8003746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800374a:	4639      	mov	r1, r7
 800374c:	4630      	mov	r0, r6
 800374e:	47c0      	blx	r8
 8003750:	3001      	adds	r0, #1
 8003752:	d021      	beq.n	8003798 <_printf_common+0xb4>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	68e5      	ldr	r5, [r4, #12]
 8003758:	f003 0306 	and.w	r3, r3, #6
 800375c:	2b04      	cmp	r3, #4
 800375e:	bf18      	it	ne
 8003760:	2500      	movne	r5, #0
 8003762:	f8d9 2000 	ldr.w	r2, [r9]
 8003766:	f04f 0900 	mov.w	r9, #0
 800376a:	bf08      	it	eq
 800376c:	1aad      	subeq	r5, r5, r2
 800376e:	68a3      	ldr	r3, [r4, #8]
 8003770:	6922      	ldr	r2, [r4, #16]
 8003772:	bf08      	it	eq
 8003774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003778:	4293      	cmp	r3, r2
 800377a:	bfc4      	itt	gt
 800377c:	1a9b      	subgt	r3, r3, r2
 800377e:	18ed      	addgt	r5, r5, r3
 8003780:	341a      	adds	r4, #26
 8003782:	454d      	cmp	r5, r9
 8003784:	d11a      	bne.n	80037bc <_printf_common+0xd8>
 8003786:	2000      	movs	r0, #0
 8003788:	e008      	b.n	800379c <_printf_common+0xb8>
 800378a:	2301      	movs	r3, #1
 800378c:	4652      	mov	r2, sl
 800378e:	4639      	mov	r1, r7
 8003790:	4630      	mov	r0, r6
 8003792:	47c0      	blx	r8
 8003794:	3001      	adds	r0, #1
 8003796:	d103      	bne.n	80037a0 <_printf_common+0xbc>
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a0:	3501      	adds	r5, #1
 80037a2:	e7c2      	b.n	800372a <_printf_common+0x46>
 80037a4:	2030      	movs	r0, #48	; 0x30
 80037a6:	18e1      	adds	r1, r4, r3
 80037a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037b2:	4422      	add	r2, r4
 80037b4:	3302      	adds	r3, #2
 80037b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037ba:	e7c4      	b.n	8003746 <_printf_common+0x62>
 80037bc:	2301      	movs	r3, #1
 80037be:	4622      	mov	r2, r4
 80037c0:	4639      	mov	r1, r7
 80037c2:	4630      	mov	r0, r6
 80037c4:	47c0      	blx	r8
 80037c6:	3001      	adds	r0, #1
 80037c8:	d0e6      	beq.n	8003798 <_printf_common+0xb4>
 80037ca:	f109 0901 	add.w	r9, r9, #1
 80037ce:	e7d8      	b.n	8003782 <_printf_common+0x9e>

080037d0 <_printf_i>:
 80037d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037d8:	460c      	mov	r4, r1
 80037da:	7e09      	ldrb	r1, [r1, #24]
 80037dc:	b085      	sub	sp, #20
 80037de:	296e      	cmp	r1, #110	; 0x6e
 80037e0:	4617      	mov	r7, r2
 80037e2:	4606      	mov	r6, r0
 80037e4:	4698      	mov	r8, r3
 80037e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037e8:	f000 80b3 	beq.w	8003952 <_printf_i+0x182>
 80037ec:	d822      	bhi.n	8003834 <_printf_i+0x64>
 80037ee:	2963      	cmp	r1, #99	; 0x63
 80037f0:	d036      	beq.n	8003860 <_printf_i+0x90>
 80037f2:	d80a      	bhi.n	800380a <_printf_i+0x3a>
 80037f4:	2900      	cmp	r1, #0
 80037f6:	f000 80b9 	beq.w	800396c <_printf_i+0x19c>
 80037fa:	2958      	cmp	r1, #88	; 0x58
 80037fc:	f000 8083 	beq.w	8003906 <_printf_i+0x136>
 8003800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003804:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003808:	e032      	b.n	8003870 <_printf_i+0xa0>
 800380a:	2964      	cmp	r1, #100	; 0x64
 800380c:	d001      	beq.n	8003812 <_printf_i+0x42>
 800380e:	2969      	cmp	r1, #105	; 0x69
 8003810:	d1f6      	bne.n	8003800 <_printf_i+0x30>
 8003812:	6820      	ldr	r0, [r4, #0]
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	0605      	lsls	r5, r0, #24
 8003818:	f103 0104 	add.w	r1, r3, #4
 800381c:	d52a      	bpl.n	8003874 <_printf_i+0xa4>
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	da03      	bge.n	800382e <_printf_i+0x5e>
 8003826:	222d      	movs	r2, #45	; 0x2d
 8003828:	425b      	negs	r3, r3
 800382a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800382e:	486f      	ldr	r0, [pc, #444]	; (80039ec <_printf_i+0x21c>)
 8003830:	220a      	movs	r2, #10
 8003832:	e039      	b.n	80038a8 <_printf_i+0xd8>
 8003834:	2973      	cmp	r1, #115	; 0x73
 8003836:	f000 809d 	beq.w	8003974 <_printf_i+0x1a4>
 800383a:	d808      	bhi.n	800384e <_printf_i+0x7e>
 800383c:	296f      	cmp	r1, #111	; 0x6f
 800383e:	d020      	beq.n	8003882 <_printf_i+0xb2>
 8003840:	2970      	cmp	r1, #112	; 0x70
 8003842:	d1dd      	bne.n	8003800 <_printf_i+0x30>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	f043 0320 	orr.w	r3, r3, #32
 800384a:	6023      	str	r3, [r4, #0]
 800384c:	e003      	b.n	8003856 <_printf_i+0x86>
 800384e:	2975      	cmp	r1, #117	; 0x75
 8003850:	d017      	beq.n	8003882 <_printf_i+0xb2>
 8003852:	2978      	cmp	r1, #120	; 0x78
 8003854:	d1d4      	bne.n	8003800 <_printf_i+0x30>
 8003856:	2378      	movs	r3, #120	; 0x78
 8003858:	4865      	ldr	r0, [pc, #404]	; (80039f0 <_printf_i+0x220>)
 800385a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800385e:	e055      	b.n	800390c <_printf_i+0x13c>
 8003860:	6813      	ldr	r3, [r2, #0]
 8003862:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003866:	1d19      	adds	r1, r3, #4
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6011      	str	r1, [r2, #0]
 800386c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003870:	2301      	movs	r3, #1
 8003872:	e08c      	b.n	800398e <_printf_i+0x1be>
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800387a:	6011      	str	r1, [r2, #0]
 800387c:	bf18      	it	ne
 800387e:	b21b      	sxthne	r3, r3
 8003880:	e7cf      	b.n	8003822 <_printf_i+0x52>
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	6825      	ldr	r5, [r4, #0]
 8003886:	1d18      	adds	r0, r3, #4
 8003888:	6010      	str	r0, [r2, #0]
 800388a:	0628      	lsls	r0, r5, #24
 800388c:	d501      	bpl.n	8003892 <_printf_i+0xc2>
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	e002      	b.n	8003898 <_printf_i+0xc8>
 8003892:	0668      	lsls	r0, r5, #25
 8003894:	d5fb      	bpl.n	800388e <_printf_i+0xbe>
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	296f      	cmp	r1, #111	; 0x6f
 800389a:	bf14      	ite	ne
 800389c:	220a      	movne	r2, #10
 800389e:	2208      	moveq	r2, #8
 80038a0:	4852      	ldr	r0, [pc, #328]	; (80039ec <_printf_i+0x21c>)
 80038a2:	2100      	movs	r1, #0
 80038a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038a8:	6865      	ldr	r5, [r4, #4]
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	60a5      	str	r5, [r4, #8]
 80038ae:	f2c0 8095 	blt.w	80039dc <_printf_i+0x20c>
 80038b2:	6821      	ldr	r1, [r4, #0]
 80038b4:	f021 0104 	bic.w	r1, r1, #4
 80038b8:	6021      	str	r1, [r4, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d13d      	bne.n	800393a <_printf_i+0x16a>
 80038be:	2d00      	cmp	r5, #0
 80038c0:	f040 808e 	bne.w	80039e0 <_printf_i+0x210>
 80038c4:	4665      	mov	r5, ip
 80038c6:	2a08      	cmp	r2, #8
 80038c8:	d10b      	bne.n	80038e2 <_printf_i+0x112>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	07db      	lsls	r3, r3, #31
 80038ce:	d508      	bpl.n	80038e2 <_printf_i+0x112>
 80038d0:	6923      	ldr	r3, [r4, #16]
 80038d2:	6862      	ldr	r2, [r4, #4]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bfde      	ittt	le
 80038d8:	2330      	movle	r3, #48	; 0x30
 80038da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038e2:	ebac 0305 	sub.w	r3, ip, r5
 80038e6:	6123      	str	r3, [r4, #16]
 80038e8:	f8cd 8000 	str.w	r8, [sp]
 80038ec:	463b      	mov	r3, r7
 80038ee:	aa03      	add	r2, sp, #12
 80038f0:	4621      	mov	r1, r4
 80038f2:	4630      	mov	r0, r6
 80038f4:	f7ff fef6 	bl	80036e4 <_printf_common>
 80038f8:	3001      	adds	r0, #1
 80038fa:	d14d      	bne.n	8003998 <_printf_i+0x1c8>
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	b005      	add	sp, #20
 8003902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003906:	4839      	ldr	r0, [pc, #228]	; (80039ec <_printf_i+0x21c>)
 8003908:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800390c:	6813      	ldr	r3, [r2, #0]
 800390e:	6821      	ldr	r1, [r4, #0]
 8003910:	1d1d      	adds	r5, r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6015      	str	r5, [r2, #0]
 8003916:	060a      	lsls	r2, r1, #24
 8003918:	d50b      	bpl.n	8003932 <_printf_i+0x162>
 800391a:	07ca      	lsls	r2, r1, #31
 800391c:	bf44      	itt	mi
 800391e:	f041 0120 	orrmi.w	r1, r1, #32
 8003922:	6021      	strmi	r1, [r4, #0]
 8003924:	b91b      	cbnz	r3, 800392e <_printf_i+0x15e>
 8003926:	6822      	ldr	r2, [r4, #0]
 8003928:	f022 0220 	bic.w	r2, r2, #32
 800392c:	6022      	str	r2, [r4, #0]
 800392e:	2210      	movs	r2, #16
 8003930:	e7b7      	b.n	80038a2 <_printf_i+0xd2>
 8003932:	064d      	lsls	r5, r1, #25
 8003934:	bf48      	it	mi
 8003936:	b29b      	uxthmi	r3, r3
 8003938:	e7ef      	b.n	800391a <_printf_i+0x14a>
 800393a:	4665      	mov	r5, ip
 800393c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003940:	fb02 3311 	mls	r3, r2, r1, r3
 8003944:	5cc3      	ldrb	r3, [r0, r3]
 8003946:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800394a:	460b      	mov	r3, r1
 800394c:	2900      	cmp	r1, #0
 800394e:	d1f5      	bne.n	800393c <_printf_i+0x16c>
 8003950:	e7b9      	b.n	80038c6 <_printf_i+0xf6>
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	6825      	ldr	r5, [r4, #0]
 8003956:	1d18      	adds	r0, r3, #4
 8003958:	6961      	ldr	r1, [r4, #20]
 800395a:	6010      	str	r0, [r2, #0]
 800395c:	0628      	lsls	r0, r5, #24
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	d501      	bpl.n	8003966 <_printf_i+0x196>
 8003962:	6019      	str	r1, [r3, #0]
 8003964:	e002      	b.n	800396c <_printf_i+0x19c>
 8003966:	066a      	lsls	r2, r5, #25
 8003968:	d5fb      	bpl.n	8003962 <_printf_i+0x192>
 800396a:	8019      	strh	r1, [r3, #0]
 800396c:	2300      	movs	r3, #0
 800396e:	4665      	mov	r5, ip
 8003970:	6123      	str	r3, [r4, #16]
 8003972:	e7b9      	b.n	80038e8 <_printf_i+0x118>
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	1d19      	adds	r1, r3, #4
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	681d      	ldr	r5, [r3, #0]
 800397c:	6862      	ldr	r2, [r4, #4]
 800397e:	2100      	movs	r1, #0
 8003980:	4628      	mov	r0, r5
 8003982:	f002 fa93 	bl	8005eac <memchr>
 8003986:	b108      	cbz	r0, 800398c <_printf_i+0x1bc>
 8003988:	1b40      	subs	r0, r0, r5
 800398a:	6060      	str	r0, [r4, #4]
 800398c:	6863      	ldr	r3, [r4, #4]
 800398e:	6123      	str	r3, [r4, #16]
 8003990:	2300      	movs	r3, #0
 8003992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003996:	e7a7      	b.n	80038e8 <_printf_i+0x118>
 8003998:	6923      	ldr	r3, [r4, #16]
 800399a:	462a      	mov	r2, r5
 800399c:	4639      	mov	r1, r7
 800399e:	4630      	mov	r0, r6
 80039a0:	47c0      	blx	r8
 80039a2:	3001      	adds	r0, #1
 80039a4:	d0aa      	beq.n	80038fc <_printf_i+0x12c>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	079b      	lsls	r3, r3, #30
 80039aa:	d413      	bmi.n	80039d4 <_printf_i+0x204>
 80039ac:	68e0      	ldr	r0, [r4, #12]
 80039ae:	9b03      	ldr	r3, [sp, #12]
 80039b0:	4298      	cmp	r0, r3
 80039b2:	bfb8      	it	lt
 80039b4:	4618      	movlt	r0, r3
 80039b6:	e7a3      	b.n	8003900 <_printf_i+0x130>
 80039b8:	2301      	movs	r3, #1
 80039ba:	464a      	mov	r2, r9
 80039bc:	4639      	mov	r1, r7
 80039be:	4630      	mov	r0, r6
 80039c0:	47c0      	blx	r8
 80039c2:	3001      	adds	r0, #1
 80039c4:	d09a      	beq.n	80038fc <_printf_i+0x12c>
 80039c6:	3501      	adds	r5, #1
 80039c8:	68e3      	ldr	r3, [r4, #12]
 80039ca:	9a03      	ldr	r2, [sp, #12]
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	42ab      	cmp	r3, r5
 80039d0:	dcf2      	bgt.n	80039b8 <_printf_i+0x1e8>
 80039d2:	e7eb      	b.n	80039ac <_printf_i+0x1dc>
 80039d4:	2500      	movs	r5, #0
 80039d6:	f104 0919 	add.w	r9, r4, #25
 80039da:	e7f5      	b.n	80039c8 <_printf_i+0x1f8>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ac      	bne.n	800393a <_printf_i+0x16a>
 80039e0:	7803      	ldrb	r3, [r0, #0]
 80039e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ea:	e76c      	b.n	80038c6 <_printf_i+0xf6>
 80039ec:	08006c1e 	.word	0x08006c1e
 80039f0:	08006c2f 	.word	0x08006c2f

080039f4 <_scanf_float>:
 80039f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f8:	469a      	mov	sl, r3
 80039fa:	688b      	ldr	r3, [r1, #8]
 80039fc:	4616      	mov	r6, r2
 80039fe:	1e5a      	subs	r2, r3, #1
 8003a00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a04:	bf88      	it	hi
 8003a06:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	bf85      	ittet	hi
 8003a0e:	189b      	addhi	r3, r3, r2
 8003a10:	9301      	strhi	r3, [sp, #4]
 8003a12:	2300      	movls	r3, #0
 8003a14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a18:	4688      	mov	r8, r1
 8003a1a:	f04f 0b00 	mov.w	fp, #0
 8003a1e:	bf8c      	ite	hi
 8003a20:	608b      	strhi	r3, [r1, #8]
 8003a22:	9301      	strls	r3, [sp, #4]
 8003a24:	680b      	ldr	r3, [r1, #0]
 8003a26:	4607      	mov	r7, r0
 8003a28:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a2c:	f848 3b1c 	str.w	r3, [r8], #28
 8003a30:	460c      	mov	r4, r1
 8003a32:	4645      	mov	r5, r8
 8003a34:	465a      	mov	r2, fp
 8003a36:	46d9      	mov	r9, fp
 8003a38:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003a3c:	f8cd b008 	str.w	fp, [sp, #8]
 8003a40:	68a1      	ldr	r1, [r4, #8]
 8003a42:	b181      	cbz	r1, 8003a66 <_scanf_float+0x72>
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b49      	cmp	r3, #73	; 0x49
 8003a4a:	d071      	beq.n	8003b30 <_scanf_float+0x13c>
 8003a4c:	d84d      	bhi.n	8003aea <_scanf_float+0xf6>
 8003a4e:	2b39      	cmp	r3, #57	; 0x39
 8003a50:	d840      	bhi.n	8003ad4 <_scanf_float+0xe0>
 8003a52:	2b31      	cmp	r3, #49	; 0x31
 8003a54:	f080 8088 	bcs.w	8003b68 <_scanf_float+0x174>
 8003a58:	2b2d      	cmp	r3, #45	; 0x2d
 8003a5a:	f000 8090 	beq.w	8003b7e <_scanf_float+0x18a>
 8003a5e:	d815      	bhi.n	8003a8c <_scanf_float+0x98>
 8003a60:	2b2b      	cmp	r3, #43	; 0x2b
 8003a62:	f000 808c 	beq.w	8003b7e <_scanf_float+0x18a>
 8003a66:	f1b9 0f00 	cmp.w	r9, #0
 8003a6a:	d003      	beq.n	8003a74 <_scanf_float+0x80>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	3a01      	subs	r2, #1
 8003a76:	2a01      	cmp	r2, #1
 8003a78:	f200 80ea 	bhi.w	8003c50 <_scanf_float+0x25c>
 8003a7c:	4545      	cmp	r5, r8
 8003a7e:	f200 80dc 	bhi.w	8003c3a <_scanf_float+0x246>
 8003a82:	2601      	movs	r6, #1
 8003a84:	4630      	mov	r0, r6
 8003a86:	b007      	add	sp, #28
 8003a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a8e:	f000 809f 	beq.w	8003bd0 <_scanf_float+0x1dc>
 8003a92:	2b30      	cmp	r3, #48	; 0x30
 8003a94:	d1e7      	bne.n	8003a66 <_scanf_float+0x72>
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003a9c:	d064      	beq.n	8003b68 <_scanf_float+0x174>
 8003a9e:	9b01      	ldr	r3, [sp, #4]
 8003aa0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003aa4:	6020      	str	r0, [r4, #0]
 8003aa6:	f109 0901 	add.w	r9, r9, #1
 8003aaa:	b11b      	cbz	r3, 8003ab4 <_scanf_float+0xc0>
 8003aac:	3b01      	subs	r3, #1
 8003aae:	3101      	adds	r1, #1
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	60a1      	str	r1, [r4, #8]
 8003ab4:	68a3      	ldr	r3, [r4, #8]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	60a3      	str	r3, [r4, #8]
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	3301      	adds	r3, #1
 8003abe:	6123      	str	r3, [r4, #16]
 8003ac0:	6873      	ldr	r3, [r6, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	6073      	str	r3, [r6, #4]
 8003ac8:	f340 80ac 	ble.w	8003c24 <_scanf_float+0x230>
 8003acc:	6833      	ldr	r3, [r6, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	6033      	str	r3, [r6, #0]
 8003ad2:	e7b5      	b.n	8003a40 <_scanf_float+0x4c>
 8003ad4:	2b45      	cmp	r3, #69	; 0x45
 8003ad6:	f000 8085 	beq.w	8003be4 <_scanf_float+0x1f0>
 8003ada:	2b46      	cmp	r3, #70	; 0x46
 8003adc:	d06a      	beq.n	8003bb4 <_scanf_float+0x1c0>
 8003ade:	2b41      	cmp	r3, #65	; 0x41
 8003ae0:	d1c1      	bne.n	8003a66 <_scanf_float+0x72>
 8003ae2:	2a01      	cmp	r2, #1
 8003ae4:	d1bf      	bne.n	8003a66 <_scanf_float+0x72>
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	e046      	b.n	8003b78 <_scanf_float+0x184>
 8003aea:	2b65      	cmp	r3, #101	; 0x65
 8003aec:	d07a      	beq.n	8003be4 <_scanf_float+0x1f0>
 8003aee:	d818      	bhi.n	8003b22 <_scanf_float+0x12e>
 8003af0:	2b54      	cmp	r3, #84	; 0x54
 8003af2:	d066      	beq.n	8003bc2 <_scanf_float+0x1ce>
 8003af4:	d811      	bhi.n	8003b1a <_scanf_float+0x126>
 8003af6:	2b4e      	cmp	r3, #78	; 0x4e
 8003af8:	d1b5      	bne.n	8003a66 <_scanf_float+0x72>
 8003afa:	2a00      	cmp	r2, #0
 8003afc:	d146      	bne.n	8003b8c <_scanf_float+0x198>
 8003afe:	f1b9 0f00 	cmp.w	r9, #0
 8003b02:	d145      	bne.n	8003b90 <_scanf_float+0x19c>
 8003b04:	6821      	ldr	r1, [r4, #0]
 8003b06:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003b0a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b0e:	d13f      	bne.n	8003b90 <_scanf_float+0x19c>
 8003b10:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b14:	6021      	str	r1, [r4, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	e02e      	b.n	8003b78 <_scanf_float+0x184>
 8003b1a:	2b59      	cmp	r3, #89	; 0x59
 8003b1c:	d01e      	beq.n	8003b5c <_scanf_float+0x168>
 8003b1e:	2b61      	cmp	r3, #97	; 0x61
 8003b20:	e7de      	b.n	8003ae0 <_scanf_float+0xec>
 8003b22:	2b6e      	cmp	r3, #110	; 0x6e
 8003b24:	d0e9      	beq.n	8003afa <_scanf_float+0x106>
 8003b26:	d815      	bhi.n	8003b54 <_scanf_float+0x160>
 8003b28:	2b66      	cmp	r3, #102	; 0x66
 8003b2a:	d043      	beq.n	8003bb4 <_scanf_float+0x1c0>
 8003b2c:	2b69      	cmp	r3, #105	; 0x69
 8003b2e:	d19a      	bne.n	8003a66 <_scanf_float+0x72>
 8003b30:	f1bb 0f00 	cmp.w	fp, #0
 8003b34:	d138      	bne.n	8003ba8 <_scanf_float+0x1b4>
 8003b36:	f1b9 0f00 	cmp.w	r9, #0
 8003b3a:	d197      	bne.n	8003a6c <_scanf_float+0x78>
 8003b3c:	6821      	ldr	r1, [r4, #0]
 8003b3e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003b42:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b46:	d195      	bne.n	8003a74 <_scanf_float+0x80>
 8003b48:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b4c:	6021      	str	r1, [r4, #0]
 8003b4e:	f04f 0b01 	mov.w	fp, #1
 8003b52:	e011      	b.n	8003b78 <_scanf_float+0x184>
 8003b54:	2b74      	cmp	r3, #116	; 0x74
 8003b56:	d034      	beq.n	8003bc2 <_scanf_float+0x1ce>
 8003b58:	2b79      	cmp	r3, #121	; 0x79
 8003b5a:	d184      	bne.n	8003a66 <_scanf_float+0x72>
 8003b5c:	f1bb 0f07 	cmp.w	fp, #7
 8003b60:	d181      	bne.n	8003a66 <_scanf_float+0x72>
 8003b62:	f04f 0b08 	mov.w	fp, #8
 8003b66:	e007      	b.n	8003b78 <_scanf_float+0x184>
 8003b68:	eb12 0f0b 	cmn.w	r2, fp
 8003b6c:	f47f af7b 	bne.w	8003a66 <_scanf_float+0x72>
 8003b70:	6821      	ldr	r1, [r4, #0]
 8003b72:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003b76:	6021      	str	r1, [r4, #0]
 8003b78:	702b      	strb	r3, [r5, #0]
 8003b7a:	3501      	adds	r5, #1
 8003b7c:	e79a      	b.n	8003ab4 <_scanf_float+0xc0>
 8003b7e:	6821      	ldr	r1, [r4, #0]
 8003b80:	0608      	lsls	r0, r1, #24
 8003b82:	f57f af70 	bpl.w	8003a66 <_scanf_float+0x72>
 8003b86:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003b8a:	e7f4      	b.n	8003b76 <_scanf_float+0x182>
 8003b8c:	2a02      	cmp	r2, #2
 8003b8e:	d047      	beq.n	8003c20 <_scanf_float+0x22c>
 8003b90:	f1bb 0f01 	cmp.w	fp, #1
 8003b94:	d003      	beq.n	8003b9e <_scanf_float+0x1aa>
 8003b96:	f1bb 0f04 	cmp.w	fp, #4
 8003b9a:	f47f af64 	bne.w	8003a66 <_scanf_float+0x72>
 8003b9e:	f10b 0b01 	add.w	fp, fp, #1
 8003ba2:	fa5f fb8b 	uxtb.w	fp, fp
 8003ba6:	e7e7      	b.n	8003b78 <_scanf_float+0x184>
 8003ba8:	f1bb 0f03 	cmp.w	fp, #3
 8003bac:	d0f7      	beq.n	8003b9e <_scanf_float+0x1aa>
 8003bae:	f1bb 0f05 	cmp.w	fp, #5
 8003bb2:	e7f2      	b.n	8003b9a <_scanf_float+0x1a6>
 8003bb4:	f1bb 0f02 	cmp.w	fp, #2
 8003bb8:	f47f af55 	bne.w	8003a66 <_scanf_float+0x72>
 8003bbc:	f04f 0b03 	mov.w	fp, #3
 8003bc0:	e7da      	b.n	8003b78 <_scanf_float+0x184>
 8003bc2:	f1bb 0f06 	cmp.w	fp, #6
 8003bc6:	f47f af4e 	bne.w	8003a66 <_scanf_float+0x72>
 8003bca:	f04f 0b07 	mov.w	fp, #7
 8003bce:	e7d3      	b.n	8003b78 <_scanf_float+0x184>
 8003bd0:	6821      	ldr	r1, [r4, #0]
 8003bd2:	0588      	lsls	r0, r1, #22
 8003bd4:	f57f af47 	bpl.w	8003a66 <_scanf_float+0x72>
 8003bd8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003bdc:	6021      	str	r1, [r4, #0]
 8003bde:	f8cd 9008 	str.w	r9, [sp, #8]
 8003be2:	e7c9      	b.n	8003b78 <_scanf_float+0x184>
 8003be4:	6821      	ldr	r1, [r4, #0]
 8003be6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003bea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003bee:	d006      	beq.n	8003bfe <_scanf_float+0x20a>
 8003bf0:	0548      	lsls	r0, r1, #21
 8003bf2:	f57f af38 	bpl.w	8003a66 <_scanf_float+0x72>
 8003bf6:	f1b9 0f00 	cmp.w	r9, #0
 8003bfa:	f43f af3b 	beq.w	8003a74 <_scanf_float+0x80>
 8003bfe:	0588      	lsls	r0, r1, #22
 8003c00:	bf58      	it	pl
 8003c02:	9802      	ldrpl	r0, [sp, #8]
 8003c04:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003c08:	bf58      	it	pl
 8003c0a:	eba9 0000 	subpl.w	r0, r9, r0
 8003c0e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003c12:	bf58      	it	pl
 8003c14:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003c18:	6021      	str	r1, [r4, #0]
 8003c1a:	f04f 0900 	mov.w	r9, #0
 8003c1e:	e7ab      	b.n	8003b78 <_scanf_float+0x184>
 8003c20:	2203      	movs	r2, #3
 8003c22:	e7a9      	b.n	8003b78 <_scanf_float+0x184>
 8003c24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	9205      	str	r2, [sp, #20]
 8003c2e:	4798      	blx	r3
 8003c30:	9a05      	ldr	r2, [sp, #20]
 8003c32:	2800      	cmp	r0, #0
 8003c34:	f43f af04 	beq.w	8003a40 <_scanf_float+0x4c>
 8003c38:	e715      	b.n	8003a66 <_scanf_float+0x72>
 8003c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c3e:	4632      	mov	r2, r6
 8003c40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003c44:	4638      	mov	r0, r7
 8003c46:	4798      	blx	r3
 8003c48:	6923      	ldr	r3, [r4, #16]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	e715      	b.n	8003a7c <_scanf_float+0x88>
 8003c50:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003c54:	2b06      	cmp	r3, #6
 8003c56:	d80a      	bhi.n	8003c6e <_scanf_float+0x27a>
 8003c58:	f1bb 0f02 	cmp.w	fp, #2
 8003c5c:	d967      	bls.n	8003d2e <_scanf_float+0x33a>
 8003c5e:	f1ab 0b03 	sub.w	fp, fp, #3
 8003c62:	fa5f fb8b 	uxtb.w	fp, fp
 8003c66:	eba5 0b0b 	sub.w	fp, r5, fp
 8003c6a:	455d      	cmp	r5, fp
 8003c6c:	d14a      	bne.n	8003d04 <_scanf_float+0x310>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	05da      	lsls	r2, r3, #23
 8003c72:	d51f      	bpl.n	8003cb4 <_scanf_float+0x2c0>
 8003c74:	055b      	lsls	r3, r3, #21
 8003c76:	d467      	bmi.n	8003d48 <_scanf_float+0x354>
 8003c78:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c7c:	6923      	ldr	r3, [r4, #16]
 8003c7e:	2965      	cmp	r1, #101	; 0x65
 8003c80:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c84:	f105 3bff 	add.w	fp, r5, #4294967295
 8003c88:	6123      	str	r3, [r4, #16]
 8003c8a:	d00d      	beq.n	8003ca8 <_scanf_float+0x2b4>
 8003c8c:	2945      	cmp	r1, #69	; 0x45
 8003c8e:	d00b      	beq.n	8003ca8 <_scanf_float+0x2b4>
 8003c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c94:	4632      	mov	r2, r6
 8003c96:	4638      	mov	r0, r7
 8003c98:	4798      	blx	r3
 8003c9a:	6923      	ldr	r3, [r4, #16]
 8003c9c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	f1a5 0b02 	sub.w	fp, r5, #2
 8003ca6:	6123      	str	r3, [r4, #16]
 8003ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cac:	4632      	mov	r2, r6
 8003cae:	4638      	mov	r0, r7
 8003cb0:	4798      	blx	r3
 8003cb2:	465d      	mov	r5, fp
 8003cb4:	6826      	ldr	r6, [r4, #0]
 8003cb6:	f016 0610 	ands.w	r6, r6, #16
 8003cba:	d176      	bne.n	8003daa <_scanf_float+0x3b6>
 8003cbc:	702e      	strb	r6, [r5, #0]
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc8:	d141      	bne.n	8003d4e <_scanf_float+0x35a>
 8003cca:	9b02      	ldr	r3, [sp, #8]
 8003ccc:	eba9 0303 	sub.w	r3, r9, r3
 8003cd0:	425a      	negs	r2, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d148      	bne.n	8003d68 <_scanf_float+0x374>
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4638      	mov	r0, r7
 8003cdc:	f000 feb0 	bl	8004a40 <_strtod_r>
 8003ce0:	6825      	ldr	r5, [r4, #0]
 8003ce2:	4680      	mov	r8, r0
 8003ce4:	f015 0f02 	tst.w	r5, #2
 8003ce8:	4689      	mov	r9, r1
 8003cea:	f8da 3000 	ldr.w	r3, [sl]
 8003cee:	d046      	beq.n	8003d7e <_scanf_float+0x38a>
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	f8ca 2000 	str.w	r2, [sl]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	e9c3 8900 	strd	r8, r9, [r3]
 8003cfc:	68e3      	ldr	r3, [r4, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60e3      	str	r3, [r4, #12]
 8003d02:	e6bf      	b.n	8003a84 <_scanf_float+0x90>
 8003d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d08:	4632      	mov	r2, r6
 8003d0a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d0e:	4638      	mov	r0, r7
 8003d10:	4798      	blx	r3
 8003d12:	6923      	ldr	r3, [r4, #16]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	6123      	str	r3, [r4, #16]
 8003d18:	e7a7      	b.n	8003c6a <_scanf_float+0x276>
 8003d1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d1e:	4632      	mov	r2, r6
 8003d20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d24:	4638      	mov	r0, r7
 8003d26:	4798      	blx	r3
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	6123      	str	r3, [r4, #16]
 8003d2e:	4545      	cmp	r5, r8
 8003d30:	d8f3      	bhi.n	8003d1a <_scanf_float+0x326>
 8003d32:	e6a6      	b.n	8003a82 <_scanf_float+0x8e>
 8003d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d38:	4632      	mov	r2, r6
 8003d3a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d3e:	4638      	mov	r0, r7
 8003d40:	4798      	blx	r3
 8003d42:	6923      	ldr	r3, [r4, #16]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	6123      	str	r3, [r4, #16]
 8003d48:	4545      	cmp	r5, r8
 8003d4a:	d8f3      	bhi.n	8003d34 <_scanf_float+0x340>
 8003d4c:	e699      	b.n	8003a82 <_scanf_float+0x8e>
 8003d4e:	9b03      	ldr	r3, [sp, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0c0      	beq.n	8003cd6 <_scanf_float+0x2e2>
 8003d54:	9904      	ldr	r1, [sp, #16]
 8003d56:	230a      	movs	r3, #10
 8003d58:	4632      	mov	r2, r6
 8003d5a:	3101      	adds	r1, #1
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f000 fefb 	bl	8004b58 <_strtol_r>
 8003d62:	9b03      	ldr	r3, [sp, #12]
 8003d64:	9d04      	ldr	r5, [sp, #16]
 8003d66:	1ac2      	subs	r2, r0, r3
 8003d68:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003d6c:	429d      	cmp	r5, r3
 8003d6e:	bf28      	it	cs
 8003d70:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <_scanf_float+0x3bc>)
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 f820 	bl	8003dbc <siprintf>
 8003d7c:	e7ab      	b.n	8003cd6 <_scanf_float+0x2e2>
 8003d7e:	1d1f      	adds	r7, r3, #4
 8003d80:	f015 0504 	ands.w	r5, r5, #4
 8003d84:	f8ca 7000 	str.w	r7, [sl]
 8003d88:	d1b5      	bne.n	8003cf6 <_scanf_float+0x302>
 8003d8a:	681f      	ldr	r7, [r3, #0]
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	f7fc fe3c 	bl	8000a0c <__aeabi_dcmpun>
 8003d94:	b120      	cbz	r0, 8003da0 <_scanf_float+0x3ac>
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 f80c 	bl	8003db4 <nanf>
 8003d9c:	6038      	str	r0, [r7, #0]
 8003d9e:	e7ad      	b.n	8003cfc <_scanf_float+0x308>
 8003da0:	4640      	mov	r0, r8
 8003da2:	4649      	mov	r1, r9
 8003da4:	f7fc fe90 	bl	8000ac8 <__aeabi_d2f>
 8003da8:	e7f8      	b.n	8003d9c <_scanf_float+0x3a8>
 8003daa:	2600      	movs	r6, #0
 8003dac:	e66a      	b.n	8003a84 <_scanf_float+0x90>
 8003dae:	bf00      	nop
 8003db0:	08006c40 	.word	0x08006c40

08003db4 <nanf>:
 8003db4:	4800      	ldr	r0, [pc, #0]	; (8003db8 <nanf+0x4>)
 8003db6:	4770      	bx	lr
 8003db8:	7fc00000 	.word	0x7fc00000

08003dbc <siprintf>:
 8003dbc:	b40e      	push	{r1, r2, r3}
 8003dbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dc2:	b500      	push	{lr}
 8003dc4:	b09c      	sub	sp, #112	; 0x70
 8003dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003dc8:	9002      	str	r0, [sp, #8]
 8003dca:	9006      	str	r0, [sp, #24]
 8003dcc:	9107      	str	r1, [sp, #28]
 8003dce:	9104      	str	r1, [sp, #16]
 8003dd0:	4808      	ldr	r0, [pc, #32]	; (8003df4 <siprintf+0x38>)
 8003dd2:	4909      	ldr	r1, [pc, #36]	; (8003df8 <siprintf+0x3c>)
 8003dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd8:	9105      	str	r1, [sp, #20]
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	a902      	add	r1, sp, #8
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	f002 fd84 	bl	80068ec <_svfiprintf_r>
 8003de4:	2200      	movs	r2, #0
 8003de6:	9b02      	ldr	r3, [sp, #8]
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	b01c      	add	sp, #112	; 0x70
 8003dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df0:	b003      	add	sp, #12
 8003df2:	4770      	bx	lr
 8003df4:	20000010 	.word	0x20000010
 8003df8:	ffff0208 	.word	0xffff0208

08003dfc <sulp>:
 8003dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e00:	460f      	mov	r7, r1
 8003e02:	4690      	mov	r8, r2
 8003e04:	f002 fb36 	bl	8006474 <__ulp>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	f1b8 0f00 	cmp.w	r8, #0
 8003e10:	d011      	beq.n	8003e36 <sulp+0x3a>
 8003e12:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003e16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dd0b      	ble.n	8003e36 <sulp+0x3a>
 8003e1e:	2400      	movs	r4, #0
 8003e20:	051b      	lsls	r3, r3, #20
 8003e22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003e26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	f7fc fb53 	bl	80004d8 <__aeabi_dmul>
 8003e32:	4604      	mov	r4, r0
 8003e34:	460d      	mov	r5, r1
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003e40 <_strtod_l>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	461f      	mov	r7, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	b0a1      	sub	sp, #132	; 0x84
 8003e4a:	4683      	mov	fp, r0
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	460e      	mov	r6, r1
 8003e50:	9217      	str	r2, [sp, #92]	; 0x5c
 8003e52:	931c      	str	r3, [sp, #112]	; 0x70
 8003e54:	f001 ffff 	bl	8005e56 <__localeconv_l>
 8003e58:	4680      	mov	r8, r0
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	f7fc f978 	bl	8000150 <strlen>
 8003e60:	f04f 0900 	mov.w	r9, #0
 8003e64:	4604      	mov	r4, r0
 8003e66:	f04f 0a00 	mov.w	sl, #0
 8003e6a:	961b      	str	r6, [sp, #108]	; 0x6c
 8003e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	2a0d      	cmp	r2, #13
 8003e72:	d832      	bhi.n	8003eda <_strtod_l+0x9a>
 8003e74:	2a09      	cmp	r2, #9
 8003e76:	d236      	bcs.n	8003ee6 <_strtod_l+0xa6>
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	d03e      	beq.n	8003efa <_strtod_l+0xba>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8003e80:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003e82:	782b      	ldrb	r3, [r5, #0]
 8003e84:	2b30      	cmp	r3, #48	; 0x30
 8003e86:	f040 80ac 	bne.w	8003fe2 <_strtod_l+0x1a2>
 8003e8a:	786b      	ldrb	r3, [r5, #1]
 8003e8c:	2b58      	cmp	r3, #88	; 0x58
 8003e8e:	d001      	beq.n	8003e94 <_strtod_l+0x54>
 8003e90:	2b78      	cmp	r3, #120	; 0x78
 8003e92:	d167      	bne.n	8003f64 <_strtod_l+0x124>
 8003e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e96:	9702      	str	r7, [sp, #8]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	ab1c      	add	r3, sp, #112	; 0x70
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	4a89      	ldr	r2, [pc, #548]	; (80040c4 <_strtod_l+0x284>)
 8003ea0:	ab1d      	add	r3, sp, #116	; 0x74
 8003ea2:	a91b      	add	r1, sp, #108	; 0x6c
 8003ea4:	4658      	mov	r0, fp
 8003ea6:	f001 fcfb 	bl	80058a0 <__gethex>
 8003eaa:	f010 0407 	ands.w	r4, r0, #7
 8003eae:	4606      	mov	r6, r0
 8003eb0:	d005      	beq.n	8003ebe <_strtod_l+0x7e>
 8003eb2:	2c06      	cmp	r4, #6
 8003eb4:	d12b      	bne.n	8003f0e <_strtod_l+0xce>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	3501      	adds	r5, #1
 8003eba:	951b      	str	r5, [sp, #108]	; 0x6c
 8003ebc:	930d      	str	r3, [sp, #52]	; 0x34
 8003ebe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f040 85a6 	bne.w	8004a12 <_strtod_l+0xbd2>
 8003ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ec8:	b1e3      	cbz	r3, 8003f04 <_strtod_l+0xc4>
 8003eca:	464a      	mov	r2, r9
 8003ecc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	b021      	add	sp, #132	; 0x84
 8003ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eda:	2a2b      	cmp	r2, #43	; 0x2b
 8003edc:	d015      	beq.n	8003f0a <_strtod_l+0xca>
 8003ede:	2a2d      	cmp	r2, #45	; 0x2d
 8003ee0:	d004      	beq.n	8003eec <_strtod_l+0xac>
 8003ee2:	2a20      	cmp	r2, #32
 8003ee4:	d1ca      	bne.n	8003e7c <_strtod_l+0x3c>
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	931b      	str	r3, [sp, #108]	; 0x6c
 8003eea:	e7bf      	b.n	8003e6c <_strtod_l+0x2c>
 8003eec:	2201      	movs	r2, #1
 8003eee:	920d      	str	r2, [sp, #52]	; 0x34
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	921b      	str	r2, [sp, #108]	; 0x6c
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1c2      	bne.n	8003e80 <_strtod_l+0x40>
 8003efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003efc:	961b      	str	r6, [sp, #108]	; 0x6c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 8585 	bne.w	8004a0e <_strtod_l+0xbce>
 8003f04:	464a      	mov	r2, r9
 8003f06:	4653      	mov	r3, sl
 8003f08:	e7e2      	b.n	8003ed0 <_strtod_l+0x90>
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	e7ef      	b.n	8003eee <_strtod_l+0xae>
 8003f0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003f10:	b13a      	cbz	r2, 8003f22 <_strtod_l+0xe2>
 8003f12:	2135      	movs	r1, #53	; 0x35
 8003f14:	a81e      	add	r0, sp, #120	; 0x78
 8003f16:	f002 fba0 	bl	800665a <__copybits>
 8003f1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003f1c:	4658      	mov	r0, fp
 8003f1e:	f002 f812 	bl	8005f46 <_Bfree>
 8003f22:	3c01      	subs	r4, #1
 8003f24:	2c04      	cmp	r4, #4
 8003f26:	d806      	bhi.n	8003f36 <_strtod_l+0xf6>
 8003f28:	e8df f004 	tbb	[pc, r4]
 8003f2c:	1714030a 	.word	0x1714030a
 8003f30:	0a          	.byte	0x0a
 8003f31:	00          	.byte	0x00
 8003f32:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8003f36:	0731      	lsls	r1, r6, #28
 8003f38:	d5c1      	bpl.n	8003ebe <_strtod_l+0x7e>
 8003f3a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8003f3e:	e7be      	b.n	8003ebe <_strtod_l+0x7e>
 8003f40:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003f42:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8003f46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f4e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8003f52:	e7f0      	b.n	8003f36 <_strtod_l+0xf6>
 8003f54:	f8df a170 	ldr.w	sl, [pc, #368]	; 80040c8 <_strtod_l+0x288>
 8003f58:	e7ed      	b.n	8003f36 <_strtod_l+0xf6>
 8003f5a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003f5e:	f04f 39ff 	mov.w	r9, #4294967295
 8003f62:	e7e8      	b.n	8003f36 <_strtod_l+0xf6>
 8003f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	921b      	str	r2, [sp, #108]	; 0x6c
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	2b30      	cmp	r3, #48	; 0x30
 8003f6e:	d0f9      	beq.n	8003f64 <_strtod_l+0x124>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0a4      	beq.n	8003ebe <_strtod_l+0x7e>
 8003f74:	2301      	movs	r3, #1
 8003f76:	2500      	movs	r5, #0
 8003f78:	220a      	movs	r2, #10
 8003f7a:	9307      	str	r3, [sp, #28]
 8003f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f7e:	9506      	str	r5, [sp, #24]
 8003f80:	9308      	str	r3, [sp, #32]
 8003f82:	9504      	str	r5, [sp, #16]
 8003f84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003f86:	7807      	ldrb	r7, [r0, #0]
 8003f88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003f8c:	b2d9      	uxtb	r1, r3
 8003f8e:	2909      	cmp	r1, #9
 8003f90:	d929      	bls.n	8003fe6 <_strtod_l+0x1a6>
 8003f92:	4622      	mov	r2, r4
 8003f94:	f8d8 1000 	ldr.w	r1, [r8]
 8003f98:	f002 fdb0 	bl	8006afc <strncmp>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d031      	beq.n	8004004 <_strtod_l+0x1c4>
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	463b      	mov	r3, r7
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	9c04      	ldr	r4, [sp, #16]
 8003fa8:	9005      	str	r0, [sp, #20]
 8003faa:	2b65      	cmp	r3, #101	; 0x65
 8003fac:	d001      	beq.n	8003fb2 <_strtod_l+0x172>
 8003fae:	2b45      	cmp	r3, #69	; 0x45
 8003fb0:	d114      	bne.n	8003fdc <_strtod_l+0x19c>
 8003fb2:	b924      	cbnz	r4, 8003fbe <_strtod_l+0x17e>
 8003fb4:	b910      	cbnz	r0, 8003fbc <_strtod_l+0x17c>
 8003fb6:	9b07      	ldr	r3, [sp, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d09e      	beq.n	8003efa <_strtod_l+0xba>
 8003fbc:	2400      	movs	r4, #0
 8003fbe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003fc0:	1c73      	adds	r3, r6, #1
 8003fc2:	931b      	str	r3, [sp, #108]	; 0x6c
 8003fc4:	7873      	ldrb	r3, [r6, #1]
 8003fc6:	2b2b      	cmp	r3, #43	; 0x2b
 8003fc8:	d078      	beq.n	80040bc <_strtod_l+0x27c>
 8003fca:	2b2d      	cmp	r3, #45	; 0x2d
 8003fcc:	d070      	beq.n	80040b0 <_strtod_l+0x270>
 8003fce:	f04f 0c00 	mov.w	ip, #0
 8003fd2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8003fd6:	2f09      	cmp	r7, #9
 8003fd8:	d97c      	bls.n	80040d4 <_strtod_l+0x294>
 8003fda:	961b      	str	r6, [sp, #108]	; 0x6c
 8003fdc:	f04f 0e00 	mov.w	lr, #0
 8003fe0:	e09a      	b.n	8004118 <_strtod_l+0x2d8>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e7c7      	b.n	8003f76 <_strtod_l+0x136>
 8003fe6:	9904      	ldr	r1, [sp, #16]
 8003fe8:	3001      	adds	r0, #1
 8003fea:	2908      	cmp	r1, #8
 8003fec:	bfd7      	itett	le
 8003fee:	9906      	ldrle	r1, [sp, #24]
 8003ff0:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003ff4:	fb02 3301 	mlale	r3, r2, r1, r3
 8003ff8:	9306      	strle	r3, [sp, #24]
 8003ffa:	9b04      	ldr	r3, [sp, #16]
 8003ffc:	901b      	str	r0, [sp, #108]	; 0x6c
 8003ffe:	3301      	adds	r3, #1
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	e7bf      	b.n	8003f84 <_strtod_l+0x144>
 8004004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004006:	191a      	adds	r2, r3, r4
 8004008:	921b      	str	r2, [sp, #108]	; 0x6c
 800400a:	9a04      	ldr	r2, [sp, #16]
 800400c:	5d1b      	ldrb	r3, [r3, r4]
 800400e:	2a00      	cmp	r2, #0
 8004010:	d037      	beq.n	8004082 <_strtod_l+0x242>
 8004012:	4602      	mov	r2, r0
 8004014:	9c04      	ldr	r4, [sp, #16]
 8004016:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800401a:	2909      	cmp	r1, #9
 800401c:	d913      	bls.n	8004046 <_strtod_l+0x206>
 800401e:	2101      	movs	r1, #1
 8004020:	9105      	str	r1, [sp, #20]
 8004022:	e7c2      	b.n	8003faa <_strtod_l+0x16a>
 8004024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004026:	3001      	adds	r0, #1
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	921b      	str	r2, [sp, #108]	; 0x6c
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	2b30      	cmp	r3, #48	; 0x30
 8004030:	d0f8      	beq.n	8004024 <_strtod_l+0x1e4>
 8004032:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004036:	2a08      	cmp	r2, #8
 8004038:	f200 84f0 	bhi.w	8004a1c <_strtod_l+0xbdc>
 800403c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800403e:	9208      	str	r2, [sp, #32]
 8004040:	4602      	mov	r2, r0
 8004042:	2000      	movs	r0, #0
 8004044:	4604      	mov	r4, r0
 8004046:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800404a:	f100 0101 	add.w	r1, r0, #1
 800404e:	d012      	beq.n	8004076 <_strtod_l+0x236>
 8004050:	440a      	add	r2, r1
 8004052:	270a      	movs	r7, #10
 8004054:	4621      	mov	r1, r4
 8004056:	eb00 0c04 	add.w	ip, r0, r4
 800405a:	458c      	cmp	ip, r1
 800405c:	d113      	bne.n	8004086 <_strtod_l+0x246>
 800405e:	1821      	adds	r1, r4, r0
 8004060:	2908      	cmp	r1, #8
 8004062:	f104 0401 	add.w	r4, r4, #1
 8004066:	4404      	add	r4, r0
 8004068:	dc19      	bgt.n	800409e <_strtod_l+0x25e>
 800406a:	210a      	movs	r1, #10
 800406c:	9b06      	ldr	r3, [sp, #24]
 800406e:	fb01 e303 	mla	r3, r1, r3, lr
 8004072:	9306      	str	r3, [sp, #24]
 8004074:	2100      	movs	r1, #0
 8004076:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004078:	1c58      	adds	r0, r3, #1
 800407a:	901b      	str	r0, [sp, #108]	; 0x6c
 800407c:	785b      	ldrb	r3, [r3, #1]
 800407e:	4608      	mov	r0, r1
 8004080:	e7c9      	b.n	8004016 <_strtod_l+0x1d6>
 8004082:	9804      	ldr	r0, [sp, #16]
 8004084:	e7d3      	b.n	800402e <_strtod_l+0x1ee>
 8004086:	2908      	cmp	r1, #8
 8004088:	f101 0101 	add.w	r1, r1, #1
 800408c:	dc03      	bgt.n	8004096 <_strtod_l+0x256>
 800408e:	9b06      	ldr	r3, [sp, #24]
 8004090:	437b      	muls	r3, r7
 8004092:	9306      	str	r3, [sp, #24]
 8004094:	e7e1      	b.n	800405a <_strtod_l+0x21a>
 8004096:	2910      	cmp	r1, #16
 8004098:	bfd8      	it	le
 800409a:	437d      	mulle	r5, r7
 800409c:	e7dd      	b.n	800405a <_strtod_l+0x21a>
 800409e:	2c10      	cmp	r4, #16
 80040a0:	bfdc      	itt	le
 80040a2:	210a      	movle	r1, #10
 80040a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80040a8:	e7e4      	b.n	8004074 <_strtod_l+0x234>
 80040aa:	2301      	movs	r3, #1
 80040ac:	9305      	str	r3, [sp, #20]
 80040ae:	e781      	b.n	8003fb4 <_strtod_l+0x174>
 80040b0:	f04f 0c01 	mov.w	ip, #1
 80040b4:	1cb3      	adds	r3, r6, #2
 80040b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80040b8:	78b3      	ldrb	r3, [r6, #2]
 80040ba:	e78a      	b.n	8003fd2 <_strtod_l+0x192>
 80040bc:	f04f 0c00 	mov.w	ip, #0
 80040c0:	e7f8      	b.n	80040b4 <_strtod_l+0x274>
 80040c2:	bf00      	nop
 80040c4:	08006c48 	.word	0x08006c48
 80040c8:	7ff00000 	.word	0x7ff00000
 80040cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040ce:	1c5f      	adds	r7, r3, #1
 80040d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	2b30      	cmp	r3, #48	; 0x30
 80040d6:	d0f9      	beq.n	80040cc <_strtod_l+0x28c>
 80040d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80040dc:	2f08      	cmp	r7, #8
 80040de:	f63f af7d 	bhi.w	8003fdc <_strtod_l+0x19c>
 80040e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80040e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040e8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040ec:	1c5f      	adds	r7, r3, #1
 80040ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80040f6:	f1b8 0f09 	cmp.w	r8, #9
 80040fa:	d937      	bls.n	800416c <_strtod_l+0x32c>
 80040fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040fe:	1a7f      	subs	r7, r7, r1
 8004100:	2f08      	cmp	r7, #8
 8004102:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004106:	dc37      	bgt.n	8004178 <_strtod_l+0x338>
 8004108:	45be      	cmp	lr, r7
 800410a:	bfa8      	it	ge
 800410c:	46be      	movge	lr, r7
 800410e:	f1bc 0f00 	cmp.w	ip, #0
 8004112:	d001      	beq.n	8004118 <_strtod_l+0x2d8>
 8004114:	f1ce 0e00 	rsb	lr, lr, #0
 8004118:	2c00      	cmp	r4, #0
 800411a:	d151      	bne.n	80041c0 <_strtod_l+0x380>
 800411c:	2800      	cmp	r0, #0
 800411e:	f47f aece 	bne.w	8003ebe <_strtod_l+0x7e>
 8004122:	9a07      	ldr	r2, [sp, #28]
 8004124:	2a00      	cmp	r2, #0
 8004126:	f47f aeca 	bne.w	8003ebe <_strtod_l+0x7e>
 800412a:	9a05      	ldr	r2, [sp, #20]
 800412c:	2a00      	cmp	r2, #0
 800412e:	f47f aee4 	bne.w	8003efa <_strtod_l+0xba>
 8004132:	2b4e      	cmp	r3, #78	; 0x4e
 8004134:	d027      	beq.n	8004186 <_strtod_l+0x346>
 8004136:	dc21      	bgt.n	800417c <_strtod_l+0x33c>
 8004138:	2b49      	cmp	r3, #73	; 0x49
 800413a:	f47f aede 	bne.w	8003efa <_strtod_l+0xba>
 800413e:	49a4      	ldr	r1, [pc, #656]	; (80043d0 <_strtod_l+0x590>)
 8004140:	a81b      	add	r0, sp, #108	; 0x6c
 8004142:	f001 fde1 	bl	8005d08 <__match>
 8004146:	2800      	cmp	r0, #0
 8004148:	f43f aed7 	beq.w	8003efa <_strtod_l+0xba>
 800414c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800414e:	49a1      	ldr	r1, [pc, #644]	; (80043d4 <_strtod_l+0x594>)
 8004150:	3b01      	subs	r3, #1
 8004152:	a81b      	add	r0, sp, #108	; 0x6c
 8004154:	931b      	str	r3, [sp, #108]	; 0x6c
 8004156:	f001 fdd7 	bl	8005d08 <__match>
 800415a:	b910      	cbnz	r0, 8004162 <_strtod_l+0x322>
 800415c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800415e:	3301      	adds	r3, #1
 8004160:	931b      	str	r3, [sp, #108]	; 0x6c
 8004162:	f8df a284 	ldr.w	sl, [pc, #644]	; 80043e8 <_strtod_l+0x5a8>
 8004166:	f04f 0900 	mov.w	r9, #0
 800416a:	e6a8      	b.n	8003ebe <_strtod_l+0x7e>
 800416c:	210a      	movs	r1, #10
 800416e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004172:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004176:	e7b8      	b.n	80040ea <_strtod_l+0x2aa>
 8004178:	46be      	mov	lr, r7
 800417a:	e7c8      	b.n	800410e <_strtod_l+0x2ce>
 800417c:	2b69      	cmp	r3, #105	; 0x69
 800417e:	d0de      	beq.n	800413e <_strtod_l+0x2fe>
 8004180:	2b6e      	cmp	r3, #110	; 0x6e
 8004182:	f47f aeba 	bne.w	8003efa <_strtod_l+0xba>
 8004186:	4994      	ldr	r1, [pc, #592]	; (80043d8 <_strtod_l+0x598>)
 8004188:	a81b      	add	r0, sp, #108	; 0x6c
 800418a:	f001 fdbd 	bl	8005d08 <__match>
 800418e:	2800      	cmp	r0, #0
 8004190:	f43f aeb3 	beq.w	8003efa <_strtod_l+0xba>
 8004194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b28      	cmp	r3, #40	; 0x28
 800419a:	d10e      	bne.n	80041ba <_strtod_l+0x37a>
 800419c:	aa1e      	add	r2, sp, #120	; 0x78
 800419e:	498f      	ldr	r1, [pc, #572]	; (80043dc <_strtod_l+0x59c>)
 80041a0:	a81b      	add	r0, sp, #108	; 0x6c
 80041a2:	f001 fdc5 	bl	8005d30 <__hexnan>
 80041a6:	2805      	cmp	r0, #5
 80041a8:	d107      	bne.n	80041ba <_strtod_l+0x37a>
 80041aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80041ac:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80041b0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80041b4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80041b8:	e681      	b.n	8003ebe <_strtod_l+0x7e>
 80041ba:	f8df a234 	ldr.w	sl, [pc, #564]	; 80043f0 <_strtod_l+0x5b0>
 80041be:	e7d2      	b.n	8004166 <_strtod_l+0x326>
 80041c0:	ebae 0302 	sub.w	r3, lr, r2
 80041c4:	9307      	str	r3, [sp, #28]
 80041c6:	9b04      	ldr	r3, [sp, #16]
 80041c8:	9806      	ldr	r0, [sp, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf08      	it	eq
 80041ce:	4623      	moveq	r3, r4
 80041d0:	2c10      	cmp	r4, #16
 80041d2:	9304      	str	r3, [sp, #16]
 80041d4:	46a0      	mov	r8, r4
 80041d6:	bfa8      	it	ge
 80041d8:	f04f 0810 	movge.w	r8, #16
 80041dc:	f7fc f902 	bl	80003e4 <__aeabi_ui2d>
 80041e0:	2c09      	cmp	r4, #9
 80041e2:	4681      	mov	r9, r0
 80041e4:	468a      	mov	sl, r1
 80041e6:	dc13      	bgt.n	8004210 <_strtod_l+0x3d0>
 80041e8:	9b07      	ldr	r3, [sp, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f43f ae67 	beq.w	8003ebe <_strtod_l+0x7e>
 80041f0:	9b07      	ldr	r3, [sp, #28]
 80041f2:	dd7e      	ble.n	80042f2 <_strtod_l+0x4b2>
 80041f4:	2b16      	cmp	r3, #22
 80041f6:	dc65      	bgt.n	80042c4 <_strtod_l+0x484>
 80041f8:	4a79      	ldr	r2, [pc, #484]	; (80043e0 <_strtod_l+0x5a0>)
 80041fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80041fe:	464a      	mov	r2, r9
 8004200:	e9de 0100 	ldrd	r0, r1, [lr]
 8004204:	4653      	mov	r3, sl
 8004206:	f7fc f967 	bl	80004d8 <__aeabi_dmul>
 800420a:	4681      	mov	r9, r0
 800420c:	468a      	mov	sl, r1
 800420e:	e656      	b.n	8003ebe <_strtod_l+0x7e>
 8004210:	4b73      	ldr	r3, [pc, #460]	; (80043e0 <_strtod_l+0x5a0>)
 8004212:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004216:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800421a:	f7fc f95d 	bl	80004d8 <__aeabi_dmul>
 800421e:	4606      	mov	r6, r0
 8004220:	4628      	mov	r0, r5
 8004222:	460f      	mov	r7, r1
 8004224:	f7fc f8de 	bl	80003e4 <__aeabi_ui2d>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4630      	mov	r0, r6
 800422e:	4639      	mov	r1, r7
 8004230:	f7fb ff9c 	bl	800016c <__adddf3>
 8004234:	2c0f      	cmp	r4, #15
 8004236:	4681      	mov	r9, r0
 8004238:	468a      	mov	sl, r1
 800423a:	ddd5      	ble.n	80041e8 <_strtod_l+0x3a8>
 800423c:	9b07      	ldr	r3, [sp, #28]
 800423e:	eba4 0808 	sub.w	r8, r4, r8
 8004242:	4498      	add	r8, r3
 8004244:	f1b8 0f00 	cmp.w	r8, #0
 8004248:	f340 809a 	ble.w	8004380 <_strtod_l+0x540>
 800424c:	f018 030f 	ands.w	r3, r8, #15
 8004250:	d00a      	beq.n	8004268 <_strtod_l+0x428>
 8004252:	4963      	ldr	r1, [pc, #396]	; (80043e0 <_strtod_l+0x5a0>)
 8004254:	464a      	mov	r2, r9
 8004256:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800425a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800425e:	4653      	mov	r3, sl
 8004260:	f7fc f93a 	bl	80004d8 <__aeabi_dmul>
 8004264:	4681      	mov	r9, r0
 8004266:	468a      	mov	sl, r1
 8004268:	f038 080f 	bics.w	r8, r8, #15
 800426c:	d077      	beq.n	800435e <_strtod_l+0x51e>
 800426e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004272:	dd4b      	ble.n	800430c <_strtod_l+0x4cc>
 8004274:	f04f 0800 	mov.w	r8, #0
 8004278:	f8cd 8010 	str.w	r8, [sp, #16]
 800427c:	f8cd 8020 	str.w	r8, [sp, #32]
 8004280:	f8cd 8018 	str.w	r8, [sp, #24]
 8004284:	2322      	movs	r3, #34	; 0x22
 8004286:	f04f 0900 	mov.w	r9, #0
 800428a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80043e8 <_strtod_l+0x5a8>
 800428e:	f8cb 3000 	str.w	r3, [fp]
 8004292:	9b08      	ldr	r3, [sp, #32]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f43f ae12 	beq.w	8003ebe <_strtod_l+0x7e>
 800429a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800429c:	4658      	mov	r0, fp
 800429e:	f001 fe52 	bl	8005f46 <_Bfree>
 80042a2:	9906      	ldr	r1, [sp, #24]
 80042a4:	4658      	mov	r0, fp
 80042a6:	f001 fe4e 	bl	8005f46 <_Bfree>
 80042aa:	9904      	ldr	r1, [sp, #16]
 80042ac:	4658      	mov	r0, fp
 80042ae:	f001 fe4a 	bl	8005f46 <_Bfree>
 80042b2:	9908      	ldr	r1, [sp, #32]
 80042b4:	4658      	mov	r0, fp
 80042b6:	f001 fe46 	bl	8005f46 <_Bfree>
 80042ba:	4641      	mov	r1, r8
 80042bc:	4658      	mov	r0, fp
 80042be:	f001 fe42 	bl	8005f46 <_Bfree>
 80042c2:	e5fc      	b.n	8003ebe <_strtod_l+0x7e>
 80042c4:	9a07      	ldr	r2, [sp, #28]
 80042c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80042ca:	4293      	cmp	r3, r2
 80042cc:	dbb6      	blt.n	800423c <_strtod_l+0x3fc>
 80042ce:	4d44      	ldr	r5, [pc, #272]	; (80043e0 <_strtod_l+0x5a0>)
 80042d0:	f1c4 040f 	rsb	r4, r4, #15
 80042d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80042d8:	464a      	mov	r2, r9
 80042da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042de:	4653      	mov	r3, sl
 80042e0:	f7fc f8fa 	bl	80004d8 <__aeabi_dmul>
 80042e4:	9b07      	ldr	r3, [sp, #28]
 80042e6:	1b1c      	subs	r4, r3, r4
 80042e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80042ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042f0:	e789      	b.n	8004206 <_strtod_l+0x3c6>
 80042f2:	f113 0f16 	cmn.w	r3, #22
 80042f6:	dba1      	blt.n	800423c <_strtod_l+0x3fc>
 80042f8:	4a39      	ldr	r2, [pc, #228]	; (80043e0 <_strtod_l+0x5a0>)
 80042fa:	4648      	mov	r0, r9
 80042fc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004300:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004304:	4651      	mov	r1, sl
 8004306:	f7fc fa11 	bl	800072c <__aeabi_ddiv>
 800430a:	e77e      	b.n	800420a <_strtod_l+0x3ca>
 800430c:	2300      	movs	r3, #0
 800430e:	4648      	mov	r0, r9
 8004310:	4651      	mov	r1, sl
 8004312:	461d      	mov	r5, r3
 8004314:	4e33      	ldr	r6, [pc, #204]	; (80043e4 <_strtod_l+0x5a4>)
 8004316:	ea4f 1828 	mov.w	r8, r8, asr #4
 800431a:	f1b8 0f01 	cmp.w	r8, #1
 800431e:	dc21      	bgt.n	8004364 <_strtod_l+0x524>
 8004320:	b10b      	cbz	r3, 8004326 <_strtod_l+0x4e6>
 8004322:	4681      	mov	r9, r0
 8004324:	468a      	mov	sl, r1
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <_strtod_l+0x5a4>)
 8004328:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800432c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004330:	464a      	mov	r2, r9
 8004332:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004336:	4653      	mov	r3, sl
 8004338:	f7fc f8ce 	bl	80004d8 <__aeabi_dmul>
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <_strtod_l+0x5a8>)
 800433e:	460a      	mov	r2, r1
 8004340:	400b      	ands	r3, r1
 8004342:	492a      	ldr	r1, [pc, #168]	; (80043ec <_strtod_l+0x5ac>)
 8004344:	4681      	mov	r9, r0
 8004346:	428b      	cmp	r3, r1
 8004348:	d894      	bhi.n	8004274 <_strtod_l+0x434>
 800434a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800434e:	428b      	cmp	r3, r1
 8004350:	bf86      	itte	hi
 8004352:	f04f 39ff 	movhi.w	r9, #4294967295
 8004356:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80043f4 <_strtod_l+0x5b4>
 800435a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800435e:	2300      	movs	r3, #0
 8004360:	9305      	str	r3, [sp, #20]
 8004362:	e07b      	b.n	800445c <_strtod_l+0x61c>
 8004364:	f018 0f01 	tst.w	r8, #1
 8004368:	d006      	beq.n	8004378 <_strtod_l+0x538>
 800436a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f7fc f8b1 	bl	80004d8 <__aeabi_dmul>
 8004376:	2301      	movs	r3, #1
 8004378:	3501      	adds	r5, #1
 800437a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800437e:	e7cc      	b.n	800431a <_strtod_l+0x4da>
 8004380:	d0ed      	beq.n	800435e <_strtod_l+0x51e>
 8004382:	f1c8 0800 	rsb	r8, r8, #0
 8004386:	f018 020f 	ands.w	r2, r8, #15
 800438a:	d00a      	beq.n	80043a2 <_strtod_l+0x562>
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <_strtod_l+0x5a0>)
 800438e:	4648      	mov	r0, r9
 8004390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004394:	4651      	mov	r1, sl
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fc f9c7 	bl	800072c <__aeabi_ddiv>
 800439e:	4681      	mov	r9, r0
 80043a0:	468a      	mov	sl, r1
 80043a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80043a6:	d0da      	beq.n	800435e <_strtod_l+0x51e>
 80043a8:	f1b8 0f1f 	cmp.w	r8, #31
 80043ac:	dd24      	ble.n	80043f8 <_strtod_l+0x5b8>
 80043ae:	f04f 0800 	mov.w	r8, #0
 80043b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80043b6:	f8cd 8020 	str.w	r8, [sp, #32]
 80043ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80043be:	2322      	movs	r3, #34	; 0x22
 80043c0:	f04f 0900 	mov.w	r9, #0
 80043c4:	f04f 0a00 	mov.w	sl, #0
 80043c8:	f8cb 3000 	str.w	r3, [fp]
 80043cc:	e761      	b.n	8004292 <_strtod_l+0x452>
 80043ce:	bf00      	nop
 80043d0:	08006c11 	.word	0x08006c11
 80043d4:	08006c9b 	.word	0x08006c9b
 80043d8:	08006c19 	.word	0x08006c19
 80043dc:	08006c5c 	.word	0x08006c5c
 80043e0:	08006cd8 	.word	0x08006cd8
 80043e4:	08006cb0 	.word	0x08006cb0
 80043e8:	7ff00000 	.word	0x7ff00000
 80043ec:	7ca00000 	.word	0x7ca00000
 80043f0:	fff80000 	.word	0xfff80000
 80043f4:	7fefffff 	.word	0x7fefffff
 80043f8:	f018 0310 	ands.w	r3, r8, #16
 80043fc:	bf18      	it	ne
 80043fe:	236a      	movne	r3, #106	; 0x6a
 8004400:	4648      	mov	r0, r9
 8004402:	9305      	str	r3, [sp, #20]
 8004404:	4651      	mov	r1, sl
 8004406:	2300      	movs	r3, #0
 8004408:	4da1      	ldr	r5, [pc, #644]	; (8004690 <_strtod_l+0x850>)
 800440a:	f1b8 0f00 	cmp.w	r8, #0
 800440e:	f300 8113 	bgt.w	8004638 <_strtod_l+0x7f8>
 8004412:	b10b      	cbz	r3, 8004418 <_strtod_l+0x5d8>
 8004414:	4681      	mov	r9, r0
 8004416:	468a      	mov	sl, r1
 8004418:	9b05      	ldr	r3, [sp, #20]
 800441a:	b1bb      	cbz	r3, 800444c <_strtod_l+0x60c>
 800441c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004420:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004424:	2b00      	cmp	r3, #0
 8004426:	4651      	mov	r1, sl
 8004428:	dd10      	ble.n	800444c <_strtod_l+0x60c>
 800442a:	2b1f      	cmp	r3, #31
 800442c:	f340 8110 	ble.w	8004650 <_strtod_l+0x810>
 8004430:	2b34      	cmp	r3, #52	; 0x34
 8004432:	bfd8      	it	le
 8004434:	f04f 32ff 	movle.w	r2, #4294967295
 8004438:	f04f 0900 	mov.w	r9, #0
 800443c:	bfcf      	iteee	gt
 800443e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004442:	3b20      	suble	r3, #32
 8004444:	fa02 f303 	lslle.w	r3, r2, r3
 8004448:	ea03 0a01 	andle.w	sl, r3, r1
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	4648      	mov	r0, r9
 8004452:	4651      	mov	r1, sl
 8004454:	f7fc faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8004458:	2800      	cmp	r0, #0
 800445a:	d1a8      	bne.n	80043ae <_strtod_l+0x56e>
 800445c:	9b06      	ldr	r3, [sp, #24]
 800445e:	9a04      	ldr	r2, [sp, #16]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	9908      	ldr	r1, [sp, #32]
 8004464:	4623      	mov	r3, r4
 8004466:	4658      	mov	r0, fp
 8004468:	f001 fdbf 	bl	8005fea <__s2b>
 800446c:	9008      	str	r0, [sp, #32]
 800446e:	2800      	cmp	r0, #0
 8004470:	f43f af00 	beq.w	8004274 <_strtod_l+0x434>
 8004474:	9a07      	ldr	r2, [sp, #28]
 8004476:	9b07      	ldr	r3, [sp, #28]
 8004478:	2a00      	cmp	r2, #0
 800447a:	f1c3 0300 	rsb	r3, r3, #0
 800447e:	bfa8      	it	ge
 8004480:	2300      	movge	r3, #0
 8004482:	f04f 0800 	mov.w	r8, #0
 8004486:	930e      	str	r3, [sp, #56]	; 0x38
 8004488:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800448c:	9316      	str	r3, [sp, #88]	; 0x58
 800448e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004492:	9b08      	ldr	r3, [sp, #32]
 8004494:	4658      	mov	r0, fp
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	f001 fd21 	bl	8005ede <_Balloc>
 800449c:	9006      	str	r0, [sp, #24]
 800449e:	2800      	cmp	r0, #0
 80044a0:	f43f aef0 	beq.w	8004284 <_strtod_l+0x444>
 80044a4:	9b08      	ldr	r3, [sp, #32]
 80044a6:	300c      	adds	r0, #12
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	f103 010c 	add.w	r1, r3, #12
 80044ae:	3202      	adds	r2, #2
 80044b0:	0092      	lsls	r2, r2, #2
 80044b2:	f001 fd09 	bl	8005ec8 <memcpy>
 80044b6:	ab1e      	add	r3, sp, #120	; 0x78
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	ab1d      	add	r3, sp, #116	; 0x74
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	464a      	mov	r2, r9
 80044c0:	4653      	mov	r3, sl
 80044c2:	4658      	mov	r0, fp
 80044c4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80044c8:	f002 f84a 	bl	8006560 <__d2b>
 80044cc:	901c      	str	r0, [sp, #112]	; 0x70
 80044ce:	2800      	cmp	r0, #0
 80044d0:	f43f aed8 	beq.w	8004284 <_strtod_l+0x444>
 80044d4:	2101      	movs	r1, #1
 80044d6:	4658      	mov	r0, fp
 80044d8:	f001 fe13 	bl	8006102 <__i2b>
 80044dc:	9004      	str	r0, [sp, #16]
 80044de:	4603      	mov	r3, r0
 80044e0:	2800      	cmp	r0, #0
 80044e2:	f43f aecf 	beq.w	8004284 <_strtod_l+0x444>
 80044e6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80044e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	bfab      	itete	ge
 80044ee:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80044f0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80044f2:	18ee      	addge	r6, r5, r3
 80044f4:	1b5c      	sublt	r4, r3, r5
 80044f6:	9b05      	ldr	r3, [sp, #20]
 80044f8:	bfa8      	it	ge
 80044fa:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80044fc:	eba5 0503 	sub.w	r5, r5, r3
 8004500:	4415      	add	r5, r2
 8004502:	4b64      	ldr	r3, [pc, #400]	; (8004694 <_strtod_l+0x854>)
 8004504:	f105 35ff 	add.w	r5, r5, #4294967295
 8004508:	bfb8      	it	lt
 800450a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800450c:	429d      	cmp	r5, r3
 800450e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004512:	f280 80af 	bge.w	8004674 <_strtod_l+0x834>
 8004516:	1b5b      	subs	r3, r3, r5
 8004518:	2b1f      	cmp	r3, #31
 800451a:	eba2 0203 	sub.w	r2, r2, r3
 800451e:	f04f 0701 	mov.w	r7, #1
 8004522:	f300 809c 	bgt.w	800465e <_strtod_l+0x81e>
 8004526:	2500      	movs	r5, #0
 8004528:	fa07 f303 	lsl.w	r3, r7, r3
 800452c:	930f      	str	r3, [sp, #60]	; 0x3c
 800452e:	18b7      	adds	r7, r6, r2
 8004530:	9b05      	ldr	r3, [sp, #20]
 8004532:	42be      	cmp	r6, r7
 8004534:	4414      	add	r4, r2
 8004536:	441c      	add	r4, r3
 8004538:	4633      	mov	r3, r6
 800453a:	bfa8      	it	ge
 800453c:	463b      	movge	r3, r7
 800453e:	42a3      	cmp	r3, r4
 8004540:	bfa8      	it	ge
 8004542:	4623      	movge	r3, r4
 8004544:	2b00      	cmp	r3, #0
 8004546:	bfc2      	ittt	gt
 8004548:	1aff      	subgt	r7, r7, r3
 800454a:	1ae4      	subgt	r4, r4, r3
 800454c:	1af6      	subgt	r6, r6, r3
 800454e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004550:	b1bb      	cbz	r3, 8004582 <_strtod_l+0x742>
 8004552:	461a      	mov	r2, r3
 8004554:	9904      	ldr	r1, [sp, #16]
 8004556:	4658      	mov	r0, fp
 8004558:	f001 fe72 	bl	8006240 <__pow5mult>
 800455c:	9004      	str	r0, [sp, #16]
 800455e:	2800      	cmp	r0, #0
 8004560:	f43f ae90 	beq.w	8004284 <_strtod_l+0x444>
 8004564:	4601      	mov	r1, r0
 8004566:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004568:	4658      	mov	r0, fp
 800456a:	f001 fdd3 	bl	8006114 <__multiply>
 800456e:	9009      	str	r0, [sp, #36]	; 0x24
 8004570:	2800      	cmp	r0, #0
 8004572:	f43f ae87 	beq.w	8004284 <_strtod_l+0x444>
 8004576:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004578:	4658      	mov	r0, fp
 800457a:	f001 fce4 	bl	8005f46 <_Bfree>
 800457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004580:	931c      	str	r3, [sp, #112]	; 0x70
 8004582:	2f00      	cmp	r7, #0
 8004584:	dc7a      	bgt.n	800467c <_strtod_l+0x83c>
 8004586:	9b07      	ldr	r3, [sp, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	dd08      	ble.n	800459e <_strtod_l+0x75e>
 800458c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800458e:	9906      	ldr	r1, [sp, #24]
 8004590:	4658      	mov	r0, fp
 8004592:	f001 fe55 	bl	8006240 <__pow5mult>
 8004596:	9006      	str	r0, [sp, #24]
 8004598:	2800      	cmp	r0, #0
 800459a:	f43f ae73 	beq.w	8004284 <_strtod_l+0x444>
 800459e:	2c00      	cmp	r4, #0
 80045a0:	dd08      	ble.n	80045b4 <_strtod_l+0x774>
 80045a2:	4622      	mov	r2, r4
 80045a4:	9906      	ldr	r1, [sp, #24]
 80045a6:	4658      	mov	r0, fp
 80045a8:	f001 fe98 	bl	80062dc <__lshift>
 80045ac:	9006      	str	r0, [sp, #24]
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f43f ae68 	beq.w	8004284 <_strtod_l+0x444>
 80045b4:	2e00      	cmp	r6, #0
 80045b6:	dd08      	ble.n	80045ca <_strtod_l+0x78a>
 80045b8:	4632      	mov	r2, r6
 80045ba:	9904      	ldr	r1, [sp, #16]
 80045bc:	4658      	mov	r0, fp
 80045be:	f001 fe8d 	bl	80062dc <__lshift>
 80045c2:	9004      	str	r0, [sp, #16]
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f43f ae5d 	beq.w	8004284 <_strtod_l+0x444>
 80045ca:	9a06      	ldr	r2, [sp, #24]
 80045cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80045ce:	4658      	mov	r0, fp
 80045d0:	f001 fef2 	bl	80063b8 <__mdiff>
 80045d4:	4680      	mov	r8, r0
 80045d6:	2800      	cmp	r0, #0
 80045d8:	f43f ae54 	beq.w	8004284 <_strtod_l+0x444>
 80045dc:	2400      	movs	r4, #0
 80045de:	68c3      	ldr	r3, [r0, #12]
 80045e0:	9904      	ldr	r1, [sp, #16]
 80045e2:	60c4      	str	r4, [r0, #12]
 80045e4:	930c      	str	r3, [sp, #48]	; 0x30
 80045e6:	f001 fecd 	bl	8006384 <__mcmp>
 80045ea:	42a0      	cmp	r0, r4
 80045ec:	da54      	bge.n	8004698 <_strtod_l+0x858>
 80045ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045f0:	b9f3      	cbnz	r3, 8004630 <_strtod_l+0x7f0>
 80045f2:	f1b9 0f00 	cmp.w	r9, #0
 80045f6:	d11b      	bne.n	8004630 <_strtod_l+0x7f0>
 80045f8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80045fc:	b9c3      	cbnz	r3, 8004630 <_strtod_l+0x7f0>
 80045fe:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004602:	0d1b      	lsrs	r3, r3, #20
 8004604:	051b      	lsls	r3, r3, #20
 8004606:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800460a:	d911      	bls.n	8004630 <_strtod_l+0x7f0>
 800460c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004610:	b91b      	cbnz	r3, 800461a <_strtod_l+0x7da>
 8004612:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004616:	2b01      	cmp	r3, #1
 8004618:	dd0a      	ble.n	8004630 <_strtod_l+0x7f0>
 800461a:	4641      	mov	r1, r8
 800461c:	2201      	movs	r2, #1
 800461e:	4658      	mov	r0, fp
 8004620:	f001 fe5c 	bl	80062dc <__lshift>
 8004624:	9904      	ldr	r1, [sp, #16]
 8004626:	4680      	mov	r8, r0
 8004628:	f001 feac 	bl	8006384 <__mcmp>
 800462c:	2800      	cmp	r0, #0
 800462e:	dc68      	bgt.n	8004702 <_strtod_l+0x8c2>
 8004630:	9b05      	ldr	r3, [sp, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d172      	bne.n	800471c <_strtod_l+0x8dc>
 8004636:	e630      	b.n	800429a <_strtod_l+0x45a>
 8004638:	f018 0f01 	tst.w	r8, #1
 800463c:	d004      	beq.n	8004648 <_strtod_l+0x808>
 800463e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004642:	f7fb ff49 	bl	80004d8 <__aeabi_dmul>
 8004646:	2301      	movs	r3, #1
 8004648:	ea4f 0868 	mov.w	r8, r8, asr #1
 800464c:	3508      	adds	r5, #8
 800464e:	e6dc      	b.n	800440a <_strtod_l+0x5ca>
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	ea03 0909 	and.w	r9, r3, r9
 800465c:	e6f6      	b.n	800444c <_strtod_l+0x60c>
 800465e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004662:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004666:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800466a:	35e2      	adds	r5, #226	; 0xe2
 800466c:	fa07 f505 	lsl.w	r5, r7, r5
 8004670:	970f      	str	r7, [sp, #60]	; 0x3c
 8004672:	e75c      	b.n	800452e <_strtod_l+0x6ee>
 8004674:	2301      	movs	r3, #1
 8004676:	2500      	movs	r5, #0
 8004678:	930f      	str	r3, [sp, #60]	; 0x3c
 800467a:	e758      	b.n	800452e <_strtod_l+0x6ee>
 800467c:	463a      	mov	r2, r7
 800467e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004680:	4658      	mov	r0, fp
 8004682:	f001 fe2b 	bl	80062dc <__lshift>
 8004686:	901c      	str	r0, [sp, #112]	; 0x70
 8004688:	2800      	cmp	r0, #0
 800468a:	f47f af7c 	bne.w	8004586 <_strtod_l+0x746>
 800468e:	e5f9      	b.n	8004284 <_strtod_l+0x444>
 8004690:	08006c70 	.word	0x08006c70
 8004694:	fffffc02 	.word	0xfffffc02
 8004698:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800469c:	f040 8089 	bne.w	80047b2 <_strtod_l+0x972>
 80046a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046a2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80046a6:	b342      	cbz	r2, 80046fa <_strtod_l+0x8ba>
 80046a8:	4aaf      	ldr	r2, [pc, #700]	; (8004968 <_strtod_l+0xb28>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d156      	bne.n	800475c <_strtod_l+0x91c>
 80046ae:	9b05      	ldr	r3, [sp, #20]
 80046b0:	4648      	mov	r0, r9
 80046b2:	b1eb      	cbz	r3, 80046f0 <_strtod_l+0x8b0>
 80046b4:	4653      	mov	r3, sl
 80046b6:	4aad      	ldr	r2, [pc, #692]	; (800496c <_strtod_l+0xb2c>)
 80046b8:	f04f 31ff 	mov.w	r1, #4294967295
 80046bc:	401a      	ands	r2, r3
 80046be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80046c2:	d818      	bhi.n	80046f6 <_strtod_l+0x8b6>
 80046c4:	0d12      	lsrs	r2, r2, #20
 80046c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80046ca:	fa01 f303 	lsl.w	r3, r1, r3
 80046ce:	4298      	cmp	r0, r3
 80046d0:	d144      	bne.n	800475c <_strtod_l+0x91c>
 80046d2:	4ba7      	ldr	r3, [pc, #668]	; (8004970 <_strtod_l+0xb30>)
 80046d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d102      	bne.n	80046e0 <_strtod_l+0x8a0>
 80046da:	3001      	adds	r0, #1
 80046dc:	f43f add2 	beq.w	8004284 <_strtod_l+0x444>
 80046e0:	4ba2      	ldr	r3, [pc, #648]	; (800496c <_strtod_l+0xb2c>)
 80046e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046e4:	f04f 0900 	mov.w	r9, #0
 80046e8:	401a      	ands	r2, r3
 80046ea:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80046ee:	e79f      	b.n	8004630 <_strtod_l+0x7f0>
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295
 80046f4:	e7eb      	b.n	80046ce <_strtod_l+0x88e>
 80046f6:	460b      	mov	r3, r1
 80046f8:	e7e9      	b.n	80046ce <_strtod_l+0x88e>
 80046fa:	bb7b      	cbnz	r3, 800475c <_strtod_l+0x91c>
 80046fc:	f1b9 0f00 	cmp.w	r9, #0
 8004700:	d12c      	bne.n	800475c <_strtod_l+0x91c>
 8004702:	9905      	ldr	r1, [sp, #20]
 8004704:	4653      	mov	r3, sl
 8004706:	4a99      	ldr	r2, [pc, #612]	; (800496c <_strtod_l+0xb2c>)
 8004708:	b1f1      	cbz	r1, 8004748 <_strtod_l+0x908>
 800470a:	ea02 010a 	and.w	r1, r2, sl
 800470e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004712:	dc19      	bgt.n	8004748 <_strtod_l+0x908>
 8004714:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004718:	f77f ae51 	ble.w	80043be <_strtod_l+0x57e>
 800471c:	2300      	movs	r3, #0
 800471e:	4a95      	ldr	r2, [pc, #596]	; (8004974 <_strtod_l+0xb34>)
 8004720:	4648      	mov	r0, r9
 8004722:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004726:	4651      	mov	r1, sl
 8004728:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800472c:	f7fb fed4 	bl	80004d8 <__aeabi_dmul>
 8004730:	4681      	mov	r9, r0
 8004732:	468a      	mov	sl, r1
 8004734:	2900      	cmp	r1, #0
 8004736:	f47f adb0 	bne.w	800429a <_strtod_l+0x45a>
 800473a:	2800      	cmp	r0, #0
 800473c:	f47f adad 	bne.w	800429a <_strtod_l+0x45a>
 8004740:	2322      	movs	r3, #34	; 0x22
 8004742:	f8cb 3000 	str.w	r3, [fp]
 8004746:	e5a8      	b.n	800429a <_strtod_l+0x45a>
 8004748:	4013      	ands	r3, r2
 800474a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800474e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004752:	f04f 39ff 	mov.w	r9, #4294967295
 8004756:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800475a:	e769      	b.n	8004630 <_strtod_l+0x7f0>
 800475c:	b19d      	cbz	r5, 8004786 <_strtod_l+0x946>
 800475e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004760:	421d      	tst	r5, r3
 8004762:	f43f af65 	beq.w	8004630 <_strtod_l+0x7f0>
 8004766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004768:	9a05      	ldr	r2, [sp, #20]
 800476a:	4648      	mov	r0, r9
 800476c:	4651      	mov	r1, sl
 800476e:	b173      	cbz	r3, 800478e <_strtod_l+0x94e>
 8004770:	f7ff fb44 	bl	8003dfc <sulp>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800477c:	f7fb fcf6 	bl	800016c <__adddf3>
 8004780:	4681      	mov	r9, r0
 8004782:	468a      	mov	sl, r1
 8004784:	e754      	b.n	8004630 <_strtod_l+0x7f0>
 8004786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004788:	ea13 0f09 	tst.w	r3, r9
 800478c:	e7e9      	b.n	8004762 <_strtod_l+0x922>
 800478e:	f7ff fb35 	bl	8003dfc <sulp>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800479a:	f7fb fce5 	bl	8000168 <__aeabi_dsub>
 800479e:	2200      	movs	r2, #0
 80047a0:	2300      	movs	r3, #0
 80047a2:	4681      	mov	r9, r0
 80047a4:	468a      	mov	sl, r1
 80047a6:	f7fc f8ff 	bl	80009a8 <__aeabi_dcmpeq>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	f47f ae07 	bne.w	80043be <_strtod_l+0x57e>
 80047b0:	e73e      	b.n	8004630 <_strtod_l+0x7f0>
 80047b2:	9904      	ldr	r1, [sp, #16]
 80047b4:	4640      	mov	r0, r8
 80047b6:	f001 ff22 	bl	80065fe <__ratio>
 80047ba:	2200      	movs	r2, #0
 80047bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047c0:	4606      	mov	r6, r0
 80047c2:	460f      	mov	r7, r1
 80047c4:	f7fc f904 	bl	80009d0 <__aeabi_dcmple>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d075      	beq.n	80048b8 <_strtod_l+0xa78>
 80047cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d047      	beq.n	8004862 <_strtod_l+0xa22>
 80047d2:	2600      	movs	r6, #0
 80047d4:	4f68      	ldr	r7, [pc, #416]	; (8004978 <_strtod_l+0xb38>)
 80047d6:	4d68      	ldr	r5, [pc, #416]	; (8004978 <_strtod_l+0xb38>)
 80047d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047de:	0d1b      	lsrs	r3, r3, #20
 80047e0:	051b      	lsls	r3, r3, #20
 80047e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80047e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80047e6:	4b65      	ldr	r3, [pc, #404]	; (800497c <_strtod_l+0xb3c>)
 80047e8:	429a      	cmp	r2, r3
 80047ea:	f040 80cf 	bne.w	800498c <_strtod_l+0xb4c>
 80047ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80047f2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80047f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f8:	4648      	mov	r0, r9
 80047fa:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80047fe:	4651      	mov	r1, sl
 8004800:	f001 fe38 	bl	8006474 <__ulp>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4630      	mov	r0, r6
 800480a:	4639      	mov	r1, r7
 800480c:	f7fb fe64 	bl	80004d8 <__aeabi_dmul>
 8004810:	464a      	mov	r2, r9
 8004812:	4653      	mov	r3, sl
 8004814:	f7fb fcaa 	bl	800016c <__adddf3>
 8004818:	460b      	mov	r3, r1
 800481a:	4954      	ldr	r1, [pc, #336]	; (800496c <_strtod_l+0xb2c>)
 800481c:	4a58      	ldr	r2, [pc, #352]	; (8004980 <_strtod_l+0xb40>)
 800481e:	4019      	ands	r1, r3
 8004820:	4291      	cmp	r1, r2
 8004822:	4681      	mov	r9, r0
 8004824:	d95e      	bls.n	80048e4 <_strtod_l+0xaa4>
 8004826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004828:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800482c:	4293      	cmp	r3, r2
 800482e:	d103      	bne.n	8004838 <_strtod_l+0x9f8>
 8004830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004832:	3301      	adds	r3, #1
 8004834:	f43f ad26 	beq.w	8004284 <_strtod_l+0x444>
 8004838:	f04f 39ff 	mov.w	r9, #4294967295
 800483c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004970 <_strtod_l+0xb30>
 8004840:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004842:	4658      	mov	r0, fp
 8004844:	f001 fb7f 	bl	8005f46 <_Bfree>
 8004848:	9906      	ldr	r1, [sp, #24]
 800484a:	4658      	mov	r0, fp
 800484c:	f001 fb7b 	bl	8005f46 <_Bfree>
 8004850:	9904      	ldr	r1, [sp, #16]
 8004852:	4658      	mov	r0, fp
 8004854:	f001 fb77 	bl	8005f46 <_Bfree>
 8004858:	4641      	mov	r1, r8
 800485a:	4658      	mov	r0, fp
 800485c:	f001 fb73 	bl	8005f46 <_Bfree>
 8004860:	e617      	b.n	8004492 <_strtod_l+0x652>
 8004862:	f1b9 0f00 	cmp.w	r9, #0
 8004866:	d119      	bne.n	800489c <_strtod_l+0xa5c>
 8004868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800486a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800486e:	b9e3      	cbnz	r3, 80048aa <_strtod_l+0xa6a>
 8004870:	2200      	movs	r2, #0
 8004872:	4b41      	ldr	r3, [pc, #260]	; (8004978 <_strtod_l+0xb38>)
 8004874:	4630      	mov	r0, r6
 8004876:	4639      	mov	r1, r7
 8004878:	f7fc f8a0 	bl	80009bc <__aeabi_dcmplt>
 800487c:	b9c8      	cbnz	r0, 80048b2 <_strtod_l+0xa72>
 800487e:	2200      	movs	r2, #0
 8004880:	4b40      	ldr	r3, [pc, #256]	; (8004984 <_strtod_l+0xb44>)
 8004882:	4630      	mov	r0, r6
 8004884:	4639      	mov	r1, r7
 8004886:	f7fb fe27 	bl	80004d8 <__aeabi_dmul>
 800488a:	4604      	mov	r4, r0
 800488c:	460d      	mov	r5, r1
 800488e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004892:	9418      	str	r4, [sp, #96]	; 0x60
 8004894:	9319      	str	r3, [sp, #100]	; 0x64
 8004896:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800489a:	e79d      	b.n	80047d8 <_strtod_l+0x998>
 800489c:	f1b9 0f01 	cmp.w	r9, #1
 80048a0:	d103      	bne.n	80048aa <_strtod_l+0xa6a>
 80048a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f43f ad8a 	beq.w	80043be <_strtod_l+0x57e>
 80048aa:	2600      	movs	r6, #0
 80048ac:	4f36      	ldr	r7, [pc, #216]	; (8004988 <_strtod_l+0xb48>)
 80048ae:	2400      	movs	r4, #0
 80048b0:	e791      	b.n	80047d6 <_strtod_l+0x996>
 80048b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80048b4:	4d33      	ldr	r5, [pc, #204]	; (8004984 <_strtod_l+0xb44>)
 80048b6:	e7ea      	b.n	800488e <_strtod_l+0xa4e>
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <_strtod_l+0xb44>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	4630      	mov	r0, r6
 80048be:	4639      	mov	r1, r7
 80048c0:	f7fb fe0a 	bl	80004d8 <__aeabi_dmul>
 80048c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048c6:	4604      	mov	r4, r0
 80048c8:	460d      	mov	r5, r1
 80048ca:	b933      	cbnz	r3, 80048da <_strtod_l+0xa9a>
 80048cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048d0:	9010      	str	r0, [sp, #64]	; 0x40
 80048d2:	9311      	str	r3, [sp, #68]	; 0x44
 80048d4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80048d8:	e77e      	b.n	80047d8 <_strtod_l+0x998>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80048e2:	e7f7      	b.n	80048d4 <_strtod_l+0xa94>
 80048e4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80048e8:	9b05      	ldr	r3, [sp, #20]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1a8      	bne.n	8004840 <_strtod_l+0xa00>
 80048ee:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80048f2:	0d1b      	lsrs	r3, r3, #20
 80048f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048f6:	051b      	lsls	r3, r3, #20
 80048f8:	429a      	cmp	r2, r3
 80048fa:	4656      	mov	r6, sl
 80048fc:	d1a0      	bne.n	8004840 <_strtod_l+0xa00>
 80048fe:	4629      	mov	r1, r5
 8004900:	4620      	mov	r0, r4
 8004902:	f7fc f899 	bl	8000a38 <__aeabi_d2iz>
 8004906:	f7fb fd7d 	bl	8000404 <__aeabi_i2d>
 800490a:	460b      	mov	r3, r1
 800490c:	4602      	mov	r2, r0
 800490e:	4629      	mov	r1, r5
 8004910:	4620      	mov	r0, r4
 8004912:	f7fb fc29 	bl	8000168 <__aeabi_dsub>
 8004916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004918:	4604      	mov	r4, r0
 800491a:	460d      	mov	r5, r1
 800491c:	b933      	cbnz	r3, 800492c <_strtod_l+0xaec>
 800491e:	f1b9 0f00 	cmp.w	r9, #0
 8004922:	d103      	bne.n	800492c <_strtod_l+0xaec>
 8004924:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004928:	2e00      	cmp	r6, #0
 800492a:	d06a      	beq.n	8004a02 <_strtod_l+0xbc2>
 800492c:	a30a      	add	r3, pc, #40	; (adr r3, 8004958 <_strtod_l+0xb18>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f7fc f841 	bl	80009bc <__aeabi_dcmplt>
 800493a:	2800      	cmp	r0, #0
 800493c:	f47f acad 	bne.w	800429a <_strtod_l+0x45a>
 8004940:	a307      	add	r3, pc, #28	; (adr r3, 8004960 <_strtod_l+0xb20>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	4620      	mov	r0, r4
 8004948:	4629      	mov	r1, r5
 800494a:	f7fc f855 	bl	80009f8 <__aeabi_dcmpgt>
 800494e:	2800      	cmp	r0, #0
 8004950:	f43f af76 	beq.w	8004840 <_strtod_l+0xa00>
 8004954:	e4a1      	b.n	800429a <_strtod_l+0x45a>
 8004956:	bf00      	nop
 8004958:	94a03595 	.word	0x94a03595
 800495c:	3fdfffff 	.word	0x3fdfffff
 8004960:	35afe535 	.word	0x35afe535
 8004964:	3fe00000 	.word	0x3fe00000
 8004968:	000fffff 	.word	0x000fffff
 800496c:	7ff00000 	.word	0x7ff00000
 8004970:	7fefffff 	.word	0x7fefffff
 8004974:	39500000 	.word	0x39500000
 8004978:	3ff00000 	.word	0x3ff00000
 800497c:	7fe00000 	.word	0x7fe00000
 8004980:	7c9fffff 	.word	0x7c9fffff
 8004984:	3fe00000 	.word	0x3fe00000
 8004988:	bff00000 	.word	0xbff00000
 800498c:	9b05      	ldr	r3, [sp, #20]
 800498e:	b313      	cbz	r3, 80049d6 <_strtod_l+0xb96>
 8004990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004992:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004996:	d81e      	bhi.n	80049d6 <_strtod_l+0xb96>
 8004998:	a325      	add	r3, pc, #148	; (adr r3, 8004a30 <_strtod_l+0xbf0>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	4620      	mov	r0, r4
 80049a0:	4629      	mov	r1, r5
 80049a2:	f7fc f815 	bl	80009d0 <__aeabi_dcmple>
 80049a6:	b190      	cbz	r0, 80049ce <_strtod_l+0xb8e>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4620      	mov	r0, r4
 80049ac:	f7fc f86c 	bl	8000a88 <__aeabi_d2uiz>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	bf08      	it	eq
 80049b4:	2001      	moveq	r0, #1
 80049b6:	f7fb fd15 	bl	80003e4 <__aeabi_ui2d>
 80049ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049bc:	4604      	mov	r4, r0
 80049be:	460d      	mov	r5, r1
 80049c0:	b9d3      	cbnz	r3, 80049f8 <_strtod_l+0xbb8>
 80049c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049c6:	9012      	str	r0, [sp, #72]	; 0x48
 80049c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80049ca:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80049ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049d0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80049d4:	1a9f      	subs	r7, r3, r2
 80049d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049da:	f001 fd4b 	bl	8006474 <__ulp>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4630      	mov	r0, r6
 80049e4:	4639      	mov	r1, r7
 80049e6:	f7fb fd77 	bl	80004d8 <__aeabi_dmul>
 80049ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049ee:	f7fb fbbd 	bl	800016c <__adddf3>
 80049f2:	4681      	mov	r9, r0
 80049f4:	468a      	mov	sl, r1
 80049f6:	e777      	b.n	80048e8 <_strtod_l+0xaa8>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004a00:	e7e3      	b.n	80049ca <_strtod_l+0xb8a>
 8004a02:	a30d      	add	r3, pc, #52	; (adr r3, 8004a38 <_strtod_l+0xbf8>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f7fb ffd8 	bl	80009bc <__aeabi_dcmplt>
 8004a0c:	e79f      	b.n	800494e <_strtod_l+0xb0e>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	930d      	str	r3, [sp, #52]	; 0x34
 8004a12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	f7ff ba55 	b.w	8003ec6 <_strtod_l+0x86>
 8004a1c:	2b65      	cmp	r3, #101	; 0x65
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f43f ab42 	beq.w	80040aa <_strtod_l+0x26a>
 8004a26:	2101      	movs	r1, #1
 8004a28:	4614      	mov	r4, r2
 8004a2a:	9105      	str	r1, [sp, #20]
 8004a2c:	f7ff babf 	b.w	8003fae <_strtod_l+0x16e>
 8004a30:	ffc00000 	.word	0xffc00000
 8004a34:	41dfffff 	.word	0x41dfffff
 8004a38:	94a03595 	.word	0x94a03595
 8004a3c:	3fcfffff 	.word	0x3fcfffff

08004a40 <_strtod_r>:
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <_strtod_r+0x18>)
 8004a42:	b410      	push	{r4}
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4c05      	ldr	r4, [pc, #20]	; (8004a5c <_strtod_r+0x1c>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf08      	it	eq
 8004a4e:	4623      	moveq	r3, r4
 8004a50:	bc10      	pop	{r4}
 8004a52:	f7ff b9f5 	b.w	8003e40 <_strtod_l>
 8004a56:	bf00      	nop
 8004a58:	20000010 	.word	0x20000010
 8004a5c:	20000074 	.word	0x20000074

08004a60 <_strtol_l.isra.0>:
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	4680      	mov	r8, r0
 8004a66:	4689      	mov	r9, r1
 8004a68:	4692      	mov	sl, r2
 8004a6a:	461e      	mov	r6, r3
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	463d      	mov	r5, r7
 8004a70:	9808      	ldr	r0, [sp, #32]
 8004a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a76:	f001 f9eb 	bl	8005e50 <__locale_ctype_ptr_l>
 8004a7a:	4420      	add	r0, r4
 8004a7c:	7843      	ldrb	r3, [r0, #1]
 8004a7e:	f013 0308 	ands.w	r3, r3, #8
 8004a82:	d132      	bne.n	8004aea <_strtol_l.isra.0+0x8a>
 8004a84:	2c2d      	cmp	r4, #45	; 0x2d
 8004a86:	d132      	bne.n	8004aee <_strtol_l.isra.0+0x8e>
 8004a88:	2201      	movs	r2, #1
 8004a8a:	787c      	ldrb	r4, [r7, #1]
 8004a8c:	1cbd      	adds	r5, r7, #2
 8004a8e:	2e00      	cmp	r6, #0
 8004a90:	d05d      	beq.n	8004b4e <_strtol_l.isra.0+0xee>
 8004a92:	2e10      	cmp	r6, #16
 8004a94:	d109      	bne.n	8004aaa <_strtol_l.isra.0+0x4a>
 8004a96:	2c30      	cmp	r4, #48	; 0x30
 8004a98:	d107      	bne.n	8004aaa <_strtol_l.isra.0+0x4a>
 8004a9a:	782b      	ldrb	r3, [r5, #0]
 8004a9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004aa0:	2b58      	cmp	r3, #88	; 0x58
 8004aa2:	d14f      	bne.n	8004b44 <_strtol_l.isra.0+0xe4>
 8004aa4:	2610      	movs	r6, #16
 8004aa6:	786c      	ldrb	r4, [r5, #1]
 8004aa8:	3502      	adds	r5, #2
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	bf14      	ite	ne
 8004aae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004ab2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004ab6:	2700      	movs	r7, #0
 8004ab8:	fbb1 fcf6 	udiv	ip, r1, r6
 8004abc:	4638      	mov	r0, r7
 8004abe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004ac2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004ac6:	2b09      	cmp	r3, #9
 8004ac8:	d817      	bhi.n	8004afa <_strtol_l.isra.0+0x9a>
 8004aca:	461c      	mov	r4, r3
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	dd23      	ble.n	8004b18 <_strtol_l.isra.0+0xb8>
 8004ad0:	1c7b      	adds	r3, r7, #1
 8004ad2:	d007      	beq.n	8004ae4 <_strtol_l.isra.0+0x84>
 8004ad4:	4584      	cmp	ip, r0
 8004ad6:	d31c      	bcc.n	8004b12 <_strtol_l.isra.0+0xb2>
 8004ad8:	d101      	bne.n	8004ade <_strtol_l.isra.0+0x7e>
 8004ada:	45a6      	cmp	lr, r4
 8004adc:	db19      	blt.n	8004b12 <_strtol_l.isra.0+0xb2>
 8004ade:	2701      	movs	r7, #1
 8004ae0:	fb00 4006 	mla	r0, r0, r6, r4
 8004ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ae8:	e7eb      	b.n	8004ac2 <_strtol_l.isra.0+0x62>
 8004aea:	462f      	mov	r7, r5
 8004aec:	e7bf      	b.n	8004a6e <_strtol_l.isra.0+0xe>
 8004aee:	2c2b      	cmp	r4, #43	; 0x2b
 8004af0:	bf04      	itt	eq
 8004af2:	1cbd      	addeq	r5, r7, #2
 8004af4:	787c      	ldrbeq	r4, [r7, #1]
 8004af6:	461a      	mov	r2, r3
 8004af8:	e7c9      	b.n	8004a8e <_strtol_l.isra.0+0x2e>
 8004afa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004afe:	2b19      	cmp	r3, #25
 8004b00:	d801      	bhi.n	8004b06 <_strtol_l.isra.0+0xa6>
 8004b02:	3c37      	subs	r4, #55	; 0x37
 8004b04:	e7e2      	b.n	8004acc <_strtol_l.isra.0+0x6c>
 8004b06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004b0a:	2b19      	cmp	r3, #25
 8004b0c:	d804      	bhi.n	8004b18 <_strtol_l.isra.0+0xb8>
 8004b0e:	3c57      	subs	r4, #87	; 0x57
 8004b10:	e7dc      	b.n	8004acc <_strtol_l.isra.0+0x6c>
 8004b12:	f04f 37ff 	mov.w	r7, #4294967295
 8004b16:	e7e5      	b.n	8004ae4 <_strtol_l.isra.0+0x84>
 8004b18:	1c7b      	adds	r3, r7, #1
 8004b1a:	d108      	bne.n	8004b2e <_strtol_l.isra.0+0xce>
 8004b1c:	2322      	movs	r3, #34	; 0x22
 8004b1e:	4608      	mov	r0, r1
 8004b20:	f8c8 3000 	str.w	r3, [r8]
 8004b24:	f1ba 0f00 	cmp.w	sl, #0
 8004b28:	d107      	bne.n	8004b3a <_strtol_l.isra.0+0xda>
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	b102      	cbz	r2, 8004b32 <_strtol_l.isra.0+0xd2>
 8004b30:	4240      	negs	r0, r0
 8004b32:	f1ba 0f00 	cmp.w	sl, #0
 8004b36:	d0f8      	beq.n	8004b2a <_strtol_l.isra.0+0xca>
 8004b38:	b10f      	cbz	r7, 8004b3e <_strtol_l.isra.0+0xde>
 8004b3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8004b3e:	f8ca 9000 	str.w	r9, [sl]
 8004b42:	e7f2      	b.n	8004b2a <_strtol_l.isra.0+0xca>
 8004b44:	2430      	movs	r4, #48	; 0x30
 8004b46:	2e00      	cmp	r6, #0
 8004b48:	d1af      	bne.n	8004aaa <_strtol_l.isra.0+0x4a>
 8004b4a:	2608      	movs	r6, #8
 8004b4c:	e7ad      	b.n	8004aaa <_strtol_l.isra.0+0x4a>
 8004b4e:	2c30      	cmp	r4, #48	; 0x30
 8004b50:	d0a3      	beq.n	8004a9a <_strtol_l.isra.0+0x3a>
 8004b52:	260a      	movs	r6, #10
 8004b54:	e7a9      	b.n	8004aaa <_strtol_l.isra.0+0x4a>
	...

08004b58 <_strtol_r>:
 8004b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b5a:	4c06      	ldr	r4, [pc, #24]	; (8004b74 <_strtol_r+0x1c>)
 8004b5c:	4d06      	ldr	r5, [pc, #24]	; (8004b78 <_strtol_r+0x20>)
 8004b5e:	6824      	ldr	r4, [r4, #0]
 8004b60:	6a24      	ldr	r4, [r4, #32]
 8004b62:	2c00      	cmp	r4, #0
 8004b64:	bf08      	it	eq
 8004b66:	462c      	moveq	r4, r5
 8004b68:	9400      	str	r4, [sp, #0]
 8004b6a:	f7ff ff79 	bl	8004a60 <_strtol_l.isra.0>
 8004b6e:	b003      	add	sp, #12
 8004b70:	bd30      	pop	{r4, r5, pc}
 8004b72:	bf00      	nop
 8004b74:	20000010 	.word	0x20000010
 8004b78:	20000074 	.word	0x20000074

08004b7c <quorem>:
 8004b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b80:	6903      	ldr	r3, [r0, #16]
 8004b82:	690c      	ldr	r4, [r1, #16]
 8004b84:	4680      	mov	r8, r0
 8004b86:	42a3      	cmp	r3, r4
 8004b88:	f2c0 8084 	blt.w	8004c94 <quorem+0x118>
 8004b8c:	3c01      	subs	r4, #1
 8004b8e:	f101 0714 	add.w	r7, r1, #20
 8004b92:	f100 0614 	add.w	r6, r0, #20
 8004b96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b9e:	3501      	adds	r5, #1
 8004ba0:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ba4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004ba8:	eb06 030c 	add.w	r3, r6, ip
 8004bac:	eb07 090c 	add.w	r9, r7, ip
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	b39d      	cbz	r5, 8004c1c <quorem+0xa0>
 8004bb4:	f04f 0a00 	mov.w	sl, #0
 8004bb8:	4638      	mov	r0, r7
 8004bba:	46b6      	mov	lr, r6
 8004bbc:	46d3      	mov	fp, sl
 8004bbe:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bc2:	b293      	uxth	r3, r2
 8004bc4:	fb05 a303 	mla	r3, r5, r3, sl
 8004bc8:	0c12      	lsrs	r2, r2, #16
 8004bca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bce:	fb05 a202 	mla	r2, r5, r2, sl
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	ebab 0303 	sub.w	r3, fp, r3
 8004bd8:	f8de b000 	ldr.w	fp, [lr]
 8004bdc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004be0:	fa1f fb8b 	uxth.w	fp, fp
 8004be4:	445b      	add	r3, fp
 8004be6:	fa1f fb82 	uxth.w	fp, r2
 8004bea:	f8de 2000 	ldr.w	r2, [lr]
 8004bee:	4581      	cmp	r9, r0
 8004bf0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bfe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c02:	f84e 3b04 	str.w	r3, [lr], #4
 8004c06:	d2da      	bcs.n	8004bbe <quorem+0x42>
 8004c08:	f856 300c 	ldr.w	r3, [r6, ip]
 8004c0c:	b933      	cbnz	r3, 8004c1c <quorem+0xa0>
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	3b04      	subs	r3, #4
 8004c12:	429e      	cmp	r6, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	d331      	bcc.n	8004c7c <quorem+0x100>
 8004c18:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	f001 fbb1 	bl	8006384 <__mcmp>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	db26      	blt.n	8004c74 <quorem+0xf8>
 8004c26:	4630      	mov	r0, r6
 8004c28:	f04f 0c00 	mov.w	ip, #0
 8004c2c:	3501      	adds	r5, #1
 8004c2e:	f857 1b04 	ldr.w	r1, [r7], #4
 8004c32:	f8d0 e000 	ldr.w	lr, [r0]
 8004c36:	b28b      	uxth	r3, r1
 8004c38:	ebac 0303 	sub.w	r3, ip, r3
 8004c3c:	fa1f f28e 	uxth.w	r2, lr
 8004c40:	4413      	add	r3, r2
 8004c42:	0c0a      	lsrs	r2, r1, #16
 8004c44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c52:	45b9      	cmp	r9, r7
 8004c54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c58:	f840 3b04 	str.w	r3, [r0], #4
 8004c5c:	d2e7      	bcs.n	8004c2e <quorem+0xb2>
 8004c5e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c62:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c66:	b92a      	cbnz	r2, 8004c74 <quorem+0xf8>
 8004c68:	3b04      	subs	r3, #4
 8004c6a:	429e      	cmp	r6, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	d30b      	bcc.n	8004c88 <quorem+0x10c>
 8004c70:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c74:	4628      	mov	r0, r5
 8004c76:	b003      	add	sp, #12
 8004c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	2a00      	cmp	r2, #0
 8004c82:	d1c9      	bne.n	8004c18 <quorem+0x9c>
 8004c84:	3c01      	subs	r4, #1
 8004c86:	e7c4      	b.n	8004c12 <quorem+0x96>
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d1ef      	bne.n	8004c70 <quorem+0xf4>
 8004c90:	3c01      	subs	r4, #1
 8004c92:	e7ea      	b.n	8004c6a <quorem+0xee>
 8004c94:	2000      	movs	r0, #0
 8004c96:	e7ee      	b.n	8004c76 <quorem+0xfa>

08004c98 <_dtoa_r>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	461f      	mov	r7, r3
 8004ca0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ca2:	b095      	sub	sp, #84	; 0x54
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004caa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004cae:	b93d      	cbnz	r5, 8004cc0 <_dtoa_r+0x28>
 8004cb0:	2010      	movs	r0, #16
 8004cb2:	f001 f8e1 	bl	8005e78 <malloc>
 8004cb6:	6260      	str	r0, [r4, #36]	; 0x24
 8004cb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cbc:	6005      	str	r5, [r0, #0]
 8004cbe:	60c5      	str	r5, [r0, #12]
 8004cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	b151      	cbz	r1, 8004cdc <_dtoa_r+0x44>
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4093      	lsls	r3, r2
 8004ccc:	604a      	str	r2, [r1, #4]
 8004cce:	608b      	str	r3, [r1, #8]
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f001 f938 	bl	8005f46 <_Bfree>
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	1e3b      	subs	r3, r7, #0
 8004cde:	bfaf      	iteee	ge
 8004ce0:	2300      	movge	r3, #0
 8004ce2:	2201      	movlt	r2, #1
 8004ce4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ce8:	9303      	strlt	r3, [sp, #12]
 8004cea:	bfac      	ite	ge
 8004cec:	f8c8 3000 	strge.w	r3, [r8]
 8004cf0:	f8c8 2000 	strlt.w	r2, [r8]
 8004cf4:	4bae      	ldr	r3, [pc, #696]	; (8004fb0 <_dtoa_r+0x318>)
 8004cf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004cfa:	ea33 0308 	bics.w	r3, r3, r8
 8004cfe:	d11b      	bne.n	8004d38 <_dtoa_r+0xa0>
 8004d00:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	9b02      	ldr	r3, [sp, #8]
 8004d0a:	b923      	cbnz	r3, 8004d16 <_dtoa_r+0x7e>
 8004d0c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d10:	2800      	cmp	r0, #0
 8004d12:	f000 8545 	beq.w	80057a0 <_dtoa_r+0xb08>
 8004d16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d18:	b953      	cbnz	r3, 8004d30 <_dtoa_r+0x98>
 8004d1a:	4ba6      	ldr	r3, [pc, #664]	; (8004fb4 <_dtoa_r+0x31c>)
 8004d1c:	e021      	b.n	8004d62 <_dtoa_r+0xca>
 8004d1e:	4ba6      	ldr	r3, [pc, #664]	; (8004fb8 <_dtoa_r+0x320>)
 8004d20:	9306      	str	r3, [sp, #24]
 8004d22:	3308      	adds	r3, #8
 8004d24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	9806      	ldr	r0, [sp, #24]
 8004d2a:	b015      	add	sp, #84	; 0x54
 8004d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d30:	4ba0      	ldr	r3, [pc, #640]	; (8004fb4 <_dtoa_r+0x31c>)
 8004d32:	9306      	str	r3, [sp, #24]
 8004d34:	3303      	adds	r3, #3
 8004d36:	e7f5      	b.n	8004d24 <_dtoa_r+0x8c>
 8004d38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4630      	mov	r0, r6
 8004d42:	4639      	mov	r1, r7
 8004d44:	f7fb fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8004d48:	4682      	mov	sl, r0
 8004d4a:	b160      	cbz	r0, 8004d66 <_dtoa_r+0xce>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8520 	beq.w	800579a <_dtoa_r+0xb02>
 8004d5a:	4b98      	ldr	r3, [pc, #608]	; (8004fbc <_dtoa_r+0x324>)
 8004d5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	9306      	str	r3, [sp, #24]
 8004d64:	e7e0      	b.n	8004d28 <_dtoa_r+0x90>
 8004d66:	ab12      	add	r3, sp, #72	; 0x48
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	ab13      	add	r3, sp, #76	; 0x4c
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	4632      	mov	r2, r6
 8004d70:	463b      	mov	r3, r7
 8004d72:	4620      	mov	r0, r4
 8004d74:	f001 fbf4 	bl	8006560 <__d2b>
 8004d78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d7c:	4683      	mov	fp, r0
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	d07d      	beq.n	8004e7e <_dtoa_r+0x1e6>
 8004d82:	46b0      	mov	r8, r6
 8004d84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d88:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004d8c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004d90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4b89      	ldr	r3, [pc, #548]	; (8004fc0 <_dtoa_r+0x328>)
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	4649      	mov	r1, r9
 8004da0:	f7fb f9e2 	bl	8000168 <__aeabi_dsub>
 8004da4:	a37c      	add	r3, pc, #496	; (adr r3, 8004f98 <_dtoa_r+0x300>)
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb fb95 	bl	80004d8 <__aeabi_dmul>
 8004dae:	a37c      	add	r3, pc, #496	; (adr r3, 8004fa0 <_dtoa_r+0x308>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f7fb f9da 	bl	800016c <__adddf3>
 8004db8:	4606      	mov	r6, r0
 8004dba:	4628      	mov	r0, r5
 8004dbc:	460f      	mov	r7, r1
 8004dbe:	f7fb fb21 	bl	8000404 <__aeabi_i2d>
 8004dc2:	a379      	add	r3, pc, #484	; (adr r3, 8004fa8 <_dtoa_r+0x310>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fb86 	bl	80004d8 <__aeabi_dmul>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb f9ca 	bl	800016c <__adddf3>
 8004dd8:	4606      	mov	r6, r0
 8004dda:	460f      	mov	r7, r1
 8004ddc:	f7fb fe2c 	bl	8000a38 <__aeabi_d2iz>
 8004de0:	2200      	movs	r2, #0
 8004de2:	4682      	mov	sl, r0
 8004de4:	2300      	movs	r3, #0
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb fde7 	bl	80009bc <__aeabi_dcmplt>
 8004dee:	b148      	cbz	r0, 8004e04 <_dtoa_r+0x16c>
 8004df0:	4650      	mov	r0, sl
 8004df2:	f7fb fb07 	bl	8000404 <__aeabi_i2d>
 8004df6:	4632      	mov	r2, r6
 8004df8:	463b      	mov	r3, r7
 8004dfa:	f7fb fdd5 	bl	80009a8 <__aeabi_dcmpeq>
 8004dfe:	b908      	cbnz	r0, 8004e04 <_dtoa_r+0x16c>
 8004e00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e04:	f1ba 0f16 	cmp.w	sl, #22
 8004e08:	d85a      	bhi.n	8004ec0 <_dtoa_r+0x228>
 8004e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e0e:	496d      	ldr	r1, [pc, #436]	; (8004fc4 <_dtoa_r+0x32c>)
 8004e10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e18:	f7fb fdee 	bl	80009f8 <__aeabi_dcmpgt>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d051      	beq.n	8004ec4 <_dtoa_r+0x22c>
 8004e20:	2300      	movs	r3, #0
 8004e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e26:	930d      	str	r3, [sp, #52]	; 0x34
 8004e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e2a:	1b5d      	subs	r5, r3, r5
 8004e2c:	1e6b      	subs	r3, r5, #1
 8004e2e:	9307      	str	r3, [sp, #28]
 8004e30:	bf43      	ittte	mi
 8004e32:	2300      	movmi	r3, #0
 8004e34:	f1c5 0901 	rsbmi	r9, r5, #1
 8004e38:	9307      	strmi	r3, [sp, #28]
 8004e3a:	f04f 0900 	movpl.w	r9, #0
 8004e3e:	f1ba 0f00 	cmp.w	sl, #0
 8004e42:	db41      	blt.n	8004ec8 <_dtoa_r+0x230>
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004e4a:	4453      	add	r3, sl
 8004e4c:	9307      	str	r3, [sp, #28]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9308      	str	r3, [sp, #32]
 8004e52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e54:	2b09      	cmp	r3, #9
 8004e56:	f200 808f 	bhi.w	8004f78 <_dtoa_r+0x2e0>
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	bfc4      	itt	gt
 8004e5e:	3b04      	subgt	r3, #4
 8004e60:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004e62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e64:	bfc8      	it	gt
 8004e66:	2500      	movgt	r5, #0
 8004e68:	f1a3 0302 	sub.w	r3, r3, #2
 8004e6c:	bfd8      	it	le
 8004e6e:	2501      	movle	r5, #1
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	f200 808d 	bhi.w	8004f90 <_dtoa_r+0x2f8>
 8004e76:	e8df f003 	tbb	[pc, r3]
 8004e7a:	7d7b      	.short	0x7d7b
 8004e7c:	6f2f      	.short	0x6f2f
 8004e7e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004e82:	441d      	add	r5, r3
 8004e84:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004e88:	2820      	cmp	r0, #32
 8004e8a:	dd13      	ble.n	8004eb4 <_dtoa_r+0x21c>
 8004e8c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e90:	9b02      	ldr	r3, [sp, #8]
 8004e92:	fa08 f800 	lsl.w	r8, r8, r0
 8004e96:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e9a:	fa23 f000 	lsr.w	r0, r3, r0
 8004e9e:	ea48 0000 	orr.w	r0, r8, r0
 8004ea2:	f7fb fa9f 	bl	80003e4 <__aeabi_ui2d>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004eae:	3d01      	subs	r5, #1
 8004eb0:	9310      	str	r3, [sp, #64]	; 0x40
 8004eb2:	e771      	b.n	8004d98 <_dtoa_r+0x100>
 8004eb4:	9b02      	ldr	r3, [sp, #8]
 8004eb6:	f1c0 0020 	rsb	r0, r0, #32
 8004eba:	fa03 f000 	lsl.w	r0, r3, r0
 8004ebe:	e7f0      	b.n	8004ea2 <_dtoa_r+0x20a>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e7b0      	b.n	8004e26 <_dtoa_r+0x18e>
 8004ec4:	900d      	str	r0, [sp, #52]	; 0x34
 8004ec6:	e7af      	b.n	8004e28 <_dtoa_r+0x190>
 8004ec8:	f1ca 0300 	rsb	r3, sl, #0
 8004ecc:	9308      	str	r3, [sp, #32]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	eba9 090a 	sub.w	r9, r9, sl
 8004ed4:	930c      	str	r3, [sp, #48]	; 0x30
 8004ed6:	e7bc      	b.n	8004e52 <_dtoa_r+0x1ba>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	9309      	str	r3, [sp, #36]	; 0x24
 8004edc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	dd74      	ble.n	8004fcc <_dtoa_r+0x334>
 8004ee2:	4698      	mov	r8, r3
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004eea:	6072      	str	r2, [r6, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	f102 0014 	add.w	r0, r2, #20
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	6871      	ldr	r1, [r6, #4]
 8004ef6:	d96e      	bls.n	8004fd6 <_dtoa_r+0x33e>
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f000 fff0 	bl	8005ede <_Balloc>
 8004efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f00:	6030      	str	r0, [r6, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f1b8 0f0e 	cmp.w	r8, #14
 8004f08:	9306      	str	r3, [sp, #24]
 8004f0a:	f200 80ed 	bhi.w	80050e8 <_dtoa_r+0x450>
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	f000 80ea 	beq.w	80050e8 <_dtoa_r+0x450>
 8004f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f18:	f1ba 0f00 	cmp.w	sl, #0
 8004f1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004f20:	dd77      	ble.n	8005012 <_dtoa_r+0x37a>
 8004f22:	4a28      	ldr	r2, [pc, #160]	; (8004fc4 <_dtoa_r+0x32c>)
 8004f24:	f00a 030f 	and.w	r3, sl, #15
 8004f28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004f2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f30:	06f0      	lsls	r0, r6, #27
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f3a:	d568      	bpl.n	800500e <_dtoa_r+0x376>
 8004f3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f40:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <_dtoa_r+0x330>)
 8004f42:	2503      	movs	r5, #3
 8004f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f48:	f7fb fbf0 	bl	800072c <__aeabi_ddiv>
 8004f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f50:	f006 060f 	and.w	r6, r6, #15
 8004f54:	4f1c      	ldr	r7, [pc, #112]	; (8004fc8 <_dtoa_r+0x330>)
 8004f56:	e04f      	b.n	8004ff8 <_dtoa_r+0x360>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f5e:	4453      	add	r3, sl
 8004f60:	f103 0801 	add.w	r8, r3, #1
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	4643      	mov	r3, r8
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bfb8      	it	lt
 8004f6c:	2301      	movlt	r3, #1
 8004f6e:	e7ba      	b.n	8004ee6 <_dtoa_r+0x24e>
 8004f70:	2300      	movs	r3, #0
 8004f72:	e7b2      	b.n	8004eda <_dtoa_r+0x242>
 8004f74:	2300      	movs	r3, #0
 8004f76:	e7f0      	b.n	8004f5a <_dtoa_r+0x2c2>
 8004f78:	2501      	movs	r5, #1
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9509      	str	r5, [sp, #36]	; 0x24
 8004f7e:	931e      	str	r3, [sp, #120]	; 0x78
 8004f80:	f04f 33ff 	mov.w	r3, #4294967295
 8004f84:	2200      	movs	r2, #0
 8004f86:	9304      	str	r3, [sp, #16]
 8004f88:	4698      	mov	r8, r3
 8004f8a:	2312      	movs	r3, #18
 8004f8c:	921f      	str	r2, [sp, #124]	; 0x7c
 8004f8e:	e7aa      	b.n	8004ee6 <_dtoa_r+0x24e>
 8004f90:	2301      	movs	r3, #1
 8004f92:	9309      	str	r3, [sp, #36]	; 0x24
 8004f94:	e7f4      	b.n	8004f80 <_dtoa_r+0x2e8>
 8004f96:	bf00      	nop
 8004f98:	636f4361 	.word	0x636f4361
 8004f9c:	3fd287a7 	.word	0x3fd287a7
 8004fa0:	8b60c8b3 	.word	0x8b60c8b3
 8004fa4:	3fc68a28 	.word	0x3fc68a28
 8004fa8:	509f79fb 	.word	0x509f79fb
 8004fac:	3fd34413 	.word	0x3fd34413
 8004fb0:	7ff00000 	.word	0x7ff00000
 8004fb4:	08006ca1 	.word	0x08006ca1
 8004fb8:	08006c98 	.word	0x08006c98
 8004fbc:	08006c1d 	.word	0x08006c1d
 8004fc0:	3ff80000 	.word	0x3ff80000
 8004fc4:	08006cd8 	.word	0x08006cd8
 8004fc8:	08006cb0 	.word	0x08006cb0
 8004fcc:	2301      	movs	r3, #1
 8004fce:	9304      	str	r3, [sp, #16]
 8004fd0:	4698      	mov	r8, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	e7da      	b.n	8004f8c <_dtoa_r+0x2f4>
 8004fd6:	3101      	adds	r1, #1
 8004fd8:	6071      	str	r1, [r6, #4]
 8004fda:	0052      	lsls	r2, r2, #1
 8004fdc:	e787      	b.n	8004eee <_dtoa_r+0x256>
 8004fde:	07f1      	lsls	r1, r6, #31
 8004fe0:	d508      	bpl.n	8004ff4 <_dtoa_r+0x35c>
 8004fe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fea:	f7fb fa75 	bl	80004d8 <__aeabi_dmul>
 8004fee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ff2:	3501      	adds	r5, #1
 8004ff4:	1076      	asrs	r6, r6, #1
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	2e00      	cmp	r6, #0
 8004ffa:	d1f0      	bne.n	8004fde <_dtoa_r+0x346>
 8004ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005004:	f7fb fb92 	bl	800072c <__aeabi_ddiv>
 8005008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800500c:	e01b      	b.n	8005046 <_dtoa_r+0x3ae>
 800500e:	2502      	movs	r5, #2
 8005010:	e7a0      	b.n	8004f54 <_dtoa_r+0x2bc>
 8005012:	f000 80a4 	beq.w	800515e <_dtoa_r+0x4c6>
 8005016:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800501a:	f1ca 0600 	rsb	r6, sl, #0
 800501e:	4ba0      	ldr	r3, [pc, #640]	; (80052a0 <_dtoa_r+0x608>)
 8005020:	f006 020f 	and.w	r2, r6, #15
 8005024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb fa54 	bl	80004d8 <__aeabi_dmul>
 8005030:	2502      	movs	r5, #2
 8005032:	2300      	movs	r3, #0
 8005034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005038:	4f9a      	ldr	r7, [pc, #616]	; (80052a4 <_dtoa_r+0x60c>)
 800503a:	1136      	asrs	r6, r6, #4
 800503c:	2e00      	cmp	r6, #0
 800503e:	f040 8083 	bne.w	8005148 <_dtoa_r+0x4b0>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e0      	bne.n	8005008 <_dtoa_r+0x370>
 8005046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 808a 	beq.w	8005162 <_dtoa_r+0x4ca>
 800504e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005052:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800505a:	2200      	movs	r2, #0
 800505c:	4b92      	ldr	r3, [pc, #584]	; (80052a8 <_dtoa_r+0x610>)
 800505e:	f7fb fcad 	bl	80009bc <__aeabi_dcmplt>
 8005062:	2800      	cmp	r0, #0
 8005064:	d07d      	beq.n	8005162 <_dtoa_r+0x4ca>
 8005066:	f1b8 0f00 	cmp.w	r8, #0
 800506a:	d07a      	beq.n	8005162 <_dtoa_r+0x4ca>
 800506c:	9b04      	ldr	r3, [sp, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	dd36      	ble.n	80050e0 <_dtoa_r+0x448>
 8005072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005076:	2200      	movs	r2, #0
 8005078:	4b8c      	ldr	r3, [pc, #560]	; (80052ac <_dtoa_r+0x614>)
 800507a:	f7fb fa2d 	bl	80004d8 <__aeabi_dmul>
 800507e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005082:	9e04      	ldr	r6, [sp, #16]
 8005084:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005088:	3501      	adds	r5, #1
 800508a:	4628      	mov	r0, r5
 800508c:	f7fb f9ba 	bl	8000404 <__aeabi_i2d>
 8005090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005094:	f7fb fa20 	bl	80004d8 <__aeabi_dmul>
 8005098:	2200      	movs	r2, #0
 800509a:	4b85      	ldr	r3, [pc, #532]	; (80052b0 <_dtoa_r+0x618>)
 800509c:	f7fb f866 	bl	800016c <__adddf3>
 80050a0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80050a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050a8:	950b      	str	r5, [sp, #44]	; 0x2c
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	d15c      	bne.n	8005168 <_dtoa_r+0x4d0>
 80050ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	4b7f      	ldr	r3, [pc, #508]	; (80052b4 <_dtoa_r+0x61c>)
 80050b6:	f7fb f857 	bl	8000168 <__aeabi_dsub>
 80050ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050bc:	462b      	mov	r3, r5
 80050be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c2:	f7fb fc99 	bl	80009f8 <__aeabi_dcmpgt>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f040 8281 	bne.w	80055ce <_dtoa_r+0x936>
 80050cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050d2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80050d6:	f7fb fc71 	bl	80009bc <__aeabi_dcmplt>
 80050da:	2800      	cmp	r0, #0
 80050dc:	f040 8275 	bne.w	80055ca <_dtoa_r+0x932>
 80050e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80050e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f2c0 814b 	blt.w	8005386 <_dtoa_r+0x6ee>
 80050f0:	f1ba 0f0e 	cmp.w	sl, #14
 80050f4:	f300 8147 	bgt.w	8005386 <_dtoa_r+0x6ee>
 80050f8:	4b69      	ldr	r3, [pc, #420]	; (80052a0 <_dtoa_r+0x608>)
 80050fa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005106:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005108:	2b00      	cmp	r3, #0
 800510a:	f280 80d7 	bge.w	80052bc <_dtoa_r+0x624>
 800510e:	f1b8 0f00 	cmp.w	r8, #0
 8005112:	f300 80d3 	bgt.w	80052bc <_dtoa_r+0x624>
 8005116:	f040 8257 	bne.w	80055c8 <_dtoa_r+0x930>
 800511a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800511e:	2200      	movs	r2, #0
 8005120:	4b64      	ldr	r3, [pc, #400]	; (80052b4 <_dtoa_r+0x61c>)
 8005122:	f7fb f9d9 	bl	80004d8 <__aeabi_dmul>
 8005126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800512a:	f7fb fc5b 	bl	80009e4 <__aeabi_dcmpge>
 800512e:	4646      	mov	r6, r8
 8005130:	4647      	mov	r7, r8
 8005132:	2800      	cmp	r0, #0
 8005134:	f040 822d 	bne.w	8005592 <_dtoa_r+0x8fa>
 8005138:	9b06      	ldr	r3, [sp, #24]
 800513a:	9a06      	ldr	r2, [sp, #24]
 800513c:	1c5d      	adds	r5, r3, #1
 800513e:	2331      	movs	r3, #49	; 0x31
 8005140:	f10a 0a01 	add.w	sl, sl, #1
 8005144:	7013      	strb	r3, [r2, #0]
 8005146:	e228      	b.n	800559a <_dtoa_r+0x902>
 8005148:	07f2      	lsls	r2, r6, #31
 800514a:	d505      	bpl.n	8005158 <_dtoa_r+0x4c0>
 800514c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005150:	f7fb f9c2 	bl	80004d8 <__aeabi_dmul>
 8005154:	2301      	movs	r3, #1
 8005156:	3501      	adds	r5, #1
 8005158:	1076      	asrs	r6, r6, #1
 800515a:	3708      	adds	r7, #8
 800515c:	e76e      	b.n	800503c <_dtoa_r+0x3a4>
 800515e:	2502      	movs	r5, #2
 8005160:	e771      	b.n	8005046 <_dtoa_r+0x3ae>
 8005162:	4657      	mov	r7, sl
 8005164:	4646      	mov	r6, r8
 8005166:	e790      	b.n	800508a <_dtoa_r+0x3f2>
 8005168:	4b4d      	ldr	r3, [pc, #308]	; (80052a0 <_dtoa_r+0x608>)
 800516a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800516e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	d048      	beq.n	800520a <_dtoa_r+0x572>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	2000      	movs	r0, #0
 800517e:	494e      	ldr	r1, [pc, #312]	; (80052b8 <_dtoa_r+0x620>)
 8005180:	f7fb fad4 	bl	800072c <__aeabi_ddiv>
 8005184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005188:	f7fa ffee 	bl	8000168 <__aeabi_dsub>
 800518c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005190:	9d06      	ldr	r5, [sp, #24]
 8005192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005196:	f7fb fc4f 	bl	8000a38 <__aeabi_d2iz>
 800519a:	9011      	str	r0, [sp, #68]	; 0x44
 800519c:	f7fb f932 	bl	8000404 <__aeabi_i2d>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a8:	f7fa ffde 	bl	8000168 <__aeabi_dsub>
 80051ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051b2:	3330      	adds	r3, #48	; 0x30
 80051b4:	f805 3b01 	strb.w	r3, [r5], #1
 80051b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051bc:	f7fb fbfe 	bl	80009bc <__aeabi_dcmplt>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d163      	bne.n	800528c <_dtoa_r+0x5f4>
 80051c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051c8:	2000      	movs	r0, #0
 80051ca:	4937      	ldr	r1, [pc, #220]	; (80052a8 <_dtoa_r+0x610>)
 80051cc:	f7fa ffcc 	bl	8000168 <__aeabi_dsub>
 80051d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051d4:	f7fb fbf2 	bl	80009bc <__aeabi_dcmplt>
 80051d8:	2800      	cmp	r0, #0
 80051da:	f040 80b5 	bne.w	8005348 <_dtoa_r+0x6b0>
 80051de:	9b06      	ldr	r3, [sp, #24]
 80051e0:	1aeb      	subs	r3, r5, r3
 80051e2:	429e      	cmp	r6, r3
 80051e4:	f77f af7c 	ble.w	80050e0 <_dtoa_r+0x448>
 80051e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051ec:	2200      	movs	r2, #0
 80051ee:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <_dtoa_r+0x614>)
 80051f0:	f7fb f972 	bl	80004d8 <__aeabi_dmul>
 80051f4:	2200      	movs	r2, #0
 80051f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80051fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051fe:	4b2b      	ldr	r3, [pc, #172]	; (80052ac <_dtoa_r+0x614>)
 8005200:	f7fb f96a 	bl	80004d8 <__aeabi_dmul>
 8005204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005208:	e7c3      	b.n	8005192 <_dtoa_r+0x4fa>
 800520a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800520e:	f7fb f963 	bl	80004d8 <__aeabi_dmul>
 8005212:	9b06      	ldr	r3, [sp, #24]
 8005214:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005218:	199d      	adds	r5, r3, r6
 800521a:	461e      	mov	r6, r3
 800521c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005220:	f7fb fc0a 	bl	8000a38 <__aeabi_d2iz>
 8005224:	9011      	str	r0, [sp, #68]	; 0x44
 8005226:	f7fb f8ed 	bl	8000404 <__aeabi_i2d>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005232:	f7fa ff99 	bl	8000168 <__aeabi_dsub>
 8005236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800523c:	3330      	adds	r3, #48	; 0x30
 800523e:	f806 3b01 	strb.w	r3, [r6], #1
 8005242:	42ae      	cmp	r6, r5
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	d124      	bne.n	8005294 <_dtoa_r+0x5fc>
 800524a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <_dtoa_r+0x620>)
 8005250:	f7fa ff8c 	bl	800016c <__adddf3>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800525c:	f7fb fbcc 	bl	80009f8 <__aeabi_dcmpgt>
 8005260:	2800      	cmp	r0, #0
 8005262:	d171      	bne.n	8005348 <_dtoa_r+0x6b0>
 8005264:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005268:	2000      	movs	r0, #0
 800526a:	4913      	ldr	r1, [pc, #76]	; (80052b8 <_dtoa_r+0x620>)
 800526c:	f7fa ff7c 	bl	8000168 <__aeabi_dsub>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005278:	f7fb fba0 	bl	80009bc <__aeabi_dcmplt>
 800527c:	2800      	cmp	r0, #0
 800527e:	f43f af2f 	beq.w	80050e0 <_dtoa_r+0x448>
 8005282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005286:	1e6a      	subs	r2, r5, #1
 8005288:	2b30      	cmp	r3, #48	; 0x30
 800528a:	d001      	beq.n	8005290 <_dtoa_r+0x5f8>
 800528c:	46ba      	mov	sl, r7
 800528e:	e04a      	b.n	8005326 <_dtoa_r+0x68e>
 8005290:	4615      	mov	r5, r2
 8005292:	e7f6      	b.n	8005282 <_dtoa_r+0x5ea>
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <_dtoa_r+0x614>)
 8005296:	f7fb f91f 	bl	80004d8 <__aeabi_dmul>
 800529a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800529e:	e7bd      	b.n	800521c <_dtoa_r+0x584>
 80052a0:	08006cd8 	.word	0x08006cd8
 80052a4:	08006cb0 	.word	0x08006cb0
 80052a8:	3ff00000 	.word	0x3ff00000
 80052ac:	40240000 	.word	0x40240000
 80052b0:	401c0000 	.word	0x401c0000
 80052b4:	40140000 	.word	0x40140000
 80052b8:	3fe00000 	.word	0x3fe00000
 80052bc:	9d06      	ldr	r5, [sp, #24]
 80052be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c6:	4630      	mov	r0, r6
 80052c8:	4639      	mov	r1, r7
 80052ca:	f7fb fa2f 	bl	800072c <__aeabi_ddiv>
 80052ce:	f7fb fbb3 	bl	8000a38 <__aeabi_d2iz>
 80052d2:	4681      	mov	r9, r0
 80052d4:	f7fb f896 	bl	8000404 <__aeabi_i2d>
 80052d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052dc:	f7fb f8fc 	bl	80004d8 <__aeabi_dmul>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4630      	mov	r0, r6
 80052e6:	4639      	mov	r1, r7
 80052e8:	f7fa ff3e 	bl	8000168 <__aeabi_dsub>
 80052ec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80052f0:	f805 6b01 	strb.w	r6, [r5], #1
 80052f4:	9e06      	ldr	r6, [sp, #24]
 80052f6:	4602      	mov	r2, r0
 80052f8:	1bae      	subs	r6, r5, r6
 80052fa:	45b0      	cmp	r8, r6
 80052fc:	460b      	mov	r3, r1
 80052fe:	d135      	bne.n	800536c <_dtoa_r+0x6d4>
 8005300:	f7fa ff34 	bl	800016c <__adddf3>
 8005304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005308:	4606      	mov	r6, r0
 800530a:	460f      	mov	r7, r1
 800530c:	f7fb fb74 	bl	80009f8 <__aeabi_dcmpgt>
 8005310:	b9c8      	cbnz	r0, 8005346 <_dtoa_r+0x6ae>
 8005312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005316:	4630      	mov	r0, r6
 8005318:	4639      	mov	r1, r7
 800531a:	f7fb fb45 	bl	80009a8 <__aeabi_dcmpeq>
 800531e:	b110      	cbz	r0, 8005326 <_dtoa_r+0x68e>
 8005320:	f019 0f01 	tst.w	r9, #1
 8005324:	d10f      	bne.n	8005346 <_dtoa_r+0x6ae>
 8005326:	4659      	mov	r1, fp
 8005328:	4620      	mov	r0, r4
 800532a:	f000 fe0c 	bl	8005f46 <_Bfree>
 800532e:	2300      	movs	r3, #0
 8005330:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005332:	702b      	strb	r3, [r5, #0]
 8005334:	f10a 0301 	add.w	r3, sl, #1
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800533c:	2b00      	cmp	r3, #0
 800533e:	f43f acf3 	beq.w	8004d28 <_dtoa_r+0x90>
 8005342:	601d      	str	r5, [r3, #0]
 8005344:	e4f0      	b.n	8004d28 <_dtoa_r+0x90>
 8005346:	4657      	mov	r7, sl
 8005348:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800534c:	1e6b      	subs	r3, r5, #1
 800534e:	2a39      	cmp	r2, #57	; 0x39
 8005350:	d106      	bne.n	8005360 <_dtoa_r+0x6c8>
 8005352:	9a06      	ldr	r2, [sp, #24]
 8005354:	429a      	cmp	r2, r3
 8005356:	d107      	bne.n	8005368 <_dtoa_r+0x6d0>
 8005358:	2330      	movs	r3, #48	; 0x30
 800535a:	7013      	strb	r3, [r2, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	3701      	adds	r7, #1
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	3201      	adds	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e791      	b.n	800528c <_dtoa_r+0x5f4>
 8005368:	461d      	mov	r5, r3
 800536a:	e7ed      	b.n	8005348 <_dtoa_r+0x6b0>
 800536c:	2200      	movs	r2, #0
 800536e:	4b99      	ldr	r3, [pc, #612]	; (80055d4 <_dtoa_r+0x93c>)
 8005370:	f7fb f8b2 	bl	80004d8 <__aeabi_dmul>
 8005374:	2200      	movs	r2, #0
 8005376:	2300      	movs	r3, #0
 8005378:	4606      	mov	r6, r0
 800537a:	460f      	mov	r7, r1
 800537c:	f7fb fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8005380:	2800      	cmp	r0, #0
 8005382:	d09e      	beq.n	80052c2 <_dtoa_r+0x62a>
 8005384:	e7cf      	b.n	8005326 <_dtoa_r+0x68e>
 8005386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005388:	2a00      	cmp	r2, #0
 800538a:	f000 8088 	beq.w	800549e <_dtoa_r+0x806>
 800538e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005390:	2a01      	cmp	r2, #1
 8005392:	dc6d      	bgt.n	8005470 <_dtoa_r+0x7d8>
 8005394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005396:	2a00      	cmp	r2, #0
 8005398:	d066      	beq.n	8005468 <_dtoa_r+0x7d0>
 800539a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800539e:	464d      	mov	r5, r9
 80053a0:	9e08      	ldr	r6, [sp, #32]
 80053a2:	9a07      	ldr	r2, [sp, #28]
 80053a4:	2101      	movs	r1, #1
 80053a6:	441a      	add	r2, r3
 80053a8:	4620      	mov	r0, r4
 80053aa:	4499      	add	r9, r3
 80053ac:	9207      	str	r2, [sp, #28]
 80053ae:	f000 fea8 	bl	8006102 <__i2b>
 80053b2:	4607      	mov	r7, r0
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	dd0b      	ble.n	80053d0 <_dtoa_r+0x738>
 80053b8:	9b07      	ldr	r3, [sp, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	dd08      	ble.n	80053d0 <_dtoa_r+0x738>
 80053be:	42ab      	cmp	r3, r5
 80053c0:	bfa8      	it	ge
 80053c2:	462b      	movge	r3, r5
 80053c4:	9a07      	ldr	r2, [sp, #28]
 80053c6:	eba9 0903 	sub.w	r9, r9, r3
 80053ca:	1aed      	subs	r5, r5, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	9307      	str	r3, [sp, #28]
 80053d0:	9b08      	ldr	r3, [sp, #32]
 80053d2:	b1eb      	cbz	r3, 8005410 <_dtoa_r+0x778>
 80053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d065      	beq.n	80054a6 <_dtoa_r+0x80e>
 80053da:	b18e      	cbz	r6, 8005400 <_dtoa_r+0x768>
 80053dc:	4639      	mov	r1, r7
 80053de:	4632      	mov	r2, r6
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 ff2d 	bl	8006240 <__pow5mult>
 80053e6:	465a      	mov	r2, fp
 80053e8:	4601      	mov	r1, r0
 80053ea:	4607      	mov	r7, r0
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 fe91 	bl	8006114 <__multiply>
 80053f2:	4659      	mov	r1, fp
 80053f4:	900a      	str	r0, [sp, #40]	; 0x28
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 fda5 	bl	8005f46 <_Bfree>
 80053fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fe:	469b      	mov	fp, r3
 8005400:	9b08      	ldr	r3, [sp, #32]
 8005402:	1b9a      	subs	r2, r3, r6
 8005404:	d004      	beq.n	8005410 <_dtoa_r+0x778>
 8005406:	4659      	mov	r1, fp
 8005408:	4620      	mov	r0, r4
 800540a:	f000 ff19 	bl	8006240 <__pow5mult>
 800540e:	4683      	mov	fp, r0
 8005410:	2101      	movs	r1, #1
 8005412:	4620      	mov	r0, r4
 8005414:	f000 fe75 	bl	8006102 <__i2b>
 8005418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800541a:	4606      	mov	r6, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 81c6 	beq.w	80057ae <_dtoa_r+0xb16>
 8005422:	461a      	mov	r2, r3
 8005424:	4601      	mov	r1, r0
 8005426:	4620      	mov	r0, r4
 8005428:	f000 ff0a 	bl	8006240 <__pow5mult>
 800542c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800542e:	4606      	mov	r6, r0
 8005430:	2b01      	cmp	r3, #1
 8005432:	dc3e      	bgt.n	80054b2 <_dtoa_r+0x81a>
 8005434:	9b02      	ldr	r3, [sp, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d137      	bne.n	80054aa <_dtoa_r+0x812>
 800543a:	9b03      	ldr	r3, [sp, #12]
 800543c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005440:	2b00      	cmp	r3, #0
 8005442:	d134      	bne.n	80054ae <_dtoa_r+0x816>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800544a:	0d1b      	lsrs	r3, r3, #20
 800544c:	051b      	lsls	r3, r3, #20
 800544e:	b12b      	cbz	r3, 800545c <_dtoa_r+0x7c4>
 8005450:	9b07      	ldr	r3, [sp, #28]
 8005452:	f109 0901 	add.w	r9, r9, #1
 8005456:	3301      	adds	r3, #1
 8005458:	9307      	str	r3, [sp, #28]
 800545a:	2301      	movs	r3, #1
 800545c:	9308      	str	r3, [sp, #32]
 800545e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005460:	2b00      	cmp	r3, #0
 8005462:	d128      	bne.n	80054b6 <_dtoa_r+0x81e>
 8005464:	2001      	movs	r0, #1
 8005466:	e02e      	b.n	80054c6 <_dtoa_r+0x82e>
 8005468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800546a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800546e:	e796      	b.n	800539e <_dtoa_r+0x706>
 8005470:	9b08      	ldr	r3, [sp, #32]
 8005472:	f108 36ff 	add.w	r6, r8, #4294967295
 8005476:	42b3      	cmp	r3, r6
 8005478:	bfb7      	itett	lt
 800547a:	9b08      	ldrlt	r3, [sp, #32]
 800547c:	1b9e      	subge	r6, r3, r6
 800547e:	1af2      	sublt	r2, r6, r3
 8005480:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005482:	bfbf      	itttt	lt
 8005484:	9608      	strlt	r6, [sp, #32]
 8005486:	189b      	addlt	r3, r3, r2
 8005488:	930c      	strlt	r3, [sp, #48]	; 0x30
 800548a:	2600      	movlt	r6, #0
 800548c:	f1b8 0f00 	cmp.w	r8, #0
 8005490:	bfb9      	ittee	lt
 8005492:	eba9 0508 	sublt.w	r5, r9, r8
 8005496:	2300      	movlt	r3, #0
 8005498:	464d      	movge	r5, r9
 800549a:	4643      	movge	r3, r8
 800549c:	e781      	b.n	80053a2 <_dtoa_r+0x70a>
 800549e:	9e08      	ldr	r6, [sp, #32]
 80054a0:	464d      	mov	r5, r9
 80054a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80054a4:	e786      	b.n	80053b4 <_dtoa_r+0x71c>
 80054a6:	9a08      	ldr	r2, [sp, #32]
 80054a8:	e7ad      	b.n	8005406 <_dtoa_r+0x76e>
 80054aa:	2300      	movs	r3, #0
 80054ac:	e7d6      	b.n	800545c <_dtoa_r+0x7c4>
 80054ae:	9b02      	ldr	r3, [sp, #8]
 80054b0:	e7d4      	b.n	800545c <_dtoa_r+0x7c4>
 80054b2:	2300      	movs	r3, #0
 80054b4:	9308      	str	r3, [sp, #32]
 80054b6:	6933      	ldr	r3, [r6, #16]
 80054b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80054bc:	6918      	ldr	r0, [r3, #16]
 80054be:	f000 fdd2 	bl	8006066 <__hi0bits>
 80054c2:	f1c0 0020 	rsb	r0, r0, #32
 80054c6:	9b07      	ldr	r3, [sp, #28]
 80054c8:	4418      	add	r0, r3
 80054ca:	f010 001f 	ands.w	r0, r0, #31
 80054ce:	d047      	beq.n	8005560 <_dtoa_r+0x8c8>
 80054d0:	f1c0 0320 	rsb	r3, r0, #32
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	dd3b      	ble.n	8005550 <_dtoa_r+0x8b8>
 80054d8:	9b07      	ldr	r3, [sp, #28]
 80054da:	f1c0 001c 	rsb	r0, r0, #28
 80054de:	4481      	add	r9, r0
 80054e0:	4405      	add	r5, r0
 80054e2:	4403      	add	r3, r0
 80054e4:	9307      	str	r3, [sp, #28]
 80054e6:	f1b9 0f00 	cmp.w	r9, #0
 80054ea:	dd05      	ble.n	80054f8 <_dtoa_r+0x860>
 80054ec:	4659      	mov	r1, fp
 80054ee:	464a      	mov	r2, r9
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 fef3 	bl	80062dc <__lshift>
 80054f6:	4683      	mov	fp, r0
 80054f8:	9b07      	ldr	r3, [sp, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dd05      	ble.n	800550a <_dtoa_r+0x872>
 80054fe:	4631      	mov	r1, r6
 8005500:	461a      	mov	r2, r3
 8005502:	4620      	mov	r0, r4
 8005504:	f000 feea 	bl	80062dc <__lshift>
 8005508:	4606      	mov	r6, r0
 800550a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800550c:	b353      	cbz	r3, 8005564 <_dtoa_r+0x8cc>
 800550e:	4631      	mov	r1, r6
 8005510:	4658      	mov	r0, fp
 8005512:	f000 ff37 	bl	8006384 <__mcmp>
 8005516:	2800      	cmp	r0, #0
 8005518:	da24      	bge.n	8005564 <_dtoa_r+0x8cc>
 800551a:	2300      	movs	r3, #0
 800551c:	4659      	mov	r1, fp
 800551e:	220a      	movs	r2, #10
 8005520:	4620      	mov	r0, r4
 8005522:	f000 fd27 	bl	8005f74 <__multadd>
 8005526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005528:	f10a 3aff 	add.w	sl, sl, #4294967295
 800552c:	4683      	mov	fp, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8144 	beq.w	80057bc <_dtoa_r+0xb24>
 8005534:	2300      	movs	r3, #0
 8005536:	4639      	mov	r1, r7
 8005538:	220a      	movs	r2, #10
 800553a:	4620      	mov	r0, r4
 800553c:	f000 fd1a 	bl	8005f74 <__multadd>
 8005540:	9b04      	ldr	r3, [sp, #16]
 8005542:	4607      	mov	r7, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	dc4d      	bgt.n	80055e4 <_dtoa_r+0x94c>
 8005548:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800554a:	2b02      	cmp	r3, #2
 800554c:	dd4a      	ble.n	80055e4 <_dtoa_r+0x94c>
 800554e:	e011      	b.n	8005574 <_dtoa_r+0x8dc>
 8005550:	d0c9      	beq.n	80054e6 <_dtoa_r+0x84e>
 8005552:	9a07      	ldr	r2, [sp, #28]
 8005554:	331c      	adds	r3, #28
 8005556:	441a      	add	r2, r3
 8005558:	4499      	add	r9, r3
 800555a:	441d      	add	r5, r3
 800555c:	4613      	mov	r3, r2
 800555e:	e7c1      	b.n	80054e4 <_dtoa_r+0x84c>
 8005560:	4603      	mov	r3, r0
 8005562:	e7f6      	b.n	8005552 <_dtoa_r+0x8ba>
 8005564:	f1b8 0f00 	cmp.w	r8, #0
 8005568:	dc36      	bgt.n	80055d8 <_dtoa_r+0x940>
 800556a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800556c:	2b02      	cmp	r3, #2
 800556e:	dd33      	ble.n	80055d8 <_dtoa_r+0x940>
 8005570:	f8cd 8010 	str.w	r8, [sp, #16]
 8005574:	9b04      	ldr	r3, [sp, #16]
 8005576:	b963      	cbnz	r3, 8005592 <_dtoa_r+0x8fa>
 8005578:	4631      	mov	r1, r6
 800557a:	2205      	movs	r2, #5
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fcf9 	bl	8005f74 <__multadd>
 8005582:	4601      	mov	r1, r0
 8005584:	4606      	mov	r6, r0
 8005586:	4658      	mov	r0, fp
 8005588:	f000 fefc 	bl	8006384 <__mcmp>
 800558c:	2800      	cmp	r0, #0
 800558e:	f73f add3 	bgt.w	8005138 <_dtoa_r+0x4a0>
 8005592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005594:	9d06      	ldr	r5, [sp, #24]
 8005596:	ea6f 0a03 	mvn.w	sl, r3
 800559a:	f04f 0900 	mov.w	r9, #0
 800559e:	4631      	mov	r1, r6
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 fcd0 	bl	8005f46 <_Bfree>
 80055a6:	2f00      	cmp	r7, #0
 80055a8:	f43f aebd 	beq.w	8005326 <_dtoa_r+0x68e>
 80055ac:	f1b9 0f00 	cmp.w	r9, #0
 80055b0:	d005      	beq.n	80055be <_dtoa_r+0x926>
 80055b2:	45b9      	cmp	r9, r7
 80055b4:	d003      	beq.n	80055be <_dtoa_r+0x926>
 80055b6:	4649      	mov	r1, r9
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 fcc4 	bl	8005f46 <_Bfree>
 80055be:	4639      	mov	r1, r7
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fcc0 	bl	8005f46 <_Bfree>
 80055c6:	e6ae      	b.n	8005326 <_dtoa_r+0x68e>
 80055c8:	2600      	movs	r6, #0
 80055ca:	4637      	mov	r7, r6
 80055cc:	e7e1      	b.n	8005592 <_dtoa_r+0x8fa>
 80055ce:	46ba      	mov	sl, r7
 80055d0:	4637      	mov	r7, r6
 80055d2:	e5b1      	b.n	8005138 <_dtoa_r+0x4a0>
 80055d4:	40240000 	.word	0x40240000
 80055d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055da:	f8cd 8010 	str.w	r8, [sp, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80f3 	beq.w	80057ca <_dtoa_r+0xb32>
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	dd05      	ble.n	80055f4 <_dtoa_r+0x95c>
 80055e8:	4639      	mov	r1, r7
 80055ea:	462a      	mov	r2, r5
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 fe75 	bl	80062dc <__lshift>
 80055f2:	4607      	mov	r7, r0
 80055f4:	9b08      	ldr	r3, [sp, #32]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d04c      	beq.n	8005694 <_dtoa_r+0x9fc>
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4620      	mov	r0, r4
 80055fe:	f000 fc6e 	bl	8005ede <_Balloc>
 8005602:	4605      	mov	r5, r0
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	f107 010c 	add.w	r1, r7, #12
 800560a:	3202      	adds	r2, #2
 800560c:	0092      	lsls	r2, r2, #2
 800560e:	300c      	adds	r0, #12
 8005610:	f000 fc5a 	bl	8005ec8 <memcpy>
 8005614:	2201      	movs	r2, #1
 8005616:	4629      	mov	r1, r5
 8005618:	4620      	mov	r0, r4
 800561a:	f000 fe5f 	bl	80062dc <__lshift>
 800561e:	46b9      	mov	r9, r7
 8005620:	4607      	mov	r7, r0
 8005622:	9b06      	ldr	r3, [sp, #24]
 8005624:	9307      	str	r3, [sp, #28]
 8005626:	9b02      	ldr	r3, [sp, #8]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	9308      	str	r3, [sp, #32]
 800562e:	4631      	mov	r1, r6
 8005630:	4658      	mov	r0, fp
 8005632:	f7ff faa3 	bl	8004b7c <quorem>
 8005636:	4649      	mov	r1, r9
 8005638:	4605      	mov	r5, r0
 800563a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800563e:	4658      	mov	r0, fp
 8005640:	f000 fea0 	bl	8006384 <__mcmp>
 8005644:	463a      	mov	r2, r7
 8005646:	9002      	str	r0, [sp, #8]
 8005648:	4631      	mov	r1, r6
 800564a:	4620      	mov	r0, r4
 800564c:	f000 feb4 	bl	80063b8 <__mdiff>
 8005650:	68c3      	ldr	r3, [r0, #12]
 8005652:	4602      	mov	r2, r0
 8005654:	bb03      	cbnz	r3, 8005698 <_dtoa_r+0xa00>
 8005656:	4601      	mov	r1, r0
 8005658:	9009      	str	r0, [sp, #36]	; 0x24
 800565a:	4658      	mov	r0, fp
 800565c:	f000 fe92 	bl	8006384 <__mcmp>
 8005660:	4603      	mov	r3, r0
 8005662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005664:	4611      	mov	r1, r2
 8005666:	4620      	mov	r0, r4
 8005668:	9309      	str	r3, [sp, #36]	; 0x24
 800566a:	f000 fc6c 	bl	8005f46 <_Bfree>
 800566e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005670:	b9a3      	cbnz	r3, 800569c <_dtoa_r+0xa04>
 8005672:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005674:	b992      	cbnz	r2, 800569c <_dtoa_r+0xa04>
 8005676:	9a08      	ldr	r2, [sp, #32]
 8005678:	b982      	cbnz	r2, 800569c <_dtoa_r+0xa04>
 800567a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800567e:	d029      	beq.n	80056d4 <_dtoa_r+0xa3c>
 8005680:	9b02      	ldr	r3, [sp, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	dd01      	ble.n	800568a <_dtoa_r+0x9f2>
 8005686:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800568a:	9b07      	ldr	r3, [sp, #28]
 800568c:	1c5d      	adds	r5, r3, #1
 800568e:	f883 8000 	strb.w	r8, [r3]
 8005692:	e784      	b.n	800559e <_dtoa_r+0x906>
 8005694:	4638      	mov	r0, r7
 8005696:	e7c2      	b.n	800561e <_dtoa_r+0x986>
 8005698:	2301      	movs	r3, #1
 800569a:	e7e3      	b.n	8005664 <_dtoa_r+0x9cc>
 800569c:	9a02      	ldr	r2, [sp, #8]
 800569e:	2a00      	cmp	r2, #0
 80056a0:	db04      	blt.n	80056ac <_dtoa_r+0xa14>
 80056a2:	d123      	bne.n	80056ec <_dtoa_r+0xa54>
 80056a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80056a6:	bb0a      	cbnz	r2, 80056ec <_dtoa_r+0xa54>
 80056a8:	9a08      	ldr	r2, [sp, #32]
 80056aa:	b9fa      	cbnz	r2, 80056ec <_dtoa_r+0xa54>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	ddec      	ble.n	800568a <_dtoa_r+0x9f2>
 80056b0:	4659      	mov	r1, fp
 80056b2:	2201      	movs	r2, #1
 80056b4:	4620      	mov	r0, r4
 80056b6:	f000 fe11 	bl	80062dc <__lshift>
 80056ba:	4631      	mov	r1, r6
 80056bc:	4683      	mov	fp, r0
 80056be:	f000 fe61 	bl	8006384 <__mcmp>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	dc03      	bgt.n	80056ce <_dtoa_r+0xa36>
 80056c6:	d1e0      	bne.n	800568a <_dtoa_r+0x9f2>
 80056c8:	f018 0f01 	tst.w	r8, #1
 80056cc:	d0dd      	beq.n	800568a <_dtoa_r+0x9f2>
 80056ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056d2:	d1d8      	bne.n	8005686 <_dtoa_r+0x9ee>
 80056d4:	9b07      	ldr	r3, [sp, #28]
 80056d6:	9a07      	ldr	r2, [sp, #28]
 80056d8:	1c5d      	adds	r5, r3, #1
 80056da:	2339      	movs	r3, #57	; 0x39
 80056dc:	7013      	strb	r3, [r2, #0]
 80056de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056e2:	1e6a      	subs	r2, r5, #1
 80056e4:	2b39      	cmp	r3, #57	; 0x39
 80056e6:	d04d      	beq.n	8005784 <_dtoa_r+0xaec>
 80056e8:	3301      	adds	r3, #1
 80056ea:	e052      	b.n	8005792 <_dtoa_r+0xafa>
 80056ec:	9a07      	ldr	r2, [sp, #28]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f102 0501 	add.w	r5, r2, #1
 80056f4:	dd06      	ble.n	8005704 <_dtoa_r+0xa6c>
 80056f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056fa:	d0eb      	beq.n	80056d4 <_dtoa_r+0xa3c>
 80056fc:	f108 0801 	add.w	r8, r8, #1
 8005700:	9b07      	ldr	r3, [sp, #28]
 8005702:	e7c4      	b.n	800568e <_dtoa_r+0x9f6>
 8005704:	9b06      	ldr	r3, [sp, #24]
 8005706:	9a04      	ldr	r2, [sp, #16]
 8005708:	1aeb      	subs	r3, r5, r3
 800570a:	4293      	cmp	r3, r2
 800570c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005710:	d021      	beq.n	8005756 <_dtoa_r+0xabe>
 8005712:	4659      	mov	r1, fp
 8005714:	2300      	movs	r3, #0
 8005716:	220a      	movs	r2, #10
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fc2b 	bl	8005f74 <__multadd>
 800571e:	45b9      	cmp	r9, r7
 8005720:	4683      	mov	fp, r0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	f04f 020a 	mov.w	r2, #10
 800572a:	4649      	mov	r1, r9
 800572c:	4620      	mov	r0, r4
 800572e:	d105      	bne.n	800573c <_dtoa_r+0xaa4>
 8005730:	f000 fc20 	bl	8005f74 <__multadd>
 8005734:	4681      	mov	r9, r0
 8005736:	4607      	mov	r7, r0
 8005738:	9507      	str	r5, [sp, #28]
 800573a:	e778      	b.n	800562e <_dtoa_r+0x996>
 800573c:	f000 fc1a 	bl	8005f74 <__multadd>
 8005740:	4639      	mov	r1, r7
 8005742:	4681      	mov	r9, r0
 8005744:	2300      	movs	r3, #0
 8005746:	220a      	movs	r2, #10
 8005748:	4620      	mov	r0, r4
 800574a:	f000 fc13 	bl	8005f74 <__multadd>
 800574e:	4607      	mov	r7, r0
 8005750:	e7f2      	b.n	8005738 <_dtoa_r+0xaa0>
 8005752:	f04f 0900 	mov.w	r9, #0
 8005756:	4659      	mov	r1, fp
 8005758:	2201      	movs	r2, #1
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fdbe 	bl	80062dc <__lshift>
 8005760:	4631      	mov	r1, r6
 8005762:	4683      	mov	fp, r0
 8005764:	f000 fe0e 	bl	8006384 <__mcmp>
 8005768:	2800      	cmp	r0, #0
 800576a:	dcb8      	bgt.n	80056de <_dtoa_r+0xa46>
 800576c:	d102      	bne.n	8005774 <_dtoa_r+0xadc>
 800576e:	f018 0f01 	tst.w	r8, #1
 8005772:	d1b4      	bne.n	80056de <_dtoa_r+0xa46>
 8005774:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005778:	1e6a      	subs	r2, r5, #1
 800577a:	2b30      	cmp	r3, #48	; 0x30
 800577c:	f47f af0f 	bne.w	800559e <_dtoa_r+0x906>
 8005780:	4615      	mov	r5, r2
 8005782:	e7f7      	b.n	8005774 <_dtoa_r+0xadc>
 8005784:	9b06      	ldr	r3, [sp, #24]
 8005786:	4293      	cmp	r3, r2
 8005788:	d105      	bne.n	8005796 <_dtoa_r+0xafe>
 800578a:	2331      	movs	r3, #49	; 0x31
 800578c:	9a06      	ldr	r2, [sp, #24]
 800578e:	f10a 0a01 	add.w	sl, sl, #1
 8005792:	7013      	strb	r3, [r2, #0]
 8005794:	e703      	b.n	800559e <_dtoa_r+0x906>
 8005796:	4615      	mov	r5, r2
 8005798:	e7a1      	b.n	80056de <_dtoa_r+0xa46>
 800579a:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <_dtoa_r+0xb60>)
 800579c:	f7ff bae1 	b.w	8004d62 <_dtoa_r+0xca>
 80057a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f47f aabb 	bne.w	8004d1e <_dtoa_r+0x86>
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <_dtoa_r+0xb64>)
 80057aa:	f7ff bada 	b.w	8004d62 <_dtoa_r+0xca>
 80057ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	f77f ae3f 	ble.w	8005434 <_dtoa_r+0x79c>
 80057b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057b8:	9308      	str	r3, [sp, #32]
 80057ba:	e653      	b.n	8005464 <_dtoa_r+0x7cc>
 80057bc:	9b04      	ldr	r3, [sp, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dc03      	bgt.n	80057ca <_dtoa_r+0xb32>
 80057c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	f73f aed5 	bgt.w	8005574 <_dtoa_r+0x8dc>
 80057ca:	9d06      	ldr	r5, [sp, #24]
 80057cc:	4631      	mov	r1, r6
 80057ce:	4658      	mov	r0, fp
 80057d0:	f7ff f9d4 	bl	8004b7c <quorem>
 80057d4:	9b06      	ldr	r3, [sp, #24]
 80057d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80057da:	f805 8b01 	strb.w	r8, [r5], #1
 80057de:	9a04      	ldr	r2, [sp, #16]
 80057e0:	1aeb      	subs	r3, r5, r3
 80057e2:	429a      	cmp	r2, r3
 80057e4:	ddb5      	ble.n	8005752 <_dtoa_r+0xaba>
 80057e6:	4659      	mov	r1, fp
 80057e8:	2300      	movs	r3, #0
 80057ea:	220a      	movs	r2, #10
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 fbc1 	bl	8005f74 <__multadd>
 80057f2:	4683      	mov	fp, r0
 80057f4:	e7ea      	b.n	80057cc <_dtoa_r+0xb34>
 80057f6:	bf00      	nop
 80057f8:	08006c1c 	.word	0x08006c1c
 80057fc:	08006c98 	.word	0x08006c98

08005800 <rshift>:
 8005800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005802:	6906      	ldr	r6, [r0, #16]
 8005804:	114b      	asrs	r3, r1, #5
 8005806:	429e      	cmp	r6, r3
 8005808:	f100 0414 	add.w	r4, r0, #20
 800580c:	dd31      	ble.n	8005872 <rshift+0x72>
 800580e:	f011 011f 	ands.w	r1, r1, #31
 8005812:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005816:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800581a:	d108      	bne.n	800582e <rshift+0x2e>
 800581c:	4621      	mov	r1, r4
 800581e:	42b2      	cmp	r2, r6
 8005820:	460b      	mov	r3, r1
 8005822:	d211      	bcs.n	8005848 <rshift+0x48>
 8005824:	f852 3b04 	ldr.w	r3, [r2], #4
 8005828:	f841 3b04 	str.w	r3, [r1], #4
 800582c:	e7f7      	b.n	800581e <rshift+0x1e>
 800582e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005832:	4623      	mov	r3, r4
 8005834:	f1c1 0c20 	rsb	ip, r1, #32
 8005838:	40cd      	lsrs	r5, r1
 800583a:	3204      	adds	r2, #4
 800583c:	42b2      	cmp	r2, r6
 800583e:	4617      	mov	r7, r2
 8005840:	d30d      	bcc.n	800585e <rshift+0x5e>
 8005842:	601d      	str	r5, [r3, #0]
 8005844:	b105      	cbz	r5, 8005848 <rshift+0x48>
 8005846:	3304      	adds	r3, #4
 8005848:	42a3      	cmp	r3, r4
 800584a:	eba3 0204 	sub.w	r2, r3, r4
 800584e:	bf08      	it	eq
 8005850:	2300      	moveq	r3, #0
 8005852:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005856:	6102      	str	r2, [r0, #16]
 8005858:	bf08      	it	eq
 800585a:	6143      	streq	r3, [r0, #20]
 800585c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585e:	683f      	ldr	r7, [r7, #0]
 8005860:	fa07 f70c 	lsl.w	r7, r7, ip
 8005864:	433d      	orrs	r5, r7
 8005866:	f843 5b04 	str.w	r5, [r3], #4
 800586a:	f852 5b04 	ldr.w	r5, [r2], #4
 800586e:	40cd      	lsrs	r5, r1
 8005870:	e7e4      	b.n	800583c <rshift+0x3c>
 8005872:	4623      	mov	r3, r4
 8005874:	e7e8      	b.n	8005848 <rshift+0x48>

08005876 <__hexdig_fun>:
 8005876:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800587a:	2b09      	cmp	r3, #9
 800587c:	d802      	bhi.n	8005884 <__hexdig_fun+0xe>
 800587e:	3820      	subs	r0, #32
 8005880:	b2c0      	uxtb	r0, r0
 8005882:	4770      	bx	lr
 8005884:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005888:	2b05      	cmp	r3, #5
 800588a:	d801      	bhi.n	8005890 <__hexdig_fun+0x1a>
 800588c:	3847      	subs	r0, #71	; 0x47
 800588e:	e7f7      	b.n	8005880 <__hexdig_fun+0xa>
 8005890:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005894:	2b05      	cmp	r3, #5
 8005896:	d801      	bhi.n	800589c <__hexdig_fun+0x26>
 8005898:	3827      	subs	r0, #39	; 0x27
 800589a:	e7f1      	b.n	8005880 <__hexdig_fun+0xa>
 800589c:	2000      	movs	r0, #0
 800589e:	4770      	bx	lr

080058a0 <__gethex>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	b08b      	sub	sp, #44	; 0x2c
 80058a6:	9002      	str	r0, [sp, #8]
 80058a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80058aa:	468a      	mov	sl, r1
 80058ac:	4690      	mov	r8, r2
 80058ae:	9306      	str	r3, [sp, #24]
 80058b0:	f000 fad1 	bl	8005e56 <__localeconv_l>
 80058b4:	6803      	ldr	r3, [r0, #0]
 80058b6:	f04f 0b00 	mov.w	fp, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	9303      	str	r3, [sp, #12]
 80058be:	f7fa fc47 	bl	8000150 <strlen>
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	9001      	str	r0, [sp, #4]
 80058c6:	4403      	add	r3, r0
 80058c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80058cc:	9307      	str	r3, [sp, #28]
 80058ce:	f8da 3000 	ldr.w	r3, [sl]
 80058d2:	3302      	adds	r3, #2
 80058d4:	461f      	mov	r7, r3
 80058d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80058da:	2830      	cmp	r0, #48	; 0x30
 80058dc:	d06c      	beq.n	80059b8 <__gethex+0x118>
 80058de:	f7ff ffca 	bl	8005876 <__hexdig_fun>
 80058e2:	4604      	mov	r4, r0
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d16a      	bne.n	80059be <__gethex+0x11e>
 80058e8:	9a01      	ldr	r2, [sp, #4]
 80058ea:	9903      	ldr	r1, [sp, #12]
 80058ec:	4638      	mov	r0, r7
 80058ee:	f001 f905 	bl	8006afc <strncmp>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d166      	bne.n	80059c4 <__gethex+0x124>
 80058f6:	9b01      	ldr	r3, [sp, #4]
 80058f8:	5cf8      	ldrb	r0, [r7, r3]
 80058fa:	18fe      	adds	r6, r7, r3
 80058fc:	f7ff ffbb 	bl	8005876 <__hexdig_fun>
 8005900:	2800      	cmp	r0, #0
 8005902:	d062      	beq.n	80059ca <__gethex+0x12a>
 8005904:	4633      	mov	r3, r6
 8005906:	7818      	ldrb	r0, [r3, #0]
 8005908:	461f      	mov	r7, r3
 800590a:	2830      	cmp	r0, #48	; 0x30
 800590c:	f103 0301 	add.w	r3, r3, #1
 8005910:	d0f9      	beq.n	8005906 <__gethex+0x66>
 8005912:	f7ff ffb0 	bl	8005876 <__hexdig_fun>
 8005916:	fab0 f580 	clz	r5, r0
 800591a:	4634      	mov	r4, r6
 800591c:	f04f 0b01 	mov.w	fp, #1
 8005920:	096d      	lsrs	r5, r5, #5
 8005922:	463a      	mov	r2, r7
 8005924:	4616      	mov	r6, r2
 8005926:	7830      	ldrb	r0, [r6, #0]
 8005928:	3201      	adds	r2, #1
 800592a:	f7ff ffa4 	bl	8005876 <__hexdig_fun>
 800592e:	2800      	cmp	r0, #0
 8005930:	d1f8      	bne.n	8005924 <__gethex+0x84>
 8005932:	9a01      	ldr	r2, [sp, #4]
 8005934:	9903      	ldr	r1, [sp, #12]
 8005936:	4630      	mov	r0, r6
 8005938:	f001 f8e0 	bl	8006afc <strncmp>
 800593c:	b950      	cbnz	r0, 8005954 <__gethex+0xb4>
 800593e:	b954      	cbnz	r4, 8005956 <__gethex+0xb6>
 8005940:	9b01      	ldr	r3, [sp, #4]
 8005942:	18f4      	adds	r4, r6, r3
 8005944:	4622      	mov	r2, r4
 8005946:	4616      	mov	r6, r2
 8005948:	7830      	ldrb	r0, [r6, #0]
 800594a:	3201      	adds	r2, #1
 800594c:	f7ff ff93 	bl	8005876 <__hexdig_fun>
 8005950:	2800      	cmp	r0, #0
 8005952:	d1f8      	bne.n	8005946 <__gethex+0xa6>
 8005954:	b10c      	cbz	r4, 800595a <__gethex+0xba>
 8005956:	1ba4      	subs	r4, r4, r6
 8005958:	00a4      	lsls	r4, r4, #2
 800595a:	7833      	ldrb	r3, [r6, #0]
 800595c:	2b50      	cmp	r3, #80	; 0x50
 800595e:	d001      	beq.n	8005964 <__gethex+0xc4>
 8005960:	2b70      	cmp	r3, #112	; 0x70
 8005962:	d140      	bne.n	80059e6 <__gethex+0x146>
 8005964:	7873      	ldrb	r3, [r6, #1]
 8005966:	2b2b      	cmp	r3, #43	; 0x2b
 8005968:	d031      	beq.n	80059ce <__gethex+0x12e>
 800596a:	2b2d      	cmp	r3, #45	; 0x2d
 800596c:	d033      	beq.n	80059d6 <__gethex+0x136>
 800596e:	f04f 0900 	mov.w	r9, #0
 8005972:	1c71      	adds	r1, r6, #1
 8005974:	7808      	ldrb	r0, [r1, #0]
 8005976:	f7ff ff7e 	bl	8005876 <__hexdig_fun>
 800597a:	1e43      	subs	r3, r0, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b18      	cmp	r3, #24
 8005980:	d831      	bhi.n	80059e6 <__gethex+0x146>
 8005982:	f1a0 0210 	sub.w	r2, r0, #16
 8005986:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800598a:	f7ff ff74 	bl	8005876 <__hexdig_fun>
 800598e:	1e43      	subs	r3, r0, #1
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b18      	cmp	r3, #24
 8005994:	d922      	bls.n	80059dc <__gethex+0x13c>
 8005996:	f1b9 0f00 	cmp.w	r9, #0
 800599a:	d000      	beq.n	800599e <__gethex+0xfe>
 800599c:	4252      	negs	r2, r2
 800599e:	4414      	add	r4, r2
 80059a0:	f8ca 1000 	str.w	r1, [sl]
 80059a4:	b30d      	cbz	r5, 80059ea <__gethex+0x14a>
 80059a6:	f1bb 0f00 	cmp.w	fp, #0
 80059aa:	bf0c      	ite	eq
 80059ac:	2706      	moveq	r7, #6
 80059ae:	2700      	movne	r7, #0
 80059b0:	4638      	mov	r0, r7
 80059b2:	b00b      	add	sp, #44	; 0x2c
 80059b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b8:	f10b 0b01 	add.w	fp, fp, #1
 80059bc:	e78a      	b.n	80058d4 <__gethex+0x34>
 80059be:	2500      	movs	r5, #0
 80059c0:	462c      	mov	r4, r5
 80059c2:	e7ae      	b.n	8005922 <__gethex+0x82>
 80059c4:	463e      	mov	r6, r7
 80059c6:	2501      	movs	r5, #1
 80059c8:	e7c7      	b.n	800595a <__gethex+0xba>
 80059ca:	4604      	mov	r4, r0
 80059cc:	e7fb      	b.n	80059c6 <__gethex+0x126>
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	1cb1      	adds	r1, r6, #2
 80059d4:	e7ce      	b.n	8005974 <__gethex+0xd4>
 80059d6:	f04f 0901 	mov.w	r9, #1
 80059da:	e7fa      	b.n	80059d2 <__gethex+0x132>
 80059dc:	230a      	movs	r3, #10
 80059de:	fb03 0202 	mla	r2, r3, r2, r0
 80059e2:	3a10      	subs	r2, #16
 80059e4:	e7cf      	b.n	8005986 <__gethex+0xe6>
 80059e6:	4631      	mov	r1, r6
 80059e8:	e7da      	b.n	80059a0 <__gethex+0x100>
 80059ea:	4629      	mov	r1, r5
 80059ec:	1bf3      	subs	r3, r6, r7
 80059ee:	3b01      	subs	r3, #1
 80059f0:	2b07      	cmp	r3, #7
 80059f2:	dc49      	bgt.n	8005a88 <__gethex+0x1e8>
 80059f4:	9802      	ldr	r0, [sp, #8]
 80059f6:	f000 fa72 	bl	8005ede <_Balloc>
 80059fa:	f04f 0b00 	mov.w	fp, #0
 80059fe:	4605      	mov	r5, r0
 8005a00:	46da      	mov	sl, fp
 8005a02:	9b01      	ldr	r3, [sp, #4]
 8005a04:	f100 0914 	add.w	r9, r0, #20
 8005a08:	f1c3 0301 	rsb	r3, r3, #1
 8005a0c:	f8cd 9010 	str.w	r9, [sp, #16]
 8005a10:	9308      	str	r3, [sp, #32]
 8005a12:	42b7      	cmp	r7, r6
 8005a14:	d33b      	bcc.n	8005a8e <__gethex+0x1ee>
 8005a16:	9804      	ldr	r0, [sp, #16]
 8005a18:	f840 ab04 	str.w	sl, [r0], #4
 8005a1c:	eba0 0009 	sub.w	r0, r0, r9
 8005a20:	1080      	asrs	r0, r0, #2
 8005a22:	6128      	str	r0, [r5, #16]
 8005a24:	0147      	lsls	r7, r0, #5
 8005a26:	4650      	mov	r0, sl
 8005a28:	f000 fb1d 	bl	8006066 <__hi0bits>
 8005a2c:	f8d8 6000 	ldr.w	r6, [r8]
 8005a30:	1a3f      	subs	r7, r7, r0
 8005a32:	42b7      	cmp	r7, r6
 8005a34:	dd64      	ble.n	8005b00 <__gethex+0x260>
 8005a36:	1bbf      	subs	r7, r7, r6
 8005a38:	4639      	mov	r1, r7
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 fe27 	bl	800668e <__any_on>
 8005a40:	4682      	mov	sl, r0
 8005a42:	b178      	cbz	r0, 8005a64 <__gethex+0x1c4>
 8005a44:	f04f 0a01 	mov.w	sl, #1
 8005a48:	1e7b      	subs	r3, r7, #1
 8005a4a:	1159      	asrs	r1, r3, #5
 8005a4c:	f003 021f 	and.w	r2, r3, #31
 8005a50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005a54:	fa0a f202 	lsl.w	r2, sl, r2
 8005a58:	420a      	tst	r2, r1
 8005a5a:	d003      	beq.n	8005a64 <__gethex+0x1c4>
 8005a5c:	4553      	cmp	r3, sl
 8005a5e:	dc46      	bgt.n	8005aee <__gethex+0x24e>
 8005a60:	f04f 0a02 	mov.w	sl, #2
 8005a64:	4639      	mov	r1, r7
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7ff feca 	bl	8005800 <rshift>
 8005a6c:	443c      	add	r4, r7
 8005a6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	da52      	bge.n	8005b1c <__gethex+0x27c>
 8005a76:	4629      	mov	r1, r5
 8005a78:	9802      	ldr	r0, [sp, #8]
 8005a7a:	f000 fa64 	bl	8005f46 <_Bfree>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a82:	27a3      	movs	r7, #163	; 0xa3
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e793      	b.n	80059b0 <__gethex+0x110>
 8005a88:	3101      	adds	r1, #1
 8005a8a:	105b      	asrs	r3, r3, #1
 8005a8c:	e7b0      	b.n	80059f0 <__gethex+0x150>
 8005a8e:	1e73      	subs	r3, r6, #1
 8005a90:	9305      	str	r3, [sp, #20]
 8005a92:	9a07      	ldr	r2, [sp, #28]
 8005a94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <__gethex+0x22e>
 8005a9c:	f1bb 0f20 	cmp.w	fp, #32
 8005aa0:	d107      	bne.n	8005ab2 <__gethex+0x212>
 8005aa2:	9b04      	ldr	r3, [sp, #16]
 8005aa4:	f8c3 a000 	str.w	sl, [r3]
 8005aa8:	f04f 0a00 	mov.w	sl, #0
 8005aac:	46d3      	mov	fp, sl
 8005aae:	3304      	adds	r3, #4
 8005ab0:	9304      	str	r3, [sp, #16]
 8005ab2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005ab6:	f7ff fede 	bl	8005876 <__hexdig_fun>
 8005aba:	f000 000f 	and.w	r0, r0, #15
 8005abe:	fa00 f00b 	lsl.w	r0, r0, fp
 8005ac2:	ea4a 0a00 	orr.w	sl, sl, r0
 8005ac6:	f10b 0b04 	add.w	fp, fp, #4
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	e00d      	b.n	8005aea <__gethex+0x24a>
 8005ace:	9b05      	ldr	r3, [sp, #20]
 8005ad0:	9a08      	ldr	r2, [sp, #32]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	42bb      	cmp	r3, r7
 8005ad6:	d3e1      	bcc.n	8005a9c <__gethex+0x1fc>
 8005ad8:	4618      	mov	r0, r3
 8005ada:	9a01      	ldr	r2, [sp, #4]
 8005adc:	9903      	ldr	r1, [sp, #12]
 8005ade:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae0:	f001 f80c 	bl	8006afc <strncmp>
 8005ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1d8      	bne.n	8005a9c <__gethex+0x1fc>
 8005aea:	461e      	mov	r6, r3
 8005aec:	e791      	b.n	8005a12 <__gethex+0x172>
 8005aee:	1eb9      	subs	r1, r7, #2
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 fdcc 	bl	800668e <__any_on>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d0b2      	beq.n	8005a60 <__gethex+0x1c0>
 8005afa:	f04f 0a03 	mov.w	sl, #3
 8005afe:	e7b1      	b.n	8005a64 <__gethex+0x1c4>
 8005b00:	da09      	bge.n	8005b16 <__gethex+0x276>
 8005b02:	1bf7      	subs	r7, r6, r7
 8005b04:	4629      	mov	r1, r5
 8005b06:	463a      	mov	r2, r7
 8005b08:	9802      	ldr	r0, [sp, #8]
 8005b0a:	f000 fbe7 	bl	80062dc <__lshift>
 8005b0e:	4605      	mov	r5, r0
 8005b10:	1be4      	subs	r4, r4, r7
 8005b12:	f100 0914 	add.w	r9, r0, #20
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	e7a8      	b.n	8005a6e <__gethex+0x1ce>
 8005b1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	dd6b      	ble.n	8005bfc <__gethex+0x35c>
 8005b24:	1b04      	subs	r4, r0, r4
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	dc2e      	bgt.n	8005b88 <__gethex+0x2e8>
 8005b2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d022      	beq.n	8005b78 <__gethex+0x2d8>
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d024      	beq.n	8005b80 <__gethex+0x2e0>
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d115      	bne.n	8005b66 <__gethex+0x2c6>
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d113      	bne.n	8005b66 <__gethex+0x2c6>
 8005b3e:	2e01      	cmp	r6, #1
 8005b40:	dc0b      	bgt.n	8005b5a <__gethex+0x2ba>
 8005b42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005b46:	9a06      	ldr	r2, [sp, #24]
 8005b48:	2762      	movs	r7, #98	; 0x62
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	612b      	str	r3, [r5, #16]
 8005b50:	f8c9 3000 	str.w	r3, [r9]
 8005b54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b56:	601d      	str	r5, [r3, #0]
 8005b58:	e72a      	b.n	80059b0 <__gethex+0x110>
 8005b5a:	1e71      	subs	r1, r6, #1
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 fd96 	bl	800668e <__any_on>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d1ed      	bne.n	8005b42 <__gethex+0x2a2>
 8005b66:	4629      	mov	r1, r5
 8005b68:	9802      	ldr	r0, [sp, #8]
 8005b6a:	f000 f9ec 	bl	8005f46 <_Bfree>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b72:	2750      	movs	r7, #80	; 0x50
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e71b      	b.n	80059b0 <__gethex+0x110>
 8005b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0e1      	beq.n	8005b42 <__gethex+0x2a2>
 8005b7e:	e7f2      	b.n	8005b66 <__gethex+0x2c6>
 8005b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1dd      	bne.n	8005b42 <__gethex+0x2a2>
 8005b86:	e7ee      	b.n	8005b66 <__gethex+0x2c6>
 8005b88:	1e67      	subs	r7, r4, #1
 8005b8a:	f1ba 0f00 	cmp.w	sl, #0
 8005b8e:	d132      	bne.n	8005bf6 <__gethex+0x356>
 8005b90:	b127      	cbz	r7, 8005b9c <__gethex+0x2fc>
 8005b92:	4639      	mov	r1, r7
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 fd7a 	bl	800668e <__any_on>
 8005b9a:	4682      	mov	sl, r0
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	117a      	asrs	r2, r7, #5
 8005ba0:	f007 071f 	and.w	r7, r7, #31
 8005ba4:	fa03 f707 	lsl.w	r7, r3, r7
 8005ba8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005bac:	4621      	mov	r1, r4
 8005bae:	421f      	tst	r7, r3
 8005bb0:	f04f 0702 	mov.w	r7, #2
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	bf18      	it	ne
 8005bb8:	f04a 0a02 	orrne.w	sl, sl, #2
 8005bbc:	1b36      	subs	r6, r6, r4
 8005bbe:	f7ff fe1f 	bl	8005800 <rshift>
 8005bc2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005bc6:	f1ba 0f00 	cmp.w	sl, #0
 8005bca:	d048      	beq.n	8005c5e <__gethex+0x3be>
 8005bcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d015      	beq.n	8005c00 <__gethex+0x360>
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d017      	beq.n	8005c08 <__gethex+0x368>
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d109      	bne.n	8005bf0 <__gethex+0x350>
 8005bdc:	f01a 0f02 	tst.w	sl, #2
 8005be0:	d006      	beq.n	8005bf0 <__gethex+0x350>
 8005be2:	f8d9 3000 	ldr.w	r3, [r9]
 8005be6:	ea4a 0a03 	orr.w	sl, sl, r3
 8005bea:	f01a 0f01 	tst.w	sl, #1
 8005bee:	d10e      	bne.n	8005c0e <__gethex+0x36e>
 8005bf0:	f047 0710 	orr.w	r7, r7, #16
 8005bf4:	e033      	b.n	8005c5e <__gethex+0x3be>
 8005bf6:	f04f 0a01 	mov.w	sl, #1
 8005bfa:	e7cf      	b.n	8005b9c <__gethex+0x2fc>
 8005bfc:	2701      	movs	r7, #1
 8005bfe:	e7e2      	b.n	8005bc6 <__gethex+0x326>
 8005c00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c02:	f1c3 0301 	rsb	r3, r3, #1
 8005c06:	9315      	str	r3, [sp, #84]	; 0x54
 8005c08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0f0      	beq.n	8005bf0 <__gethex+0x350>
 8005c0e:	f04f 0c00 	mov.w	ip, #0
 8005c12:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005c16:	f105 0314 	add.w	r3, r5, #20
 8005c1a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005c1e:	eb03 010a 	add.w	r1, r3, sl
 8005c22:	4618      	mov	r0, r3
 8005c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c28:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005c2c:	d01c      	beq.n	8005c68 <__gethex+0x3c8>
 8005c2e:	3201      	adds	r2, #1
 8005c30:	6002      	str	r2, [r0, #0]
 8005c32:	2f02      	cmp	r7, #2
 8005c34:	f105 0314 	add.w	r3, r5, #20
 8005c38:	d138      	bne.n	8005cac <__gethex+0x40c>
 8005c3a:	f8d8 2000 	ldr.w	r2, [r8]
 8005c3e:	3a01      	subs	r2, #1
 8005c40:	42b2      	cmp	r2, r6
 8005c42:	d10a      	bne.n	8005c5a <__gethex+0x3ba>
 8005c44:	2201      	movs	r2, #1
 8005c46:	1171      	asrs	r1, r6, #5
 8005c48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c4c:	f006 061f 	and.w	r6, r6, #31
 8005c50:	fa02 f606 	lsl.w	r6, r2, r6
 8005c54:	421e      	tst	r6, r3
 8005c56:	bf18      	it	ne
 8005c58:	4617      	movne	r7, r2
 8005c5a:	f047 0720 	orr.w	r7, r7, #32
 8005c5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c60:	601d      	str	r5, [r3, #0]
 8005c62:	9b06      	ldr	r3, [sp, #24]
 8005c64:	601c      	str	r4, [r3, #0]
 8005c66:	e6a3      	b.n	80059b0 <__gethex+0x110>
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	f843 cc04 	str.w	ip, [r3, #-4]
 8005c6e:	d8d8      	bhi.n	8005c22 <__gethex+0x382>
 8005c70:	68ab      	ldr	r3, [r5, #8]
 8005c72:	4599      	cmp	r9, r3
 8005c74:	db12      	blt.n	8005c9c <__gethex+0x3fc>
 8005c76:	6869      	ldr	r1, [r5, #4]
 8005c78:	9802      	ldr	r0, [sp, #8]
 8005c7a:	3101      	adds	r1, #1
 8005c7c:	f000 f92f 	bl	8005ede <_Balloc>
 8005c80:	4683      	mov	fp, r0
 8005c82:	692a      	ldr	r2, [r5, #16]
 8005c84:	f105 010c 	add.w	r1, r5, #12
 8005c88:	3202      	adds	r2, #2
 8005c8a:	0092      	lsls	r2, r2, #2
 8005c8c:	300c      	adds	r0, #12
 8005c8e:	f000 f91b 	bl	8005ec8 <memcpy>
 8005c92:	4629      	mov	r1, r5
 8005c94:	9802      	ldr	r0, [sp, #8]
 8005c96:	f000 f956 	bl	8005f46 <_Bfree>
 8005c9a:	465d      	mov	r5, fp
 8005c9c:	692b      	ldr	r3, [r5, #16]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	612a      	str	r2, [r5, #16]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005ca8:	615a      	str	r2, [r3, #20]
 8005caa:	e7c2      	b.n	8005c32 <__gethex+0x392>
 8005cac:	692a      	ldr	r2, [r5, #16]
 8005cae:	454a      	cmp	r2, r9
 8005cb0:	dd0b      	ble.n	8005cca <__gethex+0x42a>
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f7ff fda3 	bl	8005800 <rshift>
 8005cba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cbe:	3401      	adds	r4, #1
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	f6ff aed8 	blt.w	8005a76 <__gethex+0x1d6>
 8005cc6:	2701      	movs	r7, #1
 8005cc8:	e7c7      	b.n	8005c5a <__gethex+0x3ba>
 8005cca:	f016 061f 	ands.w	r6, r6, #31
 8005cce:	d0fa      	beq.n	8005cc6 <__gethex+0x426>
 8005cd0:	449a      	add	sl, r3
 8005cd2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005cd6:	f000 f9c6 	bl	8006066 <__hi0bits>
 8005cda:	f1c6 0620 	rsb	r6, r6, #32
 8005cde:	42b0      	cmp	r0, r6
 8005ce0:	dbe7      	blt.n	8005cb2 <__gethex+0x412>
 8005ce2:	e7f0      	b.n	8005cc6 <__gethex+0x426>

08005ce4 <L_shift>:
 8005ce4:	f1c2 0208 	rsb	r2, r2, #8
 8005ce8:	0092      	lsls	r2, r2, #2
 8005cea:	b570      	push	{r4, r5, r6, lr}
 8005cec:	f1c2 0620 	rsb	r6, r2, #32
 8005cf0:	6843      	ldr	r3, [r0, #4]
 8005cf2:	6804      	ldr	r4, [r0, #0]
 8005cf4:	fa03 f506 	lsl.w	r5, r3, r6
 8005cf8:	432c      	orrs	r4, r5
 8005cfa:	40d3      	lsrs	r3, r2
 8005cfc:	6004      	str	r4, [r0, #0]
 8005cfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8005d02:	4288      	cmp	r0, r1
 8005d04:	d3f4      	bcc.n	8005cf0 <L_shift+0xc>
 8005d06:	bd70      	pop	{r4, r5, r6, pc}

08005d08 <__match>:
 8005d08:	b530      	push	{r4, r5, lr}
 8005d0a:	6803      	ldr	r3, [r0, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d12:	b914      	cbnz	r4, 8005d1a <__match+0x12>
 8005d14:	6003      	str	r3, [r0, #0]
 8005d16:	2001      	movs	r0, #1
 8005d18:	bd30      	pop	{r4, r5, pc}
 8005d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005d22:	2d19      	cmp	r5, #25
 8005d24:	bf98      	it	ls
 8005d26:	3220      	addls	r2, #32
 8005d28:	42a2      	cmp	r2, r4
 8005d2a:	d0f0      	beq.n	8005d0e <__match+0x6>
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e7f3      	b.n	8005d18 <__match+0x10>

08005d30 <__hexnan>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	2500      	movs	r5, #0
 8005d36:	680b      	ldr	r3, [r1, #0]
 8005d38:	4682      	mov	sl, r0
 8005d3a:	115f      	asrs	r7, r3, #5
 8005d3c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005d40:	f013 031f 	ands.w	r3, r3, #31
 8005d44:	bf18      	it	ne
 8005d46:	3704      	addne	r7, #4
 8005d48:	1f3e      	subs	r6, r7, #4
 8005d4a:	4690      	mov	r8, r2
 8005d4c:	46b1      	mov	r9, r6
 8005d4e:	4634      	mov	r4, r6
 8005d50:	46ab      	mov	fp, r5
 8005d52:	b087      	sub	sp, #28
 8005d54:	6801      	ldr	r1, [r0, #0]
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	f847 5c04 	str.w	r5, [r7, #-4]
 8005d5c:	9502      	str	r5, [sp, #8]
 8005d5e:	784a      	ldrb	r2, [r1, #1]
 8005d60:	1c4b      	adds	r3, r1, #1
 8005d62:	9303      	str	r3, [sp, #12]
 8005d64:	b342      	cbz	r2, 8005db8 <__hexnan+0x88>
 8005d66:	4610      	mov	r0, r2
 8005d68:	9105      	str	r1, [sp, #20]
 8005d6a:	9204      	str	r2, [sp, #16]
 8005d6c:	f7ff fd83 	bl	8005876 <__hexdig_fun>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d143      	bne.n	8005dfc <__hexnan+0xcc>
 8005d74:	9a04      	ldr	r2, [sp, #16]
 8005d76:	9905      	ldr	r1, [sp, #20]
 8005d78:	2a20      	cmp	r2, #32
 8005d7a:	d818      	bhi.n	8005dae <__hexnan+0x7e>
 8005d7c:	9b02      	ldr	r3, [sp, #8]
 8005d7e:	459b      	cmp	fp, r3
 8005d80:	dd13      	ble.n	8005daa <__hexnan+0x7a>
 8005d82:	454c      	cmp	r4, r9
 8005d84:	d206      	bcs.n	8005d94 <__hexnan+0x64>
 8005d86:	2d07      	cmp	r5, #7
 8005d88:	dc04      	bgt.n	8005d94 <__hexnan+0x64>
 8005d8a:	462a      	mov	r2, r5
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f7ff ffa8 	bl	8005ce4 <L_shift>
 8005d94:	4544      	cmp	r4, r8
 8005d96:	d944      	bls.n	8005e22 <__hexnan+0xf2>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f1a4 0904 	sub.w	r9, r4, #4
 8005d9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005da2:	461d      	mov	r5, r3
 8005da4:	464c      	mov	r4, r9
 8005da6:	f8cd b008 	str.w	fp, [sp, #8]
 8005daa:	9903      	ldr	r1, [sp, #12]
 8005dac:	e7d7      	b.n	8005d5e <__hexnan+0x2e>
 8005dae:	2a29      	cmp	r2, #41	; 0x29
 8005db0:	d14a      	bne.n	8005e48 <__hexnan+0x118>
 8005db2:	3102      	adds	r1, #2
 8005db4:	f8ca 1000 	str.w	r1, [sl]
 8005db8:	f1bb 0f00 	cmp.w	fp, #0
 8005dbc:	d044      	beq.n	8005e48 <__hexnan+0x118>
 8005dbe:	454c      	cmp	r4, r9
 8005dc0:	d206      	bcs.n	8005dd0 <__hexnan+0xa0>
 8005dc2:	2d07      	cmp	r5, #7
 8005dc4:	dc04      	bgt.n	8005dd0 <__hexnan+0xa0>
 8005dc6:	462a      	mov	r2, r5
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f7ff ff8a 	bl	8005ce4 <L_shift>
 8005dd0:	4544      	cmp	r4, r8
 8005dd2:	d928      	bls.n	8005e26 <__hexnan+0xf6>
 8005dd4:	4643      	mov	r3, r8
 8005dd6:	f854 2b04 	ldr.w	r2, [r4], #4
 8005dda:	42a6      	cmp	r6, r4
 8005ddc:	f843 2b04 	str.w	r2, [r3], #4
 8005de0:	d2f9      	bcs.n	8005dd6 <__hexnan+0xa6>
 8005de2:	2200      	movs	r2, #0
 8005de4:	f843 2b04 	str.w	r2, [r3], #4
 8005de8:	429e      	cmp	r6, r3
 8005dea:	d2fb      	bcs.n	8005de4 <__hexnan+0xb4>
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	b91b      	cbnz	r3, 8005df8 <__hexnan+0xc8>
 8005df0:	4546      	cmp	r6, r8
 8005df2:	d127      	bne.n	8005e44 <__hexnan+0x114>
 8005df4:	2301      	movs	r3, #1
 8005df6:	6033      	str	r3, [r6, #0]
 8005df8:	2005      	movs	r0, #5
 8005dfa:	e026      	b.n	8005e4a <__hexnan+0x11a>
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	2d08      	cmp	r5, #8
 8005e00:	f10b 0b01 	add.w	fp, fp, #1
 8005e04:	dd06      	ble.n	8005e14 <__hexnan+0xe4>
 8005e06:	4544      	cmp	r4, r8
 8005e08:	d9cf      	bls.n	8005daa <__hexnan+0x7a>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2501      	movs	r5, #1
 8005e0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005e12:	3c04      	subs	r4, #4
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	f000 000f 	and.w	r0, r0, #15
 8005e1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005e1e:	6020      	str	r0, [r4, #0]
 8005e20:	e7c3      	b.n	8005daa <__hexnan+0x7a>
 8005e22:	2508      	movs	r5, #8
 8005e24:	e7c1      	b.n	8005daa <__hexnan+0x7a>
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0df      	beq.n	8005dec <__hexnan+0xbc>
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	f1c3 0320 	rsb	r3, r3, #32
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
 8005e38:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005e3c:	401a      	ands	r2, r3
 8005e3e:	f847 2c04 	str.w	r2, [r7, #-4]
 8005e42:	e7d3      	b.n	8005dec <__hexnan+0xbc>
 8005e44:	3e04      	subs	r6, #4
 8005e46:	e7d1      	b.n	8005dec <__hexnan+0xbc>
 8005e48:	2004      	movs	r0, #4
 8005e4a:	b007      	add	sp, #28
 8005e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e50 <__locale_ctype_ptr_l>:
 8005e50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005e54:	4770      	bx	lr

08005e56 <__localeconv_l>:
 8005e56:	30f0      	adds	r0, #240	; 0xf0
 8005e58:	4770      	bx	lr
	...

08005e5c <_localeconv_r>:
 8005e5c:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <_localeconv_r+0x14>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a18      	ldr	r0, [r3, #32]
 8005e62:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <_localeconv_r+0x18>)
 8005e64:	2800      	cmp	r0, #0
 8005e66:	bf08      	it	eq
 8005e68:	4618      	moveq	r0, r3
 8005e6a:	30f0      	adds	r0, #240	; 0xf0
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000010 	.word	0x20000010
 8005e74:	20000074 	.word	0x20000074

08005e78 <malloc>:
 8005e78:	4b02      	ldr	r3, [pc, #8]	; (8005e84 <malloc+0xc>)
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	f000 bc81 	b.w	8006784 <_malloc_r>
 8005e82:	bf00      	nop
 8005e84:	20000010 	.word	0x20000010

08005e88 <__ascii_mbtowc>:
 8005e88:	b082      	sub	sp, #8
 8005e8a:	b901      	cbnz	r1, 8005e8e <__ascii_mbtowc+0x6>
 8005e8c:	a901      	add	r1, sp, #4
 8005e8e:	b142      	cbz	r2, 8005ea2 <__ascii_mbtowc+0x1a>
 8005e90:	b14b      	cbz	r3, 8005ea6 <__ascii_mbtowc+0x1e>
 8005e92:	7813      	ldrb	r3, [r2, #0]
 8005e94:	600b      	str	r3, [r1, #0]
 8005e96:	7812      	ldrb	r2, [r2, #0]
 8005e98:	1c10      	adds	r0, r2, #0
 8005e9a:	bf18      	it	ne
 8005e9c:	2001      	movne	r0, #1
 8005e9e:	b002      	add	sp, #8
 8005ea0:	4770      	bx	lr
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	e7fb      	b.n	8005e9e <__ascii_mbtowc+0x16>
 8005ea6:	f06f 0001 	mvn.w	r0, #1
 8005eaa:	e7f8      	b.n	8005e9e <__ascii_mbtowc+0x16>

08005eac <memchr>:
 8005eac:	b510      	push	{r4, lr}
 8005eae:	b2c9      	uxtb	r1, r1
 8005eb0:	4402      	add	r2, r0
 8005eb2:	4290      	cmp	r0, r2
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	d101      	bne.n	8005ebc <memchr+0x10>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e003      	b.n	8005ec4 <memchr+0x18>
 8005ebc:	781c      	ldrb	r4, [r3, #0]
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	428c      	cmp	r4, r1
 8005ec2:	d1f6      	bne.n	8005eb2 <memchr+0x6>
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	bd10      	pop	{r4, pc}

08005ec8 <memcpy>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	1e43      	subs	r3, r0, #1
 8005ecc:	440a      	add	r2, r1
 8005ece:	4291      	cmp	r1, r2
 8005ed0:	d100      	bne.n	8005ed4 <memcpy+0xc>
 8005ed2:	bd10      	pop	{r4, pc}
 8005ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005edc:	e7f7      	b.n	8005ece <memcpy+0x6>

08005ede <_Balloc>:
 8005ede:	b570      	push	{r4, r5, r6, lr}
 8005ee0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	460e      	mov	r6, r1
 8005ee6:	b93d      	cbnz	r5, 8005ef8 <_Balloc+0x1a>
 8005ee8:	2010      	movs	r0, #16
 8005eea:	f7ff ffc5 	bl	8005e78 <malloc>
 8005eee:	6260      	str	r0, [r4, #36]	; 0x24
 8005ef0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ef4:	6005      	str	r5, [r0, #0]
 8005ef6:	60c5      	str	r5, [r0, #12]
 8005ef8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005efa:	68eb      	ldr	r3, [r5, #12]
 8005efc:	b183      	cbz	r3, 8005f20 <_Balloc+0x42>
 8005efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f06:	b9b8      	cbnz	r0, 8005f38 <_Balloc+0x5a>
 8005f08:	2101      	movs	r1, #1
 8005f0a:	fa01 f506 	lsl.w	r5, r1, r6
 8005f0e:	1d6a      	adds	r2, r5, #5
 8005f10:	0092      	lsls	r2, r2, #2
 8005f12:	4620      	mov	r0, r4
 8005f14:	f000 fbdc 	bl	80066d0 <_calloc_r>
 8005f18:	b160      	cbz	r0, 8005f34 <_Balloc+0x56>
 8005f1a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f1e:	e00e      	b.n	8005f3e <_Balloc+0x60>
 8005f20:	2221      	movs	r2, #33	; 0x21
 8005f22:	2104      	movs	r1, #4
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 fbd3 	bl	80066d0 <_calloc_r>
 8005f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f2c:	60e8      	str	r0, [r5, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e4      	bne.n	8005efe <_Balloc+0x20>
 8005f34:	2000      	movs	r0, #0
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	6802      	ldr	r2, [r0, #0]
 8005f3a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f44:	e7f7      	b.n	8005f36 <_Balloc+0x58>

08005f46 <_Bfree>:
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	b93c      	cbnz	r4, 8005f60 <_Bfree+0x1a>
 8005f50:	2010      	movs	r0, #16
 8005f52:	f7ff ff91 	bl	8005e78 <malloc>
 8005f56:	6270      	str	r0, [r6, #36]	; 0x24
 8005f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f5c:	6004      	str	r4, [r0, #0]
 8005f5e:	60c4      	str	r4, [r0, #12]
 8005f60:	b13d      	cbz	r5, 8005f72 <_Bfree+0x2c>
 8005f62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f64:	686a      	ldr	r2, [r5, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f6c:	6029      	str	r1, [r5, #0]
 8005f6e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f72:	bd70      	pop	{r4, r5, r6, pc}

08005f74 <__multadd>:
 8005f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f78:	461f      	mov	r7, r3
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	2300      	movs	r3, #0
 8005f80:	690d      	ldr	r5, [r1, #16]
 8005f82:	f101 0c14 	add.w	ip, r1, #20
 8005f86:	f8dc 0000 	ldr.w	r0, [ip]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	b281      	uxth	r1, r0
 8005f8e:	fb02 7101 	mla	r1, r2, r1, r7
 8005f92:	0c00      	lsrs	r0, r0, #16
 8005f94:	0c0f      	lsrs	r7, r1, #16
 8005f96:	fb02 7000 	mla	r0, r2, r0, r7
 8005f9a:	b289      	uxth	r1, r1
 8005f9c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fa0:	429d      	cmp	r5, r3
 8005fa2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fa6:	f84c 1b04 	str.w	r1, [ip], #4
 8005faa:	dcec      	bgt.n	8005f86 <__multadd+0x12>
 8005fac:	b1d7      	cbz	r7, 8005fe4 <__multadd+0x70>
 8005fae:	68a3      	ldr	r3, [r4, #8]
 8005fb0:	42ab      	cmp	r3, r5
 8005fb2:	dc12      	bgt.n	8005fda <__multadd+0x66>
 8005fb4:	6861      	ldr	r1, [r4, #4]
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	3101      	adds	r1, #1
 8005fba:	f7ff ff90 	bl	8005ede <_Balloc>
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	6922      	ldr	r2, [r4, #16]
 8005fc2:	f104 010c 	add.w	r1, r4, #12
 8005fc6:	3202      	adds	r2, #2
 8005fc8:	0092      	lsls	r2, r2, #2
 8005fca:	300c      	adds	r0, #12
 8005fcc:	f7ff ff7c 	bl	8005ec8 <memcpy>
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7ff ffb7 	bl	8005f46 <_Bfree>
 8005fd8:	4644      	mov	r4, r8
 8005fda:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fde:	3501      	adds	r5, #1
 8005fe0:	615f      	str	r7, [r3, #20]
 8005fe2:	6125      	str	r5, [r4, #16]
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fea <__s2b>:
 8005fea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fee:	4615      	mov	r5, r2
 8005ff0:	2209      	movs	r2, #9
 8005ff2:	461f      	mov	r7, r3
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	2201      	movs	r2, #1
 8006000:	2100      	movs	r1, #0
 8006002:	429a      	cmp	r2, r3
 8006004:	db20      	blt.n	8006048 <__s2b+0x5e>
 8006006:	4630      	mov	r0, r6
 8006008:	f7ff ff69 	bl	8005ede <_Balloc>
 800600c:	9b08      	ldr	r3, [sp, #32]
 800600e:	2d09      	cmp	r5, #9
 8006010:	6143      	str	r3, [r0, #20]
 8006012:	f04f 0301 	mov.w	r3, #1
 8006016:	6103      	str	r3, [r0, #16]
 8006018:	dd19      	ble.n	800604e <__s2b+0x64>
 800601a:	f104 0809 	add.w	r8, r4, #9
 800601e:	46c1      	mov	r9, r8
 8006020:	442c      	add	r4, r5
 8006022:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006026:	4601      	mov	r1, r0
 8006028:	3b30      	subs	r3, #48	; 0x30
 800602a:	220a      	movs	r2, #10
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff ffa1 	bl	8005f74 <__multadd>
 8006032:	45a1      	cmp	r9, r4
 8006034:	d1f5      	bne.n	8006022 <__s2b+0x38>
 8006036:	eb08 0405 	add.w	r4, r8, r5
 800603a:	3c08      	subs	r4, #8
 800603c:	1b2d      	subs	r5, r5, r4
 800603e:	1963      	adds	r3, r4, r5
 8006040:	42bb      	cmp	r3, r7
 8006042:	db07      	blt.n	8006054 <__s2b+0x6a>
 8006044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006048:	0052      	lsls	r2, r2, #1
 800604a:	3101      	adds	r1, #1
 800604c:	e7d9      	b.n	8006002 <__s2b+0x18>
 800604e:	340a      	adds	r4, #10
 8006050:	2509      	movs	r5, #9
 8006052:	e7f3      	b.n	800603c <__s2b+0x52>
 8006054:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006058:	4601      	mov	r1, r0
 800605a:	3b30      	subs	r3, #48	; 0x30
 800605c:	220a      	movs	r2, #10
 800605e:	4630      	mov	r0, r6
 8006060:	f7ff ff88 	bl	8005f74 <__multadd>
 8006064:	e7eb      	b.n	800603e <__s2b+0x54>

08006066 <__hi0bits>:
 8006066:	0c02      	lsrs	r2, r0, #16
 8006068:	0412      	lsls	r2, r2, #16
 800606a:	4603      	mov	r3, r0
 800606c:	b9b2      	cbnz	r2, 800609c <__hi0bits+0x36>
 800606e:	0403      	lsls	r3, r0, #16
 8006070:	2010      	movs	r0, #16
 8006072:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006076:	bf04      	itt	eq
 8006078:	021b      	lsleq	r3, r3, #8
 800607a:	3008      	addeq	r0, #8
 800607c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006080:	bf04      	itt	eq
 8006082:	011b      	lsleq	r3, r3, #4
 8006084:	3004      	addeq	r0, #4
 8006086:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800608a:	bf04      	itt	eq
 800608c:	009b      	lsleq	r3, r3, #2
 800608e:	3002      	addeq	r0, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	db06      	blt.n	80060a2 <__hi0bits+0x3c>
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	d503      	bpl.n	80060a0 <__hi0bits+0x3a>
 8006098:	3001      	adds	r0, #1
 800609a:	4770      	bx	lr
 800609c:	2000      	movs	r0, #0
 800609e:	e7e8      	b.n	8006072 <__hi0bits+0xc>
 80060a0:	2020      	movs	r0, #32
 80060a2:	4770      	bx	lr

080060a4 <__lo0bits>:
 80060a4:	6803      	ldr	r3, [r0, #0]
 80060a6:	4601      	mov	r1, r0
 80060a8:	f013 0207 	ands.w	r2, r3, #7
 80060ac:	d00b      	beq.n	80060c6 <__lo0bits+0x22>
 80060ae:	07da      	lsls	r2, r3, #31
 80060b0:	d423      	bmi.n	80060fa <__lo0bits+0x56>
 80060b2:	0798      	lsls	r0, r3, #30
 80060b4:	bf49      	itett	mi
 80060b6:	085b      	lsrmi	r3, r3, #1
 80060b8:	089b      	lsrpl	r3, r3, #2
 80060ba:	2001      	movmi	r0, #1
 80060bc:	600b      	strmi	r3, [r1, #0]
 80060be:	bf5c      	itt	pl
 80060c0:	600b      	strpl	r3, [r1, #0]
 80060c2:	2002      	movpl	r0, #2
 80060c4:	4770      	bx	lr
 80060c6:	b298      	uxth	r0, r3
 80060c8:	b9a8      	cbnz	r0, 80060f6 <__lo0bits+0x52>
 80060ca:	2010      	movs	r0, #16
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060d2:	bf04      	itt	eq
 80060d4:	0a1b      	lsreq	r3, r3, #8
 80060d6:	3008      	addeq	r0, #8
 80060d8:	071a      	lsls	r2, r3, #28
 80060da:	bf04      	itt	eq
 80060dc:	091b      	lsreq	r3, r3, #4
 80060de:	3004      	addeq	r0, #4
 80060e0:	079a      	lsls	r2, r3, #30
 80060e2:	bf04      	itt	eq
 80060e4:	089b      	lsreq	r3, r3, #2
 80060e6:	3002      	addeq	r0, #2
 80060e8:	07da      	lsls	r2, r3, #31
 80060ea:	d402      	bmi.n	80060f2 <__lo0bits+0x4e>
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	d006      	beq.n	80060fe <__lo0bits+0x5a>
 80060f0:	3001      	adds	r0, #1
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	4770      	bx	lr
 80060f6:	4610      	mov	r0, r2
 80060f8:	e7e9      	b.n	80060ce <__lo0bits+0x2a>
 80060fa:	2000      	movs	r0, #0
 80060fc:	4770      	bx	lr
 80060fe:	2020      	movs	r0, #32
 8006100:	4770      	bx	lr

08006102 <__i2b>:
 8006102:	b510      	push	{r4, lr}
 8006104:	460c      	mov	r4, r1
 8006106:	2101      	movs	r1, #1
 8006108:	f7ff fee9 	bl	8005ede <_Balloc>
 800610c:	2201      	movs	r2, #1
 800610e:	6144      	str	r4, [r0, #20]
 8006110:	6102      	str	r2, [r0, #16]
 8006112:	bd10      	pop	{r4, pc}

08006114 <__multiply>:
 8006114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	4614      	mov	r4, r2
 800611a:	690a      	ldr	r2, [r1, #16]
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	4688      	mov	r8, r1
 8006120:	429a      	cmp	r2, r3
 8006122:	bfbe      	ittt	lt
 8006124:	460b      	movlt	r3, r1
 8006126:	46a0      	movlt	r8, r4
 8006128:	461c      	movlt	r4, r3
 800612a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800612e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006136:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800613a:	eb07 0609 	add.w	r6, r7, r9
 800613e:	42b3      	cmp	r3, r6
 8006140:	bfb8      	it	lt
 8006142:	3101      	addlt	r1, #1
 8006144:	f7ff fecb 	bl	8005ede <_Balloc>
 8006148:	f100 0514 	add.w	r5, r0, #20
 800614c:	462b      	mov	r3, r5
 800614e:	2200      	movs	r2, #0
 8006150:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006154:	4573      	cmp	r3, lr
 8006156:	d316      	bcc.n	8006186 <__multiply+0x72>
 8006158:	f104 0214 	add.w	r2, r4, #20
 800615c:	f108 0114 	add.w	r1, r8, #20
 8006160:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006164:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	9b00      	ldr	r3, [sp, #0]
 800616c:	9201      	str	r2, [sp, #4]
 800616e:	4293      	cmp	r3, r2
 8006170:	d80c      	bhi.n	800618c <__multiply+0x78>
 8006172:	2e00      	cmp	r6, #0
 8006174:	dd03      	ble.n	800617e <__multiply+0x6a>
 8006176:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800617a:	2b00      	cmp	r3, #0
 800617c:	d05d      	beq.n	800623a <__multiply+0x126>
 800617e:	6106      	str	r6, [r0, #16]
 8006180:	b003      	add	sp, #12
 8006182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006186:	f843 2b04 	str.w	r2, [r3], #4
 800618a:	e7e3      	b.n	8006154 <__multiply+0x40>
 800618c:	f8b2 b000 	ldrh.w	fp, [r2]
 8006190:	f1bb 0f00 	cmp.w	fp, #0
 8006194:	d023      	beq.n	80061de <__multiply+0xca>
 8006196:	4689      	mov	r9, r1
 8006198:	46ac      	mov	ip, r5
 800619a:	f04f 0800 	mov.w	r8, #0
 800619e:	f859 4b04 	ldr.w	r4, [r9], #4
 80061a2:	f8dc a000 	ldr.w	sl, [ip]
 80061a6:	b2a3      	uxth	r3, r4
 80061a8:	fa1f fa8a 	uxth.w	sl, sl
 80061ac:	fb0b a303 	mla	r3, fp, r3, sl
 80061b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80061b4:	f8dc 4000 	ldr.w	r4, [ip]
 80061b8:	4443      	add	r3, r8
 80061ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80061be:	fb0b 840a 	mla	r4, fp, sl, r8
 80061c2:	46e2      	mov	sl, ip
 80061c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061ce:	454f      	cmp	r7, r9
 80061d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80061d4:	f84a 3b04 	str.w	r3, [sl], #4
 80061d8:	d82b      	bhi.n	8006232 <__multiply+0x11e>
 80061da:	f8cc 8004 	str.w	r8, [ip, #4]
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	3204      	adds	r2, #4
 80061e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80061e6:	f1ba 0f00 	cmp.w	sl, #0
 80061ea:	d020      	beq.n	800622e <__multiply+0x11a>
 80061ec:	4689      	mov	r9, r1
 80061ee:	46a8      	mov	r8, r5
 80061f0:	f04f 0b00 	mov.w	fp, #0
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	f8b9 c000 	ldrh.w	ip, [r9]
 80061fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	fb0a 440c 	mla	r4, sl, ip, r4
 8006204:	46c4      	mov	ip, r8
 8006206:	445c      	add	r4, fp
 8006208:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800620c:	f84c 3b04 	str.w	r3, [ip], #4
 8006210:	f859 3b04 	ldr.w	r3, [r9], #4
 8006214:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006218:	0c1b      	lsrs	r3, r3, #16
 800621a:	fb0a b303 	mla	r3, sl, r3, fp
 800621e:	454f      	cmp	r7, r9
 8006220:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006224:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006228:	d805      	bhi.n	8006236 <__multiply+0x122>
 800622a:	f8c8 3004 	str.w	r3, [r8, #4]
 800622e:	3504      	adds	r5, #4
 8006230:	e79b      	b.n	800616a <__multiply+0x56>
 8006232:	46d4      	mov	ip, sl
 8006234:	e7b3      	b.n	800619e <__multiply+0x8a>
 8006236:	46e0      	mov	r8, ip
 8006238:	e7dd      	b.n	80061f6 <__multiply+0xe2>
 800623a:	3e01      	subs	r6, #1
 800623c:	e799      	b.n	8006172 <__multiply+0x5e>
	...

08006240 <__pow5mult>:
 8006240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006244:	4615      	mov	r5, r2
 8006246:	f012 0203 	ands.w	r2, r2, #3
 800624a:	4606      	mov	r6, r0
 800624c:	460f      	mov	r7, r1
 800624e:	d007      	beq.n	8006260 <__pow5mult+0x20>
 8006250:	4c21      	ldr	r4, [pc, #132]	; (80062d8 <__pow5mult+0x98>)
 8006252:	3a01      	subs	r2, #1
 8006254:	2300      	movs	r3, #0
 8006256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800625a:	f7ff fe8b 	bl	8005f74 <__multadd>
 800625e:	4607      	mov	r7, r0
 8006260:	10ad      	asrs	r5, r5, #2
 8006262:	d035      	beq.n	80062d0 <__pow5mult+0x90>
 8006264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006266:	b93c      	cbnz	r4, 8006278 <__pow5mult+0x38>
 8006268:	2010      	movs	r0, #16
 800626a:	f7ff fe05 	bl	8005e78 <malloc>
 800626e:	6270      	str	r0, [r6, #36]	; 0x24
 8006270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006274:	6004      	str	r4, [r0, #0]
 8006276:	60c4      	str	r4, [r0, #12]
 8006278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800627c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006280:	b94c      	cbnz	r4, 8006296 <__pow5mult+0x56>
 8006282:	f240 2171 	movw	r1, #625	; 0x271
 8006286:	4630      	mov	r0, r6
 8006288:	f7ff ff3b 	bl	8006102 <__i2b>
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	f8c8 0008 	str.w	r0, [r8, #8]
 8006294:	6003      	str	r3, [r0, #0]
 8006296:	f04f 0800 	mov.w	r8, #0
 800629a:	07eb      	lsls	r3, r5, #31
 800629c:	d50a      	bpl.n	80062b4 <__pow5mult+0x74>
 800629e:	4639      	mov	r1, r7
 80062a0:	4622      	mov	r2, r4
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff ff36 	bl	8006114 <__multiply>
 80062a8:	4681      	mov	r9, r0
 80062aa:	4639      	mov	r1, r7
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7ff fe4a 	bl	8005f46 <_Bfree>
 80062b2:	464f      	mov	r7, r9
 80062b4:	106d      	asrs	r5, r5, #1
 80062b6:	d00b      	beq.n	80062d0 <__pow5mult+0x90>
 80062b8:	6820      	ldr	r0, [r4, #0]
 80062ba:	b938      	cbnz	r0, 80062cc <__pow5mult+0x8c>
 80062bc:	4622      	mov	r2, r4
 80062be:	4621      	mov	r1, r4
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff ff27 	bl	8006114 <__multiply>
 80062c6:	6020      	str	r0, [r4, #0]
 80062c8:	f8c0 8000 	str.w	r8, [r0]
 80062cc:	4604      	mov	r4, r0
 80062ce:	e7e4      	b.n	800629a <__pow5mult+0x5a>
 80062d0:	4638      	mov	r0, r7
 80062d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d6:	bf00      	nop
 80062d8:	08006da0 	.word	0x08006da0

080062dc <__lshift>:
 80062dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	460c      	mov	r4, r1
 80062e2:	4607      	mov	r7, r0
 80062e4:	4616      	mov	r6, r2
 80062e6:	6923      	ldr	r3, [r4, #16]
 80062e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062ec:	eb0a 0903 	add.w	r9, sl, r3
 80062f0:	6849      	ldr	r1, [r1, #4]
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	f109 0501 	add.w	r5, r9, #1
 80062f8:	42ab      	cmp	r3, r5
 80062fa:	db32      	blt.n	8006362 <__lshift+0x86>
 80062fc:	4638      	mov	r0, r7
 80062fe:	f7ff fdee 	bl	8005ede <_Balloc>
 8006302:	2300      	movs	r3, #0
 8006304:	4680      	mov	r8, r0
 8006306:	461a      	mov	r2, r3
 8006308:	f100 0114 	add.w	r1, r0, #20
 800630c:	4553      	cmp	r3, sl
 800630e:	db2b      	blt.n	8006368 <__lshift+0x8c>
 8006310:	6920      	ldr	r0, [r4, #16]
 8006312:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006316:	f104 0314 	add.w	r3, r4, #20
 800631a:	f016 021f 	ands.w	r2, r6, #31
 800631e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006322:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006326:	d025      	beq.n	8006374 <__lshift+0x98>
 8006328:	2000      	movs	r0, #0
 800632a:	f1c2 0e20 	rsb	lr, r2, #32
 800632e:	468a      	mov	sl, r1
 8006330:	681e      	ldr	r6, [r3, #0]
 8006332:	4096      	lsls	r6, r2
 8006334:	4330      	orrs	r0, r6
 8006336:	f84a 0b04 	str.w	r0, [sl], #4
 800633a:	f853 0b04 	ldr.w	r0, [r3], #4
 800633e:	459c      	cmp	ip, r3
 8006340:	fa20 f00e 	lsr.w	r0, r0, lr
 8006344:	d814      	bhi.n	8006370 <__lshift+0x94>
 8006346:	6048      	str	r0, [r1, #4]
 8006348:	b108      	cbz	r0, 800634e <__lshift+0x72>
 800634a:	f109 0502 	add.w	r5, r9, #2
 800634e:	3d01      	subs	r5, #1
 8006350:	4638      	mov	r0, r7
 8006352:	f8c8 5010 	str.w	r5, [r8, #16]
 8006356:	4621      	mov	r1, r4
 8006358:	f7ff fdf5 	bl	8005f46 <_Bfree>
 800635c:	4640      	mov	r0, r8
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006362:	3101      	adds	r1, #1
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	e7c7      	b.n	80062f8 <__lshift+0x1c>
 8006368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800636c:	3301      	adds	r3, #1
 800636e:	e7cd      	b.n	800630c <__lshift+0x30>
 8006370:	4651      	mov	r1, sl
 8006372:	e7dc      	b.n	800632e <__lshift+0x52>
 8006374:	3904      	subs	r1, #4
 8006376:	f853 2b04 	ldr.w	r2, [r3], #4
 800637a:	459c      	cmp	ip, r3
 800637c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006380:	d8f9      	bhi.n	8006376 <__lshift+0x9a>
 8006382:	e7e4      	b.n	800634e <__lshift+0x72>

08006384 <__mcmp>:
 8006384:	6903      	ldr	r3, [r0, #16]
 8006386:	690a      	ldr	r2, [r1, #16]
 8006388:	b530      	push	{r4, r5, lr}
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	d10c      	bne.n	80063a8 <__mcmp+0x24>
 800638e:	0092      	lsls	r2, r2, #2
 8006390:	3014      	adds	r0, #20
 8006392:	3114      	adds	r1, #20
 8006394:	1884      	adds	r4, r0, r2
 8006396:	4411      	add	r1, r2
 8006398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800639c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063a0:	4295      	cmp	r5, r2
 80063a2:	d003      	beq.n	80063ac <__mcmp+0x28>
 80063a4:	d305      	bcc.n	80063b2 <__mcmp+0x2e>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4618      	mov	r0, r3
 80063aa:	bd30      	pop	{r4, r5, pc}
 80063ac:	42a0      	cmp	r0, r4
 80063ae:	d3f3      	bcc.n	8006398 <__mcmp+0x14>
 80063b0:	e7fa      	b.n	80063a8 <__mcmp+0x24>
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295
 80063b6:	e7f7      	b.n	80063a8 <__mcmp+0x24>

080063b8 <__mdiff>:
 80063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	460d      	mov	r5, r1
 80063be:	4607      	mov	r7, r0
 80063c0:	4611      	mov	r1, r2
 80063c2:	4628      	mov	r0, r5
 80063c4:	4614      	mov	r4, r2
 80063c6:	f7ff ffdd 	bl	8006384 <__mcmp>
 80063ca:	1e06      	subs	r6, r0, #0
 80063cc:	d108      	bne.n	80063e0 <__mdiff+0x28>
 80063ce:	4631      	mov	r1, r6
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff fd84 	bl	8005ede <_Balloc>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80063dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e0:	bfa4      	itt	ge
 80063e2:	4623      	movge	r3, r4
 80063e4:	462c      	movge	r4, r5
 80063e6:	4638      	mov	r0, r7
 80063e8:	6861      	ldr	r1, [r4, #4]
 80063ea:	bfa6      	itte	ge
 80063ec:	461d      	movge	r5, r3
 80063ee:	2600      	movge	r6, #0
 80063f0:	2601      	movlt	r6, #1
 80063f2:	f7ff fd74 	bl	8005ede <_Balloc>
 80063f6:	f04f 0e00 	mov.w	lr, #0
 80063fa:	60c6      	str	r6, [r0, #12]
 80063fc:	692b      	ldr	r3, [r5, #16]
 80063fe:	6926      	ldr	r6, [r4, #16]
 8006400:	f104 0214 	add.w	r2, r4, #20
 8006404:	f105 0914 	add.w	r9, r5, #20
 8006408:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800640c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006410:	f100 0114 	add.w	r1, r0, #20
 8006414:	f852 ab04 	ldr.w	sl, [r2], #4
 8006418:	f859 5b04 	ldr.w	r5, [r9], #4
 800641c:	fa1f f38a 	uxth.w	r3, sl
 8006420:	4473      	add	r3, lr
 8006422:	b2ac      	uxth	r4, r5
 8006424:	1b1b      	subs	r3, r3, r4
 8006426:	0c2c      	lsrs	r4, r5, #16
 8006428:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800642c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006436:	45c8      	cmp	r8, r9
 8006438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800643c:	4694      	mov	ip, r2
 800643e:	f841 4b04 	str.w	r4, [r1], #4
 8006442:	d8e7      	bhi.n	8006414 <__mdiff+0x5c>
 8006444:	45bc      	cmp	ip, r7
 8006446:	d304      	bcc.n	8006452 <__mdiff+0x9a>
 8006448:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800644c:	b183      	cbz	r3, 8006470 <__mdiff+0xb8>
 800644e:	6106      	str	r6, [r0, #16]
 8006450:	e7c4      	b.n	80063dc <__mdiff+0x24>
 8006452:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006456:	b2a2      	uxth	r2, r4
 8006458:	4472      	add	r2, lr
 800645a:	1413      	asrs	r3, r2, #16
 800645c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006460:	b292      	uxth	r2, r2
 8006462:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006466:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800646a:	f841 2b04 	str.w	r2, [r1], #4
 800646e:	e7e9      	b.n	8006444 <__mdiff+0x8c>
 8006470:	3e01      	subs	r6, #1
 8006472:	e7e9      	b.n	8006448 <__mdiff+0x90>

08006474 <__ulp>:
 8006474:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <__ulp+0x44>)
 8006476:	400b      	ands	r3, r1
 8006478:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd02      	ble.n	8006486 <__ulp+0x12>
 8006480:	2000      	movs	r0, #0
 8006482:	4619      	mov	r1, r3
 8006484:	4770      	bx	lr
 8006486:	425b      	negs	r3, r3
 8006488:	151b      	asrs	r3, r3, #20
 800648a:	2b13      	cmp	r3, #19
 800648c:	f04f 0000 	mov.w	r0, #0
 8006490:	f04f 0100 	mov.w	r1, #0
 8006494:	dc04      	bgt.n	80064a0 <__ulp+0x2c>
 8006496:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800649a:	fa42 f103 	asr.w	r1, r2, r3
 800649e:	4770      	bx	lr
 80064a0:	2201      	movs	r2, #1
 80064a2:	3b14      	subs	r3, #20
 80064a4:	2b1e      	cmp	r3, #30
 80064a6:	bfce      	itee	gt
 80064a8:	4613      	movgt	r3, r2
 80064aa:	f1c3 031f 	rsble	r3, r3, #31
 80064ae:	fa02 f303 	lslle.w	r3, r2, r3
 80064b2:	4618      	mov	r0, r3
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	7ff00000 	.word	0x7ff00000

080064bc <__b2d>:
 80064bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c0:	6907      	ldr	r7, [r0, #16]
 80064c2:	f100 0914 	add.w	r9, r0, #20
 80064c6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80064ca:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80064ce:	f1a7 0804 	sub.w	r8, r7, #4
 80064d2:	4630      	mov	r0, r6
 80064d4:	f7ff fdc7 	bl	8006066 <__hi0bits>
 80064d8:	f1c0 0320 	rsb	r3, r0, #32
 80064dc:	280a      	cmp	r0, #10
 80064de:	600b      	str	r3, [r1, #0]
 80064e0:	491e      	ldr	r1, [pc, #120]	; (800655c <__b2d+0xa0>)
 80064e2:	dc17      	bgt.n	8006514 <__b2d+0x58>
 80064e4:	45c1      	cmp	r9, r8
 80064e6:	bf28      	it	cs
 80064e8:	2200      	movcs	r2, #0
 80064ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80064ee:	fa26 f30c 	lsr.w	r3, r6, ip
 80064f2:	bf38      	it	cc
 80064f4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80064f8:	ea43 0501 	orr.w	r5, r3, r1
 80064fc:	f100 0315 	add.w	r3, r0, #21
 8006500:	fa06 f303 	lsl.w	r3, r6, r3
 8006504:	fa22 f20c 	lsr.w	r2, r2, ip
 8006508:	ea43 0402 	orr.w	r4, r3, r2
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
 8006510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006514:	45c1      	cmp	r9, r8
 8006516:	bf3a      	itte	cc
 8006518:	f1a7 0808 	subcc.w	r8, r7, #8
 800651c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006520:	2200      	movcs	r2, #0
 8006522:	f1b0 030b 	subs.w	r3, r0, #11
 8006526:	d015      	beq.n	8006554 <__b2d+0x98>
 8006528:	409e      	lsls	r6, r3
 800652a:	f1c3 0720 	rsb	r7, r3, #32
 800652e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8006532:	fa22 f107 	lsr.w	r1, r2, r7
 8006536:	45c8      	cmp	r8, r9
 8006538:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800653c:	ea46 0501 	orr.w	r5, r6, r1
 8006540:	bf94      	ite	ls
 8006542:	2100      	movls	r1, #0
 8006544:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006548:	fa02 f003 	lsl.w	r0, r2, r3
 800654c:	40f9      	lsrs	r1, r7
 800654e:	ea40 0401 	orr.w	r4, r0, r1
 8006552:	e7db      	b.n	800650c <__b2d+0x50>
 8006554:	ea46 0501 	orr.w	r5, r6, r1
 8006558:	4614      	mov	r4, r2
 800655a:	e7d7      	b.n	800650c <__b2d+0x50>
 800655c:	3ff00000 	.word	0x3ff00000

08006560 <__d2b>:
 8006560:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006564:	461c      	mov	r4, r3
 8006566:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800656a:	2101      	movs	r1, #1
 800656c:	4690      	mov	r8, r2
 800656e:	f7ff fcb6 	bl	8005ede <_Balloc>
 8006572:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006576:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800657a:	4607      	mov	r7, r0
 800657c:	bb34      	cbnz	r4, 80065cc <__d2b+0x6c>
 800657e:	9201      	str	r2, [sp, #4]
 8006580:	f1b8 0200 	subs.w	r2, r8, #0
 8006584:	d027      	beq.n	80065d6 <__d2b+0x76>
 8006586:	a802      	add	r0, sp, #8
 8006588:	f840 2d08 	str.w	r2, [r0, #-8]!
 800658c:	f7ff fd8a 	bl	80060a4 <__lo0bits>
 8006590:	9900      	ldr	r1, [sp, #0]
 8006592:	b1f0      	cbz	r0, 80065d2 <__d2b+0x72>
 8006594:	9a01      	ldr	r2, [sp, #4]
 8006596:	f1c0 0320 	rsb	r3, r0, #32
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	430b      	orrs	r3, r1
 80065a0:	40c2      	lsrs	r2, r0
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	9201      	str	r2, [sp, #4]
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bf14      	ite	ne
 80065ac:	2102      	movne	r1, #2
 80065ae:	2101      	moveq	r1, #1
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	6139      	str	r1, [r7, #16]
 80065b4:	b1c4      	cbz	r4, 80065e8 <__d2b+0x88>
 80065b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80065ba:	4404      	add	r4, r0
 80065bc:	6034      	str	r4, [r6, #0]
 80065be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065c2:	6028      	str	r0, [r5, #0]
 80065c4:	4638      	mov	r0, r7
 80065c6:	b002      	add	sp, #8
 80065c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80065d0:	e7d5      	b.n	800657e <__d2b+0x1e>
 80065d2:	6179      	str	r1, [r7, #20]
 80065d4:	e7e7      	b.n	80065a6 <__d2b+0x46>
 80065d6:	a801      	add	r0, sp, #4
 80065d8:	f7ff fd64 	bl	80060a4 <__lo0bits>
 80065dc:	2101      	movs	r1, #1
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	6139      	str	r1, [r7, #16]
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	3020      	adds	r0, #32
 80065e6:	e7e5      	b.n	80065b4 <__d2b+0x54>
 80065e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065ec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80065f0:	6030      	str	r0, [r6, #0]
 80065f2:	6918      	ldr	r0, [r3, #16]
 80065f4:	f7ff fd37 	bl	8006066 <__hi0bits>
 80065f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80065fc:	e7e1      	b.n	80065c2 <__d2b+0x62>

080065fe <__ratio>:
 80065fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006602:	4688      	mov	r8, r1
 8006604:	4669      	mov	r1, sp
 8006606:	4681      	mov	r9, r0
 8006608:	f7ff ff58 	bl	80064bc <__b2d>
 800660c:	468b      	mov	fp, r1
 800660e:	4606      	mov	r6, r0
 8006610:	460f      	mov	r7, r1
 8006612:	4640      	mov	r0, r8
 8006614:	a901      	add	r1, sp, #4
 8006616:	f7ff ff51 	bl	80064bc <__b2d>
 800661a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800661e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006622:	460d      	mov	r5, r1
 8006624:	eba3 0c02 	sub.w	ip, r3, r2
 8006628:	e9dd 3200 	ldrd	r3, r2, [sp]
 800662c:	1a9b      	subs	r3, r3, r2
 800662e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfd5      	itete	le
 8006636:	460a      	movle	r2, r1
 8006638:	463a      	movgt	r2, r7
 800663a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800663e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006642:	bfd8      	it	le
 8006644:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8006648:	462b      	mov	r3, r5
 800664a:	4602      	mov	r2, r0
 800664c:	4659      	mov	r1, fp
 800664e:	4630      	mov	r0, r6
 8006650:	f7fa f86c 	bl	800072c <__aeabi_ddiv>
 8006654:	b003      	add	sp, #12
 8006656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800665a <__copybits>:
 800665a:	3901      	subs	r1, #1
 800665c:	b510      	push	{r4, lr}
 800665e:	1149      	asrs	r1, r1, #5
 8006660:	6914      	ldr	r4, [r2, #16]
 8006662:	3101      	adds	r1, #1
 8006664:	f102 0314 	add.w	r3, r2, #20
 8006668:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800666c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006670:	42a3      	cmp	r3, r4
 8006672:	4602      	mov	r2, r0
 8006674:	d303      	bcc.n	800667e <__copybits+0x24>
 8006676:	2300      	movs	r3, #0
 8006678:	428a      	cmp	r2, r1
 800667a:	d305      	bcc.n	8006688 <__copybits+0x2e>
 800667c:	bd10      	pop	{r4, pc}
 800667e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006682:	f840 2b04 	str.w	r2, [r0], #4
 8006686:	e7f3      	b.n	8006670 <__copybits+0x16>
 8006688:	f842 3b04 	str.w	r3, [r2], #4
 800668c:	e7f4      	b.n	8006678 <__copybits+0x1e>

0800668e <__any_on>:
 800668e:	f100 0214 	add.w	r2, r0, #20
 8006692:	6900      	ldr	r0, [r0, #16]
 8006694:	114b      	asrs	r3, r1, #5
 8006696:	4298      	cmp	r0, r3
 8006698:	b510      	push	{r4, lr}
 800669a:	db11      	blt.n	80066c0 <__any_on+0x32>
 800669c:	dd0a      	ble.n	80066b4 <__any_on+0x26>
 800669e:	f011 011f 	ands.w	r1, r1, #31
 80066a2:	d007      	beq.n	80066b4 <__any_on+0x26>
 80066a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80066a8:	fa24 f001 	lsr.w	r0, r4, r1
 80066ac:	fa00 f101 	lsl.w	r1, r0, r1
 80066b0:	428c      	cmp	r4, r1
 80066b2:	d10b      	bne.n	80066cc <__any_on+0x3e>
 80066b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d803      	bhi.n	80066c4 <__any_on+0x36>
 80066bc:	2000      	movs	r0, #0
 80066be:	bd10      	pop	{r4, pc}
 80066c0:	4603      	mov	r3, r0
 80066c2:	e7f7      	b.n	80066b4 <__any_on+0x26>
 80066c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d0f5      	beq.n	80066b8 <__any_on+0x2a>
 80066cc:	2001      	movs	r0, #1
 80066ce:	e7f6      	b.n	80066be <__any_on+0x30>

080066d0 <_calloc_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	fb02 f401 	mul.w	r4, r2, r1
 80066d6:	4621      	mov	r1, r4
 80066d8:	f000 f854 	bl	8006784 <_malloc_r>
 80066dc:	4605      	mov	r5, r0
 80066de:	b118      	cbz	r0, 80066e8 <_calloc_r+0x18>
 80066e0:	4622      	mov	r2, r4
 80066e2:	2100      	movs	r1, #0
 80066e4:	f7fc fd2e 	bl	8003144 <memset>
 80066e8:	4628      	mov	r0, r5
 80066ea:	bd38      	pop	{r3, r4, r5, pc}

080066ec <_free_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4605      	mov	r5, r0
 80066f0:	2900      	cmp	r1, #0
 80066f2:	d043      	beq.n	800677c <_free_r+0x90>
 80066f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f8:	1f0c      	subs	r4, r1, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bfb8      	it	lt
 80066fe:	18e4      	addlt	r4, r4, r3
 8006700:	f000 fa34 	bl	8006b6c <__malloc_lock>
 8006704:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <_free_r+0x94>)
 8006706:	6813      	ldr	r3, [r2, #0]
 8006708:	4610      	mov	r0, r2
 800670a:	b933      	cbnz	r3, 800671a <_free_r+0x2e>
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	6014      	str	r4, [r2, #0]
 8006710:	4628      	mov	r0, r5
 8006712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006716:	f000 ba2a 	b.w	8006b6e <__malloc_unlock>
 800671a:	42a3      	cmp	r3, r4
 800671c:	d90b      	bls.n	8006736 <_free_r+0x4a>
 800671e:	6821      	ldr	r1, [r4, #0]
 8006720:	1862      	adds	r2, r4, r1
 8006722:	4293      	cmp	r3, r2
 8006724:	bf01      	itttt	eq
 8006726:	681a      	ldreq	r2, [r3, #0]
 8006728:	685b      	ldreq	r3, [r3, #4]
 800672a:	1852      	addeq	r2, r2, r1
 800672c:	6022      	streq	r2, [r4, #0]
 800672e:	6063      	str	r3, [r4, #4]
 8006730:	6004      	str	r4, [r0, #0]
 8006732:	e7ed      	b.n	8006710 <_free_r+0x24>
 8006734:	4613      	mov	r3, r2
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	b10a      	cbz	r2, 800673e <_free_r+0x52>
 800673a:	42a2      	cmp	r2, r4
 800673c:	d9fa      	bls.n	8006734 <_free_r+0x48>
 800673e:	6819      	ldr	r1, [r3, #0]
 8006740:	1858      	adds	r0, r3, r1
 8006742:	42a0      	cmp	r0, r4
 8006744:	d10b      	bne.n	800675e <_free_r+0x72>
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	4401      	add	r1, r0
 800674a:	1858      	adds	r0, r3, r1
 800674c:	4282      	cmp	r2, r0
 800674e:	6019      	str	r1, [r3, #0]
 8006750:	d1de      	bne.n	8006710 <_free_r+0x24>
 8006752:	6810      	ldr	r0, [r2, #0]
 8006754:	6852      	ldr	r2, [r2, #4]
 8006756:	4401      	add	r1, r0
 8006758:	6019      	str	r1, [r3, #0]
 800675a:	605a      	str	r2, [r3, #4]
 800675c:	e7d8      	b.n	8006710 <_free_r+0x24>
 800675e:	d902      	bls.n	8006766 <_free_r+0x7a>
 8006760:	230c      	movs	r3, #12
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	e7d4      	b.n	8006710 <_free_r+0x24>
 8006766:	6820      	ldr	r0, [r4, #0]
 8006768:	1821      	adds	r1, r4, r0
 800676a:	428a      	cmp	r2, r1
 800676c:	bf01      	itttt	eq
 800676e:	6811      	ldreq	r1, [r2, #0]
 8006770:	6852      	ldreq	r2, [r2, #4]
 8006772:	1809      	addeq	r1, r1, r0
 8006774:	6021      	streq	r1, [r4, #0]
 8006776:	6062      	str	r2, [r4, #4]
 8006778:	605c      	str	r4, [r3, #4]
 800677a:	e7c9      	b.n	8006710 <_free_r+0x24>
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	bf00      	nop
 8006780:	20000600 	.word	0x20000600

08006784 <_malloc_r>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	1ccd      	adds	r5, r1, #3
 8006788:	f025 0503 	bic.w	r5, r5, #3
 800678c:	3508      	adds	r5, #8
 800678e:	2d0c      	cmp	r5, #12
 8006790:	bf38      	it	cc
 8006792:	250c      	movcc	r5, #12
 8006794:	2d00      	cmp	r5, #0
 8006796:	4606      	mov	r6, r0
 8006798:	db01      	blt.n	800679e <_malloc_r+0x1a>
 800679a:	42a9      	cmp	r1, r5
 800679c:	d903      	bls.n	80067a6 <_malloc_r+0x22>
 800679e:	230c      	movs	r3, #12
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	2000      	movs	r0, #0
 80067a4:	bd70      	pop	{r4, r5, r6, pc}
 80067a6:	f000 f9e1 	bl	8006b6c <__malloc_lock>
 80067aa:	4a21      	ldr	r2, [pc, #132]	; (8006830 <_malloc_r+0xac>)
 80067ac:	6814      	ldr	r4, [r2, #0]
 80067ae:	4621      	mov	r1, r4
 80067b0:	b991      	cbnz	r1, 80067d8 <_malloc_r+0x54>
 80067b2:	4c20      	ldr	r4, [pc, #128]	; (8006834 <_malloc_r+0xb0>)
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	b91b      	cbnz	r3, 80067c0 <_malloc_r+0x3c>
 80067b8:	4630      	mov	r0, r6
 80067ba:	f000 f98f 	bl	8006adc <_sbrk_r>
 80067be:	6020      	str	r0, [r4, #0]
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 f98a 	bl	8006adc <_sbrk_r>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d124      	bne.n	8006816 <_malloc_r+0x92>
 80067cc:	230c      	movs	r3, #12
 80067ce:	4630      	mov	r0, r6
 80067d0:	6033      	str	r3, [r6, #0]
 80067d2:	f000 f9cc 	bl	8006b6e <__malloc_unlock>
 80067d6:	e7e4      	b.n	80067a2 <_malloc_r+0x1e>
 80067d8:	680b      	ldr	r3, [r1, #0]
 80067da:	1b5b      	subs	r3, r3, r5
 80067dc:	d418      	bmi.n	8006810 <_malloc_r+0x8c>
 80067de:	2b0b      	cmp	r3, #11
 80067e0:	d90f      	bls.n	8006802 <_malloc_r+0x7e>
 80067e2:	600b      	str	r3, [r1, #0]
 80067e4:	18cc      	adds	r4, r1, r3
 80067e6:	50cd      	str	r5, [r1, r3]
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 f9c0 	bl	8006b6e <__malloc_unlock>
 80067ee:	f104 000b 	add.w	r0, r4, #11
 80067f2:	1d23      	adds	r3, r4, #4
 80067f4:	f020 0007 	bic.w	r0, r0, #7
 80067f8:	1ac3      	subs	r3, r0, r3
 80067fa:	d0d3      	beq.n	80067a4 <_malloc_r+0x20>
 80067fc:	425a      	negs	r2, r3
 80067fe:	50e2      	str	r2, [r4, r3]
 8006800:	e7d0      	b.n	80067a4 <_malloc_r+0x20>
 8006802:	684b      	ldr	r3, [r1, #4]
 8006804:	428c      	cmp	r4, r1
 8006806:	bf16      	itet	ne
 8006808:	6063      	strne	r3, [r4, #4]
 800680a:	6013      	streq	r3, [r2, #0]
 800680c:	460c      	movne	r4, r1
 800680e:	e7eb      	b.n	80067e8 <_malloc_r+0x64>
 8006810:	460c      	mov	r4, r1
 8006812:	6849      	ldr	r1, [r1, #4]
 8006814:	e7cc      	b.n	80067b0 <_malloc_r+0x2c>
 8006816:	1cc4      	adds	r4, r0, #3
 8006818:	f024 0403 	bic.w	r4, r4, #3
 800681c:	42a0      	cmp	r0, r4
 800681e:	d005      	beq.n	800682c <_malloc_r+0xa8>
 8006820:	1a21      	subs	r1, r4, r0
 8006822:	4630      	mov	r0, r6
 8006824:	f000 f95a 	bl	8006adc <_sbrk_r>
 8006828:	3001      	adds	r0, #1
 800682a:	d0cf      	beq.n	80067cc <_malloc_r+0x48>
 800682c:	6025      	str	r5, [r4, #0]
 800682e:	e7db      	b.n	80067e8 <_malloc_r+0x64>
 8006830:	20000600 	.word	0x20000600
 8006834:	20000604 	.word	0x20000604

08006838 <__ssputs_r>:
 8006838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	688e      	ldr	r6, [r1, #8]
 800683e:	4682      	mov	sl, r0
 8006840:	429e      	cmp	r6, r3
 8006842:	460c      	mov	r4, r1
 8006844:	4690      	mov	r8, r2
 8006846:	4699      	mov	r9, r3
 8006848:	d837      	bhi.n	80068ba <__ssputs_r+0x82>
 800684a:	898a      	ldrh	r2, [r1, #12]
 800684c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006850:	d031      	beq.n	80068b6 <__ssputs_r+0x7e>
 8006852:	2302      	movs	r3, #2
 8006854:	6825      	ldr	r5, [r4, #0]
 8006856:	6909      	ldr	r1, [r1, #16]
 8006858:	1a6f      	subs	r7, r5, r1
 800685a:	6965      	ldr	r5, [r4, #20]
 800685c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006860:	fb95 f5f3 	sdiv	r5, r5, r3
 8006864:	f109 0301 	add.w	r3, r9, #1
 8006868:	443b      	add	r3, r7
 800686a:	429d      	cmp	r5, r3
 800686c:	bf38      	it	cc
 800686e:	461d      	movcc	r5, r3
 8006870:	0553      	lsls	r3, r2, #21
 8006872:	d530      	bpl.n	80068d6 <__ssputs_r+0x9e>
 8006874:	4629      	mov	r1, r5
 8006876:	f7ff ff85 	bl	8006784 <_malloc_r>
 800687a:	4606      	mov	r6, r0
 800687c:	b950      	cbnz	r0, 8006894 <__ssputs_r+0x5c>
 800687e:	230c      	movs	r3, #12
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	f8ca 3000 	str.w	r3, [sl]
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006894:	463a      	mov	r2, r7
 8006896:	6921      	ldr	r1, [r4, #16]
 8006898:	f7ff fb16 	bl	8005ec8 <memcpy>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	6126      	str	r6, [r4, #16]
 80068aa:	443e      	add	r6, r7
 80068ac:	6026      	str	r6, [r4, #0]
 80068ae:	464e      	mov	r6, r9
 80068b0:	6165      	str	r5, [r4, #20]
 80068b2:	1bed      	subs	r5, r5, r7
 80068b4:	60a5      	str	r5, [r4, #8]
 80068b6:	454e      	cmp	r6, r9
 80068b8:	d900      	bls.n	80068bc <__ssputs_r+0x84>
 80068ba:	464e      	mov	r6, r9
 80068bc:	4632      	mov	r2, r6
 80068be:	4641      	mov	r1, r8
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	f000 f93a 	bl	8006b3a <memmove>
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	2000      	movs	r0, #0
 80068ca:	1b9b      	subs	r3, r3, r6
 80068cc:	60a3      	str	r3, [r4, #8]
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	441e      	add	r6, r3
 80068d2:	6026      	str	r6, [r4, #0]
 80068d4:	e7dc      	b.n	8006890 <__ssputs_r+0x58>
 80068d6:	462a      	mov	r2, r5
 80068d8:	f000 f94a 	bl	8006b70 <_realloc_r>
 80068dc:	4606      	mov	r6, r0
 80068de:	2800      	cmp	r0, #0
 80068e0:	d1e2      	bne.n	80068a8 <__ssputs_r+0x70>
 80068e2:	6921      	ldr	r1, [r4, #16]
 80068e4:	4650      	mov	r0, sl
 80068e6:	f7ff ff01 	bl	80066ec <_free_r>
 80068ea:	e7c8      	b.n	800687e <__ssputs_r+0x46>

080068ec <_svfiprintf_r>:
 80068ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	461d      	mov	r5, r3
 80068f2:	898b      	ldrh	r3, [r1, #12]
 80068f4:	b09d      	sub	sp, #116	; 0x74
 80068f6:	061f      	lsls	r7, r3, #24
 80068f8:	4680      	mov	r8, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	4616      	mov	r6, r2
 80068fe:	d50f      	bpl.n	8006920 <_svfiprintf_r+0x34>
 8006900:	690b      	ldr	r3, [r1, #16]
 8006902:	b96b      	cbnz	r3, 8006920 <_svfiprintf_r+0x34>
 8006904:	2140      	movs	r1, #64	; 0x40
 8006906:	f7ff ff3d 	bl	8006784 <_malloc_r>
 800690a:	6020      	str	r0, [r4, #0]
 800690c:	6120      	str	r0, [r4, #16]
 800690e:	b928      	cbnz	r0, 800691c <_svfiprintf_r+0x30>
 8006910:	230c      	movs	r3, #12
 8006912:	f8c8 3000 	str.w	r3, [r8]
 8006916:	f04f 30ff 	mov.w	r0, #4294967295
 800691a:	e0c8      	b.n	8006aae <_svfiprintf_r+0x1c2>
 800691c:	2340      	movs	r3, #64	; 0x40
 800691e:	6163      	str	r3, [r4, #20]
 8006920:	2300      	movs	r3, #0
 8006922:	9309      	str	r3, [sp, #36]	; 0x24
 8006924:	2320      	movs	r3, #32
 8006926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800692a:	2330      	movs	r3, #48	; 0x30
 800692c:	f04f 0b01 	mov.w	fp, #1
 8006930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006934:	9503      	str	r5, [sp, #12]
 8006936:	4637      	mov	r7, r6
 8006938:	463d      	mov	r5, r7
 800693a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800693e:	b10b      	cbz	r3, 8006944 <_svfiprintf_r+0x58>
 8006940:	2b25      	cmp	r3, #37	; 0x25
 8006942:	d13e      	bne.n	80069c2 <_svfiprintf_r+0xd6>
 8006944:	ebb7 0a06 	subs.w	sl, r7, r6
 8006948:	d00b      	beq.n	8006962 <_svfiprintf_r+0x76>
 800694a:	4653      	mov	r3, sl
 800694c:	4632      	mov	r2, r6
 800694e:	4621      	mov	r1, r4
 8006950:	4640      	mov	r0, r8
 8006952:	f7ff ff71 	bl	8006838 <__ssputs_r>
 8006956:	3001      	adds	r0, #1
 8006958:	f000 80a4 	beq.w	8006aa4 <_svfiprintf_r+0x1b8>
 800695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695e:	4453      	add	r3, sl
 8006960:	9309      	str	r3, [sp, #36]	; 0x24
 8006962:	783b      	ldrb	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 809d 	beq.w	8006aa4 <_svfiprintf_r+0x1b8>
 800696a:	2300      	movs	r3, #0
 800696c:	f04f 32ff 	mov.w	r2, #4294967295
 8006970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800697c:	931a      	str	r3, [sp, #104]	; 0x68
 800697e:	462f      	mov	r7, r5
 8006980:	2205      	movs	r2, #5
 8006982:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006986:	4850      	ldr	r0, [pc, #320]	; (8006ac8 <_svfiprintf_r+0x1dc>)
 8006988:	f7ff fa90 	bl	8005eac <memchr>
 800698c:	9b04      	ldr	r3, [sp, #16]
 800698e:	b9d0      	cbnz	r0, 80069c6 <_svfiprintf_r+0xda>
 8006990:	06d9      	lsls	r1, r3, #27
 8006992:	bf44      	itt	mi
 8006994:	2220      	movmi	r2, #32
 8006996:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800699a:	071a      	lsls	r2, r3, #28
 800699c:	bf44      	itt	mi
 800699e:	222b      	movmi	r2, #43	; 0x2b
 80069a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069a4:	782a      	ldrb	r2, [r5, #0]
 80069a6:	2a2a      	cmp	r2, #42	; 0x2a
 80069a8:	d015      	beq.n	80069d6 <_svfiprintf_r+0xea>
 80069aa:	462f      	mov	r7, r5
 80069ac:	2000      	movs	r0, #0
 80069ae:	250a      	movs	r5, #10
 80069b0:	9a07      	ldr	r2, [sp, #28]
 80069b2:	4639      	mov	r1, r7
 80069b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069b8:	3b30      	subs	r3, #48	; 0x30
 80069ba:	2b09      	cmp	r3, #9
 80069bc:	d94d      	bls.n	8006a5a <_svfiprintf_r+0x16e>
 80069be:	b1b8      	cbz	r0, 80069f0 <_svfiprintf_r+0x104>
 80069c0:	e00f      	b.n	80069e2 <_svfiprintf_r+0xf6>
 80069c2:	462f      	mov	r7, r5
 80069c4:	e7b8      	b.n	8006938 <_svfiprintf_r+0x4c>
 80069c6:	4a40      	ldr	r2, [pc, #256]	; (8006ac8 <_svfiprintf_r+0x1dc>)
 80069c8:	463d      	mov	r5, r7
 80069ca:	1a80      	subs	r0, r0, r2
 80069cc:	fa0b f000 	lsl.w	r0, fp, r0
 80069d0:	4318      	orrs	r0, r3
 80069d2:	9004      	str	r0, [sp, #16]
 80069d4:	e7d3      	b.n	800697e <_svfiprintf_r+0x92>
 80069d6:	9a03      	ldr	r2, [sp, #12]
 80069d8:	1d11      	adds	r1, r2, #4
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	9103      	str	r1, [sp, #12]
 80069de:	2a00      	cmp	r2, #0
 80069e0:	db01      	blt.n	80069e6 <_svfiprintf_r+0xfa>
 80069e2:	9207      	str	r2, [sp, #28]
 80069e4:	e004      	b.n	80069f0 <_svfiprintf_r+0x104>
 80069e6:	4252      	negs	r2, r2
 80069e8:	f043 0302 	orr.w	r3, r3, #2
 80069ec:	9207      	str	r2, [sp, #28]
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	783b      	ldrb	r3, [r7, #0]
 80069f2:	2b2e      	cmp	r3, #46	; 0x2e
 80069f4:	d10c      	bne.n	8006a10 <_svfiprintf_r+0x124>
 80069f6:	787b      	ldrb	r3, [r7, #1]
 80069f8:	2b2a      	cmp	r3, #42	; 0x2a
 80069fa:	d133      	bne.n	8006a64 <_svfiprintf_r+0x178>
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	3702      	adds	r7, #2
 8006a00:	1d1a      	adds	r2, r3, #4
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	9203      	str	r2, [sp, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfb8      	it	lt
 8006a0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	4d2e      	ldr	r5, [pc, #184]	; (8006acc <_svfiprintf_r+0x1e0>)
 8006a12:	2203      	movs	r2, #3
 8006a14:	7839      	ldrb	r1, [r7, #0]
 8006a16:	4628      	mov	r0, r5
 8006a18:	f7ff fa48 	bl	8005eac <memchr>
 8006a1c:	b138      	cbz	r0, 8006a2e <_svfiprintf_r+0x142>
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	1b40      	subs	r0, r0, r5
 8006a22:	fa03 f000 	lsl.w	r0, r3, r0
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	3701      	adds	r7, #1
 8006a2a:	4303      	orrs	r3, r0
 8006a2c:	9304      	str	r3, [sp, #16]
 8006a2e:	7839      	ldrb	r1, [r7, #0]
 8006a30:	2206      	movs	r2, #6
 8006a32:	4827      	ldr	r0, [pc, #156]	; (8006ad0 <_svfiprintf_r+0x1e4>)
 8006a34:	1c7e      	adds	r6, r7, #1
 8006a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a3a:	f7ff fa37 	bl	8005eac <memchr>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d038      	beq.n	8006ab4 <_svfiprintf_r+0x1c8>
 8006a42:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <_svfiprintf_r+0x1e8>)
 8006a44:	bb13      	cbnz	r3, 8006a8c <_svfiprintf_r+0x1a0>
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	3307      	adds	r3, #7
 8006a4a:	f023 0307 	bic.w	r3, r3, #7
 8006a4e:	3308      	adds	r3, #8
 8006a50:	9303      	str	r3, [sp, #12]
 8006a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a54:	444b      	add	r3, r9
 8006a56:	9309      	str	r3, [sp, #36]	; 0x24
 8006a58:	e76d      	b.n	8006936 <_svfiprintf_r+0x4a>
 8006a5a:	fb05 3202 	mla	r2, r5, r2, r3
 8006a5e:	2001      	movs	r0, #1
 8006a60:	460f      	mov	r7, r1
 8006a62:	e7a6      	b.n	80069b2 <_svfiprintf_r+0xc6>
 8006a64:	2300      	movs	r3, #0
 8006a66:	250a      	movs	r5, #10
 8006a68:	4619      	mov	r1, r3
 8006a6a:	3701      	adds	r7, #1
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a74:	3a30      	subs	r2, #48	; 0x30
 8006a76:	2a09      	cmp	r2, #9
 8006a78:	d903      	bls.n	8006a82 <_svfiprintf_r+0x196>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0c8      	beq.n	8006a10 <_svfiprintf_r+0x124>
 8006a7e:	9105      	str	r1, [sp, #20]
 8006a80:	e7c6      	b.n	8006a10 <_svfiprintf_r+0x124>
 8006a82:	fb05 2101 	mla	r1, r5, r1, r2
 8006a86:	2301      	movs	r3, #1
 8006a88:	4607      	mov	r7, r0
 8006a8a:	e7f0      	b.n	8006a6e <_svfiprintf_r+0x182>
 8006a8c:	ab03      	add	r3, sp, #12
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	4622      	mov	r2, r4
 8006a92:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <_svfiprintf_r+0x1ec>)
 8006a94:	a904      	add	r1, sp, #16
 8006a96:	4640      	mov	r0, r8
 8006a98:	f7fc fbee 	bl	8003278 <_printf_float>
 8006a9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006aa0:	4681      	mov	r9, r0
 8006aa2:	d1d6      	bne.n	8006a52 <_svfiprintf_r+0x166>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	065b      	lsls	r3, r3, #25
 8006aa8:	f53f af35 	bmi.w	8006916 <_svfiprintf_r+0x2a>
 8006aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aae:	b01d      	add	sp, #116	; 0x74
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	ab03      	add	r3, sp, #12
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4622      	mov	r2, r4
 8006aba:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <_svfiprintf_r+0x1ec>)
 8006abc:	a904      	add	r1, sp, #16
 8006abe:	4640      	mov	r0, r8
 8006ac0:	f7fc fe86 	bl	80037d0 <_printf_i>
 8006ac4:	e7ea      	b.n	8006a9c <_svfiprintf_r+0x1b0>
 8006ac6:	bf00      	nop
 8006ac8:	08006dac 	.word	0x08006dac
 8006acc:	08006db2 	.word	0x08006db2
 8006ad0:	08006db6 	.word	0x08006db6
 8006ad4:	08003279 	.word	0x08003279
 8006ad8:	08006839 	.word	0x08006839

08006adc <_sbrk_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4c05      	ldr	r4, [pc, #20]	; (8006af8 <_sbrk_r+0x1c>)
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	f7fa fe72 	bl	80017d0 <_sbrk>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_sbrk_r+0x1a>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_sbrk_r+0x1a>
 8006af4:	602b      	str	r3, [r5, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	200006b0 	.word	0x200006b0

08006afc <strncmp>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	b16a      	cbz	r2, 8006b1c <strncmp+0x20>
 8006b00:	3901      	subs	r1, #1
 8006b02:	1884      	adds	r4, r0, r2
 8006b04:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006b08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d103      	bne.n	8006b18 <strncmp+0x1c>
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d001      	beq.n	8006b18 <strncmp+0x1c>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f5      	bne.n	8006b04 <strncmp+0x8>
 8006b18:	1a98      	subs	r0, r3, r2
 8006b1a:	bd10      	pop	{r4, pc}
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	e7fc      	b.n	8006b1a <strncmp+0x1e>

08006b20 <__ascii_wctomb>:
 8006b20:	b149      	cbz	r1, 8006b36 <__ascii_wctomb+0x16>
 8006b22:	2aff      	cmp	r2, #255	; 0xff
 8006b24:	bf8b      	itete	hi
 8006b26:	238a      	movhi	r3, #138	; 0x8a
 8006b28:	700a      	strbls	r2, [r1, #0]
 8006b2a:	6003      	strhi	r3, [r0, #0]
 8006b2c:	2001      	movls	r0, #1
 8006b2e:	bf88      	it	hi
 8006b30:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b34:	4770      	bx	lr
 8006b36:	4608      	mov	r0, r1
 8006b38:	4770      	bx	lr

08006b3a <memmove>:
 8006b3a:	4288      	cmp	r0, r1
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	eb01 0302 	add.w	r3, r1, r2
 8006b42:	d807      	bhi.n	8006b54 <memmove+0x1a>
 8006b44:	1e42      	subs	r2, r0, #1
 8006b46:	4299      	cmp	r1, r3
 8006b48:	d00a      	beq.n	8006b60 <memmove+0x26>
 8006b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b52:	e7f8      	b.n	8006b46 <memmove+0xc>
 8006b54:	4283      	cmp	r3, r0
 8006b56:	d9f5      	bls.n	8006b44 <memmove+0xa>
 8006b58:	1881      	adds	r1, r0, r2
 8006b5a:	1ad2      	subs	r2, r2, r3
 8006b5c:	42d3      	cmn	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memmove+0x28>
 8006b60:	bd10      	pop	{r4, pc}
 8006b62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b6a:	e7f7      	b.n	8006b5c <memmove+0x22>

08006b6c <__malloc_lock>:
 8006b6c:	4770      	bx	lr

08006b6e <__malloc_unlock>:
 8006b6e:	4770      	bx	lr

08006b70 <_realloc_r>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	4607      	mov	r7, r0
 8006b74:	4614      	mov	r4, r2
 8006b76:	460e      	mov	r6, r1
 8006b78:	b921      	cbnz	r1, 8006b84 <_realloc_r+0x14>
 8006b7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b7e:	4611      	mov	r1, r2
 8006b80:	f7ff be00 	b.w	8006784 <_malloc_r>
 8006b84:	b922      	cbnz	r2, 8006b90 <_realloc_r+0x20>
 8006b86:	f7ff fdb1 	bl	80066ec <_free_r>
 8006b8a:	4625      	mov	r5, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b90:	f000 f814 	bl	8006bbc <_malloc_usable_size_r>
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d20f      	bcs.n	8006bb8 <_realloc_r+0x48>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f7ff fdf2 	bl	8006784 <_malloc_r>
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d0f2      	beq.n	8006b8c <_realloc_r+0x1c>
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4622      	mov	r2, r4
 8006baa:	f7ff f98d 	bl	8005ec8 <memcpy>
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff fd9b 	bl	80066ec <_free_r>
 8006bb6:	e7e9      	b.n	8006b8c <_realloc_r+0x1c>
 8006bb8:	4635      	mov	r5, r6
 8006bba:	e7e7      	b.n	8006b8c <_realloc_r+0x1c>

08006bbc <_malloc_usable_size_r>:
 8006bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc0:	1f18      	subs	r0, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bfbc      	itt	lt
 8006bc6:	580b      	ldrlt	r3, [r1, r0]
 8006bc8:	18c0      	addlt	r0, r0, r3
 8006bca:	4770      	bx	lr

08006bcc <_init>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr

08006bd8 <_fini>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	bf00      	nop
 8006bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bde:	bc08      	pop	{r3}
 8006be0:	469e      	mov	lr, r3
 8006be2:	4770      	bx	lr
