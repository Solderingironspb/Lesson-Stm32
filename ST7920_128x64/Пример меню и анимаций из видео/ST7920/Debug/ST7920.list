
ST7920.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001198  08008378  08008378  00018378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009510  08009510  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009510  08009510  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009510  08009510  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009510  08009510  00019510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  200001e0  080096f8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  080096f8  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d06e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d07  00000000  00000000  0002d277  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002ef80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e04  00000000  00000000  000307f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a206  00000000  00000000  000485f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a1c4  00000000  00000000  000527fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc9be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d8  00000000  00000000  000dca3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800835c 	.word	0x0800835c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800835c 	.word	0x0800835c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <ST7920_logo_demonstration>:
		0x10, 0x39, 0x63, 0x63, 0x63, 0x31, 0x1F, 0x0F, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B, 0x08, 0x08, 0x0B, 0x0B, 0x08,
		0x08, 0x08, 0x08, 0x08, 0x09, 0x0B, 0x0B, 0x0B, 0x0B, 0x09, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B };
/*-----------------------------Демонстрационное Logo----------------------------*/

/*---------------Вывод стартового демонстрационного лого------------------------*/
void ST7920_logo_demonstration(void) {
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 369; i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	e00b      	b.n	8000b8c <ST7920_logo_demonstration+0x24>
		Frame_buffer[i + 265] = solderingiron[i];
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f203 1309 	addw	r3, r3, #265	; 0x109
 8000b7a:	493a      	ldr	r1, [pc, #232]	; (8000c64 <ST7920_logo_demonstration+0xfc>)
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	440a      	add	r2, r1
 8000b80:	7811      	ldrb	r1, [r2, #0]
 8000b82:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <ST7920_logo_demonstration+0x100>)
 8000b84:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 369; i++) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000b92:	ddef      	ble.n	8000b74 <ST7920_logo_demonstration+0xc>
	}
	ST7920_Update();
 8000b94:	f000 fac6 	bl	8001124 <ST7920_Update>
	sprintf(tx_buffer, "Saint Petersburg");
 8000b98:	4a34      	ldr	r2, [pc, #208]	; (8000c6c <ST7920_logo_demonstration+0x104>)
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <ST7920_logo_demonstration+0x108>)
 8000b9c:	4614      	mov	r4, r2
 8000b9e:	461d      	mov	r5, r3
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	7023      	strb	r3, [r4, #0]
	ST7920_Decode_UTF8(16, 5, 0, tx_buffer);
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <ST7920_logo_demonstration+0x104>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	2105      	movs	r1, #5
 8000bae:	2010      	movs	r0, #16
 8000bb0:	f000 fafc 	bl	80011ac <ST7920_Decode_UTF8>
	sprintf(tx_buffer, "electronics lab.");
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <ST7920_logo_demonstration+0x104>)
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <ST7920_logo_demonstration+0x10c>)
 8000bb8:	4614      	mov	r4, r2
 8000bba:	461d      	mov	r5, r3
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	682b      	ldr	r3, [r5, #0]
 8000bc2:	7023      	strb	r3, [r4, #0]
	ST7920_Decode_UTF8(18, 6, 0, tx_buffer);
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <ST7920_logo_demonstration+0x104>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2106      	movs	r1, #6
 8000bca:	2012      	movs	r0, #18
 8000bcc:	f000 faee 	bl	80011ac <ST7920_Decode_UTF8>
	HAL_Delay(500);
 8000bd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd4:	f001 fe92 	bl	80028fc <HAL_Delay>
	ST7920_Update();
 8000bd8:	f000 faa4 	bl	8001124 <ST7920_Update>
	HAL_Delay(3000);
 8000bdc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000be0:	f001 fe8c 	bl	80028fc <HAL_Delay>
	sprintf(tx_buffer, "                ");
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <ST7920_logo_demonstration+0x104>)
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <ST7920_logo_demonstration+0x110>)
 8000be8:	4614      	mov	r4, r2
 8000bea:	461d      	mov	r5, r3
 8000bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf0:	682b      	ldr	r3, [r5, #0]
 8000bf2:	7023      	strb	r3, [r4, #0]
	ST7920_Decode_UTF8(18, 6, 0, tx_buffer);
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <ST7920_logo_demonstration+0x104>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2106      	movs	r1, #6
 8000bfa:	2012      	movs	r0, #18
 8000bfc:	f000 fad6 	bl	80011ac <ST7920_Decode_UTF8>
	HAL_Delay(500);
 8000c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c04:	f001 fe7a 	bl	80028fc <HAL_Delay>
	ST7920_Update();
 8000c08:	f000 fa8c 	bl	8001124 <ST7920_Update>
	sprintf(tx_buffer, "                ");
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <ST7920_logo_demonstration+0x104>)
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <ST7920_logo_demonstration+0x110>)
 8000c10:	4614      	mov	r4, r2
 8000c12:	461d      	mov	r5, r3
 8000c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c18:	682b      	ldr	r3, [r5, #0]
 8000c1a:	7023      	strb	r3, [r4, #0]
	ST7920_Decode_UTF8(16, 5, 0, tx_buffer);
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <ST7920_logo_demonstration+0x104>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	2010      	movs	r0, #16
 8000c24:	f000 fac2 	bl	80011ac <ST7920_Decode_UTF8>
	HAL_Delay(500);
 8000c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2c:	f001 fe66 	bl	80028fc <HAL_Delay>
	ST7920_Update();
 8000c30:	f000 fa78 	bl	8001124 <ST7920_Update>
	for (int i = 0; i < 369; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	e008      	b.n	8000c4c <ST7920_logo_demonstration+0xe4>
		Frame_buffer[i + 265] = 0x00;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f203 1309 	addw	r3, r3, #265	; 0x109
 8000c40:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <ST7920_logo_demonstration+0x100>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 369; i++) {
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000c52:	ddf2      	ble.n	8000c3a <ST7920_logo_demonstration+0xd2>
	}
	HAL_Delay(500);
 8000c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c58:	f001 fe50 	bl	80028fc <HAL_Delay>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	08008a48 	.word	0x08008a48
 8000c68:	2000027c 	.word	0x2000027c
 8000c6c:	200001fc 	.word	0x200001fc
 8000c70:	08008378 	.word	0x08008378
 8000c74:	0800838c 	.word	0x0800838c
 8000c78:	080083a0 	.word	0x080083a0

08000c7c <ST7920_Send_command>:
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void ST7920_Send_command(uint8_t Data) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <ST7920_Send_command+0x60>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	611a      	str	r2, [r3, #16]
	uint8_t tx_buffer = 0xF8; //Отправка команды. RW = 0/RS = 0
 8000c8c:	23f8      	movs	r3, #248	; 0xf8
 8000c8e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000c90:	f107 030f 	add.w	r3, r7, #15
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <ST7920_Send_command+0x64>)
 8000c9a:	f002 ff15 	bl	8003ac8 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0;  //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000ca8:	f107 030f 	add.w	r3, r7, #15
 8000cac:	2201      	movs	r2, #1
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <ST7920_Send_command+0x64>)
 8000cb2:	f002 ff09 	bl	8003ac8 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000cbe:	f107 030f 	add.w	r3, r7, #15
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <ST7920_Send_command+0x64>)
 8000cc8:	f002 fefe 	bl	8003ac8 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <ST7920_Send_command+0x60>)
 8000cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cd2:	611a      	str	r2, [r3, #16]
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	200006dc 	.word	0x200006dc

08000ce4 <ST7920_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
static void ST7920_Send_data(uint8_t Data) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <ST7920_Send_data+0x60>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	611a      	str	r2, [r3, #16]
	uint8_t tx_buffer = 0xFA; //Отправка данных. RW = 0/RS = 1
 8000cf4:	23fa      	movs	r3, #250	; 0xfa
 8000cf6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000cf8:	f107 030f 	add.w	r3, r7, #15
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <ST7920_Send_data+0x64>)
 8000d02:	f002 fee1 	bl	8003ac8 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0; //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f023 030f 	bic.w	r3, r3, #15
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000d10:	f107 030f 	add.w	r3, r7, #15
 8000d14:	2201      	movs	r2, #1
 8000d16:	4619      	mov	r1, r3
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <ST7920_Send_data+0x64>)
 8000d1a:	f002 fed5 	bl	8003ac8 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000d26:	f107 030f 	add.w	r3, r7, #15
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <ST7920_Send_data+0x64>)
 8000d30:	f002 feca 	bl	8003ac8 <HAL_SPI_Transmit_IT>
	cs_reset();
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <ST7920_Send_data+0x60>)
 8000d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d3a:	611a      	str	r2, [r3, #16]
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40010800 	.word	0x40010800
 8000d48:	200006dc 	.word	0x200006dc

08000d4c <ST7920_Init>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void ST7920_Init(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	RST_reset(); //Дернем ножку RST
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <ST7920_Init+0x80>)
 8000d54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d58:	611a      	str	r2, [r3, #16]
	HAL_Delay(10);
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f001 fdce 	bl	80028fc <HAL_Delay>
	RST_set();
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <ST7920_Init+0x80>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	611a      	str	r2, [r3, #16]
	HAL_Delay(40); //Ждем 40 мс
 8000d66:	2028      	movs	r0, #40	; 0x28
 8000d68:	f001 fdc8 	bl	80028fc <HAL_Delay>

	//Далее все согласно Datasheet://
	uint8_t tx_buffer = 0x30; //Function set
 8000d6c:	2330      	movs	r3, #48	; 0x30
 8000d6e:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff82 	bl	8000c7c <ST7920_Send_command>
	HAL_Delay(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f001 fdbf 	bl	80028fc <HAL_Delay>
	ST7920_Send_command(tx_buffer);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff7b 	bl	8000c7c <ST7920_Send_command>
	HAL_Delay(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f001 fdb8 	bl	80028fc <HAL_Delay>
	tx_buffer = 0x0C; //D = 1, C = 0, B = 0.
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff72 	bl	8000c7c <ST7920_Send_command>
	HAL_Delay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f001 fdaf 	bl	80028fc <HAL_Delay>
	tx_buffer = 0x01;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Display Clean
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff69 	bl	8000c7c <ST7920_Send_command>
	HAL_Delay(12);
 8000daa:	200c      	movs	r0, #12
 8000dac:	f001 fda6 	bl	80028fc <HAL_Delay>
	tx_buffer = 0x06;
 8000db0:	2306      	movs	r3, #6
 8000db2:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Cursor increment right no shift
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff60 	bl	8000c7c <ST7920_Send_command>
	HAL_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f001 fd9d 	bl	80028fc <HAL_Delay>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010800 	.word	0x40010800

08000dd0 <ST7920_Graphic_mode>:
}
/*----------------Функция вывода символьного текста на дисплей--------------------*/

/*----------------Функция включения/выключения графического режима----------------*/
void ST7920_Graphic_mode(bool enable)   // 1-enable, 0-disable
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00c      	beq.n	8000dfa <ST7920_Graphic_mode+0x2a>
		ST7920_Send_command(0x34);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 1. Переходим в extended instruction.
 8000de0:	2034      	movs	r0, #52	; 0x34
 8000de2:	f7ff ff4b 	bl	8000c7c <ST7920_Send_command>
		HAL_Delay(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f001 fd88 	bl	80028fc <HAL_Delay>
		ST7920_Send_command(0x36);  // Включаем графический режим
 8000dec:	2036      	movs	r0, #54	; 0x36
 8000dee:	f7ff ff45 	bl	8000c7c <ST7920_Send_command>
		HAL_Delay(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f001 fd82 	bl	80028fc <HAL_Delay>

	else if (!enable) {
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
		HAL_Delay(1);
	}
}
 8000df8:	e00b      	b.n	8000e12 <ST7920_Graphic_mode+0x42>
	else if (!enable) {
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f083 0301 	eor.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d005      	beq.n	8000e12 <ST7920_Graphic_mode+0x42>
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
 8000e06:	2030      	movs	r0, #48	; 0x30
 8000e08:	f7ff ff38 	bl	8000c7c <ST7920_Send_command>
		HAL_Delay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f001 fd75 	bl	80028fc <HAL_Delay>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <ST7920_Draw_bitmap>:
	ST7920_Clean_Frame_buffer();
}
/*---------------Функция очистки дисплея в графическом режиме--------------------*/

/*-------------------Функция вывода изображения на экран дисплея--------------------------*/
void ST7920_Draw_bitmap(const unsigned char *bitmap) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
/// Функция вывода изображения на дисплей
/// Работает с памятью ST7920.
/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	81bb      	strh	r3, [r7, #12]
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	73bb      	strb	r3, [r7, #14]
 8000e2a:	e13a      	b.n	80010a2 <ST7920_Draw_bitmap+0x288>
		for (x = 0; x < 8; x++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e130      	b.n	8001094 <ST7920_Draw_bitmap+0x27a>
			if (y < 32) {
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	2b1f      	cmp	r3, #31
 8000e36:	d80e      	bhi.n	8000e56 <ST7920_Draw_bitmap+0x3c>
				ST7920_Send_command(0x80 | y);				//y(0-31)
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff1b 	bl	8000c7c <ST7920_Send_command>
				ST7920_Send_command(0x80 | x);				//x(0-8)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff14 	bl	8000c7c <ST7920_Send_command>
 8000e54:	e011      	b.n	8000e7a <ST7920_Draw_bitmap+0x60>
			} else {
				ST7920_Send_command(0x80 | (y - 32));		//y(0-31)
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	3b20      	subs	r3, #32
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff08 	bl	8000c7c <ST7920_Send_command>
				ST7920_Send_command(0x88 | x);				//x(0-8)
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff01 	bl	8000c7c <ST7920_Send_command>
			}

			i = ((y / 8) * 128) + (x * 16);
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	00da      	lsls	r2, r3, #3
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	81bb      	strh	r3, [r7, #12]
			Db = y % 8;
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	72fb      	strb	r3, [r7, #11]

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	fa42 f303 	asr.w	r3, r2, r3
 8000ea4:	01db      	lsls	r3, r3, #7
 8000ea6:	b25a      	sxtb	r2, r3
 8000ea8:	89bb      	ldrh	r3, [r7, #12]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	440b      	add	r3, r1
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	fa41 f303 	asr.w	r3, r1, r3
 8000eba:	019b      	lsls	r3, r3, #6
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	89bb      	ldrh	r3, [r7, #12]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	440b      	add	r3, r1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	fa41 f303 	asr.w	r3, r1, r3
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	f003 0320 	and.w	r3, r3, #32
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
 8000ee8:	89bb      	ldrh	r3, [r7, #12]
 8000eea:	3303      	adds	r3, #3
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	440b      	add	r3, r1
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	7afb      	ldrb	r3, [r7, #11]
 8000ef6:	fa41 f303 	asr.w	r3, r1, r3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	89bb      	ldrh	r3, [r7, #12]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	440b      	add	r3, r1
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	fa41 f303 	asr.w	r3, r1, r3
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b25a      	sxtb	r2, r3
 8000f28:	89bb      	ldrh	r3, [r7, #12]
 8000f2a:	3305      	adds	r3, #5
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	440b      	add	r3, r1
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	7afb      	ldrb	r3, [r7, #11]
 8000f36:	fa41 f303 	asr.w	r3, r1, r3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
 8000f48:	89bb      	ldrh	r3, [r7, #12]
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	440b      	add	r3, r1
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4619      	mov	r1, r3
 8000f54:	7afb      	ldrb	r3, [r7, #11]
 8000f56:	fa41 f303 	asr.w	r3, r1, r3
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b25a      	sxtb	r2, r3
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	3307      	adds	r3, #7
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	440b      	add	r3, r1
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	fa41 f303 	asr.w	r3, r1, r3
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8000f86:	72bb      	strb	r3, [r7, #10]
			ST7920_Send_data(Temp);
 8000f88:	7abb      	ldrb	r3, [r7, #10]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff feaa 	bl	8000ce4 <ST7920_Send_data>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 8000f90:	89bb      	ldrh	r3, [r7, #12]
 8000f92:	3308      	adds	r3, #8
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	fa42 f303 	asr.w	r3, r2, r3
 8000fa2:	01db      	lsls	r3, r3, #7
 8000fa4:	b25a      	sxtb	r2, r3
 8000fa6:	89bb      	ldrh	r3, [r7, #12]
 8000fa8:	3309      	adds	r3, #9
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	440b      	add	r3, r1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	fa41 f303 	asr.w	r3, r1, r3
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b25a      	sxtb	r2, r3
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
 8000fc8:	330a      	adds	r3, #10
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	440b      	add	r3, r1
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	7afb      	ldrb	r3, [r7, #11]
 8000fd4:	fa41 f303 	asr.w	r3, r1, r3
 8000fd8:	015b      	lsls	r3, r3, #5
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
 8000fe6:	89bb      	ldrh	r3, [r7, #12]
 8000fe8:	330b      	adds	r3, #11
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	440b      	add	r3, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	fa41 f303 	asr.w	r3, r1, r3
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	b25b      	sxtb	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b25a      	sxtb	r2, r3
 8001006:	89bb      	ldrh	r3, [r7, #12]
 8001008:	330c      	adds	r3, #12
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	440b      	add	r3, r1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	fa41 f303 	asr.w	r3, r1, r3
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	b25b      	sxtb	r3, r3
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	b25b      	sxtb	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b25a      	sxtb	r2, r3
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	330d      	adds	r3, #13
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	440b      	add	r3, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	7afb      	ldrb	r3, [r7, #11]
 8001034:	fa41 f303 	asr.w	r3, r1, r3
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	b25b      	sxtb	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
 8001046:	89bb      	ldrh	r3, [r7, #12]
 8001048:	330e      	adds	r3, #14
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	440b      	add	r3, r1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	fa41 f303 	asr.w	r3, r1, r3
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	b25b      	sxtb	r3, r3
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25a      	sxtb	r2, r3
 8001066:	89bb      	ldrh	r3, [r7, #12]
 8001068:	330f      	adds	r3, #15
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	440b      	add	r3, r1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	fa41 f303 	asr.w	r3, r1, r3
 8001078:	b25b      	sxtb	r3, r3
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	b25b      	sxtb	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 8001084:	72bb      	strb	r3, [r7, #10]

			ST7920_Send_data(Temp);
 8001086:	7abb      	ldrb	r3, [r7, #10]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fe2b 	bl	8000ce4 <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3301      	adds	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b07      	cmp	r3, #7
 8001098:	f67f aecb 	bls.w	8000e32 <ST7920_Draw_bitmap+0x18>
	for (y = 0; y < 64; y++) {
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	3301      	adds	r3, #1
 80010a0:	73bb      	strb	r3, [r7, #14]
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b3f      	cmp	r3, #63	; 0x3f
 80010a6:	f67f aec1 	bls.w	8000e2c <ST7920_Draw_bitmap+0x12>
		}
	}
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <ST7920_Draw_pixel>:
/*-------------------Функция вывода изображения на экран дисплея--------------------------*/

/*---------------------Функция рисования пикселя на экране----------------------------*/
void ST7920_Draw_pixel(uint8_t x, uint8_t y) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	460a      	mov	r2, r1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	4613      	mov	r3, r2
 80010c2:	71bb      	strb	r3, [r7, #6]
/// Функция рисования точки.
/// param\ x - координата по X(от 0 до 127)
/// paran\ y - координата по Y(от 0 до 63)
	if (y < ST7920_height && x < ST7920_width) {
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <ST7920_Draw_pixel+0x64>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	79ba      	ldrb	r2, [r7, #6]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d21e      	bcs.n	800110c <ST7920_Draw_pixel+0x58>
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <ST7920_Draw_pixel+0x68>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d219      	bcs.n	800110c <ST7920_Draw_pixel+0x58>
		Frame_buffer[(x) + ((y / 8) * 128)] |= 0x01 << y % 8;
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	b2d8      	uxtb	r0, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	4413      	add	r3, r2
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <ST7920_Draw_pixel+0x6c>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b259      	sxtb	r1, r3
 80010fe:	79fa      	ldrb	r2, [r7, #7]
 8001100:	4603      	mov	r3, r0
 8001102:	01db      	lsls	r3, r3, #7
 8001104:	4413      	add	r3, r2
 8001106:	b2c9      	uxtb	r1, r1
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <ST7920_Draw_pixel+0x6c>)
 800110a:	54d1      	strb	r1, [r2, r3]
	}
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000001 	.word	0x20000001
 800111c:	20000000 	.word	0x20000000
 8001120:	2000027c 	.word	0x2000027c

08001124 <ST7920_Update>:
	}
}
/*---------------------Функция удаления пикселя на экране----------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void ST7920_Update(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	/// Функция вывода буфера кадра на дисплей
	/// Подготовьте буфер кадра, перед тем, как обновить изображение
	ST7920_Draw_bitmap(Frame_buffer);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <ST7920_Update+0x10>)
 800112a:	f7ff fe76 	bl	8000e1a <ST7920_Draw_bitmap>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000027c 	.word	0x2000027c

08001138 <print_symbol>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void print_symbol(uint16_t x, uint16_t symbol, bool inversion) {
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	460b      	mov	r3, r1
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	70fb      	strb	r3, [r7, #3]
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
/// \param symbol - код символа
/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 8; i++) {
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e020      	b.n	8001192 <print_symbol+0x5a>
		if (inversion) {
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00e      	beq.n	8001174 <print_symbol+0x3c>
			Frame_buffer[i + x - 1] = ~Font[(symbol * 8) + i];
 8001156:	88bb      	ldrh	r3, [r7, #4]
 8001158:	00da      	lsls	r2, r3, #3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <print_symbol+0x6c>)
 8001160:	5cd2      	ldrb	r2, [r2, r3]
 8001162:	88f9      	ldrh	r1, [r7, #6]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	440b      	add	r3, r1
 8001168:	3b01      	subs	r3, #1
 800116a:	43d2      	mvns	r2, r2
 800116c:	b2d1      	uxtb	r1, r2
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <print_symbol+0x70>)
 8001170:	54d1      	strb	r1, [r2, r3]
 8001172:	e00b      	b.n	800118c <print_symbol+0x54>
		} else {
			Frame_buffer[i + x - 1] = Font[(symbol * 8) + i];
 8001174:	88bb      	ldrh	r3, [r7, #4]
 8001176:	00da      	lsls	r2, r3, #3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	441a      	add	r2, r3
 800117c:	88f9      	ldrh	r1, [r7, #6]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	440b      	add	r3, r1
 8001182:	3b01      	subs	r3, #1
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <print_symbol+0x6c>)
 8001186:	5c89      	ldrb	r1, [r1, r2]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <print_symbol+0x70>)
 800118a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i <= 8; i++) {
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3301      	adds	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b08      	cmp	r3, #8
 8001196:	dddb      	ble.n	8001150 <print_symbol+0x18>
		}

	}
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	08008538 	.word	0x08008538
 80011a8:	2000027c 	.word	0x2000027c

080011ac <ST7920_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

void ST7920_Decode_UTF8(uint16_t x, uint8_t y, bool inversion, char *tx_buffer) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	4603      	mov	r3, r0
 80011b6:	80fb      	strh	r3, [r7, #6]
 80011b8:	460b      	mov	r3, r1
 80011ba:	717b      	strb	r3, [r7, #5]
 80011bc:	4613      	mov	r3, r2
 80011be:	713b      	strb	r3, [r7, #4]
/// 4 строка: x = 384;
/// 5 строка: x = 512;
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
	x = x + y * 128;
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	01db      	lsls	r3, r3, #7
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4413      	add	r3, r2
 80011cc:	80fb      	strh	r3, [r7, #6]
	uint16_t symbol = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	e0c8      	b.n	800136e <ST7920_Decode_UTF8+0x1c2>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2bbf      	cmp	r3, #191	; 0xbf
 80011e6:	d822      	bhi.n	800122e <ST7920_Decode_UTF8+0x82>
			if (flag_block) {
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <ST7920_Decode_UTF8+0x48>
				flag_block = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	75fb      	strb	r3, [r7, #23]
 80011f2:	e0b9      	b.n	8001368 <ST7920_Decode_UTF8+0x1bc>
			} else {
				symbol = tx_buffer[i];
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	81fb      	strh	r3, [r7, #14]
				if (inversion) {
 80011fe:	793b      	ldrb	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <ST7920_Decode_UTF8+0x6a>
					print_symbol(x, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	3b20      	subs	r3, #32
 8001208:	b299      	uxth	r1, r3
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2201      	movs	r2, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff92 	bl	8001138 <print_symbol>
 8001214:	e007      	b.n	8001226 <ST7920_Decode_UTF8+0x7a>
				} else {
					print_symbol(x, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	3b20      	subs	r3, #32
 800121a:	b299      	uxth	r1, r3
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	2200      	movs	r2, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff89 	bl	8001138 <print_symbol>
				}
				x = x + 6;
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	3306      	adds	r3, #6
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	e09c      	b.n	8001368 <ST7920_Decode_UTF8+0x1bc>
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	4413      	add	r3, r2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	3301      	adds	r3, #1
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	440b      	add	r3, r1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21b      	sxth	r3, r3
 800124a:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8001252:	4293      	cmp	r3, r2
 8001254:	d820      	bhi.n	8001298 <ST7920_Decode_UTF8+0xec>
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	f24d 0281 	movw	r2, #53377	; 0xd081
 800125c:	4293      	cmp	r3, r2
 800125e:	d91b      	bls.n	8001298 <ST7920_Decode_UTF8+0xec>
				if (inversion) {
 8001260:	793b      	ldrb	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00a      	beq.n	800127c <ST7920_Decode_UTF8+0xd0>
					print_symbol(x, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800126c:	330f      	adds	r3, #15
 800126e:	b299      	uxth	r1, r3
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	2201      	movs	r2, #1
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <print_symbol>
 800127a:	e009      	b.n	8001290 <ST7920_Decode_UTF8+0xe4>
				} else {
					print_symbol(x, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001282:	330f      	adds	r3, #15
 8001284:	b299      	uxth	r1, r3
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	2200      	movs	r2, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff54 	bl	8001138 <print_symbol>
				}
				x = x + 6;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	3306      	adds	r3, #6
 8001294:	80fb      	strh	r3, [r7, #6]
 8001296:	e065      	b.n	8001364 <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD081) {
 8001298:	89fb      	ldrh	r3, [r7, #14]
 800129a:	f24d 0281 	movw	r2, #53377	; 0xd081
 800129e:	4293      	cmp	r3, r2
 80012a0:	d113      	bne.n	80012ca <ST7920_Decode_UTF8+0x11e>
				if (inversion) {
 80012a2:	793b      	ldrb	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <ST7920_Decode_UTF8+0x10a>
					print_symbol(x, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	2201      	movs	r2, #1
 80012ac:	219f      	movs	r1, #159	; 0x9f
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff42 	bl	8001138 <print_symbol>
 80012b4:	e005      	b.n	80012c2 <ST7920_Decode_UTF8+0x116>
				} else {
					print_symbol(x, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2200      	movs	r2, #0
 80012ba:	219f      	movs	r1, #159	; 0x9f
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff3b 	bl	8001138 <print_symbol>
				}
				x = x + 6;
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	3306      	adds	r3, #6
 80012c6:	80fb      	strh	r3, [r7, #6]
 80012c8:	e04c      	b.n	8001364 <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD191) {
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	f24d 1291 	movw	r2, #53649	; 0xd191
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d113      	bne.n	80012fc <ST7920_Decode_UTF8+0x150>
				if (inversion) {
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <ST7920_Decode_UTF8+0x13c>
					print_symbol(x, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2201      	movs	r2, #1
 80012de:	21a0      	movs	r1, #160	; 0xa0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff29 	bl	8001138 <print_symbol>
 80012e6:	e005      	b.n	80012f4 <ST7920_Decode_UTF8+0x148>
				} else {
					print_symbol(x, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	2200      	movs	r2, #0
 80012ec:	21a0      	movs	r1, #160	; 0xa0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff22 	bl	8001138 <print_symbol>
				}
				x = x + 6;
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	3306      	adds	r3, #6
 80012f8:	80fb      	strh	r3, [r7, #6]
 80012fa:	e033      	b.n	8001364 <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xC2B0) {
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 8001302:	4293      	cmp	r3, r2
 8001304:	d113      	bne.n	800132e <ST7920_Decode_UTF8+0x182>
				if (inversion) {
 8001306:	793b      	ldrb	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <ST7920_Decode_UTF8+0x16e>
					print_symbol(x, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	2201      	movs	r2, #1
 8001310:	21a1      	movs	r1, #161	; 0xa1
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff10 	bl	8001138 <print_symbol>
 8001318:	e005      	b.n	8001326 <ST7920_Decode_UTF8+0x17a>
				} else {
					print_symbol(x, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	2200      	movs	r2, #0
 800131e:	21a1      	movs	r1, #161	; 0xa1
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff09 	bl	8001138 <print_symbol>
				}
				x = x + 6;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	3306      	adds	r3, #6
 800132a:	80fb      	strh	r3, [r7, #6]
 800132c:	e01a      	b.n	8001364 <ST7920_Decode_UTF8+0x1b8>
			}

			else {
				if (inversion) {
 800132e:	793b      	ldrb	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00a      	beq.n	800134a <ST7920_Decode_UTF8+0x19e>
					print_symbol(x, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800133a:	330f      	adds	r3, #15
 800133c:	b299      	uxth	r1, r3
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2201      	movs	r2, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fef8 	bl	8001138 <print_symbol>
 8001348:	e009      	b.n	800135e <ST7920_Decode_UTF8+0x1b2>
				} else {
					print_symbol(x, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001350:	330f      	adds	r3, #15
 8001352:	b299      	uxth	r1, r3
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	2200      	movs	r2, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff feed 	bl	8001138 <print_symbol>
				}
				x = x + 6;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	3306      	adds	r3, #6
 8001362:	80fb      	strh	r3, [r7, #6]
			}
			flag_block = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	3301      	adds	r3, #1
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f7fe feee 	bl	8000150 <strlen>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	f63f af2f 	bhi.w	80011dc <ST7920_Decode_UTF8+0x30>
		}
	}
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <ST7920_Inversion>:

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

/*---------------------Функция инверсии любого места в буфере------------------*/
void ST7920_Inversion(uint16_t x_start, uint16_t x_end) {
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	80fb      	strh	r3, [r7, #6]
 8001394:	4613      	mov	r3, r2
 8001396:	80bb      	strh	r3, [r7, #4]
/// Функция инверсии любого места в буфере
/// \param x_start - начальная точка по х от 0 до 1024
/// \param x_end - конечная точка по y от 0 до 1024
	for (; x_start < x_end; x_start++) {
 8001398:	e00a      	b.n	80013b0 <ST7920_Inversion+0x28>
		Frame_buffer[x_start] = ~(Frame_buffer[x_start]);
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <ST7920_Inversion+0x3c>)
 800139e:	5cd2      	ldrb	r2, [r2, r3]
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	43d2      	mvns	r2, r2
 80013a4:	b2d1      	uxtb	r1, r2
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <ST7920_Inversion+0x3c>)
 80013a8:	54d1      	strb	r1, [r2, r3]
	for (; x_start < x_end; x_start++) {
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	3301      	adds	r3, #1
 80013ae:	80fb      	strh	r3, [r7, #6]
 80013b0:	88fa      	ldrh	r2, [r7, #6]
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3f0      	bcc.n	800139a <ST7920_Inversion+0x12>
	}
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	2000027c 	.word	0x2000027c

080013c8 <ST7920_Clean_Frame_buffer>:
/*---------------------Функция инверсии любого места в буфере------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void ST7920_Clean_Frame_buffer(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 80013cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d0:	2100      	movs	r1, #0
 80013d2:	4802      	ldr	r0, [pc, #8]	; (80013dc <ST7920_Clean_Frame_buffer+0x14>)
 80013d4:	f003 fa7e 	bl	80048d4 <memset>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000027c 	.word	0x2000027c

080013e0 <ST7920_Draw_line>:
/*------------------------Функция очистки буфера кадра-------------------------*/

void ST7920_Draw_line(uint8_t x_start, uint8_t y_start, uint8_t x_end, uint8_t y_end) {
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4604      	mov	r4, r0
 80013e8:	4608      	mov	r0, r1
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4623      	mov	r3, r4
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	4603      	mov	r3, r0
 80013f4:	71bb      	strb	r3, [r7, #6]
 80013f6:	460b      	mov	r3, r1
 80013f8:	717b      	strb	r3, [r7, #5]
 80013fa:	4613      	mov	r3, r2
 80013fc:	713b      	strb	r3, [r7, #4]
	int dx = (x_end >= x_start) ? x_end - x_start : x_start - x_end;
 80013fe:	797a      	ldrb	r2, [r7, #5]
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	429a      	cmp	r2, r3
 8001404:	d303      	bcc.n	800140e <ST7920_Draw_line+0x2e>
 8001406:	797a      	ldrb	r2, [r7, #5]
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	e002      	b.n	8001414 <ST7920_Draw_line+0x34>
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	797b      	ldrb	r3, [r7, #5]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	61bb      	str	r3, [r7, #24]
	int dy = (y_end >= y_start) ? y_end - y_start : y_start - y_end;
 8001416:	793a      	ldrb	r2, [r7, #4]
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	429a      	cmp	r2, r3
 800141c:	d303      	bcc.n	8001426 <ST7920_Draw_line+0x46>
 800141e:	793a      	ldrb	r2, [r7, #4]
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	e002      	b.n	800142c <ST7920_Draw_line+0x4c>
 8001426:	79ba      	ldrb	r2, [r7, #6]
 8001428:	793b      	ldrb	r3, [r7, #4]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
	int sx = (x_start < x_end) ? 1 : -1;
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	429a      	cmp	r2, r3
 8001434:	d201      	bcs.n	800143a <ST7920_Draw_line+0x5a>
 8001436:	2301      	movs	r3, #1
 8001438:	e001      	b.n	800143e <ST7920_Draw_line+0x5e>
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	613b      	str	r3, [r7, #16]
	int sy = (y_start < y_end) ? 1 : -1;
 8001440:	79ba      	ldrb	r2, [r7, #6]
 8001442:	793b      	ldrb	r3, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d201      	bcs.n	800144c <ST7920_Draw_line+0x6c>
 8001448:	2301      	movs	r3, #1
 800144a:	e001      	b.n	8001450 <ST7920_Draw_line+0x70>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	60fb      	str	r3, [r7, #12]
	int err = dx - dy;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]

	for (;;) {
		ST7920_Draw_pixel(x_start, y_start);
 800145a:	79ba      	ldrb	r2, [r7, #6]
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe27 	bl	80010b4 <ST7920_Draw_pixel>
		if (x_start == x_end && y_start == y_end)
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	797b      	ldrb	r3, [r7, #5]
 800146a:	429a      	cmp	r2, r3
 800146c:	d103      	bne.n	8001476 <ST7920_Draw_line+0x96>
 800146e:	79ba      	ldrb	r2, [r7, #6]
 8001470:	793b      	ldrb	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d01e      	beq.n	80014b4 <ST7920_Draw_line+0xd4>
			break;
		int e2 = err + err;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
		if (e2 > -dy) {
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	425b      	negs	r3, r3
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	429a      	cmp	r2, r3
 8001484:	dd08      	ble.n	8001498 <ST7920_Draw_line+0xb8>
			err -= dy;
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	61fb      	str	r3, [r7, #28]
			x_start += sx;
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4413      	add	r3, r2
 8001496:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 < dx) {
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	429a      	cmp	r2, r3
 800149e:	dadc      	bge.n	800145a <ST7920_Draw_line+0x7a>
			err += dx;
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4413      	add	r3, r2
 80014a6:	61fb      	str	r3, [r7, #28]
			y_start += sy;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	79bb      	ldrb	r3, [r7, #6]
 80014ae:	4413      	add	r3, r2
 80014b0:	71bb      	strb	r3, [r7, #6]
	for (;;) {
 80014b2:	e7d2      	b.n	800145a <ST7920_Draw_line+0x7a>
			break;
 80014b4:	bf00      	nop
		}
	}
}
 80014b6:	bf00      	nop
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
	...

080014c0 <ST7920_Draw_rectangle>:

/********************************РАБОТА С ГЕОМЕТРИЧЕСКИМИ ФИГУРАМИ**********************************/

/*--------------------------------Вывести пустотелый прямоугольник---------------------------------*/
void ST7920_Draw_rectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height) {
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4604      	mov	r4, r0
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4623      	mov	r3, r4
 80014d0:	80fb      	strh	r3, [r7, #6]
 80014d2:	4603      	mov	r3, r0
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	807b      	strh	r3, [r7, #2]
 80014da:	4613      	mov	r3, r2
 80014dc:	803b      	strh	r3, [r7, #0]
/// \param y - начальная точка по оси "y"
/// \param width - ширина прямоугольника
/// \param height - высота прямоугольника

	/*Проверка ширины и высоты*/
	if ((x + width) >= ST7920_width) {
 80014de:	88fa      	ldrh	r2, [r7, #6]
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <ST7920_Draw_rectangle+0xf0>)
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	4293      	cmp	r3, r2
 80014ea:	db05      	blt.n	80014f8 <ST7920_Draw_rectangle+0x38>
		width = ST7920_width - x;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <ST7920_Draw_rectangle+0xf0>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + height) >= ST7920_height) {
 80014f8:	88ba      	ldrh	r2, [r7, #4]
 80014fa:	883b      	ldrh	r3, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <ST7920_Draw_rectangle+0xf4>)
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	4293      	cmp	r3, r2
 8001504:	db05      	blt.n	8001512 <ST7920_Draw_rectangle+0x52>
		height = ST7920_height - y;
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <ST7920_Draw_rectangle+0xf4>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b29a      	uxth	r2, r3
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	803b      	strh	r3, [r7, #0]
	}

	/*Рисуем линии*/
	ST7920_Draw_line(x, y, x + width, y); /*Верх прямоугольника*/
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	b2d8      	uxtb	r0, r3
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	b2d9      	uxtb	r1, r3
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b2da      	uxtb	r2, r3
 8001526:	88bb      	ldrh	r3, [r7, #4]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f7ff ff59 	bl	80013e0 <ST7920_Draw_line>
	ST7920_Draw_line(x, y + height, x + width, y + height); /*Низ прямоугольника*/
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	b2d8      	uxtb	r0, r3
 8001532:	88bb      	ldrh	r3, [r7, #4]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	883b      	ldrh	r3, [r7, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	b2d9      	uxtb	r1, r3
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b2dc      	uxtb	r4, r3
 800154a:	88bb      	ldrh	r3, [r7, #4]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	883b      	ldrh	r3, [r7, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4622      	mov	r2, r4
 8001558:	f7ff ff42 	bl	80013e0 <ST7920_Draw_line>
	ST7920_Draw_line(x, y, x, y + height); /*Левая сторона прямоугольника*/
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	b2d8      	uxtb	r0, r3
 8001560:	88bb      	ldrh	r3, [r7, #4]
 8001562:	b2d9      	uxtb	r1, r3
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	b2dc      	uxtb	r4, r3
 8001568:	88bb      	ldrh	r3, [r7, #4]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	883b      	ldrh	r3, [r7, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4413      	add	r3, r2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4622      	mov	r2, r4
 8001576:	f7ff ff33 	bl	80013e0 <ST7920_Draw_line>
	ST7920_Draw_line(x + width, y, x + width, y + height); /*Правая сторона прямоугольника*/
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4413      	add	r3, r2
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4413      	add	r3, r2
 8001594:	b2dc      	uxtb	r4, r3
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	883b      	ldrh	r3, [r7, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4413      	add	r3, r2
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4622      	mov	r2, r4
 80015a4:	f7ff ff1c 	bl	80013e0 <ST7920_Draw_line>
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000001 	.word	0x20000001

080015b8 <ST7920_Draw_rectangle_filled>:
/*--------------------------------Вывести пустотелый прямоугольник---------------------------------*/

/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/
void ST7920_Draw_rectangle_filled(uint16_t x, uint16_t y, uint16_t width, uint16_t height) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4604      	mov	r4, r0
 80015c0:	4608      	mov	r0, r1
 80015c2:	4611      	mov	r1, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4623      	mov	r3, r4
 80015c8:	80fb      	strh	r3, [r7, #6]
 80015ca:	4603      	mov	r3, r0
 80015cc:	80bb      	strh	r3, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	807b      	strh	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	803b      	strh	r3, [r7, #0]
/// \param y - начальная точка по оси "y"
/// \param width - ширина прямоугольника
/// \param height - высота прямоугольника

	/*Проверка ширины и высоты*/
	if ((x + width) >= ST7920_width) {
 80015d6:	88fa      	ldrh	r2, [r7, #6]
 80015d8:	887b      	ldrh	r3, [r7, #2]
 80015da:	4413      	add	r3, r2
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <ST7920_Draw_rectangle_filled+0x9c>)
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	4293      	cmp	r3, r2
 80015e2:	db05      	blt.n	80015f0 <ST7920_Draw_rectangle_filled+0x38>
		width = ST7920_width - x;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <ST7920_Draw_rectangle_filled+0x9c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	807b      	strh	r3, [r7, #2]
	}
	if ((y + height) >= ST7920_height) {
 80015f0:	88ba      	ldrh	r2, [r7, #4]
 80015f2:	883b      	ldrh	r3, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <ST7920_Draw_rectangle_filled+0xa0>)
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	db05      	blt.n	800160a <ST7920_Draw_rectangle_filled+0x52>
		height = ST7920_height - y;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <ST7920_Draw_rectangle_filled+0xa0>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b29a      	uxth	r2, r3
 8001604:	88bb      	ldrh	r3, [r7, #4]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	803b      	strh	r3, [r7, #0]
	}

	/*Рисуем линии*/
	for (uint8_t i = 0; i <= height; i++) {
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e017      	b.n	8001640 <ST7920_Draw_rectangle_filled+0x88>
		ST7920_Draw_line(x, y + i, x + width, y + i);
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	b2d8      	uxtb	r0, r3
 8001614:	88bb      	ldrh	r3, [r7, #4]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	4413      	add	r3, r2
 800161c:	b2d9      	uxtb	r1, r3
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4413      	add	r3, r2
 8001628:	b2dc      	uxtb	r4, r3
 800162a:	88bb      	ldrh	r3, [r7, #4]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4413      	add	r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4622      	mov	r2, r4
 8001636:	f7ff fed3 	bl	80013e0 <ST7920_Draw_line>
	for (uint8_t i = 0; i <= height; i++) {
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	3301      	adds	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	b29b      	uxth	r3, r3
 8001644:	883a      	ldrh	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d2e2      	bcs.n	8001610 <ST7920_Draw_rectangle_filled+0x58>
	}
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	20000000 	.word	0x20000000
 8001658:	20000001 	.word	0x20000001

0800165c <ST7920_Draw_circle>:
/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/

/*---------------------------------Вывести пустотелую окружность-----------------------------------*/
void ST7920_Draw_circle(uint8_t x, uint8_t y, uint8_t radius) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	460b      	mov	r3, r1
 8001668:	71bb      	strb	r3, [r7, #6]
 800166a:	4613      	mov	r3, r2
 800166c:	717b      	strb	r3, [r7, #5]
/// Вывести пустотелую окружность
/// \param x - точка центра окружности по оси "x"
/// \param y - точка центра окружности по оси "y"
/// \param radius - радиус окружности

	int f = 1 - (int) radius;
 800166e:	797b      	ldrb	r3, [r7, #5]
 8001670:	f1c3 0301 	rsb	r3, r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
	int ddF_x = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]

	int ddF_y = -2 * (int) radius;
 800167a:	797a      	ldrb	r2, [r7, #5]
 800167c:	4613      	mov	r3, r2
 800167e:	07db      	lsls	r3, r3, #31
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	617b      	str	r3, [r7, #20]
	int x_0 = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]

	ST7920_Draw_pixel(x, y + radius);
 800168a:	79ba      	ldrb	r2, [r7, #6]
 800168c:	797b      	ldrb	r3, [r7, #5]
 800168e:	4413      	add	r3, r2
 8001690:	b2da      	uxtb	r2, r3
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fd0c 	bl	80010b4 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x, y - radius);
 800169c:	79ba      	ldrb	r2, [r7, #6]
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd03 	bl	80010b4 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x + radius, y);
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	797b      	ldrb	r3, [r7, #5]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	79ba      	ldrb	r2, [r7, #6]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fcfa 	bl	80010b4 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x - radius, y);
 80016c0:	79fa      	ldrb	r2, [r7, #7]
 80016c2:	797b      	ldrb	r3, [r7, #5]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	79ba      	ldrb	r2, [r7, #6]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fcf1 	bl	80010b4 <ST7920_Draw_pixel>

	int y_0 = radius;
 80016d2:	797b      	ldrb	r3, [r7, #5]
 80016d4:	60fb      	str	r3, [r7, #12]
	while (x_0 < y_0) {
 80016d6:	e07e      	b.n	80017d6 <ST7920_Draw_circle+0x17a>
		if (f >= 0) {
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db09      	blt.n	80016f2 <ST7920_Draw_circle+0x96>
			y_0--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
			ddF_y += 2;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3302      	adds	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
			f += ddF_y;
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	4413      	add	r3, r2
 80016f0:	61fb      	str	r3, [r7, #28]
		}
		x_0++;
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	3301      	adds	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
		ddF_x += 2;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	3302      	adds	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
		f += ddF_x;
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4413      	add	r3, r2
 8001704:	61fb      	str	r3, [r7, #28]
		ST7920_Draw_pixel(x + x_0, y + y_0);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4413      	add	r3, r2
 800170e:	b2d8      	uxtb	r0, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	4413      	add	r3, r2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fcca 	bl	80010b4 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - x_0, y + y_0);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b2d8      	uxtb	r0, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fcbd 	bl	80010b4 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + x_0, y - y_0);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4413      	add	r3, r2
 8001742:	b2d8      	uxtb	r0, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	79ba      	ldrb	r2, [r7, #6]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff fcb0 	bl	80010b4 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - x_0, y - y_0);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	b2d8      	uxtb	r0, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	79ba      	ldrb	r2, [r7, #6]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fca3 	bl	80010b4 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + y_0, y + x_0);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4413      	add	r3, r2
 8001776:	b2d8      	uxtb	r0, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	4413      	add	r3, r2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4619      	mov	r1, r3
 8001784:	f7ff fc96 	bl	80010b4 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - y_0, y + x_0);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	b2d8      	uxtb	r0, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	4413      	add	r3, r2
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff fc89 	bl	80010b4 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + y_0, y - x_0);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4413      	add	r3, r2
 80017aa:	b2d8      	uxtb	r0, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	79ba      	ldrb	r2, [r7, #6]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fc7c 	bl	80010b4 <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - y_0, y - x_0);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b2d8      	uxtb	r0, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	79ba      	ldrb	r2, [r7, #6]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff fc6f 	bl	80010b4 <ST7920_Draw_pixel>
	while (x_0 < y_0) {
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	429a      	cmp	r2, r3
 80017dc:	f6ff af7c 	blt.w	80016d8 <ST7920_Draw_circle+0x7c>
	}
}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <ST7920_Draw_circle_filled>:
/*---------------------------------Вывести пустотелую окружность-----------------------------------*/

/*--------------------------------Вывести закрашенную окружность-----------------------------------*/
void ST7920_Draw_circle_filled(int16_t x, int16_t y, int16_t radius) {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
 80017f2:	460b      	mov	r3, r1
 80017f4:	80bb      	strh	r3, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	807b      	strh	r3, [r7, #2]
/// Вывести закрашенную окружность
/// \param x - точка центра окружности по оси "x"
/// \param y - точка центра окружности по оси "y"
/// \param radius - радиус окружности

	int16_t f = 1 - radius;
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	f1c3 0301 	rsb	r3, r3, #1
 8001800:	b29b      	uxth	r3, r3
 8001802:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * radius;
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	461a      	mov	r2, r3
 800180c:	03d2      	lsls	r2, r2, #15
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b29b      	uxth	r3, r3
 8001814:	827b      	strh	r3, [r7, #18]
	int16_t x_0 = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	823b      	strh	r3, [r7, #16]
	int16_t y_0 = radius;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	81fb      	strh	r3, [r7, #14]

	ST7920_Draw_pixel(x, y + radius);
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	b2d8      	uxtb	r0, r3
 8001822:	88bb      	ldrh	r3, [r7, #4]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff fc40 	bl	80010b4 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x, y - radius);
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	b2d8      	uxtb	r0, r3
 8001838:	88bb      	ldrh	r3, [r7, #4]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff fc35 	bl	80010b4 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x + radius, y);
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b2db      	uxtb	r3, r3
 8001856:	88ba      	ldrh	r2, [r7, #4]
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fc29 	bl	80010b4 <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x - radius, y);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	88ba      	ldrh	r2, [r7, #4]
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fc1d 	bl	80010b4 <ST7920_Draw_pixel>
	ST7920_Draw_line(x - radius, y, x + radius, y);
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b2d8      	uxtb	r0, r3
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	b2d9      	uxtb	r1, r3
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b2da      	uxtb	r2, r3
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f7ff fda1 	bl	80013e0 <ST7920_Draw_line>

	while (x_0 < y_0) {
 800189e:	e08d      	b.n	80019bc <ST7920_Draw_circle_filled+0x1d4>
		if (f >= 0) {
 80018a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0e      	blt.n	80018c6 <ST7920_Draw_circle_filled+0xde>
			y_0--;
 80018a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80018b4:	8a7b      	ldrh	r3, [r7, #18]
 80018b6:	3302      	adds	r3, #2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80018bc:	8afa      	ldrh	r2, [r7, #22]
 80018be:	8a7b      	ldrh	r3, [r7, #18]
 80018c0:	4413      	add	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	82fb      	strh	r3, [r7, #22]
		}
		x_0++;
 80018c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80018d2:	8abb      	ldrh	r3, [r7, #20]
 80018d4:	3302      	adds	r3, #2
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80018da:	8afa      	ldrh	r2, [r7, #22]
 80018dc:	8abb      	ldrh	r3, [r7, #20]
 80018de:	4413      	add	r3, r2
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	82fb      	strh	r3, [r7, #22]

		ST7920_Draw_line(x - x_0, y + y_0, x + x_0, y + y_0);
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	8a3b      	ldrh	r3, [r7, #16]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	b2d8      	uxtb	r0, r3
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b2d9      	uxtb	r1, r3
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	8a3b      	ldrh	r3, [r7, #16]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b2dc      	uxtb	r4, r3
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	89fb      	ldrh	r3, [r7, #14]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4622      	mov	r2, r4
 8001916:	f7ff fd63 	bl	80013e0 <ST7920_Draw_line>
		ST7920_Draw_line(x + x_0, y - y_0, x - x_0, y - y_0);
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	8a3b      	ldrh	r3, [r7, #16]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4413      	add	r3, r2
 8001924:	b2d8      	uxtb	r0, r3
 8001926:	88bb      	ldrh	r3, [r7, #4]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	b2d9      	uxtb	r1, r3
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	8a3b      	ldrh	r3, [r7, #16]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	b2dc      	uxtb	r4, r3
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4622      	mov	r2, r4
 800194c:	f7ff fd48 	bl	80013e0 <ST7920_Draw_line>
		ST7920_Draw_line(x + y_0, y + x_0, x - y_0, y + x_0);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b2d8      	uxtb	r0, r3
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	8a3b      	ldrh	r3, [r7, #16]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4413      	add	r3, r2
 8001966:	b2d9      	uxtb	r1, r3
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	b2dc      	uxtb	r4, r3
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	8a3b      	ldrh	r3, [r7, #16]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4413      	add	r3, r2
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4622      	mov	r2, r4
 8001982:	f7ff fd2d 	bl	80013e0 <ST7920_Draw_line>
		ST7920_Draw_line(x + y_0, y - x_0, x - y_0, y - x_0);
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4413      	add	r3, r2
 8001990:	b2d8      	uxtb	r0, r3
 8001992:	88bb      	ldrh	r3, [r7, #4]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	8a3b      	ldrh	r3, [r7, #16]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b2d9      	uxtb	r1, r3
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	89fb      	ldrh	r3, [r7, #14]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b2dc      	uxtb	r4, r3
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	8a3b      	ldrh	r3, [r7, #16]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4622      	mov	r2, r4
 80019b8:	f7ff fd12 	bl	80013e0 <ST7920_Draw_line>
	while (x_0 < y_0) {
 80019bc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80019c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f6ff af6b 	blt.w	80018a0 <ST7920_Draw_circle_filled+0xb8>
	}
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}

080019d2 <ST7920_Draw_triangle>:
/*--------------------------------Вывести закрашенную окружность-----------------------------------*/

/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/
void ST7920_Draw_triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3) {
 80019d2:	b590      	push	{r4, r7, lr}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4604      	mov	r4, r0
 80019da:	4608      	mov	r0, r1
 80019dc:	4611      	mov	r1, r2
 80019de:	461a      	mov	r2, r3
 80019e0:	4623      	mov	r3, r4
 80019e2:	80fb      	strh	r3, [r7, #6]
 80019e4:	4603      	mov	r3, r0
 80019e6:	80bb      	strh	r3, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	803b      	strh	r3, [r7, #0]
/// \param x_2 - вторая точка треугольника. Координата по оси "x"
/// \param y_2 - вторая точка треугольника. Координата по оси "y"
/// \param x_3 - третья точка треугольника. Координата по оси "x"
/// \param y_3 - третья точка треугольника. Координата по оси "y"

	ST7920_Draw_line(x1, y1, x2, y2);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	b2d8      	uxtb	r0, r3
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	b2d9      	uxtb	r1, r3
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	883b      	ldrh	r3, [r7, #0]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f7ff fcee 	bl	80013e0 <ST7920_Draw_line>
	ST7920_Draw_line(x2, y2, x3, y3);
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	b2d8      	uxtb	r0, r3
 8001a08:	883b      	ldrh	r3, [r7, #0]
 8001a0a:	b2d9      	uxtb	r1, r3
 8001a0c:	8b3b      	ldrh	r3, [r7, #24]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	8bbb      	ldrh	r3, [r7, #28]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f7ff fce4 	bl	80013e0 <ST7920_Draw_line>
	ST7920_Draw_line(x3, y3, x1, y1);
 8001a18:	8b3b      	ldrh	r3, [r7, #24]
 8001a1a:	b2d8      	uxtb	r0, r3
 8001a1c:	8bbb      	ldrh	r3, [r7, #28]
 8001a1e:	b2d9      	uxtb	r1, r3
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f7ff fcda 	bl	80013e0 <ST7920_Draw_line>
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <ST7920_Draw_triangle_filled>:
/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/

/*----------------------------------Вывести закрашенный треугольник--------------------------------*/
void ST7920_Draw_triangle_filled(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b08b      	sub	sp, #44	; 0x2c
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4623      	mov	r3, r4
 8001a44:	80fb      	strh	r3, [r7, #6]
 8001a46:	4603      	mov	r3, r0
 8001a48:	80bb      	strh	r3, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	807b      	strh	r3, [r7, #2]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	803b      	strh	r3, [r7, #0]
/// \param y_2 - вторая точка треугольника. Координата по оси "y"
/// \param x_3 - третья точка треугольника. Координата по оси "x"
/// \param y_3 - третья точка треугольника. Координата по оси "y"

#define ABS(x)   ((x) > 0 ? (x) : -(x))
int16_t deltax = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	823b      	strh	r3, [r7, #16]
int16_t deltay = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	81fb      	strh	r3, [r7, #14]
int16_t x = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	84fb      	strh	r3, [r7, #38]	; 0x26
int16_t y = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	84bb      	strh	r3, [r7, #36]	; 0x24
int16_t xinc1 = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	847b      	strh	r3, [r7, #34]	; 0x22
int16_t xinc2 = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	843b      	strh	r3, [r7, #32]
int16_t yinc1 = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	83fb      	strh	r3, [r7, #30]
int16_t yinc2 = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	83bb      	strh	r3, [r7, #28]
int16_t den = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	837b      	strh	r3, [r7, #26]
int16_t num = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	833b      	strh	r3, [r7, #24]
int16_t numadd = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	82fb      	strh	r3, [r7, #22]
int16_t numpixels = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	82bb      	strh	r3, [r7, #20]
int16_t curpixel = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bfb8      	it	lt
 8001a90:	425b      	neglt	r3, r3
 8001a92:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8001a94:	883a      	ldrh	r2, [r7, #0]
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bfb8      	it	lt
 8001a9e:	425b      	neglt	r3, r3
 8001aa0:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d304      	bcc.n	8001abc <ST7920_Draw_triangle_filled+0x88>
		xinc1 = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	843b      	strh	r3, [r7, #32]
 8001aba:	e005      	b.n	8001ac8 <ST7920_Draw_triangle_filled+0x94>
	} else {
		xinc1 = -1;
 8001abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac0:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8001ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac6:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8001ac8:	883a      	ldrh	r2, [r7, #0]
 8001aca:	88bb      	ldrh	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d304      	bcc.n	8001ada <ST7920_Draw_triangle_filled+0xa6>
		yinc1 = 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	83bb      	strh	r3, [r7, #28]
 8001ad8:	e005      	b.n	8001ae6 <ST7920_Draw_triangle_filled+0xb2>
	} else {
		yinc1 = -1;
 8001ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ade:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8001ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae4:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8001ae6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	db10      	blt.n	8001b14 <ST7920_Draw_triangle_filled+0xe0>
		xinc1 = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8001afa:	8a3b      	ldrh	r3, [r7, #16]
 8001afc:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001afe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b02:	0fda      	lsrs	r2, r3, #31
 8001b04:	4413      	add	r3, r2
 8001b06:	105b      	asrs	r3, r3, #1
 8001b08:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001b0e:	8a3b      	ldrh	r3, [r7, #16]
 8001b10:	82bb      	strh	r3, [r7, #20]
 8001b12:	e00f      	b.n	8001b34 <ST7920_Draw_triangle_filled+0x100>
	} else {
		xinc2 = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8001b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b24:	0fda      	lsrs	r2, r3, #31
 8001b26:	4413      	add	r3, r2
 8001b28:	105b      	asrs	r3, r3, #1
 8001b2a:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001b2c:	8a3b      	ldrh	r3, [r7, #16]
 8001b2e:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8001b30:	89fb      	ldrh	r3, [r7, #14]
 8001b32:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	827b      	strh	r3, [r7, #18]
 8001b38:	e033      	b.n	8001ba2 <ST7920_Draw_triangle_filled+0x16e>
		ST7920_Draw_line(x, y, x3, y3);
 8001b3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b3c:	b2d8      	uxtb	r0, r3
 8001b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b40:	b2d9      	uxtb	r1, r3
 8001b42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f7ff fc49 	bl	80013e0 <ST7920_Draw_line>

		num += numadd;
 8001b4e:	8b3a      	ldrh	r2, [r7, #24]
 8001b50:	8afb      	ldrh	r3, [r7, #22]
 8001b52:	4413      	add	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001b58:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	db0e      	blt.n	8001b82 <ST7920_Draw_triangle_filled+0x14e>
			num -= den;
 8001b64:	8b3a      	ldrh	r2, [r7, #24]
 8001b66:	8b7b      	ldrh	r3, [r7, #26]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001b6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b72:	4413      	add	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8001b78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b7a:	8bfb      	ldrh	r3, [r7, #30]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8001b82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b84:	8c3b      	ldrh	r3, [r7, #32]
 8001b86:	4413      	add	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8001b8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b8e:	8bbb      	ldrh	r3, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001b96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	827b      	strh	r3, [r7, #18]
 8001ba2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ba6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	ddc5      	ble.n	8001b3a <ST7920_Draw_triangle_filled+0x106>
	}
}
 8001bae:	bf00      	nop
 8001bb0:	372c      	adds	r7, #44	; 0x2c
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd90      	pop	{r4, r7, pc}
	...

08001bb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af02      	add	r7, sp, #8

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001bbe:	f000 fe3b 	bl	8002838 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bc2:	f000 fb4b 	bl	800225c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001bc6:	f000 fc35 	bl	8002434 <MX_GPIO_Init>
	MX_DMA_Init();
 8001bca:	f000 fc15 	bl	80023f8 <MX_DMA_Init>
	MX_SPI1_Init();
 8001bce:	f000 fb8b 	bl	80022e8 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001bd2:	f000 fbbf 	bl	8002354 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	//HAL_TIM_Base_Start_IT(&htim1);
	HAL_TIM_Base_Start_IT(&htim1);
 8001bd6:	48c4      	ldr	r0, [pc, #784]	; (8001ee8 <main+0x330>)
 8001bd8:	f002 faac 	bl	8004134 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8001bdc:	2064      	movs	r0, #100	; 0x64
 8001bde:	f000 fe8d 	bl	80028fc <HAL_Delay>
	ST7920_Init();
 8001be2:	f7ff f8b3 	bl	8000d4c <ST7920_Init>
	ST7920_Graphic_mode(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff f8f2 	bl	8000dd0 <ST7920_Graphic_mode>
	ST7920_logo_demonstration();
 8001bec:	f7fe ffbc 	bl	8000b68 <ST7920_logo_demonstration>
	ST7920_Clean_Frame_buffer();
 8001bf0:	f7ff fbea 	bl	80013c8 <ST7920_Clean_Frame_buffer>
	ST7920_Update();
 8001bf4:	f7ff fa96 	bl	8001124 <ST7920_Update>
	ST7920_Inversion(0, 128);
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff fbc4 	bl	8001388 <ST7920_Inversion>
	Time_page = HAL_GetTick();
 8001c00:	f000 fe72 	bl	80028e8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4bb9      	ldr	r3, [pc, #740]	; (8001eec <main+0x334>)
 8001c08:	601a      	str	r2, [r3, #0]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() - Time_counter > 50) {
 8001c0a:	f000 fe6d 	bl	80028e8 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4bb7      	ldr	r3, [pc, #732]	; (8001ef0 <main+0x338>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b32      	cmp	r3, #50	; 0x32
 8001c18:	d909      	bls.n	8001c2e <main+0x76>
			Time_counter = HAL_GetTick();
 8001c1a:	f000 fe65 	bl	80028e8 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4bb3      	ldr	r3, [pc, #716]	; (8001ef0 <main+0x338>)
 8001c22:	601a      	str	r2, [r3, #0]
			counter++;
 8001c24:	4bb3      	ldr	r3, [pc, #716]	; (8001ef4 <main+0x33c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4ab2      	ldr	r2, [pc, #712]	; (8001ef4 <main+0x33c>)
 8001c2c:	6013      	str	r3, [r2, #0]
		}

		if (HAL_GetTick() - Time_page > 3000) {
 8001c2e:	f000 fe5b 	bl	80028e8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4bad      	ldr	r3, [pc, #692]	; (8001eec <main+0x334>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d917      	bls.n	8001c72 <main+0xba>
			Time_page = HAL_GetTick();
 8001c42:	f000 fe51 	bl	80028e8 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4ba8      	ldr	r3, [pc, #672]	; (8001eec <main+0x334>)
 8001c4a:	601a      	str	r2, [r3, #0]
			//ST7920_Clean();
			ST7920_Clean_Frame_buffer();
 8001c4c:	f7ff fbbc 	bl	80013c8 <ST7920_Clean_Frame_buffer>
			ST7920_Inversion(0, 128);
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fb98 	bl	8001388 <ST7920_Inversion>
			page++;
 8001c58:	4ba7      	ldr	r3, [pc, #668]	; (8001ef8 <main+0x340>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4ba5      	ldr	r3, [pc, #660]	; (8001ef8 <main+0x340>)
 8001c62:	701a      	strb	r2, [r3, #0]
			if (page > 4) {
 8001c64:	4ba4      	ldr	r3, [pc, #656]	; (8001ef8 <main+0x340>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d902      	bls.n	8001c72 <main+0xba>
				page = 0;
 8001c6c:	4ba2      	ldr	r3, [pc, #648]	; (8001ef8 <main+0x340>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
			}
		}

		if (page == 0) {
 8001c72:	4ba1      	ldr	r3, [pc, #644]	; (8001ef8 <main+0x340>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d144      	bne.n	8001d04 <main+0x14c>

			sprintf(tx_buffer, "Основное меню");
 8001c7a:	4aa0      	ldr	r2, [pc, #640]	; (8001efc <main+0x344>)
 8001c7c:	4ba0      	ldr	r3, [pc, #640]	; (8001f00 <main+0x348>)
 8001c7e:	4615      	mov	r5, r2
 8001c80:	461c      	mov	r4, r3
 8001c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c84:	6028      	str	r0, [r5, #0]
 8001c86:	6069      	str	r1, [r5, #4]
 8001c88:	60aa      	str	r2, [r5, #8]
 8001c8a:	60eb      	str	r3, [r5, #12]
 8001c8c:	cc03      	ldmia	r4!, {r0, r1}
 8001c8e:	6128      	str	r0, [r5, #16]
 8001c90:	6169      	str	r1, [r5, #20]
 8001c92:	8823      	ldrh	r3, [r4, #0]
 8001c94:	832b      	strh	r3, [r5, #24]
			ST7920_Decode_UTF8(25, 0, 1, tx_buffer);
 8001c96:	4b99      	ldr	r3, [pc, #612]	; (8001efc <main+0x344>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2019      	movs	r0, #25
 8001c9e:	f7ff fa85 	bl	80011ac <ST7920_Decode_UTF8>

			sprintf(tx_buffer, "Оплата программисту:");
 8001ca2:	4b96      	ldr	r3, [pc, #600]	; (8001efc <main+0x344>)
 8001ca4:	4a97      	ldr	r2, [pc, #604]	; (8001f04 <main+0x34c>)
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	469c      	mov	ip, r3
 8001caa:	f104 0e20 	add.w	lr, r4, #32
 8001cae:	4665      	mov	r5, ip
 8001cb0:	4626      	mov	r6, r4
 8001cb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cb4:	6028      	str	r0, [r5, #0]
 8001cb6:	6069      	str	r1, [r5, #4]
 8001cb8:	60aa      	str	r2, [r5, #8]
 8001cba:	60eb      	str	r3, [r5, #12]
 8001cbc:	3410      	adds	r4, #16
 8001cbe:	f10c 0c10 	add.w	ip, ip, #16
 8001cc2:	4574      	cmp	r4, lr
 8001cc4:	d1f3      	bne.n	8001cae <main+0xf6>
 8001cc6:	4663      	mov	r3, ip
 8001cc8:	4622      	mov	r2, r4
 8001cca:	6810      	ldr	r0, [r2, #0]
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	8891      	ldrh	r1, [r2, #4]
 8001cd0:	7992      	ldrb	r2, [r2, #6]
 8001cd2:	8099      	strh	r1, [r3, #4]
 8001cd4:	719a      	strb	r2, [r3, #6]
			ST7920_Decode_UTF8(0, 2, 0, tx_buffer);
 8001cd6:	4b89      	ldr	r3, [pc, #548]	; (8001efc <main+0x344>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2102      	movs	r1, #2
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7ff fa65 	bl	80011ac <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "Счетчик:%ld руб.", counter);
 8001ce2:	4b84      	ldr	r3, [pc, #528]	; (8001ef4 <main+0x33c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4987      	ldr	r1, [pc, #540]	; (8001f08 <main+0x350>)
 8001cea:	4884      	ldr	r0, [pc, #528]	; (8001efc <main+0x344>)
 8001cec:	f003 fc2e 	bl	800554c <siprintf>
			ST7920_Decode_UTF8(0, 4, 0, tx_buffer);
 8001cf0:	4b82      	ldr	r3, [pc, #520]	; (8001efc <main+0x344>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff fa58 	bl	80011ac <ST7920_Decode_UTF8>
			update = 1;
 8001cfc:	4b83      	ldr	r3, [pc, #524]	; (8001f0c <main+0x354>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	e290      	b.n	8002226 <main+0x66e>
		}

		else if (page == 1) {
 8001d04:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <main+0x340>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d177      	bne.n	8001dfc <main+0x244>
			sprintf(tx_buffer, "Настройки");
 8001d0c:	4a7b      	ldr	r2, [pc, #492]	; (8001efc <main+0x344>)
 8001d0e:	4b80      	ldr	r3, [pc, #512]	; (8001f10 <main+0x358>)
 8001d10:	4615      	mov	r5, r2
 8001d12:	461c      	mov	r4, r3
 8001d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d16:	6028      	str	r0, [r5, #0]
 8001d18:	6069      	str	r1, [r5, #4]
 8001d1a:	60aa      	str	r2, [r5, #8]
 8001d1c:	60eb      	str	r3, [r5, #12]
 8001d1e:	8823      	ldrh	r3, [r4, #0]
 8001d20:	78a2      	ldrb	r2, [r4, #2]
 8001d22:	822b      	strh	r3, [r5, #16]
 8001d24:	4613      	mov	r3, r2
 8001d26:	74ab      	strb	r3, [r5, #18]
			ST7920_Decode_UTF8(35, 0, 1, tx_buffer);
 8001d28:	4b74      	ldr	r3, [pc, #464]	; (8001efc <main+0x344>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2023      	movs	r0, #35	; 0x23
 8001d30:	f7ff fa3c 	bl	80011ac <ST7920_Decode_UTF8>

			sprintf(tx_buffer, ">Обогрев:вкл");
 8001d34:	4a71      	ldr	r2, [pc, #452]	; (8001efc <main+0x344>)
 8001d36:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <main+0x35c>)
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3e:	6020      	str	r0, [r4, #0]
 8001d40:	6061      	str	r1, [r4, #4]
 8001d42:	60a2      	str	r2, [r4, #8]
 8001d44:	60e3      	str	r3, [r4, #12]
 8001d46:	6828      	ldr	r0, [r5, #0]
 8001d48:	6120      	str	r0, [r4, #16]
 8001d4a:	88ab      	ldrh	r3, [r5, #4]
 8001d4c:	79aa      	ldrb	r2, [r5, #6]
 8001d4e:	82a3      	strh	r3, [r4, #20]
 8001d50:	4613      	mov	r3, r2
 8001d52:	75a3      	strb	r3, [r4, #22]
			ST7920_Decode_UTF8(0, 2, 0, tx_buffer);
 8001d54:	4b69      	ldr	r3, [pc, #420]	; (8001efc <main+0x344>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	2102      	movs	r1, #2
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff fa26 	bl	80011ac <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "Увлажнитель:вкл");
 8001d60:	4a66      	ldr	r2, [pc, #408]	; (8001efc <main+0x344>)
 8001d62:	4b6d      	ldr	r3, [pc, #436]	; (8001f18 <main+0x360>)
 8001d64:	4615      	mov	r5, r2
 8001d66:	461c      	mov	r4, r3
 8001d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6a:	6028      	str	r0, [r5, #0]
 8001d6c:	6069      	str	r1, [r5, #4]
 8001d6e:	60aa      	str	r2, [r5, #8]
 8001d70:	60eb      	str	r3, [r5, #12]
 8001d72:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001d74:	6128      	str	r0, [r5, #16]
 8001d76:	6169      	str	r1, [r5, #20]
 8001d78:	61aa      	str	r2, [r5, #24]
 8001d7a:	8823      	ldrh	r3, [r4, #0]
 8001d7c:	83ab      	strh	r3, [r5, #28]
			ST7920_Decode_UTF8(0, 3, 0, tx_buffer);
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <main+0x344>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	2103      	movs	r1, #3
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fa11 	bl	80011ac <ST7920_Decode_UTF8>
			for (uint8_t i = 0; i < 128; i++) {
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	e007      	b.n	8001da0 <main+0x1e8>
				ST7920_Draw_pixel(i, 40);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2128      	movs	r1, #40	; 0x28
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff f98d 	bl	80010b4 <ST7920_Draw_pixel>
			for (uint8_t i = 0; i < 128; i++) {
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	daf3      	bge.n	8001d90 <main+0x1d8>
			}
			sprintf(tx_buffer, "Уст.температура:25°C");
 8001da8:	4b54      	ldr	r3, [pc, #336]	; (8001efc <main+0x344>)
 8001daa:	4a5c      	ldr	r2, [pc, #368]	; (8001f1c <main+0x364>)
 8001dac:	4614      	mov	r4, r2
 8001dae:	469c      	mov	ip, r3
 8001db0:	f104 0e20 	add.w	lr, r4, #32
 8001db4:	4665      	mov	r5, ip
 8001db6:	4626      	mov	r6, r4
 8001db8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001dba:	6028      	str	r0, [r5, #0]
 8001dbc:	6069      	str	r1, [r5, #4]
 8001dbe:	60aa      	str	r2, [r5, #8]
 8001dc0:	60eb      	str	r3, [r5, #12]
 8001dc2:	3410      	adds	r4, #16
 8001dc4:	f10c 0c10 	add.w	ip, ip, #16
 8001dc8:	4574      	cmp	r4, lr
 8001dca:	d1f3      	bne.n	8001db4 <main+0x1fc>
 8001dcc:	4663      	mov	r3, ip
 8001dce:	4622      	mov	r2, r4
 8001dd0:	6810      	ldr	r0, [r2, #0]
 8001dd2:	6018      	str	r0, [r3, #0]
			ST7920_Decode_UTF8(0, 6, 0, tx_buffer);
 8001dd4:	4b49      	ldr	r3, [pc, #292]	; (8001efc <main+0x344>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2106      	movs	r1, #6
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff f9e6 	bl	80011ac <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "Уст.влажность:60%%");
 8001de0:	494f      	ldr	r1, [pc, #316]	; (8001f20 <main+0x368>)
 8001de2:	4846      	ldr	r0, [pc, #280]	; (8001efc <main+0x344>)
 8001de4:	f003 fbb2 	bl	800554c <siprintf>
			ST7920_Decode_UTF8(0, 7, 0, tx_buffer);
 8001de8:	4b44      	ldr	r3, [pc, #272]	; (8001efc <main+0x344>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	2107      	movs	r1, #7
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff f9dc 	bl	80011ac <ST7920_Decode_UTF8>
			update = 1;
 8001df4:	4b45      	ldr	r3, [pc, #276]	; (8001f0c <main+0x354>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e214      	b.n	8002226 <main+0x66e>
		}

		else if (page == 2) {
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <main+0x340>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f040 8099 	bne.w	8001f38 <main+0x380>
			sprintf(tx_buffer, "Шрифт 5x7");
 8001e06:	4a3d      	ldr	r2, [pc, #244]	; (8001efc <main+0x344>)
 8001e08:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <main+0x36c>)
 8001e0a:	4614      	mov	r4, r2
 8001e0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e0e:	6020      	str	r0, [r4, #0]
 8001e10:	6061      	str	r1, [r4, #4]
 8001e12:	60a2      	str	r2, [r4, #8]
 8001e14:	881a      	ldrh	r2, [r3, #0]
 8001e16:	789b      	ldrb	r3, [r3, #2]
 8001e18:	81a2      	strh	r2, [r4, #12]
 8001e1a:	73a3      	strb	r3, [r4, #14]
			ST7920_Decode_UTF8(35, 0, 1, tx_buffer);
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <main+0x344>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2100      	movs	r1, #0
 8001e22:	2023      	movs	r0, #35	; 0x23
 8001e24:	f7ff f9c2 	bl	80011ac <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "Съешь ещё этих мягких");
 8001e28:	4b34      	ldr	r3, [pc, #208]	; (8001efc <main+0x344>)
 8001e2a:	4a3f      	ldr	r2, [pc, #252]	; (8001f28 <main+0x370>)
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	469c      	mov	ip, r3
 8001e30:	f104 0e20 	add.w	lr, r4, #32
 8001e34:	4665      	mov	r5, ip
 8001e36:	4626      	mov	r6, r4
 8001e38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e3a:	6028      	str	r0, [r5, #0]
 8001e3c:	6069      	str	r1, [r5, #4]
 8001e3e:	60aa      	str	r2, [r5, #8]
 8001e40:	60eb      	str	r3, [r5, #12]
 8001e42:	3410      	adds	r4, #16
 8001e44:	f10c 0c10 	add.w	ip, ip, #16
 8001e48:	4574      	cmp	r4, lr
 8001e4a:	d1f3      	bne.n	8001e34 <main+0x27c>
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	4623      	mov	r3, r4
 8001e50:	cb03      	ldmia	r3!, {r0, r1}
 8001e52:	6010      	str	r0, [r2, #0]
 8001e54:	6051      	str	r1, [r2, #4]
			ST7920_Decode_UTF8(0, 2, 0, tx_buffer);
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <main+0x344>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff f9a5 	bl	80011ac <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "французских булок,");
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <main+0x344>)
 8001e64:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <main+0x374>)
 8001e66:	4614      	mov	r4, r2
 8001e68:	469c      	mov	ip, r3
 8001e6a:	f104 0e20 	add.w	lr, r4, #32
 8001e6e:	4665      	mov	r5, ip
 8001e70:	4626      	mov	r6, r4
 8001e72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e74:	6028      	str	r0, [r5, #0]
 8001e76:	6069      	str	r1, [r5, #4]
 8001e78:	60aa      	str	r2, [r5, #8]
 8001e7a:	60eb      	str	r3, [r5, #12]
 8001e7c:	3410      	adds	r4, #16
 8001e7e:	f10c 0c10 	add.w	ip, ip, #16
 8001e82:	4574      	cmp	r4, lr
 8001e84:	d1f3      	bne.n	8001e6e <main+0x2b6>
 8001e86:	4663      	mov	r3, ip
 8001e88:	4622      	mov	r2, r4
 8001e8a:	8811      	ldrh	r1, [r2, #0]
 8001e8c:	7892      	ldrb	r2, [r2, #2]
 8001e8e:	8019      	strh	r1, [r3, #0]
 8001e90:	709a      	strb	r2, [r3, #2]
			ST7920_Decode_UTF8(0, 3, 0, tx_buffer);
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <main+0x344>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	2103      	movs	r1, #3
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff f987 	bl	80011ac <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "да выпей чаю.");
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <main+0x344>)
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <main+0x378>)
 8001ea2:	4615      	mov	r5, r2
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea8:	6028      	str	r0, [r5, #0]
 8001eaa:	6069      	str	r1, [r5, #4]
 8001eac:	60aa      	str	r2, [r5, #8]
 8001eae:	60eb      	str	r3, [r5, #12]
 8001eb0:	cc03      	ldmia	r4!, {r0, r1}
 8001eb2:	6128      	str	r0, [r5, #16]
 8001eb4:	6169      	str	r1, [r5, #20]
			ST7920_Decode_UTF8(0, 4, 0, tx_buffer);
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <main+0x344>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2104      	movs	r1, #4
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff f975 	bl	80011ac <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "1234567890");
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <main+0x344>)
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <main+0x37c>)
 8001ec6:	cb03      	ldmia	r3!, {r0, r1}
 8001ec8:	6010      	str	r0, [r2, #0]
 8001eca:	6051      	str	r1, [r2, #4]
 8001ecc:	8819      	ldrh	r1, [r3, #0]
 8001ece:	789b      	ldrb	r3, [r3, #2]
 8001ed0:	8111      	strh	r1, [r2, #8]
 8001ed2:	7293      	strb	r3, [r2, #10]
			ST7920_Decode_UTF8(0, 5, 0, tx_buffer);
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <main+0x344>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2105      	movs	r1, #5
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff f966 	bl	80011ac <ST7920_Decode_UTF8>
			update = 1;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <main+0x354>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e19e      	b.n	8002226 <main+0x66e>
 8001ee8:	20000694 	.word	0x20000694
 8001eec:	20000738 	.word	0x20000738
 8001ef0:	20000690 	.word	0x20000690
 8001ef4:	20000680 	.word	0x20000680
 8001ef8:	2000067d 	.word	0x2000067d
 8001efc:	200001fc 	.word	0x200001fc
 8001f00:	080083b4 	.word	0x080083b4
 8001f04:	080083d0 	.word	0x080083d0
 8001f08:	080083f8 	.word	0x080083f8
 8001f0c:	20000002 	.word	0x20000002
 8001f10:	08008414 	.word	0x08008414
 8001f14:	08008428 	.word	0x08008428
 8001f18:	08008440 	.word	0x08008440
 8001f1c:	08008460 	.word	0x08008460
 8001f20:	08008484 	.word	0x08008484
 8001f24:	080084a4 	.word	0x080084a4
 8001f28:	080084b4 	.word	0x080084b4
 8001f2c:	080084dc 	.word	0x080084dc
 8001f30:	08008500 	.word	0x08008500
 8001f34:	08008518 	.word	0x08008518

		}

		else if (page == 3) {
 8001f38:	4b8d      	ldr	r3, [pc, #564]	; (8002170 <main+0x5b8>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d106      	bne.n	8001f4e <main+0x396>
			ST7920_Draw_bitmap(photo);
 8001f40:	488c      	ldr	r0, [pc, #560]	; (8002174 <main+0x5bc>)
 8001f42:	f7fe ff6a 	bl	8000e1a <ST7920_Draw_bitmap>
			update = 0;
 8001f46:	4b8c      	ldr	r3, [pc, #560]	; (8002178 <main+0x5c0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e16b      	b.n	8002226 <main+0x66e>

		} else if (page == 4) {
 8001f4e:	4b88      	ldr	r3, [pc, #544]	; (8002170 <main+0x5b8>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	f040 8167 	bne.w	8002226 <main+0x66e>
			for (uint8_t i = 0; i < 10; i++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	71bb      	strb	r3, [r7, #6]
 8001f5c:	e051      	b.n	8002002 <main+0x44a>
				ST7920_Clean_Frame_buffer();
 8001f5e:	f7ff fa33 	bl	80013c8 <ST7920_Clean_Frame_buffer>
				ST7920_Draw_line(0, 0, 127, 63);
 8001f62:	233f      	movs	r3, #63	; 0x3f
 8001f64:	227f      	movs	r2, #127	; 0x7f
 8001f66:	2100      	movs	r1, #0
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff fa39 	bl	80013e0 <ST7920_Draw_line>
				ST7920_Draw_line(0, 63, 127, 0);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	227f      	movs	r2, #127	; 0x7f
 8001f72:	213f      	movs	r1, #63	; 0x3f
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff fa33 	bl	80013e0 <ST7920_Draw_line>
				ST7920_Draw_rectangle(80, 5, 30, 20);
 8001f7a:	2314      	movs	r3, #20
 8001f7c:	221e      	movs	r2, #30
 8001f7e:	2105      	movs	r1, #5
 8001f80:	2050      	movs	r0, #80	; 0x50
 8001f82:	f7ff fa9d 	bl	80014c0 <ST7920_Draw_rectangle>
				ST7920_Draw_rectangle_filled(i, i, 50, 10);
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	b298      	uxth	r0, r3
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	b299      	uxth	r1, r3
 8001f8e:	230a      	movs	r3, #10
 8001f90:	2232      	movs	r2, #50	; 0x32
 8001f92:	f7ff fb11 	bl	80015b8 <ST7920_Draw_rectangle_filled>
				ST7920_Draw_circle(70 + i, 50, 10);
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	3346      	adds	r3, #70	; 0x46
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	220a      	movs	r2, #10
 8001f9e:	2132      	movs	r1, #50	; 0x32
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fb5b 	bl	800165c <ST7920_Draw_circle>
				ST7920_Draw_circle_filled(50, 25, 10 + i);
 8001fa6:	79bb      	ldrb	r3, [r7, #6]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	330a      	adds	r3, #10
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2119      	movs	r1, #25
 8001fb4:	2032      	movs	r0, #50	; 0x32
 8001fb6:	f7ff fc17 	bl	80017e8 <ST7920_Draw_circle_filled>
				ST7920_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20);
 8001fba:	79bb      	ldrb	r3, [r7, #6]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3332      	adds	r3, #50	; 0x32
 8001fc0:	b299      	uxth	r1, r3
 8001fc2:	79bb      	ldrb	r3, [r7, #6]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2214      	movs	r2, #20
 8001fce:	9201      	str	r2, [sp, #4]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	213f      	movs	r1, #63	; 0x3f
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fcfa 	bl	80019d2 <ST7920_Draw_triangle>
				ST7920_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40);
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	330a      	adds	r3, #10
 8001fe4:	b299      	uxth	r1, r3
 8001fe6:	2328      	movs	r3, #40	; 0x28
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	2364      	movs	r3, #100	; 0x64
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2314      	movs	r3, #20
 8001ff0:	224b      	movs	r2, #75	; 0x4b
 8001ff2:	2028      	movs	r0, #40	; 0x28
 8001ff4:	f7ff fd1e 	bl	8001a34 <ST7920_Draw_triangle_filled>
				ST7920_Update();
 8001ff8:	f7ff f894 	bl	8001124 <ST7920_Update>
			for (uint8_t i = 0; i < 10; i++) {
 8001ffc:	79bb      	ldrb	r3, [r7, #6]
 8001ffe:	3301      	adds	r3, #1
 8002000:	71bb      	strb	r3, [r7, #6]
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	2b09      	cmp	r3, #9
 8002006:	d9aa      	bls.n	8001f5e <main+0x3a6>
			}
			for (uint8_t i = 10; i > 0; i--) {
 8002008:	230a      	movs	r3, #10
 800200a:	717b      	strb	r3, [r7, #5]
 800200c:	e051      	b.n	80020b2 <main+0x4fa>
				ST7920_Clean_Frame_buffer();
 800200e:	f7ff f9db 	bl	80013c8 <ST7920_Clean_Frame_buffer>
				ST7920_Draw_line(0, 0, 127, 63);
 8002012:	233f      	movs	r3, #63	; 0x3f
 8002014:	227f      	movs	r2, #127	; 0x7f
 8002016:	2100      	movs	r1, #0
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff f9e1 	bl	80013e0 <ST7920_Draw_line>
				ST7920_Draw_line(0, 63, 127, 0);
 800201e:	2300      	movs	r3, #0
 8002020:	227f      	movs	r2, #127	; 0x7f
 8002022:	213f      	movs	r1, #63	; 0x3f
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff f9db 	bl	80013e0 <ST7920_Draw_line>
				ST7920_Draw_rectangle(80, 5, 30, 20);
 800202a:	2314      	movs	r3, #20
 800202c:	221e      	movs	r2, #30
 800202e:	2105      	movs	r1, #5
 8002030:	2050      	movs	r0, #80	; 0x50
 8002032:	f7ff fa45 	bl	80014c0 <ST7920_Draw_rectangle>
				ST7920_Draw_rectangle_filled(i, i, 50, 10);
 8002036:	797b      	ldrb	r3, [r7, #5]
 8002038:	b298      	uxth	r0, r3
 800203a:	797b      	ldrb	r3, [r7, #5]
 800203c:	b299      	uxth	r1, r3
 800203e:	230a      	movs	r3, #10
 8002040:	2232      	movs	r2, #50	; 0x32
 8002042:	f7ff fab9 	bl	80015b8 <ST7920_Draw_rectangle_filled>
				ST7920_Draw_circle(70 + i, 50, 10);
 8002046:	797b      	ldrb	r3, [r7, #5]
 8002048:	3346      	adds	r3, #70	; 0x46
 800204a:	b2db      	uxtb	r3, r3
 800204c:	220a      	movs	r2, #10
 800204e:	2132      	movs	r1, #50	; 0x32
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb03 	bl	800165c <ST7920_Draw_circle>
				ST7920_Draw_circle_filled(50, 25, 10 + i);
 8002056:	797b      	ldrb	r3, [r7, #5]
 8002058:	b29b      	uxth	r3, r3
 800205a:	330a      	adds	r3, #10
 800205c:	b29b      	uxth	r3, r3
 800205e:	b21b      	sxth	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	2119      	movs	r1, #25
 8002064:	2032      	movs	r0, #50	; 0x32
 8002066:	f7ff fbbf 	bl	80017e8 <ST7920_Draw_circle_filled>
				ST7920_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20);
 800206a:	797b      	ldrb	r3, [r7, #5]
 800206c:	b29b      	uxth	r3, r3
 800206e:	3332      	adds	r3, #50	; 0x32
 8002070:	b299      	uxth	r1, r3
 8002072:	797b      	ldrb	r3, [r7, #5]
 8002074:	b29b      	uxth	r3, r3
 8002076:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800207a:	b29b      	uxth	r3, r3
 800207c:	2214      	movs	r2, #20
 800207e:	9201      	str	r2, [sp, #4]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	460a      	mov	r2, r1
 8002086:	213f      	movs	r1, #63	; 0x3f
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff fca2 	bl	80019d2 <ST7920_Draw_triangle>
				ST7920_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40);
 800208e:	797b      	ldrb	r3, [r7, #5]
 8002090:	b29b      	uxth	r3, r3
 8002092:	330a      	adds	r3, #10
 8002094:	b299      	uxth	r1, r3
 8002096:	2328      	movs	r3, #40	; 0x28
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2364      	movs	r3, #100	; 0x64
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2314      	movs	r3, #20
 80020a0:	224b      	movs	r2, #75	; 0x4b
 80020a2:	2028      	movs	r0, #40	; 0x28
 80020a4:	f7ff fcc6 	bl	8001a34 <ST7920_Draw_triangle_filled>
				ST7920_Update();
 80020a8:	f7ff f83c 	bl	8001124 <ST7920_Update>
			for (uint8_t i = 10; i > 0; i--) {
 80020ac:	797b      	ldrb	r3, [r7, #5]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	717b      	strb	r3, [r7, #5]
 80020b2:	797b      	ldrb	r3, [r7, #5]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1aa      	bne.n	800200e <main+0x456>
			}
			for (uint8_t i = 0; i < 20; i++) {
 80020b8:	2300      	movs	r3, #0
 80020ba:	713b      	strb	r3, [r7, #4]
 80020bc:	e051      	b.n	8002162 <main+0x5aa>
				ST7920_Clean_Frame_buffer();
 80020be:	f7ff f983 	bl	80013c8 <ST7920_Clean_Frame_buffer>
				ST7920_Draw_line(0, 0, 127, 63);
 80020c2:	233f      	movs	r3, #63	; 0x3f
 80020c4:	227f      	movs	r2, #127	; 0x7f
 80020c6:	2100      	movs	r1, #0
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff f989 	bl	80013e0 <ST7920_Draw_line>
				ST7920_Draw_line(0, 63, 127, 0);
 80020ce:	2300      	movs	r3, #0
 80020d0:	227f      	movs	r2, #127	; 0x7f
 80020d2:	213f      	movs	r1, #63	; 0x3f
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff f983 	bl	80013e0 <ST7920_Draw_line>
				ST7920_Draw_rectangle(80, 5, 30, 20);
 80020da:	2314      	movs	r3, #20
 80020dc:	221e      	movs	r2, #30
 80020de:	2105      	movs	r1, #5
 80020e0:	2050      	movs	r0, #80	; 0x50
 80020e2:	f7ff f9ed 	bl	80014c0 <ST7920_Draw_rectangle>
				ST7920_Draw_rectangle_filled(i, i, 50, 10);
 80020e6:	793b      	ldrb	r3, [r7, #4]
 80020e8:	b298      	uxth	r0, r3
 80020ea:	793b      	ldrb	r3, [r7, #4]
 80020ec:	b299      	uxth	r1, r3
 80020ee:	230a      	movs	r3, #10
 80020f0:	2232      	movs	r2, #50	; 0x32
 80020f2:	f7ff fa61 	bl	80015b8 <ST7920_Draw_rectangle_filled>
				ST7920_Draw_circle(70 + i, 50, 10);
 80020f6:	793b      	ldrb	r3, [r7, #4]
 80020f8:	3346      	adds	r3, #70	; 0x46
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	220a      	movs	r2, #10
 80020fe:	2132      	movs	r1, #50	; 0x32
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff faab 	bl	800165c <ST7920_Draw_circle>
				ST7920_Draw_circle_filled(50, 25, 10 + i);
 8002106:	793b      	ldrb	r3, [r7, #4]
 8002108:	b29b      	uxth	r3, r3
 800210a:	330a      	adds	r3, #10
 800210c:	b29b      	uxth	r3, r3
 800210e:	b21b      	sxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	2119      	movs	r1, #25
 8002114:	2032      	movs	r0, #50	; 0x32
 8002116:	f7ff fb67 	bl	80017e8 <ST7920_Draw_circle_filled>
				ST7920_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20);
 800211a:	793b      	ldrb	r3, [r7, #4]
 800211c:	b29b      	uxth	r3, r3
 800211e:	3332      	adds	r3, #50	; 0x32
 8002120:	b299      	uxth	r1, r3
 8002122:	793b      	ldrb	r3, [r7, #4]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800212a:	b29b      	uxth	r3, r3
 800212c:	2214      	movs	r2, #20
 800212e:	9201      	str	r2, [sp, #4]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	460a      	mov	r2, r1
 8002136:	213f      	movs	r1, #63	; 0x3f
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff fc4a 	bl	80019d2 <ST7920_Draw_triangle>
				ST7920_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40);
 800213e:	793b      	ldrb	r3, [r7, #4]
 8002140:	b29b      	uxth	r3, r3
 8002142:	330a      	adds	r3, #10
 8002144:	b299      	uxth	r1, r3
 8002146:	2328      	movs	r3, #40	; 0x28
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2364      	movs	r3, #100	; 0x64
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2314      	movs	r3, #20
 8002150:	224b      	movs	r2, #75	; 0x4b
 8002152:	2028      	movs	r0, #40	; 0x28
 8002154:	f7ff fc6e 	bl	8001a34 <ST7920_Draw_triangle_filled>
				ST7920_Update();
 8002158:	f7fe ffe4 	bl	8001124 <ST7920_Update>
			for (uint8_t i = 0; i < 20; i++) {
 800215c:	793b      	ldrb	r3, [r7, #4]
 800215e:	3301      	adds	r3, #1
 8002160:	713b      	strb	r3, [r7, #4]
 8002162:	793b      	ldrb	r3, [r7, #4]
 8002164:	2b13      	cmp	r3, #19
 8002166:	d9aa      	bls.n	80020be <main+0x506>
			}
			for (uint8_t i = 20; i > 0; i--) {
 8002168:	2314      	movs	r3, #20
 800216a:	70fb      	strb	r3, [r7, #3]
 800216c:	e058      	b.n	8002220 <main+0x668>
 800216e:	bf00      	nop
 8002170:	2000067d 	.word	0x2000067d
 8002174:	08008e48 	.word	0x08008e48
 8002178:	20000002 	.word	0x20000002
				ST7920_Clean_Frame_buffer();
 800217c:	f7ff f924 	bl	80013c8 <ST7920_Clean_Frame_buffer>
				ST7920_Draw_line(0, 0, 127, 63);
 8002180:	233f      	movs	r3, #63	; 0x3f
 8002182:	227f      	movs	r2, #127	; 0x7f
 8002184:	2100      	movs	r1, #0
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff f92a 	bl	80013e0 <ST7920_Draw_line>
				ST7920_Draw_line(0, 63, 127, 0);
 800218c:	2300      	movs	r3, #0
 800218e:	227f      	movs	r2, #127	; 0x7f
 8002190:	213f      	movs	r1, #63	; 0x3f
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff f924 	bl	80013e0 <ST7920_Draw_line>
				ST7920_Draw_rectangle(80, 5, 30, 20);
 8002198:	2314      	movs	r3, #20
 800219a:	221e      	movs	r2, #30
 800219c:	2105      	movs	r1, #5
 800219e:	2050      	movs	r0, #80	; 0x50
 80021a0:	f7ff f98e 	bl	80014c0 <ST7920_Draw_rectangle>
				ST7920_Draw_rectangle_filled(i, i, 50, 10);
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	b298      	uxth	r0, r3
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	b299      	uxth	r1, r3
 80021ac:	230a      	movs	r3, #10
 80021ae:	2232      	movs	r2, #50	; 0x32
 80021b0:	f7ff fa02 	bl	80015b8 <ST7920_Draw_rectangle_filled>
				ST7920_Draw_circle(70 + i, 50, 10);
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	3346      	adds	r3, #70	; 0x46
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	220a      	movs	r2, #10
 80021bc:	2132      	movs	r1, #50	; 0x32
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa4c 	bl	800165c <ST7920_Draw_circle>
				ST7920_Draw_circle_filled(50, 25, 10 + i);
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	330a      	adds	r3, #10
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	2119      	movs	r1, #25
 80021d2:	2032      	movs	r0, #50	; 0x32
 80021d4:	f7ff fb08 	bl	80017e8 <ST7920_Draw_circle_filled>
				ST7920_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20);
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3332      	adds	r3, #50	; 0x32
 80021de:	b299      	uxth	r1, r3
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2214      	movs	r2, #20
 80021ec:	9201      	str	r2, [sp, #4]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2300      	movs	r3, #0
 80021f2:	460a      	mov	r2, r1
 80021f4:	213f      	movs	r1, #63	; 0x3f
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff fbeb 	bl	80019d2 <ST7920_Draw_triangle>
				ST7920_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40);
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	330a      	adds	r3, #10
 8002202:	b299      	uxth	r1, r3
 8002204:	2328      	movs	r3, #40	; 0x28
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	2364      	movs	r3, #100	; 0x64
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2314      	movs	r3, #20
 800220e:	224b      	movs	r2, #75	; 0x4b
 8002210:	2028      	movs	r0, #40	; 0x28
 8002212:	f7ff fc0f 	bl	8001a34 <ST7920_Draw_triangle_filled>
				ST7920_Update();
 8002216:	f7fe ff85 	bl	8001124 <ST7920_Update>
			for (uint8_t i = 20; i > 0; i--) {
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	3b01      	subs	r3, #1
 800221e:	70fb      	strb	r3, [r7, #3]
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1aa      	bne.n	800217c <main+0x5c4>
			}
		}

		if (HAL_GetTick() - Time_update >= 300) {
 8002226:	f000 fb5f 	bl	80028e8 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <main+0x69c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002236:	f4ff ace8 	bcc.w	8001c0a <main+0x52>
			Time_update = HAL_GetTick();
 800223a:	f000 fb55 	bl	80028e8 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <main+0x69c>)
 8002242:	601a      	str	r2, [r3, #0]
			if (update) {
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <main+0x6a0>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f43f acde 	beq.w	8001c0a <main+0x52>
				ST7920_Update();
 800224e:	f7fe ff69 	bl	8001124 <ST7920_Update>
		if (HAL_GetTick() - Time_counter > 50) {
 8002252:	e4da      	b.n	8001c0a <main+0x52>
 8002254:	20000734 	.word	0x20000734
 8002258:	20000002 	.word	0x20000002

0800225c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b090      	sub	sp, #64	; 0x40
 8002260:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002262:	f107 0318 	add.w	r3, r7, #24
 8002266:	2228      	movs	r2, #40	; 0x28
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fb32 	bl	80048d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800227e:	2301      	movs	r3, #1
 8002280:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002286:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800228c:	2301      	movs	r3, #1
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002290:	2302      	movs	r3, #2
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002298:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800229a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800229e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 ffa1 	bl	80031ec <HAL_RCC_OscConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <SystemClock_Config+0x58>
		Error_Handler();
 80022b0:	f000 f92c 	bl	800250c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022b4:	230f      	movs	r3, #15
 80022b6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b8:	2302      	movs	r3, #2
 80022ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2102      	movs	r1, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 fa0c 	bl	80036ec <HAL_RCC_ClockConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <SystemClock_Config+0x82>
		Error_Handler();
 80022da:	f000 f917 	bl	800250c <Error_Handler>
	}
}
 80022de:	bf00      	nop
 80022e0:	3740      	adds	r7, #64	; 0x40
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_SPI1_Init+0x64>)
 80022ee:	4a18      	ldr	r2, [pc, #96]	; (8002350 <MX_SPI1_Init+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <MX_SPI1_Init+0x64>)
 80022f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_SPI1_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_SPI1_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_SPI1_Init+0x64>)
 8002308:	2202      	movs	r2, #2
 800230a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_SPI1_Init+0x64>)
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_SPI1_Init+0x64>)
 8002314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002318:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_SPI1_Init+0x64>)
 800231c:	2208      	movs	r2, #8
 800231e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_SPI1_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_SPI1_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <MX_SPI1_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_SPI1_Init+0x64>)
 8002334:	220a      	movs	r2, #10
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_SPI1_Init+0x64>)
 800233a:	f001 fb41 	bl	80039c0 <HAL_SPI_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002344:	f000 f8e2 	bl	800250c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200006dc 	.word	0x200006dc
 8002350:	40013000 	.word	0x40013000

08002354 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <MX_TIM1_Init+0x9c>)
 8002372:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <MX_TIM1_Init+0xa0>)
 8002374:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 719;
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <MX_TIM1_Init+0x9c>)
 8002378:	f240 22cf 	movw	r2, #719	; 0x2cf
 800237c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <MX_TIM1_Init+0x9c>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3000;
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <MX_TIM1_Init+0x9c>)
 8002386:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800238a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_TIM1_Init+0x9c>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <MX_TIM1_Init+0x9c>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <MX_TIM1_Init+0x9c>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800239e:	4814      	ldr	r0, [pc, #80]	; (80023f0 <MX_TIM1_Init+0x9c>)
 80023a0:	f001 fe78 	bl	8004094 <HAL_TIM_Base_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0x5a>
		Error_Handler();
 80023aa:	f000 f8af 	bl	800250c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	4619      	mov	r1, r3
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <MX_TIM1_Init+0x9c>)
 80023bc:	f002 f814 	bl	80043e8 <HAL_TIM_ConfigClockSource>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM1_Init+0x76>
		Error_Handler();
 80023c6:	f000 f8a1 	bl	800250c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80023d2:	463b      	mov	r3, r7
 80023d4:	4619      	mov	r1, r3
 80023d6:	4806      	ldr	r0, [pc, #24]	; (80023f0 <MX_TIM1_Init+0x9c>)
 80023d8:	f002 f9e2 	bl	80047a0 <HAL_TIMEx_MasterConfigSynchronization>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM1_Init+0x92>
		Error_Handler();
 80023e2:	f000 f893 	bl	800250c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000694 	.word	0x20000694
 80023f4:	40012c00 	.word	0x40012c00

080023f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_DMA_Init+0x38>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <MX_DMA_Init+0x38>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6153      	str	r3, [r2, #20]
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_DMA_Init+0x38>)
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	200d      	movs	r0, #13
 800241c:	f000 fb67 	bl	8002aee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002420:	200d      	movs	r0, #13
 8002422:	f000 fb80 	bl	8002b26 <HAL_NVIC_EnableIRQ>

}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000

08002434 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <MX_GPIO_Init+0xcc>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	4a2c      	ldr	r2, [pc, #176]	; (8002500 <MX_GPIO_Init+0xcc>)
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	6193      	str	r3, [r2, #24]
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <MX_GPIO_Init+0xcc>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <MX_GPIO_Init+0xcc>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <MX_GPIO_Init+0xcc>)
 8002466:	f043 0320 	orr.w	r3, r3, #32
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <MX_GPIO_Init+0xcc>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <MX_GPIO_Init+0xcc>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <MX_GPIO_Init+0xcc>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <MX_GPIO_Init+0xcc>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <MX_GPIO_Init+0xcc>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <MX_GPIO_Init+0xcc>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <MX_GPIO_Init+0xcc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ae:	4815      	ldr	r0, [pc, #84]	; (8002504 <MX_GPIO_Init+0xd0>)
 80024b0:	f000 fe84 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_Pin | RST_Pin, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2106      	movs	r1, #6
 80024b8:	4813      	ldr	r0, [pc, #76]	; (8002508 <MX_GPIO_Init+0xd4>)
 80024ba:	f000 fe7f 	bl	80031bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80024be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	4619      	mov	r1, r3
 80024d6:	480b      	ldr	r0, [pc, #44]	; (8002504 <MX_GPIO_Init+0xd0>)
 80024d8:	f000 fd16 	bl	8002f08 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin RST_Pin */
	GPIO_InitStruct.Pin = CS_Pin | RST_Pin;
 80024dc:	2306      	movs	r3, #6
 80024de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	4619      	mov	r1, r3
 80024f2:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_GPIO_Init+0xd4>)
 80024f4:	f000 fd08 	bl	8002f08 <HAL_GPIO_Init>

}
 80024f8:	bf00      	nop
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	40011000 	.word	0x40011000
 8002508:	40010800 	.word	0x40010800

0800250c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002510:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002512:	e7fe      	b.n	8002512 <Error_Handler+0x6>

08002514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_MspInit+0x5c>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <HAL_MspInit+0x5c>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6193      	str	r3, [r2, #24]
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_MspInit+0x5c>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_MspInit+0x5c>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <HAL_MspInit+0x5c>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_MspInit+0x5c>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_MspInit+0x60>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_MspInit+0x60>)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	40021000 	.word	0x40021000
 8002574:	40010000 	.word	0x40010000

08002578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <HAL_SPI_MspInit+0xd0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d152      	bne.n	800263e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_SPI_MspInit+0xd4>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a2b      	ldr	r2, [pc, #172]	; (800264c <HAL_SPI_MspInit+0xd4>)
 800259e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <HAL_SPI_MspInit+0xd4>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_SPI_MspInit+0xd4>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <HAL_SPI_MspInit+0xd4>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_SPI_MspInit+0xd4>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025c8:	23a0      	movs	r3, #160	; 0xa0
 80025ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	4619      	mov	r1, r3
 80025da:	481d      	ldr	r0, [pc, #116]	; (8002650 <HAL_SPI_MspInit+0xd8>)
 80025dc:	f000 fc94 	bl	8002f08 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_SPI_MspInit+0xe0>)
 80025e4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 80025e8:	2210      	movs	r2, #16
 80025ea:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 800260c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002610:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002612:	4810      	ldr	r0, [pc, #64]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 8002614:	f000 faa2 	bl	8002b5c <HAL_DMA_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 800261e:	f7ff ff75 	bl	800250c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 8002626:	649a      	str	r2, [r3, #72]	; 0x48
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <HAL_SPI_MspInit+0xdc>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	2023      	movs	r0, #35	; 0x23
 8002634:	f000 fa5b 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002638:	2023      	movs	r0, #35	; 0x23
 800263a:	f000 fa74 	bl	8002b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800263e:	bf00      	nop
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40013000 	.word	0x40013000
 800264c:	40021000 	.word	0x40021000
 8002650:	40010800 	.word	0x40010800
 8002654:	2000073c 	.word	0x2000073c
 8002658:	40020030 	.word	0x40020030

0800265c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_TIM_Base_MspInit+0x44>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d113      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_TIM_Base_MspInit+0x48>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_TIM_Base_MspInit+0x48>)
 8002674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002678:	6193      	str	r3, [r2, #24]
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_TIM_Base_MspInit+0x48>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	2019      	movs	r0, #25
 800268c:	f000 fa2f 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002690:	2019      	movs	r0, #25
 8002692:	f000 fa48 	bl	8002b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40021000 	.word	0x40021000

080026a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80026ac:	e7fe      	b.n	80026ac <NMI_Handler+0x4>

080026ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <HardFault_Handler+0x4>

080026b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <MemManage_Handler+0x4>

080026ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <BusFault_Handler+0x4>

080026c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <UsageFault_Handler+0x4>

080026c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ee:	f000 f8e9 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <DMA1_Channel3_IRQHandler+0x10>)
 80026fe:	f000 fafd 	bl	8002cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000073c 	.word	0x2000073c

0800270c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002710:	4810      	ldr	r0, [pc, #64]	; (8002754 <TIM1_UP_IRQHandler+0x48>)
 8002712:	f001 fd61 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
	flag_led = !flag_led;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <TIM1_UP_IRQHandler+0x4c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <TIM1_UP_IRQHandler+0x4c>)
 8002732:	701a      	strb	r2, [r3, #0]
	if (flag_led) {
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <TIM1_UP_IRQHandler+0x4c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <TIM1_UP_IRQHandler+0x3a>
		GPIOC->BSRR = (uint32_t) LED_Pin << 16u;
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <TIM1_UP_IRQHandler+0x50>)
 800273e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002742:	611a      	str	r2, [r3, #16]
	} else {
		GPIOC->BSRR = LED_Pin;
	}

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002744:	e003      	b.n	800274e <TIM1_UP_IRQHandler+0x42>
		GPIOC->BSRR = LED_Pin;
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <TIM1_UP_IRQHandler+0x50>)
 8002748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800274c:	611a      	str	r2, [r3, #16]
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000694 	.word	0x20000694
 8002758:	2000067c 	.word	0x2000067c
 800275c:	40011000 	.word	0x40011000

08002760 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <SPI1_IRQHandler+0x10>)
 8002766:	f001 fa39 	bl	8003bdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200006dc 	.word	0x200006dc

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <_sbrk+0x5c>)
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_sbrk+0x60>)
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <_sbrk+0x64>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <_sbrk+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a4:	f002 f86c 	bl	8004880 <__errno>
 80027a8:	4602      	mov	r2, r0
 80027aa:	230c      	movs	r3, #12
 80027ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e009      	b.n	80027c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <_sbrk+0x64>)
 80027c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20005000 	.word	0x20005000
 80027d4:	00000400 	.word	0x00000400
 80027d8:	20000684 	.word	0x20000684
 80027dc:	20000788 	.word	0x20000788

080027e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027ee:	e003      	b.n	80027f8 <LoopCopyDataInit>

080027f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027f6:	3104      	adds	r1, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027f8:	480a      	ldr	r0, [pc, #40]	; (8002824 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002800:	d3f6      	bcc.n	80027f0 <CopyDataInit>
  ldr r2, =_sbss
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002804:	e002      	b.n	800280c <LoopFillZerobss>

08002806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002808:	f842 3b04 	str.w	r3, [r2], #4

0800280c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800280e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002810:	d3f9      	bcc.n	8002806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002812:	f7ff ffe5 	bl	80027e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f002 f839 	bl	800488c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800281a:	f7ff f9cd 	bl	8001bb8 <main>
  bx lr
 800281e:	4770      	bx	lr
  ldr r3, =_sidata
 8002820:	08009518 	.word	0x08009518
  ldr r0, =_sdata
 8002824:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002828:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800282c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002830:	20000788 	.word	0x20000788

08002834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002834:	e7fe      	b.n	8002834 <ADC1_2_IRQHandler>
	...

08002838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_Init+0x28>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_Init+0x28>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 f945 	bl	8002ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	2000      	movs	r0, #0
 8002850:	f000 f808 	bl	8002864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff fe5e 	bl	8002514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_InitTick+0x54>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x58>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f95d 	bl	8002b42 <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f000 f925 	bl	8002aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <HAL_InitTick+0x5c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000004 	.word	0x20000004
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	20000008 	.word	0x20000008

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_IncTick+0x20>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a03      	ldr	r2, [pc, #12]	; (80028e4 <HAL_IncTick+0x20>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	2000000c 	.word	0x2000000c
 80028e4:	20000780 	.word	0x20000780

080028e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <HAL_GetTick+0x10>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000780 	.word	0x20000780

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fff0 	bl	80028e8 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_Delay+0x40>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffe0 	bl	80028e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000000c 	.word	0x2000000c

08002940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800296c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002972:	4a04      	ldr	r2, [pc, #16]	; (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	60d3      	str	r3, [r2, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <__NVIC_GetPriorityGrouping+0x18>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	f003 0307 	and.w	r3, r3, #7
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	db0b      	blt.n	80029ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	4906      	ldr	r1, [pc, #24]	; (80029d8 <__NVIC_EnableIRQ+0x34>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	2001      	movs	r0, #1
 80029c6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	; (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	; (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa4:	d301      	bcc.n	8002aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00f      	b.n	8002aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <SysTick_Config+0x40>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f7ff ff90 	bl	80029dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <SysTick_Config+0x40>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <SysTick_Config+0x40>)
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	e000e010 	.word	0xe000e010

08002ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff2d 	bl	8002940 <__NVIC_SetPriorityGrouping>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b00:	f7ff ff42 	bl	8002988 <__NVIC_GetPriorityGrouping>
 8002b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	6978      	ldr	r0, [r7, #20]
 8002b0c:	f7ff ff90 	bl	8002a30 <NVIC_EncodePriority>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff5f 	bl	80029dc <__NVIC_SetPriority>
}
 8002b1e:	bf00      	nop
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff35 	bl	80029a4 <__NVIC_EnableIRQ>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffa2 	bl	8002a94 <SysTick_Config>
 8002b50:	4603      	mov	r3, r0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e043      	b.n	8002bfa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_DMA_Init+0xa8>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <HAL_DMA_Init+0xac>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	009a      	lsls	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <HAL_DMA_Init+0xb0>)
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ba6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002baa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	bffdfff8 	.word	0xbffdfff8
 8002c08:	cccccccd 	.word	0xcccccccd
 8002c0c:	40020000 	.word	0x40020000

08002c10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d005      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e051      	b.n	8002cd6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 020e 	bic.w	r2, r2, #14
 8002c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <HAL_DMA_Abort_IT+0xd0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d029      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0xa0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_DMA_Abort_IT+0xd4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d022      	beq.n	8002cac <HAL_DMA_Abort_IT+0x9c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <HAL_DMA_Abort_IT+0xd8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d01a      	beq.n	8002ca6 <HAL_DMA_Abort_IT+0x96>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_DMA_Abort_IT+0xdc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d012      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0x90>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <HAL_DMA_Abort_IT+0xe0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00a      	beq.n	8002c9a <HAL_DMA_Abort_IT+0x8a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_DMA_Abort_IT+0xe4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d102      	bne.n	8002c94 <HAL_DMA_Abort_IT+0x84>
 8002c8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c92:	e00e      	b.n	8002cb2 <HAL_DMA_Abort_IT+0xa2>
 8002c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c98:	e00b      	b.n	8002cb2 <HAL_DMA_Abort_IT+0xa2>
 8002c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c9e:	e008      	b.n	8002cb2 <HAL_DMA_Abort_IT+0xa2>
 8002ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca4:	e005      	b.n	8002cb2 <HAL_DMA_Abort_IT+0xa2>
 8002ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002caa:	e002      	b.n	8002cb2 <HAL_DMA_Abort_IT+0xa2>
 8002cac:	2310      	movs	r3, #16
 8002cae:	e000      	b.n	8002cb2 <HAL_DMA_Abort_IT+0xa2>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <HAL_DMA_Abort_IT+0xe8>)
 8002cb4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
    } 
  }
  return status;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40020008 	.word	0x40020008
 8002ce4:	4002001c 	.word	0x4002001c
 8002ce8:	40020030 	.word	0x40020030
 8002cec:	40020044 	.word	0x40020044
 8002cf0:	40020058 	.word	0x40020058
 8002cf4:	4002006c 	.word	0x4002006c
 8002cf8:	40020000 	.word	0x40020000

08002cfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2204      	movs	r2, #4
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d04f      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xc8>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a66      	ldr	r2, [pc, #408]	; (8002eec <HAL_DMA_IRQHandler+0x1f0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d029      	beq.n	8002daa <HAL_DMA_IRQHandler+0xae>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a65      	ldr	r2, [pc, #404]	; (8002ef0 <HAL_DMA_IRQHandler+0x1f4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMA_IRQHandler+0xaa>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a63      	ldr	r2, [pc, #396]	; (8002ef4 <HAL_DMA_IRQHandler+0x1f8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01a      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xa4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a62      	ldr	r2, [pc, #392]	; (8002ef8 <HAL_DMA_IRQHandler+0x1fc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d012      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x9e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a60      	ldr	r2, [pc, #384]	; (8002efc <HAL_DMA_IRQHandler+0x200>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x98>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5f      	ldr	r2, [pc, #380]	; (8002f00 <HAL_DMA_IRQHandler+0x204>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d102      	bne.n	8002d8e <HAL_DMA_IRQHandler+0x92>
 8002d88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d8c:	e00e      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002d8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d92:	e00b      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d98:	e008      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002d9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d9e:	e005      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da4:	e002      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	e000      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002daa:	2304      	movs	r3, #4
 8002dac:	4a55      	ldr	r2, [pc, #340]	; (8002f04 <HAL_DMA_IRQHandler+0x208>)
 8002dae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8094 	beq.w	8002ee2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002dc2:	e08e      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2202      	movs	r2, #2
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d056      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x186>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d051      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 020a 	bic.w	r2, r2, #10
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a38      	ldr	r2, [pc, #224]	; (8002eec <HAL_DMA_IRQHandler+0x1f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d029      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x166>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a37      	ldr	r2, [pc, #220]	; (8002ef0 <HAL_DMA_IRQHandler+0x1f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x162>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <HAL_DMA_IRQHandler+0x1f8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01a      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x15c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_DMA_IRQHandler+0x1fc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d012      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x156>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a32      	ldr	r2, [pc, #200]	; (8002efc <HAL_DMA_IRQHandler+0x200>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00a      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x150>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a31      	ldr	r2, [pc, #196]	; (8002f00 <HAL_DMA_IRQHandler+0x204>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_DMA_IRQHandler+0x14a>
 8002e40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e44:	e00e      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4a:	e00b      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e50:	e008      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e56:	e005      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e5c:	e002      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e000      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e62:	2302      	movs	r3, #2
 8002e64:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <HAL_DMA_IRQHandler+0x208>)
 8002e66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d034      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e80:	e02f      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2208      	movs	r2, #8
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d028      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x1e8>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 020e 	bic.w	r2, r2, #14
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
    }
  }
  return;
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
}
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40020008 	.word	0x40020008
 8002ef0:	4002001c 	.word	0x4002001c
 8002ef4:	40020030 	.word	0x40020030
 8002ef8:	40020044 	.word	0x40020044
 8002efc:	40020058 	.word	0x40020058
 8002f00:	4002006c 	.word	0x4002006c
 8002f04:	40020000 	.word	0x40020000

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b08b      	sub	sp, #44	; 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1a:	e127      	b.n	800316c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8116 	bne.w	8003166 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b12      	cmp	r3, #18
 8002f40:	d034      	beq.n	8002fac <HAL_GPIO_Init+0xa4>
 8002f42:	2b12      	cmp	r3, #18
 8002f44:	d80d      	bhi.n	8002f62 <HAL_GPIO_Init+0x5a>
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d02b      	beq.n	8002fa2 <HAL_GPIO_Init+0x9a>
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d804      	bhi.n	8002f58 <HAL_GPIO_Init+0x50>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d031      	beq.n	8002fb6 <HAL_GPIO_Init+0xae>
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d01c      	beq.n	8002f90 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f56:	e048      	b.n	8002fea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d043      	beq.n	8002fe4 <HAL_GPIO_Init+0xdc>
 8002f5c:	2b11      	cmp	r3, #17
 8002f5e:	d01b      	beq.n	8002f98 <HAL_GPIO_Init+0x90>
          break;
 8002f60:	e043      	b.n	8002fea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f62:	4a89      	ldr	r2, [pc, #548]	; (8003188 <HAL_GPIO_Init+0x280>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d026      	beq.n	8002fb6 <HAL_GPIO_Init+0xae>
 8002f68:	4a87      	ldr	r2, [pc, #540]	; (8003188 <HAL_GPIO_Init+0x280>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d806      	bhi.n	8002f7c <HAL_GPIO_Init+0x74>
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_GPIO_Init+0x284>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d020      	beq.n	8002fb6 <HAL_GPIO_Init+0xae>
 8002f74:	4a86      	ldr	r2, [pc, #536]	; (8003190 <HAL_GPIO_Init+0x288>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01d      	beq.n	8002fb6 <HAL_GPIO_Init+0xae>
          break;
 8002f7a:	e036      	b.n	8002fea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f7c:	4a85      	ldr	r2, [pc, #532]	; (8003194 <HAL_GPIO_Init+0x28c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d019      	beq.n	8002fb6 <HAL_GPIO_Init+0xae>
 8002f82:	4a85      	ldr	r2, [pc, #532]	; (8003198 <HAL_GPIO_Init+0x290>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d016      	beq.n	8002fb6 <HAL_GPIO_Init+0xae>
 8002f88:	4a84      	ldr	r2, [pc, #528]	; (800319c <HAL_GPIO_Init+0x294>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0xae>
          break;
 8002f8e:	e02c      	b.n	8002fea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	623b      	str	r3, [r7, #32]
          break;
 8002f96:	e028      	b.n	8002fea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	623b      	str	r3, [r7, #32]
          break;
 8002fa0:	e023      	b.n	8002fea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	623b      	str	r3, [r7, #32]
          break;
 8002faa:	e01e      	b.n	8002fea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	623b      	str	r3, [r7, #32]
          break;
 8002fb4:	e019      	b.n	8002fea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	623b      	str	r3, [r7, #32]
          break;
 8002fc2:	e012      	b.n	8002fea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fcc:	2308      	movs	r3, #8
 8002fce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	611a      	str	r2, [r3, #16]
          break;
 8002fd6:	e008      	b.n	8002fea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd8:	2308      	movs	r3, #8
 8002fda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	615a      	str	r2, [r3, #20]
          break;
 8002fe2:	e002      	b.n	8002fea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	623b      	str	r3, [r7, #32]
          break;
 8002fe8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2bff      	cmp	r3, #255	; 0xff
 8002fee:	d801      	bhi.n	8002ff4 <HAL_GPIO_Init+0xec>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	e001      	b.n	8002ff8 <HAL_GPIO_Init+0xf0>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2bff      	cmp	r3, #255	; 0xff
 8002ffe:	d802      	bhi.n	8003006 <HAL_GPIO_Init+0xfe>
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	e002      	b.n	800300c <HAL_GPIO_Init+0x104>
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3b08      	subs	r3, #8
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	210f      	movs	r1, #15
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	401a      	ands	r2, r3
 800301e:	6a39      	ldr	r1, [r7, #32]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	431a      	orrs	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8096 	beq.w	8003166 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800303a:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <HAL_GPIO_Init+0x298>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <HAL_GPIO_Init+0x298>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6193      	str	r3, [r2, #24]
 8003046:	4b56      	ldr	r3, [pc, #344]	; (80031a0 <HAL_GPIO_Init+0x298>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003052:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_GPIO_Init+0x29c>)
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	3302      	adds	r3, #2
 800305a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	220f      	movs	r2, #15
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4b      	ldr	r2, [pc, #300]	; (80031a8 <HAL_GPIO_Init+0x2a0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_GPIO_Init+0x19e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4a      	ldr	r2, [pc, #296]	; (80031ac <HAL_GPIO_Init+0x2a4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00d      	beq.n	80030a2 <HAL_GPIO_Init+0x19a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a49      	ldr	r2, [pc, #292]	; (80031b0 <HAL_GPIO_Init+0x2a8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <HAL_GPIO_Init+0x196>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <HAL_GPIO_Init+0x2ac>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_GPIO_Init+0x192>
 8003096:	2303      	movs	r3, #3
 8003098:	e006      	b.n	80030a8 <HAL_GPIO_Init+0x1a0>
 800309a:	2304      	movs	r3, #4
 800309c:	e004      	b.n	80030a8 <HAL_GPIO_Init+0x1a0>
 800309e:	2302      	movs	r3, #2
 80030a0:	e002      	b.n	80030a8 <HAL_GPIO_Init+0x1a0>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_GPIO_Init+0x1a0>
 80030a6:	2300      	movs	r3, #0
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	f002 0203 	and.w	r2, r2, #3
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	4093      	lsls	r3, r2
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030b8:	493a      	ldr	r1, [pc, #232]	; (80031a4 <HAL_GPIO_Init+0x29c>)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4938      	ldr	r1, [pc, #224]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
 80030de:	e006      	b.n	80030ee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	4933      	ldr	r1, [pc, #204]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030fa:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	492e      	ldr	r1, [pc, #184]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
 8003106:	e006      	b.n	8003116 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	43db      	mvns	r3, r3
 8003110:	4929      	ldr	r1, [pc, #164]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8003112:	4013      	ands	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	4924      	ldr	r1, [pc, #144]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
 800312e:	e006      	b.n	800313e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	43db      	mvns	r3, r3
 8003138:	491f      	ldr	r1, [pc, #124]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 800313a:	4013      	ands	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	491a      	ldr	r1, [pc, #104]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	60cb      	str	r3, [r1, #12]
 8003156:	e006      	b.n	8003166 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	43db      	mvns	r3, r3
 8003160:	4915      	ldr	r1, [pc, #84]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8003162:	4013      	ands	r3, r2
 8003164:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	3301      	adds	r3, #1
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f47f aed0 	bne.w	8002f1c <HAL_GPIO_Init+0x14>
  }
}
 800317c:	bf00      	nop
 800317e:	372c      	adds	r7, #44	; 0x2c
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	10210000 	.word	0x10210000
 800318c:	10110000 	.word	0x10110000
 8003190:	10120000 	.word	0x10120000
 8003194:	10310000 	.word	0x10310000
 8003198:	10320000 	.word	0x10320000
 800319c:	10220000 	.word	0x10220000
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40010800 	.word	0x40010800
 80031ac:	40010c00 	.word	0x40010c00
 80031b0:	40011000 	.word	0x40011000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	40010400 	.word	0x40010400

080031bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031cc:	787b      	ldrb	r3, [r7, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031d8:	e003      	b.n	80031e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031da:	887b      	ldrh	r3, [r7, #2]
 80031dc:	041a      	lsls	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	611a      	str	r2, [r3, #16]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e26c      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8087 	beq.w	800331a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800320c:	4b92      	ldr	r3, [pc, #584]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b04      	cmp	r3, #4
 8003216:	d00c      	beq.n	8003232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003218:	4b8f      	ldr	r3, [pc, #572]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	d112      	bne.n	800324a <HAL_RCC_OscConfig+0x5e>
 8003224:	4b8c      	ldr	r3, [pc, #560]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d10b      	bne.n	800324a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003232:	4b89      	ldr	r3, [pc, #548]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d06c      	beq.n	8003318 <HAL_RCC_OscConfig+0x12c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d168      	bne.n	8003318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e246      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x76>
 8003254:	4b80      	ldr	r3, [pc, #512]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a7f      	ldr	r2, [pc, #508]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	e02e      	b.n	80032c0 <HAL_RCC_OscConfig+0xd4>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x98>
 800326a:	4b7b      	ldr	r3, [pc, #492]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7a      	ldr	r2, [pc, #488]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b78      	ldr	r3, [pc, #480]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a77      	ldr	r2, [pc, #476]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800327c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e01d      	b.n	80032c0 <HAL_RCC_OscConfig+0xd4>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0xbc>
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a71      	ldr	r2, [pc, #452]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e00b      	b.n	80032c0 <HAL_RCC_OscConfig+0xd4>
 80032a8:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a6a      	ldr	r2, [pc, #424]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a67      	ldr	r2, [pc, #412]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7ff fb0e 	bl	80028e8 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d0:	f7ff fb0a 	bl	80028e8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1fa      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0xe4>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7ff fafa 	bl	80028e8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7ff faf6 	bl	80028e8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1e6      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330a:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x10c>
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d063      	beq.n	80033ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003326:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b08      	cmp	r3, #8
 800333c:	d11c      	bne.n	8003378 <HAL_RCC_OscConfig+0x18c>
 800333e:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d116      	bne.n	8003378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RCC_OscConfig+0x176>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e1ba      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4939      	ldr	r1, [pc, #228]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	e03a      	b.n	80033ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCC_OscConfig+0x270>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7ff faaf 	bl	80028e8 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338e:	f7ff faab 	bl	80028e8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e19b      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4927      	ldr	r1, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]
 80033c0:	e015      	b.n	80033ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <HAL_RCC_OscConfig+0x270>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7ff fa8e 	bl	80028e8 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d0:	f7ff fa8a 	bl	80028e8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e17a      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03a      	beq.n	8003470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d019      	beq.n	8003436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7ff fa6e 	bl	80028e8 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003410:	f7ff fa6a 	bl	80028e8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e15a      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_OscConfig+0x26c>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800342e:	2001      	movs	r0, #1
 8003430:	f000 faa8 	bl	8003984 <RCC_Delay>
 8003434:	e01c      	b.n	8003470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343c:	f7ff fa54 	bl	80028e8 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003442:	e00f      	b.n	8003464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7ff fa50 	bl	80028e8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d908      	bls.n	8003464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e140      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	42420000 	.word	0x42420000
 8003460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003464:	4b9e      	ldr	r3, [pc, #632]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e9      	bne.n	8003444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a6 	beq.w	80035ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003482:	4b97      	ldr	r3, [pc, #604]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b94      	ldr	r3, [pc, #592]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4a93      	ldr	r2, [pc, #588]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	61d3      	str	r3, [r2, #28]
 800349a:	4b91      	ldr	r3, [pc, #580]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b8e      	ldr	r3, [pc, #568]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b6:	4b8b      	ldr	r3, [pc, #556]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a8a      	ldr	r2, [pc, #552]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7ff fa11 	bl	80028e8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7ff fa0d 	bl	80028e8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	; 0x64
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e0fd      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	4b81      	ldr	r3, [pc, #516]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x312>
 80034f0:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4a7a      	ldr	r2, [pc, #488]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6213      	str	r3, [r2, #32]
 80034fc:	e02d      	b.n	800355a <HAL_RCC_OscConfig+0x36e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x334>
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4a75      	ldr	r2, [pc, #468]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	6213      	str	r3, [r2, #32]
 8003512:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a72      	ldr	r2, [pc, #456]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	f023 0304 	bic.w	r3, r3, #4
 800351c:	6213      	str	r3, [r2, #32]
 800351e:	e01c      	b.n	800355a <HAL_RCC_OscConfig+0x36e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b05      	cmp	r3, #5
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_OscConfig+0x356>
 8003528:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4a6c      	ldr	r2, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	6213      	str	r3, [r2, #32]
 8003534:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	e00b      	b.n	800355a <HAL_RCC_OscConfig+0x36e>
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a66      	ldr	r2, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6213      	str	r3, [r2, #32]
 800354e:	4b64      	ldr	r3, [pc, #400]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a63      	ldr	r2, [pc, #396]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d015      	beq.n	800358e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7ff f9c1 	bl	80028e8 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7ff f9bd 	bl	80028e8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0ab      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	4b57      	ldr	r3, [pc, #348]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ee      	beq.n	800356a <HAL_RCC_OscConfig+0x37e>
 800358c:	e014      	b.n	80035b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358e:	f7ff f9ab 	bl	80028e8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003594:	e00a      	b.n	80035ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7ff f9a7 	bl	80028e8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e095      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ee      	bne.n	8003596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d105      	bne.n	80035ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035be:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4a47      	ldr	r2, [pc, #284]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8081 	beq.w	80036d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d061      	beq.n	80036a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d146      	bne.n	8003676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <HAL_RCC_OscConfig+0x4fc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7ff f97b 	bl	80028e8 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7ff f977 	bl	80028e8 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e067      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d108      	bne.n	8003630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	492d      	ldr	r1, [pc, #180]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a19      	ldr	r1, [r3, #32]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	430b      	orrs	r3, r1
 8003642:	4927      	ldr	r1, [pc, #156]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_RCC_OscConfig+0x4fc>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7ff f94b 	bl	80028e8 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003656:	f7ff f947 	bl	80028e8 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e037      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x46a>
 8003674:	e02f      	b.n	80036d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_RCC_OscConfig+0x4fc>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7ff f934 	bl	80028e8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7ff f930 	bl	80028e8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e020      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x498>
 80036a2:	e018      	b.n	80036d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e013      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42420060 	.word	0x42420060

080036ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0d0      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b67      	ldr	r3, [pc, #412]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4965      	ldr	r1, [pc, #404]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003748:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800376a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b50      	ldr	r3, [pc, #320]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	494d      	ldr	r1, [pc, #308]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d040      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e073      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e06b      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4936      	ldr	r1, [pc, #216]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7ff f884 	bl	80028e8 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7ff f880 	bl	80028e8 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e053      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d210      	bcs.n	800383c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b24      	ldr	r3, [pc, #144]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	4922      	ldr	r1, [pc, #136]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e032      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4916      	ldr	r1, [pc, #88]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	490e      	ldr	r1, [pc, #56]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800387a:	f000 f821 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800387e:	4601      	mov	r1, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	5cd3      	ldrb	r3, [r2, r3]
 800388e:	fa21 f303 	lsr.w	r3, r1, r3
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe ffe2 	bl	8002864 <HAL_InitTick>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08009248 	.word	0x08009248
 80038b8:	20000004 	.word	0x20000004
 80038bc:	20000008 	.word	0x20000008

080038c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b490      	push	{r4, r7}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038c6:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038c8:	1d3c      	adds	r4, r7, #4
 80038ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038d0:	4b28      	ldr	r3, [pc, #160]	; (8003974 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x40>
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x46>
 80038fe:	e02d      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003902:	623b      	str	r3, [r7, #32]
      break;
 8003904:	e02d      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	0c9b      	lsrs	r3, r3, #18
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003912:	4413      	add	r3, r2
 8003914:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003918:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d013      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c5b      	lsrs	r3, r3, #17
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003932:	4413      	add	r3, r2
 8003934:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003938:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	4a0f      	ldr	r2, [pc, #60]	; (800397c <HAL_RCC_GetSysClockFreq+0xbc>)
 800393e:	fb02 f203 	mul.w	r2, r2, r3
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e004      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	623b      	str	r3, [r7, #32]
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <HAL_RCC_GetSysClockFreq+0xbc>)
 800395e:	623b      	str	r3, [r7, #32]
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	6a3b      	ldr	r3, [r7, #32]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bc90      	pop	{r4, r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	08008524 	.word	0x08008524
 8003974:	08008534 	.word	0x08008534
 8003978:	40021000 	.word	0x40021000
 800397c:	007a1200 	.word	0x007a1200
 8003980:	003d0900 	.word	0x003d0900

08003984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <RCC_Delay+0x34>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <RCC_Delay+0x38>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0a5b      	lsrs	r3, r3, #9
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039a0:	bf00      	nop
  }
  while (Delay --);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	60fa      	str	r2, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f9      	bne.n	80039a0 <RCC_Delay+0x1c>
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000004 	.word	0x20000004
 80039bc:	10624dd3 	.word	0x10624dd3

080039c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e076      	b.n	8003ac0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d108      	bne.n	80039ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e2:	d009      	beq.n	80039f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
 80039ea:	e005      	b.n	80039f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe fdb0 	bl	8002578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	ea42 0103 	orr.w	r1, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	0c1a      	lsrs	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f002 0204 	and.w	r2, r2, #4
 8003a9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_SPI_Transmit_IT+0x20>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e06f      	b.n	8003bc8 <HAL_SPI_Transmit_IT+0x100>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_SPI_Transmit_IT+0x34>
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b00:	e05d      	b.n	8003bbe <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b12:	e054      	b.n	8003bbe <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2203      	movs	r2, #3
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <HAL_SPI_Transmit_IT+0x10c>)
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
 8003b5a:	e002      	b.n	8003b62 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_SPI_Transmit_IT+0x110>)
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6a:	d10f      	bne.n	8003b8c <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003b9a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d008      	beq.n	8003bbc <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e000      	b.n	8003bbe <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8003bbc:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	08003e3f 	.word	0x08003e3f
 8003bd8:	08003df9 	.word	0x08003df9

08003bdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10f      	bne.n	8003c20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
    return;
 8003c1e:	e0bf      	b.n	8003da0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_SPI_IRQHandler+0x66>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	09db      	lsrs	r3, r3, #7
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d004      	beq.n	8003c42 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	4798      	blx	r3
    return;
 8003c40:	e0ae      	b.n	8003da0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_SPI_IRQHandler+0x80>
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80a2 	beq.w	8003da0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 809b 	beq.w	8003da0 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d023      	beq.n	8003cbe <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d011      	beq.n	8003ca6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	f043 0204 	orr.w	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	e00b      	b.n	8003cbe <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	693b      	ldr	r3, [r7, #16]
        return;
 8003cbc:	e070      	b.n	8003da0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d014      	beq.n	8003cf4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d050      	beq.n	8003d9e <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d0a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d104      	bne.n	8003d28 <HAL_SPI_IRQHandler+0x14c>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d034      	beq.n	8003d92 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0203 	bic.w	r2, r2, #3
 8003d36:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d011      	beq.n	8003d64 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_SPI_IRQHandler+0x1cc>)
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe ff5f 	bl	8002c10 <HAL_DMA_Abort_IT>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d016      	beq.n	8003d9a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	4a0d      	ldr	r2, [pc, #52]	; (8003da8 <HAL_SPI_IRQHandler+0x1cc>)
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe ff49 	bl	8002c10 <HAL_DMA_Abort_IT>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d90:	e003      	b.n	8003d9a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f813 	bl	8003dbe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d98:	e000      	b.n	8003d9c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003d9a:	bf00      	nop
    return;
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
  }
}
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	08003dd1 	.word	0x08003dd1

08003dac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff ffe7 	bl	8003dbe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	7812      	ldrb	r2, [r2, #0]
 8003e0c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8cd 	bl	8003fd0 <SPI_CloseTx_ISR>
  }
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	1c9a      	adds	r2, r3, #2
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f8ab 	bl	8003fd0 <SPI_CloseTx_ISR>
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e94:	f7fe fd28 	bl	80028e8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ea4:	f7fe fd20 	bl	80028e8 <HAL_GetTick>
 8003ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	015b      	lsls	r3, r3, #5
 8003eb0:	0d1b      	lsrs	r3, r3, #20
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eba:	e054      	b.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d050      	beq.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec4:	f7fe fd10 	bl	80028e8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d902      	bls.n	8003eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d13d      	bne.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef2:	d111      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efc:	d004      	beq.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d107      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f20:	d10f      	bne.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e017      	b.n	8003f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d19b      	bne.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000004 	.word	0x20000004

08003f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff ff6a 	bl	8003e84 <SPI_WaitFlagStateUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e000      	b.n	8003fc8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <SPI_CloseTx_ISR+0xbc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <SPI_CloseTx_ISR+0xc0>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0a5b      	lsrs	r3, r3, #9
 8003fe4:	2264      	movs	r2, #100	; 0x64
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fec:	f7fe fc7c 	bl	80028e8 <HAL_GetTick>
 8003ff0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d106      	bne.n	8004006 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004004:	e009      	b.n	800401a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3b01      	subs	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0eb      	beq.n	8003ff2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004028:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	2164      	movs	r1, #100	; 0x64
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff ffb0 	bl	8003f94 <SPI_EndRxTxTransaction>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fea2 	bl	8003dbe <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800407a:	e002      	b.n	8004082 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fe95 	bl	8003dac <HAL_SPI_TxCpltCallback>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000004 	.word	0x20000004
 8004090:	057619f1 	.word	0x057619f1

08004094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e041      	b.n	800412a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fe face 	bl	800265c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f000 fa6c 	bl	80045b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d001      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e03a      	b.n	80041c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_TIM_Base_Start_IT+0x98>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x58>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004176:	d009      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x58>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x58>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b06      	cmp	r3, #6
 800419c:	d010      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	e007      	b.n	80041c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800

080041d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0202 	mvn.w	r2, #2
 8004204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9ad 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9a0 	bl	8004568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f9af 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0204 	mvn.w	r2, #4
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f983 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f976 	bl	8004568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f985 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0208 	mvn.w	r2, #8
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f959 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f94c 	bl	8004568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f95b 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0210 	mvn.w	r2, #16
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2208      	movs	r2, #8
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f92f 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f922 	bl	8004568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f931 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0201 	mvn.w	r2, #1
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8fd 	bl	8004556 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa73 	bl	800486e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8f5 	bl	800459e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0220 	mvn.w	r2, #32
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa3e 	bl	800485c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIM_ConfigClockSource+0x18>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e0a6      	b.n	800454e <HAL_TIM_ConfigClockSource+0x166>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800441e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004426:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	d067      	beq.n	8004508 <HAL_TIM_ConfigClockSource+0x120>
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d80b      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x6c>
 800443c:	2b10      	cmp	r3, #16
 800443e:	d073      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x140>
 8004440:	2b10      	cmp	r3, #16
 8004442:	d802      	bhi.n	800444a <HAL_TIM_ConfigClockSource+0x62>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d06f      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004448:	e078      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800444a:	2b20      	cmp	r3, #32
 800444c:	d06c      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x140>
 800444e:	2b30      	cmp	r3, #48	; 0x30
 8004450:	d06a      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004452:	e073      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004454:	2b70      	cmp	r3, #112	; 0x70
 8004456:	d00d      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0x8c>
 8004458:	2b70      	cmp	r3, #112	; 0x70
 800445a:	d804      	bhi.n	8004466 <HAL_TIM_ConfigClockSource+0x7e>
 800445c:	2b50      	cmp	r3, #80	; 0x50
 800445e:	d033      	beq.n	80044c8 <HAL_TIM_ConfigClockSource+0xe0>
 8004460:	2b60      	cmp	r3, #96	; 0x60
 8004462:	d041      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004464:	e06a      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d066      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x152>
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004470:	d017      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004472:	e063      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6899      	ldr	r1, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f000 f96d 	bl	8004762 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004496:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
      break;
 80044a0:	e04c      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f000 f956 	bl	8004762 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c4:	609a      	str	r2, [r3, #8]
      break;
 80044c6:	e039      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f000 f8cd 	bl	8004674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2150      	movs	r1, #80	; 0x50
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f924 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 80044e6:	e029      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f000 f8eb 	bl	80046d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2160      	movs	r1, #96	; 0x60
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f914 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 8004506:	e019      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	461a      	mov	r2, r3
 8004516:	f000 f8ad 	bl	8004674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2140      	movs	r1, #64	; 0x40
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f904 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 8004526:	e009      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 f8fb 	bl	800472e <TIM_ITRx_SetConfig>
        break;
 8004538:	e000      	b.n	800453c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800453a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a29      	ldr	r2, [pc, #164]	; (8004668 <TIM_Base_SetConfig+0xb8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00b      	beq.n	80045e0 <TIM_Base_SetConfig+0x30>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ce:	d007      	beq.n	80045e0 <TIM_Base_SetConfig+0x30>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a26      	ldr	r2, [pc, #152]	; (800466c <TIM_Base_SetConfig+0xbc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x30>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a25      	ldr	r2, [pc, #148]	; (8004670 <TIM_Base_SetConfig+0xc0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d108      	bne.n	80045f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <TIM_Base_SetConfig+0xb8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00b      	beq.n	8004612 <TIM_Base_SetConfig+0x62>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d007      	beq.n	8004612 <TIM_Base_SetConfig+0x62>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <TIM_Base_SetConfig+0xbc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_Base_SetConfig+0x62>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <TIM_Base_SetConfig+0xc0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d108      	bne.n	8004624 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a07      	ldr	r2, [pc, #28]	; (8004668 <TIM_Base_SetConfig+0xb8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d103      	bne.n	8004658 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	615a      	str	r2, [r3, #20]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800

08004674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800469e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f023 030a 	bic.w	r3, r3, #10
 80046b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f023 0210 	bic.w	r2, r3, #16
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	031b      	lsls	r3, r3, #12
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800470c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	621a      	str	r2, [r3, #32]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr

0800472e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	f043 0307 	orr.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004762:	b480      	push	{r7}
 8004764:	b087      	sub	sp, #28
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800477c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	021a      	lsls	r2, r3, #8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	431a      	orrs	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4313      	orrs	r3, r2
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	609a      	str	r2, [r3, #8]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e046      	b.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a16      	ldr	r2, [pc, #88]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004804:	d009      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a10      	ldr	r2, [pc, #64]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10c      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4313      	orrs	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800

0800485c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <__errno>:
 8004880:	4b01      	ldr	r3, [pc, #4]	; (8004888 <__errno+0x8>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000010 	.word	0x20000010

0800488c <__libc_init_array>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	2500      	movs	r5, #0
 8004890:	4e0c      	ldr	r6, [pc, #48]	; (80048c4 <__libc_init_array+0x38>)
 8004892:	4c0d      	ldr	r4, [pc, #52]	; (80048c8 <__libc_init_array+0x3c>)
 8004894:	1ba4      	subs	r4, r4, r6
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	42a5      	cmp	r5, r4
 800489a:	d109      	bne.n	80048b0 <__libc_init_array+0x24>
 800489c:	f003 fd5e 	bl	800835c <_init>
 80048a0:	2500      	movs	r5, #0
 80048a2:	4e0a      	ldr	r6, [pc, #40]	; (80048cc <__libc_init_array+0x40>)
 80048a4:	4c0a      	ldr	r4, [pc, #40]	; (80048d0 <__libc_init_array+0x44>)
 80048a6:	1ba4      	subs	r4, r4, r6
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	42a5      	cmp	r5, r4
 80048ac:	d105      	bne.n	80048ba <__libc_init_array+0x2e>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048b4:	4798      	blx	r3
 80048b6:	3501      	adds	r5, #1
 80048b8:	e7ee      	b.n	8004898 <__libc_init_array+0xc>
 80048ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048be:	4798      	blx	r3
 80048c0:	3501      	adds	r5, #1
 80048c2:	e7f2      	b.n	80048aa <__libc_init_array+0x1e>
 80048c4:	08009510 	.word	0x08009510
 80048c8:	08009510 	.word	0x08009510
 80048cc:	08009510 	.word	0x08009510
 80048d0:	08009514 	.word	0x08009514

080048d4 <memset>:
 80048d4:	4603      	mov	r3, r0
 80048d6:	4402      	add	r2, r0
 80048d8:	4293      	cmp	r3, r2
 80048da:	d100      	bne.n	80048de <memset+0xa>
 80048dc:	4770      	bx	lr
 80048de:	f803 1b01 	strb.w	r1, [r3], #1
 80048e2:	e7f9      	b.n	80048d8 <memset+0x4>

080048e4 <__cvt>:
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ea:	461e      	mov	r6, r3
 80048ec:	bfbb      	ittet	lt
 80048ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048f2:	461e      	movlt	r6, r3
 80048f4:	2300      	movge	r3, #0
 80048f6:	232d      	movlt	r3, #45	; 0x2d
 80048f8:	b088      	sub	sp, #32
 80048fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80048fc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004900:	f027 0720 	bic.w	r7, r7, #32
 8004904:	2f46      	cmp	r7, #70	; 0x46
 8004906:	4614      	mov	r4, r2
 8004908:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800490a:	700b      	strb	r3, [r1, #0]
 800490c:	d004      	beq.n	8004918 <__cvt+0x34>
 800490e:	2f45      	cmp	r7, #69	; 0x45
 8004910:	d100      	bne.n	8004914 <__cvt+0x30>
 8004912:	3501      	adds	r5, #1
 8004914:	2302      	movs	r3, #2
 8004916:	e000      	b.n	800491a <__cvt+0x36>
 8004918:	2303      	movs	r3, #3
 800491a:	aa07      	add	r2, sp, #28
 800491c:	9204      	str	r2, [sp, #16]
 800491e:	aa06      	add	r2, sp, #24
 8004920:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004924:	e9cd 3500 	strd	r3, r5, [sp]
 8004928:	4622      	mov	r2, r4
 800492a:	4633      	mov	r3, r6
 800492c:	f001 fd7c 	bl	8006428 <_dtoa_r>
 8004930:	2f47      	cmp	r7, #71	; 0x47
 8004932:	4680      	mov	r8, r0
 8004934:	d102      	bne.n	800493c <__cvt+0x58>
 8004936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004938:	07db      	lsls	r3, r3, #31
 800493a:	d526      	bpl.n	800498a <__cvt+0xa6>
 800493c:	2f46      	cmp	r7, #70	; 0x46
 800493e:	eb08 0905 	add.w	r9, r8, r5
 8004942:	d111      	bne.n	8004968 <__cvt+0x84>
 8004944:	f898 3000 	ldrb.w	r3, [r8]
 8004948:	2b30      	cmp	r3, #48	; 0x30
 800494a:	d10a      	bne.n	8004962 <__cvt+0x7e>
 800494c:	2200      	movs	r2, #0
 800494e:	2300      	movs	r3, #0
 8004950:	4620      	mov	r0, r4
 8004952:	4631      	mov	r1, r6
 8004954:	f7fc f828 	bl	80009a8 <__aeabi_dcmpeq>
 8004958:	b918      	cbnz	r0, 8004962 <__cvt+0x7e>
 800495a:	f1c5 0501 	rsb	r5, r5, #1
 800495e:	f8ca 5000 	str.w	r5, [sl]
 8004962:	f8da 3000 	ldr.w	r3, [sl]
 8004966:	4499      	add	r9, r3
 8004968:	2200      	movs	r2, #0
 800496a:	2300      	movs	r3, #0
 800496c:	4620      	mov	r0, r4
 800496e:	4631      	mov	r1, r6
 8004970:	f7fc f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8004974:	b938      	cbnz	r0, 8004986 <__cvt+0xa2>
 8004976:	2230      	movs	r2, #48	; 0x30
 8004978:	9b07      	ldr	r3, [sp, #28]
 800497a:	454b      	cmp	r3, r9
 800497c:	d205      	bcs.n	800498a <__cvt+0xa6>
 800497e:	1c59      	adds	r1, r3, #1
 8004980:	9107      	str	r1, [sp, #28]
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	e7f8      	b.n	8004978 <__cvt+0x94>
 8004986:	f8cd 901c 	str.w	r9, [sp, #28]
 800498a:	4640      	mov	r0, r8
 800498c:	9b07      	ldr	r3, [sp, #28]
 800498e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004990:	eba3 0308 	sub.w	r3, r3, r8
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	b008      	add	sp, #32
 8004998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800499c <__exponent>:
 800499c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800499e:	2900      	cmp	r1, #0
 80049a0:	bfb4      	ite	lt
 80049a2:	232d      	movlt	r3, #45	; 0x2d
 80049a4:	232b      	movge	r3, #43	; 0x2b
 80049a6:	4604      	mov	r4, r0
 80049a8:	bfb8      	it	lt
 80049aa:	4249      	neglt	r1, r1
 80049ac:	2909      	cmp	r1, #9
 80049ae:	f804 2b02 	strb.w	r2, [r4], #2
 80049b2:	7043      	strb	r3, [r0, #1]
 80049b4:	dd21      	ble.n	80049fa <__exponent+0x5e>
 80049b6:	f10d 0307 	add.w	r3, sp, #7
 80049ba:	461f      	mov	r7, r3
 80049bc:	260a      	movs	r6, #10
 80049be:	fb91 f5f6 	sdiv	r5, r1, r6
 80049c2:	fb06 1115 	mls	r1, r6, r5, r1
 80049c6:	2d09      	cmp	r5, #9
 80049c8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80049cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80049d4:	4629      	mov	r1, r5
 80049d6:	dc09      	bgt.n	80049ec <__exponent+0x50>
 80049d8:	3130      	adds	r1, #48	; 0x30
 80049da:	3b02      	subs	r3, #2
 80049dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049e0:	42bb      	cmp	r3, r7
 80049e2:	4622      	mov	r2, r4
 80049e4:	d304      	bcc.n	80049f0 <__exponent+0x54>
 80049e6:	1a10      	subs	r0, r2, r0
 80049e8:	b003      	add	sp, #12
 80049ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ec:	4613      	mov	r3, r2
 80049ee:	e7e6      	b.n	80049be <__exponent+0x22>
 80049f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f4:	f804 2b01 	strb.w	r2, [r4], #1
 80049f8:	e7f2      	b.n	80049e0 <__exponent+0x44>
 80049fa:	2330      	movs	r3, #48	; 0x30
 80049fc:	4419      	add	r1, r3
 80049fe:	7083      	strb	r3, [r0, #2]
 8004a00:	1d02      	adds	r2, r0, #4
 8004a02:	70c1      	strb	r1, [r0, #3]
 8004a04:	e7ef      	b.n	80049e6 <__exponent+0x4a>
	...

08004a08 <_printf_float>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	b091      	sub	sp, #68	; 0x44
 8004a0e:	460c      	mov	r4, r1
 8004a10:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004a12:	4693      	mov	fp, r2
 8004a14:	461e      	mov	r6, r3
 8004a16:	4605      	mov	r5, r0
 8004a18:	f002 fde8 	bl	80075ec <_localeconv_r>
 8004a1c:	6803      	ldr	r3, [r0, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	9309      	str	r3, [sp, #36]	; 0x24
 8004a22:	f7fb fb95 	bl	8000150 <strlen>
 8004a26:	2300      	movs	r3, #0
 8004a28:	930e      	str	r3, [sp, #56]	; 0x38
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a2e:	3307      	adds	r3, #7
 8004a30:	f023 0307 	bic.w	r3, r3, #7
 8004a34:	f103 0208 	add.w	r2, r3, #8
 8004a38:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004a3c:	f8d4 a000 	ldr.w	sl, [r4]
 8004a40:	603a      	str	r2, [r7, #0]
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a4a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004a4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295
 8004a58:	4ba6      	ldr	r3, [pc, #664]	; (8004cf4 <_printf_float+0x2ec>)
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a5e:	f7fb ffd5 	bl	8000a0c <__aeabi_dcmpun>
 8004a62:	bb68      	cbnz	r0, 8004ac0 <_printf_float+0xb8>
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
 8004a68:	4ba2      	ldr	r3, [pc, #648]	; (8004cf4 <_printf_float+0x2ec>)
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a6e:	f7fb ffaf 	bl	80009d0 <__aeabi_dcmple>
 8004a72:	bb28      	cbnz	r0, 8004ac0 <_printf_float+0xb8>
 8004a74:	2200      	movs	r2, #0
 8004a76:	2300      	movs	r3, #0
 8004a78:	4638      	mov	r0, r7
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb ff9e 	bl	80009bc <__aeabi_dcmplt>
 8004a80:	b110      	cbz	r0, 8004a88 <_printf_float+0x80>
 8004a82:	232d      	movs	r3, #45	; 0x2d
 8004a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a88:	4f9b      	ldr	r7, [pc, #620]	; (8004cf8 <_printf_float+0x2f0>)
 8004a8a:	4b9c      	ldr	r3, [pc, #624]	; (8004cfc <_printf_float+0x2f4>)
 8004a8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a90:	bf98      	it	ls
 8004a92:	461f      	movls	r7, r3
 8004a94:	2303      	movs	r3, #3
 8004a96:	f04f 0900 	mov.w	r9, #0
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	f02a 0304 	bic.w	r3, sl, #4
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	9600      	str	r6, [sp, #0]
 8004aa4:	465b      	mov	r3, fp
 8004aa6:	aa0f      	add	r2, sp, #60	; 0x3c
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f9e2 	bl	8004e74 <_printf_common>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	f040 8090 	bne.w	8004bd6 <_printf_float+0x1ce>
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aba:	b011      	add	sp, #68	; 0x44
 8004abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac0:	463a      	mov	r2, r7
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	f7fb ffa0 	bl	8000a0c <__aeabi_dcmpun>
 8004acc:	b110      	cbz	r0, 8004ad4 <_printf_float+0xcc>
 8004ace:	4f8c      	ldr	r7, [pc, #560]	; (8004d00 <_printf_float+0x2f8>)
 8004ad0:	4b8c      	ldr	r3, [pc, #560]	; (8004d04 <_printf_float+0x2fc>)
 8004ad2:	e7db      	b.n	8004a8c <_printf_float+0x84>
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	a80d      	add	r0, sp, #52	; 0x34
 8004ade:	a90e      	add	r1, sp, #56	; 0x38
 8004ae0:	d140      	bne.n	8004b64 <_printf_float+0x15c>
 8004ae2:	2306      	movs	r3, #6
 8004ae4:	6063      	str	r3, [r4, #4]
 8004ae6:	f04f 0c00 	mov.w	ip, #0
 8004aea:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004aee:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004af2:	6863      	ldr	r3, [r4, #4]
 8004af4:	6022      	str	r2, [r4, #0]
 8004af6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	463a      	mov	r2, r7
 8004afe:	464b      	mov	r3, r9
 8004b00:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004b04:	4628      	mov	r0, r5
 8004b06:	f7ff feed 	bl	80048e4 <__cvt>
 8004b0a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004b0e:	2b47      	cmp	r3, #71	; 0x47
 8004b10:	4607      	mov	r7, r0
 8004b12:	d109      	bne.n	8004b28 <_printf_float+0x120>
 8004b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b16:	1cd8      	adds	r0, r3, #3
 8004b18:	db02      	blt.n	8004b20 <_printf_float+0x118>
 8004b1a:	6862      	ldr	r2, [r4, #4]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	dd47      	ble.n	8004bb0 <_printf_float+0x1a8>
 8004b20:	f1a8 0802 	sub.w	r8, r8, #2
 8004b24:	fa5f f888 	uxtb.w	r8, r8
 8004b28:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004b2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b2e:	d824      	bhi.n	8004b7a <_printf_float+0x172>
 8004b30:	3901      	subs	r1, #1
 8004b32:	4642      	mov	r2, r8
 8004b34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b38:	910d      	str	r1, [sp, #52]	; 0x34
 8004b3a:	f7ff ff2f 	bl	800499c <__exponent>
 8004b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b40:	4681      	mov	r9, r0
 8004b42:	1813      	adds	r3, r2, r0
 8004b44:	2a01      	cmp	r2, #1
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	dc02      	bgt.n	8004b50 <_printf_float+0x148>
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	07d1      	lsls	r1, r2, #31
 8004b4e:	d501      	bpl.n	8004b54 <_printf_float+0x14c>
 8004b50:	3301      	adds	r3, #1
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0a2      	beq.n	8004aa2 <_printf_float+0x9a>
 8004b5c:	232d      	movs	r3, #45	; 0x2d
 8004b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b62:	e79e      	b.n	8004aa2 <_printf_float+0x9a>
 8004b64:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004b68:	f000 816e 	beq.w	8004e48 <_printf_float+0x440>
 8004b6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b70:	d1b9      	bne.n	8004ae6 <_printf_float+0xde>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1b7      	bne.n	8004ae6 <_printf_float+0xde>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e7b4      	b.n	8004ae4 <_printf_float+0xdc>
 8004b7a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004b7e:	d119      	bne.n	8004bb4 <_printf_float+0x1ac>
 8004b80:	2900      	cmp	r1, #0
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	dd0c      	ble.n	8004ba0 <_printf_float+0x198>
 8004b86:	6121      	str	r1, [r4, #16]
 8004b88:	b913      	cbnz	r3, 8004b90 <_printf_float+0x188>
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	07d2      	lsls	r2, r2, #31
 8004b8e:	d502      	bpl.n	8004b96 <_printf_float+0x18e>
 8004b90:	3301      	adds	r3, #1
 8004b92:	440b      	add	r3, r1
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b98:	f04f 0900 	mov.w	r9, #0
 8004b9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b9e:	e7d9      	b.n	8004b54 <_printf_float+0x14c>
 8004ba0:	b913      	cbnz	r3, 8004ba8 <_printf_float+0x1a0>
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	07d0      	lsls	r0, r2, #31
 8004ba6:	d501      	bpl.n	8004bac <_printf_float+0x1a4>
 8004ba8:	3302      	adds	r3, #2
 8004baa:	e7f3      	b.n	8004b94 <_printf_float+0x18c>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e7f1      	b.n	8004b94 <_printf_float+0x18c>
 8004bb0:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004bb4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	db05      	blt.n	8004bc8 <_printf_float+0x1c0>
 8004bbc:	6822      	ldr	r2, [r4, #0]
 8004bbe:	6123      	str	r3, [r4, #16]
 8004bc0:	07d1      	lsls	r1, r2, #31
 8004bc2:	d5e8      	bpl.n	8004b96 <_printf_float+0x18e>
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	e7e5      	b.n	8004b94 <_printf_float+0x18c>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bfcc      	ite	gt
 8004bcc:	2301      	movgt	r3, #1
 8004bce:	f1c3 0302 	rsble	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	e7de      	b.n	8004b94 <_printf_float+0x18c>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	055a      	lsls	r2, r3, #21
 8004bda:	d407      	bmi.n	8004bec <_printf_float+0x1e4>
 8004bdc:	6923      	ldr	r3, [r4, #16]
 8004bde:	463a      	mov	r2, r7
 8004be0:	4659      	mov	r1, fp
 8004be2:	4628      	mov	r0, r5
 8004be4:	47b0      	blx	r6
 8004be6:	3001      	adds	r0, #1
 8004be8:	d129      	bne.n	8004c3e <_printf_float+0x236>
 8004bea:	e764      	b.n	8004ab6 <_printf_float+0xae>
 8004bec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004bf0:	f240 80d7 	bls.w	8004da2 <_printf_float+0x39a>
 8004bf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f7fb fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8004c00:	b388      	cbz	r0, 8004c66 <_printf_float+0x25e>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4a40      	ldr	r2, [pc, #256]	; (8004d08 <_printf_float+0x300>)
 8004c06:	4659      	mov	r1, fp
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b0      	blx	r6
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	f43f af52 	beq.w	8004ab6 <_printf_float+0xae>
 8004c12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c16:	429a      	cmp	r2, r3
 8004c18:	db02      	blt.n	8004c20 <_printf_float+0x218>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	07d8      	lsls	r0, r3, #31
 8004c1e:	d50e      	bpl.n	8004c3e <_printf_float+0x236>
 8004c20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c24:	4659      	mov	r1, fp
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b0      	blx	r6
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f af43 	beq.w	8004ab6 <_printf_float+0xae>
 8004c30:	2700      	movs	r7, #0
 8004c32:	f104 081a 	add.w	r8, r4, #26
 8004c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	42bb      	cmp	r3, r7
 8004c3c:	dc09      	bgt.n	8004c52 <_printf_float+0x24a>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	079f      	lsls	r7, r3, #30
 8004c42:	f100 80fd 	bmi.w	8004e40 <_printf_float+0x438>
 8004c46:	68e0      	ldr	r0, [r4, #12]
 8004c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	bfb8      	it	lt
 8004c4e:	4618      	movlt	r0, r3
 8004c50:	e733      	b.n	8004aba <_printf_float+0xb2>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4642      	mov	r2, r8
 8004c56:	4659      	mov	r1, fp
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b0      	blx	r6
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f af2a 	beq.w	8004ab6 <_printf_float+0xae>
 8004c62:	3701      	adds	r7, #1
 8004c64:	e7e7      	b.n	8004c36 <_printf_float+0x22e>
 8004c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dc2b      	bgt.n	8004cc4 <_printf_float+0x2bc>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <_printf_float+0x300>)
 8004c70:	4659      	mov	r1, fp
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b0      	blx	r6
 8004c76:	3001      	adds	r0, #1
 8004c78:	f43f af1d 	beq.w	8004ab6 <_printf_float+0xae>
 8004c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c7e:	b923      	cbnz	r3, 8004c8a <_printf_float+0x282>
 8004c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c82:	b913      	cbnz	r3, 8004c8a <_printf_float+0x282>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	07d9      	lsls	r1, r3, #31
 8004c88:	d5d9      	bpl.n	8004c3e <_printf_float+0x236>
 8004c8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c8e:	4659      	mov	r1, fp
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b0      	blx	r6
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f af0e 	beq.w	8004ab6 <_printf_float+0xae>
 8004c9a:	f04f 0800 	mov.w	r8, #0
 8004c9e:	f104 091a 	add.w	r9, r4, #26
 8004ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	4543      	cmp	r3, r8
 8004ca8:	dc01      	bgt.n	8004cae <_printf_float+0x2a6>
 8004caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cac:	e797      	b.n	8004bde <_printf_float+0x1d6>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	464a      	mov	r2, r9
 8004cb2:	4659      	mov	r1, fp
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b0      	blx	r6
 8004cb8:	3001      	adds	r0, #1
 8004cba:	f43f aefc 	beq.w	8004ab6 <_printf_float+0xae>
 8004cbe:	f108 0801 	add.w	r8, r8, #1
 8004cc2:	e7ee      	b.n	8004ca2 <_printf_float+0x29a>
 8004cc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	bfa8      	it	ge
 8004ccc:	461a      	movge	r2, r3
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	4690      	mov	r8, r2
 8004cd2:	dd07      	ble.n	8004ce4 <_printf_float+0x2dc>
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	463a      	mov	r2, r7
 8004cda:	4628      	mov	r0, r5
 8004cdc:	47b0      	blx	r6
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f43f aee9 	beq.w	8004ab6 <_printf_float+0xae>
 8004ce4:	f104 031a 	add.w	r3, r4, #26
 8004ce8:	f04f 0a00 	mov.w	sl, #0
 8004cec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cf2:	e015      	b.n	8004d20 <_printf_float+0x318>
 8004cf4:	7fefffff 	.word	0x7fefffff
 8004cf8:	0800925c 	.word	0x0800925c
 8004cfc:	08009258 	.word	0x08009258
 8004d00:	08009264 	.word	0x08009264
 8004d04:	08009260 	.word	0x08009260
 8004d08:	08009268 	.word	0x08009268
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d10:	4659      	mov	r1, fp
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b0      	blx	r6
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f aecd 	beq.w	8004ab6 <_printf_float+0xae>
 8004d1c:	f10a 0a01 	add.w	sl, sl, #1
 8004d20:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004d24:	eba9 0308 	sub.w	r3, r9, r8
 8004d28:	4553      	cmp	r3, sl
 8004d2a:	dcef      	bgt.n	8004d0c <_printf_float+0x304>
 8004d2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d30:	429a      	cmp	r2, r3
 8004d32:	444f      	add	r7, r9
 8004d34:	db14      	blt.n	8004d60 <_printf_float+0x358>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	07da      	lsls	r2, r3, #31
 8004d3a:	d411      	bmi.n	8004d60 <_printf_float+0x358>
 8004d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d3e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d40:	eba3 0209 	sub.w	r2, r3, r9
 8004d44:	eba3 0901 	sub.w	r9, r3, r1
 8004d48:	4591      	cmp	r9, r2
 8004d4a:	bfa8      	it	ge
 8004d4c:	4691      	movge	r9, r2
 8004d4e:	f1b9 0f00 	cmp.w	r9, #0
 8004d52:	dc0d      	bgt.n	8004d70 <_printf_float+0x368>
 8004d54:	2700      	movs	r7, #0
 8004d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d5a:	f104 081a 	add.w	r8, r4, #26
 8004d5e:	e018      	b.n	8004d92 <_printf_float+0x38a>
 8004d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d64:	4659      	mov	r1, fp
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b0      	blx	r6
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d1e6      	bne.n	8004d3c <_printf_float+0x334>
 8004d6e:	e6a2      	b.n	8004ab6 <_printf_float+0xae>
 8004d70:	464b      	mov	r3, r9
 8004d72:	463a      	mov	r2, r7
 8004d74:	4659      	mov	r1, fp
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b0      	blx	r6
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d1ea      	bne.n	8004d54 <_printf_float+0x34c>
 8004d7e:	e69a      	b.n	8004ab6 <_printf_float+0xae>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4642      	mov	r2, r8
 8004d84:	4659      	mov	r1, fp
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b0      	blx	r6
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f ae93 	beq.w	8004ab6 <_printf_float+0xae>
 8004d90:	3701      	adds	r7, #1
 8004d92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	eba3 0309 	sub.w	r3, r3, r9
 8004d9c:	42bb      	cmp	r3, r7
 8004d9e:	dcef      	bgt.n	8004d80 <_printf_float+0x378>
 8004da0:	e74d      	b.n	8004c3e <_printf_float+0x236>
 8004da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004da4:	2a01      	cmp	r2, #1
 8004da6:	dc01      	bgt.n	8004dac <_printf_float+0x3a4>
 8004da8:	07db      	lsls	r3, r3, #31
 8004daa:	d538      	bpl.n	8004e1e <_printf_float+0x416>
 8004dac:	2301      	movs	r3, #1
 8004dae:	463a      	mov	r2, r7
 8004db0:	4659      	mov	r1, fp
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b0      	blx	r6
 8004db6:	3001      	adds	r0, #1
 8004db8:	f43f ae7d 	beq.w	8004ab6 <_printf_float+0xae>
 8004dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	47b0      	blx	r6
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f107 0701 	add.w	r7, r7, #1
 8004dcc:	f43f ae73 	beq.w	8004ab6 <_printf_float+0xae>
 8004dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f103 38ff 	add.w	r8, r3, #4294967295
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f7fb fde3 	bl	80009a8 <__aeabi_dcmpeq>
 8004de2:	b9c0      	cbnz	r0, 8004e16 <_printf_float+0x40e>
 8004de4:	4643      	mov	r3, r8
 8004de6:	463a      	mov	r2, r7
 8004de8:	4659      	mov	r1, fp
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b0      	blx	r6
 8004dee:	3001      	adds	r0, #1
 8004df0:	d10d      	bne.n	8004e0e <_printf_float+0x406>
 8004df2:	e660      	b.n	8004ab6 <_printf_float+0xae>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4642      	mov	r2, r8
 8004df8:	4659      	mov	r1, fp
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	47b0      	blx	r6
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f43f ae59 	beq.w	8004ab6 <_printf_float+0xae>
 8004e04:	3701      	adds	r7, #1
 8004e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	42bb      	cmp	r3, r7
 8004e0c:	dcf2      	bgt.n	8004df4 <_printf_float+0x3ec>
 8004e0e:	464b      	mov	r3, r9
 8004e10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e14:	e6e4      	b.n	8004be0 <_printf_float+0x1d8>
 8004e16:	2700      	movs	r7, #0
 8004e18:	f104 081a 	add.w	r8, r4, #26
 8004e1c:	e7f3      	b.n	8004e06 <_printf_float+0x3fe>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e7e1      	b.n	8004de6 <_printf_float+0x3de>
 8004e22:	2301      	movs	r3, #1
 8004e24:	4642      	mov	r2, r8
 8004e26:	4659      	mov	r1, fp
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b0      	blx	r6
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	f43f ae42 	beq.w	8004ab6 <_printf_float+0xae>
 8004e32:	3701      	adds	r7, #1
 8004e34:	68e3      	ldr	r3, [r4, #12]
 8004e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	42bb      	cmp	r3, r7
 8004e3c:	dcf1      	bgt.n	8004e22 <_printf_float+0x41a>
 8004e3e:	e702      	b.n	8004c46 <_printf_float+0x23e>
 8004e40:	2700      	movs	r7, #0
 8004e42:	f104 0819 	add.w	r8, r4, #25
 8004e46:	e7f5      	b.n	8004e34 <_printf_float+0x42c>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f43f ae94 	beq.w	8004b76 <_printf_float+0x16e>
 8004e4e:	f04f 0c00 	mov.w	ip, #0
 8004e52:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004e56:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004e60:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	463a      	mov	r2, r7
 8004e68:	464b      	mov	r3, r9
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f7ff fd3a 	bl	80048e4 <__cvt>
 8004e70:	4607      	mov	r7, r0
 8004e72:	e64f      	b.n	8004b14 <_printf_float+0x10c>

08004e74 <_printf_common>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	4691      	mov	r9, r2
 8004e7a:	461f      	mov	r7, r3
 8004e7c:	688a      	ldr	r2, [r1, #8]
 8004e7e:	690b      	ldr	r3, [r1, #16]
 8004e80:	4606      	mov	r6, r0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bfb8      	it	lt
 8004e86:	4613      	movlt	r3, r2
 8004e88:	f8c9 3000 	str.w	r3, [r9]
 8004e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e90:	460c      	mov	r4, r1
 8004e92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e96:	b112      	cbz	r2, 8004e9e <_printf_common+0x2a>
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f8c9 3000 	str.w	r3, [r9]
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	0699      	lsls	r1, r3, #26
 8004ea2:	bf42      	ittt	mi
 8004ea4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ea8:	3302      	addmi	r3, #2
 8004eaa:	f8c9 3000 	strmi.w	r3, [r9]
 8004eae:	6825      	ldr	r5, [r4, #0]
 8004eb0:	f015 0506 	ands.w	r5, r5, #6
 8004eb4:	d107      	bne.n	8004ec6 <_printf_common+0x52>
 8004eb6:	f104 0a19 	add.w	sl, r4, #25
 8004eba:	68e3      	ldr	r3, [r4, #12]
 8004ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	42ab      	cmp	r3, r5
 8004ec4:	dc29      	bgt.n	8004f1a <_printf_common+0xa6>
 8004ec6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	3300      	adds	r3, #0
 8004ece:	bf18      	it	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	0692      	lsls	r2, r2, #26
 8004ed4:	d42e      	bmi.n	8004f34 <_printf_common+0xc0>
 8004ed6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eda:	4639      	mov	r1, r7
 8004edc:	4630      	mov	r0, r6
 8004ede:	47c0      	blx	r8
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d021      	beq.n	8004f28 <_printf_common+0xb4>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	68e5      	ldr	r5, [r4, #12]
 8004ee8:	f003 0306 	and.w	r3, r3, #6
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	bf18      	it	ne
 8004ef0:	2500      	movne	r5, #0
 8004ef2:	f8d9 2000 	ldr.w	r2, [r9]
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	bf08      	it	eq
 8004efc:	1aad      	subeq	r5, r5, r2
 8004efe:	68a3      	ldr	r3, [r4, #8]
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	bf08      	it	eq
 8004f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfc4      	itt	gt
 8004f0c:	1a9b      	subgt	r3, r3, r2
 8004f0e:	18ed      	addgt	r5, r5, r3
 8004f10:	341a      	adds	r4, #26
 8004f12:	454d      	cmp	r5, r9
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xd8>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xb8>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4639      	mov	r1, r7
 8004f20:	4630      	mov	r0, r6
 8004f22:	47c0      	blx	r8
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xbc>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c2      	b.n	8004eba <_printf_common+0x46>
 8004f34:	2030      	movs	r0, #48	; 0x30
 8004f36:	18e1      	adds	r1, r4, r3
 8004f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f42:	4422      	add	r2, r4
 8004f44:	3302      	adds	r3, #2
 8004f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f4a:	e7c4      	b.n	8004ed6 <_printf_common+0x62>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4639      	mov	r1, r7
 8004f52:	4630      	mov	r0, r6
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xb4>
 8004f5a:	f109 0901 	add.w	r9, r9, #1
 8004f5e:	e7d8      	b.n	8004f12 <_printf_common+0x9e>

08004f60 <_printf_i>:
 8004f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f68:	460c      	mov	r4, r1
 8004f6a:	7e09      	ldrb	r1, [r1, #24]
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	296e      	cmp	r1, #110	; 0x6e
 8004f70:	4617      	mov	r7, r2
 8004f72:	4606      	mov	r6, r0
 8004f74:	4698      	mov	r8, r3
 8004f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f78:	f000 80b3 	beq.w	80050e2 <_printf_i+0x182>
 8004f7c:	d822      	bhi.n	8004fc4 <_printf_i+0x64>
 8004f7e:	2963      	cmp	r1, #99	; 0x63
 8004f80:	d036      	beq.n	8004ff0 <_printf_i+0x90>
 8004f82:	d80a      	bhi.n	8004f9a <_printf_i+0x3a>
 8004f84:	2900      	cmp	r1, #0
 8004f86:	f000 80b9 	beq.w	80050fc <_printf_i+0x19c>
 8004f8a:	2958      	cmp	r1, #88	; 0x58
 8004f8c:	f000 8083 	beq.w	8005096 <_printf_i+0x136>
 8004f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f98:	e032      	b.n	8005000 <_printf_i+0xa0>
 8004f9a:	2964      	cmp	r1, #100	; 0x64
 8004f9c:	d001      	beq.n	8004fa2 <_printf_i+0x42>
 8004f9e:	2969      	cmp	r1, #105	; 0x69
 8004fa0:	d1f6      	bne.n	8004f90 <_printf_i+0x30>
 8004fa2:	6820      	ldr	r0, [r4, #0]
 8004fa4:	6813      	ldr	r3, [r2, #0]
 8004fa6:	0605      	lsls	r5, r0, #24
 8004fa8:	f103 0104 	add.w	r1, r3, #4
 8004fac:	d52a      	bpl.n	8005004 <_printf_i+0xa4>
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6011      	str	r1, [r2, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da03      	bge.n	8004fbe <_printf_i+0x5e>
 8004fb6:	222d      	movs	r2, #45	; 0x2d
 8004fb8:	425b      	negs	r3, r3
 8004fba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fbe:	486f      	ldr	r0, [pc, #444]	; (800517c <_printf_i+0x21c>)
 8004fc0:	220a      	movs	r2, #10
 8004fc2:	e039      	b.n	8005038 <_printf_i+0xd8>
 8004fc4:	2973      	cmp	r1, #115	; 0x73
 8004fc6:	f000 809d 	beq.w	8005104 <_printf_i+0x1a4>
 8004fca:	d808      	bhi.n	8004fde <_printf_i+0x7e>
 8004fcc:	296f      	cmp	r1, #111	; 0x6f
 8004fce:	d020      	beq.n	8005012 <_printf_i+0xb2>
 8004fd0:	2970      	cmp	r1, #112	; 0x70
 8004fd2:	d1dd      	bne.n	8004f90 <_printf_i+0x30>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	f043 0320 	orr.w	r3, r3, #32
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	e003      	b.n	8004fe6 <_printf_i+0x86>
 8004fde:	2975      	cmp	r1, #117	; 0x75
 8004fe0:	d017      	beq.n	8005012 <_printf_i+0xb2>
 8004fe2:	2978      	cmp	r1, #120	; 0x78
 8004fe4:	d1d4      	bne.n	8004f90 <_printf_i+0x30>
 8004fe6:	2378      	movs	r3, #120	; 0x78
 8004fe8:	4865      	ldr	r0, [pc, #404]	; (8005180 <_printf_i+0x220>)
 8004fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fee:	e055      	b.n	800509c <_printf_i+0x13c>
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff6:	1d19      	adds	r1, r3, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6011      	str	r1, [r2, #0]
 8004ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005000:	2301      	movs	r3, #1
 8005002:	e08c      	b.n	800511e <_printf_i+0x1be>
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800500a:	6011      	str	r1, [r2, #0]
 800500c:	bf18      	it	ne
 800500e:	b21b      	sxthne	r3, r3
 8005010:	e7cf      	b.n	8004fb2 <_printf_i+0x52>
 8005012:	6813      	ldr	r3, [r2, #0]
 8005014:	6825      	ldr	r5, [r4, #0]
 8005016:	1d18      	adds	r0, r3, #4
 8005018:	6010      	str	r0, [r2, #0]
 800501a:	0628      	lsls	r0, r5, #24
 800501c:	d501      	bpl.n	8005022 <_printf_i+0xc2>
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	e002      	b.n	8005028 <_printf_i+0xc8>
 8005022:	0668      	lsls	r0, r5, #25
 8005024:	d5fb      	bpl.n	800501e <_printf_i+0xbe>
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	296f      	cmp	r1, #111	; 0x6f
 800502a:	bf14      	ite	ne
 800502c:	220a      	movne	r2, #10
 800502e:	2208      	moveq	r2, #8
 8005030:	4852      	ldr	r0, [pc, #328]	; (800517c <_printf_i+0x21c>)
 8005032:	2100      	movs	r1, #0
 8005034:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005038:	6865      	ldr	r5, [r4, #4]
 800503a:	2d00      	cmp	r5, #0
 800503c:	60a5      	str	r5, [r4, #8]
 800503e:	f2c0 8095 	blt.w	800516c <_printf_i+0x20c>
 8005042:	6821      	ldr	r1, [r4, #0]
 8005044:	f021 0104 	bic.w	r1, r1, #4
 8005048:	6021      	str	r1, [r4, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d13d      	bne.n	80050ca <_printf_i+0x16a>
 800504e:	2d00      	cmp	r5, #0
 8005050:	f040 808e 	bne.w	8005170 <_printf_i+0x210>
 8005054:	4665      	mov	r5, ip
 8005056:	2a08      	cmp	r2, #8
 8005058:	d10b      	bne.n	8005072 <_printf_i+0x112>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	07db      	lsls	r3, r3, #31
 800505e:	d508      	bpl.n	8005072 <_printf_i+0x112>
 8005060:	6923      	ldr	r3, [r4, #16]
 8005062:	6862      	ldr	r2, [r4, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	bfde      	ittt	le
 8005068:	2330      	movle	r3, #48	; 0x30
 800506a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800506e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005072:	ebac 0305 	sub.w	r3, ip, r5
 8005076:	6123      	str	r3, [r4, #16]
 8005078:	f8cd 8000 	str.w	r8, [sp]
 800507c:	463b      	mov	r3, r7
 800507e:	aa03      	add	r2, sp, #12
 8005080:	4621      	mov	r1, r4
 8005082:	4630      	mov	r0, r6
 8005084:	f7ff fef6 	bl	8004e74 <_printf_common>
 8005088:	3001      	adds	r0, #1
 800508a:	d14d      	bne.n	8005128 <_printf_i+0x1c8>
 800508c:	f04f 30ff 	mov.w	r0, #4294967295
 8005090:	b005      	add	sp, #20
 8005092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005096:	4839      	ldr	r0, [pc, #228]	; (800517c <_printf_i+0x21c>)
 8005098:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800509c:	6813      	ldr	r3, [r2, #0]
 800509e:	6821      	ldr	r1, [r4, #0]
 80050a0:	1d1d      	adds	r5, r3, #4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6015      	str	r5, [r2, #0]
 80050a6:	060a      	lsls	r2, r1, #24
 80050a8:	d50b      	bpl.n	80050c2 <_printf_i+0x162>
 80050aa:	07ca      	lsls	r2, r1, #31
 80050ac:	bf44      	itt	mi
 80050ae:	f041 0120 	orrmi.w	r1, r1, #32
 80050b2:	6021      	strmi	r1, [r4, #0]
 80050b4:	b91b      	cbnz	r3, 80050be <_printf_i+0x15e>
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	f022 0220 	bic.w	r2, r2, #32
 80050bc:	6022      	str	r2, [r4, #0]
 80050be:	2210      	movs	r2, #16
 80050c0:	e7b7      	b.n	8005032 <_printf_i+0xd2>
 80050c2:	064d      	lsls	r5, r1, #25
 80050c4:	bf48      	it	mi
 80050c6:	b29b      	uxthmi	r3, r3
 80050c8:	e7ef      	b.n	80050aa <_printf_i+0x14a>
 80050ca:	4665      	mov	r5, ip
 80050cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80050d0:	fb02 3311 	mls	r3, r2, r1, r3
 80050d4:	5cc3      	ldrb	r3, [r0, r3]
 80050d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050da:	460b      	mov	r3, r1
 80050dc:	2900      	cmp	r1, #0
 80050de:	d1f5      	bne.n	80050cc <_printf_i+0x16c>
 80050e0:	e7b9      	b.n	8005056 <_printf_i+0xf6>
 80050e2:	6813      	ldr	r3, [r2, #0]
 80050e4:	6825      	ldr	r5, [r4, #0]
 80050e6:	1d18      	adds	r0, r3, #4
 80050e8:	6961      	ldr	r1, [r4, #20]
 80050ea:	6010      	str	r0, [r2, #0]
 80050ec:	0628      	lsls	r0, r5, #24
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	d501      	bpl.n	80050f6 <_printf_i+0x196>
 80050f2:	6019      	str	r1, [r3, #0]
 80050f4:	e002      	b.n	80050fc <_printf_i+0x19c>
 80050f6:	066a      	lsls	r2, r5, #25
 80050f8:	d5fb      	bpl.n	80050f2 <_printf_i+0x192>
 80050fa:	8019      	strh	r1, [r3, #0]
 80050fc:	2300      	movs	r3, #0
 80050fe:	4665      	mov	r5, ip
 8005100:	6123      	str	r3, [r4, #16]
 8005102:	e7b9      	b.n	8005078 <_printf_i+0x118>
 8005104:	6813      	ldr	r3, [r2, #0]
 8005106:	1d19      	adds	r1, r3, #4
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	681d      	ldr	r5, [r3, #0]
 800510c:	6862      	ldr	r2, [r4, #4]
 800510e:	2100      	movs	r1, #0
 8005110:	4628      	mov	r0, r5
 8005112:	f002 fa93 	bl	800763c <memchr>
 8005116:	b108      	cbz	r0, 800511c <_printf_i+0x1bc>
 8005118:	1b40      	subs	r0, r0, r5
 800511a:	6060      	str	r0, [r4, #4]
 800511c:	6863      	ldr	r3, [r4, #4]
 800511e:	6123      	str	r3, [r4, #16]
 8005120:	2300      	movs	r3, #0
 8005122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005126:	e7a7      	b.n	8005078 <_printf_i+0x118>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	462a      	mov	r2, r5
 800512c:	4639      	mov	r1, r7
 800512e:	4630      	mov	r0, r6
 8005130:	47c0      	blx	r8
 8005132:	3001      	adds	r0, #1
 8005134:	d0aa      	beq.n	800508c <_printf_i+0x12c>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	079b      	lsls	r3, r3, #30
 800513a:	d413      	bmi.n	8005164 <_printf_i+0x204>
 800513c:	68e0      	ldr	r0, [r4, #12]
 800513e:	9b03      	ldr	r3, [sp, #12]
 8005140:	4298      	cmp	r0, r3
 8005142:	bfb8      	it	lt
 8005144:	4618      	movlt	r0, r3
 8005146:	e7a3      	b.n	8005090 <_printf_i+0x130>
 8005148:	2301      	movs	r3, #1
 800514a:	464a      	mov	r2, r9
 800514c:	4639      	mov	r1, r7
 800514e:	4630      	mov	r0, r6
 8005150:	47c0      	blx	r8
 8005152:	3001      	adds	r0, #1
 8005154:	d09a      	beq.n	800508c <_printf_i+0x12c>
 8005156:	3501      	adds	r5, #1
 8005158:	68e3      	ldr	r3, [r4, #12]
 800515a:	9a03      	ldr	r2, [sp, #12]
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	42ab      	cmp	r3, r5
 8005160:	dcf2      	bgt.n	8005148 <_printf_i+0x1e8>
 8005162:	e7eb      	b.n	800513c <_printf_i+0x1dc>
 8005164:	2500      	movs	r5, #0
 8005166:	f104 0919 	add.w	r9, r4, #25
 800516a:	e7f5      	b.n	8005158 <_printf_i+0x1f8>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1ac      	bne.n	80050ca <_printf_i+0x16a>
 8005170:	7803      	ldrb	r3, [r0, #0]
 8005172:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005176:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800517a:	e76c      	b.n	8005056 <_printf_i+0xf6>
 800517c:	0800926a 	.word	0x0800926a
 8005180:	0800927b 	.word	0x0800927b

08005184 <_scanf_float>:
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	469a      	mov	sl, r3
 800518a:	688b      	ldr	r3, [r1, #8]
 800518c:	4616      	mov	r6, r2
 800518e:	1e5a      	subs	r2, r3, #1
 8005190:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005194:	bf88      	it	hi
 8005196:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800519a:	b087      	sub	sp, #28
 800519c:	bf85      	ittet	hi
 800519e:	189b      	addhi	r3, r3, r2
 80051a0:	9301      	strhi	r3, [sp, #4]
 80051a2:	2300      	movls	r3, #0
 80051a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051a8:	4688      	mov	r8, r1
 80051aa:	f04f 0b00 	mov.w	fp, #0
 80051ae:	bf8c      	ite	hi
 80051b0:	608b      	strhi	r3, [r1, #8]
 80051b2:	9301      	strls	r3, [sp, #4]
 80051b4:	680b      	ldr	r3, [r1, #0]
 80051b6:	4607      	mov	r7, r0
 80051b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051bc:	f848 3b1c 	str.w	r3, [r8], #28
 80051c0:	460c      	mov	r4, r1
 80051c2:	4645      	mov	r5, r8
 80051c4:	465a      	mov	r2, fp
 80051c6:	46d9      	mov	r9, fp
 80051c8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80051cc:	f8cd b008 	str.w	fp, [sp, #8]
 80051d0:	68a1      	ldr	r1, [r4, #8]
 80051d2:	b181      	cbz	r1, 80051f6 <_scanf_float+0x72>
 80051d4:	6833      	ldr	r3, [r6, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b49      	cmp	r3, #73	; 0x49
 80051da:	d071      	beq.n	80052c0 <_scanf_float+0x13c>
 80051dc:	d84d      	bhi.n	800527a <_scanf_float+0xf6>
 80051de:	2b39      	cmp	r3, #57	; 0x39
 80051e0:	d840      	bhi.n	8005264 <_scanf_float+0xe0>
 80051e2:	2b31      	cmp	r3, #49	; 0x31
 80051e4:	f080 8088 	bcs.w	80052f8 <_scanf_float+0x174>
 80051e8:	2b2d      	cmp	r3, #45	; 0x2d
 80051ea:	f000 8090 	beq.w	800530e <_scanf_float+0x18a>
 80051ee:	d815      	bhi.n	800521c <_scanf_float+0x98>
 80051f0:	2b2b      	cmp	r3, #43	; 0x2b
 80051f2:	f000 808c 	beq.w	800530e <_scanf_float+0x18a>
 80051f6:	f1b9 0f00 	cmp.w	r9, #0
 80051fa:	d003      	beq.n	8005204 <_scanf_float+0x80>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	3a01      	subs	r2, #1
 8005206:	2a01      	cmp	r2, #1
 8005208:	f200 80ea 	bhi.w	80053e0 <_scanf_float+0x25c>
 800520c:	4545      	cmp	r5, r8
 800520e:	f200 80dc 	bhi.w	80053ca <_scanf_float+0x246>
 8005212:	2601      	movs	r6, #1
 8005214:	4630      	mov	r0, r6
 8005216:	b007      	add	sp, #28
 8005218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521c:	2b2e      	cmp	r3, #46	; 0x2e
 800521e:	f000 809f 	beq.w	8005360 <_scanf_float+0x1dc>
 8005222:	2b30      	cmp	r3, #48	; 0x30
 8005224:	d1e7      	bne.n	80051f6 <_scanf_float+0x72>
 8005226:	6820      	ldr	r0, [r4, #0]
 8005228:	f410 7f80 	tst.w	r0, #256	; 0x100
 800522c:	d064      	beq.n	80052f8 <_scanf_float+0x174>
 800522e:	9b01      	ldr	r3, [sp, #4]
 8005230:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005234:	6020      	str	r0, [r4, #0]
 8005236:	f109 0901 	add.w	r9, r9, #1
 800523a:	b11b      	cbz	r3, 8005244 <_scanf_float+0xc0>
 800523c:	3b01      	subs	r3, #1
 800523e:	3101      	adds	r1, #1
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	60a1      	str	r1, [r4, #8]
 8005244:	68a3      	ldr	r3, [r4, #8]
 8005246:	3b01      	subs	r3, #1
 8005248:	60a3      	str	r3, [r4, #8]
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	3301      	adds	r3, #1
 800524e:	6123      	str	r3, [r4, #16]
 8005250:	6873      	ldr	r3, [r6, #4]
 8005252:	3b01      	subs	r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	6073      	str	r3, [r6, #4]
 8005258:	f340 80ac 	ble.w	80053b4 <_scanf_float+0x230>
 800525c:	6833      	ldr	r3, [r6, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	6033      	str	r3, [r6, #0]
 8005262:	e7b5      	b.n	80051d0 <_scanf_float+0x4c>
 8005264:	2b45      	cmp	r3, #69	; 0x45
 8005266:	f000 8085 	beq.w	8005374 <_scanf_float+0x1f0>
 800526a:	2b46      	cmp	r3, #70	; 0x46
 800526c:	d06a      	beq.n	8005344 <_scanf_float+0x1c0>
 800526e:	2b41      	cmp	r3, #65	; 0x41
 8005270:	d1c1      	bne.n	80051f6 <_scanf_float+0x72>
 8005272:	2a01      	cmp	r2, #1
 8005274:	d1bf      	bne.n	80051f6 <_scanf_float+0x72>
 8005276:	2202      	movs	r2, #2
 8005278:	e046      	b.n	8005308 <_scanf_float+0x184>
 800527a:	2b65      	cmp	r3, #101	; 0x65
 800527c:	d07a      	beq.n	8005374 <_scanf_float+0x1f0>
 800527e:	d818      	bhi.n	80052b2 <_scanf_float+0x12e>
 8005280:	2b54      	cmp	r3, #84	; 0x54
 8005282:	d066      	beq.n	8005352 <_scanf_float+0x1ce>
 8005284:	d811      	bhi.n	80052aa <_scanf_float+0x126>
 8005286:	2b4e      	cmp	r3, #78	; 0x4e
 8005288:	d1b5      	bne.n	80051f6 <_scanf_float+0x72>
 800528a:	2a00      	cmp	r2, #0
 800528c:	d146      	bne.n	800531c <_scanf_float+0x198>
 800528e:	f1b9 0f00 	cmp.w	r9, #0
 8005292:	d145      	bne.n	8005320 <_scanf_float+0x19c>
 8005294:	6821      	ldr	r1, [r4, #0]
 8005296:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800529a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800529e:	d13f      	bne.n	8005320 <_scanf_float+0x19c>
 80052a0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80052a4:	6021      	str	r1, [r4, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	e02e      	b.n	8005308 <_scanf_float+0x184>
 80052aa:	2b59      	cmp	r3, #89	; 0x59
 80052ac:	d01e      	beq.n	80052ec <_scanf_float+0x168>
 80052ae:	2b61      	cmp	r3, #97	; 0x61
 80052b0:	e7de      	b.n	8005270 <_scanf_float+0xec>
 80052b2:	2b6e      	cmp	r3, #110	; 0x6e
 80052b4:	d0e9      	beq.n	800528a <_scanf_float+0x106>
 80052b6:	d815      	bhi.n	80052e4 <_scanf_float+0x160>
 80052b8:	2b66      	cmp	r3, #102	; 0x66
 80052ba:	d043      	beq.n	8005344 <_scanf_float+0x1c0>
 80052bc:	2b69      	cmp	r3, #105	; 0x69
 80052be:	d19a      	bne.n	80051f6 <_scanf_float+0x72>
 80052c0:	f1bb 0f00 	cmp.w	fp, #0
 80052c4:	d138      	bne.n	8005338 <_scanf_float+0x1b4>
 80052c6:	f1b9 0f00 	cmp.w	r9, #0
 80052ca:	d197      	bne.n	80051fc <_scanf_float+0x78>
 80052cc:	6821      	ldr	r1, [r4, #0]
 80052ce:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80052d2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80052d6:	d195      	bne.n	8005204 <_scanf_float+0x80>
 80052d8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80052dc:	6021      	str	r1, [r4, #0]
 80052de:	f04f 0b01 	mov.w	fp, #1
 80052e2:	e011      	b.n	8005308 <_scanf_float+0x184>
 80052e4:	2b74      	cmp	r3, #116	; 0x74
 80052e6:	d034      	beq.n	8005352 <_scanf_float+0x1ce>
 80052e8:	2b79      	cmp	r3, #121	; 0x79
 80052ea:	d184      	bne.n	80051f6 <_scanf_float+0x72>
 80052ec:	f1bb 0f07 	cmp.w	fp, #7
 80052f0:	d181      	bne.n	80051f6 <_scanf_float+0x72>
 80052f2:	f04f 0b08 	mov.w	fp, #8
 80052f6:	e007      	b.n	8005308 <_scanf_float+0x184>
 80052f8:	eb12 0f0b 	cmn.w	r2, fp
 80052fc:	f47f af7b 	bne.w	80051f6 <_scanf_float+0x72>
 8005300:	6821      	ldr	r1, [r4, #0]
 8005302:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005306:	6021      	str	r1, [r4, #0]
 8005308:	702b      	strb	r3, [r5, #0]
 800530a:	3501      	adds	r5, #1
 800530c:	e79a      	b.n	8005244 <_scanf_float+0xc0>
 800530e:	6821      	ldr	r1, [r4, #0]
 8005310:	0608      	lsls	r0, r1, #24
 8005312:	f57f af70 	bpl.w	80051f6 <_scanf_float+0x72>
 8005316:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800531a:	e7f4      	b.n	8005306 <_scanf_float+0x182>
 800531c:	2a02      	cmp	r2, #2
 800531e:	d047      	beq.n	80053b0 <_scanf_float+0x22c>
 8005320:	f1bb 0f01 	cmp.w	fp, #1
 8005324:	d003      	beq.n	800532e <_scanf_float+0x1aa>
 8005326:	f1bb 0f04 	cmp.w	fp, #4
 800532a:	f47f af64 	bne.w	80051f6 <_scanf_float+0x72>
 800532e:	f10b 0b01 	add.w	fp, fp, #1
 8005332:	fa5f fb8b 	uxtb.w	fp, fp
 8005336:	e7e7      	b.n	8005308 <_scanf_float+0x184>
 8005338:	f1bb 0f03 	cmp.w	fp, #3
 800533c:	d0f7      	beq.n	800532e <_scanf_float+0x1aa>
 800533e:	f1bb 0f05 	cmp.w	fp, #5
 8005342:	e7f2      	b.n	800532a <_scanf_float+0x1a6>
 8005344:	f1bb 0f02 	cmp.w	fp, #2
 8005348:	f47f af55 	bne.w	80051f6 <_scanf_float+0x72>
 800534c:	f04f 0b03 	mov.w	fp, #3
 8005350:	e7da      	b.n	8005308 <_scanf_float+0x184>
 8005352:	f1bb 0f06 	cmp.w	fp, #6
 8005356:	f47f af4e 	bne.w	80051f6 <_scanf_float+0x72>
 800535a:	f04f 0b07 	mov.w	fp, #7
 800535e:	e7d3      	b.n	8005308 <_scanf_float+0x184>
 8005360:	6821      	ldr	r1, [r4, #0]
 8005362:	0588      	lsls	r0, r1, #22
 8005364:	f57f af47 	bpl.w	80051f6 <_scanf_float+0x72>
 8005368:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800536c:	6021      	str	r1, [r4, #0]
 800536e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005372:	e7c9      	b.n	8005308 <_scanf_float+0x184>
 8005374:	6821      	ldr	r1, [r4, #0]
 8005376:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800537a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800537e:	d006      	beq.n	800538e <_scanf_float+0x20a>
 8005380:	0548      	lsls	r0, r1, #21
 8005382:	f57f af38 	bpl.w	80051f6 <_scanf_float+0x72>
 8005386:	f1b9 0f00 	cmp.w	r9, #0
 800538a:	f43f af3b 	beq.w	8005204 <_scanf_float+0x80>
 800538e:	0588      	lsls	r0, r1, #22
 8005390:	bf58      	it	pl
 8005392:	9802      	ldrpl	r0, [sp, #8]
 8005394:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005398:	bf58      	it	pl
 800539a:	eba9 0000 	subpl.w	r0, r9, r0
 800539e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80053a2:	bf58      	it	pl
 80053a4:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80053a8:	6021      	str	r1, [r4, #0]
 80053aa:	f04f 0900 	mov.w	r9, #0
 80053ae:	e7ab      	b.n	8005308 <_scanf_float+0x184>
 80053b0:	2203      	movs	r2, #3
 80053b2:	e7a9      	b.n	8005308 <_scanf_float+0x184>
 80053b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053b8:	4631      	mov	r1, r6
 80053ba:	4638      	mov	r0, r7
 80053bc:	9205      	str	r2, [sp, #20]
 80053be:	4798      	blx	r3
 80053c0:	9a05      	ldr	r2, [sp, #20]
 80053c2:	2800      	cmp	r0, #0
 80053c4:	f43f af04 	beq.w	80051d0 <_scanf_float+0x4c>
 80053c8:	e715      	b.n	80051f6 <_scanf_float+0x72>
 80053ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053ce:	4632      	mov	r2, r6
 80053d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80053d4:	4638      	mov	r0, r7
 80053d6:	4798      	blx	r3
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	3b01      	subs	r3, #1
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	e715      	b.n	800520c <_scanf_float+0x88>
 80053e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80053e4:	2b06      	cmp	r3, #6
 80053e6:	d80a      	bhi.n	80053fe <_scanf_float+0x27a>
 80053e8:	f1bb 0f02 	cmp.w	fp, #2
 80053ec:	d967      	bls.n	80054be <_scanf_float+0x33a>
 80053ee:	f1ab 0b03 	sub.w	fp, fp, #3
 80053f2:	fa5f fb8b 	uxtb.w	fp, fp
 80053f6:	eba5 0b0b 	sub.w	fp, r5, fp
 80053fa:	455d      	cmp	r5, fp
 80053fc:	d14a      	bne.n	8005494 <_scanf_float+0x310>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	05da      	lsls	r2, r3, #23
 8005402:	d51f      	bpl.n	8005444 <_scanf_float+0x2c0>
 8005404:	055b      	lsls	r3, r3, #21
 8005406:	d467      	bmi.n	80054d8 <_scanf_float+0x354>
 8005408:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	2965      	cmp	r1, #101	; 0x65
 8005410:	f103 33ff 	add.w	r3, r3, #4294967295
 8005414:	f105 3bff 	add.w	fp, r5, #4294967295
 8005418:	6123      	str	r3, [r4, #16]
 800541a:	d00d      	beq.n	8005438 <_scanf_float+0x2b4>
 800541c:	2945      	cmp	r1, #69	; 0x45
 800541e:	d00b      	beq.n	8005438 <_scanf_float+0x2b4>
 8005420:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005424:	4632      	mov	r2, r6
 8005426:	4638      	mov	r0, r7
 8005428:	4798      	blx	r3
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005430:	3b01      	subs	r3, #1
 8005432:	f1a5 0b02 	sub.w	fp, r5, #2
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800543c:	4632      	mov	r2, r6
 800543e:	4638      	mov	r0, r7
 8005440:	4798      	blx	r3
 8005442:	465d      	mov	r5, fp
 8005444:	6826      	ldr	r6, [r4, #0]
 8005446:	f016 0610 	ands.w	r6, r6, #16
 800544a:	d176      	bne.n	800553a <_scanf_float+0x3b6>
 800544c:	702e      	strb	r6, [r5, #0]
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d141      	bne.n	80054de <_scanf_float+0x35a>
 800545a:	9b02      	ldr	r3, [sp, #8]
 800545c:	eba9 0303 	sub.w	r3, r9, r3
 8005460:	425a      	negs	r2, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d148      	bne.n	80054f8 <_scanf_float+0x374>
 8005466:	4641      	mov	r1, r8
 8005468:	2200      	movs	r2, #0
 800546a:	4638      	mov	r0, r7
 800546c:	f000 feb0 	bl	80061d0 <_strtod_r>
 8005470:	6825      	ldr	r5, [r4, #0]
 8005472:	4680      	mov	r8, r0
 8005474:	f015 0f02 	tst.w	r5, #2
 8005478:	4689      	mov	r9, r1
 800547a:	f8da 3000 	ldr.w	r3, [sl]
 800547e:	d046      	beq.n	800550e <_scanf_float+0x38a>
 8005480:	1d1a      	adds	r2, r3, #4
 8005482:	f8ca 2000 	str.w	r2, [sl]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	e9c3 8900 	strd	r8, r9, [r3]
 800548c:	68e3      	ldr	r3, [r4, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60e3      	str	r3, [r4, #12]
 8005492:	e6bf      	b.n	8005214 <_scanf_float+0x90>
 8005494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005498:	4632      	mov	r2, r6
 800549a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800549e:	4638      	mov	r0, r7
 80054a0:	4798      	blx	r3
 80054a2:	6923      	ldr	r3, [r4, #16]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	6123      	str	r3, [r4, #16]
 80054a8:	e7a7      	b.n	80053fa <_scanf_float+0x276>
 80054aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ae:	4632      	mov	r2, r6
 80054b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80054b4:	4638      	mov	r0, r7
 80054b6:	4798      	blx	r3
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	4545      	cmp	r5, r8
 80054c0:	d8f3      	bhi.n	80054aa <_scanf_float+0x326>
 80054c2:	e6a6      	b.n	8005212 <_scanf_float+0x8e>
 80054c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054c8:	4632      	mov	r2, r6
 80054ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80054ce:	4638      	mov	r0, r7
 80054d0:	4798      	blx	r3
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	4545      	cmp	r5, r8
 80054da:	d8f3      	bhi.n	80054c4 <_scanf_float+0x340>
 80054dc:	e699      	b.n	8005212 <_scanf_float+0x8e>
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0c0      	beq.n	8005466 <_scanf_float+0x2e2>
 80054e4:	9904      	ldr	r1, [sp, #16]
 80054e6:	230a      	movs	r3, #10
 80054e8:	4632      	mov	r2, r6
 80054ea:	3101      	adds	r1, #1
 80054ec:	4638      	mov	r0, r7
 80054ee:	f000 fefb 	bl	80062e8 <_strtol_r>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	9d04      	ldr	r5, [sp, #16]
 80054f6:	1ac2      	subs	r2, r0, r3
 80054f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80054fc:	429d      	cmp	r5, r3
 80054fe:	bf28      	it	cs
 8005500:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005504:	490e      	ldr	r1, [pc, #56]	; (8005540 <_scanf_float+0x3bc>)
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f820 	bl	800554c <siprintf>
 800550c:	e7ab      	b.n	8005466 <_scanf_float+0x2e2>
 800550e:	1d1f      	adds	r7, r3, #4
 8005510:	f015 0504 	ands.w	r5, r5, #4
 8005514:	f8ca 7000 	str.w	r7, [sl]
 8005518:	d1b5      	bne.n	8005486 <_scanf_float+0x302>
 800551a:	681f      	ldr	r7, [r3, #0]
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	f7fb fa74 	bl	8000a0c <__aeabi_dcmpun>
 8005524:	b120      	cbz	r0, 8005530 <_scanf_float+0x3ac>
 8005526:	4628      	mov	r0, r5
 8005528:	f000 f80c 	bl	8005544 <nanf>
 800552c:	6038      	str	r0, [r7, #0]
 800552e:	e7ad      	b.n	800548c <_scanf_float+0x308>
 8005530:	4640      	mov	r0, r8
 8005532:	4649      	mov	r1, r9
 8005534:	f7fb fac8 	bl	8000ac8 <__aeabi_d2f>
 8005538:	e7f8      	b.n	800552c <_scanf_float+0x3a8>
 800553a:	2600      	movs	r6, #0
 800553c:	e66a      	b.n	8005214 <_scanf_float+0x90>
 800553e:	bf00      	nop
 8005540:	0800928c 	.word	0x0800928c

08005544 <nanf>:
 8005544:	4800      	ldr	r0, [pc, #0]	; (8005548 <nanf+0x4>)
 8005546:	4770      	bx	lr
 8005548:	7fc00000 	.word	0x7fc00000

0800554c <siprintf>:
 800554c:	b40e      	push	{r1, r2, r3}
 800554e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005552:	b500      	push	{lr}
 8005554:	b09c      	sub	sp, #112	; 0x70
 8005556:	ab1d      	add	r3, sp, #116	; 0x74
 8005558:	9002      	str	r0, [sp, #8]
 800555a:	9006      	str	r0, [sp, #24]
 800555c:	9107      	str	r1, [sp, #28]
 800555e:	9104      	str	r1, [sp, #16]
 8005560:	4808      	ldr	r0, [pc, #32]	; (8005584 <siprintf+0x38>)
 8005562:	4909      	ldr	r1, [pc, #36]	; (8005588 <siprintf+0x3c>)
 8005564:	f853 2b04 	ldr.w	r2, [r3], #4
 8005568:	9105      	str	r1, [sp, #20]
 800556a:	6800      	ldr	r0, [r0, #0]
 800556c:	a902      	add	r1, sp, #8
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	f002 fd84 	bl	800807c <_svfiprintf_r>
 8005574:	2200      	movs	r2, #0
 8005576:	9b02      	ldr	r3, [sp, #8]
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	b01c      	add	sp, #112	; 0x70
 800557c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005580:	b003      	add	sp, #12
 8005582:	4770      	bx	lr
 8005584:	20000010 	.word	0x20000010
 8005588:	ffff0208 	.word	0xffff0208

0800558c <sulp>:
 800558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	460f      	mov	r7, r1
 8005592:	4690      	mov	r8, r2
 8005594:	f002 fb36 	bl	8007c04 <__ulp>
 8005598:	4604      	mov	r4, r0
 800559a:	460d      	mov	r5, r1
 800559c:	f1b8 0f00 	cmp.w	r8, #0
 80055a0:	d011      	beq.n	80055c6 <sulp+0x3a>
 80055a2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80055a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dd0b      	ble.n	80055c6 <sulp+0x3a>
 80055ae:	2400      	movs	r4, #0
 80055b0:	051b      	lsls	r3, r3, #20
 80055b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80055b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80055ba:	4622      	mov	r2, r4
 80055bc:	462b      	mov	r3, r5
 80055be:	f7fa ff8b 	bl	80004d8 <__aeabi_dmul>
 80055c2:	4604      	mov	r4, r0
 80055c4:	460d      	mov	r5, r1
 80055c6:	4620      	mov	r0, r4
 80055c8:	4629      	mov	r1, r5
 80055ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080055d0 <_strtod_l>:
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	461f      	mov	r7, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	b0a1      	sub	sp, #132	; 0x84
 80055da:	4683      	mov	fp, r0
 80055dc:	4638      	mov	r0, r7
 80055de:	460e      	mov	r6, r1
 80055e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80055e2:	931c      	str	r3, [sp, #112]	; 0x70
 80055e4:	f001 ffff 	bl	80075e6 <__localeconv_l>
 80055e8:	4680      	mov	r8, r0
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	f7fa fdb0 	bl	8000150 <strlen>
 80055f0:	f04f 0900 	mov.w	r9, #0
 80055f4:	4604      	mov	r4, r0
 80055f6:	f04f 0a00 	mov.w	sl, #0
 80055fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80055fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055fe:	781a      	ldrb	r2, [r3, #0]
 8005600:	2a0d      	cmp	r2, #13
 8005602:	d832      	bhi.n	800566a <_strtod_l+0x9a>
 8005604:	2a09      	cmp	r2, #9
 8005606:	d236      	bcs.n	8005676 <_strtod_l+0xa6>
 8005608:	2a00      	cmp	r2, #0
 800560a:	d03e      	beq.n	800568a <_strtod_l+0xba>
 800560c:	2300      	movs	r3, #0
 800560e:	930d      	str	r3, [sp, #52]	; 0x34
 8005610:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005612:	782b      	ldrb	r3, [r5, #0]
 8005614:	2b30      	cmp	r3, #48	; 0x30
 8005616:	f040 80ac 	bne.w	8005772 <_strtod_l+0x1a2>
 800561a:	786b      	ldrb	r3, [r5, #1]
 800561c:	2b58      	cmp	r3, #88	; 0x58
 800561e:	d001      	beq.n	8005624 <_strtod_l+0x54>
 8005620:	2b78      	cmp	r3, #120	; 0x78
 8005622:	d167      	bne.n	80056f4 <_strtod_l+0x124>
 8005624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005626:	9702      	str	r7, [sp, #8]
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	ab1c      	add	r3, sp, #112	; 0x70
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	4a89      	ldr	r2, [pc, #548]	; (8005854 <_strtod_l+0x284>)
 8005630:	ab1d      	add	r3, sp, #116	; 0x74
 8005632:	a91b      	add	r1, sp, #108	; 0x6c
 8005634:	4658      	mov	r0, fp
 8005636:	f001 fcfb 	bl	8007030 <__gethex>
 800563a:	f010 0407 	ands.w	r4, r0, #7
 800563e:	4606      	mov	r6, r0
 8005640:	d005      	beq.n	800564e <_strtod_l+0x7e>
 8005642:	2c06      	cmp	r4, #6
 8005644:	d12b      	bne.n	800569e <_strtod_l+0xce>
 8005646:	2300      	movs	r3, #0
 8005648:	3501      	adds	r5, #1
 800564a:	951b      	str	r5, [sp, #108]	; 0x6c
 800564c:	930d      	str	r3, [sp, #52]	; 0x34
 800564e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 85a6 	bne.w	80061a2 <_strtod_l+0xbd2>
 8005656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005658:	b1e3      	cbz	r3, 8005694 <_strtod_l+0xc4>
 800565a:	464a      	mov	r2, r9
 800565c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	b021      	add	sp, #132	; 0x84
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	2a2b      	cmp	r2, #43	; 0x2b
 800566c:	d015      	beq.n	800569a <_strtod_l+0xca>
 800566e:	2a2d      	cmp	r2, #45	; 0x2d
 8005670:	d004      	beq.n	800567c <_strtod_l+0xac>
 8005672:	2a20      	cmp	r2, #32
 8005674:	d1ca      	bne.n	800560c <_strtod_l+0x3c>
 8005676:	3301      	adds	r3, #1
 8005678:	931b      	str	r3, [sp, #108]	; 0x6c
 800567a:	e7bf      	b.n	80055fc <_strtod_l+0x2c>
 800567c:	2201      	movs	r2, #1
 800567e:	920d      	str	r2, [sp, #52]	; 0x34
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	921b      	str	r2, [sp, #108]	; 0x6c
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1c2      	bne.n	8005610 <_strtod_l+0x40>
 800568a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800568c:	961b      	str	r6, [sp, #108]	; 0x6c
 800568e:	2b00      	cmp	r3, #0
 8005690:	f040 8585 	bne.w	800619e <_strtod_l+0xbce>
 8005694:	464a      	mov	r2, r9
 8005696:	4653      	mov	r3, sl
 8005698:	e7e2      	b.n	8005660 <_strtod_l+0x90>
 800569a:	2200      	movs	r2, #0
 800569c:	e7ef      	b.n	800567e <_strtod_l+0xae>
 800569e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80056a0:	b13a      	cbz	r2, 80056b2 <_strtod_l+0xe2>
 80056a2:	2135      	movs	r1, #53	; 0x35
 80056a4:	a81e      	add	r0, sp, #120	; 0x78
 80056a6:	f002 fba0 	bl	8007dea <__copybits>
 80056aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80056ac:	4658      	mov	r0, fp
 80056ae:	f002 f812 	bl	80076d6 <_Bfree>
 80056b2:	3c01      	subs	r4, #1
 80056b4:	2c04      	cmp	r4, #4
 80056b6:	d806      	bhi.n	80056c6 <_strtod_l+0xf6>
 80056b8:	e8df f004 	tbb	[pc, r4]
 80056bc:	1714030a 	.word	0x1714030a
 80056c0:	0a          	.byte	0x0a
 80056c1:	00          	.byte	0x00
 80056c2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80056c6:	0731      	lsls	r1, r6, #28
 80056c8:	d5c1      	bpl.n	800564e <_strtod_l+0x7e>
 80056ca:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80056ce:	e7be      	b.n	800564e <_strtod_l+0x7e>
 80056d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80056d2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80056d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80056da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056de:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80056e2:	e7f0      	b.n	80056c6 <_strtod_l+0xf6>
 80056e4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005858 <_strtod_l+0x288>
 80056e8:	e7ed      	b.n	80056c6 <_strtod_l+0xf6>
 80056ea:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80056ee:	f04f 39ff 	mov.w	r9, #4294967295
 80056f2:	e7e8      	b.n	80056c6 <_strtod_l+0xf6>
 80056f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b30      	cmp	r3, #48	; 0x30
 80056fe:	d0f9      	beq.n	80056f4 <_strtod_l+0x124>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0a4      	beq.n	800564e <_strtod_l+0x7e>
 8005704:	2301      	movs	r3, #1
 8005706:	2500      	movs	r5, #0
 8005708:	220a      	movs	r2, #10
 800570a:	9307      	str	r3, [sp, #28]
 800570c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800570e:	9506      	str	r5, [sp, #24]
 8005710:	9308      	str	r3, [sp, #32]
 8005712:	9504      	str	r5, [sp, #16]
 8005714:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005716:	7807      	ldrb	r7, [r0, #0]
 8005718:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800571c:	b2d9      	uxtb	r1, r3
 800571e:	2909      	cmp	r1, #9
 8005720:	d929      	bls.n	8005776 <_strtod_l+0x1a6>
 8005722:	4622      	mov	r2, r4
 8005724:	f8d8 1000 	ldr.w	r1, [r8]
 8005728:	f002 fdb0 	bl	800828c <strncmp>
 800572c:	2800      	cmp	r0, #0
 800572e:	d031      	beq.n	8005794 <_strtod_l+0x1c4>
 8005730:	2000      	movs	r0, #0
 8005732:	463b      	mov	r3, r7
 8005734:	4602      	mov	r2, r0
 8005736:	9c04      	ldr	r4, [sp, #16]
 8005738:	9005      	str	r0, [sp, #20]
 800573a:	2b65      	cmp	r3, #101	; 0x65
 800573c:	d001      	beq.n	8005742 <_strtod_l+0x172>
 800573e:	2b45      	cmp	r3, #69	; 0x45
 8005740:	d114      	bne.n	800576c <_strtod_l+0x19c>
 8005742:	b924      	cbnz	r4, 800574e <_strtod_l+0x17e>
 8005744:	b910      	cbnz	r0, 800574c <_strtod_l+0x17c>
 8005746:	9b07      	ldr	r3, [sp, #28]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d09e      	beq.n	800568a <_strtod_l+0xba>
 800574c:	2400      	movs	r4, #0
 800574e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005750:	1c73      	adds	r3, r6, #1
 8005752:	931b      	str	r3, [sp, #108]	; 0x6c
 8005754:	7873      	ldrb	r3, [r6, #1]
 8005756:	2b2b      	cmp	r3, #43	; 0x2b
 8005758:	d078      	beq.n	800584c <_strtod_l+0x27c>
 800575a:	2b2d      	cmp	r3, #45	; 0x2d
 800575c:	d070      	beq.n	8005840 <_strtod_l+0x270>
 800575e:	f04f 0c00 	mov.w	ip, #0
 8005762:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005766:	2f09      	cmp	r7, #9
 8005768:	d97c      	bls.n	8005864 <_strtod_l+0x294>
 800576a:	961b      	str	r6, [sp, #108]	; 0x6c
 800576c:	f04f 0e00 	mov.w	lr, #0
 8005770:	e09a      	b.n	80058a8 <_strtod_l+0x2d8>
 8005772:	2300      	movs	r3, #0
 8005774:	e7c7      	b.n	8005706 <_strtod_l+0x136>
 8005776:	9904      	ldr	r1, [sp, #16]
 8005778:	3001      	adds	r0, #1
 800577a:	2908      	cmp	r1, #8
 800577c:	bfd7      	itett	le
 800577e:	9906      	ldrle	r1, [sp, #24]
 8005780:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005784:	fb02 3301 	mlale	r3, r2, r1, r3
 8005788:	9306      	strle	r3, [sp, #24]
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	901b      	str	r0, [sp, #108]	; 0x6c
 800578e:	3301      	adds	r3, #1
 8005790:	9304      	str	r3, [sp, #16]
 8005792:	e7bf      	b.n	8005714 <_strtod_l+0x144>
 8005794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005796:	191a      	adds	r2, r3, r4
 8005798:	921b      	str	r2, [sp, #108]	; 0x6c
 800579a:	9a04      	ldr	r2, [sp, #16]
 800579c:	5d1b      	ldrb	r3, [r3, r4]
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d037      	beq.n	8005812 <_strtod_l+0x242>
 80057a2:	4602      	mov	r2, r0
 80057a4:	9c04      	ldr	r4, [sp, #16]
 80057a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80057aa:	2909      	cmp	r1, #9
 80057ac:	d913      	bls.n	80057d6 <_strtod_l+0x206>
 80057ae:	2101      	movs	r1, #1
 80057b0:	9105      	str	r1, [sp, #20]
 80057b2:	e7c2      	b.n	800573a <_strtod_l+0x16a>
 80057b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057b6:	3001      	adds	r0, #1
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	2b30      	cmp	r3, #48	; 0x30
 80057c0:	d0f8      	beq.n	80057b4 <_strtod_l+0x1e4>
 80057c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80057c6:	2a08      	cmp	r2, #8
 80057c8:	f200 84f0 	bhi.w	80061ac <_strtod_l+0xbdc>
 80057cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80057ce:	9208      	str	r2, [sp, #32]
 80057d0:	4602      	mov	r2, r0
 80057d2:	2000      	movs	r0, #0
 80057d4:	4604      	mov	r4, r0
 80057d6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80057da:	f100 0101 	add.w	r1, r0, #1
 80057de:	d012      	beq.n	8005806 <_strtod_l+0x236>
 80057e0:	440a      	add	r2, r1
 80057e2:	270a      	movs	r7, #10
 80057e4:	4621      	mov	r1, r4
 80057e6:	eb00 0c04 	add.w	ip, r0, r4
 80057ea:	458c      	cmp	ip, r1
 80057ec:	d113      	bne.n	8005816 <_strtod_l+0x246>
 80057ee:	1821      	adds	r1, r4, r0
 80057f0:	2908      	cmp	r1, #8
 80057f2:	f104 0401 	add.w	r4, r4, #1
 80057f6:	4404      	add	r4, r0
 80057f8:	dc19      	bgt.n	800582e <_strtod_l+0x25e>
 80057fa:	210a      	movs	r1, #10
 80057fc:	9b06      	ldr	r3, [sp, #24]
 80057fe:	fb01 e303 	mla	r3, r1, r3, lr
 8005802:	9306      	str	r3, [sp, #24]
 8005804:	2100      	movs	r1, #0
 8005806:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005808:	1c58      	adds	r0, r3, #1
 800580a:	901b      	str	r0, [sp, #108]	; 0x6c
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	4608      	mov	r0, r1
 8005810:	e7c9      	b.n	80057a6 <_strtod_l+0x1d6>
 8005812:	9804      	ldr	r0, [sp, #16]
 8005814:	e7d3      	b.n	80057be <_strtod_l+0x1ee>
 8005816:	2908      	cmp	r1, #8
 8005818:	f101 0101 	add.w	r1, r1, #1
 800581c:	dc03      	bgt.n	8005826 <_strtod_l+0x256>
 800581e:	9b06      	ldr	r3, [sp, #24]
 8005820:	437b      	muls	r3, r7
 8005822:	9306      	str	r3, [sp, #24]
 8005824:	e7e1      	b.n	80057ea <_strtod_l+0x21a>
 8005826:	2910      	cmp	r1, #16
 8005828:	bfd8      	it	le
 800582a:	437d      	mulle	r5, r7
 800582c:	e7dd      	b.n	80057ea <_strtod_l+0x21a>
 800582e:	2c10      	cmp	r4, #16
 8005830:	bfdc      	itt	le
 8005832:	210a      	movle	r1, #10
 8005834:	fb01 e505 	mlale	r5, r1, r5, lr
 8005838:	e7e4      	b.n	8005804 <_strtod_l+0x234>
 800583a:	2301      	movs	r3, #1
 800583c:	9305      	str	r3, [sp, #20]
 800583e:	e781      	b.n	8005744 <_strtod_l+0x174>
 8005840:	f04f 0c01 	mov.w	ip, #1
 8005844:	1cb3      	adds	r3, r6, #2
 8005846:	931b      	str	r3, [sp, #108]	; 0x6c
 8005848:	78b3      	ldrb	r3, [r6, #2]
 800584a:	e78a      	b.n	8005762 <_strtod_l+0x192>
 800584c:	f04f 0c00 	mov.w	ip, #0
 8005850:	e7f8      	b.n	8005844 <_strtod_l+0x274>
 8005852:	bf00      	nop
 8005854:	08009294 	.word	0x08009294
 8005858:	7ff00000 	.word	0x7ff00000
 800585c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800585e:	1c5f      	adds	r7, r3, #1
 8005860:	971b      	str	r7, [sp, #108]	; 0x6c
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	2b30      	cmp	r3, #48	; 0x30
 8005866:	d0f9      	beq.n	800585c <_strtod_l+0x28c>
 8005868:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800586c:	2f08      	cmp	r7, #8
 800586e:	f63f af7d 	bhi.w	800576c <_strtod_l+0x19c>
 8005872:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005876:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005878:	9309      	str	r3, [sp, #36]	; 0x24
 800587a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800587c:	1c5f      	adds	r7, r3, #1
 800587e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005886:	f1b8 0f09 	cmp.w	r8, #9
 800588a:	d937      	bls.n	80058fc <_strtod_l+0x32c>
 800588c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800588e:	1a7f      	subs	r7, r7, r1
 8005890:	2f08      	cmp	r7, #8
 8005892:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005896:	dc37      	bgt.n	8005908 <_strtod_l+0x338>
 8005898:	45be      	cmp	lr, r7
 800589a:	bfa8      	it	ge
 800589c:	46be      	movge	lr, r7
 800589e:	f1bc 0f00 	cmp.w	ip, #0
 80058a2:	d001      	beq.n	80058a8 <_strtod_l+0x2d8>
 80058a4:	f1ce 0e00 	rsb	lr, lr, #0
 80058a8:	2c00      	cmp	r4, #0
 80058aa:	d151      	bne.n	8005950 <_strtod_l+0x380>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f47f aece 	bne.w	800564e <_strtod_l+0x7e>
 80058b2:	9a07      	ldr	r2, [sp, #28]
 80058b4:	2a00      	cmp	r2, #0
 80058b6:	f47f aeca 	bne.w	800564e <_strtod_l+0x7e>
 80058ba:	9a05      	ldr	r2, [sp, #20]
 80058bc:	2a00      	cmp	r2, #0
 80058be:	f47f aee4 	bne.w	800568a <_strtod_l+0xba>
 80058c2:	2b4e      	cmp	r3, #78	; 0x4e
 80058c4:	d027      	beq.n	8005916 <_strtod_l+0x346>
 80058c6:	dc21      	bgt.n	800590c <_strtod_l+0x33c>
 80058c8:	2b49      	cmp	r3, #73	; 0x49
 80058ca:	f47f aede 	bne.w	800568a <_strtod_l+0xba>
 80058ce:	49a4      	ldr	r1, [pc, #656]	; (8005b60 <_strtod_l+0x590>)
 80058d0:	a81b      	add	r0, sp, #108	; 0x6c
 80058d2:	f001 fde1 	bl	8007498 <__match>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f43f aed7 	beq.w	800568a <_strtod_l+0xba>
 80058dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058de:	49a1      	ldr	r1, [pc, #644]	; (8005b64 <_strtod_l+0x594>)
 80058e0:	3b01      	subs	r3, #1
 80058e2:	a81b      	add	r0, sp, #108	; 0x6c
 80058e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80058e6:	f001 fdd7 	bl	8007498 <__match>
 80058ea:	b910      	cbnz	r0, 80058f2 <_strtod_l+0x322>
 80058ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058ee:	3301      	adds	r3, #1
 80058f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80058f2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005b78 <_strtod_l+0x5a8>
 80058f6:	f04f 0900 	mov.w	r9, #0
 80058fa:	e6a8      	b.n	800564e <_strtod_l+0x7e>
 80058fc:	210a      	movs	r1, #10
 80058fe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005902:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005906:	e7b8      	b.n	800587a <_strtod_l+0x2aa>
 8005908:	46be      	mov	lr, r7
 800590a:	e7c8      	b.n	800589e <_strtod_l+0x2ce>
 800590c:	2b69      	cmp	r3, #105	; 0x69
 800590e:	d0de      	beq.n	80058ce <_strtod_l+0x2fe>
 8005910:	2b6e      	cmp	r3, #110	; 0x6e
 8005912:	f47f aeba 	bne.w	800568a <_strtod_l+0xba>
 8005916:	4994      	ldr	r1, [pc, #592]	; (8005b68 <_strtod_l+0x598>)
 8005918:	a81b      	add	r0, sp, #108	; 0x6c
 800591a:	f001 fdbd 	bl	8007498 <__match>
 800591e:	2800      	cmp	r0, #0
 8005920:	f43f aeb3 	beq.w	800568a <_strtod_l+0xba>
 8005924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b28      	cmp	r3, #40	; 0x28
 800592a:	d10e      	bne.n	800594a <_strtod_l+0x37a>
 800592c:	aa1e      	add	r2, sp, #120	; 0x78
 800592e:	498f      	ldr	r1, [pc, #572]	; (8005b6c <_strtod_l+0x59c>)
 8005930:	a81b      	add	r0, sp, #108	; 0x6c
 8005932:	f001 fdc5 	bl	80074c0 <__hexnan>
 8005936:	2805      	cmp	r0, #5
 8005938:	d107      	bne.n	800594a <_strtod_l+0x37a>
 800593a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800593c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005940:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005944:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005948:	e681      	b.n	800564e <_strtod_l+0x7e>
 800594a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005b80 <_strtod_l+0x5b0>
 800594e:	e7d2      	b.n	80058f6 <_strtod_l+0x326>
 8005950:	ebae 0302 	sub.w	r3, lr, r2
 8005954:	9307      	str	r3, [sp, #28]
 8005956:	9b04      	ldr	r3, [sp, #16]
 8005958:	9806      	ldr	r0, [sp, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf08      	it	eq
 800595e:	4623      	moveq	r3, r4
 8005960:	2c10      	cmp	r4, #16
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	46a0      	mov	r8, r4
 8005966:	bfa8      	it	ge
 8005968:	f04f 0810 	movge.w	r8, #16
 800596c:	f7fa fd3a 	bl	80003e4 <__aeabi_ui2d>
 8005970:	2c09      	cmp	r4, #9
 8005972:	4681      	mov	r9, r0
 8005974:	468a      	mov	sl, r1
 8005976:	dc13      	bgt.n	80059a0 <_strtod_l+0x3d0>
 8005978:	9b07      	ldr	r3, [sp, #28]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f43f ae67 	beq.w	800564e <_strtod_l+0x7e>
 8005980:	9b07      	ldr	r3, [sp, #28]
 8005982:	dd7e      	ble.n	8005a82 <_strtod_l+0x4b2>
 8005984:	2b16      	cmp	r3, #22
 8005986:	dc65      	bgt.n	8005a54 <_strtod_l+0x484>
 8005988:	4a79      	ldr	r2, [pc, #484]	; (8005b70 <_strtod_l+0x5a0>)
 800598a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800598e:	464a      	mov	r2, r9
 8005990:	e9de 0100 	ldrd	r0, r1, [lr]
 8005994:	4653      	mov	r3, sl
 8005996:	f7fa fd9f 	bl	80004d8 <__aeabi_dmul>
 800599a:	4681      	mov	r9, r0
 800599c:	468a      	mov	sl, r1
 800599e:	e656      	b.n	800564e <_strtod_l+0x7e>
 80059a0:	4b73      	ldr	r3, [pc, #460]	; (8005b70 <_strtod_l+0x5a0>)
 80059a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80059aa:	f7fa fd95 	bl	80004d8 <__aeabi_dmul>
 80059ae:	4606      	mov	r6, r0
 80059b0:	4628      	mov	r0, r5
 80059b2:	460f      	mov	r7, r1
 80059b4:	f7fa fd16 	bl	80003e4 <__aeabi_ui2d>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4630      	mov	r0, r6
 80059be:	4639      	mov	r1, r7
 80059c0:	f7fa fbd4 	bl	800016c <__adddf3>
 80059c4:	2c0f      	cmp	r4, #15
 80059c6:	4681      	mov	r9, r0
 80059c8:	468a      	mov	sl, r1
 80059ca:	ddd5      	ble.n	8005978 <_strtod_l+0x3a8>
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	eba4 0808 	sub.w	r8, r4, r8
 80059d2:	4498      	add	r8, r3
 80059d4:	f1b8 0f00 	cmp.w	r8, #0
 80059d8:	f340 809a 	ble.w	8005b10 <_strtod_l+0x540>
 80059dc:	f018 030f 	ands.w	r3, r8, #15
 80059e0:	d00a      	beq.n	80059f8 <_strtod_l+0x428>
 80059e2:	4963      	ldr	r1, [pc, #396]	; (8005b70 <_strtod_l+0x5a0>)
 80059e4:	464a      	mov	r2, r9
 80059e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ee:	4653      	mov	r3, sl
 80059f0:	f7fa fd72 	bl	80004d8 <__aeabi_dmul>
 80059f4:	4681      	mov	r9, r0
 80059f6:	468a      	mov	sl, r1
 80059f8:	f038 080f 	bics.w	r8, r8, #15
 80059fc:	d077      	beq.n	8005aee <_strtod_l+0x51e>
 80059fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005a02:	dd4b      	ble.n	8005a9c <_strtod_l+0x4cc>
 8005a04:	f04f 0800 	mov.w	r8, #0
 8005a08:	f8cd 8010 	str.w	r8, [sp, #16]
 8005a0c:	f8cd 8020 	str.w	r8, [sp, #32]
 8005a10:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a14:	2322      	movs	r3, #34	; 0x22
 8005a16:	f04f 0900 	mov.w	r9, #0
 8005a1a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005b78 <_strtod_l+0x5a8>
 8005a1e:	f8cb 3000 	str.w	r3, [fp]
 8005a22:	9b08      	ldr	r3, [sp, #32]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f43f ae12 	beq.w	800564e <_strtod_l+0x7e>
 8005a2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a2c:	4658      	mov	r0, fp
 8005a2e:	f001 fe52 	bl	80076d6 <_Bfree>
 8005a32:	9906      	ldr	r1, [sp, #24]
 8005a34:	4658      	mov	r0, fp
 8005a36:	f001 fe4e 	bl	80076d6 <_Bfree>
 8005a3a:	9904      	ldr	r1, [sp, #16]
 8005a3c:	4658      	mov	r0, fp
 8005a3e:	f001 fe4a 	bl	80076d6 <_Bfree>
 8005a42:	9908      	ldr	r1, [sp, #32]
 8005a44:	4658      	mov	r0, fp
 8005a46:	f001 fe46 	bl	80076d6 <_Bfree>
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	4658      	mov	r0, fp
 8005a4e:	f001 fe42 	bl	80076d6 <_Bfree>
 8005a52:	e5fc      	b.n	800564e <_strtod_l+0x7e>
 8005a54:	9a07      	ldr	r2, [sp, #28]
 8005a56:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	dbb6      	blt.n	80059cc <_strtod_l+0x3fc>
 8005a5e:	4d44      	ldr	r5, [pc, #272]	; (8005b70 <_strtod_l+0x5a0>)
 8005a60:	f1c4 040f 	rsb	r4, r4, #15
 8005a64:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005a68:	464a      	mov	r2, r9
 8005a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a6e:	4653      	mov	r3, sl
 8005a70:	f7fa fd32 	bl	80004d8 <__aeabi_dmul>
 8005a74:	9b07      	ldr	r3, [sp, #28]
 8005a76:	1b1c      	subs	r4, r3, r4
 8005a78:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005a7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a80:	e789      	b.n	8005996 <_strtod_l+0x3c6>
 8005a82:	f113 0f16 	cmn.w	r3, #22
 8005a86:	dba1      	blt.n	80059cc <_strtod_l+0x3fc>
 8005a88:	4a39      	ldr	r2, [pc, #228]	; (8005b70 <_strtod_l+0x5a0>)
 8005a8a:	4648      	mov	r0, r9
 8005a8c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005a90:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005a94:	4651      	mov	r1, sl
 8005a96:	f7fa fe49 	bl	800072c <__aeabi_ddiv>
 8005a9a:	e77e      	b.n	800599a <_strtod_l+0x3ca>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4648      	mov	r0, r9
 8005aa0:	4651      	mov	r1, sl
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	4e33      	ldr	r6, [pc, #204]	; (8005b74 <_strtod_l+0x5a4>)
 8005aa6:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005aaa:	f1b8 0f01 	cmp.w	r8, #1
 8005aae:	dc21      	bgt.n	8005af4 <_strtod_l+0x524>
 8005ab0:	b10b      	cbz	r3, 8005ab6 <_strtod_l+0x4e6>
 8005ab2:	4681      	mov	r9, r0
 8005ab4:	468a      	mov	sl, r1
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <_strtod_l+0x5a4>)
 8005ab8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005abc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005ac0:	464a      	mov	r2, r9
 8005ac2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005ac6:	4653      	mov	r3, sl
 8005ac8:	f7fa fd06 	bl	80004d8 <__aeabi_dmul>
 8005acc:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <_strtod_l+0x5a8>)
 8005ace:	460a      	mov	r2, r1
 8005ad0:	400b      	ands	r3, r1
 8005ad2:	492a      	ldr	r1, [pc, #168]	; (8005b7c <_strtod_l+0x5ac>)
 8005ad4:	4681      	mov	r9, r0
 8005ad6:	428b      	cmp	r3, r1
 8005ad8:	d894      	bhi.n	8005a04 <_strtod_l+0x434>
 8005ada:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ade:	428b      	cmp	r3, r1
 8005ae0:	bf86      	itte	hi
 8005ae2:	f04f 39ff 	movhi.w	r9, #4294967295
 8005ae6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005b84 <_strtod_l+0x5b4>
 8005aea:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005aee:	2300      	movs	r3, #0
 8005af0:	9305      	str	r3, [sp, #20]
 8005af2:	e07b      	b.n	8005bec <_strtod_l+0x61c>
 8005af4:	f018 0f01 	tst.w	r8, #1
 8005af8:	d006      	beq.n	8005b08 <_strtod_l+0x538>
 8005afa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	f7fa fce9 	bl	80004d8 <__aeabi_dmul>
 8005b06:	2301      	movs	r3, #1
 8005b08:	3501      	adds	r5, #1
 8005b0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b0e:	e7cc      	b.n	8005aaa <_strtod_l+0x4da>
 8005b10:	d0ed      	beq.n	8005aee <_strtod_l+0x51e>
 8005b12:	f1c8 0800 	rsb	r8, r8, #0
 8005b16:	f018 020f 	ands.w	r2, r8, #15
 8005b1a:	d00a      	beq.n	8005b32 <_strtod_l+0x562>
 8005b1c:	4b14      	ldr	r3, [pc, #80]	; (8005b70 <_strtod_l+0x5a0>)
 8005b1e:	4648      	mov	r0, r9
 8005b20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b24:	4651      	mov	r1, sl
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f7fa fdff 	bl	800072c <__aeabi_ddiv>
 8005b2e:	4681      	mov	r9, r0
 8005b30:	468a      	mov	sl, r1
 8005b32:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005b36:	d0da      	beq.n	8005aee <_strtod_l+0x51e>
 8005b38:	f1b8 0f1f 	cmp.w	r8, #31
 8005b3c:	dd24      	ble.n	8005b88 <_strtod_l+0x5b8>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b46:	f8cd 8020 	str.w	r8, [sp, #32]
 8005b4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b4e:	2322      	movs	r3, #34	; 0x22
 8005b50:	f04f 0900 	mov.w	r9, #0
 8005b54:	f04f 0a00 	mov.w	sl, #0
 8005b58:	f8cb 3000 	str.w	r3, [fp]
 8005b5c:	e761      	b.n	8005a22 <_strtod_l+0x452>
 8005b5e:	bf00      	nop
 8005b60:	0800925d 	.word	0x0800925d
 8005b64:	080092eb 	.word	0x080092eb
 8005b68:	08009265 	.word	0x08009265
 8005b6c:	080092a8 	.word	0x080092a8
 8005b70:	08009328 	.word	0x08009328
 8005b74:	08009300 	.word	0x08009300
 8005b78:	7ff00000 	.word	0x7ff00000
 8005b7c:	7ca00000 	.word	0x7ca00000
 8005b80:	fff80000 	.word	0xfff80000
 8005b84:	7fefffff 	.word	0x7fefffff
 8005b88:	f018 0310 	ands.w	r3, r8, #16
 8005b8c:	bf18      	it	ne
 8005b8e:	236a      	movne	r3, #106	; 0x6a
 8005b90:	4648      	mov	r0, r9
 8005b92:	9305      	str	r3, [sp, #20]
 8005b94:	4651      	mov	r1, sl
 8005b96:	2300      	movs	r3, #0
 8005b98:	4da1      	ldr	r5, [pc, #644]	; (8005e20 <_strtod_l+0x850>)
 8005b9a:	f1b8 0f00 	cmp.w	r8, #0
 8005b9e:	f300 8113 	bgt.w	8005dc8 <_strtod_l+0x7f8>
 8005ba2:	b10b      	cbz	r3, 8005ba8 <_strtod_l+0x5d8>
 8005ba4:	4681      	mov	r9, r0
 8005ba6:	468a      	mov	sl, r1
 8005ba8:	9b05      	ldr	r3, [sp, #20]
 8005baa:	b1bb      	cbz	r3, 8005bdc <_strtod_l+0x60c>
 8005bac:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005bb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	4651      	mov	r1, sl
 8005bb8:	dd10      	ble.n	8005bdc <_strtod_l+0x60c>
 8005bba:	2b1f      	cmp	r3, #31
 8005bbc:	f340 8110 	ble.w	8005de0 <_strtod_l+0x810>
 8005bc0:	2b34      	cmp	r3, #52	; 0x34
 8005bc2:	bfd8      	it	le
 8005bc4:	f04f 32ff 	movle.w	r2, #4294967295
 8005bc8:	f04f 0900 	mov.w	r9, #0
 8005bcc:	bfcf      	iteee	gt
 8005bce:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005bd2:	3b20      	suble	r3, #32
 8005bd4:	fa02 f303 	lslle.w	r3, r2, r3
 8005bd8:	ea03 0a01 	andle.w	sl, r3, r1
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	4648      	mov	r0, r9
 8005be2:	4651      	mov	r1, sl
 8005be4:	f7fa fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d1a8      	bne.n	8005b3e <_strtod_l+0x56e>
 8005bec:	9b06      	ldr	r3, [sp, #24]
 8005bee:	9a04      	ldr	r2, [sp, #16]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	9908      	ldr	r1, [sp, #32]
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	4658      	mov	r0, fp
 8005bf8:	f001 fdbf 	bl	800777a <__s2b>
 8005bfc:	9008      	str	r0, [sp, #32]
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f43f af00 	beq.w	8005a04 <_strtod_l+0x434>
 8005c04:	9a07      	ldr	r2, [sp, #28]
 8005c06:	9b07      	ldr	r3, [sp, #28]
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	f1c3 0300 	rsb	r3, r3, #0
 8005c0e:	bfa8      	it	ge
 8005c10:	2300      	movge	r3, #0
 8005c12:	f04f 0800 	mov.w	r8, #0
 8005c16:	930e      	str	r3, [sp, #56]	; 0x38
 8005c18:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005c1c:	9316      	str	r3, [sp, #88]	; 0x58
 8005c1e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c22:	9b08      	ldr	r3, [sp, #32]
 8005c24:	4658      	mov	r0, fp
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	f001 fd21 	bl	800766e <_Balloc>
 8005c2c:	9006      	str	r0, [sp, #24]
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	f43f aef0 	beq.w	8005a14 <_strtod_l+0x444>
 8005c34:	9b08      	ldr	r3, [sp, #32]
 8005c36:	300c      	adds	r0, #12
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	f103 010c 	add.w	r1, r3, #12
 8005c3e:	3202      	adds	r2, #2
 8005c40:	0092      	lsls	r2, r2, #2
 8005c42:	f001 fd09 	bl	8007658 <memcpy>
 8005c46:	ab1e      	add	r3, sp, #120	; 0x78
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	464a      	mov	r2, r9
 8005c50:	4653      	mov	r3, sl
 8005c52:	4658      	mov	r0, fp
 8005c54:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005c58:	f002 f84a 	bl	8007cf0 <__d2b>
 8005c5c:	901c      	str	r0, [sp, #112]	; 0x70
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f43f aed8 	beq.w	8005a14 <_strtod_l+0x444>
 8005c64:	2101      	movs	r1, #1
 8005c66:	4658      	mov	r0, fp
 8005c68:	f001 fe13 	bl	8007892 <__i2b>
 8005c6c:	9004      	str	r0, [sp, #16]
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f43f aecf 	beq.w	8005a14 <_strtod_l+0x444>
 8005c76:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005c78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	bfab      	itete	ge
 8005c7e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005c80:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005c82:	18ee      	addge	r6, r5, r3
 8005c84:	1b5c      	sublt	r4, r3, r5
 8005c86:	9b05      	ldr	r3, [sp, #20]
 8005c88:	bfa8      	it	ge
 8005c8a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005c8c:	eba5 0503 	sub.w	r5, r5, r3
 8005c90:	4415      	add	r5, r2
 8005c92:	4b64      	ldr	r3, [pc, #400]	; (8005e24 <_strtod_l+0x854>)
 8005c94:	f105 35ff 	add.w	r5, r5, #4294967295
 8005c98:	bfb8      	it	lt
 8005c9a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005c9c:	429d      	cmp	r5, r3
 8005c9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ca2:	f280 80af 	bge.w	8005e04 <_strtod_l+0x834>
 8005ca6:	1b5b      	subs	r3, r3, r5
 8005ca8:	2b1f      	cmp	r3, #31
 8005caa:	eba2 0203 	sub.w	r2, r2, r3
 8005cae:	f04f 0701 	mov.w	r7, #1
 8005cb2:	f300 809c 	bgt.w	8005dee <_strtod_l+0x81e>
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	fa07 f303 	lsl.w	r3, r7, r3
 8005cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cbe:	18b7      	adds	r7, r6, r2
 8005cc0:	9b05      	ldr	r3, [sp, #20]
 8005cc2:	42be      	cmp	r6, r7
 8005cc4:	4414      	add	r4, r2
 8005cc6:	441c      	add	r4, r3
 8005cc8:	4633      	mov	r3, r6
 8005cca:	bfa8      	it	ge
 8005ccc:	463b      	movge	r3, r7
 8005cce:	42a3      	cmp	r3, r4
 8005cd0:	bfa8      	it	ge
 8005cd2:	4623      	movge	r3, r4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bfc2      	ittt	gt
 8005cd8:	1aff      	subgt	r7, r7, r3
 8005cda:	1ae4      	subgt	r4, r4, r3
 8005cdc:	1af6      	subgt	r6, r6, r3
 8005cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce0:	b1bb      	cbz	r3, 8005d12 <_strtod_l+0x742>
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	9904      	ldr	r1, [sp, #16]
 8005ce6:	4658      	mov	r0, fp
 8005ce8:	f001 fe72 	bl	80079d0 <__pow5mult>
 8005cec:	9004      	str	r0, [sp, #16]
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f43f ae90 	beq.w	8005a14 <_strtod_l+0x444>
 8005cf4:	4601      	mov	r1, r0
 8005cf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005cf8:	4658      	mov	r0, fp
 8005cfa:	f001 fdd3 	bl	80078a4 <__multiply>
 8005cfe:	9009      	str	r0, [sp, #36]	; 0x24
 8005d00:	2800      	cmp	r0, #0
 8005d02:	f43f ae87 	beq.w	8005a14 <_strtod_l+0x444>
 8005d06:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d08:	4658      	mov	r0, fp
 8005d0a:	f001 fce4 	bl	80076d6 <_Bfree>
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	931c      	str	r3, [sp, #112]	; 0x70
 8005d12:	2f00      	cmp	r7, #0
 8005d14:	dc7a      	bgt.n	8005e0c <_strtod_l+0x83c>
 8005d16:	9b07      	ldr	r3, [sp, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dd08      	ble.n	8005d2e <_strtod_l+0x75e>
 8005d1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d1e:	9906      	ldr	r1, [sp, #24]
 8005d20:	4658      	mov	r0, fp
 8005d22:	f001 fe55 	bl	80079d0 <__pow5mult>
 8005d26:	9006      	str	r0, [sp, #24]
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	f43f ae73 	beq.w	8005a14 <_strtod_l+0x444>
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	dd08      	ble.n	8005d44 <_strtod_l+0x774>
 8005d32:	4622      	mov	r2, r4
 8005d34:	9906      	ldr	r1, [sp, #24]
 8005d36:	4658      	mov	r0, fp
 8005d38:	f001 fe98 	bl	8007a6c <__lshift>
 8005d3c:	9006      	str	r0, [sp, #24]
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f43f ae68 	beq.w	8005a14 <_strtod_l+0x444>
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	dd08      	ble.n	8005d5a <_strtod_l+0x78a>
 8005d48:	4632      	mov	r2, r6
 8005d4a:	9904      	ldr	r1, [sp, #16]
 8005d4c:	4658      	mov	r0, fp
 8005d4e:	f001 fe8d 	bl	8007a6c <__lshift>
 8005d52:	9004      	str	r0, [sp, #16]
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f43f ae5d 	beq.w	8005a14 <_strtod_l+0x444>
 8005d5a:	9a06      	ldr	r2, [sp, #24]
 8005d5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d5e:	4658      	mov	r0, fp
 8005d60:	f001 fef2 	bl	8007b48 <__mdiff>
 8005d64:	4680      	mov	r8, r0
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f43f ae54 	beq.w	8005a14 <_strtod_l+0x444>
 8005d6c:	2400      	movs	r4, #0
 8005d6e:	68c3      	ldr	r3, [r0, #12]
 8005d70:	9904      	ldr	r1, [sp, #16]
 8005d72:	60c4      	str	r4, [r0, #12]
 8005d74:	930c      	str	r3, [sp, #48]	; 0x30
 8005d76:	f001 fecd 	bl	8007b14 <__mcmp>
 8005d7a:	42a0      	cmp	r0, r4
 8005d7c:	da54      	bge.n	8005e28 <_strtod_l+0x858>
 8005d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d80:	b9f3      	cbnz	r3, 8005dc0 <_strtod_l+0x7f0>
 8005d82:	f1b9 0f00 	cmp.w	r9, #0
 8005d86:	d11b      	bne.n	8005dc0 <_strtod_l+0x7f0>
 8005d88:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005d8c:	b9c3      	cbnz	r3, 8005dc0 <_strtod_l+0x7f0>
 8005d8e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005d92:	0d1b      	lsrs	r3, r3, #20
 8005d94:	051b      	lsls	r3, r3, #20
 8005d96:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d9a:	d911      	bls.n	8005dc0 <_strtod_l+0x7f0>
 8005d9c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005da0:	b91b      	cbnz	r3, 8005daa <_strtod_l+0x7da>
 8005da2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	dd0a      	ble.n	8005dc0 <_strtod_l+0x7f0>
 8005daa:	4641      	mov	r1, r8
 8005dac:	2201      	movs	r2, #1
 8005dae:	4658      	mov	r0, fp
 8005db0:	f001 fe5c 	bl	8007a6c <__lshift>
 8005db4:	9904      	ldr	r1, [sp, #16]
 8005db6:	4680      	mov	r8, r0
 8005db8:	f001 feac 	bl	8007b14 <__mcmp>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	dc68      	bgt.n	8005e92 <_strtod_l+0x8c2>
 8005dc0:	9b05      	ldr	r3, [sp, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d172      	bne.n	8005eac <_strtod_l+0x8dc>
 8005dc6:	e630      	b.n	8005a2a <_strtod_l+0x45a>
 8005dc8:	f018 0f01 	tst.w	r8, #1
 8005dcc:	d004      	beq.n	8005dd8 <_strtod_l+0x808>
 8005dce:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dd2:	f7fa fb81 	bl	80004d8 <__aeabi_dmul>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ddc:	3508      	adds	r5, #8
 8005dde:	e6dc      	b.n	8005b9a <_strtod_l+0x5ca>
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	ea03 0909 	and.w	r9, r3, r9
 8005dec:	e6f6      	b.n	8005bdc <_strtod_l+0x60c>
 8005dee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005df2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005df6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005dfa:	35e2      	adds	r5, #226	; 0xe2
 8005dfc:	fa07 f505 	lsl.w	r5, r7, r5
 8005e00:	970f      	str	r7, [sp, #60]	; 0x3c
 8005e02:	e75c      	b.n	8005cbe <_strtod_l+0x6ee>
 8005e04:	2301      	movs	r3, #1
 8005e06:	2500      	movs	r5, #0
 8005e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e0a:	e758      	b.n	8005cbe <_strtod_l+0x6ee>
 8005e0c:	463a      	mov	r2, r7
 8005e0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e10:	4658      	mov	r0, fp
 8005e12:	f001 fe2b 	bl	8007a6c <__lshift>
 8005e16:	901c      	str	r0, [sp, #112]	; 0x70
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	f47f af7c 	bne.w	8005d16 <_strtod_l+0x746>
 8005e1e:	e5f9      	b.n	8005a14 <_strtod_l+0x444>
 8005e20:	080092c0 	.word	0x080092c0
 8005e24:	fffffc02 	.word	0xfffffc02
 8005e28:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005e2c:	f040 8089 	bne.w	8005f42 <_strtod_l+0x972>
 8005e30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e32:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005e36:	b342      	cbz	r2, 8005e8a <_strtod_l+0x8ba>
 8005e38:	4aaf      	ldr	r2, [pc, #700]	; (80060f8 <_strtod_l+0xb28>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d156      	bne.n	8005eec <_strtod_l+0x91c>
 8005e3e:	9b05      	ldr	r3, [sp, #20]
 8005e40:	4648      	mov	r0, r9
 8005e42:	b1eb      	cbz	r3, 8005e80 <_strtod_l+0x8b0>
 8005e44:	4653      	mov	r3, sl
 8005e46:	4aad      	ldr	r2, [pc, #692]	; (80060fc <_strtod_l+0xb2c>)
 8005e48:	f04f 31ff 	mov.w	r1, #4294967295
 8005e4c:	401a      	ands	r2, r3
 8005e4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005e52:	d818      	bhi.n	8005e86 <_strtod_l+0x8b6>
 8005e54:	0d12      	lsrs	r2, r2, #20
 8005e56:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5e:	4298      	cmp	r0, r3
 8005e60:	d144      	bne.n	8005eec <_strtod_l+0x91c>
 8005e62:	4ba7      	ldr	r3, [pc, #668]	; (8006100 <_strtod_l+0xb30>)
 8005e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d102      	bne.n	8005e70 <_strtod_l+0x8a0>
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	f43f add2 	beq.w	8005a14 <_strtod_l+0x444>
 8005e70:	4ba2      	ldr	r3, [pc, #648]	; (80060fc <_strtod_l+0xb2c>)
 8005e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e74:	f04f 0900 	mov.w	r9, #0
 8005e78:	401a      	ands	r2, r3
 8005e7a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005e7e:	e79f      	b.n	8005dc0 <_strtod_l+0x7f0>
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295
 8005e84:	e7eb      	b.n	8005e5e <_strtod_l+0x88e>
 8005e86:	460b      	mov	r3, r1
 8005e88:	e7e9      	b.n	8005e5e <_strtod_l+0x88e>
 8005e8a:	bb7b      	cbnz	r3, 8005eec <_strtod_l+0x91c>
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	d12c      	bne.n	8005eec <_strtod_l+0x91c>
 8005e92:	9905      	ldr	r1, [sp, #20]
 8005e94:	4653      	mov	r3, sl
 8005e96:	4a99      	ldr	r2, [pc, #612]	; (80060fc <_strtod_l+0xb2c>)
 8005e98:	b1f1      	cbz	r1, 8005ed8 <_strtod_l+0x908>
 8005e9a:	ea02 010a 	and.w	r1, r2, sl
 8005e9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005ea2:	dc19      	bgt.n	8005ed8 <_strtod_l+0x908>
 8005ea4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005ea8:	f77f ae51 	ble.w	8005b4e <_strtod_l+0x57e>
 8005eac:	2300      	movs	r3, #0
 8005eae:	4a95      	ldr	r2, [pc, #596]	; (8006104 <_strtod_l+0xb34>)
 8005eb0:	4648      	mov	r0, r9
 8005eb2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005ebc:	f7fa fb0c 	bl	80004d8 <__aeabi_dmul>
 8005ec0:	4681      	mov	r9, r0
 8005ec2:	468a      	mov	sl, r1
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	f47f adb0 	bne.w	8005a2a <_strtod_l+0x45a>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f47f adad 	bne.w	8005a2a <_strtod_l+0x45a>
 8005ed0:	2322      	movs	r3, #34	; 0x22
 8005ed2:	f8cb 3000 	str.w	r3, [fp]
 8005ed6:	e5a8      	b.n	8005a2a <_strtod_l+0x45a>
 8005ed8:	4013      	ands	r3, r2
 8005eda:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005ede:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005ee2:	f04f 39ff 	mov.w	r9, #4294967295
 8005ee6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005eea:	e769      	b.n	8005dc0 <_strtod_l+0x7f0>
 8005eec:	b19d      	cbz	r5, 8005f16 <_strtod_l+0x946>
 8005eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef0:	421d      	tst	r5, r3
 8005ef2:	f43f af65 	beq.w	8005dc0 <_strtod_l+0x7f0>
 8005ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ef8:	9a05      	ldr	r2, [sp, #20]
 8005efa:	4648      	mov	r0, r9
 8005efc:	4651      	mov	r1, sl
 8005efe:	b173      	cbz	r3, 8005f1e <_strtod_l+0x94e>
 8005f00:	f7ff fb44 	bl	800558c <sulp>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f0c:	f7fa f92e 	bl	800016c <__adddf3>
 8005f10:	4681      	mov	r9, r0
 8005f12:	468a      	mov	sl, r1
 8005f14:	e754      	b.n	8005dc0 <_strtod_l+0x7f0>
 8005f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f18:	ea13 0f09 	tst.w	r3, r9
 8005f1c:	e7e9      	b.n	8005ef2 <_strtod_l+0x922>
 8005f1e:	f7ff fb35 	bl	800558c <sulp>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f2a:	f7fa f91d 	bl	8000168 <__aeabi_dsub>
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2300      	movs	r3, #0
 8005f32:	4681      	mov	r9, r0
 8005f34:	468a      	mov	sl, r1
 8005f36:	f7fa fd37 	bl	80009a8 <__aeabi_dcmpeq>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f47f ae07 	bne.w	8005b4e <_strtod_l+0x57e>
 8005f40:	e73e      	b.n	8005dc0 <_strtod_l+0x7f0>
 8005f42:	9904      	ldr	r1, [sp, #16]
 8005f44:	4640      	mov	r0, r8
 8005f46:	f001 ff22 	bl	8007d8e <__ratio>
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f50:	4606      	mov	r6, r0
 8005f52:	460f      	mov	r7, r1
 8005f54:	f7fa fd3c 	bl	80009d0 <__aeabi_dcmple>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d075      	beq.n	8006048 <_strtod_l+0xa78>
 8005f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d047      	beq.n	8005ff2 <_strtod_l+0xa22>
 8005f62:	2600      	movs	r6, #0
 8005f64:	4f68      	ldr	r7, [pc, #416]	; (8006108 <_strtod_l+0xb38>)
 8005f66:	4d68      	ldr	r5, [pc, #416]	; (8006108 <_strtod_l+0xb38>)
 8005f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	0d1b      	lsrs	r3, r3, #20
 8005f70:	051b      	lsls	r3, r3, #20
 8005f72:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f76:	4b65      	ldr	r3, [pc, #404]	; (800610c <_strtod_l+0xb3c>)
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	f040 80cf 	bne.w	800611c <_strtod_l+0xb4c>
 8005f7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f82:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f88:	4648      	mov	r0, r9
 8005f8a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005f8e:	4651      	mov	r1, sl
 8005f90:	f001 fe38 	bl	8007c04 <__ulp>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4630      	mov	r0, r6
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa fa9c 	bl	80004d8 <__aeabi_dmul>
 8005fa0:	464a      	mov	r2, r9
 8005fa2:	4653      	mov	r3, sl
 8005fa4:	f7fa f8e2 	bl	800016c <__adddf3>
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4954      	ldr	r1, [pc, #336]	; (80060fc <_strtod_l+0xb2c>)
 8005fac:	4a58      	ldr	r2, [pc, #352]	; (8006110 <_strtod_l+0xb40>)
 8005fae:	4019      	ands	r1, r3
 8005fb0:	4291      	cmp	r1, r2
 8005fb2:	4681      	mov	r9, r0
 8005fb4:	d95e      	bls.n	8006074 <_strtod_l+0xaa4>
 8005fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fb8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d103      	bne.n	8005fc8 <_strtod_l+0x9f8>
 8005fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	f43f ad26 	beq.w	8005a14 <_strtod_l+0x444>
 8005fc8:	f04f 39ff 	mov.w	r9, #4294967295
 8005fcc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006100 <_strtod_l+0xb30>
 8005fd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fd2:	4658      	mov	r0, fp
 8005fd4:	f001 fb7f 	bl	80076d6 <_Bfree>
 8005fd8:	9906      	ldr	r1, [sp, #24]
 8005fda:	4658      	mov	r0, fp
 8005fdc:	f001 fb7b 	bl	80076d6 <_Bfree>
 8005fe0:	9904      	ldr	r1, [sp, #16]
 8005fe2:	4658      	mov	r0, fp
 8005fe4:	f001 fb77 	bl	80076d6 <_Bfree>
 8005fe8:	4641      	mov	r1, r8
 8005fea:	4658      	mov	r0, fp
 8005fec:	f001 fb73 	bl	80076d6 <_Bfree>
 8005ff0:	e617      	b.n	8005c22 <_strtod_l+0x652>
 8005ff2:	f1b9 0f00 	cmp.w	r9, #0
 8005ff6:	d119      	bne.n	800602c <_strtod_l+0xa5c>
 8005ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ffe:	b9e3      	cbnz	r3, 800603a <_strtod_l+0xa6a>
 8006000:	2200      	movs	r2, #0
 8006002:	4b41      	ldr	r3, [pc, #260]	; (8006108 <_strtod_l+0xb38>)
 8006004:	4630      	mov	r0, r6
 8006006:	4639      	mov	r1, r7
 8006008:	f7fa fcd8 	bl	80009bc <__aeabi_dcmplt>
 800600c:	b9c8      	cbnz	r0, 8006042 <_strtod_l+0xa72>
 800600e:	2200      	movs	r2, #0
 8006010:	4b40      	ldr	r3, [pc, #256]	; (8006114 <_strtod_l+0xb44>)
 8006012:	4630      	mov	r0, r6
 8006014:	4639      	mov	r1, r7
 8006016:	f7fa fa5f 	bl	80004d8 <__aeabi_dmul>
 800601a:	4604      	mov	r4, r0
 800601c:	460d      	mov	r5, r1
 800601e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006022:	9418      	str	r4, [sp, #96]	; 0x60
 8006024:	9319      	str	r3, [sp, #100]	; 0x64
 8006026:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800602a:	e79d      	b.n	8005f68 <_strtod_l+0x998>
 800602c:	f1b9 0f01 	cmp.w	r9, #1
 8006030:	d103      	bne.n	800603a <_strtod_l+0xa6a>
 8006032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	f43f ad8a 	beq.w	8005b4e <_strtod_l+0x57e>
 800603a:	2600      	movs	r6, #0
 800603c:	4f36      	ldr	r7, [pc, #216]	; (8006118 <_strtod_l+0xb48>)
 800603e:	2400      	movs	r4, #0
 8006040:	e791      	b.n	8005f66 <_strtod_l+0x996>
 8006042:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006044:	4d33      	ldr	r5, [pc, #204]	; (8006114 <_strtod_l+0xb44>)
 8006046:	e7ea      	b.n	800601e <_strtod_l+0xa4e>
 8006048:	4b32      	ldr	r3, [pc, #200]	; (8006114 <_strtod_l+0xb44>)
 800604a:	2200      	movs	r2, #0
 800604c:	4630      	mov	r0, r6
 800604e:	4639      	mov	r1, r7
 8006050:	f7fa fa42 	bl	80004d8 <__aeabi_dmul>
 8006054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006056:	4604      	mov	r4, r0
 8006058:	460d      	mov	r5, r1
 800605a:	b933      	cbnz	r3, 800606a <_strtod_l+0xa9a>
 800605c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006060:	9010      	str	r0, [sp, #64]	; 0x40
 8006062:	9311      	str	r3, [sp, #68]	; 0x44
 8006064:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006068:	e77e      	b.n	8005f68 <_strtod_l+0x998>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006072:	e7f7      	b.n	8006064 <_strtod_l+0xa94>
 8006074:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006078:	9b05      	ldr	r3, [sp, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1a8      	bne.n	8005fd0 <_strtod_l+0xa00>
 800607e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006082:	0d1b      	lsrs	r3, r3, #20
 8006084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006086:	051b      	lsls	r3, r3, #20
 8006088:	429a      	cmp	r2, r3
 800608a:	4656      	mov	r6, sl
 800608c:	d1a0      	bne.n	8005fd0 <_strtod_l+0xa00>
 800608e:	4629      	mov	r1, r5
 8006090:	4620      	mov	r0, r4
 8006092:	f7fa fcd1 	bl	8000a38 <__aeabi_d2iz>
 8006096:	f7fa f9b5 	bl	8000404 <__aeabi_i2d>
 800609a:	460b      	mov	r3, r1
 800609c:	4602      	mov	r2, r0
 800609e:	4629      	mov	r1, r5
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7fa f861 	bl	8000168 <__aeabi_dsub>
 80060a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060a8:	4604      	mov	r4, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	b933      	cbnz	r3, 80060bc <_strtod_l+0xaec>
 80060ae:	f1b9 0f00 	cmp.w	r9, #0
 80060b2:	d103      	bne.n	80060bc <_strtod_l+0xaec>
 80060b4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80060b8:	2e00      	cmp	r6, #0
 80060ba:	d06a      	beq.n	8006192 <_strtod_l+0xbc2>
 80060bc:	a30a      	add	r3, pc, #40	; (adr r3, 80060e8 <_strtod_l+0xb18>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	4620      	mov	r0, r4
 80060c4:	4629      	mov	r1, r5
 80060c6:	f7fa fc79 	bl	80009bc <__aeabi_dcmplt>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	f47f acad 	bne.w	8005a2a <_strtod_l+0x45a>
 80060d0:	a307      	add	r3, pc, #28	; (adr r3, 80060f0 <_strtod_l+0xb20>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa fc8d 	bl	80009f8 <__aeabi_dcmpgt>
 80060de:	2800      	cmp	r0, #0
 80060e0:	f43f af76 	beq.w	8005fd0 <_strtod_l+0xa00>
 80060e4:	e4a1      	b.n	8005a2a <_strtod_l+0x45a>
 80060e6:	bf00      	nop
 80060e8:	94a03595 	.word	0x94a03595
 80060ec:	3fdfffff 	.word	0x3fdfffff
 80060f0:	35afe535 	.word	0x35afe535
 80060f4:	3fe00000 	.word	0x3fe00000
 80060f8:	000fffff 	.word	0x000fffff
 80060fc:	7ff00000 	.word	0x7ff00000
 8006100:	7fefffff 	.word	0x7fefffff
 8006104:	39500000 	.word	0x39500000
 8006108:	3ff00000 	.word	0x3ff00000
 800610c:	7fe00000 	.word	0x7fe00000
 8006110:	7c9fffff 	.word	0x7c9fffff
 8006114:	3fe00000 	.word	0x3fe00000
 8006118:	bff00000 	.word	0xbff00000
 800611c:	9b05      	ldr	r3, [sp, #20]
 800611e:	b313      	cbz	r3, 8006166 <_strtod_l+0xb96>
 8006120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006122:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006126:	d81e      	bhi.n	8006166 <_strtod_l+0xb96>
 8006128:	a325      	add	r3, pc, #148	; (adr r3, 80061c0 <_strtod_l+0xbf0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	f7fa fc4d 	bl	80009d0 <__aeabi_dcmple>
 8006136:	b190      	cbz	r0, 800615e <_strtod_l+0xb8e>
 8006138:	4629      	mov	r1, r5
 800613a:	4620      	mov	r0, r4
 800613c:	f7fa fca4 	bl	8000a88 <__aeabi_d2uiz>
 8006140:	2800      	cmp	r0, #0
 8006142:	bf08      	it	eq
 8006144:	2001      	moveq	r0, #1
 8006146:	f7fa f94d 	bl	80003e4 <__aeabi_ui2d>
 800614a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	b9d3      	cbnz	r3, 8006188 <_strtod_l+0xbb8>
 8006152:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006156:	9012      	str	r0, [sp, #72]	; 0x48
 8006158:	9313      	str	r3, [sp, #76]	; 0x4c
 800615a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800615e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006160:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006164:	1a9f      	subs	r7, r3, r2
 8006166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800616a:	f001 fd4b 	bl	8007c04 <__ulp>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4630      	mov	r0, r6
 8006174:	4639      	mov	r1, r7
 8006176:	f7fa f9af 	bl	80004d8 <__aeabi_dmul>
 800617a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800617e:	f7f9 fff5 	bl	800016c <__adddf3>
 8006182:	4681      	mov	r9, r0
 8006184:	468a      	mov	sl, r1
 8006186:	e777      	b.n	8006078 <_strtod_l+0xaa8>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006190:	e7e3      	b.n	800615a <_strtod_l+0xb8a>
 8006192:	a30d      	add	r3, pc, #52	; (adr r3, 80061c8 <_strtod_l+0xbf8>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f7fa fc10 	bl	80009bc <__aeabi_dcmplt>
 800619c:	e79f      	b.n	80060de <_strtod_l+0xb0e>
 800619e:	2300      	movs	r3, #0
 80061a0:	930d      	str	r3, [sp, #52]	; 0x34
 80061a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	f7ff ba55 	b.w	8005656 <_strtod_l+0x86>
 80061ac:	2b65      	cmp	r3, #101	; 0x65
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f43f ab42 	beq.w	800583a <_strtod_l+0x26a>
 80061b6:	2101      	movs	r1, #1
 80061b8:	4614      	mov	r4, r2
 80061ba:	9105      	str	r1, [sp, #20]
 80061bc:	f7ff babf 	b.w	800573e <_strtod_l+0x16e>
 80061c0:	ffc00000 	.word	0xffc00000
 80061c4:	41dfffff 	.word	0x41dfffff
 80061c8:	94a03595 	.word	0x94a03595
 80061cc:	3fcfffff 	.word	0x3fcfffff

080061d0 <_strtod_r>:
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <_strtod_r+0x18>)
 80061d2:	b410      	push	{r4}
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4c05      	ldr	r4, [pc, #20]	; (80061ec <_strtod_r+0x1c>)
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf08      	it	eq
 80061de:	4623      	moveq	r3, r4
 80061e0:	bc10      	pop	{r4}
 80061e2:	f7ff b9f5 	b.w	80055d0 <_strtod_l>
 80061e6:	bf00      	nop
 80061e8:	20000010 	.word	0x20000010
 80061ec:	20000074 	.word	0x20000074

080061f0 <_strtol_l.isra.0>:
 80061f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	4680      	mov	r8, r0
 80061f6:	4689      	mov	r9, r1
 80061f8:	4692      	mov	sl, r2
 80061fa:	461e      	mov	r6, r3
 80061fc:	460f      	mov	r7, r1
 80061fe:	463d      	mov	r5, r7
 8006200:	9808      	ldr	r0, [sp, #32]
 8006202:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006206:	f001 f9eb 	bl	80075e0 <__locale_ctype_ptr_l>
 800620a:	4420      	add	r0, r4
 800620c:	7843      	ldrb	r3, [r0, #1]
 800620e:	f013 0308 	ands.w	r3, r3, #8
 8006212:	d132      	bne.n	800627a <_strtol_l.isra.0+0x8a>
 8006214:	2c2d      	cmp	r4, #45	; 0x2d
 8006216:	d132      	bne.n	800627e <_strtol_l.isra.0+0x8e>
 8006218:	2201      	movs	r2, #1
 800621a:	787c      	ldrb	r4, [r7, #1]
 800621c:	1cbd      	adds	r5, r7, #2
 800621e:	2e00      	cmp	r6, #0
 8006220:	d05d      	beq.n	80062de <_strtol_l.isra.0+0xee>
 8006222:	2e10      	cmp	r6, #16
 8006224:	d109      	bne.n	800623a <_strtol_l.isra.0+0x4a>
 8006226:	2c30      	cmp	r4, #48	; 0x30
 8006228:	d107      	bne.n	800623a <_strtol_l.isra.0+0x4a>
 800622a:	782b      	ldrb	r3, [r5, #0]
 800622c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006230:	2b58      	cmp	r3, #88	; 0x58
 8006232:	d14f      	bne.n	80062d4 <_strtol_l.isra.0+0xe4>
 8006234:	2610      	movs	r6, #16
 8006236:	786c      	ldrb	r4, [r5, #1]
 8006238:	3502      	adds	r5, #2
 800623a:	2a00      	cmp	r2, #0
 800623c:	bf14      	ite	ne
 800623e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006242:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006246:	2700      	movs	r7, #0
 8006248:	fbb1 fcf6 	udiv	ip, r1, r6
 800624c:	4638      	mov	r0, r7
 800624e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006252:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006256:	2b09      	cmp	r3, #9
 8006258:	d817      	bhi.n	800628a <_strtol_l.isra.0+0x9a>
 800625a:	461c      	mov	r4, r3
 800625c:	42a6      	cmp	r6, r4
 800625e:	dd23      	ble.n	80062a8 <_strtol_l.isra.0+0xb8>
 8006260:	1c7b      	adds	r3, r7, #1
 8006262:	d007      	beq.n	8006274 <_strtol_l.isra.0+0x84>
 8006264:	4584      	cmp	ip, r0
 8006266:	d31c      	bcc.n	80062a2 <_strtol_l.isra.0+0xb2>
 8006268:	d101      	bne.n	800626e <_strtol_l.isra.0+0x7e>
 800626a:	45a6      	cmp	lr, r4
 800626c:	db19      	blt.n	80062a2 <_strtol_l.isra.0+0xb2>
 800626e:	2701      	movs	r7, #1
 8006270:	fb00 4006 	mla	r0, r0, r6, r4
 8006274:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006278:	e7eb      	b.n	8006252 <_strtol_l.isra.0+0x62>
 800627a:	462f      	mov	r7, r5
 800627c:	e7bf      	b.n	80061fe <_strtol_l.isra.0+0xe>
 800627e:	2c2b      	cmp	r4, #43	; 0x2b
 8006280:	bf04      	itt	eq
 8006282:	1cbd      	addeq	r5, r7, #2
 8006284:	787c      	ldrbeq	r4, [r7, #1]
 8006286:	461a      	mov	r2, r3
 8006288:	e7c9      	b.n	800621e <_strtol_l.isra.0+0x2e>
 800628a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800628e:	2b19      	cmp	r3, #25
 8006290:	d801      	bhi.n	8006296 <_strtol_l.isra.0+0xa6>
 8006292:	3c37      	subs	r4, #55	; 0x37
 8006294:	e7e2      	b.n	800625c <_strtol_l.isra.0+0x6c>
 8006296:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800629a:	2b19      	cmp	r3, #25
 800629c:	d804      	bhi.n	80062a8 <_strtol_l.isra.0+0xb8>
 800629e:	3c57      	subs	r4, #87	; 0x57
 80062a0:	e7dc      	b.n	800625c <_strtol_l.isra.0+0x6c>
 80062a2:	f04f 37ff 	mov.w	r7, #4294967295
 80062a6:	e7e5      	b.n	8006274 <_strtol_l.isra.0+0x84>
 80062a8:	1c7b      	adds	r3, r7, #1
 80062aa:	d108      	bne.n	80062be <_strtol_l.isra.0+0xce>
 80062ac:	2322      	movs	r3, #34	; 0x22
 80062ae:	4608      	mov	r0, r1
 80062b0:	f8c8 3000 	str.w	r3, [r8]
 80062b4:	f1ba 0f00 	cmp.w	sl, #0
 80062b8:	d107      	bne.n	80062ca <_strtol_l.isra.0+0xda>
 80062ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062be:	b102      	cbz	r2, 80062c2 <_strtol_l.isra.0+0xd2>
 80062c0:	4240      	negs	r0, r0
 80062c2:	f1ba 0f00 	cmp.w	sl, #0
 80062c6:	d0f8      	beq.n	80062ba <_strtol_l.isra.0+0xca>
 80062c8:	b10f      	cbz	r7, 80062ce <_strtol_l.isra.0+0xde>
 80062ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80062ce:	f8ca 9000 	str.w	r9, [sl]
 80062d2:	e7f2      	b.n	80062ba <_strtol_l.isra.0+0xca>
 80062d4:	2430      	movs	r4, #48	; 0x30
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d1af      	bne.n	800623a <_strtol_l.isra.0+0x4a>
 80062da:	2608      	movs	r6, #8
 80062dc:	e7ad      	b.n	800623a <_strtol_l.isra.0+0x4a>
 80062de:	2c30      	cmp	r4, #48	; 0x30
 80062e0:	d0a3      	beq.n	800622a <_strtol_l.isra.0+0x3a>
 80062e2:	260a      	movs	r6, #10
 80062e4:	e7a9      	b.n	800623a <_strtol_l.isra.0+0x4a>
	...

080062e8 <_strtol_r>:
 80062e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062ea:	4c06      	ldr	r4, [pc, #24]	; (8006304 <_strtol_r+0x1c>)
 80062ec:	4d06      	ldr	r5, [pc, #24]	; (8006308 <_strtol_r+0x20>)
 80062ee:	6824      	ldr	r4, [r4, #0]
 80062f0:	6a24      	ldr	r4, [r4, #32]
 80062f2:	2c00      	cmp	r4, #0
 80062f4:	bf08      	it	eq
 80062f6:	462c      	moveq	r4, r5
 80062f8:	9400      	str	r4, [sp, #0]
 80062fa:	f7ff ff79 	bl	80061f0 <_strtol_l.isra.0>
 80062fe:	b003      	add	sp, #12
 8006300:	bd30      	pop	{r4, r5, pc}
 8006302:	bf00      	nop
 8006304:	20000010 	.word	0x20000010
 8006308:	20000074 	.word	0x20000074

0800630c <quorem>:
 800630c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	6903      	ldr	r3, [r0, #16]
 8006312:	690c      	ldr	r4, [r1, #16]
 8006314:	4680      	mov	r8, r0
 8006316:	42a3      	cmp	r3, r4
 8006318:	f2c0 8084 	blt.w	8006424 <quorem+0x118>
 800631c:	3c01      	subs	r4, #1
 800631e:	f101 0714 	add.w	r7, r1, #20
 8006322:	f100 0614 	add.w	r6, r0, #20
 8006326:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800632a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800632e:	3501      	adds	r5, #1
 8006330:	fbb0 f5f5 	udiv	r5, r0, r5
 8006334:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006338:	eb06 030c 	add.w	r3, r6, ip
 800633c:	eb07 090c 	add.w	r9, r7, ip
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	b39d      	cbz	r5, 80063ac <quorem+0xa0>
 8006344:	f04f 0a00 	mov.w	sl, #0
 8006348:	4638      	mov	r0, r7
 800634a:	46b6      	mov	lr, r6
 800634c:	46d3      	mov	fp, sl
 800634e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006352:	b293      	uxth	r3, r2
 8006354:	fb05 a303 	mla	r3, r5, r3, sl
 8006358:	0c12      	lsrs	r2, r2, #16
 800635a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800635e:	fb05 a202 	mla	r2, r5, r2, sl
 8006362:	b29b      	uxth	r3, r3
 8006364:	ebab 0303 	sub.w	r3, fp, r3
 8006368:	f8de b000 	ldr.w	fp, [lr]
 800636c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006370:	fa1f fb8b 	uxth.w	fp, fp
 8006374:	445b      	add	r3, fp
 8006376:	fa1f fb82 	uxth.w	fp, r2
 800637a:	f8de 2000 	ldr.w	r2, [lr]
 800637e:	4581      	cmp	r9, r0
 8006380:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006388:	b29b      	uxth	r3, r3
 800638a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800638e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006392:	f84e 3b04 	str.w	r3, [lr], #4
 8006396:	d2da      	bcs.n	800634e <quorem+0x42>
 8006398:	f856 300c 	ldr.w	r3, [r6, ip]
 800639c:	b933      	cbnz	r3, 80063ac <quorem+0xa0>
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	429e      	cmp	r6, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	d331      	bcc.n	800640c <quorem+0x100>
 80063a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80063ac:	4640      	mov	r0, r8
 80063ae:	f001 fbb1 	bl	8007b14 <__mcmp>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	db26      	blt.n	8006404 <quorem+0xf8>
 80063b6:	4630      	mov	r0, r6
 80063b8:	f04f 0c00 	mov.w	ip, #0
 80063bc:	3501      	adds	r5, #1
 80063be:	f857 1b04 	ldr.w	r1, [r7], #4
 80063c2:	f8d0 e000 	ldr.w	lr, [r0]
 80063c6:	b28b      	uxth	r3, r1
 80063c8:	ebac 0303 	sub.w	r3, ip, r3
 80063cc:	fa1f f28e 	uxth.w	r2, lr
 80063d0:	4413      	add	r3, r2
 80063d2:	0c0a      	lsrs	r2, r1, #16
 80063d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063e2:	45b9      	cmp	r9, r7
 80063e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063e8:	f840 3b04 	str.w	r3, [r0], #4
 80063ec:	d2e7      	bcs.n	80063be <quorem+0xb2>
 80063ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80063f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80063f6:	b92a      	cbnz	r2, 8006404 <quorem+0xf8>
 80063f8:	3b04      	subs	r3, #4
 80063fa:	429e      	cmp	r6, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	d30b      	bcc.n	8006418 <quorem+0x10c>
 8006400:	f8c8 4010 	str.w	r4, [r8, #16]
 8006404:	4628      	mov	r0, r5
 8006406:	b003      	add	sp, #12
 8006408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	3b04      	subs	r3, #4
 8006410:	2a00      	cmp	r2, #0
 8006412:	d1c9      	bne.n	80063a8 <quorem+0x9c>
 8006414:	3c01      	subs	r4, #1
 8006416:	e7c4      	b.n	80063a2 <quorem+0x96>
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	3b04      	subs	r3, #4
 800641c:	2a00      	cmp	r2, #0
 800641e:	d1ef      	bne.n	8006400 <quorem+0xf4>
 8006420:	3c01      	subs	r4, #1
 8006422:	e7ea      	b.n	80063fa <quorem+0xee>
 8006424:	2000      	movs	r0, #0
 8006426:	e7ee      	b.n	8006406 <quorem+0xfa>

08006428 <_dtoa_r>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	4616      	mov	r6, r2
 800642e:	461f      	mov	r7, r3
 8006430:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006432:	b095      	sub	sp, #84	; 0x54
 8006434:	4604      	mov	r4, r0
 8006436:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800643a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800643e:	b93d      	cbnz	r5, 8006450 <_dtoa_r+0x28>
 8006440:	2010      	movs	r0, #16
 8006442:	f001 f8e1 	bl	8007608 <malloc>
 8006446:	6260      	str	r0, [r4, #36]	; 0x24
 8006448:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800644c:	6005      	str	r5, [r0, #0]
 800644e:	60c5      	str	r5, [r0, #12]
 8006450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	b151      	cbz	r1, 800646c <_dtoa_r+0x44>
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	2301      	movs	r3, #1
 800645a:	4093      	lsls	r3, r2
 800645c:	604a      	str	r2, [r1, #4]
 800645e:	608b      	str	r3, [r1, #8]
 8006460:	4620      	mov	r0, r4
 8006462:	f001 f938 	bl	80076d6 <_Bfree>
 8006466:	2200      	movs	r2, #0
 8006468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	1e3b      	subs	r3, r7, #0
 800646e:	bfaf      	iteee	ge
 8006470:	2300      	movge	r3, #0
 8006472:	2201      	movlt	r2, #1
 8006474:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006478:	9303      	strlt	r3, [sp, #12]
 800647a:	bfac      	ite	ge
 800647c:	f8c8 3000 	strge.w	r3, [r8]
 8006480:	f8c8 2000 	strlt.w	r2, [r8]
 8006484:	4bae      	ldr	r3, [pc, #696]	; (8006740 <_dtoa_r+0x318>)
 8006486:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800648a:	ea33 0308 	bics.w	r3, r3, r8
 800648e:	d11b      	bne.n	80064c8 <_dtoa_r+0xa0>
 8006490:	f242 730f 	movw	r3, #9999	; 0x270f
 8006494:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	9b02      	ldr	r3, [sp, #8]
 800649a:	b923      	cbnz	r3, 80064a6 <_dtoa_r+0x7e>
 800649c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f000 8545 	beq.w	8006f30 <_dtoa_r+0xb08>
 80064a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a8:	b953      	cbnz	r3, 80064c0 <_dtoa_r+0x98>
 80064aa:	4ba6      	ldr	r3, [pc, #664]	; (8006744 <_dtoa_r+0x31c>)
 80064ac:	e021      	b.n	80064f2 <_dtoa_r+0xca>
 80064ae:	4ba6      	ldr	r3, [pc, #664]	; (8006748 <_dtoa_r+0x320>)
 80064b0:	9306      	str	r3, [sp, #24]
 80064b2:	3308      	adds	r3, #8
 80064b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	9806      	ldr	r0, [sp, #24]
 80064ba:	b015      	add	sp, #84	; 0x54
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	4ba0      	ldr	r3, [pc, #640]	; (8006744 <_dtoa_r+0x31c>)
 80064c2:	9306      	str	r3, [sp, #24]
 80064c4:	3303      	adds	r3, #3
 80064c6:	e7f5      	b.n	80064b4 <_dtoa_r+0x8c>
 80064c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	4630      	mov	r0, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7fa fa68 	bl	80009a8 <__aeabi_dcmpeq>
 80064d8:	4682      	mov	sl, r0
 80064da:	b160      	cbz	r0, 80064f6 <_dtoa_r+0xce>
 80064dc:	2301      	movs	r3, #1
 80064de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 8520 	beq.w	8006f2a <_dtoa_r+0xb02>
 80064ea:	4b98      	ldr	r3, [pc, #608]	; (800674c <_dtoa_r+0x324>)
 80064ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	9306      	str	r3, [sp, #24]
 80064f4:	e7e0      	b.n	80064b8 <_dtoa_r+0x90>
 80064f6:	ab12      	add	r3, sp, #72	; 0x48
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	ab13      	add	r3, sp, #76	; 0x4c
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	4632      	mov	r2, r6
 8006500:	463b      	mov	r3, r7
 8006502:	4620      	mov	r0, r4
 8006504:	f001 fbf4 	bl	8007cf0 <__d2b>
 8006508:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800650c:	4683      	mov	fp, r0
 800650e:	2d00      	cmp	r5, #0
 8006510:	d07d      	beq.n	800660e <_dtoa_r+0x1e6>
 8006512:	46b0      	mov	r8, r6
 8006514:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006518:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800651c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006520:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006524:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006528:	2200      	movs	r2, #0
 800652a:	4b89      	ldr	r3, [pc, #548]	; (8006750 <_dtoa_r+0x328>)
 800652c:	4640      	mov	r0, r8
 800652e:	4649      	mov	r1, r9
 8006530:	f7f9 fe1a 	bl	8000168 <__aeabi_dsub>
 8006534:	a37c      	add	r3, pc, #496	; (adr r3, 8006728 <_dtoa_r+0x300>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7f9 ffcd 	bl	80004d8 <__aeabi_dmul>
 800653e:	a37c      	add	r3, pc, #496	; (adr r3, 8006730 <_dtoa_r+0x308>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7f9 fe12 	bl	800016c <__adddf3>
 8006548:	4606      	mov	r6, r0
 800654a:	4628      	mov	r0, r5
 800654c:	460f      	mov	r7, r1
 800654e:	f7f9 ff59 	bl	8000404 <__aeabi_i2d>
 8006552:	a379      	add	r3, pc, #484	; (adr r3, 8006738 <_dtoa_r+0x310>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7f9 ffbe 	bl	80004d8 <__aeabi_dmul>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7f9 fe02 	bl	800016c <__adddf3>
 8006568:	4606      	mov	r6, r0
 800656a:	460f      	mov	r7, r1
 800656c:	f7fa fa64 	bl	8000a38 <__aeabi_d2iz>
 8006570:	2200      	movs	r2, #0
 8006572:	4682      	mov	sl, r0
 8006574:	2300      	movs	r3, #0
 8006576:	4630      	mov	r0, r6
 8006578:	4639      	mov	r1, r7
 800657a:	f7fa fa1f 	bl	80009bc <__aeabi_dcmplt>
 800657e:	b148      	cbz	r0, 8006594 <_dtoa_r+0x16c>
 8006580:	4650      	mov	r0, sl
 8006582:	f7f9 ff3f 	bl	8000404 <__aeabi_i2d>
 8006586:	4632      	mov	r2, r6
 8006588:	463b      	mov	r3, r7
 800658a:	f7fa fa0d 	bl	80009a8 <__aeabi_dcmpeq>
 800658e:	b908      	cbnz	r0, 8006594 <_dtoa_r+0x16c>
 8006590:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006594:	f1ba 0f16 	cmp.w	sl, #22
 8006598:	d85a      	bhi.n	8006650 <_dtoa_r+0x228>
 800659a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800659e:	496d      	ldr	r1, [pc, #436]	; (8006754 <_dtoa_r+0x32c>)
 80065a0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80065a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065a8:	f7fa fa26 	bl	80009f8 <__aeabi_dcmpgt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d051      	beq.n	8006654 <_dtoa_r+0x22c>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065b6:	930d      	str	r3, [sp, #52]	; 0x34
 80065b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065ba:	1b5d      	subs	r5, r3, r5
 80065bc:	1e6b      	subs	r3, r5, #1
 80065be:	9307      	str	r3, [sp, #28]
 80065c0:	bf43      	ittte	mi
 80065c2:	2300      	movmi	r3, #0
 80065c4:	f1c5 0901 	rsbmi	r9, r5, #1
 80065c8:	9307      	strmi	r3, [sp, #28]
 80065ca:	f04f 0900 	movpl.w	r9, #0
 80065ce:	f1ba 0f00 	cmp.w	sl, #0
 80065d2:	db41      	blt.n	8006658 <_dtoa_r+0x230>
 80065d4:	9b07      	ldr	r3, [sp, #28]
 80065d6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80065da:	4453      	add	r3, sl
 80065dc:	9307      	str	r3, [sp, #28]
 80065de:	2300      	movs	r3, #0
 80065e0:	9308      	str	r3, [sp, #32]
 80065e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065e4:	2b09      	cmp	r3, #9
 80065e6:	f200 808f 	bhi.w	8006708 <_dtoa_r+0x2e0>
 80065ea:	2b05      	cmp	r3, #5
 80065ec:	bfc4      	itt	gt
 80065ee:	3b04      	subgt	r3, #4
 80065f0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80065f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065f4:	bfc8      	it	gt
 80065f6:	2500      	movgt	r5, #0
 80065f8:	f1a3 0302 	sub.w	r3, r3, #2
 80065fc:	bfd8      	it	le
 80065fe:	2501      	movle	r5, #1
 8006600:	2b03      	cmp	r3, #3
 8006602:	f200 808d 	bhi.w	8006720 <_dtoa_r+0x2f8>
 8006606:	e8df f003 	tbb	[pc, r3]
 800660a:	7d7b      	.short	0x7d7b
 800660c:	6f2f      	.short	0x6f2f
 800660e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006612:	441d      	add	r5, r3
 8006614:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006618:	2820      	cmp	r0, #32
 800661a:	dd13      	ble.n	8006644 <_dtoa_r+0x21c>
 800661c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	fa08 f800 	lsl.w	r8, r8, r0
 8006626:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800662a:	fa23 f000 	lsr.w	r0, r3, r0
 800662e:	ea48 0000 	orr.w	r0, r8, r0
 8006632:	f7f9 fed7 	bl	80003e4 <__aeabi_ui2d>
 8006636:	2301      	movs	r3, #1
 8006638:	4680      	mov	r8, r0
 800663a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800663e:	3d01      	subs	r5, #1
 8006640:	9310      	str	r3, [sp, #64]	; 0x40
 8006642:	e771      	b.n	8006528 <_dtoa_r+0x100>
 8006644:	9b02      	ldr	r3, [sp, #8]
 8006646:	f1c0 0020 	rsb	r0, r0, #32
 800664a:	fa03 f000 	lsl.w	r0, r3, r0
 800664e:	e7f0      	b.n	8006632 <_dtoa_r+0x20a>
 8006650:	2301      	movs	r3, #1
 8006652:	e7b0      	b.n	80065b6 <_dtoa_r+0x18e>
 8006654:	900d      	str	r0, [sp, #52]	; 0x34
 8006656:	e7af      	b.n	80065b8 <_dtoa_r+0x190>
 8006658:	f1ca 0300 	rsb	r3, sl, #0
 800665c:	9308      	str	r3, [sp, #32]
 800665e:	2300      	movs	r3, #0
 8006660:	eba9 090a 	sub.w	r9, r9, sl
 8006664:	930c      	str	r3, [sp, #48]	; 0x30
 8006666:	e7bc      	b.n	80065e2 <_dtoa_r+0x1ba>
 8006668:	2301      	movs	r3, #1
 800666a:	9309      	str	r3, [sp, #36]	; 0x24
 800666c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800666e:	2b00      	cmp	r3, #0
 8006670:	dd74      	ble.n	800675c <_dtoa_r+0x334>
 8006672:	4698      	mov	r8, r3
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	2200      	movs	r2, #0
 8006678:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800667a:	6072      	str	r2, [r6, #4]
 800667c:	2204      	movs	r2, #4
 800667e:	f102 0014 	add.w	r0, r2, #20
 8006682:	4298      	cmp	r0, r3
 8006684:	6871      	ldr	r1, [r6, #4]
 8006686:	d96e      	bls.n	8006766 <_dtoa_r+0x33e>
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fff0 	bl	800766e <_Balloc>
 800668e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006690:	6030      	str	r0, [r6, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f1b8 0f0e 	cmp.w	r8, #14
 8006698:	9306      	str	r3, [sp, #24]
 800669a:	f200 80ed 	bhi.w	8006878 <_dtoa_r+0x450>
 800669e:	2d00      	cmp	r5, #0
 80066a0:	f000 80ea 	beq.w	8006878 <_dtoa_r+0x450>
 80066a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066a8:	f1ba 0f00 	cmp.w	sl, #0
 80066ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80066b0:	dd77      	ble.n	80067a2 <_dtoa_r+0x37a>
 80066b2:	4a28      	ldr	r2, [pc, #160]	; (8006754 <_dtoa_r+0x32c>)
 80066b4:	f00a 030f 	and.w	r3, sl, #15
 80066b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80066bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066c0:	06f0      	lsls	r0, r6, #27
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80066ca:	d568      	bpl.n	800679e <_dtoa_r+0x376>
 80066cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80066d0:	4b21      	ldr	r3, [pc, #132]	; (8006758 <_dtoa_r+0x330>)
 80066d2:	2503      	movs	r5, #3
 80066d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066d8:	f7fa f828 	bl	800072c <__aeabi_ddiv>
 80066dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e0:	f006 060f 	and.w	r6, r6, #15
 80066e4:	4f1c      	ldr	r7, [pc, #112]	; (8006758 <_dtoa_r+0x330>)
 80066e6:	e04f      	b.n	8006788 <_dtoa_r+0x360>
 80066e8:	2301      	movs	r3, #1
 80066ea:	9309      	str	r3, [sp, #36]	; 0x24
 80066ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066ee:	4453      	add	r3, sl
 80066f0:	f103 0801 	add.w	r8, r3, #1
 80066f4:	9304      	str	r3, [sp, #16]
 80066f6:	4643      	mov	r3, r8
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	bfb8      	it	lt
 80066fc:	2301      	movlt	r3, #1
 80066fe:	e7ba      	b.n	8006676 <_dtoa_r+0x24e>
 8006700:	2300      	movs	r3, #0
 8006702:	e7b2      	b.n	800666a <_dtoa_r+0x242>
 8006704:	2300      	movs	r3, #0
 8006706:	e7f0      	b.n	80066ea <_dtoa_r+0x2c2>
 8006708:	2501      	movs	r5, #1
 800670a:	2300      	movs	r3, #0
 800670c:	9509      	str	r5, [sp, #36]	; 0x24
 800670e:	931e      	str	r3, [sp, #120]	; 0x78
 8006710:	f04f 33ff 	mov.w	r3, #4294967295
 8006714:	2200      	movs	r2, #0
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	4698      	mov	r8, r3
 800671a:	2312      	movs	r3, #18
 800671c:	921f      	str	r2, [sp, #124]	; 0x7c
 800671e:	e7aa      	b.n	8006676 <_dtoa_r+0x24e>
 8006720:	2301      	movs	r3, #1
 8006722:	9309      	str	r3, [sp, #36]	; 0x24
 8006724:	e7f4      	b.n	8006710 <_dtoa_r+0x2e8>
 8006726:	bf00      	nop
 8006728:	636f4361 	.word	0x636f4361
 800672c:	3fd287a7 	.word	0x3fd287a7
 8006730:	8b60c8b3 	.word	0x8b60c8b3
 8006734:	3fc68a28 	.word	0x3fc68a28
 8006738:	509f79fb 	.word	0x509f79fb
 800673c:	3fd34413 	.word	0x3fd34413
 8006740:	7ff00000 	.word	0x7ff00000
 8006744:	080092f1 	.word	0x080092f1
 8006748:	080092e8 	.word	0x080092e8
 800674c:	08009269 	.word	0x08009269
 8006750:	3ff80000 	.word	0x3ff80000
 8006754:	08009328 	.word	0x08009328
 8006758:	08009300 	.word	0x08009300
 800675c:	2301      	movs	r3, #1
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	4698      	mov	r8, r3
 8006762:	461a      	mov	r2, r3
 8006764:	e7da      	b.n	800671c <_dtoa_r+0x2f4>
 8006766:	3101      	adds	r1, #1
 8006768:	6071      	str	r1, [r6, #4]
 800676a:	0052      	lsls	r2, r2, #1
 800676c:	e787      	b.n	800667e <_dtoa_r+0x256>
 800676e:	07f1      	lsls	r1, r6, #31
 8006770:	d508      	bpl.n	8006784 <_dtoa_r+0x35c>
 8006772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677a:	f7f9 fead 	bl	80004d8 <__aeabi_dmul>
 800677e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006782:	3501      	adds	r5, #1
 8006784:	1076      	asrs	r6, r6, #1
 8006786:	3708      	adds	r7, #8
 8006788:	2e00      	cmp	r6, #0
 800678a:	d1f0      	bne.n	800676e <_dtoa_r+0x346>
 800678c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006794:	f7f9 ffca 	bl	800072c <__aeabi_ddiv>
 8006798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679c:	e01b      	b.n	80067d6 <_dtoa_r+0x3ae>
 800679e:	2502      	movs	r5, #2
 80067a0:	e7a0      	b.n	80066e4 <_dtoa_r+0x2bc>
 80067a2:	f000 80a4 	beq.w	80068ee <_dtoa_r+0x4c6>
 80067a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067aa:	f1ca 0600 	rsb	r6, sl, #0
 80067ae:	4ba0      	ldr	r3, [pc, #640]	; (8006a30 <_dtoa_r+0x608>)
 80067b0:	f006 020f 	and.w	r2, r6, #15
 80067b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7f9 fe8c 	bl	80004d8 <__aeabi_dmul>
 80067c0:	2502      	movs	r5, #2
 80067c2:	2300      	movs	r3, #0
 80067c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c8:	4f9a      	ldr	r7, [pc, #616]	; (8006a34 <_dtoa_r+0x60c>)
 80067ca:	1136      	asrs	r6, r6, #4
 80067cc:	2e00      	cmp	r6, #0
 80067ce:	f040 8083 	bne.w	80068d8 <_dtoa_r+0x4b0>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e0      	bne.n	8006798 <_dtoa_r+0x370>
 80067d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 808a 	beq.w	80068f2 <_dtoa_r+0x4ca>
 80067de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80067e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067ea:	2200      	movs	r2, #0
 80067ec:	4b92      	ldr	r3, [pc, #584]	; (8006a38 <_dtoa_r+0x610>)
 80067ee:	f7fa f8e5 	bl	80009bc <__aeabi_dcmplt>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d07d      	beq.n	80068f2 <_dtoa_r+0x4ca>
 80067f6:	f1b8 0f00 	cmp.w	r8, #0
 80067fa:	d07a      	beq.n	80068f2 <_dtoa_r+0x4ca>
 80067fc:	9b04      	ldr	r3, [sp, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dd36      	ble.n	8006870 <_dtoa_r+0x448>
 8006802:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006806:	2200      	movs	r2, #0
 8006808:	4b8c      	ldr	r3, [pc, #560]	; (8006a3c <_dtoa_r+0x614>)
 800680a:	f7f9 fe65 	bl	80004d8 <__aeabi_dmul>
 800680e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006812:	9e04      	ldr	r6, [sp, #16]
 8006814:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006818:	3501      	adds	r5, #1
 800681a:	4628      	mov	r0, r5
 800681c:	f7f9 fdf2 	bl	8000404 <__aeabi_i2d>
 8006820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006824:	f7f9 fe58 	bl	80004d8 <__aeabi_dmul>
 8006828:	2200      	movs	r2, #0
 800682a:	4b85      	ldr	r3, [pc, #532]	; (8006a40 <_dtoa_r+0x618>)
 800682c:	f7f9 fc9e 	bl	800016c <__adddf3>
 8006830:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006834:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006838:	950b      	str	r5, [sp, #44]	; 0x2c
 800683a:	2e00      	cmp	r6, #0
 800683c:	d15c      	bne.n	80068f8 <_dtoa_r+0x4d0>
 800683e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006842:	2200      	movs	r2, #0
 8006844:	4b7f      	ldr	r3, [pc, #508]	; (8006a44 <_dtoa_r+0x61c>)
 8006846:	f7f9 fc8f 	bl	8000168 <__aeabi_dsub>
 800684a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684c:	462b      	mov	r3, r5
 800684e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006852:	f7fa f8d1 	bl	80009f8 <__aeabi_dcmpgt>
 8006856:	2800      	cmp	r0, #0
 8006858:	f040 8281 	bne.w	8006d5e <_dtoa_r+0x936>
 800685c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006862:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006866:	f7fa f8a9 	bl	80009bc <__aeabi_dcmplt>
 800686a:	2800      	cmp	r0, #0
 800686c:	f040 8275 	bne.w	8006d5a <_dtoa_r+0x932>
 8006870:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800687a:	2b00      	cmp	r3, #0
 800687c:	f2c0 814b 	blt.w	8006b16 <_dtoa_r+0x6ee>
 8006880:	f1ba 0f0e 	cmp.w	sl, #14
 8006884:	f300 8147 	bgt.w	8006b16 <_dtoa_r+0x6ee>
 8006888:	4b69      	ldr	r3, [pc, #420]	; (8006a30 <_dtoa_r+0x608>)
 800688a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006896:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006898:	2b00      	cmp	r3, #0
 800689a:	f280 80d7 	bge.w	8006a4c <_dtoa_r+0x624>
 800689e:	f1b8 0f00 	cmp.w	r8, #0
 80068a2:	f300 80d3 	bgt.w	8006a4c <_dtoa_r+0x624>
 80068a6:	f040 8257 	bne.w	8006d58 <_dtoa_r+0x930>
 80068aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ae:	2200      	movs	r2, #0
 80068b0:	4b64      	ldr	r3, [pc, #400]	; (8006a44 <_dtoa_r+0x61c>)
 80068b2:	f7f9 fe11 	bl	80004d8 <__aeabi_dmul>
 80068b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ba:	f7fa f893 	bl	80009e4 <__aeabi_dcmpge>
 80068be:	4646      	mov	r6, r8
 80068c0:	4647      	mov	r7, r8
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f040 822d 	bne.w	8006d22 <_dtoa_r+0x8fa>
 80068c8:	9b06      	ldr	r3, [sp, #24]
 80068ca:	9a06      	ldr	r2, [sp, #24]
 80068cc:	1c5d      	adds	r5, r3, #1
 80068ce:	2331      	movs	r3, #49	; 0x31
 80068d0:	f10a 0a01 	add.w	sl, sl, #1
 80068d4:	7013      	strb	r3, [r2, #0]
 80068d6:	e228      	b.n	8006d2a <_dtoa_r+0x902>
 80068d8:	07f2      	lsls	r2, r6, #31
 80068da:	d505      	bpl.n	80068e8 <_dtoa_r+0x4c0>
 80068dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e0:	f7f9 fdfa 	bl	80004d8 <__aeabi_dmul>
 80068e4:	2301      	movs	r3, #1
 80068e6:	3501      	adds	r5, #1
 80068e8:	1076      	asrs	r6, r6, #1
 80068ea:	3708      	adds	r7, #8
 80068ec:	e76e      	b.n	80067cc <_dtoa_r+0x3a4>
 80068ee:	2502      	movs	r5, #2
 80068f0:	e771      	b.n	80067d6 <_dtoa_r+0x3ae>
 80068f2:	4657      	mov	r7, sl
 80068f4:	4646      	mov	r6, r8
 80068f6:	e790      	b.n	800681a <_dtoa_r+0x3f2>
 80068f8:	4b4d      	ldr	r3, [pc, #308]	; (8006a30 <_dtoa_r+0x608>)
 80068fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068fe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d048      	beq.n	800699a <_dtoa_r+0x572>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	2000      	movs	r0, #0
 800690e:	494e      	ldr	r1, [pc, #312]	; (8006a48 <_dtoa_r+0x620>)
 8006910:	f7f9 ff0c 	bl	800072c <__aeabi_ddiv>
 8006914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006918:	f7f9 fc26 	bl	8000168 <__aeabi_dsub>
 800691c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006920:	9d06      	ldr	r5, [sp, #24]
 8006922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006926:	f7fa f887 	bl	8000a38 <__aeabi_d2iz>
 800692a:	9011      	str	r0, [sp, #68]	; 0x44
 800692c:	f7f9 fd6a 	bl	8000404 <__aeabi_i2d>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006938:	f7f9 fc16 	bl	8000168 <__aeabi_dsub>
 800693c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800693e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006942:	3330      	adds	r3, #48	; 0x30
 8006944:	f805 3b01 	strb.w	r3, [r5], #1
 8006948:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800694c:	f7fa f836 	bl	80009bc <__aeabi_dcmplt>
 8006950:	2800      	cmp	r0, #0
 8006952:	d163      	bne.n	8006a1c <_dtoa_r+0x5f4>
 8006954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006958:	2000      	movs	r0, #0
 800695a:	4937      	ldr	r1, [pc, #220]	; (8006a38 <_dtoa_r+0x610>)
 800695c:	f7f9 fc04 	bl	8000168 <__aeabi_dsub>
 8006960:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006964:	f7fa f82a 	bl	80009bc <__aeabi_dcmplt>
 8006968:	2800      	cmp	r0, #0
 800696a:	f040 80b5 	bne.w	8006ad8 <_dtoa_r+0x6b0>
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	1aeb      	subs	r3, r5, r3
 8006972:	429e      	cmp	r6, r3
 8006974:	f77f af7c 	ble.w	8006870 <_dtoa_r+0x448>
 8006978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800697c:	2200      	movs	r2, #0
 800697e:	4b2f      	ldr	r3, [pc, #188]	; (8006a3c <_dtoa_r+0x614>)
 8006980:	f7f9 fdaa 	bl	80004d8 <__aeabi_dmul>
 8006984:	2200      	movs	r2, #0
 8006986:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800698a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800698e:	4b2b      	ldr	r3, [pc, #172]	; (8006a3c <_dtoa_r+0x614>)
 8006990:	f7f9 fda2 	bl	80004d8 <__aeabi_dmul>
 8006994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006998:	e7c3      	b.n	8006922 <_dtoa_r+0x4fa>
 800699a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800699e:	f7f9 fd9b 	bl	80004d8 <__aeabi_dmul>
 80069a2:	9b06      	ldr	r3, [sp, #24]
 80069a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069a8:	199d      	adds	r5, r3, r6
 80069aa:	461e      	mov	r6, r3
 80069ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b0:	f7fa f842 	bl	8000a38 <__aeabi_d2iz>
 80069b4:	9011      	str	r0, [sp, #68]	; 0x44
 80069b6:	f7f9 fd25 	bl	8000404 <__aeabi_i2d>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069c2:	f7f9 fbd1 	bl	8000168 <__aeabi_dsub>
 80069c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069cc:	3330      	adds	r3, #48	; 0x30
 80069ce:	f806 3b01 	strb.w	r3, [r6], #1
 80069d2:	42ae      	cmp	r6, r5
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	d124      	bne.n	8006a24 <_dtoa_r+0x5fc>
 80069da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069de:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <_dtoa_r+0x620>)
 80069e0:	f7f9 fbc4 	bl	800016c <__adddf3>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ec:	f7fa f804 	bl	80009f8 <__aeabi_dcmpgt>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d171      	bne.n	8006ad8 <_dtoa_r+0x6b0>
 80069f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069f8:	2000      	movs	r0, #0
 80069fa:	4913      	ldr	r1, [pc, #76]	; (8006a48 <_dtoa_r+0x620>)
 80069fc:	f7f9 fbb4 	bl	8000168 <__aeabi_dsub>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a08:	f7f9 ffd8 	bl	80009bc <__aeabi_dcmplt>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	f43f af2f 	beq.w	8006870 <_dtoa_r+0x448>
 8006a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a16:	1e6a      	subs	r2, r5, #1
 8006a18:	2b30      	cmp	r3, #48	; 0x30
 8006a1a:	d001      	beq.n	8006a20 <_dtoa_r+0x5f8>
 8006a1c:	46ba      	mov	sl, r7
 8006a1e:	e04a      	b.n	8006ab6 <_dtoa_r+0x68e>
 8006a20:	4615      	mov	r5, r2
 8006a22:	e7f6      	b.n	8006a12 <_dtoa_r+0x5ea>
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <_dtoa_r+0x614>)
 8006a26:	f7f9 fd57 	bl	80004d8 <__aeabi_dmul>
 8006a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a2e:	e7bd      	b.n	80069ac <_dtoa_r+0x584>
 8006a30:	08009328 	.word	0x08009328
 8006a34:	08009300 	.word	0x08009300
 8006a38:	3ff00000 	.word	0x3ff00000
 8006a3c:	40240000 	.word	0x40240000
 8006a40:	401c0000 	.word	0x401c0000
 8006a44:	40140000 	.word	0x40140000
 8006a48:	3fe00000 	.word	0x3fe00000
 8006a4c:	9d06      	ldr	r5, [sp, #24]
 8006a4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a56:	4630      	mov	r0, r6
 8006a58:	4639      	mov	r1, r7
 8006a5a:	f7f9 fe67 	bl	800072c <__aeabi_ddiv>
 8006a5e:	f7f9 ffeb 	bl	8000a38 <__aeabi_d2iz>
 8006a62:	4681      	mov	r9, r0
 8006a64:	f7f9 fcce 	bl	8000404 <__aeabi_i2d>
 8006a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6c:	f7f9 fd34 	bl	80004d8 <__aeabi_dmul>
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4630      	mov	r0, r6
 8006a76:	4639      	mov	r1, r7
 8006a78:	f7f9 fb76 	bl	8000168 <__aeabi_dsub>
 8006a7c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006a80:	f805 6b01 	strb.w	r6, [r5], #1
 8006a84:	9e06      	ldr	r6, [sp, #24]
 8006a86:	4602      	mov	r2, r0
 8006a88:	1bae      	subs	r6, r5, r6
 8006a8a:	45b0      	cmp	r8, r6
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	d135      	bne.n	8006afc <_dtoa_r+0x6d4>
 8006a90:	f7f9 fb6c 	bl	800016c <__adddf3>
 8006a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a98:	4606      	mov	r6, r0
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	f7f9 ffac 	bl	80009f8 <__aeabi_dcmpgt>
 8006aa0:	b9c8      	cbnz	r0, 8006ad6 <_dtoa_r+0x6ae>
 8006aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7f9 ff7d 	bl	80009a8 <__aeabi_dcmpeq>
 8006aae:	b110      	cbz	r0, 8006ab6 <_dtoa_r+0x68e>
 8006ab0:	f019 0f01 	tst.w	r9, #1
 8006ab4:	d10f      	bne.n	8006ad6 <_dtoa_r+0x6ae>
 8006ab6:	4659      	mov	r1, fp
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fe0c 	bl	80076d6 <_Bfree>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ac2:	702b      	strb	r3, [r5, #0]
 8006ac4:	f10a 0301 	add.w	r3, sl, #1
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f43f acf3 	beq.w	80064b8 <_dtoa_r+0x90>
 8006ad2:	601d      	str	r5, [r3, #0]
 8006ad4:	e4f0      	b.n	80064b8 <_dtoa_r+0x90>
 8006ad6:	4657      	mov	r7, sl
 8006ad8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006adc:	1e6b      	subs	r3, r5, #1
 8006ade:	2a39      	cmp	r2, #57	; 0x39
 8006ae0:	d106      	bne.n	8006af0 <_dtoa_r+0x6c8>
 8006ae2:	9a06      	ldr	r2, [sp, #24]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d107      	bne.n	8006af8 <_dtoa_r+0x6d0>
 8006ae8:	2330      	movs	r3, #48	; 0x30
 8006aea:	7013      	strb	r3, [r2, #0]
 8006aec:	4613      	mov	r3, r2
 8006aee:	3701      	adds	r7, #1
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	3201      	adds	r2, #1
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e791      	b.n	8006a1c <_dtoa_r+0x5f4>
 8006af8:	461d      	mov	r5, r3
 8006afa:	e7ed      	b.n	8006ad8 <_dtoa_r+0x6b0>
 8006afc:	2200      	movs	r2, #0
 8006afe:	4b99      	ldr	r3, [pc, #612]	; (8006d64 <_dtoa_r+0x93c>)
 8006b00:	f7f9 fcea 	bl	80004d8 <__aeabi_dmul>
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	4606      	mov	r6, r0
 8006b0a:	460f      	mov	r7, r1
 8006b0c:	f7f9 ff4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d09e      	beq.n	8006a52 <_dtoa_r+0x62a>
 8006b14:	e7cf      	b.n	8006ab6 <_dtoa_r+0x68e>
 8006b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b18:	2a00      	cmp	r2, #0
 8006b1a:	f000 8088 	beq.w	8006c2e <_dtoa_r+0x806>
 8006b1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b20:	2a01      	cmp	r2, #1
 8006b22:	dc6d      	bgt.n	8006c00 <_dtoa_r+0x7d8>
 8006b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	d066      	beq.n	8006bf8 <_dtoa_r+0x7d0>
 8006b2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b2e:	464d      	mov	r5, r9
 8006b30:	9e08      	ldr	r6, [sp, #32]
 8006b32:	9a07      	ldr	r2, [sp, #28]
 8006b34:	2101      	movs	r1, #1
 8006b36:	441a      	add	r2, r3
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4499      	add	r9, r3
 8006b3c:	9207      	str	r2, [sp, #28]
 8006b3e:	f000 fea8 	bl	8007892 <__i2b>
 8006b42:	4607      	mov	r7, r0
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	dd0b      	ble.n	8006b60 <_dtoa_r+0x738>
 8006b48:	9b07      	ldr	r3, [sp, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dd08      	ble.n	8006b60 <_dtoa_r+0x738>
 8006b4e:	42ab      	cmp	r3, r5
 8006b50:	bfa8      	it	ge
 8006b52:	462b      	movge	r3, r5
 8006b54:	9a07      	ldr	r2, [sp, #28]
 8006b56:	eba9 0903 	sub.w	r9, r9, r3
 8006b5a:	1aed      	subs	r5, r5, r3
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	9307      	str	r3, [sp, #28]
 8006b60:	9b08      	ldr	r3, [sp, #32]
 8006b62:	b1eb      	cbz	r3, 8006ba0 <_dtoa_r+0x778>
 8006b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d065      	beq.n	8006c36 <_dtoa_r+0x80e>
 8006b6a:	b18e      	cbz	r6, 8006b90 <_dtoa_r+0x768>
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	4632      	mov	r2, r6
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 ff2d 	bl	80079d0 <__pow5mult>
 8006b76:	465a      	mov	r2, fp
 8006b78:	4601      	mov	r1, r0
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f000 fe91 	bl	80078a4 <__multiply>
 8006b82:	4659      	mov	r1, fp
 8006b84:	900a      	str	r0, [sp, #40]	; 0x28
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 fda5 	bl	80076d6 <_Bfree>
 8006b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8e:	469b      	mov	fp, r3
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	1b9a      	subs	r2, r3, r6
 8006b94:	d004      	beq.n	8006ba0 <_dtoa_r+0x778>
 8006b96:	4659      	mov	r1, fp
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 ff19 	bl	80079d0 <__pow5mult>
 8006b9e:	4683      	mov	fp, r0
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fe75 	bl	8007892 <__i2b>
 8006ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006baa:	4606      	mov	r6, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 81c6 	beq.w	8006f3e <_dtoa_r+0xb16>
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 ff0a 	bl	80079d0 <__pow5mult>
 8006bbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	dc3e      	bgt.n	8006c42 <_dtoa_r+0x81a>
 8006bc4:	9b02      	ldr	r3, [sp, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d137      	bne.n	8006c3a <_dtoa_r+0x812>
 8006bca:	9b03      	ldr	r3, [sp, #12]
 8006bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d134      	bne.n	8006c3e <_dtoa_r+0x816>
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bda:	0d1b      	lsrs	r3, r3, #20
 8006bdc:	051b      	lsls	r3, r3, #20
 8006bde:	b12b      	cbz	r3, 8006bec <_dtoa_r+0x7c4>
 8006be0:	9b07      	ldr	r3, [sp, #28]
 8006be2:	f109 0901 	add.w	r9, r9, #1
 8006be6:	3301      	adds	r3, #1
 8006be8:	9307      	str	r3, [sp, #28]
 8006bea:	2301      	movs	r3, #1
 8006bec:	9308      	str	r3, [sp, #32]
 8006bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d128      	bne.n	8006c46 <_dtoa_r+0x81e>
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	e02e      	b.n	8006c56 <_dtoa_r+0x82e>
 8006bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bfe:	e796      	b.n	8006b2e <_dtoa_r+0x706>
 8006c00:	9b08      	ldr	r3, [sp, #32]
 8006c02:	f108 36ff 	add.w	r6, r8, #4294967295
 8006c06:	42b3      	cmp	r3, r6
 8006c08:	bfb7      	itett	lt
 8006c0a:	9b08      	ldrlt	r3, [sp, #32]
 8006c0c:	1b9e      	subge	r6, r3, r6
 8006c0e:	1af2      	sublt	r2, r6, r3
 8006c10:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006c12:	bfbf      	itttt	lt
 8006c14:	9608      	strlt	r6, [sp, #32]
 8006c16:	189b      	addlt	r3, r3, r2
 8006c18:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006c1a:	2600      	movlt	r6, #0
 8006c1c:	f1b8 0f00 	cmp.w	r8, #0
 8006c20:	bfb9      	ittee	lt
 8006c22:	eba9 0508 	sublt.w	r5, r9, r8
 8006c26:	2300      	movlt	r3, #0
 8006c28:	464d      	movge	r5, r9
 8006c2a:	4643      	movge	r3, r8
 8006c2c:	e781      	b.n	8006b32 <_dtoa_r+0x70a>
 8006c2e:	9e08      	ldr	r6, [sp, #32]
 8006c30:	464d      	mov	r5, r9
 8006c32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c34:	e786      	b.n	8006b44 <_dtoa_r+0x71c>
 8006c36:	9a08      	ldr	r2, [sp, #32]
 8006c38:	e7ad      	b.n	8006b96 <_dtoa_r+0x76e>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e7d6      	b.n	8006bec <_dtoa_r+0x7c4>
 8006c3e:	9b02      	ldr	r3, [sp, #8]
 8006c40:	e7d4      	b.n	8006bec <_dtoa_r+0x7c4>
 8006c42:	2300      	movs	r3, #0
 8006c44:	9308      	str	r3, [sp, #32]
 8006c46:	6933      	ldr	r3, [r6, #16]
 8006c48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c4c:	6918      	ldr	r0, [r3, #16]
 8006c4e:	f000 fdd2 	bl	80077f6 <__hi0bits>
 8006c52:	f1c0 0020 	rsb	r0, r0, #32
 8006c56:	9b07      	ldr	r3, [sp, #28]
 8006c58:	4418      	add	r0, r3
 8006c5a:	f010 001f 	ands.w	r0, r0, #31
 8006c5e:	d047      	beq.n	8006cf0 <_dtoa_r+0x8c8>
 8006c60:	f1c0 0320 	rsb	r3, r0, #32
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	dd3b      	ble.n	8006ce0 <_dtoa_r+0x8b8>
 8006c68:	9b07      	ldr	r3, [sp, #28]
 8006c6a:	f1c0 001c 	rsb	r0, r0, #28
 8006c6e:	4481      	add	r9, r0
 8006c70:	4405      	add	r5, r0
 8006c72:	4403      	add	r3, r0
 8006c74:	9307      	str	r3, [sp, #28]
 8006c76:	f1b9 0f00 	cmp.w	r9, #0
 8006c7a:	dd05      	ble.n	8006c88 <_dtoa_r+0x860>
 8006c7c:	4659      	mov	r1, fp
 8006c7e:	464a      	mov	r2, r9
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fef3 	bl	8007a6c <__lshift>
 8006c86:	4683      	mov	fp, r0
 8006c88:	9b07      	ldr	r3, [sp, #28]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dd05      	ble.n	8006c9a <_dtoa_r+0x872>
 8006c8e:	4631      	mov	r1, r6
 8006c90:	461a      	mov	r2, r3
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 feea 	bl	8007a6c <__lshift>
 8006c98:	4606      	mov	r6, r0
 8006c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c9c:	b353      	cbz	r3, 8006cf4 <_dtoa_r+0x8cc>
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4658      	mov	r0, fp
 8006ca2:	f000 ff37 	bl	8007b14 <__mcmp>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	da24      	bge.n	8006cf4 <_dtoa_r+0x8cc>
 8006caa:	2300      	movs	r3, #0
 8006cac:	4659      	mov	r1, fp
 8006cae:	220a      	movs	r2, #10
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 fd27 	bl	8007704 <__multadd>
 8006cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cbc:	4683      	mov	fp, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 8144 	beq.w	8006f4c <_dtoa_r+0xb24>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4639      	mov	r1, r7
 8006cc8:	220a      	movs	r2, #10
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fd1a 	bl	8007704 <__multadd>
 8006cd0:	9b04      	ldr	r3, [sp, #16]
 8006cd2:	4607      	mov	r7, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dc4d      	bgt.n	8006d74 <_dtoa_r+0x94c>
 8006cd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	dd4a      	ble.n	8006d74 <_dtoa_r+0x94c>
 8006cde:	e011      	b.n	8006d04 <_dtoa_r+0x8dc>
 8006ce0:	d0c9      	beq.n	8006c76 <_dtoa_r+0x84e>
 8006ce2:	9a07      	ldr	r2, [sp, #28]
 8006ce4:	331c      	adds	r3, #28
 8006ce6:	441a      	add	r2, r3
 8006ce8:	4499      	add	r9, r3
 8006cea:	441d      	add	r5, r3
 8006cec:	4613      	mov	r3, r2
 8006cee:	e7c1      	b.n	8006c74 <_dtoa_r+0x84c>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	e7f6      	b.n	8006ce2 <_dtoa_r+0x8ba>
 8006cf4:	f1b8 0f00 	cmp.w	r8, #0
 8006cf8:	dc36      	bgt.n	8006d68 <_dtoa_r+0x940>
 8006cfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	dd33      	ble.n	8006d68 <_dtoa_r+0x940>
 8006d00:	f8cd 8010 	str.w	r8, [sp, #16]
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	b963      	cbnz	r3, 8006d22 <_dtoa_r+0x8fa>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fcf9 	bl	8007704 <__multadd>
 8006d12:	4601      	mov	r1, r0
 8006d14:	4606      	mov	r6, r0
 8006d16:	4658      	mov	r0, fp
 8006d18:	f000 fefc 	bl	8007b14 <__mcmp>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f73f add3 	bgt.w	80068c8 <_dtoa_r+0x4a0>
 8006d22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d24:	9d06      	ldr	r5, [sp, #24]
 8006d26:	ea6f 0a03 	mvn.w	sl, r3
 8006d2a:	f04f 0900 	mov.w	r9, #0
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 fcd0 	bl	80076d6 <_Bfree>
 8006d36:	2f00      	cmp	r7, #0
 8006d38:	f43f aebd 	beq.w	8006ab6 <_dtoa_r+0x68e>
 8006d3c:	f1b9 0f00 	cmp.w	r9, #0
 8006d40:	d005      	beq.n	8006d4e <_dtoa_r+0x926>
 8006d42:	45b9      	cmp	r9, r7
 8006d44:	d003      	beq.n	8006d4e <_dtoa_r+0x926>
 8006d46:	4649      	mov	r1, r9
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fcc4 	bl	80076d6 <_Bfree>
 8006d4e:	4639      	mov	r1, r7
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 fcc0 	bl	80076d6 <_Bfree>
 8006d56:	e6ae      	b.n	8006ab6 <_dtoa_r+0x68e>
 8006d58:	2600      	movs	r6, #0
 8006d5a:	4637      	mov	r7, r6
 8006d5c:	e7e1      	b.n	8006d22 <_dtoa_r+0x8fa>
 8006d5e:	46ba      	mov	sl, r7
 8006d60:	4637      	mov	r7, r6
 8006d62:	e5b1      	b.n	80068c8 <_dtoa_r+0x4a0>
 8006d64:	40240000 	.word	0x40240000
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80f3 	beq.w	8006f5a <_dtoa_r+0xb32>
 8006d74:	2d00      	cmp	r5, #0
 8006d76:	dd05      	ble.n	8006d84 <_dtoa_r+0x95c>
 8006d78:	4639      	mov	r1, r7
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fe75 	bl	8007a6c <__lshift>
 8006d82:	4607      	mov	r7, r0
 8006d84:	9b08      	ldr	r3, [sp, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d04c      	beq.n	8006e24 <_dtoa_r+0x9fc>
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 fc6e 	bl	800766e <_Balloc>
 8006d92:	4605      	mov	r5, r0
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	f107 010c 	add.w	r1, r7, #12
 8006d9a:	3202      	adds	r2, #2
 8006d9c:	0092      	lsls	r2, r2, #2
 8006d9e:	300c      	adds	r0, #12
 8006da0:	f000 fc5a 	bl	8007658 <memcpy>
 8006da4:	2201      	movs	r2, #1
 8006da6:	4629      	mov	r1, r5
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fe5f 	bl	8007a6c <__lshift>
 8006dae:	46b9      	mov	r9, r7
 8006db0:	4607      	mov	r7, r0
 8006db2:	9b06      	ldr	r3, [sp, #24]
 8006db4:	9307      	str	r3, [sp, #28]
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	9308      	str	r3, [sp, #32]
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4658      	mov	r0, fp
 8006dc2:	f7ff faa3 	bl	800630c <quorem>
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	4605      	mov	r5, r0
 8006dca:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006dce:	4658      	mov	r0, fp
 8006dd0:	f000 fea0 	bl	8007b14 <__mcmp>
 8006dd4:	463a      	mov	r2, r7
 8006dd6:	9002      	str	r0, [sp, #8]
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 feb4 	bl	8007b48 <__mdiff>
 8006de0:	68c3      	ldr	r3, [r0, #12]
 8006de2:	4602      	mov	r2, r0
 8006de4:	bb03      	cbnz	r3, 8006e28 <_dtoa_r+0xa00>
 8006de6:	4601      	mov	r1, r0
 8006de8:	9009      	str	r0, [sp, #36]	; 0x24
 8006dea:	4658      	mov	r0, fp
 8006dec:	f000 fe92 	bl	8007b14 <__mcmp>
 8006df0:	4603      	mov	r3, r0
 8006df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df4:	4611      	mov	r1, r2
 8006df6:	4620      	mov	r0, r4
 8006df8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfa:	f000 fc6c 	bl	80076d6 <_Bfree>
 8006dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e00:	b9a3      	cbnz	r3, 8006e2c <_dtoa_r+0xa04>
 8006e02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e04:	b992      	cbnz	r2, 8006e2c <_dtoa_r+0xa04>
 8006e06:	9a08      	ldr	r2, [sp, #32]
 8006e08:	b982      	cbnz	r2, 8006e2c <_dtoa_r+0xa04>
 8006e0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e0e:	d029      	beq.n	8006e64 <_dtoa_r+0xa3c>
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd01      	ble.n	8006e1a <_dtoa_r+0x9f2>
 8006e16:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006e1a:	9b07      	ldr	r3, [sp, #28]
 8006e1c:	1c5d      	adds	r5, r3, #1
 8006e1e:	f883 8000 	strb.w	r8, [r3]
 8006e22:	e784      	b.n	8006d2e <_dtoa_r+0x906>
 8006e24:	4638      	mov	r0, r7
 8006e26:	e7c2      	b.n	8006dae <_dtoa_r+0x986>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e7e3      	b.n	8006df4 <_dtoa_r+0x9cc>
 8006e2c:	9a02      	ldr	r2, [sp, #8]
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	db04      	blt.n	8006e3c <_dtoa_r+0xa14>
 8006e32:	d123      	bne.n	8006e7c <_dtoa_r+0xa54>
 8006e34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e36:	bb0a      	cbnz	r2, 8006e7c <_dtoa_r+0xa54>
 8006e38:	9a08      	ldr	r2, [sp, #32]
 8006e3a:	b9fa      	cbnz	r2, 8006e7c <_dtoa_r+0xa54>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	ddec      	ble.n	8006e1a <_dtoa_r+0x9f2>
 8006e40:	4659      	mov	r1, fp
 8006e42:	2201      	movs	r2, #1
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fe11 	bl	8007a6c <__lshift>
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4683      	mov	fp, r0
 8006e4e:	f000 fe61 	bl	8007b14 <__mcmp>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	dc03      	bgt.n	8006e5e <_dtoa_r+0xa36>
 8006e56:	d1e0      	bne.n	8006e1a <_dtoa_r+0x9f2>
 8006e58:	f018 0f01 	tst.w	r8, #1
 8006e5c:	d0dd      	beq.n	8006e1a <_dtoa_r+0x9f2>
 8006e5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e62:	d1d8      	bne.n	8006e16 <_dtoa_r+0x9ee>
 8006e64:	9b07      	ldr	r3, [sp, #28]
 8006e66:	9a07      	ldr	r2, [sp, #28]
 8006e68:	1c5d      	adds	r5, r3, #1
 8006e6a:	2339      	movs	r3, #57	; 0x39
 8006e6c:	7013      	strb	r3, [r2, #0]
 8006e6e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e72:	1e6a      	subs	r2, r5, #1
 8006e74:	2b39      	cmp	r3, #57	; 0x39
 8006e76:	d04d      	beq.n	8006f14 <_dtoa_r+0xaec>
 8006e78:	3301      	adds	r3, #1
 8006e7a:	e052      	b.n	8006f22 <_dtoa_r+0xafa>
 8006e7c:	9a07      	ldr	r2, [sp, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f102 0501 	add.w	r5, r2, #1
 8006e84:	dd06      	ble.n	8006e94 <_dtoa_r+0xa6c>
 8006e86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e8a:	d0eb      	beq.n	8006e64 <_dtoa_r+0xa3c>
 8006e8c:	f108 0801 	add.w	r8, r8, #1
 8006e90:	9b07      	ldr	r3, [sp, #28]
 8006e92:	e7c4      	b.n	8006e1e <_dtoa_r+0x9f6>
 8006e94:	9b06      	ldr	r3, [sp, #24]
 8006e96:	9a04      	ldr	r2, [sp, #16]
 8006e98:	1aeb      	subs	r3, r5, r3
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006ea0:	d021      	beq.n	8006ee6 <_dtoa_r+0xabe>
 8006ea2:	4659      	mov	r1, fp
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	220a      	movs	r2, #10
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 fc2b 	bl	8007704 <__multadd>
 8006eae:	45b9      	cmp	r9, r7
 8006eb0:	4683      	mov	fp, r0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	f04f 020a 	mov.w	r2, #10
 8006eba:	4649      	mov	r1, r9
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	d105      	bne.n	8006ecc <_dtoa_r+0xaa4>
 8006ec0:	f000 fc20 	bl	8007704 <__multadd>
 8006ec4:	4681      	mov	r9, r0
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	9507      	str	r5, [sp, #28]
 8006eca:	e778      	b.n	8006dbe <_dtoa_r+0x996>
 8006ecc:	f000 fc1a 	bl	8007704 <__multadd>
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	4681      	mov	r9, r0
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	220a      	movs	r2, #10
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 fc13 	bl	8007704 <__multadd>
 8006ede:	4607      	mov	r7, r0
 8006ee0:	e7f2      	b.n	8006ec8 <_dtoa_r+0xaa0>
 8006ee2:	f04f 0900 	mov.w	r9, #0
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	2201      	movs	r2, #1
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fdbe 	bl	8007a6c <__lshift>
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4683      	mov	fp, r0
 8006ef4:	f000 fe0e 	bl	8007b14 <__mcmp>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	dcb8      	bgt.n	8006e6e <_dtoa_r+0xa46>
 8006efc:	d102      	bne.n	8006f04 <_dtoa_r+0xadc>
 8006efe:	f018 0f01 	tst.w	r8, #1
 8006f02:	d1b4      	bne.n	8006e6e <_dtoa_r+0xa46>
 8006f04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f08:	1e6a      	subs	r2, r5, #1
 8006f0a:	2b30      	cmp	r3, #48	; 0x30
 8006f0c:	f47f af0f 	bne.w	8006d2e <_dtoa_r+0x906>
 8006f10:	4615      	mov	r5, r2
 8006f12:	e7f7      	b.n	8006f04 <_dtoa_r+0xadc>
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d105      	bne.n	8006f26 <_dtoa_r+0xafe>
 8006f1a:	2331      	movs	r3, #49	; 0x31
 8006f1c:	9a06      	ldr	r2, [sp, #24]
 8006f1e:	f10a 0a01 	add.w	sl, sl, #1
 8006f22:	7013      	strb	r3, [r2, #0]
 8006f24:	e703      	b.n	8006d2e <_dtoa_r+0x906>
 8006f26:	4615      	mov	r5, r2
 8006f28:	e7a1      	b.n	8006e6e <_dtoa_r+0xa46>
 8006f2a:	4b17      	ldr	r3, [pc, #92]	; (8006f88 <_dtoa_r+0xb60>)
 8006f2c:	f7ff bae1 	b.w	80064f2 <_dtoa_r+0xca>
 8006f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f47f aabb 	bne.w	80064ae <_dtoa_r+0x86>
 8006f38:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <_dtoa_r+0xb64>)
 8006f3a:	f7ff bada 	b.w	80064f2 <_dtoa_r+0xca>
 8006f3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	f77f ae3f 	ble.w	8006bc4 <_dtoa_r+0x79c>
 8006f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f48:	9308      	str	r3, [sp, #32]
 8006f4a:	e653      	b.n	8006bf4 <_dtoa_r+0x7cc>
 8006f4c:	9b04      	ldr	r3, [sp, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dc03      	bgt.n	8006f5a <_dtoa_r+0xb32>
 8006f52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	f73f aed5 	bgt.w	8006d04 <_dtoa_r+0x8dc>
 8006f5a:	9d06      	ldr	r5, [sp, #24]
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4658      	mov	r0, fp
 8006f60:	f7ff f9d4 	bl	800630c <quorem>
 8006f64:	9b06      	ldr	r3, [sp, #24]
 8006f66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f6a:	f805 8b01 	strb.w	r8, [r5], #1
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	1aeb      	subs	r3, r5, r3
 8006f72:	429a      	cmp	r2, r3
 8006f74:	ddb5      	ble.n	8006ee2 <_dtoa_r+0xaba>
 8006f76:	4659      	mov	r1, fp
 8006f78:	2300      	movs	r3, #0
 8006f7a:	220a      	movs	r2, #10
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 fbc1 	bl	8007704 <__multadd>
 8006f82:	4683      	mov	fp, r0
 8006f84:	e7ea      	b.n	8006f5c <_dtoa_r+0xb34>
 8006f86:	bf00      	nop
 8006f88:	08009268 	.word	0x08009268
 8006f8c:	080092e8 	.word	0x080092e8

08006f90 <rshift>:
 8006f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f92:	6906      	ldr	r6, [r0, #16]
 8006f94:	114b      	asrs	r3, r1, #5
 8006f96:	429e      	cmp	r6, r3
 8006f98:	f100 0414 	add.w	r4, r0, #20
 8006f9c:	dd31      	ble.n	8007002 <rshift+0x72>
 8006f9e:	f011 011f 	ands.w	r1, r1, #31
 8006fa2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006fa6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006faa:	d108      	bne.n	8006fbe <rshift+0x2e>
 8006fac:	4621      	mov	r1, r4
 8006fae:	42b2      	cmp	r2, r6
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	d211      	bcs.n	8006fd8 <rshift+0x48>
 8006fb4:	f852 3b04 	ldr.w	r3, [r2], #4
 8006fb8:	f841 3b04 	str.w	r3, [r1], #4
 8006fbc:	e7f7      	b.n	8006fae <rshift+0x1e>
 8006fbe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	f1c1 0c20 	rsb	ip, r1, #32
 8006fc8:	40cd      	lsrs	r5, r1
 8006fca:	3204      	adds	r2, #4
 8006fcc:	42b2      	cmp	r2, r6
 8006fce:	4617      	mov	r7, r2
 8006fd0:	d30d      	bcc.n	8006fee <rshift+0x5e>
 8006fd2:	601d      	str	r5, [r3, #0]
 8006fd4:	b105      	cbz	r5, 8006fd8 <rshift+0x48>
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	eba3 0204 	sub.w	r2, r3, r4
 8006fde:	bf08      	it	eq
 8006fe0:	2300      	moveq	r3, #0
 8006fe2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006fe6:	6102      	str	r2, [r0, #16]
 8006fe8:	bf08      	it	eq
 8006fea:	6143      	streq	r3, [r0, #20]
 8006fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fee:	683f      	ldr	r7, [r7, #0]
 8006ff0:	fa07 f70c 	lsl.w	r7, r7, ip
 8006ff4:	433d      	orrs	r5, r7
 8006ff6:	f843 5b04 	str.w	r5, [r3], #4
 8006ffa:	f852 5b04 	ldr.w	r5, [r2], #4
 8006ffe:	40cd      	lsrs	r5, r1
 8007000:	e7e4      	b.n	8006fcc <rshift+0x3c>
 8007002:	4623      	mov	r3, r4
 8007004:	e7e8      	b.n	8006fd8 <rshift+0x48>

08007006 <__hexdig_fun>:
 8007006:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800700a:	2b09      	cmp	r3, #9
 800700c:	d802      	bhi.n	8007014 <__hexdig_fun+0xe>
 800700e:	3820      	subs	r0, #32
 8007010:	b2c0      	uxtb	r0, r0
 8007012:	4770      	bx	lr
 8007014:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007018:	2b05      	cmp	r3, #5
 800701a:	d801      	bhi.n	8007020 <__hexdig_fun+0x1a>
 800701c:	3847      	subs	r0, #71	; 0x47
 800701e:	e7f7      	b.n	8007010 <__hexdig_fun+0xa>
 8007020:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007024:	2b05      	cmp	r3, #5
 8007026:	d801      	bhi.n	800702c <__hexdig_fun+0x26>
 8007028:	3827      	subs	r0, #39	; 0x27
 800702a:	e7f1      	b.n	8007010 <__hexdig_fun+0xa>
 800702c:	2000      	movs	r0, #0
 800702e:	4770      	bx	lr

08007030 <__gethex>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	b08b      	sub	sp, #44	; 0x2c
 8007036:	9002      	str	r0, [sp, #8]
 8007038:	9816      	ldr	r0, [sp, #88]	; 0x58
 800703a:	468a      	mov	sl, r1
 800703c:	4690      	mov	r8, r2
 800703e:	9306      	str	r3, [sp, #24]
 8007040:	f000 fad1 	bl	80075e6 <__localeconv_l>
 8007044:	6803      	ldr	r3, [r0, #0]
 8007046:	f04f 0b00 	mov.w	fp, #0
 800704a:	4618      	mov	r0, r3
 800704c:	9303      	str	r3, [sp, #12]
 800704e:	f7f9 f87f 	bl	8000150 <strlen>
 8007052:	9b03      	ldr	r3, [sp, #12]
 8007054:	9001      	str	r0, [sp, #4]
 8007056:	4403      	add	r3, r0
 8007058:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800705c:	9307      	str	r3, [sp, #28]
 800705e:	f8da 3000 	ldr.w	r3, [sl]
 8007062:	3302      	adds	r3, #2
 8007064:	461f      	mov	r7, r3
 8007066:	f813 0b01 	ldrb.w	r0, [r3], #1
 800706a:	2830      	cmp	r0, #48	; 0x30
 800706c:	d06c      	beq.n	8007148 <__gethex+0x118>
 800706e:	f7ff ffca 	bl	8007006 <__hexdig_fun>
 8007072:	4604      	mov	r4, r0
 8007074:	2800      	cmp	r0, #0
 8007076:	d16a      	bne.n	800714e <__gethex+0x11e>
 8007078:	9a01      	ldr	r2, [sp, #4]
 800707a:	9903      	ldr	r1, [sp, #12]
 800707c:	4638      	mov	r0, r7
 800707e:	f001 f905 	bl	800828c <strncmp>
 8007082:	2800      	cmp	r0, #0
 8007084:	d166      	bne.n	8007154 <__gethex+0x124>
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	5cf8      	ldrb	r0, [r7, r3]
 800708a:	18fe      	adds	r6, r7, r3
 800708c:	f7ff ffbb 	bl	8007006 <__hexdig_fun>
 8007090:	2800      	cmp	r0, #0
 8007092:	d062      	beq.n	800715a <__gethex+0x12a>
 8007094:	4633      	mov	r3, r6
 8007096:	7818      	ldrb	r0, [r3, #0]
 8007098:	461f      	mov	r7, r3
 800709a:	2830      	cmp	r0, #48	; 0x30
 800709c:	f103 0301 	add.w	r3, r3, #1
 80070a0:	d0f9      	beq.n	8007096 <__gethex+0x66>
 80070a2:	f7ff ffb0 	bl	8007006 <__hexdig_fun>
 80070a6:	fab0 f580 	clz	r5, r0
 80070aa:	4634      	mov	r4, r6
 80070ac:	f04f 0b01 	mov.w	fp, #1
 80070b0:	096d      	lsrs	r5, r5, #5
 80070b2:	463a      	mov	r2, r7
 80070b4:	4616      	mov	r6, r2
 80070b6:	7830      	ldrb	r0, [r6, #0]
 80070b8:	3201      	adds	r2, #1
 80070ba:	f7ff ffa4 	bl	8007006 <__hexdig_fun>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d1f8      	bne.n	80070b4 <__gethex+0x84>
 80070c2:	9a01      	ldr	r2, [sp, #4]
 80070c4:	9903      	ldr	r1, [sp, #12]
 80070c6:	4630      	mov	r0, r6
 80070c8:	f001 f8e0 	bl	800828c <strncmp>
 80070cc:	b950      	cbnz	r0, 80070e4 <__gethex+0xb4>
 80070ce:	b954      	cbnz	r4, 80070e6 <__gethex+0xb6>
 80070d0:	9b01      	ldr	r3, [sp, #4]
 80070d2:	18f4      	adds	r4, r6, r3
 80070d4:	4622      	mov	r2, r4
 80070d6:	4616      	mov	r6, r2
 80070d8:	7830      	ldrb	r0, [r6, #0]
 80070da:	3201      	adds	r2, #1
 80070dc:	f7ff ff93 	bl	8007006 <__hexdig_fun>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d1f8      	bne.n	80070d6 <__gethex+0xa6>
 80070e4:	b10c      	cbz	r4, 80070ea <__gethex+0xba>
 80070e6:	1ba4      	subs	r4, r4, r6
 80070e8:	00a4      	lsls	r4, r4, #2
 80070ea:	7833      	ldrb	r3, [r6, #0]
 80070ec:	2b50      	cmp	r3, #80	; 0x50
 80070ee:	d001      	beq.n	80070f4 <__gethex+0xc4>
 80070f0:	2b70      	cmp	r3, #112	; 0x70
 80070f2:	d140      	bne.n	8007176 <__gethex+0x146>
 80070f4:	7873      	ldrb	r3, [r6, #1]
 80070f6:	2b2b      	cmp	r3, #43	; 0x2b
 80070f8:	d031      	beq.n	800715e <__gethex+0x12e>
 80070fa:	2b2d      	cmp	r3, #45	; 0x2d
 80070fc:	d033      	beq.n	8007166 <__gethex+0x136>
 80070fe:	f04f 0900 	mov.w	r9, #0
 8007102:	1c71      	adds	r1, r6, #1
 8007104:	7808      	ldrb	r0, [r1, #0]
 8007106:	f7ff ff7e 	bl	8007006 <__hexdig_fun>
 800710a:	1e43      	subs	r3, r0, #1
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b18      	cmp	r3, #24
 8007110:	d831      	bhi.n	8007176 <__gethex+0x146>
 8007112:	f1a0 0210 	sub.w	r2, r0, #16
 8007116:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800711a:	f7ff ff74 	bl	8007006 <__hexdig_fun>
 800711e:	1e43      	subs	r3, r0, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b18      	cmp	r3, #24
 8007124:	d922      	bls.n	800716c <__gethex+0x13c>
 8007126:	f1b9 0f00 	cmp.w	r9, #0
 800712a:	d000      	beq.n	800712e <__gethex+0xfe>
 800712c:	4252      	negs	r2, r2
 800712e:	4414      	add	r4, r2
 8007130:	f8ca 1000 	str.w	r1, [sl]
 8007134:	b30d      	cbz	r5, 800717a <__gethex+0x14a>
 8007136:	f1bb 0f00 	cmp.w	fp, #0
 800713a:	bf0c      	ite	eq
 800713c:	2706      	moveq	r7, #6
 800713e:	2700      	movne	r7, #0
 8007140:	4638      	mov	r0, r7
 8007142:	b00b      	add	sp, #44	; 0x2c
 8007144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007148:	f10b 0b01 	add.w	fp, fp, #1
 800714c:	e78a      	b.n	8007064 <__gethex+0x34>
 800714e:	2500      	movs	r5, #0
 8007150:	462c      	mov	r4, r5
 8007152:	e7ae      	b.n	80070b2 <__gethex+0x82>
 8007154:	463e      	mov	r6, r7
 8007156:	2501      	movs	r5, #1
 8007158:	e7c7      	b.n	80070ea <__gethex+0xba>
 800715a:	4604      	mov	r4, r0
 800715c:	e7fb      	b.n	8007156 <__gethex+0x126>
 800715e:	f04f 0900 	mov.w	r9, #0
 8007162:	1cb1      	adds	r1, r6, #2
 8007164:	e7ce      	b.n	8007104 <__gethex+0xd4>
 8007166:	f04f 0901 	mov.w	r9, #1
 800716a:	e7fa      	b.n	8007162 <__gethex+0x132>
 800716c:	230a      	movs	r3, #10
 800716e:	fb03 0202 	mla	r2, r3, r2, r0
 8007172:	3a10      	subs	r2, #16
 8007174:	e7cf      	b.n	8007116 <__gethex+0xe6>
 8007176:	4631      	mov	r1, r6
 8007178:	e7da      	b.n	8007130 <__gethex+0x100>
 800717a:	4629      	mov	r1, r5
 800717c:	1bf3      	subs	r3, r6, r7
 800717e:	3b01      	subs	r3, #1
 8007180:	2b07      	cmp	r3, #7
 8007182:	dc49      	bgt.n	8007218 <__gethex+0x1e8>
 8007184:	9802      	ldr	r0, [sp, #8]
 8007186:	f000 fa72 	bl	800766e <_Balloc>
 800718a:	f04f 0b00 	mov.w	fp, #0
 800718e:	4605      	mov	r5, r0
 8007190:	46da      	mov	sl, fp
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	f100 0914 	add.w	r9, r0, #20
 8007198:	f1c3 0301 	rsb	r3, r3, #1
 800719c:	f8cd 9010 	str.w	r9, [sp, #16]
 80071a0:	9308      	str	r3, [sp, #32]
 80071a2:	42b7      	cmp	r7, r6
 80071a4:	d33b      	bcc.n	800721e <__gethex+0x1ee>
 80071a6:	9804      	ldr	r0, [sp, #16]
 80071a8:	f840 ab04 	str.w	sl, [r0], #4
 80071ac:	eba0 0009 	sub.w	r0, r0, r9
 80071b0:	1080      	asrs	r0, r0, #2
 80071b2:	6128      	str	r0, [r5, #16]
 80071b4:	0147      	lsls	r7, r0, #5
 80071b6:	4650      	mov	r0, sl
 80071b8:	f000 fb1d 	bl	80077f6 <__hi0bits>
 80071bc:	f8d8 6000 	ldr.w	r6, [r8]
 80071c0:	1a3f      	subs	r7, r7, r0
 80071c2:	42b7      	cmp	r7, r6
 80071c4:	dd64      	ble.n	8007290 <__gethex+0x260>
 80071c6:	1bbf      	subs	r7, r7, r6
 80071c8:	4639      	mov	r1, r7
 80071ca:	4628      	mov	r0, r5
 80071cc:	f000 fe27 	bl	8007e1e <__any_on>
 80071d0:	4682      	mov	sl, r0
 80071d2:	b178      	cbz	r0, 80071f4 <__gethex+0x1c4>
 80071d4:	f04f 0a01 	mov.w	sl, #1
 80071d8:	1e7b      	subs	r3, r7, #1
 80071da:	1159      	asrs	r1, r3, #5
 80071dc:	f003 021f 	and.w	r2, r3, #31
 80071e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80071e4:	fa0a f202 	lsl.w	r2, sl, r2
 80071e8:	420a      	tst	r2, r1
 80071ea:	d003      	beq.n	80071f4 <__gethex+0x1c4>
 80071ec:	4553      	cmp	r3, sl
 80071ee:	dc46      	bgt.n	800727e <__gethex+0x24e>
 80071f0:	f04f 0a02 	mov.w	sl, #2
 80071f4:	4639      	mov	r1, r7
 80071f6:	4628      	mov	r0, r5
 80071f8:	f7ff feca 	bl	8006f90 <rshift>
 80071fc:	443c      	add	r4, r7
 80071fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007202:	42a3      	cmp	r3, r4
 8007204:	da52      	bge.n	80072ac <__gethex+0x27c>
 8007206:	4629      	mov	r1, r5
 8007208:	9802      	ldr	r0, [sp, #8]
 800720a:	f000 fa64 	bl	80076d6 <_Bfree>
 800720e:	2300      	movs	r3, #0
 8007210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007212:	27a3      	movs	r7, #163	; 0xa3
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e793      	b.n	8007140 <__gethex+0x110>
 8007218:	3101      	adds	r1, #1
 800721a:	105b      	asrs	r3, r3, #1
 800721c:	e7b0      	b.n	8007180 <__gethex+0x150>
 800721e:	1e73      	subs	r3, r6, #1
 8007220:	9305      	str	r3, [sp, #20]
 8007222:	9a07      	ldr	r2, [sp, #28]
 8007224:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007228:	4293      	cmp	r3, r2
 800722a:	d018      	beq.n	800725e <__gethex+0x22e>
 800722c:	f1bb 0f20 	cmp.w	fp, #32
 8007230:	d107      	bne.n	8007242 <__gethex+0x212>
 8007232:	9b04      	ldr	r3, [sp, #16]
 8007234:	f8c3 a000 	str.w	sl, [r3]
 8007238:	f04f 0a00 	mov.w	sl, #0
 800723c:	46d3      	mov	fp, sl
 800723e:	3304      	adds	r3, #4
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007246:	f7ff fede 	bl	8007006 <__hexdig_fun>
 800724a:	f000 000f 	and.w	r0, r0, #15
 800724e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007252:	ea4a 0a00 	orr.w	sl, sl, r0
 8007256:	f10b 0b04 	add.w	fp, fp, #4
 800725a:	9b05      	ldr	r3, [sp, #20]
 800725c:	e00d      	b.n	800727a <__gethex+0x24a>
 800725e:	9b05      	ldr	r3, [sp, #20]
 8007260:	9a08      	ldr	r2, [sp, #32]
 8007262:	4413      	add	r3, r2
 8007264:	42bb      	cmp	r3, r7
 8007266:	d3e1      	bcc.n	800722c <__gethex+0x1fc>
 8007268:	4618      	mov	r0, r3
 800726a:	9a01      	ldr	r2, [sp, #4]
 800726c:	9903      	ldr	r1, [sp, #12]
 800726e:	9309      	str	r3, [sp, #36]	; 0x24
 8007270:	f001 f80c 	bl	800828c <strncmp>
 8007274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007276:	2800      	cmp	r0, #0
 8007278:	d1d8      	bne.n	800722c <__gethex+0x1fc>
 800727a:	461e      	mov	r6, r3
 800727c:	e791      	b.n	80071a2 <__gethex+0x172>
 800727e:	1eb9      	subs	r1, r7, #2
 8007280:	4628      	mov	r0, r5
 8007282:	f000 fdcc 	bl	8007e1e <__any_on>
 8007286:	2800      	cmp	r0, #0
 8007288:	d0b2      	beq.n	80071f0 <__gethex+0x1c0>
 800728a:	f04f 0a03 	mov.w	sl, #3
 800728e:	e7b1      	b.n	80071f4 <__gethex+0x1c4>
 8007290:	da09      	bge.n	80072a6 <__gethex+0x276>
 8007292:	1bf7      	subs	r7, r6, r7
 8007294:	4629      	mov	r1, r5
 8007296:	463a      	mov	r2, r7
 8007298:	9802      	ldr	r0, [sp, #8]
 800729a:	f000 fbe7 	bl	8007a6c <__lshift>
 800729e:	4605      	mov	r5, r0
 80072a0:	1be4      	subs	r4, r4, r7
 80072a2:	f100 0914 	add.w	r9, r0, #20
 80072a6:	f04f 0a00 	mov.w	sl, #0
 80072aa:	e7a8      	b.n	80071fe <__gethex+0x1ce>
 80072ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80072b0:	42a0      	cmp	r0, r4
 80072b2:	dd6b      	ble.n	800738c <__gethex+0x35c>
 80072b4:	1b04      	subs	r4, r0, r4
 80072b6:	42a6      	cmp	r6, r4
 80072b8:	dc2e      	bgt.n	8007318 <__gethex+0x2e8>
 80072ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d022      	beq.n	8007308 <__gethex+0x2d8>
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d024      	beq.n	8007310 <__gethex+0x2e0>
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d115      	bne.n	80072f6 <__gethex+0x2c6>
 80072ca:	42a6      	cmp	r6, r4
 80072cc:	d113      	bne.n	80072f6 <__gethex+0x2c6>
 80072ce:	2e01      	cmp	r6, #1
 80072d0:	dc0b      	bgt.n	80072ea <__gethex+0x2ba>
 80072d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072d6:	9a06      	ldr	r2, [sp, #24]
 80072d8:	2762      	movs	r7, #98	; 0x62
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	2301      	movs	r3, #1
 80072de:	612b      	str	r3, [r5, #16]
 80072e0:	f8c9 3000 	str.w	r3, [r9]
 80072e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072e6:	601d      	str	r5, [r3, #0]
 80072e8:	e72a      	b.n	8007140 <__gethex+0x110>
 80072ea:	1e71      	subs	r1, r6, #1
 80072ec:	4628      	mov	r0, r5
 80072ee:	f000 fd96 	bl	8007e1e <__any_on>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d1ed      	bne.n	80072d2 <__gethex+0x2a2>
 80072f6:	4629      	mov	r1, r5
 80072f8:	9802      	ldr	r0, [sp, #8]
 80072fa:	f000 f9ec 	bl	80076d6 <_Bfree>
 80072fe:	2300      	movs	r3, #0
 8007300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007302:	2750      	movs	r7, #80	; 0x50
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e71b      	b.n	8007140 <__gethex+0x110>
 8007308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0e1      	beq.n	80072d2 <__gethex+0x2a2>
 800730e:	e7f2      	b.n	80072f6 <__gethex+0x2c6>
 8007310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1dd      	bne.n	80072d2 <__gethex+0x2a2>
 8007316:	e7ee      	b.n	80072f6 <__gethex+0x2c6>
 8007318:	1e67      	subs	r7, r4, #1
 800731a:	f1ba 0f00 	cmp.w	sl, #0
 800731e:	d132      	bne.n	8007386 <__gethex+0x356>
 8007320:	b127      	cbz	r7, 800732c <__gethex+0x2fc>
 8007322:	4639      	mov	r1, r7
 8007324:	4628      	mov	r0, r5
 8007326:	f000 fd7a 	bl	8007e1e <__any_on>
 800732a:	4682      	mov	sl, r0
 800732c:	2301      	movs	r3, #1
 800732e:	117a      	asrs	r2, r7, #5
 8007330:	f007 071f 	and.w	r7, r7, #31
 8007334:	fa03 f707 	lsl.w	r7, r3, r7
 8007338:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800733c:	4621      	mov	r1, r4
 800733e:	421f      	tst	r7, r3
 8007340:	f04f 0702 	mov.w	r7, #2
 8007344:	4628      	mov	r0, r5
 8007346:	bf18      	it	ne
 8007348:	f04a 0a02 	orrne.w	sl, sl, #2
 800734c:	1b36      	subs	r6, r6, r4
 800734e:	f7ff fe1f 	bl	8006f90 <rshift>
 8007352:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007356:	f1ba 0f00 	cmp.w	sl, #0
 800735a:	d048      	beq.n	80073ee <__gethex+0x3be>
 800735c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d015      	beq.n	8007390 <__gethex+0x360>
 8007364:	2b03      	cmp	r3, #3
 8007366:	d017      	beq.n	8007398 <__gethex+0x368>
 8007368:	2b01      	cmp	r3, #1
 800736a:	d109      	bne.n	8007380 <__gethex+0x350>
 800736c:	f01a 0f02 	tst.w	sl, #2
 8007370:	d006      	beq.n	8007380 <__gethex+0x350>
 8007372:	f8d9 3000 	ldr.w	r3, [r9]
 8007376:	ea4a 0a03 	orr.w	sl, sl, r3
 800737a:	f01a 0f01 	tst.w	sl, #1
 800737e:	d10e      	bne.n	800739e <__gethex+0x36e>
 8007380:	f047 0710 	orr.w	r7, r7, #16
 8007384:	e033      	b.n	80073ee <__gethex+0x3be>
 8007386:	f04f 0a01 	mov.w	sl, #1
 800738a:	e7cf      	b.n	800732c <__gethex+0x2fc>
 800738c:	2701      	movs	r7, #1
 800738e:	e7e2      	b.n	8007356 <__gethex+0x326>
 8007390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007392:	f1c3 0301 	rsb	r3, r3, #1
 8007396:	9315      	str	r3, [sp, #84]	; 0x54
 8007398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <__gethex+0x350>
 800739e:	f04f 0c00 	mov.w	ip, #0
 80073a2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80073a6:	f105 0314 	add.w	r3, r5, #20
 80073aa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80073ae:	eb03 010a 	add.w	r1, r3, sl
 80073b2:	4618      	mov	r0, r3
 80073b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80073bc:	d01c      	beq.n	80073f8 <__gethex+0x3c8>
 80073be:	3201      	adds	r2, #1
 80073c0:	6002      	str	r2, [r0, #0]
 80073c2:	2f02      	cmp	r7, #2
 80073c4:	f105 0314 	add.w	r3, r5, #20
 80073c8:	d138      	bne.n	800743c <__gethex+0x40c>
 80073ca:	f8d8 2000 	ldr.w	r2, [r8]
 80073ce:	3a01      	subs	r2, #1
 80073d0:	42b2      	cmp	r2, r6
 80073d2:	d10a      	bne.n	80073ea <__gethex+0x3ba>
 80073d4:	2201      	movs	r2, #1
 80073d6:	1171      	asrs	r1, r6, #5
 80073d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073dc:	f006 061f 	and.w	r6, r6, #31
 80073e0:	fa02 f606 	lsl.w	r6, r2, r6
 80073e4:	421e      	tst	r6, r3
 80073e6:	bf18      	it	ne
 80073e8:	4617      	movne	r7, r2
 80073ea:	f047 0720 	orr.w	r7, r7, #32
 80073ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073f0:	601d      	str	r5, [r3, #0]
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	601c      	str	r4, [r3, #0]
 80073f6:	e6a3      	b.n	8007140 <__gethex+0x110>
 80073f8:	4299      	cmp	r1, r3
 80073fa:	f843 cc04 	str.w	ip, [r3, #-4]
 80073fe:	d8d8      	bhi.n	80073b2 <__gethex+0x382>
 8007400:	68ab      	ldr	r3, [r5, #8]
 8007402:	4599      	cmp	r9, r3
 8007404:	db12      	blt.n	800742c <__gethex+0x3fc>
 8007406:	6869      	ldr	r1, [r5, #4]
 8007408:	9802      	ldr	r0, [sp, #8]
 800740a:	3101      	adds	r1, #1
 800740c:	f000 f92f 	bl	800766e <_Balloc>
 8007410:	4683      	mov	fp, r0
 8007412:	692a      	ldr	r2, [r5, #16]
 8007414:	f105 010c 	add.w	r1, r5, #12
 8007418:	3202      	adds	r2, #2
 800741a:	0092      	lsls	r2, r2, #2
 800741c:	300c      	adds	r0, #12
 800741e:	f000 f91b 	bl	8007658 <memcpy>
 8007422:	4629      	mov	r1, r5
 8007424:	9802      	ldr	r0, [sp, #8]
 8007426:	f000 f956 	bl	80076d6 <_Bfree>
 800742a:	465d      	mov	r5, fp
 800742c:	692b      	ldr	r3, [r5, #16]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	612a      	str	r2, [r5, #16]
 8007432:	2201      	movs	r2, #1
 8007434:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007438:	615a      	str	r2, [r3, #20]
 800743a:	e7c2      	b.n	80073c2 <__gethex+0x392>
 800743c:	692a      	ldr	r2, [r5, #16]
 800743e:	454a      	cmp	r2, r9
 8007440:	dd0b      	ble.n	800745a <__gethex+0x42a>
 8007442:	2101      	movs	r1, #1
 8007444:	4628      	mov	r0, r5
 8007446:	f7ff fda3 	bl	8006f90 <rshift>
 800744a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800744e:	3401      	adds	r4, #1
 8007450:	42a3      	cmp	r3, r4
 8007452:	f6ff aed8 	blt.w	8007206 <__gethex+0x1d6>
 8007456:	2701      	movs	r7, #1
 8007458:	e7c7      	b.n	80073ea <__gethex+0x3ba>
 800745a:	f016 061f 	ands.w	r6, r6, #31
 800745e:	d0fa      	beq.n	8007456 <__gethex+0x426>
 8007460:	449a      	add	sl, r3
 8007462:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007466:	f000 f9c6 	bl	80077f6 <__hi0bits>
 800746a:	f1c6 0620 	rsb	r6, r6, #32
 800746e:	42b0      	cmp	r0, r6
 8007470:	dbe7      	blt.n	8007442 <__gethex+0x412>
 8007472:	e7f0      	b.n	8007456 <__gethex+0x426>

08007474 <L_shift>:
 8007474:	f1c2 0208 	rsb	r2, r2, #8
 8007478:	0092      	lsls	r2, r2, #2
 800747a:	b570      	push	{r4, r5, r6, lr}
 800747c:	f1c2 0620 	rsb	r6, r2, #32
 8007480:	6843      	ldr	r3, [r0, #4]
 8007482:	6804      	ldr	r4, [r0, #0]
 8007484:	fa03 f506 	lsl.w	r5, r3, r6
 8007488:	432c      	orrs	r4, r5
 800748a:	40d3      	lsrs	r3, r2
 800748c:	6004      	str	r4, [r0, #0]
 800748e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007492:	4288      	cmp	r0, r1
 8007494:	d3f4      	bcc.n	8007480 <L_shift+0xc>
 8007496:	bd70      	pop	{r4, r5, r6, pc}

08007498 <__match>:
 8007498:	b530      	push	{r4, r5, lr}
 800749a:	6803      	ldr	r3, [r0, #0]
 800749c:	3301      	adds	r3, #1
 800749e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074a2:	b914      	cbnz	r4, 80074aa <__match+0x12>
 80074a4:	6003      	str	r3, [r0, #0]
 80074a6:	2001      	movs	r0, #1
 80074a8:	bd30      	pop	{r4, r5, pc}
 80074aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80074b2:	2d19      	cmp	r5, #25
 80074b4:	bf98      	it	ls
 80074b6:	3220      	addls	r2, #32
 80074b8:	42a2      	cmp	r2, r4
 80074ba:	d0f0      	beq.n	800749e <__match+0x6>
 80074bc:	2000      	movs	r0, #0
 80074be:	e7f3      	b.n	80074a8 <__match+0x10>

080074c0 <__hexnan>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	2500      	movs	r5, #0
 80074c6:	680b      	ldr	r3, [r1, #0]
 80074c8:	4682      	mov	sl, r0
 80074ca:	115f      	asrs	r7, r3, #5
 80074cc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80074d0:	f013 031f 	ands.w	r3, r3, #31
 80074d4:	bf18      	it	ne
 80074d6:	3704      	addne	r7, #4
 80074d8:	1f3e      	subs	r6, r7, #4
 80074da:	4690      	mov	r8, r2
 80074dc:	46b1      	mov	r9, r6
 80074de:	4634      	mov	r4, r6
 80074e0:	46ab      	mov	fp, r5
 80074e2:	b087      	sub	sp, #28
 80074e4:	6801      	ldr	r1, [r0, #0]
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	f847 5c04 	str.w	r5, [r7, #-4]
 80074ec:	9502      	str	r5, [sp, #8]
 80074ee:	784a      	ldrb	r2, [r1, #1]
 80074f0:	1c4b      	adds	r3, r1, #1
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	b342      	cbz	r2, 8007548 <__hexnan+0x88>
 80074f6:	4610      	mov	r0, r2
 80074f8:	9105      	str	r1, [sp, #20]
 80074fa:	9204      	str	r2, [sp, #16]
 80074fc:	f7ff fd83 	bl	8007006 <__hexdig_fun>
 8007500:	2800      	cmp	r0, #0
 8007502:	d143      	bne.n	800758c <__hexnan+0xcc>
 8007504:	9a04      	ldr	r2, [sp, #16]
 8007506:	9905      	ldr	r1, [sp, #20]
 8007508:	2a20      	cmp	r2, #32
 800750a:	d818      	bhi.n	800753e <__hexnan+0x7e>
 800750c:	9b02      	ldr	r3, [sp, #8]
 800750e:	459b      	cmp	fp, r3
 8007510:	dd13      	ble.n	800753a <__hexnan+0x7a>
 8007512:	454c      	cmp	r4, r9
 8007514:	d206      	bcs.n	8007524 <__hexnan+0x64>
 8007516:	2d07      	cmp	r5, #7
 8007518:	dc04      	bgt.n	8007524 <__hexnan+0x64>
 800751a:	462a      	mov	r2, r5
 800751c:	4649      	mov	r1, r9
 800751e:	4620      	mov	r0, r4
 8007520:	f7ff ffa8 	bl	8007474 <L_shift>
 8007524:	4544      	cmp	r4, r8
 8007526:	d944      	bls.n	80075b2 <__hexnan+0xf2>
 8007528:	2300      	movs	r3, #0
 800752a:	f1a4 0904 	sub.w	r9, r4, #4
 800752e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007532:	461d      	mov	r5, r3
 8007534:	464c      	mov	r4, r9
 8007536:	f8cd b008 	str.w	fp, [sp, #8]
 800753a:	9903      	ldr	r1, [sp, #12]
 800753c:	e7d7      	b.n	80074ee <__hexnan+0x2e>
 800753e:	2a29      	cmp	r2, #41	; 0x29
 8007540:	d14a      	bne.n	80075d8 <__hexnan+0x118>
 8007542:	3102      	adds	r1, #2
 8007544:	f8ca 1000 	str.w	r1, [sl]
 8007548:	f1bb 0f00 	cmp.w	fp, #0
 800754c:	d044      	beq.n	80075d8 <__hexnan+0x118>
 800754e:	454c      	cmp	r4, r9
 8007550:	d206      	bcs.n	8007560 <__hexnan+0xa0>
 8007552:	2d07      	cmp	r5, #7
 8007554:	dc04      	bgt.n	8007560 <__hexnan+0xa0>
 8007556:	462a      	mov	r2, r5
 8007558:	4649      	mov	r1, r9
 800755a:	4620      	mov	r0, r4
 800755c:	f7ff ff8a 	bl	8007474 <L_shift>
 8007560:	4544      	cmp	r4, r8
 8007562:	d928      	bls.n	80075b6 <__hexnan+0xf6>
 8007564:	4643      	mov	r3, r8
 8007566:	f854 2b04 	ldr.w	r2, [r4], #4
 800756a:	42a6      	cmp	r6, r4
 800756c:	f843 2b04 	str.w	r2, [r3], #4
 8007570:	d2f9      	bcs.n	8007566 <__hexnan+0xa6>
 8007572:	2200      	movs	r2, #0
 8007574:	f843 2b04 	str.w	r2, [r3], #4
 8007578:	429e      	cmp	r6, r3
 800757a:	d2fb      	bcs.n	8007574 <__hexnan+0xb4>
 800757c:	6833      	ldr	r3, [r6, #0]
 800757e:	b91b      	cbnz	r3, 8007588 <__hexnan+0xc8>
 8007580:	4546      	cmp	r6, r8
 8007582:	d127      	bne.n	80075d4 <__hexnan+0x114>
 8007584:	2301      	movs	r3, #1
 8007586:	6033      	str	r3, [r6, #0]
 8007588:	2005      	movs	r0, #5
 800758a:	e026      	b.n	80075da <__hexnan+0x11a>
 800758c:	3501      	adds	r5, #1
 800758e:	2d08      	cmp	r5, #8
 8007590:	f10b 0b01 	add.w	fp, fp, #1
 8007594:	dd06      	ble.n	80075a4 <__hexnan+0xe4>
 8007596:	4544      	cmp	r4, r8
 8007598:	d9cf      	bls.n	800753a <__hexnan+0x7a>
 800759a:	2300      	movs	r3, #0
 800759c:	2501      	movs	r5, #1
 800759e:	f844 3c04 	str.w	r3, [r4, #-4]
 80075a2:	3c04      	subs	r4, #4
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	f000 000f 	and.w	r0, r0, #15
 80075aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80075ae:	6020      	str	r0, [r4, #0]
 80075b0:	e7c3      	b.n	800753a <__hexnan+0x7a>
 80075b2:	2508      	movs	r5, #8
 80075b4:	e7c1      	b.n	800753a <__hexnan+0x7a>
 80075b6:	9b01      	ldr	r3, [sp, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0df      	beq.n	800757c <__hexnan+0xbc>
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295
 80075c0:	f1c3 0320 	rsb	r3, r3, #32
 80075c4:	fa22 f303 	lsr.w	r3, r2, r3
 80075c8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80075cc:	401a      	ands	r2, r3
 80075ce:	f847 2c04 	str.w	r2, [r7, #-4]
 80075d2:	e7d3      	b.n	800757c <__hexnan+0xbc>
 80075d4:	3e04      	subs	r6, #4
 80075d6:	e7d1      	b.n	800757c <__hexnan+0xbc>
 80075d8:	2004      	movs	r0, #4
 80075da:	b007      	add	sp, #28
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075e0 <__locale_ctype_ptr_l>:
 80075e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80075e4:	4770      	bx	lr

080075e6 <__localeconv_l>:
 80075e6:	30f0      	adds	r0, #240	; 0xf0
 80075e8:	4770      	bx	lr
	...

080075ec <_localeconv_r>:
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <_localeconv_r+0x14>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6a18      	ldr	r0, [r3, #32]
 80075f2:	4b04      	ldr	r3, [pc, #16]	; (8007604 <_localeconv_r+0x18>)
 80075f4:	2800      	cmp	r0, #0
 80075f6:	bf08      	it	eq
 80075f8:	4618      	moveq	r0, r3
 80075fa:	30f0      	adds	r0, #240	; 0xf0
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20000010 	.word	0x20000010
 8007604:	20000074 	.word	0x20000074

08007608 <malloc>:
 8007608:	4b02      	ldr	r3, [pc, #8]	; (8007614 <malloc+0xc>)
 800760a:	4601      	mov	r1, r0
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f000 bc81 	b.w	8007f14 <_malloc_r>
 8007612:	bf00      	nop
 8007614:	20000010 	.word	0x20000010

08007618 <__ascii_mbtowc>:
 8007618:	b082      	sub	sp, #8
 800761a:	b901      	cbnz	r1, 800761e <__ascii_mbtowc+0x6>
 800761c:	a901      	add	r1, sp, #4
 800761e:	b142      	cbz	r2, 8007632 <__ascii_mbtowc+0x1a>
 8007620:	b14b      	cbz	r3, 8007636 <__ascii_mbtowc+0x1e>
 8007622:	7813      	ldrb	r3, [r2, #0]
 8007624:	600b      	str	r3, [r1, #0]
 8007626:	7812      	ldrb	r2, [r2, #0]
 8007628:	1c10      	adds	r0, r2, #0
 800762a:	bf18      	it	ne
 800762c:	2001      	movne	r0, #1
 800762e:	b002      	add	sp, #8
 8007630:	4770      	bx	lr
 8007632:	4610      	mov	r0, r2
 8007634:	e7fb      	b.n	800762e <__ascii_mbtowc+0x16>
 8007636:	f06f 0001 	mvn.w	r0, #1
 800763a:	e7f8      	b.n	800762e <__ascii_mbtowc+0x16>

0800763c <memchr>:
 800763c:	b510      	push	{r4, lr}
 800763e:	b2c9      	uxtb	r1, r1
 8007640:	4402      	add	r2, r0
 8007642:	4290      	cmp	r0, r2
 8007644:	4603      	mov	r3, r0
 8007646:	d101      	bne.n	800764c <memchr+0x10>
 8007648:	2300      	movs	r3, #0
 800764a:	e003      	b.n	8007654 <memchr+0x18>
 800764c:	781c      	ldrb	r4, [r3, #0]
 800764e:	3001      	adds	r0, #1
 8007650:	428c      	cmp	r4, r1
 8007652:	d1f6      	bne.n	8007642 <memchr+0x6>
 8007654:	4618      	mov	r0, r3
 8007656:	bd10      	pop	{r4, pc}

08007658 <memcpy>:
 8007658:	b510      	push	{r4, lr}
 800765a:	1e43      	subs	r3, r0, #1
 800765c:	440a      	add	r2, r1
 800765e:	4291      	cmp	r1, r2
 8007660:	d100      	bne.n	8007664 <memcpy+0xc>
 8007662:	bd10      	pop	{r4, pc}
 8007664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800766c:	e7f7      	b.n	800765e <memcpy+0x6>

0800766e <_Balloc>:
 800766e:	b570      	push	{r4, r5, r6, lr}
 8007670:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007672:	4604      	mov	r4, r0
 8007674:	460e      	mov	r6, r1
 8007676:	b93d      	cbnz	r5, 8007688 <_Balloc+0x1a>
 8007678:	2010      	movs	r0, #16
 800767a:	f7ff ffc5 	bl	8007608 <malloc>
 800767e:	6260      	str	r0, [r4, #36]	; 0x24
 8007680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007684:	6005      	str	r5, [r0, #0]
 8007686:	60c5      	str	r5, [r0, #12]
 8007688:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800768a:	68eb      	ldr	r3, [r5, #12]
 800768c:	b183      	cbz	r3, 80076b0 <_Balloc+0x42>
 800768e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007696:	b9b8      	cbnz	r0, 80076c8 <_Balloc+0x5a>
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f506 	lsl.w	r5, r1, r6
 800769e:	1d6a      	adds	r2, r5, #5
 80076a0:	0092      	lsls	r2, r2, #2
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fbdc 	bl	8007e60 <_calloc_r>
 80076a8:	b160      	cbz	r0, 80076c4 <_Balloc+0x56>
 80076aa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80076ae:	e00e      	b.n	80076ce <_Balloc+0x60>
 80076b0:	2221      	movs	r2, #33	; 0x21
 80076b2:	2104      	movs	r1, #4
 80076b4:	4620      	mov	r0, r4
 80076b6:	f000 fbd3 	bl	8007e60 <_calloc_r>
 80076ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076bc:	60e8      	str	r0, [r5, #12]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e4      	bne.n	800768e <_Balloc+0x20>
 80076c4:	2000      	movs	r0, #0
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	6802      	ldr	r2, [r0, #0]
 80076ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80076ce:	2300      	movs	r3, #0
 80076d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076d4:	e7f7      	b.n	80076c6 <_Balloc+0x58>

080076d6 <_Bfree>:
 80076d6:	b570      	push	{r4, r5, r6, lr}
 80076d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076da:	4606      	mov	r6, r0
 80076dc:	460d      	mov	r5, r1
 80076de:	b93c      	cbnz	r4, 80076f0 <_Bfree+0x1a>
 80076e0:	2010      	movs	r0, #16
 80076e2:	f7ff ff91 	bl	8007608 <malloc>
 80076e6:	6270      	str	r0, [r6, #36]	; 0x24
 80076e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076ec:	6004      	str	r4, [r0, #0]
 80076ee:	60c4      	str	r4, [r0, #12]
 80076f0:	b13d      	cbz	r5, 8007702 <_Bfree+0x2c>
 80076f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80076f4:	686a      	ldr	r2, [r5, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076fc:	6029      	str	r1, [r5, #0]
 80076fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007702:	bd70      	pop	{r4, r5, r6, pc}

08007704 <__multadd>:
 8007704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007708:	461f      	mov	r7, r3
 800770a:	4606      	mov	r6, r0
 800770c:	460c      	mov	r4, r1
 800770e:	2300      	movs	r3, #0
 8007710:	690d      	ldr	r5, [r1, #16]
 8007712:	f101 0c14 	add.w	ip, r1, #20
 8007716:	f8dc 0000 	ldr.w	r0, [ip]
 800771a:	3301      	adds	r3, #1
 800771c:	b281      	uxth	r1, r0
 800771e:	fb02 7101 	mla	r1, r2, r1, r7
 8007722:	0c00      	lsrs	r0, r0, #16
 8007724:	0c0f      	lsrs	r7, r1, #16
 8007726:	fb02 7000 	mla	r0, r2, r0, r7
 800772a:	b289      	uxth	r1, r1
 800772c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007730:	429d      	cmp	r5, r3
 8007732:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007736:	f84c 1b04 	str.w	r1, [ip], #4
 800773a:	dcec      	bgt.n	8007716 <__multadd+0x12>
 800773c:	b1d7      	cbz	r7, 8007774 <__multadd+0x70>
 800773e:	68a3      	ldr	r3, [r4, #8]
 8007740:	42ab      	cmp	r3, r5
 8007742:	dc12      	bgt.n	800776a <__multadd+0x66>
 8007744:	6861      	ldr	r1, [r4, #4]
 8007746:	4630      	mov	r0, r6
 8007748:	3101      	adds	r1, #1
 800774a:	f7ff ff90 	bl	800766e <_Balloc>
 800774e:	4680      	mov	r8, r0
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	f104 010c 	add.w	r1, r4, #12
 8007756:	3202      	adds	r2, #2
 8007758:	0092      	lsls	r2, r2, #2
 800775a:	300c      	adds	r0, #12
 800775c:	f7ff ff7c 	bl	8007658 <memcpy>
 8007760:	4621      	mov	r1, r4
 8007762:	4630      	mov	r0, r6
 8007764:	f7ff ffb7 	bl	80076d6 <_Bfree>
 8007768:	4644      	mov	r4, r8
 800776a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800776e:	3501      	adds	r5, #1
 8007770:	615f      	str	r7, [r3, #20]
 8007772:	6125      	str	r5, [r4, #16]
 8007774:	4620      	mov	r0, r4
 8007776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800777a <__s2b>:
 800777a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800777e:	4615      	mov	r5, r2
 8007780:	2209      	movs	r2, #9
 8007782:	461f      	mov	r7, r3
 8007784:	3308      	adds	r3, #8
 8007786:	460c      	mov	r4, r1
 8007788:	fb93 f3f2 	sdiv	r3, r3, r2
 800778c:	4606      	mov	r6, r0
 800778e:	2201      	movs	r2, #1
 8007790:	2100      	movs	r1, #0
 8007792:	429a      	cmp	r2, r3
 8007794:	db20      	blt.n	80077d8 <__s2b+0x5e>
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff ff69 	bl	800766e <_Balloc>
 800779c:	9b08      	ldr	r3, [sp, #32]
 800779e:	2d09      	cmp	r5, #9
 80077a0:	6143      	str	r3, [r0, #20]
 80077a2:	f04f 0301 	mov.w	r3, #1
 80077a6:	6103      	str	r3, [r0, #16]
 80077a8:	dd19      	ble.n	80077de <__s2b+0x64>
 80077aa:	f104 0809 	add.w	r8, r4, #9
 80077ae:	46c1      	mov	r9, r8
 80077b0:	442c      	add	r4, r5
 80077b2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80077b6:	4601      	mov	r1, r0
 80077b8:	3b30      	subs	r3, #48	; 0x30
 80077ba:	220a      	movs	r2, #10
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff ffa1 	bl	8007704 <__multadd>
 80077c2:	45a1      	cmp	r9, r4
 80077c4:	d1f5      	bne.n	80077b2 <__s2b+0x38>
 80077c6:	eb08 0405 	add.w	r4, r8, r5
 80077ca:	3c08      	subs	r4, #8
 80077cc:	1b2d      	subs	r5, r5, r4
 80077ce:	1963      	adds	r3, r4, r5
 80077d0:	42bb      	cmp	r3, r7
 80077d2:	db07      	blt.n	80077e4 <__s2b+0x6a>
 80077d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d8:	0052      	lsls	r2, r2, #1
 80077da:	3101      	adds	r1, #1
 80077dc:	e7d9      	b.n	8007792 <__s2b+0x18>
 80077de:	340a      	adds	r4, #10
 80077e0:	2509      	movs	r5, #9
 80077e2:	e7f3      	b.n	80077cc <__s2b+0x52>
 80077e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80077e8:	4601      	mov	r1, r0
 80077ea:	3b30      	subs	r3, #48	; 0x30
 80077ec:	220a      	movs	r2, #10
 80077ee:	4630      	mov	r0, r6
 80077f0:	f7ff ff88 	bl	8007704 <__multadd>
 80077f4:	e7eb      	b.n	80077ce <__s2b+0x54>

080077f6 <__hi0bits>:
 80077f6:	0c02      	lsrs	r2, r0, #16
 80077f8:	0412      	lsls	r2, r2, #16
 80077fa:	4603      	mov	r3, r0
 80077fc:	b9b2      	cbnz	r2, 800782c <__hi0bits+0x36>
 80077fe:	0403      	lsls	r3, r0, #16
 8007800:	2010      	movs	r0, #16
 8007802:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007806:	bf04      	itt	eq
 8007808:	021b      	lsleq	r3, r3, #8
 800780a:	3008      	addeq	r0, #8
 800780c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007810:	bf04      	itt	eq
 8007812:	011b      	lsleq	r3, r3, #4
 8007814:	3004      	addeq	r0, #4
 8007816:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800781a:	bf04      	itt	eq
 800781c:	009b      	lsleq	r3, r3, #2
 800781e:	3002      	addeq	r0, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	db06      	blt.n	8007832 <__hi0bits+0x3c>
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	d503      	bpl.n	8007830 <__hi0bits+0x3a>
 8007828:	3001      	adds	r0, #1
 800782a:	4770      	bx	lr
 800782c:	2000      	movs	r0, #0
 800782e:	e7e8      	b.n	8007802 <__hi0bits+0xc>
 8007830:	2020      	movs	r0, #32
 8007832:	4770      	bx	lr

08007834 <__lo0bits>:
 8007834:	6803      	ldr	r3, [r0, #0]
 8007836:	4601      	mov	r1, r0
 8007838:	f013 0207 	ands.w	r2, r3, #7
 800783c:	d00b      	beq.n	8007856 <__lo0bits+0x22>
 800783e:	07da      	lsls	r2, r3, #31
 8007840:	d423      	bmi.n	800788a <__lo0bits+0x56>
 8007842:	0798      	lsls	r0, r3, #30
 8007844:	bf49      	itett	mi
 8007846:	085b      	lsrmi	r3, r3, #1
 8007848:	089b      	lsrpl	r3, r3, #2
 800784a:	2001      	movmi	r0, #1
 800784c:	600b      	strmi	r3, [r1, #0]
 800784e:	bf5c      	itt	pl
 8007850:	600b      	strpl	r3, [r1, #0]
 8007852:	2002      	movpl	r0, #2
 8007854:	4770      	bx	lr
 8007856:	b298      	uxth	r0, r3
 8007858:	b9a8      	cbnz	r0, 8007886 <__lo0bits+0x52>
 800785a:	2010      	movs	r0, #16
 800785c:	0c1b      	lsrs	r3, r3, #16
 800785e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007862:	bf04      	itt	eq
 8007864:	0a1b      	lsreq	r3, r3, #8
 8007866:	3008      	addeq	r0, #8
 8007868:	071a      	lsls	r2, r3, #28
 800786a:	bf04      	itt	eq
 800786c:	091b      	lsreq	r3, r3, #4
 800786e:	3004      	addeq	r0, #4
 8007870:	079a      	lsls	r2, r3, #30
 8007872:	bf04      	itt	eq
 8007874:	089b      	lsreq	r3, r3, #2
 8007876:	3002      	addeq	r0, #2
 8007878:	07da      	lsls	r2, r3, #31
 800787a:	d402      	bmi.n	8007882 <__lo0bits+0x4e>
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	d006      	beq.n	800788e <__lo0bits+0x5a>
 8007880:	3001      	adds	r0, #1
 8007882:	600b      	str	r3, [r1, #0]
 8007884:	4770      	bx	lr
 8007886:	4610      	mov	r0, r2
 8007888:	e7e9      	b.n	800785e <__lo0bits+0x2a>
 800788a:	2000      	movs	r0, #0
 800788c:	4770      	bx	lr
 800788e:	2020      	movs	r0, #32
 8007890:	4770      	bx	lr

08007892 <__i2b>:
 8007892:	b510      	push	{r4, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	2101      	movs	r1, #1
 8007898:	f7ff fee9 	bl	800766e <_Balloc>
 800789c:	2201      	movs	r2, #1
 800789e:	6144      	str	r4, [r0, #20]
 80078a0:	6102      	str	r2, [r0, #16]
 80078a2:	bd10      	pop	{r4, pc}

080078a4 <__multiply>:
 80078a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	4614      	mov	r4, r2
 80078aa:	690a      	ldr	r2, [r1, #16]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	4688      	mov	r8, r1
 80078b0:	429a      	cmp	r2, r3
 80078b2:	bfbe      	ittt	lt
 80078b4:	460b      	movlt	r3, r1
 80078b6:	46a0      	movlt	r8, r4
 80078b8:	461c      	movlt	r4, r3
 80078ba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078be:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80078c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078ca:	eb07 0609 	add.w	r6, r7, r9
 80078ce:	42b3      	cmp	r3, r6
 80078d0:	bfb8      	it	lt
 80078d2:	3101      	addlt	r1, #1
 80078d4:	f7ff fecb 	bl	800766e <_Balloc>
 80078d8:	f100 0514 	add.w	r5, r0, #20
 80078dc:	462b      	mov	r3, r5
 80078de:	2200      	movs	r2, #0
 80078e0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80078e4:	4573      	cmp	r3, lr
 80078e6:	d316      	bcc.n	8007916 <__multiply+0x72>
 80078e8:	f104 0214 	add.w	r2, r4, #20
 80078ec:	f108 0114 	add.w	r1, r8, #20
 80078f0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80078f4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	9b00      	ldr	r3, [sp, #0]
 80078fc:	9201      	str	r2, [sp, #4]
 80078fe:	4293      	cmp	r3, r2
 8007900:	d80c      	bhi.n	800791c <__multiply+0x78>
 8007902:	2e00      	cmp	r6, #0
 8007904:	dd03      	ble.n	800790e <__multiply+0x6a>
 8007906:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800790a:	2b00      	cmp	r3, #0
 800790c:	d05d      	beq.n	80079ca <__multiply+0x126>
 800790e:	6106      	str	r6, [r0, #16]
 8007910:	b003      	add	sp, #12
 8007912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007916:	f843 2b04 	str.w	r2, [r3], #4
 800791a:	e7e3      	b.n	80078e4 <__multiply+0x40>
 800791c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007920:	f1bb 0f00 	cmp.w	fp, #0
 8007924:	d023      	beq.n	800796e <__multiply+0xca>
 8007926:	4689      	mov	r9, r1
 8007928:	46ac      	mov	ip, r5
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007932:	f8dc a000 	ldr.w	sl, [ip]
 8007936:	b2a3      	uxth	r3, r4
 8007938:	fa1f fa8a 	uxth.w	sl, sl
 800793c:	fb0b a303 	mla	r3, fp, r3, sl
 8007940:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007944:	f8dc 4000 	ldr.w	r4, [ip]
 8007948:	4443      	add	r3, r8
 800794a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800794e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007952:	46e2      	mov	sl, ip
 8007954:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007958:	b29b      	uxth	r3, r3
 800795a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800795e:	454f      	cmp	r7, r9
 8007960:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007964:	f84a 3b04 	str.w	r3, [sl], #4
 8007968:	d82b      	bhi.n	80079c2 <__multiply+0x11e>
 800796a:	f8cc 8004 	str.w	r8, [ip, #4]
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	3204      	adds	r2, #4
 8007972:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007976:	f1ba 0f00 	cmp.w	sl, #0
 800797a:	d020      	beq.n	80079be <__multiply+0x11a>
 800797c:	4689      	mov	r9, r1
 800797e:	46a8      	mov	r8, r5
 8007980:	f04f 0b00 	mov.w	fp, #0
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	f8b9 c000 	ldrh.w	ip, [r9]
 800798a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800798e:	b29b      	uxth	r3, r3
 8007990:	fb0a 440c 	mla	r4, sl, ip, r4
 8007994:	46c4      	mov	ip, r8
 8007996:	445c      	add	r4, fp
 8007998:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800799c:	f84c 3b04 	str.w	r3, [ip], #4
 80079a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80079a4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80079a8:	0c1b      	lsrs	r3, r3, #16
 80079aa:	fb0a b303 	mla	r3, sl, r3, fp
 80079ae:	454f      	cmp	r7, r9
 80079b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80079b4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80079b8:	d805      	bhi.n	80079c6 <__multiply+0x122>
 80079ba:	f8c8 3004 	str.w	r3, [r8, #4]
 80079be:	3504      	adds	r5, #4
 80079c0:	e79b      	b.n	80078fa <__multiply+0x56>
 80079c2:	46d4      	mov	ip, sl
 80079c4:	e7b3      	b.n	800792e <__multiply+0x8a>
 80079c6:	46e0      	mov	r8, ip
 80079c8:	e7dd      	b.n	8007986 <__multiply+0xe2>
 80079ca:	3e01      	subs	r6, #1
 80079cc:	e799      	b.n	8007902 <__multiply+0x5e>
	...

080079d0 <__pow5mult>:
 80079d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d4:	4615      	mov	r5, r2
 80079d6:	f012 0203 	ands.w	r2, r2, #3
 80079da:	4606      	mov	r6, r0
 80079dc:	460f      	mov	r7, r1
 80079de:	d007      	beq.n	80079f0 <__pow5mult+0x20>
 80079e0:	4c21      	ldr	r4, [pc, #132]	; (8007a68 <__pow5mult+0x98>)
 80079e2:	3a01      	subs	r2, #1
 80079e4:	2300      	movs	r3, #0
 80079e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079ea:	f7ff fe8b 	bl	8007704 <__multadd>
 80079ee:	4607      	mov	r7, r0
 80079f0:	10ad      	asrs	r5, r5, #2
 80079f2:	d035      	beq.n	8007a60 <__pow5mult+0x90>
 80079f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079f6:	b93c      	cbnz	r4, 8007a08 <__pow5mult+0x38>
 80079f8:	2010      	movs	r0, #16
 80079fa:	f7ff fe05 	bl	8007608 <malloc>
 80079fe:	6270      	str	r0, [r6, #36]	; 0x24
 8007a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a04:	6004      	str	r4, [r0, #0]
 8007a06:	60c4      	str	r4, [r0, #12]
 8007a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a10:	b94c      	cbnz	r4, 8007a26 <__pow5mult+0x56>
 8007a12:	f240 2171 	movw	r1, #625	; 0x271
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff ff3b 	bl	8007892 <__i2b>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4604      	mov	r4, r0
 8007a20:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	f04f 0800 	mov.w	r8, #0
 8007a2a:	07eb      	lsls	r3, r5, #31
 8007a2c:	d50a      	bpl.n	8007a44 <__pow5mult+0x74>
 8007a2e:	4639      	mov	r1, r7
 8007a30:	4622      	mov	r2, r4
 8007a32:	4630      	mov	r0, r6
 8007a34:	f7ff ff36 	bl	80078a4 <__multiply>
 8007a38:	4681      	mov	r9, r0
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff fe4a 	bl	80076d6 <_Bfree>
 8007a42:	464f      	mov	r7, r9
 8007a44:	106d      	asrs	r5, r5, #1
 8007a46:	d00b      	beq.n	8007a60 <__pow5mult+0x90>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	b938      	cbnz	r0, 8007a5c <__pow5mult+0x8c>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7ff ff27 	bl	80078a4 <__multiply>
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	f8c0 8000 	str.w	r8, [r0]
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	e7e4      	b.n	8007a2a <__pow5mult+0x5a>
 8007a60:	4638      	mov	r0, r7
 8007a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a66:	bf00      	nop
 8007a68:	080093f0 	.word	0x080093f0

08007a6c <__lshift>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	460c      	mov	r4, r1
 8007a72:	4607      	mov	r7, r0
 8007a74:	4616      	mov	r6, r2
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a7c:	eb0a 0903 	add.w	r9, sl, r3
 8007a80:	6849      	ldr	r1, [r1, #4]
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	f109 0501 	add.w	r5, r9, #1
 8007a88:	42ab      	cmp	r3, r5
 8007a8a:	db32      	blt.n	8007af2 <__lshift+0x86>
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	f7ff fdee 	bl	800766e <_Balloc>
 8007a92:	2300      	movs	r3, #0
 8007a94:	4680      	mov	r8, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	f100 0114 	add.w	r1, r0, #20
 8007a9c:	4553      	cmp	r3, sl
 8007a9e:	db2b      	blt.n	8007af8 <__lshift+0x8c>
 8007aa0:	6920      	ldr	r0, [r4, #16]
 8007aa2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007aa6:	f104 0314 	add.w	r3, r4, #20
 8007aaa:	f016 021f 	ands.w	r2, r6, #31
 8007aae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ab2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ab6:	d025      	beq.n	8007b04 <__lshift+0x98>
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f1c2 0e20 	rsb	lr, r2, #32
 8007abe:	468a      	mov	sl, r1
 8007ac0:	681e      	ldr	r6, [r3, #0]
 8007ac2:	4096      	lsls	r6, r2
 8007ac4:	4330      	orrs	r0, r6
 8007ac6:	f84a 0b04 	str.w	r0, [sl], #4
 8007aca:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ace:	459c      	cmp	ip, r3
 8007ad0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007ad4:	d814      	bhi.n	8007b00 <__lshift+0x94>
 8007ad6:	6048      	str	r0, [r1, #4]
 8007ad8:	b108      	cbz	r0, 8007ade <__lshift+0x72>
 8007ada:	f109 0502 	add.w	r5, r9, #2
 8007ade:	3d01      	subs	r5, #1
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	f7ff fdf5 	bl	80076d6 <_Bfree>
 8007aec:	4640      	mov	r0, r8
 8007aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af2:	3101      	adds	r1, #1
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	e7c7      	b.n	8007a88 <__lshift+0x1c>
 8007af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007afc:	3301      	adds	r3, #1
 8007afe:	e7cd      	b.n	8007a9c <__lshift+0x30>
 8007b00:	4651      	mov	r1, sl
 8007b02:	e7dc      	b.n	8007abe <__lshift+0x52>
 8007b04:	3904      	subs	r1, #4
 8007b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b0a:	459c      	cmp	ip, r3
 8007b0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b10:	d8f9      	bhi.n	8007b06 <__lshift+0x9a>
 8007b12:	e7e4      	b.n	8007ade <__lshift+0x72>

08007b14 <__mcmp>:
 8007b14:	6903      	ldr	r3, [r0, #16]
 8007b16:	690a      	ldr	r2, [r1, #16]
 8007b18:	b530      	push	{r4, r5, lr}
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	d10c      	bne.n	8007b38 <__mcmp+0x24>
 8007b1e:	0092      	lsls	r2, r2, #2
 8007b20:	3014      	adds	r0, #20
 8007b22:	3114      	adds	r1, #20
 8007b24:	1884      	adds	r4, r0, r2
 8007b26:	4411      	add	r1, r2
 8007b28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b30:	4295      	cmp	r5, r2
 8007b32:	d003      	beq.n	8007b3c <__mcmp+0x28>
 8007b34:	d305      	bcc.n	8007b42 <__mcmp+0x2e>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4618      	mov	r0, r3
 8007b3a:	bd30      	pop	{r4, r5, pc}
 8007b3c:	42a0      	cmp	r0, r4
 8007b3e:	d3f3      	bcc.n	8007b28 <__mcmp+0x14>
 8007b40:	e7fa      	b.n	8007b38 <__mcmp+0x24>
 8007b42:	f04f 33ff 	mov.w	r3, #4294967295
 8007b46:	e7f7      	b.n	8007b38 <__mcmp+0x24>

08007b48 <__mdiff>:
 8007b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	4607      	mov	r7, r0
 8007b50:	4611      	mov	r1, r2
 8007b52:	4628      	mov	r0, r5
 8007b54:	4614      	mov	r4, r2
 8007b56:	f7ff ffdd 	bl	8007b14 <__mcmp>
 8007b5a:	1e06      	subs	r6, r0, #0
 8007b5c:	d108      	bne.n	8007b70 <__mdiff+0x28>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4638      	mov	r0, r7
 8007b62:	f7ff fd84 	bl	800766e <_Balloc>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	bfa4      	itt	ge
 8007b72:	4623      	movge	r3, r4
 8007b74:	462c      	movge	r4, r5
 8007b76:	4638      	mov	r0, r7
 8007b78:	6861      	ldr	r1, [r4, #4]
 8007b7a:	bfa6      	itte	ge
 8007b7c:	461d      	movge	r5, r3
 8007b7e:	2600      	movge	r6, #0
 8007b80:	2601      	movlt	r6, #1
 8007b82:	f7ff fd74 	bl	800766e <_Balloc>
 8007b86:	f04f 0e00 	mov.w	lr, #0
 8007b8a:	60c6      	str	r6, [r0, #12]
 8007b8c:	692b      	ldr	r3, [r5, #16]
 8007b8e:	6926      	ldr	r6, [r4, #16]
 8007b90:	f104 0214 	add.w	r2, r4, #20
 8007b94:	f105 0914 	add.w	r9, r5, #20
 8007b98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007b9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ba0:	f100 0114 	add.w	r1, r0, #20
 8007ba4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ba8:	f859 5b04 	ldr.w	r5, [r9], #4
 8007bac:	fa1f f38a 	uxth.w	r3, sl
 8007bb0:	4473      	add	r3, lr
 8007bb2:	b2ac      	uxth	r4, r5
 8007bb4:	1b1b      	subs	r3, r3, r4
 8007bb6:	0c2c      	lsrs	r4, r5, #16
 8007bb8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007bbc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007bc6:	45c8      	cmp	r8, r9
 8007bc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007bcc:	4694      	mov	ip, r2
 8007bce:	f841 4b04 	str.w	r4, [r1], #4
 8007bd2:	d8e7      	bhi.n	8007ba4 <__mdiff+0x5c>
 8007bd4:	45bc      	cmp	ip, r7
 8007bd6:	d304      	bcc.n	8007be2 <__mdiff+0x9a>
 8007bd8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007bdc:	b183      	cbz	r3, 8007c00 <__mdiff+0xb8>
 8007bde:	6106      	str	r6, [r0, #16]
 8007be0:	e7c4      	b.n	8007b6c <__mdiff+0x24>
 8007be2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007be6:	b2a2      	uxth	r2, r4
 8007be8:	4472      	add	r2, lr
 8007bea:	1413      	asrs	r3, r2, #16
 8007bec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007bf0:	b292      	uxth	r2, r2
 8007bf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bf6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007bfa:	f841 2b04 	str.w	r2, [r1], #4
 8007bfe:	e7e9      	b.n	8007bd4 <__mdiff+0x8c>
 8007c00:	3e01      	subs	r6, #1
 8007c02:	e7e9      	b.n	8007bd8 <__mdiff+0x90>

08007c04 <__ulp>:
 8007c04:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <__ulp+0x44>)
 8007c06:	400b      	ands	r3, r1
 8007c08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	dd02      	ble.n	8007c16 <__ulp+0x12>
 8007c10:	2000      	movs	r0, #0
 8007c12:	4619      	mov	r1, r3
 8007c14:	4770      	bx	lr
 8007c16:	425b      	negs	r3, r3
 8007c18:	151b      	asrs	r3, r3, #20
 8007c1a:	2b13      	cmp	r3, #19
 8007c1c:	f04f 0000 	mov.w	r0, #0
 8007c20:	f04f 0100 	mov.w	r1, #0
 8007c24:	dc04      	bgt.n	8007c30 <__ulp+0x2c>
 8007c26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c2a:	fa42 f103 	asr.w	r1, r2, r3
 8007c2e:	4770      	bx	lr
 8007c30:	2201      	movs	r2, #1
 8007c32:	3b14      	subs	r3, #20
 8007c34:	2b1e      	cmp	r3, #30
 8007c36:	bfce      	itee	gt
 8007c38:	4613      	movgt	r3, r2
 8007c3a:	f1c3 031f 	rsble	r3, r3, #31
 8007c3e:	fa02 f303 	lslle.w	r3, r2, r3
 8007c42:	4618      	mov	r0, r3
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	7ff00000 	.word	0x7ff00000

08007c4c <__b2d>:
 8007c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c50:	6907      	ldr	r7, [r0, #16]
 8007c52:	f100 0914 	add.w	r9, r0, #20
 8007c56:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007c5a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007c5e:	f1a7 0804 	sub.w	r8, r7, #4
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7ff fdc7 	bl	80077f6 <__hi0bits>
 8007c68:	f1c0 0320 	rsb	r3, r0, #32
 8007c6c:	280a      	cmp	r0, #10
 8007c6e:	600b      	str	r3, [r1, #0]
 8007c70:	491e      	ldr	r1, [pc, #120]	; (8007cec <__b2d+0xa0>)
 8007c72:	dc17      	bgt.n	8007ca4 <__b2d+0x58>
 8007c74:	45c1      	cmp	r9, r8
 8007c76:	bf28      	it	cs
 8007c78:	2200      	movcs	r2, #0
 8007c7a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c7e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007c82:	bf38      	it	cc
 8007c84:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c88:	ea43 0501 	orr.w	r5, r3, r1
 8007c8c:	f100 0315 	add.w	r3, r0, #21
 8007c90:	fa06 f303 	lsl.w	r3, r6, r3
 8007c94:	fa22 f20c 	lsr.w	r2, r2, ip
 8007c98:	ea43 0402 	orr.w	r4, r3, r2
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca4:	45c1      	cmp	r9, r8
 8007ca6:	bf3a      	itte	cc
 8007ca8:	f1a7 0808 	subcc.w	r8, r7, #8
 8007cac:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007cb0:	2200      	movcs	r2, #0
 8007cb2:	f1b0 030b 	subs.w	r3, r0, #11
 8007cb6:	d015      	beq.n	8007ce4 <__b2d+0x98>
 8007cb8:	409e      	lsls	r6, r3
 8007cba:	f1c3 0720 	rsb	r7, r3, #32
 8007cbe:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007cc2:	fa22 f107 	lsr.w	r1, r2, r7
 8007cc6:	45c8      	cmp	r8, r9
 8007cc8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007ccc:	ea46 0501 	orr.w	r5, r6, r1
 8007cd0:	bf94      	ite	ls
 8007cd2:	2100      	movls	r1, #0
 8007cd4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007cd8:	fa02 f003 	lsl.w	r0, r2, r3
 8007cdc:	40f9      	lsrs	r1, r7
 8007cde:	ea40 0401 	orr.w	r4, r0, r1
 8007ce2:	e7db      	b.n	8007c9c <__b2d+0x50>
 8007ce4:	ea46 0501 	orr.w	r5, r6, r1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	e7d7      	b.n	8007c9c <__b2d+0x50>
 8007cec:	3ff00000 	.word	0x3ff00000

08007cf0 <__d2b>:
 8007cf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007cf4:	461c      	mov	r4, r3
 8007cf6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	4690      	mov	r8, r2
 8007cfe:	f7ff fcb6 	bl	800766e <_Balloc>
 8007d02:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007d06:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007d0a:	4607      	mov	r7, r0
 8007d0c:	bb34      	cbnz	r4, 8007d5c <__d2b+0x6c>
 8007d0e:	9201      	str	r2, [sp, #4]
 8007d10:	f1b8 0200 	subs.w	r2, r8, #0
 8007d14:	d027      	beq.n	8007d66 <__d2b+0x76>
 8007d16:	a802      	add	r0, sp, #8
 8007d18:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007d1c:	f7ff fd8a 	bl	8007834 <__lo0bits>
 8007d20:	9900      	ldr	r1, [sp, #0]
 8007d22:	b1f0      	cbz	r0, 8007d62 <__d2b+0x72>
 8007d24:	9a01      	ldr	r2, [sp, #4]
 8007d26:	f1c0 0320 	rsb	r3, r0, #32
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	40c2      	lsrs	r2, r0
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	9201      	str	r2, [sp, #4]
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bf14      	ite	ne
 8007d3c:	2102      	movne	r1, #2
 8007d3e:	2101      	moveq	r1, #1
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	6139      	str	r1, [r7, #16]
 8007d44:	b1c4      	cbz	r4, 8007d78 <__d2b+0x88>
 8007d46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007d4a:	4404      	add	r4, r0
 8007d4c:	6034      	str	r4, [r6, #0]
 8007d4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d52:	6028      	str	r0, [r5, #0]
 8007d54:	4638      	mov	r0, r7
 8007d56:	b002      	add	sp, #8
 8007d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d60:	e7d5      	b.n	8007d0e <__d2b+0x1e>
 8007d62:	6179      	str	r1, [r7, #20]
 8007d64:	e7e7      	b.n	8007d36 <__d2b+0x46>
 8007d66:	a801      	add	r0, sp, #4
 8007d68:	f7ff fd64 	bl	8007834 <__lo0bits>
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	6139      	str	r1, [r7, #16]
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	3020      	adds	r0, #32
 8007d76:	e7e5      	b.n	8007d44 <__d2b+0x54>
 8007d78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007d80:	6030      	str	r0, [r6, #0]
 8007d82:	6918      	ldr	r0, [r3, #16]
 8007d84:	f7ff fd37 	bl	80077f6 <__hi0bits>
 8007d88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007d8c:	e7e1      	b.n	8007d52 <__d2b+0x62>

08007d8e <__ratio>:
 8007d8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d92:	4688      	mov	r8, r1
 8007d94:	4669      	mov	r1, sp
 8007d96:	4681      	mov	r9, r0
 8007d98:	f7ff ff58 	bl	8007c4c <__b2d>
 8007d9c:	468b      	mov	fp, r1
 8007d9e:	4606      	mov	r6, r0
 8007da0:	460f      	mov	r7, r1
 8007da2:	4640      	mov	r0, r8
 8007da4:	a901      	add	r1, sp, #4
 8007da6:	f7ff ff51 	bl	8007c4c <__b2d>
 8007daa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007db2:	460d      	mov	r5, r1
 8007db4:	eba3 0c02 	sub.w	ip, r3, r2
 8007db8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bfd5      	itete	le
 8007dc6:	460a      	movle	r2, r1
 8007dc8:	463a      	movgt	r2, r7
 8007dca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007dce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007dd2:	bfd8      	it	le
 8007dd4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007dd8:	462b      	mov	r3, r5
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4659      	mov	r1, fp
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7f8 fca4 	bl	800072c <__aeabi_ddiv>
 8007de4:	b003      	add	sp, #12
 8007de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dea <__copybits>:
 8007dea:	3901      	subs	r1, #1
 8007dec:	b510      	push	{r4, lr}
 8007dee:	1149      	asrs	r1, r1, #5
 8007df0:	6914      	ldr	r4, [r2, #16]
 8007df2:	3101      	adds	r1, #1
 8007df4:	f102 0314 	add.w	r3, r2, #20
 8007df8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007dfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	4602      	mov	r2, r0
 8007e04:	d303      	bcc.n	8007e0e <__copybits+0x24>
 8007e06:	2300      	movs	r3, #0
 8007e08:	428a      	cmp	r2, r1
 8007e0a:	d305      	bcc.n	8007e18 <__copybits+0x2e>
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e12:	f840 2b04 	str.w	r2, [r0], #4
 8007e16:	e7f3      	b.n	8007e00 <__copybits+0x16>
 8007e18:	f842 3b04 	str.w	r3, [r2], #4
 8007e1c:	e7f4      	b.n	8007e08 <__copybits+0x1e>

08007e1e <__any_on>:
 8007e1e:	f100 0214 	add.w	r2, r0, #20
 8007e22:	6900      	ldr	r0, [r0, #16]
 8007e24:	114b      	asrs	r3, r1, #5
 8007e26:	4298      	cmp	r0, r3
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	db11      	blt.n	8007e50 <__any_on+0x32>
 8007e2c:	dd0a      	ble.n	8007e44 <__any_on+0x26>
 8007e2e:	f011 011f 	ands.w	r1, r1, #31
 8007e32:	d007      	beq.n	8007e44 <__any_on+0x26>
 8007e34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e38:	fa24 f001 	lsr.w	r0, r4, r1
 8007e3c:	fa00 f101 	lsl.w	r1, r0, r1
 8007e40:	428c      	cmp	r4, r1
 8007e42:	d10b      	bne.n	8007e5c <__any_on+0x3e>
 8007e44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d803      	bhi.n	8007e54 <__any_on+0x36>
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	bd10      	pop	{r4, pc}
 8007e50:	4603      	mov	r3, r0
 8007e52:	e7f7      	b.n	8007e44 <__any_on+0x26>
 8007e54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	d0f5      	beq.n	8007e48 <__any_on+0x2a>
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	e7f6      	b.n	8007e4e <__any_on+0x30>

08007e60 <_calloc_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	fb02 f401 	mul.w	r4, r2, r1
 8007e66:	4621      	mov	r1, r4
 8007e68:	f000 f854 	bl	8007f14 <_malloc_r>
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	b118      	cbz	r0, 8007e78 <_calloc_r+0x18>
 8007e70:	4622      	mov	r2, r4
 8007e72:	2100      	movs	r1, #0
 8007e74:	f7fc fd2e 	bl	80048d4 <memset>
 8007e78:	4628      	mov	r0, r5
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}

08007e7c <_free_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4605      	mov	r5, r0
 8007e80:	2900      	cmp	r1, #0
 8007e82:	d043      	beq.n	8007f0c <_free_r+0x90>
 8007e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e88:	1f0c      	subs	r4, r1, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bfb8      	it	lt
 8007e8e:	18e4      	addlt	r4, r4, r3
 8007e90:	f000 fa34 	bl	80082fc <__malloc_lock>
 8007e94:	4a1e      	ldr	r2, [pc, #120]	; (8007f10 <_free_r+0x94>)
 8007e96:	6813      	ldr	r3, [r2, #0]
 8007e98:	4610      	mov	r0, r2
 8007e9a:	b933      	cbnz	r3, 8007eaa <_free_r+0x2e>
 8007e9c:	6063      	str	r3, [r4, #4]
 8007e9e:	6014      	str	r4, [r2, #0]
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea6:	f000 ba2a 	b.w	80082fe <__malloc_unlock>
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	d90b      	bls.n	8007ec6 <_free_r+0x4a>
 8007eae:	6821      	ldr	r1, [r4, #0]
 8007eb0:	1862      	adds	r2, r4, r1
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	bf01      	itttt	eq
 8007eb6:	681a      	ldreq	r2, [r3, #0]
 8007eb8:	685b      	ldreq	r3, [r3, #4]
 8007eba:	1852      	addeq	r2, r2, r1
 8007ebc:	6022      	streq	r2, [r4, #0]
 8007ebe:	6063      	str	r3, [r4, #4]
 8007ec0:	6004      	str	r4, [r0, #0]
 8007ec2:	e7ed      	b.n	8007ea0 <_free_r+0x24>
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	b10a      	cbz	r2, 8007ece <_free_r+0x52>
 8007eca:	42a2      	cmp	r2, r4
 8007ecc:	d9fa      	bls.n	8007ec4 <_free_r+0x48>
 8007ece:	6819      	ldr	r1, [r3, #0]
 8007ed0:	1858      	adds	r0, r3, r1
 8007ed2:	42a0      	cmp	r0, r4
 8007ed4:	d10b      	bne.n	8007eee <_free_r+0x72>
 8007ed6:	6820      	ldr	r0, [r4, #0]
 8007ed8:	4401      	add	r1, r0
 8007eda:	1858      	adds	r0, r3, r1
 8007edc:	4282      	cmp	r2, r0
 8007ede:	6019      	str	r1, [r3, #0]
 8007ee0:	d1de      	bne.n	8007ea0 <_free_r+0x24>
 8007ee2:	6810      	ldr	r0, [r2, #0]
 8007ee4:	6852      	ldr	r2, [r2, #4]
 8007ee6:	4401      	add	r1, r0
 8007ee8:	6019      	str	r1, [r3, #0]
 8007eea:	605a      	str	r2, [r3, #4]
 8007eec:	e7d8      	b.n	8007ea0 <_free_r+0x24>
 8007eee:	d902      	bls.n	8007ef6 <_free_r+0x7a>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	602b      	str	r3, [r5, #0]
 8007ef4:	e7d4      	b.n	8007ea0 <_free_r+0x24>
 8007ef6:	6820      	ldr	r0, [r4, #0]
 8007ef8:	1821      	adds	r1, r4, r0
 8007efa:	428a      	cmp	r2, r1
 8007efc:	bf01      	itttt	eq
 8007efe:	6811      	ldreq	r1, [r2, #0]
 8007f00:	6852      	ldreq	r2, [r2, #4]
 8007f02:	1809      	addeq	r1, r1, r0
 8007f04:	6021      	streq	r1, [r4, #0]
 8007f06:	6062      	str	r2, [r4, #4]
 8007f08:	605c      	str	r4, [r3, #4]
 8007f0a:	e7c9      	b.n	8007ea0 <_free_r+0x24>
 8007f0c:	bd38      	pop	{r3, r4, r5, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000688 	.word	0x20000688

08007f14 <_malloc_r>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	1ccd      	adds	r5, r1, #3
 8007f18:	f025 0503 	bic.w	r5, r5, #3
 8007f1c:	3508      	adds	r5, #8
 8007f1e:	2d0c      	cmp	r5, #12
 8007f20:	bf38      	it	cc
 8007f22:	250c      	movcc	r5, #12
 8007f24:	2d00      	cmp	r5, #0
 8007f26:	4606      	mov	r6, r0
 8007f28:	db01      	blt.n	8007f2e <_malloc_r+0x1a>
 8007f2a:	42a9      	cmp	r1, r5
 8007f2c:	d903      	bls.n	8007f36 <_malloc_r+0x22>
 8007f2e:	230c      	movs	r3, #12
 8007f30:	6033      	str	r3, [r6, #0]
 8007f32:	2000      	movs	r0, #0
 8007f34:	bd70      	pop	{r4, r5, r6, pc}
 8007f36:	f000 f9e1 	bl	80082fc <__malloc_lock>
 8007f3a:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <_malloc_r+0xac>)
 8007f3c:	6814      	ldr	r4, [r2, #0]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	b991      	cbnz	r1, 8007f68 <_malloc_r+0x54>
 8007f42:	4c20      	ldr	r4, [pc, #128]	; (8007fc4 <_malloc_r+0xb0>)
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	b91b      	cbnz	r3, 8007f50 <_malloc_r+0x3c>
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f000 f98f 	bl	800826c <_sbrk_r>
 8007f4e:	6020      	str	r0, [r4, #0]
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f000 f98a 	bl	800826c <_sbrk_r>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d124      	bne.n	8007fa6 <_malloc_r+0x92>
 8007f5c:	230c      	movs	r3, #12
 8007f5e:	4630      	mov	r0, r6
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	f000 f9cc 	bl	80082fe <__malloc_unlock>
 8007f66:	e7e4      	b.n	8007f32 <_malloc_r+0x1e>
 8007f68:	680b      	ldr	r3, [r1, #0]
 8007f6a:	1b5b      	subs	r3, r3, r5
 8007f6c:	d418      	bmi.n	8007fa0 <_malloc_r+0x8c>
 8007f6e:	2b0b      	cmp	r3, #11
 8007f70:	d90f      	bls.n	8007f92 <_malloc_r+0x7e>
 8007f72:	600b      	str	r3, [r1, #0]
 8007f74:	18cc      	adds	r4, r1, r3
 8007f76:	50cd      	str	r5, [r1, r3]
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f9c0 	bl	80082fe <__malloc_unlock>
 8007f7e:	f104 000b 	add.w	r0, r4, #11
 8007f82:	1d23      	adds	r3, r4, #4
 8007f84:	f020 0007 	bic.w	r0, r0, #7
 8007f88:	1ac3      	subs	r3, r0, r3
 8007f8a:	d0d3      	beq.n	8007f34 <_malloc_r+0x20>
 8007f8c:	425a      	negs	r2, r3
 8007f8e:	50e2      	str	r2, [r4, r3]
 8007f90:	e7d0      	b.n	8007f34 <_malloc_r+0x20>
 8007f92:	684b      	ldr	r3, [r1, #4]
 8007f94:	428c      	cmp	r4, r1
 8007f96:	bf16      	itet	ne
 8007f98:	6063      	strne	r3, [r4, #4]
 8007f9a:	6013      	streq	r3, [r2, #0]
 8007f9c:	460c      	movne	r4, r1
 8007f9e:	e7eb      	b.n	8007f78 <_malloc_r+0x64>
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	6849      	ldr	r1, [r1, #4]
 8007fa4:	e7cc      	b.n	8007f40 <_malloc_r+0x2c>
 8007fa6:	1cc4      	adds	r4, r0, #3
 8007fa8:	f024 0403 	bic.w	r4, r4, #3
 8007fac:	42a0      	cmp	r0, r4
 8007fae:	d005      	beq.n	8007fbc <_malloc_r+0xa8>
 8007fb0:	1a21      	subs	r1, r4, r0
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f000 f95a 	bl	800826c <_sbrk_r>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0cf      	beq.n	8007f5c <_malloc_r+0x48>
 8007fbc:	6025      	str	r5, [r4, #0]
 8007fbe:	e7db      	b.n	8007f78 <_malloc_r+0x64>
 8007fc0:	20000688 	.word	0x20000688
 8007fc4:	2000068c 	.word	0x2000068c

08007fc8 <__ssputs_r>:
 8007fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	688e      	ldr	r6, [r1, #8]
 8007fce:	4682      	mov	sl, r0
 8007fd0:	429e      	cmp	r6, r3
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	4690      	mov	r8, r2
 8007fd6:	4699      	mov	r9, r3
 8007fd8:	d837      	bhi.n	800804a <__ssputs_r+0x82>
 8007fda:	898a      	ldrh	r2, [r1, #12]
 8007fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fe0:	d031      	beq.n	8008046 <__ssputs_r+0x7e>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	6825      	ldr	r5, [r4, #0]
 8007fe6:	6909      	ldr	r1, [r1, #16]
 8007fe8:	1a6f      	subs	r7, r5, r1
 8007fea:	6965      	ldr	r5, [r4, #20]
 8007fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff0:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ff4:	f109 0301 	add.w	r3, r9, #1
 8007ff8:	443b      	add	r3, r7
 8007ffa:	429d      	cmp	r5, r3
 8007ffc:	bf38      	it	cc
 8007ffe:	461d      	movcc	r5, r3
 8008000:	0553      	lsls	r3, r2, #21
 8008002:	d530      	bpl.n	8008066 <__ssputs_r+0x9e>
 8008004:	4629      	mov	r1, r5
 8008006:	f7ff ff85 	bl	8007f14 <_malloc_r>
 800800a:	4606      	mov	r6, r0
 800800c:	b950      	cbnz	r0, 8008024 <__ssputs_r+0x5c>
 800800e:	230c      	movs	r3, #12
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	f8ca 3000 	str.w	r3, [sl]
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008024:	463a      	mov	r2, r7
 8008026:	6921      	ldr	r1, [r4, #16]
 8008028:	f7ff fb16 	bl	8007658 <memcpy>
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	6126      	str	r6, [r4, #16]
 800803a:	443e      	add	r6, r7
 800803c:	6026      	str	r6, [r4, #0]
 800803e:	464e      	mov	r6, r9
 8008040:	6165      	str	r5, [r4, #20]
 8008042:	1bed      	subs	r5, r5, r7
 8008044:	60a5      	str	r5, [r4, #8]
 8008046:	454e      	cmp	r6, r9
 8008048:	d900      	bls.n	800804c <__ssputs_r+0x84>
 800804a:	464e      	mov	r6, r9
 800804c:	4632      	mov	r2, r6
 800804e:	4641      	mov	r1, r8
 8008050:	6820      	ldr	r0, [r4, #0]
 8008052:	f000 f93a 	bl	80082ca <memmove>
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	2000      	movs	r0, #0
 800805a:	1b9b      	subs	r3, r3, r6
 800805c:	60a3      	str	r3, [r4, #8]
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	441e      	add	r6, r3
 8008062:	6026      	str	r6, [r4, #0]
 8008064:	e7dc      	b.n	8008020 <__ssputs_r+0x58>
 8008066:	462a      	mov	r2, r5
 8008068:	f000 f94a 	bl	8008300 <_realloc_r>
 800806c:	4606      	mov	r6, r0
 800806e:	2800      	cmp	r0, #0
 8008070:	d1e2      	bne.n	8008038 <__ssputs_r+0x70>
 8008072:	6921      	ldr	r1, [r4, #16]
 8008074:	4650      	mov	r0, sl
 8008076:	f7ff ff01 	bl	8007e7c <_free_r>
 800807a:	e7c8      	b.n	800800e <__ssputs_r+0x46>

0800807c <_svfiprintf_r>:
 800807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008080:	461d      	mov	r5, r3
 8008082:	898b      	ldrh	r3, [r1, #12]
 8008084:	b09d      	sub	sp, #116	; 0x74
 8008086:	061f      	lsls	r7, r3, #24
 8008088:	4680      	mov	r8, r0
 800808a:	460c      	mov	r4, r1
 800808c:	4616      	mov	r6, r2
 800808e:	d50f      	bpl.n	80080b0 <_svfiprintf_r+0x34>
 8008090:	690b      	ldr	r3, [r1, #16]
 8008092:	b96b      	cbnz	r3, 80080b0 <_svfiprintf_r+0x34>
 8008094:	2140      	movs	r1, #64	; 0x40
 8008096:	f7ff ff3d 	bl	8007f14 <_malloc_r>
 800809a:	6020      	str	r0, [r4, #0]
 800809c:	6120      	str	r0, [r4, #16]
 800809e:	b928      	cbnz	r0, 80080ac <_svfiprintf_r+0x30>
 80080a0:	230c      	movs	r3, #12
 80080a2:	f8c8 3000 	str.w	r3, [r8]
 80080a6:	f04f 30ff 	mov.w	r0, #4294967295
 80080aa:	e0c8      	b.n	800823e <_svfiprintf_r+0x1c2>
 80080ac:	2340      	movs	r3, #64	; 0x40
 80080ae:	6163      	str	r3, [r4, #20]
 80080b0:	2300      	movs	r3, #0
 80080b2:	9309      	str	r3, [sp, #36]	; 0x24
 80080b4:	2320      	movs	r3, #32
 80080b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080ba:	2330      	movs	r3, #48	; 0x30
 80080bc:	f04f 0b01 	mov.w	fp, #1
 80080c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080c4:	9503      	str	r5, [sp, #12]
 80080c6:	4637      	mov	r7, r6
 80080c8:	463d      	mov	r5, r7
 80080ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080ce:	b10b      	cbz	r3, 80080d4 <_svfiprintf_r+0x58>
 80080d0:	2b25      	cmp	r3, #37	; 0x25
 80080d2:	d13e      	bne.n	8008152 <_svfiprintf_r+0xd6>
 80080d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80080d8:	d00b      	beq.n	80080f2 <_svfiprintf_r+0x76>
 80080da:	4653      	mov	r3, sl
 80080dc:	4632      	mov	r2, r6
 80080de:	4621      	mov	r1, r4
 80080e0:	4640      	mov	r0, r8
 80080e2:	f7ff ff71 	bl	8007fc8 <__ssputs_r>
 80080e6:	3001      	adds	r0, #1
 80080e8:	f000 80a4 	beq.w	8008234 <_svfiprintf_r+0x1b8>
 80080ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ee:	4453      	add	r3, sl
 80080f0:	9309      	str	r3, [sp, #36]	; 0x24
 80080f2:	783b      	ldrb	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 809d 	beq.w	8008234 <_svfiprintf_r+0x1b8>
 80080fa:	2300      	movs	r3, #0
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008104:	9304      	str	r3, [sp, #16]
 8008106:	9307      	str	r3, [sp, #28]
 8008108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800810c:	931a      	str	r3, [sp, #104]	; 0x68
 800810e:	462f      	mov	r7, r5
 8008110:	2205      	movs	r2, #5
 8008112:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008116:	4850      	ldr	r0, [pc, #320]	; (8008258 <_svfiprintf_r+0x1dc>)
 8008118:	f7ff fa90 	bl	800763c <memchr>
 800811c:	9b04      	ldr	r3, [sp, #16]
 800811e:	b9d0      	cbnz	r0, 8008156 <_svfiprintf_r+0xda>
 8008120:	06d9      	lsls	r1, r3, #27
 8008122:	bf44      	itt	mi
 8008124:	2220      	movmi	r2, #32
 8008126:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800812a:	071a      	lsls	r2, r3, #28
 800812c:	bf44      	itt	mi
 800812e:	222b      	movmi	r2, #43	; 0x2b
 8008130:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008134:	782a      	ldrb	r2, [r5, #0]
 8008136:	2a2a      	cmp	r2, #42	; 0x2a
 8008138:	d015      	beq.n	8008166 <_svfiprintf_r+0xea>
 800813a:	462f      	mov	r7, r5
 800813c:	2000      	movs	r0, #0
 800813e:	250a      	movs	r5, #10
 8008140:	9a07      	ldr	r2, [sp, #28]
 8008142:	4639      	mov	r1, r7
 8008144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008148:	3b30      	subs	r3, #48	; 0x30
 800814a:	2b09      	cmp	r3, #9
 800814c:	d94d      	bls.n	80081ea <_svfiprintf_r+0x16e>
 800814e:	b1b8      	cbz	r0, 8008180 <_svfiprintf_r+0x104>
 8008150:	e00f      	b.n	8008172 <_svfiprintf_r+0xf6>
 8008152:	462f      	mov	r7, r5
 8008154:	e7b8      	b.n	80080c8 <_svfiprintf_r+0x4c>
 8008156:	4a40      	ldr	r2, [pc, #256]	; (8008258 <_svfiprintf_r+0x1dc>)
 8008158:	463d      	mov	r5, r7
 800815a:	1a80      	subs	r0, r0, r2
 800815c:	fa0b f000 	lsl.w	r0, fp, r0
 8008160:	4318      	orrs	r0, r3
 8008162:	9004      	str	r0, [sp, #16]
 8008164:	e7d3      	b.n	800810e <_svfiprintf_r+0x92>
 8008166:	9a03      	ldr	r2, [sp, #12]
 8008168:	1d11      	adds	r1, r2, #4
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	9103      	str	r1, [sp, #12]
 800816e:	2a00      	cmp	r2, #0
 8008170:	db01      	blt.n	8008176 <_svfiprintf_r+0xfa>
 8008172:	9207      	str	r2, [sp, #28]
 8008174:	e004      	b.n	8008180 <_svfiprintf_r+0x104>
 8008176:	4252      	negs	r2, r2
 8008178:	f043 0302 	orr.w	r3, r3, #2
 800817c:	9207      	str	r2, [sp, #28]
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	783b      	ldrb	r3, [r7, #0]
 8008182:	2b2e      	cmp	r3, #46	; 0x2e
 8008184:	d10c      	bne.n	80081a0 <_svfiprintf_r+0x124>
 8008186:	787b      	ldrb	r3, [r7, #1]
 8008188:	2b2a      	cmp	r3, #42	; 0x2a
 800818a:	d133      	bne.n	80081f4 <_svfiprintf_r+0x178>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	3702      	adds	r7, #2
 8008190:	1d1a      	adds	r2, r3, #4
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	9203      	str	r2, [sp, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	bfb8      	it	lt
 800819a:	f04f 33ff 	movlt.w	r3, #4294967295
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	4d2e      	ldr	r5, [pc, #184]	; (800825c <_svfiprintf_r+0x1e0>)
 80081a2:	2203      	movs	r2, #3
 80081a4:	7839      	ldrb	r1, [r7, #0]
 80081a6:	4628      	mov	r0, r5
 80081a8:	f7ff fa48 	bl	800763c <memchr>
 80081ac:	b138      	cbz	r0, 80081be <_svfiprintf_r+0x142>
 80081ae:	2340      	movs	r3, #64	; 0x40
 80081b0:	1b40      	subs	r0, r0, r5
 80081b2:	fa03 f000 	lsl.w	r0, r3, r0
 80081b6:	9b04      	ldr	r3, [sp, #16]
 80081b8:	3701      	adds	r7, #1
 80081ba:	4303      	orrs	r3, r0
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	7839      	ldrb	r1, [r7, #0]
 80081c0:	2206      	movs	r2, #6
 80081c2:	4827      	ldr	r0, [pc, #156]	; (8008260 <_svfiprintf_r+0x1e4>)
 80081c4:	1c7e      	adds	r6, r7, #1
 80081c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081ca:	f7ff fa37 	bl	800763c <memchr>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d038      	beq.n	8008244 <_svfiprintf_r+0x1c8>
 80081d2:	4b24      	ldr	r3, [pc, #144]	; (8008264 <_svfiprintf_r+0x1e8>)
 80081d4:	bb13      	cbnz	r3, 800821c <_svfiprintf_r+0x1a0>
 80081d6:	9b03      	ldr	r3, [sp, #12]
 80081d8:	3307      	adds	r3, #7
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	3308      	adds	r3, #8
 80081e0:	9303      	str	r3, [sp, #12]
 80081e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e4:	444b      	add	r3, r9
 80081e6:	9309      	str	r3, [sp, #36]	; 0x24
 80081e8:	e76d      	b.n	80080c6 <_svfiprintf_r+0x4a>
 80081ea:	fb05 3202 	mla	r2, r5, r2, r3
 80081ee:	2001      	movs	r0, #1
 80081f0:	460f      	mov	r7, r1
 80081f2:	e7a6      	b.n	8008142 <_svfiprintf_r+0xc6>
 80081f4:	2300      	movs	r3, #0
 80081f6:	250a      	movs	r5, #10
 80081f8:	4619      	mov	r1, r3
 80081fa:	3701      	adds	r7, #1
 80081fc:	9305      	str	r3, [sp, #20]
 80081fe:	4638      	mov	r0, r7
 8008200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008204:	3a30      	subs	r2, #48	; 0x30
 8008206:	2a09      	cmp	r2, #9
 8008208:	d903      	bls.n	8008212 <_svfiprintf_r+0x196>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0c8      	beq.n	80081a0 <_svfiprintf_r+0x124>
 800820e:	9105      	str	r1, [sp, #20]
 8008210:	e7c6      	b.n	80081a0 <_svfiprintf_r+0x124>
 8008212:	fb05 2101 	mla	r1, r5, r1, r2
 8008216:	2301      	movs	r3, #1
 8008218:	4607      	mov	r7, r0
 800821a:	e7f0      	b.n	80081fe <_svfiprintf_r+0x182>
 800821c:	ab03      	add	r3, sp, #12
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	4622      	mov	r2, r4
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <_svfiprintf_r+0x1ec>)
 8008224:	a904      	add	r1, sp, #16
 8008226:	4640      	mov	r0, r8
 8008228:	f7fc fbee 	bl	8004a08 <_printf_float>
 800822c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008230:	4681      	mov	r9, r0
 8008232:	d1d6      	bne.n	80081e2 <_svfiprintf_r+0x166>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	065b      	lsls	r3, r3, #25
 8008238:	f53f af35 	bmi.w	80080a6 <_svfiprintf_r+0x2a>
 800823c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800823e:	b01d      	add	sp, #116	; 0x74
 8008240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008244:	ab03      	add	r3, sp, #12
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	4622      	mov	r2, r4
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <_svfiprintf_r+0x1ec>)
 800824c:	a904      	add	r1, sp, #16
 800824e:	4640      	mov	r0, r8
 8008250:	f7fc fe86 	bl	8004f60 <_printf_i>
 8008254:	e7ea      	b.n	800822c <_svfiprintf_r+0x1b0>
 8008256:	bf00      	nop
 8008258:	080093fc 	.word	0x080093fc
 800825c:	08009402 	.word	0x08009402
 8008260:	08009406 	.word	0x08009406
 8008264:	08004a09 	.word	0x08004a09
 8008268:	08007fc9 	.word	0x08007fc9

0800826c <_sbrk_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	2300      	movs	r3, #0
 8008270:	4c05      	ldr	r4, [pc, #20]	; (8008288 <_sbrk_r+0x1c>)
 8008272:	4605      	mov	r5, r0
 8008274:	4608      	mov	r0, r1
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	f7fa fa7c 	bl	8002774 <_sbrk>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_sbrk_r+0x1a>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	b103      	cbz	r3, 8008286 <_sbrk_r+0x1a>
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20000784 	.word	0x20000784

0800828c <strncmp>:
 800828c:	b510      	push	{r4, lr}
 800828e:	b16a      	cbz	r2, 80082ac <strncmp+0x20>
 8008290:	3901      	subs	r1, #1
 8008292:	1884      	adds	r4, r0, r2
 8008294:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008298:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800829c:	4293      	cmp	r3, r2
 800829e:	d103      	bne.n	80082a8 <strncmp+0x1c>
 80082a0:	42a0      	cmp	r0, r4
 80082a2:	d001      	beq.n	80082a8 <strncmp+0x1c>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1f5      	bne.n	8008294 <strncmp+0x8>
 80082a8:	1a98      	subs	r0, r3, r2
 80082aa:	bd10      	pop	{r4, pc}
 80082ac:	4610      	mov	r0, r2
 80082ae:	e7fc      	b.n	80082aa <strncmp+0x1e>

080082b0 <__ascii_wctomb>:
 80082b0:	b149      	cbz	r1, 80082c6 <__ascii_wctomb+0x16>
 80082b2:	2aff      	cmp	r2, #255	; 0xff
 80082b4:	bf8b      	itete	hi
 80082b6:	238a      	movhi	r3, #138	; 0x8a
 80082b8:	700a      	strbls	r2, [r1, #0]
 80082ba:	6003      	strhi	r3, [r0, #0]
 80082bc:	2001      	movls	r0, #1
 80082be:	bf88      	it	hi
 80082c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80082c4:	4770      	bx	lr
 80082c6:	4608      	mov	r0, r1
 80082c8:	4770      	bx	lr

080082ca <memmove>:
 80082ca:	4288      	cmp	r0, r1
 80082cc:	b510      	push	{r4, lr}
 80082ce:	eb01 0302 	add.w	r3, r1, r2
 80082d2:	d807      	bhi.n	80082e4 <memmove+0x1a>
 80082d4:	1e42      	subs	r2, r0, #1
 80082d6:	4299      	cmp	r1, r3
 80082d8:	d00a      	beq.n	80082f0 <memmove+0x26>
 80082da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80082e2:	e7f8      	b.n	80082d6 <memmove+0xc>
 80082e4:	4283      	cmp	r3, r0
 80082e6:	d9f5      	bls.n	80082d4 <memmove+0xa>
 80082e8:	1881      	adds	r1, r0, r2
 80082ea:	1ad2      	subs	r2, r2, r3
 80082ec:	42d3      	cmn	r3, r2
 80082ee:	d100      	bne.n	80082f2 <memmove+0x28>
 80082f0:	bd10      	pop	{r4, pc}
 80082f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80082fa:	e7f7      	b.n	80082ec <memmove+0x22>

080082fc <__malloc_lock>:
 80082fc:	4770      	bx	lr

080082fe <__malloc_unlock>:
 80082fe:	4770      	bx	lr

08008300 <_realloc_r>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	4607      	mov	r7, r0
 8008304:	4614      	mov	r4, r2
 8008306:	460e      	mov	r6, r1
 8008308:	b921      	cbnz	r1, 8008314 <_realloc_r+0x14>
 800830a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800830e:	4611      	mov	r1, r2
 8008310:	f7ff be00 	b.w	8007f14 <_malloc_r>
 8008314:	b922      	cbnz	r2, 8008320 <_realloc_r+0x20>
 8008316:	f7ff fdb1 	bl	8007e7c <_free_r>
 800831a:	4625      	mov	r5, r4
 800831c:	4628      	mov	r0, r5
 800831e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008320:	f000 f814 	bl	800834c <_malloc_usable_size_r>
 8008324:	42a0      	cmp	r0, r4
 8008326:	d20f      	bcs.n	8008348 <_realloc_r+0x48>
 8008328:	4621      	mov	r1, r4
 800832a:	4638      	mov	r0, r7
 800832c:	f7ff fdf2 	bl	8007f14 <_malloc_r>
 8008330:	4605      	mov	r5, r0
 8008332:	2800      	cmp	r0, #0
 8008334:	d0f2      	beq.n	800831c <_realloc_r+0x1c>
 8008336:	4631      	mov	r1, r6
 8008338:	4622      	mov	r2, r4
 800833a:	f7ff f98d 	bl	8007658 <memcpy>
 800833e:	4631      	mov	r1, r6
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff fd9b 	bl	8007e7c <_free_r>
 8008346:	e7e9      	b.n	800831c <_realloc_r+0x1c>
 8008348:	4635      	mov	r5, r6
 800834a:	e7e7      	b.n	800831c <_realloc_r+0x1c>

0800834c <_malloc_usable_size_r>:
 800834c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008350:	1f18      	subs	r0, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	bfbc      	itt	lt
 8008356:	580b      	ldrlt	r3, [r1, r0]
 8008358:	18c0      	addlt	r0, r0, r3
 800835a:	4770      	bx	lr

0800835c <_init>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	bf00      	nop
 8008360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008362:	bc08      	pop	{r3}
 8008364:	469e      	mov	lr, r3
 8008366:	4770      	bx	lr

08008368 <_fini>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	bf00      	nop
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr
