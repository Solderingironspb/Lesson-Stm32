
ST7920_8Bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f14  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f0  080040f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080040f0  080040f0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040f0  080040f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080040f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000074  0800416c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800416c  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000539d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000127f  00000000  00000000  0002543a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b8  00000000  00000000  000266c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000428  00000000  00000000  00026b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b85  00000000  00000000  00026fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000050f7  00000000  00000000  0003db25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080012  00000000  00000000  00042c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2c2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001428  00000000  00000000  000c2cac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080031c4 	.word	0x080031c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080031c4 	.word	0x080031c4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ST7920_logo_demonstration>:
		0x10, 0x39, 0x63, 0x63, 0x63, 0x31, 0x1F, 0x0F, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B, 0x08, 0x08, 0x0B, 0x0B, 0x08,
		0x08, 0x08, 0x08, 0x08, 0x09, 0x0B, 0x0B, 0x0B, 0x0B, 0x09, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B };
/*-----------------------------Демонстрационное Logo----------------------------*/

/*---------------Вывод стартового демонстрационного лого------------------------*/
void ST7920_logo_demonstration(void) {
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
	for (int i = 0; i < 369; i++) {
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	e00b      	b.n	8000180 <ST7920_logo_demonstration+0x24>
		Frame_buffer[i + 265] = solderingiron[i];
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	f203 1309 	addw	r3, r3, #265	; 0x109
 800016e:	493a      	ldr	r1, [pc, #232]	; (8000258 <ST7920_logo_demonstration+0xfc>)
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	440a      	add	r2, r1
 8000174:	7811      	ldrb	r1, [r2, #0]
 8000176:	4a39      	ldr	r2, [pc, #228]	; (800025c <ST7920_logo_demonstration+0x100>)
 8000178:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 369; i++) {
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	3301      	adds	r3, #1
 800017e:	607b      	str	r3, [r7, #4]
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000186:	ddef      	ble.n	8000168 <ST7920_logo_demonstration+0xc>
	}
	ST7920_Update();
 8000188:	f000 fad8 	bl	800073c <ST7920_Update>
	sprintf(tx_buffer, "Saint Petersburg");
 800018c:	4a34      	ldr	r2, [pc, #208]	; (8000260 <ST7920_logo_demonstration+0x104>)
 800018e:	4b35      	ldr	r3, [pc, #212]	; (8000264 <ST7920_logo_demonstration+0x108>)
 8000190:	4614      	mov	r4, r2
 8000192:	461d      	mov	r5, r3
 8000194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000198:	682b      	ldr	r3, [r5, #0]
 800019a:	7023      	strb	r3, [r4, #0]
	ST7920_Decode_UTF8(16, 5, 0, tx_buffer);
 800019c:	4b30      	ldr	r3, [pc, #192]	; (8000260 <ST7920_logo_demonstration+0x104>)
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2010      	movs	r0, #16
 80001a4:	f000 fb0e 	bl	80007c4 <ST7920_Decode_UTF8>
	sprintf(tx_buffer, "electronics lab.");
 80001a8:	4a2d      	ldr	r2, [pc, #180]	; (8000260 <ST7920_logo_demonstration+0x104>)
 80001aa:	4b2f      	ldr	r3, [pc, #188]	; (8000268 <ST7920_logo_demonstration+0x10c>)
 80001ac:	4614      	mov	r4, r2
 80001ae:	461d      	mov	r5, r3
 80001b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b4:	682b      	ldr	r3, [r5, #0]
 80001b6:	7023      	strb	r3, [r4, #0]
	ST7920_Decode_UTF8(18, 6, 0, tx_buffer);
 80001b8:	4b29      	ldr	r3, [pc, #164]	; (8000260 <ST7920_logo_demonstration+0x104>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	2106      	movs	r1, #6
 80001be:	2012      	movs	r0, #18
 80001c0:	f000 fb00 	bl	80007c4 <ST7920_Decode_UTF8>
	HAL_Delay(500);
 80001c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001c8:	f001 fd56 	bl	8001c78 <HAL_Delay>
	ST7920_Update();
 80001cc:	f000 fab6 	bl	800073c <ST7920_Update>
	HAL_Delay(3000);
 80001d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001d4:	f001 fd50 	bl	8001c78 <HAL_Delay>
	sprintf(tx_buffer, "                ");
 80001d8:	4a21      	ldr	r2, [pc, #132]	; (8000260 <ST7920_logo_demonstration+0x104>)
 80001da:	4b24      	ldr	r3, [pc, #144]	; (800026c <ST7920_logo_demonstration+0x110>)
 80001dc:	4614      	mov	r4, r2
 80001de:	461d      	mov	r5, r3
 80001e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e4:	682b      	ldr	r3, [r5, #0]
 80001e6:	7023      	strb	r3, [r4, #0]
	ST7920_Decode_UTF8(18, 6, 0, tx_buffer);
 80001e8:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <ST7920_logo_demonstration+0x104>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	2106      	movs	r1, #6
 80001ee:	2012      	movs	r0, #18
 80001f0:	f000 fae8 	bl	80007c4 <ST7920_Decode_UTF8>
	HAL_Delay(500);
 80001f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f8:	f001 fd3e 	bl	8001c78 <HAL_Delay>
	ST7920_Update();
 80001fc:	f000 fa9e 	bl	800073c <ST7920_Update>
	sprintf(tx_buffer, "                ");
 8000200:	4a17      	ldr	r2, [pc, #92]	; (8000260 <ST7920_logo_demonstration+0x104>)
 8000202:	4b1a      	ldr	r3, [pc, #104]	; (800026c <ST7920_logo_demonstration+0x110>)
 8000204:	4614      	mov	r4, r2
 8000206:	461d      	mov	r5, r3
 8000208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020c:	682b      	ldr	r3, [r5, #0]
 800020e:	7023      	strb	r3, [r4, #0]
	ST7920_Decode_UTF8(16, 5, 0, tx_buffer);
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <ST7920_logo_demonstration+0x104>)
 8000212:	2200      	movs	r2, #0
 8000214:	2105      	movs	r1, #5
 8000216:	2010      	movs	r0, #16
 8000218:	f000 fad4 	bl	80007c4 <ST7920_Decode_UTF8>
	HAL_Delay(500);
 800021c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000220:	f001 fd2a 	bl	8001c78 <HAL_Delay>
	ST7920_Update();
 8000224:	f000 fa8a 	bl	800073c <ST7920_Update>
	for (int i = 0; i < 369; i++) {
 8000228:	2300      	movs	r3, #0
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	e008      	b.n	8000240 <ST7920_logo_demonstration+0xe4>
		Frame_buffer[i + 265] = 0x00;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	f203 1309 	addw	r3, r3, #265	; 0x109
 8000234:	4a09      	ldr	r2, [pc, #36]	; (800025c <ST7920_logo_demonstration+0x100>)
 8000236:	2100      	movs	r1, #0
 8000238:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 369; i++) {
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	603b      	str	r3, [r7, #0]
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8000246:	ddf2      	ble.n	800022e <ST7920_logo_demonstration+0xd2>
	}
	HAL_Delay(500);
 8000248:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024c:	f001 fd14 	bl	8001c78 <HAL_Delay>
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bdb0      	pop	{r4, r5, r7, pc}
 8000258:	080038ac 	.word	0x080038ac
 800025c:	20000110 	.word	0x20000110
 8000260:	20000090 	.word	0x20000090
 8000264:	080031dc 	.word	0x080031dc
 8000268:	080031f0 	.word	0x080031f0
 800026c:	08003204 	.word	0x08003204

08000270 <ST7920_Send_command>:
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void ST7920_Send_command(uint8_t Data) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	RW_reset(); //RW = 0
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <ST7920_Send_command+0x70>)
 800027c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000280:	611a      	str	r2, [r3, #16]
	RS_reset(); //RS = 0
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <ST7920_Send_command+0x70>)
 8000284:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000288:	611a      	str	r2, [r3, #16]
	E_set(); //Включаем E = 1
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <ST7920_Send_command+0x70>)
 800028c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000290:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < 186; i++) { //Ждем, пока контроллер ST7920 одумается
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e003      	b.n	80002a0 <ST7920_Send_command+0x30>
		asm("NOP");
 8000298:	bf00      	nop
	for (int i = 0; i < 186; i++) { //Ждем, пока контроллер ST7920 одумается
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	3301      	adds	r3, #1
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	2bb9      	cmp	r3, #185	; 0xb9
 80002a4:	ddf8      	ble.n	8000298 <ST7920_Send_command+0x28>
	}
	buffer = GPIOA->IDR; //Считываем порт A
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <ST7920_Send_command+0x74>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <ST7920_Send_command+0x78>)
 80002ae:	801a      	strh	r2, [r3, #0]
	buffer &= 0xFF00; //Обнуляем первые 8 бит. Остальную информацию не трогаем
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <ST7920_Send_command+0x78>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <ST7920_Send_command+0x78>)
 80002bc:	801a      	strh	r2, [r3, #0]
	GPIOA->ODR = buffer | Data; //Заполняем наши 8 бит информацией
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <ST7920_Send_command+0x78>)
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	431a      	orrs	r2, r3
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <ST7920_Send_command+0x74>)
 80002ca:	60da      	str	r2, [r3, #12]
	E_reset(); //Выключаем E = 0
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <ST7920_Send_command+0x70>)
 80002ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002d2:	611a      	str	r2, [r3, #16]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	40010800 	.word	0x40010800
 80002e8:	20000524 	.word	0x20000524

080002ec <ST7920_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
static void ST7920_Send_data(uint8_t Data) {
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	RW_reset(); //RW = 0
 80002f6:	4b18      	ldr	r3, [pc, #96]	; (8000358 <ST7920_Send_data+0x6c>)
 80002f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80002fc:	611a      	str	r2, [r3, #16]
	RS_set(); //RS = 0
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <ST7920_Send_data+0x6c>)
 8000300:	2202      	movs	r2, #2
 8000302:	611a      	str	r2, [r3, #16]
	E_set(); //Включаем E = 1
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <ST7920_Send_data+0x6c>)
 8000306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800030a:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < 186; i++) { //Ждем, пока контроллер ST7920 одумается
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	e003      	b.n	800031a <ST7920_Send_data+0x2e>
		asm("NOP");
 8000312:	bf00      	nop
	for (int i = 0; i < 186; i++) { //Ждем, пока контроллер ST7920 одумается
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3301      	adds	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2bb9      	cmp	r3, #185	; 0xb9
 800031e:	ddf8      	ble.n	8000312 <ST7920_Send_data+0x26>
	}
	buffer = GPIOA->IDR; //Считываем порт A
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <ST7920_Send_data+0x70>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	b29a      	uxth	r2, r3
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <ST7920_Send_data+0x74>)
 8000328:	801a      	strh	r2, [r3, #0]
	buffer &= 0xFF00; //Обнуляем первые 8 бит. Остальную информацию не трогаем
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <ST7920_Send_data+0x74>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <ST7920_Send_data+0x74>)
 8000336:	801a      	strh	r2, [r3, #0]
	GPIOA->ODR = buffer | Data; //Заполняем наши 8 бит информацией
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <ST7920_Send_data+0x74>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	461a      	mov	r2, r3
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	431a      	orrs	r2, r3
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <ST7920_Send_data+0x70>)
 8000344:	60da      	str	r2, [r3, #12]
	E_reset(); //Выключаем E = 0
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <ST7920_Send_data+0x6c>)
 8000348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800034c:	611a      	str	r2, [r3, #16]
}
 800034e:	bf00      	nop
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40010c00 	.word	0x40010c00
 800035c:	40010800 	.word	0x40010800
 8000360:	20000524 	.word	0x20000524

08000364 <ST7920_Init>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void ST7920_Init(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	RST_reset(); //Дернем ножку RST
 800036a:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <ST7920_Init+0x80>)
 800036c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000370:	611a      	str	r2, [r3, #16]
	HAL_Delay(10);
 8000372:	200a      	movs	r0, #10
 8000374:	f001 fc80 	bl	8001c78 <HAL_Delay>
	RST_set();
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <ST7920_Init+0x80>)
 800037a:	2201      	movs	r2, #1
 800037c:	611a      	str	r2, [r3, #16]
	HAL_Delay(40); //Ждем 40 мс
 800037e:	2028      	movs	r0, #40	; 0x28
 8000380:	f001 fc7a 	bl	8001c78 <HAL_Delay>

	//Далее все согласно Datasheet://
	uint8_t tx_buffer = 0x30; //Function set
 8000384:	2330      	movs	r3, #48	; 0x30
 8000386:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff70 	bl	8000270 <ST7920_Send_command>
	HAL_Delay(1);
 8000390:	2001      	movs	r0, #1
 8000392:	f001 fc71 	bl	8001c78 <HAL_Delay>
	ST7920_Send_command(tx_buffer);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff69 	bl	8000270 <ST7920_Send_command>
	HAL_Delay(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f001 fc6a 	bl	8001c78 <HAL_Delay>
	tx_buffer = 0x0C; //D = 1, C = 0, B = 0.
 80003a4:	230c      	movs	r3, #12
 80003a6:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ff60 	bl	8000270 <ST7920_Send_command>
	HAL_Delay(1);
 80003b0:	2001      	movs	r0, #1
 80003b2:	f001 fc61 	bl	8001c78 <HAL_Delay>
	tx_buffer = 0x01;
 80003b6:	2301      	movs	r3, #1
 80003b8:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Display Clean
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff57 	bl	8000270 <ST7920_Send_command>
	HAL_Delay(12);
 80003c2:	200c      	movs	r0, #12
 80003c4:	f001 fc58 	bl	8001c78 <HAL_Delay>
	tx_buffer = 0x06;
 80003c8:	2306      	movs	r3, #6
 80003ca:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Cursor increment right no shift
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff4e 	bl	8000270 <ST7920_Send_command>
	HAL_Delay(1);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f001 fc4f 	bl	8001c78 <HAL_Delay>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40010c00 	.word	0x40010c00

080003e8 <ST7920_Graphic_mode>:
}
/*----------------Функция вывода символьного текста на дисплей--------------------*/

/*----------------Функция включения/выключения графического режима----------------*/
void ST7920_Graphic_mode(bool enable)   // 1-enable, 0-disable
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00c      	beq.n	8000412 <ST7920_Graphic_mode+0x2a>
		ST7920_Send_command(0x34);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 1. Переходим в extended instruction.
 80003f8:	2034      	movs	r0, #52	; 0x34
 80003fa:	f7ff ff39 	bl	8000270 <ST7920_Send_command>
		HAL_Delay(1);
 80003fe:	2001      	movs	r0, #1
 8000400:	f001 fc3a 	bl	8001c78 <HAL_Delay>
		ST7920_Send_command(0x36);  // Включаем графический режим
 8000404:	2036      	movs	r0, #54	; 0x36
 8000406:	f7ff ff33 	bl	8000270 <ST7920_Send_command>
		HAL_Delay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f001 fc34 	bl	8001c78 <HAL_Delay>

	else if (!enable) {
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
		HAL_Delay(1);
	}
}
 8000410:	e00b      	b.n	800042a <ST7920_Graphic_mode+0x42>
	else if (!enable) {
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	f083 0301 	eor.w	r3, r3, #1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	d005      	beq.n	800042a <ST7920_Graphic_mode+0x42>
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
 800041e:	2030      	movs	r0, #48	; 0x30
 8000420:	f7ff ff26 	bl	8000270 <ST7920_Send_command>
		HAL_Delay(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f001 fc27 	bl	8001c78 <HAL_Delay>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <ST7920_Draw_bitmap>:
	ST7920_Clean_Frame_buffer();
}
/*---------------Функция очистки дисплея в графическом режиме--------------------*/

/*-------------------Функция вывода изображения на экран дисплея--------------------------*/
void ST7920_Draw_bitmap(const unsigned char *bitmap) {
 8000432:	b580      	push	{r7, lr}
 8000434:	b084      	sub	sp, #16
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
/// Функция вывода изображения на дисплей
/// Работает с памятью ST7920.
/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	81bb      	strh	r3, [r7, #12]
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
 800043e:	2300      	movs	r3, #0
 8000440:	73bb      	strb	r3, [r7, #14]
 8000442:	e13a      	b.n	80006ba <ST7920_Draw_bitmap+0x288>
		for (x = 0; x < 8; x++) {
 8000444:	2300      	movs	r3, #0
 8000446:	73fb      	strb	r3, [r7, #15]
 8000448:	e130      	b.n	80006ac <ST7920_Draw_bitmap+0x27a>
			if (y < 32) {
 800044a:	7bbb      	ldrb	r3, [r7, #14]
 800044c:	2b1f      	cmp	r3, #31
 800044e:	d80e      	bhi.n	800046e <ST7920_Draw_bitmap+0x3c>
				ST7920_Send_command(0x80 | y);				//y(0-31)
 8000450:	7bbb      	ldrb	r3, [r7, #14]
 8000452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff09 	bl	8000270 <ST7920_Send_command>
				ST7920_Send_command(0x80 | x);				//x(0-8)
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000464:	b2db      	uxtb	r3, r3
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ff02 	bl	8000270 <ST7920_Send_command>
 800046c:	e011      	b.n	8000492 <ST7920_Draw_bitmap+0x60>
			} else {
				ST7920_Send_command(0x80 | (y - 32));		//y(0-31)
 800046e:	7bbb      	ldrb	r3, [r7, #14]
 8000470:	3b20      	subs	r3, #32
 8000472:	b2db      	uxtb	r3, r3
 8000474:	b25b      	sxtb	r3, r3
 8000476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800047a:	b25b      	sxtb	r3, r3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff fef6 	bl	8000270 <ST7920_Send_command>
				ST7920_Send_command(0x88 | x);				//x(0-8)
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	f063 0377 	orn	r3, r3, #119	; 0x77
 800048a:	b2db      	uxtb	r3, r3
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff feef 	bl	8000270 <ST7920_Send_command>
			}

			i = ((y / 8) * 128) + (x * 16);
 8000492:	7bbb      	ldrb	r3, [r7, #14]
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	b2db      	uxtb	r3, r3
 8000498:	00da      	lsls	r2, r3, #3
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	4413      	add	r3, r2
 800049e:	b29b      	uxth	r3, r3
 80004a0:	011b      	lsls	r3, r3, #4
 80004a2:	81bb      	strh	r3, [r7, #12]
			Db = y % 8;
 80004a4:	7bbb      	ldrb	r3, [r7, #14]
 80004a6:	f003 0307 	and.w	r3, r3, #7
 80004aa:	72fb      	strb	r3, [r7, #11]

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 80004ac:	89bb      	ldrh	r3, [r7, #12]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	fa42 f303 	asr.w	r3, r2, r3
 80004bc:	01db      	lsls	r3, r3, #7
 80004be:	b25a      	sxtb	r2, r3
 80004c0:	89bb      	ldrh	r3, [r7, #12]
 80004c2:	3301      	adds	r3, #1
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	440b      	add	r3, r1
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	4619      	mov	r1, r3
 80004cc:	7afb      	ldrb	r3, [r7, #11]
 80004ce:	fa41 f303 	asr.w	r3, r1, r3
 80004d2:	019b      	lsls	r3, r3, #6
 80004d4:	b25b      	sxtb	r3, r3
 80004d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	89bb      	ldrh	r3, [r7, #12]
 80004e2:	3302      	adds	r3, #2
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	440b      	add	r3, r1
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	4619      	mov	r1, r3
 80004ec:	7afb      	ldrb	r3, [r7, #11]
 80004ee:	fa41 f303 	asr.w	r3, r1, r3
 80004f2:	015b      	lsls	r3, r3, #5
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	f003 0320 	and.w	r3, r3, #32
 80004fa:	b25b      	sxtb	r3, r3
 80004fc:	4313      	orrs	r3, r2
 80004fe:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
 8000500:	89bb      	ldrh	r3, [r7, #12]
 8000502:	3303      	adds	r3, #3
 8000504:	6879      	ldr	r1, [r7, #4]
 8000506:	440b      	add	r3, r1
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4619      	mov	r1, r3
 800050c:	7afb      	ldrb	r3, [r7, #11]
 800050e:	fa41 f303 	asr.w	r3, r1, r3
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	b25b      	sxtb	r3, r3
 8000516:	f003 0310 	and.w	r3, r3, #16
 800051a:	b25b      	sxtb	r3, r3
 800051c:	4313      	orrs	r3, r2
 800051e:	b25a      	sxtb	r2, r3
 8000520:	89bb      	ldrh	r3, [r7, #12]
 8000522:	3304      	adds	r3, #4
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	440b      	add	r3, r1
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	7afb      	ldrb	r3, [r7, #11]
 800052e:	fa41 f303 	asr.w	r3, r1, r3
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	b25b      	sxtb	r3, r3
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	b25b      	sxtb	r3, r3
 800053c:	4313      	orrs	r3, r2
 800053e:	b25a      	sxtb	r2, r3
 8000540:	89bb      	ldrh	r3, [r7, #12]
 8000542:	3305      	adds	r3, #5
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	440b      	add	r3, r1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	4619      	mov	r1, r3
 800054c:	7afb      	ldrb	r3, [r7, #11]
 800054e:	fa41 f303 	asr.w	r3, r1, r3
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	b25b      	sxtb	r3, r3
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	b25b      	sxtb	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
 8000560:	89bb      	ldrh	r3, [r7, #12]
 8000562:	3306      	adds	r3, #6
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	440b      	add	r3, r1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	7afb      	ldrb	r3, [r7, #11]
 800056e:	fa41 f303 	asr.w	r3, r1, r3
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	b25b      	sxtb	r3, r3
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	b25b      	sxtb	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b25a      	sxtb	r2, r3
 8000580:	89bb      	ldrh	r3, [r7, #12]
 8000582:	3307      	adds	r3, #7
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	440b      	add	r3, r1
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	7afb      	ldrb	r3, [r7, #11]
 800058e:	fa41 f303 	asr.w	r3, r1, r3
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b25b      	sxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 800059e:	72bb      	strb	r3, [r7, #10]
			ST7920_Send_data(Temp);
 80005a0:	7abb      	ldrb	r3, [r7, #10]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fea2 	bl	80002ec <ST7920_Send_data>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 80005a8:	89bb      	ldrh	r3, [r7, #12]
 80005aa:	3308      	adds	r3, #8
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	7afb      	ldrb	r3, [r7, #11]
 80005b6:	fa42 f303 	asr.w	r3, r2, r3
 80005ba:	01db      	lsls	r3, r3, #7
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	89bb      	ldrh	r3, [r7, #12]
 80005c0:	3309      	adds	r3, #9
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	440b      	add	r3, r1
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	7afb      	ldrb	r3, [r7, #11]
 80005cc:	fa41 f303 	asr.w	r3, r1, r3
 80005d0:	019b      	lsls	r3, r3, #6
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	89bb      	ldrh	r3, [r7, #12]
 80005e0:	330a      	adds	r3, #10
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	440b      	add	r3, r1
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	7afb      	ldrb	r3, [r7, #11]
 80005ec:	fa41 f303 	asr.w	r3, r1, r3
 80005f0:	015b      	lsls	r3, r3, #5
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
 80005fe:	89bb      	ldrh	r3, [r7, #12]
 8000600:	330b      	adds	r3, #11
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	440b      	add	r3, r1
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	7afb      	ldrb	r3, [r7, #11]
 800060c:	fa41 f303 	asr.w	r3, r1, r3
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	b25b      	sxtb	r3, r3
 8000614:	f003 0310 	and.w	r3, r3, #16
 8000618:	b25b      	sxtb	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b25a      	sxtb	r2, r3
 800061e:	89bb      	ldrh	r3, [r7, #12]
 8000620:	330c      	adds	r3, #12
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	440b      	add	r3, r1
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	fa41 f303 	asr.w	r3, r1, r3
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	b25b      	sxtb	r3, r3
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	b25b      	sxtb	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b25a      	sxtb	r2, r3
 800063e:	89bb      	ldrh	r3, [r7, #12]
 8000640:	330d      	adds	r3, #13
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	440b      	add	r3, r1
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	7afb      	ldrb	r3, [r7, #11]
 800064c:	fa41 f303 	asr.w	r3, r1, r3
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	b25b      	sxtb	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
 800065e:	89bb      	ldrh	r3, [r7, #12]
 8000660:	330e      	adds	r3, #14
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	440b      	add	r3, r1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	7afb      	ldrb	r3, [r7, #11]
 800066c:	fa41 f303 	asr.w	r3, r1, r3
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	b25b      	sxtb	r3, r3
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	b25b      	sxtb	r3, r3
 800067a:	4313      	orrs	r3, r2
 800067c:	b25a      	sxtb	r2, r3
 800067e:	89bb      	ldrh	r3, [r7, #12]
 8000680:	330f      	adds	r3, #15
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	440b      	add	r3, r1
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	7afb      	ldrb	r3, [r7, #11]
 800068c:	fa41 f303 	asr.w	r3, r1, r3
 8000690:	b25b      	sxtb	r3, r3
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	b25b      	sxtb	r3, r3
 8000698:	4313      	orrs	r3, r2
 800069a:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800069c:	72bb      	strb	r3, [r7, #10]

			ST7920_Send_data(Temp);
 800069e:	7abb      	ldrb	r3, [r7, #10]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fe23 	bl	80002ec <ST7920_Send_data>
		for (x = 0; x < 8; x++) {
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	3301      	adds	r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	f67f aecb 	bls.w	800044a <ST7920_Draw_bitmap+0x18>
	for (y = 0; y < 64; y++) {
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	73bb      	strb	r3, [r7, #14]
 80006ba:	7bbb      	ldrb	r3, [r7, #14]
 80006bc:	2b3f      	cmp	r3, #63	; 0x3f
 80006be:	f67f aec1 	bls.w	8000444 <ST7920_Draw_bitmap+0x12>
		}
	}
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <ST7920_Draw_pixel>:
/*-------------------Функция вывода изображения на экран дисплея--------------------------*/

/*---------------------Функция рисования пикселя на экране----------------------------*/
void ST7920_Draw_pixel(uint8_t x, uint8_t y) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	4613      	mov	r3, r2
 80006da:	71bb      	strb	r3, [r7, #6]
/// Функция рисования точки.
/// param\ x - координата по X(от 0 до 127)
/// paran\ y - координата по Y(от 0 до 63)
	if (y < ST7920_height && x < ST7920_width) {
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <ST7920_Draw_pixel+0x64>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d21e      	bcs.n	8000724 <ST7920_Draw_pixel+0x58>
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <ST7920_Draw_pixel+0x68>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d219      	bcs.n	8000724 <ST7920_Draw_pixel+0x58>
		Frame_buffer[(x) + ((y / 8) * 128)] |= 0x01 << y % 8;
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	08db      	lsrs	r3, r3, #3
 80006f6:	b2d8      	uxtb	r0, r3
 80006f8:	4603      	mov	r3, r0
 80006fa:	01db      	lsls	r3, r3, #7
 80006fc:	4413      	add	r3, r2
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <ST7920_Draw_pixel+0x6c>)
 8000700:	5cd3      	ldrb	r3, [r2, r3]
 8000702:	b25a      	sxtb	r2, r3
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	b25b      	sxtb	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b259      	sxtb	r1, r3
 8000716:	79fa      	ldrb	r2, [r7, #7]
 8000718:	4603      	mov	r3, r0
 800071a:	01db      	lsls	r3, r3, #7
 800071c:	4413      	add	r3, r2
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4a05      	ldr	r2, [pc, #20]	; (8000738 <ST7920_Draw_pixel+0x6c>)
 8000722:	54d1      	strb	r1, [r2, r3]
	}
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000001 	.word	0x20000001
 8000734:	20000000 	.word	0x20000000
 8000738:	20000110 	.word	0x20000110

0800073c <ST7920_Update>:
	}
}
/*---------------------Функция удаления пикселя на экране----------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void ST7920_Update(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	/// Функция вывода буфера кадра на дисплей
	/// Подготовьте буфер кадра, перед тем, как обновить изображение
	ST7920_Draw_bitmap(Frame_buffer);
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <ST7920_Update+0x10>)
 8000742:	f7ff fe76 	bl	8000432 <ST7920_Draw_bitmap>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000110 	.word	0x20000110

08000750 <print_symbol>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void print_symbol(uint16_t x, uint16_t symbol, bool inversion) {
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
 800075a:	460b      	mov	r3, r1
 800075c:	80bb      	strh	r3, [r7, #4]
 800075e:	4613      	mov	r3, r2
 8000760:	70fb      	strb	r3, [r7, #3]
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
/// \param symbol - код символа
/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 8; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e020      	b.n	80007aa <print_symbol+0x5a>
		if (inversion) {
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00e      	beq.n	800078c <print_symbol+0x3c>
			Frame_buffer[i + x - 1] = ~Font[(symbol * 8) + i];
 800076e:	88bb      	ldrh	r3, [r7, #4]
 8000770:	00da      	lsls	r2, r3, #3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	4413      	add	r3, r2
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <print_symbol+0x6c>)
 8000778:	5cd2      	ldrb	r2, [r2, r3]
 800077a:	88f9      	ldrh	r1, [r7, #6]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	440b      	add	r3, r1
 8000780:	3b01      	subs	r3, #1
 8000782:	43d2      	mvns	r2, r2
 8000784:	b2d1      	uxtb	r1, r2
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <print_symbol+0x70>)
 8000788:	54d1      	strb	r1, [r2, r3]
 800078a:	e00b      	b.n	80007a4 <print_symbol+0x54>
		} else {
			Frame_buffer[i + x - 1] = Font[(symbol * 8) + i];
 800078c:	88bb      	ldrh	r3, [r7, #4]
 800078e:	00da      	lsls	r2, r3, #3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	441a      	add	r2, r3
 8000794:	88f9      	ldrh	r1, [r7, #6]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	440b      	add	r3, r1
 800079a:	3b01      	subs	r3, #1
 800079c:	4907      	ldr	r1, [pc, #28]	; (80007bc <print_symbol+0x6c>)
 800079e:	5c89      	ldrb	r1, [r1, r2]
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <print_symbol+0x70>)
 80007a2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i <= 8; i++) {
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3301      	adds	r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b08      	cmp	r3, #8
 80007ae:	dddb      	ble.n	8000768 <print_symbol+0x18>
		}

	}
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	0800339c 	.word	0x0800339c
 80007c0:	20000110 	.word	0x20000110

080007c4 <ST7920_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

void ST7920_Decode_UTF8(uint16_t x, uint8_t y, bool inversion, char *tx_buffer) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	4603      	mov	r3, r0
 80007ce:	80fb      	strh	r3, [r7, #6]
 80007d0:	460b      	mov	r3, r1
 80007d2:	717b      	strb	r3, [r7, #5]
 80007d4:	4613      	mov	r3, r2
 80007d6:	713b      	strb	r3, [r7, #4]
/// 4 строка: x = 384;
/// 5 строка: x = 512;
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
	x = x + y * 128;
 80007d8:	797b      	ldrb	r3, [r7, #5]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	01db      	lsls	r3, r3, #7
 80007de:	b29a      	uxth	r2, r3
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	4413      	add	r3, r2
 80007e4:	80fb      	strh	r3, [r7, #6]
	uint16_t symbol = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	e0c8      	b.n	8000986 <ST7920_Decode_UTF8+0x1c2>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2bbf      	cmp	r3, #191	; 0xbf
 80007fe:	d822      	bhi.n	8000846 <ST7920_Decode_UTF8+0x82>
			if (flag_block) {
 8000800:	7dfb      	ldrb	r3, [r7, #23]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <ST7920_Decode_UTF8+0x48>
				flag_block = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	75fb      	strb	r3, [r7, #23]
 800080a:	e0b9      	b.n	8000980 <ST7920_Decode_UTF8+0x1bc>
			} else {
				symbol = tx_buffer[i];
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	81fb      	strh	r3, [r7, #14]
				if (inversion) {
 8000816:	793b      	ldrb	r3, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d008      	beq.n	800082e <ST7920_Decode_UTF8+0x6a>
					print_symbol(x, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	3b20      	subs	r3, #32
 8000820:	b299      	uxth	r1, r3
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	2201      	movs	r2, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff92 	bl	8000750 <print_symbol>
 800082c:	e007      	b.n	800083e <ST7920_Decode_UTF8+0x7a>
				} else {
					print_symbol(x, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 800082e:	89fb      	ldrh	r3, [r7, #14]
 8000830:	3b20      	subs	r3, #32
 8000832:	b299      	uxth	r1, r3
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	2200      	movs	r2, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff89 	bl	8000750 <print_symbol>
				}
				x = x + 6;
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	3306      	adds	r3, #6
 8000842:	80fb      	strh	r3, [r7, #6]
 8000844:	e09c      	b.n	8000980 <ST7920_Decode_UTF8+0x1bc>
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	b21a      	sxth	r2, r3
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3301      	adds	r3, #1
 8000856:	6839      	ldr	r1, [r7, #0]
 8000858:	440b      	add	r3, r1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21b      	sxth	r3, r3
 8000862:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 8000864:	89fb      	ldrh	r3, [r7, #14]
 8000866:	f24d 127f 	movw	r2, #53631	; 0xd17f
 800086a:	4293      	cmp	r3, r2
 800086c:	d820      	bhi.n	80008b0 <ST7920_Decode_UTF8+0xec>
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000874:	4293      	cmp	r3, r2
 8000876:	d91b      	bls.n	80008b0 <ST7920_Decode_UTF8+0xec>
				if (inversion) {
 8000878:	793b      	ldrb	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00a      	beq.n	8000894 <ST7920_Decode_UTF8+0xd0>
					print_symbol(x, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 800087e:	89fb      	ldrh	r3, [r7, #14]
 8000880:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000884:	330f      	adds	r3, #15
 8000886:	b299      	uxth	r1, r3
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	2201      	movs	r2, #1
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5f 	bl	8000750 <print_symbol>
 8000892:	e009      	b.n	80008a8 <ST7920_Decode_UTF8+0xe4>
				} else {
					print_symbol(x, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800089a:	330f      	adds	r3, #15
 800089c:	b299      	uxth	r1, r3
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff54 	bl	8000750 <print_symbol>
				}
				x = x + 6;
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	3306      	adds	r3, #6
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	e065      	b.n	800097c <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD081) {
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	f24d 0281 	movw	r2, #53377	; 0xd081
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d113      	bne.n	80008e2 <ST7920_Decode_UTF8+0x11e>
				if (inversion) {
 80008ba:	793b      	ldrb	r3, [r7, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <ST7920_Decode_UTF8+0x10a>
					print_symbol(x, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	2201      	movs	r2, #1
 80008c4:	219f      	movs	r1, #159	; 0x9f
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff42 	bl	8000750 <print_symbol>
 80008cc:	e005      	b.n	80008da <ST7920_Decode_UTF8+0x116>
				} else {
					print_symbol(x, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	2200      	movs	r2, #0
 80008d2:	219f      	movs	r1, #159	; 0x9f
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff3b 	bl	8000750 <print_symbol>
				}
				x = x + 6;
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	3306      	adds	r3, #6
 80008de:	80fb      	strh	r3, [r7, #6]
 80008e0:	e04c      	b.n	800097c <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xD191) {
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	f24d 1291 	movw	r2, #53649	; 0xd191
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d113      	bne.n	8000914 <ST7920_Decode_UTF8+0x150>
				if (inversion) {
 80008ec:	793b      	ldrb	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <ST7920_Decode_UTF8+0x13c>
					print_symbol(x, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	2201      	movs	r2, #1
 80008f6:	21a0      	movs	r1, #160	; 0xa0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff29 	bl	8000750 <print_symbol>
 80008fe:	e005      	b.n	800090c <ST7920_Decode_UTF8+0x148>
				} else {
					print_symbol(x, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	2200      	movs	r2, #0
 8000904:	21a0      	movs	r1, #160	; 0xa0
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff22 	bl	8000750 <print_symbol>
				}
				x = x + 6;
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	3306      	adds	r3, #6
 8000910:	80fb      	strh	r3, [r7, #6]
 8000912:	e033      	b.n	800097c <ST7920_Decode_UTF8+0x1b8>
			} else if (symbol == 0xC2B0) {
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 800091a:	4293      	cmp	r3, r2
 800091c:	d113      	bne.n	8000946 <ST7920_Decode_UTF8+0x182>
				if (inversion) {
 800091e:	793b      	ldrb	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d006      	beq.n	8000932 <ST7920_Decode_UTF8+0x16e>
					print_symbol(x, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	2201      	movs	r2, #1
 8000928:	21a1      	movs	r1, #161	; 0xa1
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff10 	bl	8000750 <print_symbol>
 8000930:	e005      	b.n	800093e <ST7920_Decode_UTF8+0x17a>
				} else {
					print_symbol(x, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	2200      	movs	r2, #0
 8000936:	21a1      	movs	r1, #161	; 0xa1
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff09 	bl	8000750 <print_symbol>
				}
				x = x + 6;
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	3306      	adds	r3, #6
 8000942:	80fb      	strh	r3, [r7, #6]
 8000944:	e01a      	b.n	800097c <ST7920_Decode_UTF8+0x1b8>
			}

			else {
				if (inversion) {
 8000946:	793b      	ldrb	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00a      	beq.n	8000962 <ST7920_Decode_UTF8+0x19e>
					print_symbol(x, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800094c:	89fb      	ldrh	r3, [r7, #14]
 800094e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000952:	330f      	adds	r3, #15
 8000954:	b299      	uxth	r1, r3
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	2201      	movs	r2, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fef8 	bl	8000750 <print_symbol>
 8000960:	e009      	b.n	8000976 <ST7920_Decode_UTF8+0x1b2>
				} else {
					print_symbol(x, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000968:	330f      	adds	r3, #15
 800096a:	b299      	uxth	r1, r3
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	2200      	movs	r2, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff feed 	bl	8000750 <print_symbol>
				}
				x = x + 6;
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	3306      	adds	r3, #6
 800097a:	80fb      	strh	r3, [r7, #6]
			}
			flag_block = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	3301      	adds	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	6838      	ldr	r0, [r7, #0]
 8000988:	f7ff fbe0 	bl	800014c <strlen>
 800098c:	4602      	mov	r2, r0
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	f63f af2f 	bhi.w	80007f4 <ST7920_Decode_UTF8+0x30>
		}
	}
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <ST7920_Inversion>:

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

/*---------------------Функция инверсии любого места в буфере------------------*/
void ST7920_Inversion(uint16_t x_start, uint16_t x_end) {
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	80fb      	strh	r3, [r7, #6]
 80009ac:	4613      	mov	r3, r2
 80009ae:	80bb      	strh	r3, [r7, #4]
/// Функция инверсии любого места в буфере
/// \param x_start - начальная точка по х от 0 до 1024
/// \param x_end - конечная точка по y от 0 до 1024
	for (; x_start < x_end; x_start++) {
 80009b0:	e00a      	b.n	80009c8 <ST7920_Inversion+0x28>
		Frame_buffer[x_start] = ~(Frame_buffer[x_start]);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <ST7920_Inversion+0x3c>)
 80009b6:	5cd2      	ldrb	r2, [r2, r3]
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	43d2      	mvns	r2, r2
 80009bc:	b2d1      	uxtb	r1, r2
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <ST7920_Inversion+0x3c>)
 80009c0:	54d1      	strb	r1, [r2, r3]
	for (; x_start < x_end; x_start++) {
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	3301      	adds	r3, #1
 80009c6:	80fb      	strh	r3, [r7, #6]
 80009c8:	88fa      	ldrh	r2, [r7, #6]
 80009ca:	88bb      	ldrh	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3f0      	bcc.n	80009b2 <ST7920_Inversion+0x12>
	}
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000110 	.word	0x20000110

080009e0 <ST7920_Clean_Frame_buffer>:
/*---------------------Функция инверсии любого места в буфере------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void ST7920_Clean_Frame_buffer(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 80009e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e8:	2100      	movs	r1, #0
 80009ea:	4802      	ldr	r0, [pc, #8]	; (80009f4 <ST7920_Clean_Frame_buffer+0x14>)
 80009ec:	f001 ffd0 	bl	8002990 <memset>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000110 	.word	0x20000110

080009f8 <ST7920_Draw_line>:
/*------------------------Функция очистки буфера кадра-------------------------*/

void ST7920_Draw_line(uint8_t x_start, uint8_t y_start, uint8_t x_end, uint8_t y_end) {
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4604      	mov	r4, r0
 8000a00:	4608      	mov	r0, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4623      	mov	r3, r4
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	717b      	strb	r3, [r7, #5]
 8000a12:	4613      	mov	r3, r2
 8000a14:	713b      	strb	r3, [r7, #4]
	int dx = (x_end >= x_start) ? x_end - x_start : x_start - x_end;
 8000a16:	797a      	ldrb	r2, [r7, #5]
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d303      	bcc.n	8000a26 <ST7920_Draw_line+0x2e>
 8000a1e:	797a      	ldrb	r2, [r7, #5]
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	e002      	b.n	8000a2c <ST7920_Draw_line+0x34>
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	797b      	ldrb	r3, [r7, #5]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	61bb      	str	r3, [r7, #24]
	int dy = (y_end >= y_start) ? y_end - y_start : y_start - y_end;
 8000a2e:	793a      	ldrb	r2, [r7, #4]
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d303      	bcc.n	8000a3e <ST7920_Draw_line+0x46>
 8000a36:	793a      	ldrb	r2, [r7, #4]
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	e002      	b.n	8000a44 <ST7920_Draw_line+0x4c>
 8000a3e:	79ba      	ldrb	r2, [r7, #6]
 8000a40:	793b      	ldrb	r3, [r7, #4]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	617b      	str	r3, [r7, #20]
	int sx = (x_start < x_end) ? 1 : -1;
 8000a46:	79fa      	ldrb	r2, [r7, #7]
 8000a48:	797b      	ldrb	r3, [r7, #5]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d201      	bcs.n	8000a52 <ST7920_Draw_line+0x5a>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e001      	b.n	8000a56 <ST7920_Draw_line+0x5e>
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	613b      	str	r3, [r7, #16]
	int sy = (y_start < y_end) ? 1 : -1;
 8000a58:	79ba      	ldrb	r2, [r7, #6]
 8000a5a:	793b      	ldrb	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d201      	bcs.n	8000a64 <ST7920_Draw_line+0x6c>
 8000a60:	2301      	movs	r3, #1
 8000a62:	e001      	b.n	8000a68 <ST7920_Draw_line+0x70>
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	60fb      	str	r3, [r7, #12]
	int err = dx - dy;
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	61fb      	str	r3, [r7, #28]

	for (;;) {
		ST7920_Draw_pixel(x_start, y_start);
 8000a72:	79ba      	ldrb	r2, [r7, #6]
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fe27 	bl	80006cc <ST7920_Draw_pixel>
		if (x_start == x_end && y_start == y_end)
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	797b      	ldrb	r3, [r7, #5]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d103      	bne.n	8000a8e <ST7920_Draw_line+0x96>
 8000a86:	79ba      	ldrb	r2, [r7, #6]
 8000a88:	793b      	ldrb	r3, [r7, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d01e      	beq.n	8000acc <ST7920_Draw_line+0xd4>
			break;
		int e2 = err + err;
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
		if (e2 > -dy) {
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	425b      	negs	r3, r3
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	dd08      	ble.n	8000ab0 <ST7920_Draw_line+0xb8>
			err -= dy;
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]
			x_start += sx;
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4413      	add	r3, r2
 8000aae:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 < dx) {
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dadc      	bge.n	8000a72 <ST7920_Draw_line+0x7a>
			err += dx;
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4413      	add	r3, r2
 8000abe:	61fb      	str	r3, [r7, #28]
			y_start += sy;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	71bb      	strb	r3, [r7, #6]
	for (;;) {
 8000aca:	e7d2      	b.n	8000a72 <ST7920_Draw_line+0x7a>
			break;
 8000acc:	bf00      	nop
		}
	}
}
 8000ace:	bf00      	nop
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
	...

08000ad8 <ST7920_Draw_rectangle>:

/********************************РАБОТА С ГЕОМЕТРИЧЕСКИМИ ФИГУРАМИ**********************************/

/*--------------------------------Вывести пустотелый прямоугольник---------------------------------*/
void ST7920_Draw_rectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height) {
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	4603      	mov	r3, r0
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	460b      	mov	r3, r1
 8000af0:	807b      	strh	r3, [r7, #2]
 8000af2:	4613      	mov	r3, r2
 8000af4:	803b      	strh	r3, [r7, #0]
/// \param y - начальная точка по оси "y"
/// \param width - ширина прямоугольника
/// \param height - высота прямоугольника

	/*Проверка ширины и высоты*/
	if ((x + width) >= ST7920_width) {
 8000af6:	88fa      	ldrh	r2, [r7, #6]
 8000af8:	887b      	ldrh	r3, [r7, #2]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <ST7920_Draw_rectangle+0xf0>)
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	4293      	cmp	r3, r2
 8000b02:	db05      	blt.n	8000b10 <ST7920_Draw_rectangle+0x38>
		width = ST7920_width - x;
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <ST7920_Draw_rectangle+0xf0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + height) >= ST7920_height) {
 8000b10:	88ba      	ldrh	r2, [r7, #4]
 8000b12:	883b      	ldrh	r3, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <ST7920_Draw_rectangle+0xf4>)
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	db05      	blt.n	8000b2a <ST7920_Draw_rectangle+0x52>
		height = ST7920_height - y;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <ST7920_Draw_rectangle+0xf4>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	88bb      	ldrh	r3, [r7, #4]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	803b      	strh	r3, [r7, #0]
	}

	/*Рисуем линии*/
	ST7920_Draw_line(x, y, x + width, y); /*Верх прямоугольника*/
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	b2d8      	uxtb	r0, r3
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	b2d9      	uxtb	r1, r3
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f7ff ff59 	bl	80009f8 <ST7920_Draw_line>
	ST7920_Draw_line(x, y + height, x + width, y + height); /*Низ прямоугольника*/
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	b2d8      	uxtb	r0, r3
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	883b      	ldrh	r3, [r7, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4413      	add	r3, r2
 8000b54:	b2d9      	uxtb	r1, r3
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2dc      	uxtb	r4, r3
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	883b      	ldrh	r3, [r7, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	4622      	mov	r2, r4
 8000b70:	f7ff ff42 	bl	80009f8 <ST7920_Draw_line>
	ST7920_Draw_line(x, y, x, y + height); /*Левая сторона прямоугольника*/
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	b2d8      	uxtb	r0, r3
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	b2d9      	uxtb	r1, r3
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	b2dc      	uxtb	r4, r3
 8000b80:	88bb      	ldrh	r3, [r7, #4]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	883b      	ldrh	r3, [r7, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4413      	add	r3, r2
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4622      	mov	r2, r4
 8000b8e:	f7ff ff33 	bl	80009f8 <ST7920_Draw_line>
	ST7920_Draw_line(x + width, y, x + width, y + height); /*Правая сторона прямоугольника*/
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b2d8      	uxtb	r0, r3
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	b2d9      	uxtb	r1, r3
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	b2dc      	uxtb	r4, r3
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	883b      	ldrh	r3, [r7, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4622      	mov	r2, r4
 8000bbc:	f7ff ff1c 	bl	80009f8 <ST7920_Draw_line>
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000001 	.word	0x20000001

08000bd0 <ST7920_Draw_rectangle_filled>:
/*--------------------------------Вывести пустотелый прямоугольник---------------------------------*/

/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/
void ST7920_Draw_rectangle_filled(uint16_t x, uint16_t y, uint16_t width, uint16_t height) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4623      	mov	r3, r4
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	4603      	mov	r3, r0
 8000be4:	80bb      	strh	r3, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	807b      	strh	r3, [r7, #2]
 8000bea:	4613      	mov	r3, r2
 8000bec:	803b      	strh	r3, [r7, #0]
/// \param y - начальная точка по оси "y"
/// \param width - ширина прямоугольника
/// \param height - высота прямоугольника

	/*Проверка ширины и высоты*/
	if ((x + width) >= ST7920_width) {
 8000bee:	88fa      	ldrh	r2, [r7, #6]
 8000bf0:	887b      	ldrh	r3, [r7, #2]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <ST7920_Draw_rectangle_filled+0x9c>)
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	db05      	blt.n	8000c08 <ST7920_Draw_rectangle_filled+0x38>
		width = ST7920_width - x;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <ST7920_Draw_rectangle_filled+0x9c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	807b      	strh	r3, [r7, #2]
	}
	if ((y + height) >= ST7920_height) {
 8000c08:	88ba      	ldrh	r2, [r7, #4]
 8000c0a:	883b      	ldrh	r3, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <ST7920_Draw_rectangle_filled+0xa0>)
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	4293      	cmp	r3, r2
 8000c14:	db05      	blt.n	8000c22 <ST7920_Draw_rectangle_filled+0x52>
		height = ST7920_height - y;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <ST7920_Draw_rectangle_filled+0xa0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	803b      	strh	r3, [r7, #0]
	}

	/*Рисуем линии*/
	for (uint8_t i = 0; i <= height; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e017      	b.n	8000c58 <ST7920_Draw_rectangle_filled+0x88>
		ST7920_Draw_line(x, y + i, x + width, y + i);
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	b2d8      	uxtb	r0, r3
 8000c2c:	88bb      	ldrh	r3, [r7, #4]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4413      	add	r3, r2
 8000c34:	b2d9      	uxtb	r1, r3
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2dc      	uxtb	r4, r3
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4622      	mov	r2, r4
 8000c4e:	f7ff fed3 	bl	80009f8 <ST7920_Draw_line>
	for (uint8_t i = 0; i <= height; i++) {
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	3301      	adds	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	883a      	ldrh	r2, [r7, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d2e2      	bcs.n	8000c28 <ST7920_Draw_rectangle_filled+0x58>
	}
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000001 	.word	0x20000001

08000c74 <ST7920_Draw_circle>:
/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/

/*---------------------------------Вывести пустотелую окружность-----------------------------------*/
void ST7920_Draw_circle(uint8_t x, uint8_t y, uint8_t radius) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	4613      	mov	r3, r2
 8000c84:	717b      	strb	r3, [r7, #5]
/// Вывести пустотелую окружность
/// \param x - точка центра окружности по оси "x"
/// \param y - точка центра окружности по оси "y"
/// \param radius - радиус окружности

	int f = 1 - (int) radius;
 8000c86:	797b      	ldrb	r3, [r7, #5]
 8000c88:	f1c3 0301 	rsb	r3, r3, #1
 8000c8c:	61fb      	str	r3, [r7, #28]
	int ddF_x = 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]

	int ddF_y = -2 * (int) radius;
 8000c92:	797a      	ldrb	r2, [r7, #5]
 8000c94:	4613      	mov	r3, r2
 8000c96:	07db      	lsls	r3, r3, #31
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
	int x_0 = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]

	ST7920_Draw_pixel(x, y + radius);
 8000ca2:	79ba      	ldrb	r2, [r7, #6]
 8000ca4:	797b      	ldrb	r3, [r7, #5]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fd0c 	bl	80006cc <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x, y - radius);
 8000cb4:	79ba      	ldrb	r2, [r7, #6]
 8000cb6:	797b      	ldrb	r3, [r7, #5]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd03 	bl	80006cc <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x + radius, y);
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	797b      	ldrb	r3, [r7, #5]
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	79ba      	ldrb	r2, [r7, #6]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fcfa 	bl	80006cc <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x - radius, y);
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	797b      	ldrb	r3, [r7, #5]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	79ba      	ldrb	r2, [r7, #6]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fcf1 	bl	80006cc <ST7920_Draw_pixel>

	int y_0 = radius;
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	60fb      	str	r3, [r7, #12]
	while (x_0 < y_0) {
 8000cee:	e07e      	b.n	8000dee <ST7920_Draw_circle+0x17a>
		if (f >= 0) {
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db09      	blt.n	8000d0a <ST7920_Draw_circle+0x96>
			y_0--;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
			ddF_y += 2;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3302      	adds	r3, #2
 8000d00:	617b      	str	r3, [r7, #20]
			f += ddF_y;
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4413      	add	r3, r2
 8000d08:	61fb      	str	r3, [r7, #28]
		}
		x_0++;
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
		ddF_x += 2;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	3302      	adds	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
		f += ddF_x;
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	61fb      	str	r3, [r7, #28]
		ST7920_Draw_pixel(x + x_0, y + y_0);
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4413      	add	r3, r2
 8000d26:	b2d8      	uxtb	r0, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff fcca 	bl	80006cc <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - x_0, y + y_0);
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b2d8      	uxtb	r0, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f7ff fcbd 	bl	80006cc <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + x_0, y - y_0);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2d8      	uxtb	r0, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	79ba      	ldrb	r2, [r7, #6]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	f7ff fcb0 	bl	80006cc <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - x_0, y - y_0);
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	b2d8      	uxtb	r0, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	79ba      	ldrb	r2, [r7, #6]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff fca3 	bl	80006cc <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + y_0, y + x_0);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2d8      	uxtb	r0, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	4413      	add	r3, r2
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f7ff fc96 	bl	80006cc <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - y_0, y + x_0);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	b2d8      	uxtb	r0, r3
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	4413      	add	r3, r2
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	f7ff fc89 	bl	80006cc <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x + y_0, y - x_0);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2d8      	uxtb	r0, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	79ba      	ldrb	r2, [r7, #6]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f7ff fc7c 	bl	80006cc <ST7920_Draw_pixel>
		ST7920_Draw_pixel(x - y_0, y - x_0);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	b2d8      	uxtb	r0, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	79ba      	ldrb	r2, [r7, #6]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4619      	mov	r1, r3
 8000dea:	f7ff fc6f 	bl	80006cc <ST7920_Draw_pixel>
	while (x_0 < y_0) {
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	f6ff af7c 	blt.w	8000cf0 <ST7920_Draw_circle+0x7c>
	}
}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <ST7920_Draw_circle_filled>:
/*---------------------------------Вывести пустотелую окружность-----------------------------------*/

/*--------------------------------Вывести закрашенную окружность-----------------------------------*/
void ST7920_Draw_circle_filled(int16_t x, int16_t y, int16_t radius) {
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	80bb      	strh	r3, [r7, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	807b      	strh	r3, [r7, #2]
/// Вывести закрашенную окружность
/// \param x - точка центра окружности по оси "x"
/// \param y - точка центра окружности по оси "y"
/// \param radius - радиус окружности

	int16_t f = 1 - radius;
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	f1c3 0301 	rsb	r3, r3, #1
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * radius;
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	461a      	mov	r2, r3
 8000e24:	03d2      	lsls	r2, r2, #15
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	827b      	strh	r3, [r7, #18]
	int16_t x_0 = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	823b      	strh	r3, [r7, #16]
	int16_t y_0 = radius;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	81fb      	strh	r3, [r7, #14]

	ST7920_Draw_pixel(x, y + radius);
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b2d8      	uxtb	r0, r3
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4413      	add	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fc40 	bl	80006cc <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x, y - radius);
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	b2d8      	uxtb	r0, r3
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f7ff fc35 	bl	80006cc <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x + radius, y);
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	88ba      	ldrh	r2, [r7, #4]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fc29 	bl	80006cc <ST7920_Draw_pixel>
	ST7920_Draw_pixel(x - radius, y);
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	88ba      	ldrh	r2, [r7, #4]
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc1d 	bl	80006cc <ST7920_Draw_pixel>
	ST7920_Draw_line(x - radius, y, x + radius, y);
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	b2d8      	uxtb	r0, r3
 8000e9e:	88bb      	ldrh	r3, [r7, #4]
 8000ea0:	b2d9      	uxtb	r1, r3
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f7ff fda1 	bl	80009f8 <ST7920_Draw_line>

	while (x_0 < y_0) {
 8000eb6:	e08d      	b.n	8000fd4 <ST7920_Draw_circle_filled+0x1d4>
		if (f >= 0) {
 8000eb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0e      	blt.n	8000ede <ST7920_Draw_circle_filled+0xde>
			y_0--;
 8000ec0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000ecc:	8a7b      	ldrh	r3, [r7, #18]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000ed4:	8afa      	ldrh	r2, [r7, #22]
 8000ed6:	8a7b      	ldrh	r3, [r7, #18]
 8000ed8:	4413      	add	r3, r2
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	82fb      	strh	r3, [r7, #22]
		}
		x_0++;
 8000ede:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000eea:	8abb      	ldrh	r3, [r7, #20]
 8000eec:	3302      	adds	r3, #2
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000ef2:	8afa      	ldrh	r2, [r7, #22]
 8000ef4:	8abb      	ldrh	r3, [r7, #20]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	82fb      	strh	r3, [r7, #22]

		ST7920_Draw_line(x - x_0, y + y_0, x + x_0, y + y_0);
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	8a3b      	ldrh	r3, [r7, #16]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b2d8      	uxtb	r0, r3
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	89fb      	ldrh	r3, [r7, #14]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	b2d9      	uxtb	r1, r3
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	8a3b      	ldrh	r3, [r7, #16]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b2dc      	uxtb	r4, r3
 8000f20:	88bb      	ldrh	r3, [r7, #4]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4622      	mov	r2, r4
 8000f2e:	f7ff fd63 	bl	80009f8 <ST7920_Draw_line>
		ST7920_Draw_line(x + x_0, y - y_0, x - x_0, y - y_0);
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	8a3b      	ldrh	r3, [r7, #16]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b2d8      	uxtb	r0, r3
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	b2d9      	uxtb	r1, r3
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	8a3b      	ldrh	r3, [r7, #16]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b2dc      	uxtb	r4, r3
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4622      	mov	r2, r4
 8000f64:	f7ff fd48 	bl	80009f8 <ST7920_Draw_line>
		ST7920_Draw_line(x + y_0, y + x_0, x - y_0, y + x_0);
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	b2d8      	uxtb	r0, r3
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	8a3b      	ldrh	r3, [r7, #16]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2d9      	uxtb	r1, r3
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	b2dc      	uxtb	r4, r3
 8000f8c:	88bb      	ldrh	r3, [r7, #4]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	8a3b      	ldrh	r3, [r7, #16]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4622      	mov	r2, r4
 8000f9a:	f7ff fd2d 	bl	80009f8 <ST7920_Draw_line>
		ST7920_Draw_line(x + y_0, y - x_0, x - y_0, y - x_0);
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2d8      	uxtb	r0, r3
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	8a3b      	ldrh	r3, [r7, #16]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	b2d9      	uxtb	r1, r3
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b2dc      	uxtb	r4, r3
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	8a3b      	ldrh	r3, [r7, #16]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4622      	mov	r2, r4
 8000fd0:	f7ff fd12 	bl	80009f8 <ST7920_Draw_line>
	while (x_0 < y_0) {
 8000fd4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f6ff af6b 	blt.w	8000eb8 <ST7920_Draw_circle_filled+0xb8>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}

08000fea <ST7920_Draw_triangle>:
/*--------------------------------Вывести закрашенную окружность-----------------------------------*/

/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/
void ST7920_Draw_triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3) {
 8000fea:	b590      	push	{r4, r7, lr}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4623      	mov	r3, r4
 8000ffa:	80fb      	strh	r3, [r7, #6]
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	80bb      	strh	r3, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	803b      	strh	r3, [r7, #0]
/// \param x_2 - вторая точка треугольника. Координата по оси "x"
/// \param y_2 - вторая точка треугольника. Координата по оси "y"
/// \param x_3 - третья точка треугольника. Координата по оси "x"
/// \param y_3 - третья точка треугольника. Координата по оси "y"

	ST7920_Draw_line(x1, y1, x2, y2);
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	b2d8      	uxtb	r0, r3
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	b2d9      	uxtb	r1, r3
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	883b      	ldrh	r3, [r7, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f7ff fcee 	bl	80009f8 <ST7920_Draw_line>
	ST7920_Draw_line(x2, y2, x3, y3);
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	b2d8      	uxtb	r0, r3
 8001020:	883b      	ldrh	r3, [r7, #0]
 8001022:	b2d9      	uxtb	r1, r3
 8001024:	8b3b      	ldrh	r3, [r7, #24]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	8bbb      	ldrh	r3, [r7, #28]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f7ff fce4 	bl	80009f8 <ST7920_Draw_line>
	ST7920_Draw_line(x3, y3, x1, y1);
 8001030:	8b3b      	ldrh	r3, [r7, #24]
 8001032:	b2d8      	uxtb	r0, r3
 8001034:	8bbb      	ldrh	r3, [r7, #28]
 8001036:	b2d9      	uxtb	r1, r3
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f7ff fcda 	bl	80009f8 <ST7920_Draw_line>
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bd90      	pop	{r4, r7, pc}

0800104c <ST7920_Draw_triangle_filled>:
/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/

/*----------------------------------Вывести закрашенный треугольник--------------------------------*/
void ST7920_Draw_triangle_filled(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3) {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b08b      	sub	sp, #44	; 0x2c
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
/// \param y_2 - вторая точка треугольника. Координата по оси "y"
/// \param x_3 - третья точка треугольника. Координата по оси "x"
/// \param y_3 - третья точка треугольника. Координата по оси "y"

#define ABS(x)   ((x) > 0 ? (x) : -(x))
	int16_t deltax = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	823b      	strh	r3, [r7, #16]
	int16_t deltay = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	81fb      	strh	r3, [r7, #14]
	int16_t x = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t xinc1 = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t xinc2 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	843b      	strh	r3, [r7, #32]
	int16_t yinc1 = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	83fb      	strh	r3, [r7, #30]
	int16_t yinc2 = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	83bb      	strh	r3, [r7, #28]
	int16_t den = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	837b      	strh	r3, [r7, #26]
	int16_t num = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	833b      	strh	r3, [r7, #24]
	int16_t numadd = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	82fb      	strh	r3, [r7, #22]
	int16_t numpixels = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	82bb      	strh	r3, [r7, #20]
	int16_t curpixel = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	425b      	neglt	r3, r3
 80010b8:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d304      	bcc.n	80010d4 <ST7920_Draw_triangle_filled+0x88>
		xinc1 = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	843b      	strh	r3, [r7, #32]
 80010d2:	e005      	b.n	80010e0 <ST7920_Draw_triangle_filled+0x94>
	} else {
		xinc1 = -1;
 80010d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d8:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80010da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010de:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 80010e0:	883a      	ldrh	r2, [r7, #0]
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d304      	bcc.n	80010f2 <ST7920_Draw_triangle_filled+0xa6>
		yinc1 = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	83bb      	strh	r3, [r7, #28]
 80010f0:	e005      	b.n	80010fe <ST7920_Draw_triangle_filled+0xb2>
	} else {
		yinc1 = -1;
 80010f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f6:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80010f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fc:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 80010fe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001102:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001106:	429a      	cmp	r2, r3
 8001108:	db10      	blt.n	800112c <ST7920_Draw_triangle_filled+0xe0>
		xinc1 = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8001112:	8a3b      	ldrh	r3, [r7, #16]
 8001114:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001116:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800111a:	0fda      	lsrs	r2, r3, #31
 800111c:	4413      	add	r3, r2
 800111e:	105b      	asrs	r3, r3, #1
 8001120:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001126:	8a3b      	ldrh	r3, [r7, #16]
 8001128:	82bb      	strh	r3, [r7, #20]
 800112a:	e00f      	b.n	800114c <ST7920_Draw_triangle_filled+0x100>
	} else {
		xinc2 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001134:	89fb      	ldrh	r3, [r7, #14]
 8001136:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8001138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800113c:	0fda      	lsrs	r2, r3, #31
 800113e:	4413      	add	r3, r2
 8001140:	105b      	asrs	r3, r3, #1
 8001142:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001144:	8a3b      	ldrh	r3, [r7, #16]
 8001146:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800114c:	2300      	movs	r3, #0
 800114e:	827b      	strh	r3, [r7, #18]
 8001150:	e033      	b.n	80011ba <ST7920_Draw_triangle_filled+0x16e>
		ST7920_Draw_line(x, y, x3, y3);
 8001152:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001158:	b2d9      	uxtb	r1, r3
 800115a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800115c:	b2da      	uxtb	r2, r3
 800115e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f7ff fc49 	bl	80009f8 <ST7920_Draw_line>

		num += numadd;
 8001166:	8b3a      	ldrh	r2, [r7, #24]
 8001168:	8afb      	ldrh	r3, [r7, #22]
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001170:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001174:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001178:	429a      	cmp	r2, r3
 800117a:	db0e      	blt.n	800119a <ST7920_Draw_triangle_filled+0x14e>
			num -= den;
 800117c:	8b3a      	ldrh	r2, [r7, #24]
 800117e:	8b7b      	ldrh	r3, [r7, #26]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	b29b      	uxth	r3, r3
 8001184:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001186:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800118a:	4413      	add	r3, r2
 800118c:	b29b      	uxth	r3, r3
 800118e:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8001190:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001192:	8bfb      	ldrh	r3, [r7, #30]
 8001194:	4413      	add	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 800119a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800119c:	8c3b      	ldrh	r3, [r7, #32]
 800119e:	4413      	add	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80011a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011a6:	8bbb      	ldrh	r3, [r7, #28]
 80011a8:	4413      	add	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80011ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	827b      	strh	r3, [r7, #18]
 80011ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	ddc5      	ble.n	8001152 <ST7920_Draw_triangle_filled+0x106>
	}
}
 80011c6:	bf00      	nop
 80011c8:	372c      	adds	r7, #44	; 0x2c
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
	...

080011d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011d6:	f000 fced 	bl	8001bb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011da:	f000 fb61 	bl	80018a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011de:	f000 fba5 	bl	800192c <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 80011e2:	2064      	movs	r0, #100	; 0x64
 80011e4:	f000 fd48 	bl	8001c78 <HAL_Delay>
	ST7920_Init();
 80011e8:	f7ff f8bc 	bl	8000364 <ST7920_Init>
	ST7920_Graphic_mode(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff f8fb 	bl	80003e8 <ST7920_Graphic_mode>
	ST7920_logo_demonstration();
 80011f2:	f7fe ffb3 	bl	800015c <ST7920_logo_demonstration>
	ST7920_Clean_Frame_buffer();
 80011f6:	f7ff fbf3 	bl	80009e0 <ST7920_Clean_Frame_buffer>
	ST7920_Update();
 80011fa:	f7ff fa9f 	bl	800073c <ST7920_Update>
	ST7920_Inversion(0, 128);
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fbcd 	bl	80009a0 <ST7920_Inversion>
	Time_page = HAL_GetTick();
 8001206:	f000 fd2d 	bl	8001c64 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	4b8b      	ldr	r3, [pc, #556]	; (800143c <main+0x26c>)
 800120e:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (HAL_GetTick() - Time_counter > 30) {
 8001210:	f000 fd28 	bl	8001c64 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <main+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b1e      	cmp	r3, #30
 800121e:	d925      	bls.n	800126c <main+0x9c>
			Time_counter = HAL_GetTick();
 8001220:	f000 fd20 	bl	8001c64 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	4b86      	ldr	r3, [pc, #536]	; (8001440 <main+0x270>)
 8001228:	601a      	str	r2, [r3, #0]
			counter++;
 800122a:	4b86      	ldr	r3, [pc, #536]	; (8001444 <main+0x274>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a84      	ldr	r2, [pc, #528]	; (8001444 <main+0x274>)
 8001232:	6013      	str	r3, [r2, #0]
			flag = !flag;
 8001234:	4b84      	ldr	r3, [pc, #528]	; (8001448 <main+0x278>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f083 0301 	eor.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <main+0x278>)
 8001250:	701a      	strb	r2, [r3, #0]
			if (flag) {
 8001252:	4b7d      	ldr	r3, [pc, #500]	; (8001448 <main+0x278>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <main+0x94>
				GPIOC->BSRR = LED_Pin;
 800125a:	4b7c      	ldr	r3, [pc, #496]	; (800144c <main+0x27c>)
 800125c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	e003      	b.n	800126c <main+0x9c>
			} else {
				GPIOC->BSRR = (uint32_t) LED_Pin << 16u;
 8001264:	4b79      	ldr	r3, [pc, #484]	; (800144c <main+0x27c>)
 8001266:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800126a:	611a      	str	r2, [r3, #16]
			}
		}

		if (HAL_GetTick() - Time_page > 3000) {
 800126c:	f000 fcfa 	bl	8001c64 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	4b72      	ldr	r3, [pc, #456]	; (800143c <main+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800127c:	4293      	cmp	r3, r2
 800127e:	d917      	bls.n	80012b0 <main+0xe0>
			Time_page = HAL_GetTick();
 8001280:	f000 fcf0 	bl	8001c64 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	4b6d      	ldr	r3, [pc, #436]	; (800143c <main+0x26c>)
 8001288:	601a      	str	r2, [r3, #0]
			//ST7920_Clean();
			ST7920_Clean_Frame_buffer();
 800128a:	f7ff fba9 	bl	80009e0 <ST7920_Clean_Frame_buffer>
			ST7920_Inversion(0, 128);
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fb85 	bl	80009a0 <ST7920_Inversion>
			page++;
 8001296:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <main+0x280>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <main+0x280>)
 80012a0:	701a      	strb	r2, [r3, #0]
			if (page > 4) {
 80012a2:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <main+0x280>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d902      	bls.n	80012b0 <main+0xe0>
				page = 0;
 80012aa:	4b69      	ldr	r3, [pc, #420]	; (8001450 <main+0x280>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
			}
		}

		if (page == 0) {
 80012b0:	4b67      	ldr	r3, [pc, #412]	; (8001450 <main+0x280>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d144      	bne.n	8001342 <main+0x172>

			sprintf(tx_buffer, "Основное меню");
 80012b8:	4a66      	ldr	r2, [pc, #408]	; (8001454 <main+0x284>)
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <main+0x288>)
 80012bc:	4615      	mov	r5, r2
 80012be:	461c      	mov	r4, r3
 80012c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c2:	6028      	str	r0, [r5, #0]
 80012c4:	6069      	str	r1, [r5, #4]
 80012c6:	60aa      	str	r2, [r5, #8]
 80012c8:	60eb      	str	r3, [r5, #12]
 80012ca:	cc03      	ldmia	r4!, {r0, r1}
 80012cc:	6128      	str	r0, [r5, #16]
 80012ce:	6169      	str	r1, [r5, #20]
 80012d0:	8823      	ldrh	r3, [r4, #0]
 80012d2:	832b      	strh	r3, [r5, #24]
			ST7920_Decode_UTF8(25, 0, 1, tx_buffer);
 80012d4:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <main+0x284>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	2100      	movs	r1, #0
 80012da:	2019      	movs	r0, #25
 80012dc:	f7ff fa72 	bl	80007c4 <ST7920_Decode_UTF8>

			sprintf(tx_buffer, "Оплата программисту:");
 80012e0:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <main+0x284>)
 80012e2:	4a5e      	ldr	r2, [pc, #376]	; (800145c <main+0x28c>)
 80012e4:	4614      	mov	r4, r2
 80012e6:	469c      	mov	ip, r3
 80012e8:	f104 0e20 	add.w	lr, r4, #32
 80012ec:	4665      	mov	r5, ip
 80012ee:	4626      	mov	r6, r4
 80012f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012f2:	6028      	str	r0, [r5, #0]
 80012f4:	6069      	str	r1, [r5, #4]
 80012f6:	60aa      	str	r2, [r5, #8]
 80012f8:	60eb      	str	r3, [r5, #12]
 80012fa:	3410      	adds	r4, #16
 80012fc:	f10c 0c10 	add.w	ip, ip, #16
 8001300:	4574      	cmp	r4, lr
 8001302:	d1f3      	bne.n	80012ec <main+0x11c>
 8001304:	4663      	mov	r3, ip
 8001306:	4622      	mov	r2, r4
 8001308:	6810      	ldr	r0, [r2, #0]
 800130a:	6018      	str	r0, [r3, #0]
 800130c:	8891      	ldrh	r1, [r2, #4]
 800130e:	7992      	ldrb	r2, [r2, #6]
 8001310:	8099      	strh	r1, [r3, #4]
 8001312:	719a      	strb	r2, [r3, #6]
			ST7920_Decode_UTF8(0, 2, 0, tx_buffer);
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <main+0x284>)
 8001316:	2200      	movs	r2, #0
 8001318:	2102      	movs	r1, #2
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fa52 	bl	80007c4 <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "Счетчик:%ld руб.", counter);
 8001320:	4b48      	ldr	r3, [pc, #288]	; (8001444 <main+0x274>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	494e      	ldr	r1, [pc, #312]	; (8001460 <main+0x290>)
 8001328:	484a      	ldr	r0, [pc, #296]	; (8001454 <main+0x284>)
 800132a:	f001 fb39 	bl	80029a0 <siprintf>
			ST7920_Decode_UTF8(0, 4, 0, tx_buffer);
 800132e:	4b49      	ldr	r3, [pc, #292]	; (8001454 <main+0x284>)
 8001330:	2200      	movs	r2, #0
 8001332:	2104      	movs	r1, #4
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fa45 	bl	80007c4 <ST7920_Decode_UTF8>
			update = 1;
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <main+0x294>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e293      	b.n	800186a <main+0x69a>
		}

		else if (page == 1) {
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <main+0x280>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	f040 8098 	bne.w	800147c <main+0x2ac>
			sprintf(tx_buffer, "Настройки");
 800134c:	4a41      	ldr	r2, [pc, #260]	; (8001454 <main+0x284>)
 800134e:	4b46      	ldr	r3, [pc, #280]	; (8001468 <main+0x298>)
 8001350:	4615      	mov	r5, r2
 8001352:	461c      	mov	r4, r3
 8001354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001356:	6028      	str	r0, [r5, #0]
 8001358:	6069      	str	r1, [r5, #4]
 800135a:	60aa      	str	r2, [r5, #8]
 800135c:	60eb      	str	r3, [r5, #12]
 800135e:	8823      	ldrh	r3, [r4, #0]
 8001360:	78a2      	ldrb	r2, [r4, #2]
 8001362:	822b      	strh	r3, [r5, #16]
 8001364:	4613      	mov	r3, r2
 8001366:	74ab      	strb	r3, [r5, #18]
			ST7920_Decode_UTF8(35, 0, 1, tx_buffer);
 8001368:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <main+0x284>)
 800136a:	2201      	movs	r2, #1
 800136c:	2100      	movs	r1, #0
 800136e:	2023      	movs	r0, #35	; 0x23
 8001370:	f7ff fa28 	bl	80007c4 <ST7920_Decode_UTF8>

			sprintf(tx_buffer, ">Обогрев:вкл");
 8001374:	4a37      	ldr	r2, [pc, #220]	; (8001454 <main+0x284>)
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <main+0x29c>)
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	6020      	str	r0, [r4, #0]
 8001380:	6061      	str	r1, [r4, #4]
 8001382:	60a2      	str	r2, [r4, #8]
 8001384:	60e3      	str	r3, [r4, #12]
 8001386:	6828      	ldr	r0, [r5, #0]
 8001388:	6120      	str	r0, [r4, #16]
 800138a:	88ab      	ldrh	r3, [r5, #4]
 800138c:	79aa      	ldrb	r2, [r5, #6]
 800138e:	82a3      	strh	r3, [r4, #20]
 8001390:	4613      	mov	r3, r2
 8001392:	75a3      	strb	r3, [r4, #22]
			ST7920_Decode_UTF8(0, 2, 0, tx_buffer);
 8001394:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <main+0x284>)
 8001396:	2200      	movs	r2, #0
 8001398:	2102      	movs	r1, #2
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fa12 	bl	80007c4 <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "Увлажнитель:вкл");
 80013a0:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <main+0x284>)
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <main+0x2a0>)
 80013a4:	4615      	mov	r5, r2
 80013a6:	461c      	mov	r4, r3
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	6028      	str	r0, [r5, #0]
 80013ac:	6069      	str	r1, [r5, #4]
 80013ae:	60aa      	str	r2, [r5, #8]
 80013b0:	60eb      	str	r3, [r5, #12]
 80013b2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80013b4:	6128      	str	r0, [r5, #16]
 80013b6:	6169      	str	r1, [r5, #20]
 80013b8:	61aa      	str	r2, [r5, #24]
 80013ba:	8823      	ldrh	r3, [r4, #0]
 80013bc:	83ab      	strh	r3, [r5, #28]
			ST7920_Decode_UTF8(0, 3, 0, tx_buffer);
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <main+0x284>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	2103      	movs	r1, #3
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff f9fd 	bl	80007c4 <ST7920_Decode_UTF8>
			for (uint8_t i = 0; i < 128; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	e007      	b.n	80013e0 <main+0x210>
				ST7920_Draw_pixel(i, 40);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2128      	movs	r1, #40	; 0x28
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f979 	bl	80006cc <ST7920_Draw_pixel>
			for (uint8_t i = 0; i < 128; i++) {
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	3301      	adds	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	daf3      	bge.n	80013d0 <main+0x200>
			}
			sprintf(tx_buffer, "Уст.температура:25°C");
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <main+0x284>)
 80013ea:	4a22      	ldr	r2, [pc, #136]	; (8001474 <main+0x2a4>)
 80013ec:	4614      	mov	r4, r2
 80013ee:	469c      	mov	ip, r3
 80013f0:	f104 0e20 	add.w	lr, r4, #32
 80013f4:	4665      	mov	r5, ip
 80013f6:	4626      	mov	r6, r4
 80013f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013fa:	6028      	str	r0, [r5, #0]
 80013fc:	6069      	str	r1, [r5, #4]
 80013fe:	60aa      	str	r2, [r5, #8]
 8001400:	60eb      	str	r3, [r5, #12]
 8001402:	3410      	adds	r4, #16
 8001404:	f10c 0c10 	add.w	ip, ip, #16
 8001408:	4574      	cmp	r4, lr
 800140a:	d1f3      	bne.n	80013f4 <main+0x224>
 800140c:	4663      	mov	r3, ip
 800140e:	4622      	mov	r2, r4
 8001410:	6810      	ldr	r0, [r2, #0]
 8001412:	6018      	str	r0, [r3, #0]
			ST7920_Decode_UTF8(0, 6, 0, tx_buffer);
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <main+0x284>)
 8001416:	2200      	movs	r2, #0
 8001418:	2106      	movs	r1, #6
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff f9d2 	bl	80007c4 <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "Уст.влажность:60%%");
 8001420:	4915      	ldr	r1, [pc, #84]	; (8001478 <main+0x2a8>)
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <main+0x284>)
 8001424:	f001 fabc 	bl	80029a0 <siprintf>
			ST7920_Decode_UTF8(0, 7, 0, tx_buffer);
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <main+0x284>)
 800142a:	2200      	movs	r2, #0
 800142c:	2107      	movs	r1, #7
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff f9c8 	bl	80007c4 <ST7920_Decode_UTF8>
			update = 1;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <main+0x294>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e216      	b.n	800186a <main+0x69a>
 800143c:	20000530 	.word	0x20000530
 8001440:	20000528 	.word	0x20000528
 8001444:	20000514 	.word	0x20000514
 8001448:	20000510 	.word	0x20000510
 800144c:	40011000 	.word	0x40011000
 8001450:	20000511 	.word	0x20000511
 8001454:	20000090 	.word	0x20000090
 8001458:	08003218 	.word	0x08003218
 800145c:	08003234 	.word	0x08003234
 8001460:	0800325c 	.word	0x0800325c
 8001464:	20000002 	.word	0x20000002
 8001468:	08003278 	.word	0x08003278
 800146c:	0800328c 	.word	0x0800328c
 8001470:	080032a4 	.word	0x080032a4
 8001474:	080032c4 	.word	0x080032c4
 8001478:	080032e8 	.word	0x080032e8
		}

		else if (page == 2) {
 800147c:	4b9b      	ldr	r3, [pc, #620]	; (80016ec <main+0x51c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d170      	bne.n	8001566 <main+0x396>
			sprintf(tx_buffer, "Шрифт 5x7");
 8001484:	4a9a      	ldr	r2, [pc, #616]	; (80016f0 <main+0x520>)
 8001486:	4b9b      	ldr	r3, [pc, #620]	; (80016f4 <main+0x524>)
 8001488:	4614      	mov	r4, r2
 800148a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800148c:	6020      	str	r0, [r4, #0]
 800148e:	6061      	str	r1, [r4, #4]
 8001490:	60a2      	str	r2, [r4, #8]
 8001492:	881a      	ldrh	r2, [r3, #0]
 8001494:	789b      	ldrb	r3, [r3, #2]
 8001496:	81a2      	strh	r2, [r4, #12]
 8001498:	73a3      	strb	r3, [r4, #14]
			ST7920_Decode_UTF8(35, 0, 1, tx_buffer);
 800149a:	4b95      	ldr	r3, [pc, #596]	; (80016f0 <main+0x520>)
 800149c:	2201      	movs	r2, #1
 800149e:	2100      	movs	r1, #0
 80014a0:	2023      	movs	r0, #35	; 0x23
 80014a2:	f7ff f98f 	bl	80007c4 <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "Съешь ещё этих мягких");
 80014a6:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <main+0x520>)
 80014a8:	4a93      	ldr	r2, [pc, #588]	; (80016f8 <main+0x528>)
 80014aa:	4614      	mov	r4, r2
 80014ac:	469c      	mov	ip, r3
 80014ae:	f104 0e20 	add.w	lr, r4, #32
 80014b2:	4665      	mov	r5, ip
 80014b4:	4626      	mov	r6, r4
 80014b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014b8:	6028      	str	r0, [r5, #0]
 80014ba:	6069      	str	r1, [r5, #4]
 80014bc:	60aa      	str	r2, [r5, #8]
 80014be:	60eb      	str	r3, [r5, #12]
 80014c0:	3410      	adds	r4, #16
 80014c2:	f10c 0c10 	add.w	ip, ip, #16
 80014c6:	4574      	cmp	r4, lr
 80014c8:	d1f3      	bne.n	80014b2 <main+0x2e2>
 80014ca:	4662      	mov	r2, ip
 80014cc:	4623      	mov	r3, r4
 80014ce:	cb03      	ldmia	r3!, {r0, r1}
 80014d0:	6010      	str	r0, [r2, #0]
 80014d2:	6051      	str	r1, [r2, #4]
			ST7920_Decode_UTF8(0, 2, 0, tx_buffer);
 80014d4:	4b86      	ldr	r3, [pc, #536]	; (80016f0 <main+0x520>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	2102      	movs	r1, #2
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff f972 	bl	80007c4 <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "французских булок,");
 80014e0:	4b83      	ldr	r3, [pc, #524]	; (80016f0 <main+0x520>)
 80014e2:	4a86      	ldr	r2, [pc, #536]	; (80016fc <main+0x52c>)
 80014e4:	4614      	mov	r4, r2
 80014e6:	469c      	mov	ip, r3
 80014e8:	f104 0e20 	add.w	lr, r4, #32
 80014ec:	4665      	mov	r5, ip
 80014ee:	4626      	mov	r6, r4
 80014f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014f2:	6028      	str	r0, [r5, #0]
 80014f4:	6069      	str	r1, [r5, #4]
 80014f6:	60aa      	str	r2, [r5, #8]
 80014f8:	60eb      	str	r3, [r5, #12]
 80014fa:	3410      	adds	r4, #16
 80014fc:	f10c 0c10 	add.w	ip, ip, #16
 8001500:	4574      	cmp	r4, lr
 8001502:	d1f3      	bne.n	80014ec <main+0x31c>
 8001504:	4663      	mov	r3, ip
 8001506:	4622      	mov	r2, r4
 8001508:	8811      	ldrh	r1, [r2, #0]
 800150a:	7892      	ldrb	r2, [r2, #2]
 800150c:	8019      	strh	r1, [r3, #0]
 800150e:	709a      	strb	r2, [r3, #2]
			ST7920_Decode_UTF8(0, 3, 0, tx_buffer);
 8001510:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <main+0x520>)
 8001512:	2200      	movs	r2, #0
 8001514:	2103      	movs	r1, #3
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff f954 	bl	80007c4 <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "да выпей чаю.");
 800151c:	4a74      	ldr	r2, [pc, #464]	; (80016f0 <main+0x520>)
 800151e:	4b78      	ldr	r3, [pc, #480]	; (8001700 <main+0x530>)
 8001520:	4615      	mov	r5, r2
 8001522:	461c      	mov	r4, r3
 8001524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001526:	6028      	str	r0, [r5, #0]
 8001528:	6069      	str	r1, [r5, #4]
 800152a:	60aa      	str	r2, [r5, #8]
 800152c:	60eb      	str	r3, [r5, #12]
 800152e:	cc03      	ldmia	r4!, {r0, r1}
 8001530:	6128      	str	r0, [r5, #16]
 8001532:	6169      	str	r1, [r5, #20]
			ST7920_Decode_UTF8(0, 4, 0, tx_buffer);
 8001534:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <main+0x520>)
 8001536:	2200      	movs	r2, #0
 8001538:	2104      	movs	r1, #4
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff f942 	bl	80007c4 <ST7920_Decode_UTF8>
			sprintf(tx_buffer, "1234567890");
 8001540:	4a6b      	ldr	r2, [pc, #428]	; (80016f0 <main+0x520>)
 8001542:	4b70      	ldr	r3, [pc, #448]	; (8001704 <main+0x534>)
 8001544:	cb03      	ldmia	r3!, {r0, r1}
 8001546:	6010      	str	r0, [r2, #0]
 8001548:	6051      	str	r1, [r2, #4]
 800154a:	8819      	ldrh	r1, [r3, #0]
 800154c:	789b      	ldrb	r3, [r3, #2]
 800154e:	8111      	strh	r1, [r2, #8]
 8001550:	7293      	strb	r3, [r2, #10]
			ST7920_Decode_UTF8(0, 5, 0, tx_buffer);
 8001552:	4b67      	ldr	r3, [pc, #412]	; (80016f0 <main+0x520>)
 8001554:	2200      	movs	r2, #0
 8001556:	2105      	movs	r1, #5
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff f933 	bl	80007c4 <ST7920_Decode_UTF8>
			update = 1;
 800155e:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <main+0x538>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e181      	b.n	800186a <main+0x69a>

		}

		else if (page == 3) {
 8001566:	4b61      	ldr	r3, [pc, #388]	; (80016ec <main+0x51c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d106      	bne.n	800157c <main+0x3ac>
			ST7920_Draw_bitmap(photo);
 800156e:	4867      	ldr	r0, [pc, #412]	; (800170c <main+0x53c>)
 8001570:	f7fe ff5f 	bl	8000432 <ST7920_Draw_bitmap>
			update = 0;
 8001574:	4b64      	ldr	r3, [pc, #400]	; (8001708 <main+0x538>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	e176      	b.n	800186a <main+0x69a>

		} else if (page == 4) {
 800157c:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <main+0x51c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b04      	cmp	r3, #4
 8001582:	f040 8172 	bne.w	800186a <main+0x69a>
			for (uint8_t i = 0; i < 10; i++) {
 8001586:	2300      	movs	r3, #0
 8001588:	71bb      	strb	r3, [r7, #6]
 800158a:	e051      	b.n	8001630 <main+0x460>
				ST7920_Clean_Frame_buffer();
 800158c:	f7ff fa28 	bl	80009e0 <ST7920_Clean_Frame_buffer>
				ST7920_Draw_line(0, 0, 127, 63);
 8001590:	233f      	movs	r3, #63	; 0x3f
 8001592:	227f      	movs	r2, #127	; 0x7f
 8001594:	2100      	movs	r1, #0
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fa2e 	bl	80009f8 <ST7920_Draw_line>
				ST7920_Draw_line(0, 63, 127, 0);
 800159c:	2300      	movs	r3, #0
 800159e:	227f      	movs	r2, #127	; 0x7f
 80015a0:	213f      	movs	r1, #63	; 0x3f
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fa28 	bl	80009f8 <ST7920_Draw_line>
				ST7920_Draw_rectangle(80, 5, 30, 20);
 80015a8:	2314      	movs	r3, #20
 80015aa:	221e      	movs	r2, #30
 80015ac:	2105      	movs	r1, #5
 80015ae:	2050      	movs	r0, #80	; 0x50
 80015b0:	f7ff fa92 	bl	8000ad8 <ST7920_Draw_rectangle>
				ST7920_Draw_rectangle_filled(i, i, 50, 10);
 80015b4:	79bb      	ldrb	r3, [r7, #6]
 80015b6:	b298      	uxth	r0, r3
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	b299      	uxth	r1, r3
 80015bc:	230a      	movs	r3, #10
 80015be:	2232      	movs	r2, #50	; 0x32
 80015c0:	f7ff fb06 	bl	8000bd0 <ST7920_Draw_rectangle_filled>
				ST7920_Draw_circle(70 + i, 50, 10);
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	3346      	adds	r3, #70	; 0x46
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	220a      	movs	r2, #10
 80015cc:	2132      	movs	r1, #50	; 0x32
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb50 	bl	8000c74 <ST7920_Draw_circle>
				ST7920_Draw_circle_filled(50, 25, 10 + i);
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	330a      	adds	r3, #10
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b21b      	sxth	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	2119      	movs	r1, #25
 80015e2:	2032      	movs	r0, #50	; 0x32
 80015e4:	f7ff fc0c 	bl	8000e00 <ST7920_Draw_circle_filled>
				ST7920_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20);
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3332      	adds	r3, #50	; 0x32
 80015ee:	b299      	uxth	r1, r3
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2214      	movs	r2, #20
 80015fc:	9201      	str	r2, [sp, #4]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	460a      	mov	r2, r1
 8001604:	213f      	movs	r1, #63	; 0x3f
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff fcef 	bl	8000fea <ST7920_Draw_triangle>
				ST7920_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40);
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	b29b      	uxth	r3, r3
 8001610:	330a      	adds	r3, #10
 8001612:	b299      	uxth	r1, r3
 8001614:	2328      	movs	r3, #40	; 0x28
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	2364      	movs	r3, #100	; 0x64
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2314      	movs	r3, #20
 800161e:	224b      	movs	r2, #75	; 0x4b
 8001620:	2028      	movs	r0, #40	; 0x28
 8001622:	f7ff fd13 	bl	800104c <ST7920_Draw_triangle_filled>
				ST7920_Update();
 8001626:	f7ff f889 	bl	800073c <ST7920_Update>
			for (uint8_t i = 0; i < 10; i++) {
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	3301      	adds	r3, #1
 800162e:	71bb      	strb	r3, [r7, #6]
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	2b09      	cmp	r3, #9
 8001634:	d9aa      	bls.n	800158c <main+0x3bc>
			}
			for (uint8_t i = 10; i > 0; i--) {
 8001636:	230a      	movs	r3, #10
 8001638:	717b      	strb	r3, [r7, #5]
 800163a:	e051      	b.n	80016e0 <main+0x510>
				ST7920_Clean_Frame_buffer();
 800163c:	f7ff f9d0 	bl	80009e0 <ST7920_Clean_Frame_buffer>
				ST7920_Draw_line(0, 0, 127, 63);
 8001640:	233f      	movs	r3, #63	; 0x3f
 8001642:	227f      	movs	r2, #127	; 0x7f
 8001644:	2100      	movs	r1, #0
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff f9d6 	bl	80009f8 <ST7920_Draw_line>
				ST7920_Draw_line(0, 63, 127, 0);
 800164c:	2300      	movs	r3, #0
 800164e:	227f      	movs	r2, #127	; 0x7f
 8001650:	213f      	movs	r1, #63	; 0x3f
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff f9d0 	bl	80009f8 <ST7920_Draw_line>
				ST7920_Draw_rectangle(80, 5, 30, 20);
 8001658:	2314      	movs	r3, #20
 800165a:	221e      	movs	r2, #30
 800165c:	2105      	movs	r1, #5
 800165e:	2050      	movs	r0, #80	; 0x50
 8001660:	f7ff fa3a 	bl	8000ad8 <ST7920_Draw_rectangle>
				ST7920_Draw_rectangle_filled(i, i, 50, 10);
 8001664:	797b      	ldrb	r3, [r7, #5]
 8001666:	b298      	uxth	r0, r3
 8001668:	797b      	ldrb	r3, [r7, #5]
 800166a:	b299      	uxth	r1, r3
 800166c:	230a      	movs	r3, #10
 800166e:	2232      	movs	r2, #50	; 0x32
 8001670:	f7ff faae 	bl	8000bd0 <ST7920_Draw_rectangle_filled>
				ST7920_Draw_circle(70 + i, 50, 10);
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	3346      	adds	r3, #70	; 0x46
 8001678:	b2db      	uxtb	r3, r3
 800167a:	220a      	movs	r2, #10
 800167c:	2132      	movs	r1, #50	; 0x32
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff faf8 	bl	8000c74 <ST7920_Draw_circle>
				ST7920_Draw_circle_filled(50, 25, 10 + i);
 8001684:	797b      	ldrb	r3, [r7, #5]
 8001686:	b29b      	uxth	r3, r3
 8001688:	330a      	adds	r3, #10
 800168a:	b29b      	uxth	r3, r3
 800168c:	b21b      	sxth	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	2119      	movs	r1, #25
 8001692:	2032      	movs	r0, #50	; 0x32
 8001694:	f7ff fbb4 	bl	8000e00 <ST7920_Draw_circle_filled>
				ST7920_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20);
 8001698:	797b      	ldrb	r3, [r7, #5]
 800169a:	b29b      	uxth	r3, r3
 800169c:	3332      	adds	r3, #50	; 0x32
 800169e:	b299      	uxth	r1, r3
 80016a0:	797b      	ldrb	r3, [r7, #5]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2214      	movs	r2, #20
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	460a      	mov	r2, r1
 80016b4:	213f      	movs	r1, #63	; 0x3f
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fc97 	bl	8000fea <ST7920_Draw_triangle>
				ST7920_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40);
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	330a      	adds	r3, #10
 80016c2:	b299      	uxth	r1, r3
 80016c4:	2328      	movs	r3, #40	; 0x28
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	2364      	movs	r3, #100	; 0x64
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2314      	movs	r3, #20
 80016ce:	224b      	movs	r2, #75	; 0x4b
 80016d0:	2028      	movs	r0, #40	; 0x28
 80016d2:	f7ff fcbb 	bl	800104c <ST7920_Draw_triangle_filled>
				ST7920_Update();
 80016d6:	f7ff f831 	bl	800073c <ST7920_Update>
			for (uint8_t i = 10; i > 0; i--) {
 80016da:	797b      	ldrb	r3, [r7, #5]
 80016dc:	3b01      	subs	r3, #1
 80016de:	717b      	strb	r3, [r7, #5]
 80016e0:	797b      	ldrb	r3, [r7, #5]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1aa      	bne.n	800163c <main+0x46c>
			}
			for (uint8_t i = 0; i < 20; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	713b      	strb	r3, [r7, #4]
 80016ea:	e063      	b.n	80017b4 <main+0x5e4>
 80016ec:	20000511 	.word	0x20000511
 80016f0:	20000090 	.word	0x20000090
 80016f4:	08003308 	.word	0x08003308
 80016f8:	08003318 	.word	0x08003318
 80016fc:	08003340 	.word	0x08003340
 8001700:	08003364 	.word	0x08003364
 8001704:	0800337c 	.word	0x0800337c
 8001708:	20000002 	.word	0x20000002
 800170c:	08003cac 	.word	0x08003cac
				ST7920_Clean_Frame_buffer();
 8001710:	f7ff f966 	bl	80009e0 <ST7920_Clean_Frame_buffer>
				ST7920_Draw_line(0, 0, 127, 63);
 8001714:	233f      	movs	r3, #63	; 0x3f
 8001716:	227f      	movs	r2, #127	; 0x7f
 8001718:	2100      	movs	r1, #0
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff f96c 	bl	80009f8 <ST7920_Draw_line>
				ST7920_Draw_line(0, 63, 127, 0);
 8001720:	2300      	movs	r3, #0
 8001722:	227f      	movs	r2, #127	; 0x7f
 8001724:	213f      	movs	r1, #63	; 0x3f
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff f966 	bl	80009f8 <ST7920_Draw_line>
				ST7920_Draw_rectangle(80, 5, 30, 20);
 800172c:	2314      	movs	r3, #20
 800172e:	221e      	movs	r2, #30
 8001730:	2105      	movs	r1, #5
 8001732:	2050      	movs	r0, #80	; 0x50
 8001734:	f7ff f9d0 	bl	8000ad8 <ST7920_Draw_rectangle>
				ST7920_Draw_rectangle_filled(i, i, 50, 10);
 8001738:	793b      	ldrb	r3, [r7, #4]
 800173a:	b298      	uxth	r0, r3
 800173c:	793b      	ldrb	r3, [r7, #4]
 800173e:	b299      	uxth	r1, r3
 8001740:	230a      	movs	r3, #10
 8001742:	2232      	movs	r2, #50	; 0x32
 8001744:	f7ff fa44 	bl	8000bd0 <ST7920_Draw_rectangle_filled>
				ST7920_Draw_circle(70 + i, 50, 10);
 8001748:	793b      	ldrb	r3, [r7, #4]
 800174a:	3346      	adds	r3, #70	; 0x46
 800174c:	b2db      	uxtb	r3, r3
 800174e:	220a      	movs	r2, #10
 8001750:	2132      	movs	r1, #50	; 0x32
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fa8e 	bl	8000c74 <ST7920_Draw_circle>
				ST7920_Draw_circle_filled(50, 25, 10 + i);
 8001758:	793b      	ldrb	r3, [r7, #4]
 800175a:	b29b      	uxth	r3, r3
 800175c:	330a      	adds	r3, #10
 800175e:	b29b      	uxth	r3, r3
 8001760:	b21b      	sxth	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	2119      	movs	r1, #25
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f7ff fb4a 	bl	8000e00 <ST7920_Draw_circle_filled>
				ST7920_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20);
 800176c:	793b      	ldrb	r3, [r7, #4]
 800176e:	b29b      	uxth	r3, r3
 8001770:	3332      	adds	r3, #50	; 0x32
 8001772:	b299      	uxth	r1, r3
 8001774:	793b      	ldrb	r3, [r7, #4]
 8001776:	b29b      	uxth	r3, r3
 8001778:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800177c:	b29b      	uxth	r3, r3
 800177e:	2214      	movs	r2, #20
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	460a      	mov	r2, r1
 8001788:	213f      	movs	r1, #63	; 0x3f
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff fc2d 	bl	8000fea <ST7920_Draw_triangle>
				ST7920_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40);
 8001790:	793b      	ldrb	r3, [r7, #4]
 8001792:	b29b      	uxth	r3, r3
 8001794:	330a      	adds	r3, #10
 8001796:	b299      	uxth	r1, r3
 8001798:	2328      	movs	r3, #40	; 0x28
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2364      	movs	r3, #100	; 0x64
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2314      	movs	r3, #20
 80017a2:	224b      	movs	r2, #75	; 0x4b
 80017a4:	2028      	movs	r0, #40	; 0x28
 80017a6:	f7ff fc51 	bl	800104c <ST7920_Draw_triangle_filled>
				ST7920_Update();
 80017aa:	f7fe ffc7 	bl	800073c <ST7920_Update>
			for (uint8_t i = 0; i < 20; i++) {
 80017ae:	793b      	ldrb	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	713b      	strb	r3, [r7, #4]
 80017b4:	793b      	ldrb	r3, [r7, #4]
 80017b6:	2b13      	cmp	r3, #19
 80017b8:	d9aa      	bls.n	8001710 <main+0x540>
			}
			for (uint8_t i = 20; i > 0; i--) {
 80017ba:	2314      	movs	r3, #20
 80017bc:	70fb      	strb	r3, [r7, #3]
 80017be:	e051      	b.n	8001864 <main+0x694>
				ST7920_Clean_Frame_buffer();
 80017c0:	f7ff f90e 	bl	80009e0 <ST7920_Clean_Frame_buffer>
				ST7920_Draw_line(0, 0, 127, 63);
 80017c4:	233f      	movs	r3, #63	; 0x3f
 80017c6:	227f      	movs	r2, #127	; 0x7f
 80017c8:	2100      	movs	r1, #0
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff f914 	bl	80009f8 <ST7920_Draw_line>
				ST7920_Draw_line(0, 63, 127, 0);
 80017d0:	2300      	movs	r3, #0
 80017d2:	227f      	movs	r2, #127	; 0x7f
 80017d4:	213f      	movs	r1, #63	; 0x3f
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff f90e 	bl	80009f8 <ST7920_Draw_line>
				ST7920_Draw_rectangle(80, 5, 30, 20);
 80017dc:	2314      	movs	r3, #20
 80017de:	221e      	movs	r2, #30
 80017e0:	2105      	movs	r1, #5
 80017e2:	2050      	movs	r0, #80	; 0x50
 80017e4:	f7ff f978 	bl	8000ad8 <ST7920_Draw_rectangle>
				ST7920_Draw_rectangle_filled(i, i, 50, 10);
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	b298      	uxth	r0, r3
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	b299      	uxth	r1, r3
 80017f0:	230a      	movs	r3, #10
 80017f2:	2232      	movs	r2, #50	; 0x32
 80017f4:	f7ff f9ec 	bl	8000bd0 <ST7920_Draw_rectangle_filled>
				ST7920_Draw_circle(70 + i, 50, 10);
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	3346      	adds	r3, #70	; 0x46
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	220a      	movs	r2, #10
 8001800:	2132      	movs	r1, #50	; 0x32
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fa36 	bl	8000c74 <ST7920_Draw_circle>
				ST7920_Draw_circle_filled(50, 25, 10 + i);
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	b29b      	uxth	r3, r3
 800180c:	330a      	adds	r3, #10
 800180e:	b29b      	uxth	r3, r3
 8001810:	b21b      	sxth	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	2119      	movs	r1, #25
 8001816:	2032      	movs	r0, #50	; 0x32
 8001818:	f7ff faf2 	bl	8000e00 <ST7920_Draw_circle_filled>
				ST7920_Draw_triangle(0, 63, 50 + i, 0, 127 - i, 20);
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	b29b      	uxth	r3, r3
 8001820:	3332      	adds	r3, #50	; 0x32
 8001822:	b299      	uxth	r1, r3
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	b29b      	uxth	r3, r3
 8001828:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800182c:	b29b      	uxth	r3, r3
 800182e:	2214      	movs	r2, #20
 8001830:	9201      	str	r2, [sp, #4]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	460a      	mov	r2, r1
 8001838:	213f      	movs	r1, #63	; 0x3f
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fbd5 	bl	8000fea <ST7920_Draw_triangle>
				ST7920_Draw_triangle_filled(40, 10 + i, 75, 20, 100, 40);
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	b29b      	uxth	r3, r3
 8001844:	330a      	adds	r3, #10
 8001846:	b299      	uxth	r1, r3
 8001848:	2328      	movs	r3, #40	; 0x28
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2314      	movs	r3, #20
 8001852:	224b      	movs	r2, #75	; 0x4b
 8001854:	2028      	movs	r0, #40	; 0x28
 8001856:	f7ff fbf9 	bl	800104c <ST7920_Draw_triangle_filled>
				ST7920_Update();
 800185a:	f7fe ff6f 	bl	800073c <ST7920_Update>
			for (uint8_t i = 20; i > 0; i--) {
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	3b01      	subs	r3, #1
 8001862:	70fb      	strb	r3, [r7, #3]
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1aa      	bne.n	80017c0 <main+0x5f0>
			}
		}

		if (HAL_GetTick() - Time_update >= 300) {
 800186a:	f000 f9fb 	bl	8001c64 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <main+0x6c8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800187a:	f4ff acc9 	bcc.w	8001210 <main+0x40>
			Time_update = HAL_GetTick();
 800187e:	f000 f9f1 	bl	8001c64 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <main+0x6c8>)
 8001886:	601a      	str	r2, [r3, #0]
			if (update) {
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <main+0x6cc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f43f acbf 	beq.w	8001210 <main+0x40>
				ST7920_Update();
 8001892:	f7fe ff53 	bl	800073c <ST7920_Update>
		if (HAL_GetTick() - Time_counter > 30) {
 8001896:	e4bb      	b.n	8001210 <main+0x40>
 8001898:	2000052c 	.word	0x2000052c
 800189c:	20000002 	.word	0x20000002

080018a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b090      	sub	sp, #64	; 0x40
 80018a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	2228      	movs	r2, #40	; 0x28
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 f86e 	bl	8002990 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d4:	2302      	movs	r3, #2
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fc3d 	bl	8002168 <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x58>
		Error_Handler();
 80018f4:	f000 f89e 	bl	8001a34 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018f8:	230f      	movs	r3, #15
 80018fa:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001908:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2102      	movs	r1, #2
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fea8 	bl	8002668 <HAL_RCC_ClockConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x82>
		Error_Handler();
 800191e:	f000 f889 	bl	8001a34 <Error_Handler>
	}
}
 8001922:	bf00      	nop
 8001924:	3740      	adds	r7, #64	; 0x40
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001940:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <MX_GPIO_Init+0xf8>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a37      	ldr	r2, [pc, #220]	; (8001a24 <MX_GPIO_Init+0xf8>)
 8001946:	f043 0310 	orr.w	r3, r3, #16
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <MX_GPIO_Init+0xf8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001958:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <MX_GPIO_Init+0xf8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <MX_GPIO_Init+0xf8>)
 800195e:	f043 0320 	orr.w	r3, r3, #32
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <MX_GPIO_Init+0xf8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <MX_GPIO_Init+0xf8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <MX_GPIO_Init+0xf8>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <MX_GPIO_Init+0xf8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <MX_GPIO_Init+0xf8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <MX_GPIO_Init+0xf8>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <MX_GPIO_Init+0xf8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a6:	4820      	ldr	r0, [pc, #128]	; (8001a28 <MX_GPIO_Init+0xfc>)
 80019a8:	f000 fbc6 	bl	8002138 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	21ff      	movs	r1, #255	; 0xff
 80019b0:	481e      	ldr	r0, [pc, #120]	; (8001a2c <MX_GPIO_Init+0x100>)
 80019b2:	f000 fbc1 	bl	8002138 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RST_Pin | RS_Pin | RW_Pin | E_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f640 4103 	movw	r1, #3075	; 0xc03
 80019bc:	481c      	ldr	r0, [pc, #112]	; (8001a30 <MX_GPIO_Init+0x104>)
 80019be:	f000 fbbb 	bl	8002138 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80019c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <MX_GPIO_Init+0xfc>)
 80019dc:	f000 fa52 	bl	8001e84 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
	 PA4 PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80019e0:	23ff      	movs	r3, #255	; 0xff
 80019e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_GPIO_Init+0x100>)
 80019f8:	f000 fa44 	bl	8001e84 <HAL_GPIO_Init>

	/*Configure GPIO pins : RST_Pin RS_Pin RW_Pin E_Pin */
	GPIO_InitStruct.Pin = RST_Pin | RS_Pin | RW_Pin | E_Pin;
 80019fc:	f640 4303 	movw	r3, #3075	; 0xc03
 8001a00:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <MX_GPIO_Init+0x104>)
 8001a16:	f000 fa35 	bl	8001e84 <HAL_GPIO_Init>

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010c00 	.word	0x40010c00

08001a34 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a3a:	e7fe      	b.n	8001a3a <Error_Handler+0x6>

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_MspInit+0x60>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_MspInit+0x60>)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae6:	f000 f8ab 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f000 ff0c 	bl	800293c <__errno>
 8001b24:	4602      	mov	r2, r0
 8001b26:	230c      	movs	r3, #12
 8001b28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20005000 	.word	0x20005000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	20000518 	.word	0x20000518
 8001b58:	20000540 	.word	0x20000540

08001b5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b6a:	e003      	b.n	8001b74 <LoopCopyDataInit>

08001b6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b72:	3104      	adds	r1, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b74:	480a      	ldr	r0, [pc, #40]	; (8001ba0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b7c:	d3f6      	bcc.n	8001b6c <CopyDataInit>
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b80:	e002      	b.n	8001b88 <LoopFillZerobss>

08001b82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b84:	f842 3b04 	str.w	r3, [r2], #4

08001b88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b8c:	d3f9      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b8e:	f7ff ffe5 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f000 fed9 	bl	8002948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b96:	f7ff fb1b 	bl	80011d0 <main>
  bx lr
 8001b9a:	4770      	bx	lr
  ldr r3, =_sidata
 8001b9c:	080040f8 	.word	0x080040f8
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ba4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001ba8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001bac:	2000053c 	.word	0x2000053c

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_Init+0x28>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_Init+0x28>)
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f929 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f7ff ff34 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40022000 	.word	0x40022000

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f933 	bl	8001e6a <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f000 f909 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000004 	.word	0x20000004
 8001c38:	2000000c 	.word	0x2000000c
 8001c3c:	20000008 	.word	0x20000008

08001c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_IncTick+0x1c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_IncTick+0x20>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <HAL_IncTick+0x20>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	20000534 	.word	0x20000534

08001c64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <HAL_GetTick+0x10>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000534 	.word	0x20000534

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_Delay+0x40>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffe0 	bl	8001c64 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000000c 	.word	0x2000000c

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff90 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff49 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff5e 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff90 	bl	8001d74 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5f 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffb0 	bl	8001dd8 <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e127      	b.n	80020e8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8116 	bne.w	80020e2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d034      	beq.n	8001f28 <HAL_GPIO_Init+0xa4>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d80d      	bhi.n	8001ede <HAL_GPIO_Init+0x5a>
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d02b      	beq.n	8001f1e <HAL_GPIO_Init+0x9a>
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d804      	bhi.n	8001ed4 <HAL_GPIO_Init+0x50>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d031      	beq.n	8001f32 <HAL_GPIO_Init+0xae>
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d01c      	beq.n	8001f0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed2:	e048      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d043      	beq.n	8001f60 <HAL_GPIO_Init+0xdc>
 8001ed8:	2b11      	cmp	r3, #17
 8001eda:	d01b      	beq.n	8001f14 <HAL_GPIO_Init+0x90>
          break;
 8001edc:	e043      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ede:	4a89      	ldr	r2, [pc, #548]	; (8002104 <HAL_GPIO_Init+0x280>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d026      	beq.n	8001f32 <HAL_GPIO_Init+0xae>
 8001ee4:	4a87      	ldr	r2, [pc, #540]	; (8002104 <HAL_GPIO_Init+0x280>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d806      	bhi.n	8001ef8 <HAL_GPIO_Init+0x74>
 8001eea:	4a87      	ldr	r2, [pc, #540]	; (8002108 <HAL_GPIO_Init+0x284>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d020      	beq.n	8001f32 <HAL_GPIO_Init+0xae>
 8001ef0:	4a86      	ldr	r2, [pc, #536]	; (800210c <HAL_GPIO_Init+0x288>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01d      	beq.n	8001f32 <HAL_GPIO_Init+0xae>
          break;
 8001ef6:	e036      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ef8:	4a85      	ldr	r2, [pc, #532]	; (8002110 <HAL_GPIO_Init+0x28c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0xae>
 8001efe:	4a85      	ldr	r2, [pc, #532]	; (8002114 <HAL_GPIO_Init+0x290>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d016      	beq.n	8001f32 <HAL_GPIO_Init+0xae>
 8001f04:	4a84      	ldr	r2, [pc, #528]	; (8002118 <HAL_GPIO_Init+0x294>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0xae>
          break;
 8001f0a:	e02c      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e028      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e023      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	3308      	adds	r3, #8
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e01e      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e019      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e012      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	611a      	str	r2, [r3, #16]
          break;
 8001f52:	e008      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f54:	2308      	movs	r3, #8
 8001f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	615a      	str	r2, [r3, #20]
          break;
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2bff      	cmp	r3, #255	; 0xff
 8001f6a:	d801      	bhi.n	8001f70 <HAL_GPIO_Init+0xec>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	e001      	b.n	8001f74 <HAL_GPIO_Init+0xf0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2bff      	cmp	r3, #255	; 0xff
 8001f7a:	d802      	bhi.n	8001f82 <HAL_GPIO_Init+0xfe>
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x104>
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	3b08      	subs	r3, #8
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	210f      	movs	r1, #15
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	401a      	ands	r2, r3
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8096 	beq.w	80020e2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb6:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_GPIO_Init+0x298>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_GPIO_Init+0x298>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b56      	ldr	r3, [pc, #344]	; (800211c <HAL_GPIO_Init+0x298>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fce:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_GPIO_Init+0x29c>)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x19e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4a      	ldr	r2, [pc, #296]	; (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x19a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a49      	ldr	r2, [pc, #292]	; (800212c <HAL_GPIO_Init+0x2a8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x196>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a48      	ldr	r2, [pc, #288]	; (8002130 <HAL_GPIO_Init+0x2ac>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x192>
 8002012:	2303      	movs	r3, #3
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x1a0>
 8002016:	2304      	movs	r3, #4
 8002018:	e004      	b.n	8002024 <HAL_GPIO_Init+0x1a0>
 800201a:	2302      	movs	r3, #2
 800201c:	e002      	b.n	8002024 <HAL_GPIO_Init+0x1a0>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_GPIO_Init+0x1a0>
 8002022:	2300      	movs	r3, #0
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	f002 0203 	and.w	r2, r2, #3
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	4093      	lsls	r3, r2
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002034:	493a      	ldr	r1, [pc, #232]	; (8002120 <HAL_GPIO_Init+0x29c>)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	3302      	adds	r3, #2
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4938      	ldr	r1, [pc, #224]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
 800205a:	e006      	b.n	800206a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800205c:	4b35      	ldr	r3, [pc, #212]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	43db      	mvns	r3, r3
 8002064:	4933      	ldr	r1, [pc, #204]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8002066:	4013      	ands	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002076:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	492e      	ldr	r1, [pc, #184]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
 8002082:	e006      	b.n	8002092 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	43db      	mvns	r3, r3
 800208c:	4929      	ldr	r1, [pc, #164]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 800208e:	4013      	ands	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800209e:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	4924      	ldr	r1, [pc, #144]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
 80020aa:	e006      	b.n	80020ba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	491f      	ldr	r1, [pc, #124]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	491a      	ldr	r1, [pc, #104]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60cb      	str	r3, [r1, #12]
 80020d2:	e006      	b.n	80020e2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	43db      	mvns	r3, r3
 80020dc:	4915      	ldr	r1, [pc, #84]	; (8002134 <HAL_GPIO_Init+0x2b0>)
 80020de:	4013      	ands	r3, r2
 80020e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	3301      	adds	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f47f aed0 	bne.w	8001e98 <HAL_GPIO_Init+0x14>
  }
}
 80020f8:	bf00      	nop
 80020fa:	372c      	adds	r7, #44	; 0x2c
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	10210000 	.word	0x10210000
 8002108:	10110000 	.word	0x10110000
 800210c:	10120000 	.word	0x10120000
 8002110:	10310000 	.word	0x10310000
 8002114:	10320000 	.word	0x10320000
 8002118:	10220000 	.word	0x10220000
 800211c:	40021000 	.word	0x40021000
 8002120:	40010000 	.word	0x40010000
 8002124:	40010800 	.word	0x40010800
 8002128:	40010c00 	.word	0x40010c00
 800212c:	40011000 	.word	0x40011000
 8002130:	40011400 	.word	0x40011400
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002154:	e003      	b.n	800215e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	041a      	lsls	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e26c      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8087 	beq.w	8002296 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002188:	4b92      	ldr	r3, [pc, #584]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b04      	cmp	r3, #4
 8002192:	d00c      	beq.n	80021ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002194:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d112      	bne.n	80021c6 <HAL_RCC_OscConfig+0x5e>
 80021a0:	4b8c      	ldr	r3, [pc, #560]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d10b      	bne.n	80021c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ae:	4b89      	ldr	r3, [pc, #548]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d06c      	beq.n	8002294 <HAL_RCC_OscConfig+0x12c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d168      	bne.n	8002294 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e246      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x76>
 80021d0:	4b80      	ldr	r3, [pc, #512]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a7f      	ldr	r2, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	e02e      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x98>
 80021e6:	4b7b      	ldr	r3, [pc, #492]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a7a      	ldr	r2, [pc, #488]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b78      	ldr	r3, [pc, #480]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a77      	ldr	r2, [pc, #476]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e01d      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0xbc>
 800220a:	4b72      	ldr	r3, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a71      	ldr	r2, [pc, #452]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6e      	ldr	r2, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0xd4>
 8002224:	4b6b      	ldr	r3, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a6a      	ldr	r2, [pc, #424]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a67      	ldr	r2, [pc, #412]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fd0e 	bl	8001c64 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fd0a 	bl	8001c64 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1fa      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0xe4>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fcfa 	bl	8001c64 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fcf6 	bl	8001c64 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1e6      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x10c>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d063      	beq.n	800236a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a2:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d11c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x18c>
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d116      	bne.n	80022f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x176>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1ba      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4939      	ldr	r1, [pc, #228]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	e03a      	b.n	800236a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCC_OscConfig+0x270>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7ff fcaf 	bl	8001c64 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff fcab 	bl	8001c64 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e19b      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4927      	ldr	r1, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233e:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_RCC_OscConfig+0x270>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7ff fc8e 	bl	8001c64 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234c:	f7ff fc8a 	bl	8001c64 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e17a      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d03a      	beq.n	80023ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d019      	beq.n	80023b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <HAL_RCC_OscConfig+0x274>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7ff fc6e 	bl	8001c64 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fc6a 	bl	8001c64 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e15a      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f000 faa8 	bl	8002900 <RCC_Delay>
 80023b0:	e01c      	b.n	80023ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_RCC_OscConfig+0x274>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff fc54 	bl	8001c64 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023be:	e00f      	b.n	80023e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff fc50 	bl	8001c64 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d908      	bls.n	80023e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e140      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	42420000 	.word	0x42420000
 80023dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b9e      	ldr	r3, [pc, #632]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e9      	bne.n	80023c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80a6 	beq.w	8002546 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fe:	4b97      	ldr	r3, [pc, #604]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b94      	ldr	r3, [pc, #592]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a93      	ldr	r2, [pc, #588]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b91      	ldr	r3, [pc, #580]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <HAL_RCC_OscConfig+0x4f8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a8a      	ldr	r2, [pc, #552]	; (8002660 <HAL_RCC_OscConfig+0x4f8>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7ff fc11 	bl	8001c64 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7ff fc0d 	bl	8001c64 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0fd      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_OscConfig+0x4f8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x312>
 800246c:	4b7b      	ldr	r3, [pc, #492]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a7a      	ldr	r2, [pc, #488]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	e02d      	b.n	80024d6 <HAL_RCC_OscConfig+0x36e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x334>
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a75      	ldr	r2, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b73      	ldr	r3, [pc, #460]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a72      	ldr	r2, [pc, #456]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
 800249a:	e01c      	b.n	80024d6 <HAL_RCC_OscConfig+0x36e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d10c      	bne.n	80024be <HAL_RCC_OscConfig+0x356>
 80024a4:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a6c      	ldr	r2, [pc, #432]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4a69      	ldr	r2, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6213      	str	r3, [r2, #32]
 80024bc:	e00b      	b.n	80024d6 <HAL_RCC_OscConfig+0x36e>
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a66      	ldr	r2, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	4b64      	ldr	r3, [pc, #400]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a63      	ldr	r2, [pc, #396]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d015      	beq.n	800250a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7ff fbc1 	bl	8001c64 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7ff fbbd 	bl	8001c64 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0ab      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	4b57      	ldr	r3, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ee      	beq.n	80024e6 <HAL_RCC_OscConfig+0x37e>
 8002508:	e014      	b.n	8002534 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7ff fbab 	bl	8001c64 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff fba7 	bl	8001c64 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e095      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ee      	bne.n	8002512 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002544:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8081 	beq.w	8002652 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b08      	cmp	r3, #8
 800255a:	d061      	beq.n	8002620 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d146      	bne.n	80025f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_OscConfig+0x4fc>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7ff fb7b 	bl	8001c64 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002572:	f7ff fb77 	bl	8001c64 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e067      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d108      	bne.n	80025ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800259a:	4b30      	ldr	r3, [pc, #192]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	492d      	ldr	r1, [pc, #180]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a19      	ldr	r1, [r3, #32]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	430b      	orrs	r3, r1
 80025be:	4927      	ldr	r1, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x4fc>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff fb4b 	bl	8001c64 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d2:	f7ff fb47 	bl	8001c64 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e037      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x46a>
 80025f0:	e02f      	b.n	8002652 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <HAL_RCC_OscConfig+0x4fc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff fb34 	bl	8001c64 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff fb30 	bl	8001c64 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e020      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x498>
 800261e:	e018      	b.n	8002652 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e013      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	429a      	cmp	r2, r3
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
 8002664:	42420060 	.word	0x42420060

08002668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0d0      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4965      	ldr	r1, [pc, #404]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e073      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4936      	ldr	r1, [pc, #216]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7ff fa84 	bl	8001c64 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7ff fa80 	bl	8001c64 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e053      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d210      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4922      	ldr	r1, [pc, #136]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4601      	mov	r1, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	5cd3      	ldrb	r3, [r2, r3]
 800280a:	fa21 f303 	lsr.w	r3, r1, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1cc>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1d0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff f9e2 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	080040ac 	.word	0x080040ac
 8002834:	20000004 	.word	0x20000004
 8002838:	20000008 	.word	0x20000008

0800283c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b490      	push	{r4, r7}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002844:	1d3c      	adds	r4, r7, #4
 8002846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d002      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x40>
 8002876:	2b08      	cmp	r3, #8
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x46>
 800287a:	e02d      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800287e:	623b      	str	r3, [r7, #32]
      break;
 8002880:	e02d      	b.n	80028de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	0c9b      	lsrs	r3, r3, #18
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800288e:	4413      	add	r3, r2
 8002890:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002894:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0c5b      	lsrs	r3, r3, #17
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ae:	4413      	add	r3, r2
 80028b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028ba:	fb02 f203 	mul.w	r2, r2, r3
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	e004      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	623b      	str	r3, [r7, #32]
      break;
 80028d6:	e002      	b.n	80028de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028da:	623b      	str	r3, [r7, #32]
      break;
 80028dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028de:	6a3b      	ldr	r3, [r7, #32]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3728      	adds	r7, #40	; 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc90      	pop	{r4, r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	08003388 	.word	0x08003388
 80028f0:	08003398 	.word	0x08003398
 80028f4:	40021000 	.word	0x40021000
 80028f8:	007a1200 	.word	0x007a1200
 80028fc:	003d0900 	.word	0x003d0900

08002900 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <RCC_Delay+0x34>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <RCC_Delay+0x38>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0a5b      	lsrs	r3, r3, #9
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800291c:	bf00      	nop
  }
  while (Delay --);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	60fa      	str	r2, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f9      	bne.n	800291c <RCC_Delay+0x1c>
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000004 	.word	0x20000004
 8002938:	10624dd3 	.word	0x10624dd3

0800293c <__errno>:
 800293c:	4b01      	ldr	r3, [pc, #4]	; (8002944 <__errno+0x8>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000010 	.word	0x20000010

08002948 <__libc_init_array>:
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	2500      	movs	r5, #0
 800294c:	4e0c      	ldr	r6, [pc, #48]	; (8002980 <__libc_init_array+0x38>)
 800294e:	4c0d      	ldr	r4, [pc, #52]	; (8002984 <__libc_init_array+0x3c>)
 8002950:	1ba4      	subs	r4, r4, r6
 8002952:	10a4      	asrs	r4, r4, #2
 8002954:	42a5      	cmp	r5, r4
 8002956:	d109      	bne.n	800296c <__libc_init_array+0x24>
 8002958:	f000 fc34 	bl	80031c4 <_init>
 800295c:	2500      	movs	r5, #0
 800295e:	4e0a      	ldr	r6, [pc, #40]	; (8002988 <__libc_init_array+0x40>)
 8002960:	4c0a      	ldr	r4, [pc, #40]	; (800298c <__libc_init_array+0x44>)
 8002962:	1ba4      	subs	r4, r4, r6
 8002964:	10a4      	asrs	r4, r4, #2
 8002966:	42a5      	cmp	r5, r4
 8002968:	d105      	bne.n	8002976 <__libc_init_array+0x2e>
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002970:	4798      	blx	r3
 8002972:	3501      	adds	r5, #1
 8002974:	e7ee      	b.n	8002954 <__libc_init_array+0xc>
 8002976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800297a:	4798      	blx	r3
 800297c:	3501      	adds	r5, #1
 800297e:	e7f2      	b.n	8002966 <__libc_init_array+0x1e>
 8002980:	080040f0 	.word	0x080040f0
 8002984:	080040f0 	.word	0x080040f0
 8002988:	080040f0 	.word	0x080040f0
 800298c:	080040f4 	.word	0x080040f4

08002990 <memset>:
 8002990:	4603      	mov	r3, r0
 8002992:	4402      	add	r2, r0
 8002994:	4293      	cmp	r3, r2
 8002996:	d100      	bne.n	800299a <memset+0xa>
 8002998:	4770      	bx	lr
 800299a:	f803 1b01 	strb.w	r1, [r3], #1
 800299e:	e7f9      	b.n	8002994 <memset+0x4>

080029a0 <siprintf>:
 80029a0:	b40e      	push	{r1, r2, r3}
 80029a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029a6:	b500      	push	{lr}
 80029a8:	b09c      	sub	sp, #112	; 0x70
 80029aa:	ab1d      	add	r3, sp, #116	; 0x74
 80029ac:	9002      	str	r0, [sp, #8]
 80029ae:	9006      	str	r0, [sp, #24]
 80029b0:	9107      	str	r1, [sp, #28]
 80029b2:	9104      	str	r1, [sp, #16]
 80029b4:	4808      	ldr	r0, [pc, #32]	; (80029d8 <siprintf+0x38>)
 80029b6:	4909      	ldr	r1, [pc, #36]	; (80029dc <siprintf+0x3c>)
 80029b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80029bc:	9105      	str	r1, [sp, #20]
 80029be:	6800      	ldr	r0, [r0, #0]
 80029c0:	a902      	add	r1, sp, #8
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	f000 f866 	bl	8002a94 <_svfiprintf_r>
 80029c8:	2200      	movs	r2, #0
 80029ca:	9b02      	ldr	r3, [sp, #8]
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	b01c      	add	sp, #112	; 0x70
 80029d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029d4:	b003      	add	sp, #12
 80029d6:	4770      	bx	lr
 80029d8:	20000010 	.word	0x20000010
 80029dc:	ffff0208 	.word	0xffff0208

080029e0 <__ssputs_r>:
 80029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e4:	688e      	ldr	r6, [r1, #8]
 80029e6:	4682      	mov	sl, r0
 80029e8:	429e      	cmp	r6, r3
 80029ea:	460c      	mov	r4, r1
 80029ec:	4690      	mov	r8, r2
 80029ee:	4699      	mov	r9, r3
 80029f0:	d837      	bhi.n	8002a62 <__ssputs_r+0x82>
 80029f2:	898a      	ldrh	r2, [r1, #12]
 80029f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029f8:	d031      	beq.n	8002a5e <__ssputs_r+0x7e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	6825      	ldr	r5, [r4, #0]
 80029fe:	6909      	ldr	r1, [r1, #16]
 8002a00:	1a6f      	subs	r7, r5, r1
 8002a02:	6965      	ldr	r5, [r4, #20]
 8002a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a08:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a0c:	f109 0301 	add.w	r3, r9, #1
 8002a10:	443b      	add	r3, r7
 8002a12:	429d      	cmp	r5, r3
 8002a14:	bf38      	it	cc
 8002a16:	461d      	movcc	r5, r3
 8002a18:	0553      	lsls	r3, r2, #21
 8002a1a:	d530      	bpl.n	8002a7e <__ssputs_r+0x9e>
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	f000 fb37 	bl	8003090 <_malloc_r>
 8002a22:	4606      	mov	r6, r0
 8002a24:	b950      	cbnz	r0, 8002a3c <__ssputs_r+0x5c>
 8002a26:	230c      	movs	r3, #12
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f8ca 3000 	str.w	r3, [sl]
 8002a30:	89a3      	ldrh	r3, [r4, #12]
 8002a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a36:	81a3      	strh	r3, [r4, #12]
 8002a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3c:	463a      	mov	r2, r7
 8002a3e:	6921      	ldr	r1, [r4, #16]
 8002a40:	f000 fab6 	bl	8002fb0 <memcpy>
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	81a3      	strh	r3, [r4, #12]
 8002a50:	6126      	str	r6, [r4, #16]
 8002a52:	443e      	add	r6, r7
 8002a54:	6026      	str	r6, [r4, #0]
 8002a56:	464e      	mov	r6, r9
 8002a58:	6165      	str	r5, [r4, #20]
 8002a5a:	1bed      	subs	r5, r5, r7
 8002a5c:	60a5      	str	r5, [r4, #8]
 8002a5e:	454e      	cmp	r6, r9
 8002a60:	d900      	bls.n	8002a64 <__ssputs_r+0x84>
 8002a62:	464e      	mov	r6, r9
 8002a64:	4632      	mov	r2, r6
 8002a66:	4641      	mov	r1, r8
 8002a68:	6820      	ldr	r0, [r4, #0]
 8002a6a:	f000 faac 	bl	8002fc6 <memmove>
 8002a6e:	68a3      	ldr	r3, [r4, #8]
 8002a70:	2000      	movs	r0, #0
 8002a72:	1b9b      	subs	r3, r3, r6
 8002a74:	60a3      	str	r3, [r4, #8]
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	441e      	add	r6, r3
 8002a7a:	6026      	str	r6, [r4, #0]
 8002a7c:	e7dc      	b.n	8002a38 <__ssputs_r+0x58>
 8002a7e:	462a      	mov	r2, r5
 8002a80:	f000 fb60 	bl	8003144 <_realloc_r>
 8002a84:	4606      	mov	r6, r0
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d1e2      	bne.n	8002a50 <__ssputs_r+0x70>
 8002a8a:	6921      	ldr	r1, [r4, #16]
 8002a8c:	4650      	mov	r0, sl
 8002a8e:	f000 fab3 	bl	8002ff8 <_free_r>
 8002a92:	e7c8      	b.n	8002a26 <__ssputs_r+0x46>

08002a94 <_svfiprintf_r>:
 8002a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a98:	461d      	mov	r5, r3
 8002a9a:	898b      	ldrh	r3, [r1, #12]
 8002a9c:	b09d      	sub	sp, #116	; 0x74
 8002a9e:	061f      	lsls	r7, r3, #24
 8002aa0:	4680      	mov	r8, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	4616      	mov	r6, r2
 8002aa6:	d50f      	bpl.n	8002ac8 <_svfiprintf_r+0x34>
 8002aa8:	690b      	ldr	r3, [r1, #16]
 8002aaa:	b96b      	cbnz	r3, 8002ac8 <_svfiprintf_r+0x34>
 8002aac:	2140      	movs	r1, #64	; 0x40
 8002aae:	f000 faef 	bl	8003090 <_malloc_r>
 8002ab2:	6020      	str	r0, [r4, #0]
 8002ab4:	6120      	str	r0, [r4, #16]
 8002ab6:	b928      	cbnz	r0, 8002ac4 <_svfiprintf_r+0x30>
 8002ab8:	230c      	movs	r3, #12
 8002aba:	f8c8 3000 	str.w	r3, [r8]
 8002abe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac2:	e0c8      	b.n	8002c56 <_svfiprintf_r+0x1c2>
 8002ac4:	2340      	movs	r3, #64	; 0x40
 8002ac6:	6163      	str	r3, [r4, #20]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9309      	str	r3, [sp, #36]	; 0x24
 8002acc:	2320      	movs	r3, #32
 8002ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ad2:	2330      	movs	r3, #48	; 0x30
 8002ad4:	f04f 0b01 	mov.w	fp, #1
 8002ad8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002adc:	9503      	str	r5, [sp, #12]
 8002ade:	4637      	mov	r7, r6
 8002ae0:	463d      	mov	r5, r7
 8002ae2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ae6:	b10b      	cbz	r3, 8002aec <_svfiprintf_r+0x58>
 8002ae8:	2b25      	cmp	r3, #37	; 0x25
 8002aea:	d13e      	bne.n	8002b6a <_svfiprintf_r+0xd6>
 8002aec:	ebb7 0a06 	subs.w	sl, r7, r6
 8002af0:	d00b      	beq.n	8002b0a <_svfiprintf_r+0x76>
 8002af2:	4653      	mov	r3, sl
 8002af4:	4632      	mov	r2, r6
 8002af6:	4621      	mov	r1, r4
 8002af8:	4640      	mov	r0, r8
 8002afa:	f7ff ff71 	bl	80029e0 <__ssputs_r>
 8002afe:	3001      	adds	r0, #1
 8002b00:	f000 80a4 	beq.w	8002c4c <_svfiprintf_r+0x1b8>
 8002b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b06:	4453      	add	r3, sl
 8002b08:	9309      	str	r3, [sp, #36]	; 0x24
 8002b0a:	783b      	ldrb	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 809d 	beq.w	8002c4c <_svfiprintf_r+0x1b8>
 8002b12:	2300      	movs	r3, #0
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	9307      	str	r3, [sp, #28]
 8002b20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b24:	931a      	str	r3, [sp, #104]	; 0x68
 8002b26:	462f      	mov	r7, r5
 8002b28:	2205      	movs	r2, #5
 8002b2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002b2e:	4850      	ldr	r0, [pc, #320]	; (8002c70 <_svfiprintf_r+0x1dc>)
 8002b30:	f000 fa30 	bl	8002f94 <memchr>
 8002b34:	9b04      	ldr	r3, [sp, #16]
 8002b36:	b9d0      	cbnz	r0, 8002b6e <_svfiprintf_r+0xda>
 8002b38:	06d9      	lsls	r1, r3, #27
 8002b3a:	bf44      	itt	mi
 8002b3c:	2220      	movmi	r2, #32
 8002b3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b42:	071a      	lsls	r2, r3, #28
 8002b44:	bf44      	itt	mi
 8002b46:	222b      	movmi	r2, #43	; 0x2b
 8002b48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b4c:	782a      	ldrb	r2, [r5, #0]
 8002b4e:	2a2a      	cmp	r2, #42	; 0x2a
 8002b50:	d015      	beq.n	8002b7e <_svfiprintf_r+0xea>
 8002b52:	462f      	mov	r7, r5
 8002b54:	2000      	movs	r0, #0
 8002b56:	250a      	movs	r5, #10
 8002b58:	9a07      	ldr	r2, [sp, #28]
 8002b5a:	4639      	mov	r1, r7
 8002b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b60:	3b30      	subs	r3, #48	; 0x30
 8002b62:	2b09      	cmp	r3, #9
 8002b64:	d94d      	bls.n	8002c02 <_svfiprintf_r+0x16e>
 8002b66:	b1b8      	cbz	r0, 8002b98 <_svfiprintf_r+0x104>
 8002b68:	e00f      	b.n	8002b8a <_svfiprintf_r+0xf6>
 8002b6a:	462f      	mov	r7, r5
 8002b6c:	e7b8      	b.n	8002ae0 <_svfiprintf_r+0x4c>
 8002b6e:	4a40      	ldr	r2, [pc, #256]	; (8002c70 <_svfiprintf_r+0x1dc>)
 8002b70:	463d      	mov	r5, r7
 8002b72:	1a80      	subs	r0, r0, r2
 8002b74:	fa0b f000 	lsl.w	r0, fp, r0
 8002b78:	4318      	orrs	r0, r3
 8002b7a:	9004      	str	r0, [sp, #16]
 8002b7c:	e7d3      	b.n	8002b26 <_svfiprintf_r+0x92>
 8002b7e:	9a03      	ldr	r2, [sp, #12]
 8002b80:	1d11      	adds	r1, r2, #4
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	9103      	str	r1, [sp, #12]
 8002b86:	2a00      	cmp	r2, #0
 8002b88:	db01      	blt.n	8002b8e <_svfiprintf_r+0xfa>
 8002b8a:	9207      	str	r2, [sp, #28]
 8002b8c:	e004      	b.n	8002b98 <_svfiprintf_r+0x104>
 8002b8e:	4252      	negs	r2, r2
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	9207      	str	r2, [sp, #28]
 8002b96:	9304      	str	r3, [sp, #16]
 8002b98:	783b      	ldrb	r3, [r7, #0]
 8002b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8002b9c:	d10c      	bne.n	8002bb8 <_svfiprintf_r+0x124>
 8002b9e:	787b      	ldrb	r3, [r7, #1]
 8002ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ba2:	d133      	bne.n	8002c0c <_svfiprintf_r+0x178>
 8002ba4:	9b03      	ldr	r3, [sp, #12]
 8002ba6:	3702      	adds	r7, #2
 8002ba8:	1d1a      	adds	r2, r3, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	9203      	str	r2, [sp, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bfb8      	it	lt
 8002bb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bb6:	9305      	str	r3, [sp, #20]
 8002bb8:	4d2e      	ldr	r5, [pc, #184]	; (8002c74 <_svfiprintf_r+0x1e0>)
 8002bba:	2203      	movs	r2, #3
 8002bbc:	7839      	ldrb	r1, [r7, #0]
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f000 f9e8 	bl	8002f94 <memchr>
 8002bc4:	b138      	cbz	r0, 8002bd6 <_svfiprintf_r+0x142>
 8002bc6:	2340      	movs	r3, #64	; 0x40
 8002bc8:	1b40      	subs	r0, r0, r5
 8002bca:	fa03 f000 	lsl.w	r0, r3, r0
 8002bce:	9b04      	ldr	r3, [sp, #16]
 8002bd0:	3701      	adds	r7, #1
 8002bd2:	4303      	orrs	r3, r0
 8002bd4:	9304      	str	r3, [sp, #16]
 8002bd6:	7839      	ldrb	r1, [r7, #0]
 8002bd8:	2206      	movs	r2, #6
 8002bda:	4827      	ldr	r0, [pc, #156]	; (8002c78 <_svfiprintf_r+0x1e4>)
 8002bdc:	1c7e      	adds	r6, r7, #1
 8002bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002be2:	f000 f9d7 	bl	8002f94 <memchr>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d038      	beq.n	8002c5c <_svfiprintf_r+0x1c8>
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <_svfiprintf_r+0x1e8>)
 8002bec:	bb13      	cbnz	r3, 8002c34 <_svfiprintf_r+0x1a0>
 8002bee:	9b03      	ldr	r3, [sp, #12]
 8002bf0:	3307      	adds	r3, #7
 8002bf2:	f023 0307 	bic.w	r3, r3, #7
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	9303      	str	r3, [sp, #12]
 8002bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bfc:	444b      	add	r3, r9
 8002bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8002c00:	e76d      	b.n	8002ade <_svfiprintf_r+0x4a>
 8002c02:	fb05 3202 	mla	r2, r5, r2, r3
 8002c06:	2001      	movs	r0, #1
 8002c08:	460f      	mov	r7, r1
 8002c0a:	e7a6      	b.n	8002b5a <_svfiprintf_r+0xc6>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	250a      	movs	r5, #10
 8002c10:	4619      	mov	r1, r3
 8002c12:	3701      	adds	r7, #1
 8002c14:	9305      	str	r3, [sp, #20]
 8002c16:	4638      	mov	r0, r7
 8002c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c1c:	3a30      	subs	r2, #48	; 0x30
 8002c1e:	2a09      	cmp	r2, #9
 8002c20:	d903      	bls.n	8002c2a <_svfiprintf_r+0x196>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0c8      	beq.n	8002bb8 <_svfiprintf_r+0x124>
 8002c26:	9105      	str	r1, [sp, #20]
 8002c28:	e7c6      	b.n	8002bb8 <_svfiprintf_r+0x124>
 8002c2a:	fb05 2101 	mla	r1, r5, r1, r2
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4607      	mov	r7, r0
 8002c32:	e7f0      	b.n	8002c16 <_svfiprintf_r+0x182>
 8002c34:	ab03      	add	r3, sp, #12
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	4622      	mov	r2, r4
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <_svfiprintf_r+0x1ec>)
 8002c3c:	a904      	add	r1, sp, #16
 8002c3e:	4640      	mov	r0, r8
 8002c40:	f3af 8000 	nop.w
 8002c44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c48:	4681      	mov	r9, r0
 8002c4a:	d1d6      	bne.n	8002bfa <_svfiprintf_r+0x166>
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	065b      	lsls	r3, r3, #25
 8002c50:	f53f af35 	bmi.w	8002abe <_svfiprintf_r+0x2a>
 8002c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c56:	b01d      	add	sp, #116	; 0x74
 8002c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5c:	ab03      	add	r3, sp, #12
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4622      	mov	r2, r4
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <_svfiprintf_r+0x1ec>)
 8002c64:	a904      	add	r1, sp, #16
 8002c66:	4640      	mov	r0, r8
 8002c68:	f000 f882 	bl	8002d70 <_printf_i>
 8002c6c:	e7ea      	b.n	8002c44 <_svfiprintf_r+0x1b0>
 8002c6e:	bf00      	nop
 8002c70:	080040bc 	.word	0x080040bc
 8002c74:	080040c2 	.word	0x080040c2
 8002c78:	080040c6 	.word	0x080040c6
 8002c7c:	00000000 	.word	0x00000000
 8002c80:	080029e1 	.word	0x080029e1

08002c84 <_printf_common>:
 8002c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c88:	4691      	mov	r9, r2
 8002c8a:	461f      	mov	r7, r3
 8002c8c:	688a      	ldr	r2, [r1, #8]
 8002c8e:	690b      	ldr	r3, [r1, #16]
 8002c90:	4606      	mov	r6, r0
 8002c92:	4293      	cmp	r3, r2
 8002c94:	bfb8      	it	lt
 8002c96:	4613      	movlt	r3, r2
 8002c98:	f8c9 3000 	str.w	r3, [r9]
 8002c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ca6:	b112      	cbz	r2, 8002cae <_printf_common+0x2a>
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f8c9 3000 	str.w	r3, [r9]
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	0699      	lsls	r1, r3, #26
 8002cb2:	bf42      	ittt	mi
 8002cb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002cb8:	3302      	addmi	r3, #2
 8002cba:	f8c9 3000 	strmi.w	r3, [r9]
 8002cbe:	6825      	ldr	r5, [r4, #0]
 8002cc0:	f015 0506 	ands.w	r5, r5, #6
 8002cc4:	d107      	bne.n	8002cd6 <_printf_common+0x52>
 8002cc6:	f104 0a19 	add.w	sl, r4, #25
 8002cca:	68e3      	ldr	r3, [r4, #12]
 8002ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	42ab      	cmp	r3, r5
 8002cd4:	dc29      	bgt.n	8002d2a <_printf_common+0xa6>
 8002cd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002cda:	6822      	ldr	r2, [r4, #0]
 8002cdc:	3300      	adds	r3, #0
 8002cde:	bf18      	it	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	0692      	lsls	r2, r2, #26
 8002ce4:	d42e      	bmi.n	8002d44 <_printf_common+0xc0>
 8002ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cea:	4639      	mov	r1, r7
 8002cec:	4630      	mov	r0, r6
 8002cee:	47c0      	blx	r8
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d021      	beq.n	8002d38 <_printf_common+0xb4>
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	68e5      	ldr	r5, [r4, #12]
 8002cf8:	f003 0306 	and.w	r3, r3, #6
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	bf18      	it	ne
 8002d00:	2500      	movne	r5, #0
 8002d02:	f8d9 2000 	ldr.w	r2, [r9]
 8002d06:	f04f 0900 	mov.w	r9, #0
 8002d0a:	bf08      	it	eq
 8002d0c:	1aad      	subeq	r5, r5, r2
 8002d0e:	68a3      	ldr	r3, [r4, #8]
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	bf08      	it	eq
 8002d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bfc4      	itt	gt
 8002d1c:	1a9b      	subgt	r3, r3, r2
 8002d1e:	18ed      	addgt	r5, r5, r3
 8002d20:	341a      	adds	r4, #26
 8002d22:	454d      	cmp	r5, r9
 8002d24:	d11a      	bne.n	8002d5c <_printf_common+0xd8>
 8002d26:	2000      	movs	r0, #0
 8002d28:	e008      	b.n	8002d3c <_printf_common+0xb8>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	4652      	mov	r2, sl
 8002d2e:	4639      	mov	r1, r7
 8002d30:	4630      	mov	r0, r6
 8002d32:	47c0      	blx	r8
 8002d34:	3001      	adds	r0, #1
 8002d36:	d103      	bne.n	8002d40 <_printf_common+0xbc>
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d40:	3501      	adds	r5, #1
 8002d42:	e7c2      	b.n	8002cca <_printf_common+0x46>
 8002d44:	2030      	movs	r0, #48	; 0x30
 8002d46:	18e1      	adds	r1, r4, r3
 8002d48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d52:	4422      	add	r2, r4
 8002d54:	3302      	adds	r3, #2
 8002d56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d5a:	e7c4      	b.n	8002ce6 <_printf_common+0x62>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4622      	mov	r2, r4
 8002d60:	4639      	mov	r1, r7
 8002d62:	4630      	mov	r0, r6
 8002d64:	47c0      	blx	r8
 8002d66:	3001      	adds	r0, #1
 8002d68:	d0e6      	beq.n	8002d38 <_printf_common+0xb4>
 8002d6a:	f109 0901 	add.w	r9, r9, #1
 8002d6e:	e7d8      	b.n	8002d22 <_printf_common+0x9e>

08002d70 <_printf_i>:
 8002d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d78:	460c      	mov	r4, r1
 8002d7a:	7e09      	ldrb	r1, [r1, #24]
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	296e      	cmp	r1, #110	; 0x6e
 8002d80:	4617      	mov	r7, r2
 8002d82:	4606      	mov	r6, r0
 8002d84:	4698      	mov	r8, r3
 8002d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d88:	f000 80b3 	beq.w	8002ef2 <_printf_i+0x182>
 8002d8c:	d822      	bhi.n	8002dd4 <_printf_i+0x64>
 8002d8e:	2963      	cmp	r1, #99	; 0x63
 8002d90:	d036      	beq.n	8002e00 <_printf_i+0x90>
 8002d92:	d80a      	bhi.n	8002daa <_printf_i+0x3a>
 8002d94:	2900      	cmp	r1, #0
 8002d96:	f000 80b9 	beq.w	8002f0c <_printf_i+0x19c>
 8002d9a:	2958      	cmp	r1, #88	; 0x58
 8002d9c:	f000 8083 	beq.w	8002ea6 <_printf_i+0x136>
 8002da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002da4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002da8:	e032      	b.n	8002e10 <_printf_i+0xa0>
 8002daa:	2964      	cmp	r1, #100	; 0x64
 8002dac:	d001      	beq.n	8002db2 <_printf_i+0x42>
 8002dae:	2969      	cmp	r1, #105	; 0x69
 8002db0:	d1f6      	bne.n	8002da0 <_printf_i+0x30>
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	6813      	ldr	r3, [r2, #0]
 8002db6:	0605      	lsls	r5, r0, #24
 8002db8:	f103 0104 	add.w	r1, r3, #4
 8002dbc:	d52a      	bpl.n	8002e14 <_printf_i+0xa4>
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6011      	str	r1, [r2, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	da03      	bge.n	8002dce <_printf_i+0x5e>
 8002dc6:	222d      	movs	r2, #45	; 0x2d
 8002dc8:	425b      	negs	r3, r3
 8002dca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002dce:	486f      	ldr	r0, [pc, #444]	; (8002f8c <_printf_i+0x21c>)
 8002dd0:	220a      	movs	r2, #10
 8002dd2:	e039      	b.n	8002e48 <_printf_i+0xd8>
 8002dd4:	2973      	cmp	r1, #115	; 0x73
 8002dd6:	f000 809d 	beq.w	8002f14 <_printf_i+0x1a4>
 8002dda:	d808      	bhi.n	8002dee <_printf_i+0x7e>
 8002ddc:	296f      	cmp	r1, #111	; 0x6f
 8002dde:	d020      	beq.n	8002e22 <_printf_i+0xb2>
 8002de0:	2970      	cmp	r1, #112	; 0x70
 8002de2:	d1dd      	bne.n	8002da0 <_printf_i+0x30>
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	f043 0320 	orr.w	r3, r3, #32
 8002dea:	6023      	str	r3, [r4, #0]
 8002dec:	e003      	b.n	8002df6 <_printf_i+0x86>
 8002dee:	2975      	cmp	r1, #117	; 0x75
 8002df0:	d017      	beq.n	8002e22 <_printf_i+0xb2>
 8002df2:	2978      	cmp	r1, #120	; 0x78
 8002df4:	d1d4      	bne.n	8002da0 <_printf_i+0x30>
 8002df6:	2378      	movs	r3, #120	; 0x78
 8002df8:	4865      	ldr	r0, [pc, #404]	; (8002f90 <_printf_i+0x220>)
 8002dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dfe:	e055      	b.n	8002eac <_printf_i+0x13c>
 8002e00:	6813      	ldr	r3, [r2, #0]
 8002e02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e06:	1d19      	adds	r1, r3, #4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6011      	str	r1, [r2, #0]
 8002e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e10:	2301      	movs	r3, #1
 8002e12:	e08c      	b.n	8002f2e <_printf_i+0x1be>
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e1a:	6011      	str	r1, [r2, #0]
 8002e1c:	bf18      	it	ne
 8002e1e:	b21b      	sxthne	r3, r3
 8002e20:	e7cf      	b.n	8002dc2 <_printf_i+0x52>
 8002e22:	6813      	ldr	r3, [r2, #0]
 8002e24:	6825      	ldr	r5, [r4, #0]
 8002e26:	1d18      	adds	r0, r3, #4
 8002e28:	6010      	str	r0, [r2, #0]
 8002e2a:	0628      	lsls	r0, r5, #24
 8002e2c:	d501      	bpl.n	8002e32 <_printf_i+0xc2>
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	e002      	b.n	8002e38 <_printf_i+0xc8>
 8002e32:	0668      	lsls	r0, r5, #25
 8002e34:	d5fb      	bpl.n	8002e2e <_printf_i+0xbe>
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	296f      	cmp	r1, #111	; 0x6f
 8002e3a:	bf14      	ite	ne
 8002e3c:	220a      	movne	r2, #10
 8002e3e:	2208      	moveq	r2, #8
 8002e40:	4852      	ldr	r0, [pc, #328]	; (8002f8c <_printf_i+0x21c>)
 8002e42:	2100      	movs	r1, #0
 8002e44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e48:	6865      	ldr	r5, [r4, #4]
 8002e4a:	2d00      	cmp	r5, #0
 8002e4c:	60a5      	str	r5, [r4, #8]
 8002e4e:	f2c0 8095 	blt.w	8002f7c <_printf_i+0x20c>
 8002e52:	6821      	ldr	r1, [r4, #0]
 8002e54:	f021 0104 	bic.w	r1, r1, #4
 8002e58:	6021      	str	r1, [r4, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d13d      	bne.n	8002eda <_printf_i+0x16a>
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	f040 808e 	bne.w	8002f80 <_printf_i+0x210>
 8002e64:	4665      	mov	r5, ip
 8002e66:	2a08      	cmp	r2, #8
 8002e68:	d10b      	bne.n	8002e82 <_printf_i+0x112>
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	07db      	lsls	r3, r3, #31
 8002e6e:	d508      	bpl.n	8002e82 <_printf_i+0x112>
 8002e70:	6923      	ldr	r3, [r4, #16]
 8002e72:	6862      	ldr	r2, [r4, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	bfde      	ittt	le
 8002e78:	2330      	movle	r3, #48	; 0x30
 8002e7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e82:	ebac 0305 	sub.w	r3, ip, r5
 8002e86:	6123      	str	r3, [r4, #16]
 8002e88:	f8cd 8000 	str.w	r8, [sp]
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	aa03      	add	r2, sp, #12
 8002e90:	4621      	mov	r1, r4
 8002e92:	4630      	mov	r0, r6
 8002e94:	f7ff fef6 	bl	8002c84 <_printf_common>
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d14d      	bne.n	8002f38 <_printf_i+0x1c8>
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	b005      	add	sp, #20
 8002ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ea6:	4839      	ldr	r0, [pc, #228]	; (8002f8c <_printf_i+0x21c>)
 8002ea8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002eac:	6813      	ldr	r3, [r2, #0]
 8002eae:	6821      	ldr	r1, [r4, #0]
 8002eb0:	1d1d      	adds	r5, r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6015      	str	r5, [r2, #0]
 8002eb6:	060a      	lsls	r2, r1, #24
 8002eb8:	d50b      	bpl.n	8002ed2 <_printf_i+0x162>
 8002eba:	07ca      	lsls	r2, r1, #31
 8002ebc:	bf44      	itt	mi
 8002ebe:	f041 0120 	orrmi.w	r1, r1, #32
 8002ec2:	6021      	strmi	r1, [r4, #0]
 8002ec4:	b91b      	cbnz	r3, 8002ece <_printf_i+0x15e>
 8002ec6:	6822      	ldr	r2, [r4, #0]
 8002ec8:	f022 0220 	bic.w	r2, r2, #32
 8002ecc:	6022      	str	r2, [r4, #0]
 8002ece:	2210      	movs	r2, #16
 8002ed0:	e7b7      	b.n	8002e42 <_printf_i+0xd2>
 8002ed2:	064d      	lsls	r5, r1, #25
 8002ed4:	bf48      	it	mi
 8002ed6:	b29b      	uxthmi	r3, r3
 8002ed8:	e7ef      	b.n	8002eba <_printf_i+0x14a>
 8002eda:	4665      	mov	r5, ip
 8002edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ee0:	fb02 3311 	mls	r3, r2, r1, r3
 8002ee4:	5cc3      	ldrb	r3, [r0, r3]
 8002ee6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002eea:	460b      	mov	r3, r1
 8002eec:	2900      	cmp	r1, #0
 8002eee:	d1f5      	bne.n	8002edc <_printf_i+0x16c>
 8002ef0:	e7b9      	b.n	8002e66 <_printf_i+0xf6>
 8002ef2:	6813      	ldr	r3, [r2, #0]
 8002ef4:	6825      	ldr	r5, [r4, #0]
 8002ef6:	1d18      	adds	r0, r3, #4
 8002ef8:	6961      	ldr	r1, [r4, #20]
 8002efa:	6010      	str	r0, [r2, #0]
 8002efc:	0628      	lsls	r0, r5, #24
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	d501      	bpl.n	8002f06 <_printf_i+0x196>
 8002f02:	6019      	str	r1, [r3, #0]
 8002f04:	e002      	b.n	8002f0c <_printf_i+0x19c>
 8002f06:	066a      	lsls	r2, r5, #25
 8002f08:	d5fb      	bpl.n	8002f02 <_printf_i+0x192>
 8002f0a:	8019      	strh	r1, [r3, #0]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	4665      	mov	r5, ip
 8002f10:	6123      	str	r3, [r4, #16]
 8002f12:	e7b9      	b.n	8002e88 <_printf_i+0x118>
 8002f14:	6813      	ldr	r3, [r2, #0]
 8002f16:	1d19      	adds	r1, r3, #4
 8002f18:	6011      	str	r1, [r2, #0]
 8002f1a:	681d      	ldr	r5, [r3, #0]
 8002f1c:	6862      	ldr	r2, [r4, #4]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4628      	mov	r0, r5
 8002f22:	f000 f837 	bl	8002f94 <memchr>
 8002f26:	b108      	cbz	r0, 8002f2c <_printf_i+0x1bc>
 8002f28:	1b40      	subs	r0, r0, r5
 8002f2a:	6060      	str	r0, [r4, #4]
 8002f2c:	6863      	ldr	r3, [r4, #4]
 8002f2e:	6123      	str	r3, [r4, #16]
 8002f30:	2300      	movs	r3, #0
 8002f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f36:	e7a7      	b.n	8002e88 <_printf_i+0x118>
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	462a      	mov	r2, r5
 8002f3c:	4639      	mov	r1, r7
 8002f3e:	4630      	mov	r0, r6
 8002f40:	47c0      	blx	r8
 8002f42:	3001      	adds	r0, #1
 8002f44:	d0aa      	beq.n	8002e9c <_printf_i+0x12c>
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	079b      	lsls	r3, r3, #30
 8002f4a:	d413      	bmi.n	8002f74 <_printf_i+0x204>
 8002f4c:	68e0      	ldr	r0, [r4, #12]
 8002f4e:	9b03      	ldr	r3, [sp, #12]
 8002f50:	4298      	cmp	r0, r3
 8002f52:	bfb8      	it	lt
 8002f54:	4618      	movlt	r0, r3
 8002f56:	e7a3      	b.n	8002ea0 <_printf_i+0x130>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	464a      	mov	r2, r9
 8002f5c:	4639      	mov	r1, r7
 8002f5e:	4630      	mov	r0, r6
 8002f60:	47c0      	blx	r8
 8002f62:	3001      	adds	r0, #1
 8002f64:	d09a      	beq.n	8002e9c <_printf_i+0x12c>
 8002f66:	3501      	adds	r5, #1
 8002f68:	68e3      	ldr	r3, [r4, #12]
 8002f6a:	9a03      	ldr	r2, [sp, #12]
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	42ab      	cmp	r3, r5
 8002f70:	dcf2      	bgt.n	8002f58 <_printf_i+0x1e8>
 8002f72:	e7eb      	b.n	8002f4c <_printf_i+0x1dc>
 8002f74:	2500      	movs	r5, #0
 8002f76:	f104 0919 	add.w	r9, r4, #25
 8002f7a:	e7f5      	b.n	8002f68 <_printf_i+0x1f8>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ac      	bne.n	8002eda <_printf_i+0x16a>
 8002f80:	7803      	ldrb	r3, [r0, #0]
 8002f82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f8a:	e76c      	b.n	8002e66 <_printf_i+0xf6>
 8002f8c:	080040cd 	.word	0x080040cd
 8002f90:	080040de 	.word	0x080040de

08002f94 <memchr>:
 8002f94:	b510      	push	{r4, lr}
 8002f96:	b2c9      	uxtb	r1, r1
 8002f98:	4402      	add	r2, r0
 8002f9a:	4290      	cmp	r0, r2
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	d101      	bne.n	8002fa4 <memchr+0x10>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e003      	b.n	8002fac <memchr+0x18>
 8002fa4:	781c      	ldrb	r4, [r3, #0]
 8002fa6:	3001      	adds	r0, #1
 8002fa8:	428c      	cmp	r4, r1
 8002faa:	d1f6      	bne.n	8002f9a <memchr+0x6>
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd10      	pop	{r4, pc}

08002fb0 <memcpy>:
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	1e43      	subs	r3, r0, #1
 8002fb4:	440a      	add	r2, r1
 8002fb6:	4291      	cmp	r1, r2
 8002fb8:	d100      	bne.n	8002fbc <memcpy+0xc>
 8002fba:	bd10      	pop	{r4, pc}
 8002fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fc4:	e7f7      	b.n	8002fb6 <memcpy+0x6>

08002fc6 <memmove>:
 8002fc6:	4288      	cmp	r0, r1
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	eb01 0302 	add.w	r3, r1, r2
 8002fce:	d807      	bhi.n	8002fe0 <memmove+0x1a>
 8002fd0:	1e42      	subs	r2, r0, #1
 8002fd2:	4299      	cmp	r1, r3
 8002fd4:	d00a      	beq.n	8002fec <memmove+0x26>
 8002fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fda:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002fde:	e7f8      	b.n	8002fd2 <memmove+0xc>
 8002fe0:	4283      	cmp	r3, r0
 8002fe2:	d9f5      	bls.n	8002fd0 <memmove+0xa>
 8002fe4:	1881      	adds	r1, r0, r2
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	42d3      	cmn	r3, r2
 8002fea:	d100      	bne.n	8002fee <memmove+0x28>
 8002fec:	bd10      	pop	{r4, pc}
 8002fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ff2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002ff6:	e7f7      	b.n	8002fe8 <memmove+0x22>

08002ff8 <_free_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d043      	beq.n	8003088 <_free_r+0x90>
 8003000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003004:	1f0c      	subs	r4, r1, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	bfb8      	it	lt
 800300a:	18e4      	addlt	r4, r4, r3
 800300c:	f000 f8d0 	bl	80031b0 <__malloc_lock>
 8003010:	4a1e      	ldr	r2, [pc, #120]	; (800308c <_free_r+0x94>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	4610      	mov	r0, r2
 8003016:	b933      	cbnz	r3, 8003026 <_free_r+0x2e>
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	6014      	str	r4, [r2, #0]
 800301c:	4628      	mov	r0, r5
 800301e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003022:	f000 b8c6 	b.w	80031b2 <__malloc_unlock>
 8003026:	42a3      	cmp	r3, r4
 8003028:	d90b      	bls.n	8003042 <_free_r+0x4a>
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	1862      	adds	r2, r4, r1
 800302e:	4293      	cmp	r3, r2
 8003030:	bf01      	itttt	eq
 8003032:	681a      	ldreq	r2, [r3, #0]
 8003034:	685b      	ldreq	r3, [r3, #4]
 8003036:	1852      	addeq	r2, r2, r1
 8003038:	6022      	streq	r2, [r4, #0]
 800303a:	6063      	str	r3, [r4, #4]
 800303c:	6004      	str	r4, [r0, #0]
 800303e:	e7ed      	b.n	800301c <_free_r+0x24>
 8003040:	4613      	mov	r3, r2
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	b10a      	cbz	r2, 800304a <_free_r+0x52>
 8003046:	42a2      	cmp	r2, r4
 8003048:	d9fa      	bls.n	8003040 <_free_r+0x48>
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	1858      	adds	r0, r3, r1
 800304e:	42a0      	cmp	r0, r4
 8003050:	d10b      	bne.n	800306a <_free_r+0x72>
 8003052:	6820      	ldr	r0, [r4, #0]
 8003054:	4401      	add	r1, r0
 8003056:	1858      	adds	r0, r3, r1
 8003058:	4282      	cmp	r2, r0
 800305a:	6019      	str	r1, [r3, #0]
 800305c:	d1de      	bne.n	800301c <_free_r+0x24>
 800305e:	6810      	ldr	r0, [r2, #0]
 8003060:	6852      	ldr	r2, [r2, #4]
 8003062:	4401      	add	r1, r0
 8003064:	6019      	str	r1, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	e7d8      	b.n	800301c <_free_r+0x24>
 800306a:	d902      	bls.n	8003072 <_free_r+0x7a>
 800306c:	230c      	movs	r3, #12
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	e7d4      	b.n	800301c <_free_r+0x24>
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	1821      	adds	r1, r4, r0
 8003076:	428a      	cmp	r2, r1
 8003078:	bf01      	itttt	eq
 800307a:	6811      	ldreq	r1, [r2, #0]
 800307c:	6852      	ldreq	r2, [r2, #4]
 800307e:	1809      	addeq	r1, r1, r0
 8003080:	6021      	streq	r1, [r4, #0]
 8003082:	6062      	str	r2, [r4, #4]
 8003084:	605c      	str	r4, [r3, #4]
 8003086:	e7c9      	b.n	800301c <_free_r+0x24>
 8003088:	bd38      	pop	{r3, r4, r5, pc}
 800308a:	bf00      	nop
 800308c:	2000051c 	.word	0x2000051c

08003090 <_malloc_r>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	1ccd      	adds	r5, r1, #3
 8003094:	f025 0503 	bic.w	r5, r5, #3
 8003098:	3508      	adds	r5, #8
 800309a:	2d0c      	cmp	r5, #12
 800309c:	bf38      	it	cc
 800309e:	250c      	movcc	r5, #12
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	4606      	mov	r6, r0
 80030a4:	db01      	blt.n	80030aa <_malloc_r+0x1a>
 80030a6:	42a9      	cmp	r1, r5
 80030a8:	d903      	bls.n	80030b2 <_malloc_r+0x22>
 80030aa:	230c      	movs	r3, #12
 80030ac:	6033      	str	r3, [r6, #0]
 80030ae:	2000      	movs	r0, #0
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	f000 f87d 	bl	80031b0 <__malloc_lock>
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <_malloc_r+0xac>)
 80030b8:	6814      	ldr	r4, [r2, #0]
 80030ba:	4621      	mov	r1, r4
 80030bc:	b991      	cbnz	r1, 80030e4 <_malloc_r+0x54>
 80030be:	4c20      	ldr	r4, [pc, #128]	; (8003140 <_malloc_r+0xb0>)
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	b91b      	cbnz	r3, 80030cc <_malloc_r+0x3c>
 80030c4:	4630      	mov	r0, r6
 80030c6:	f000 f863 	bl	8003190 <_sbrk_r>
 80030ca:	6020      	str	r0, [r4, #0]
 80030cc:	4629      	mov	r1, r5
 80030ce:	4630      	mov	r0, r6
 80030d0:	f000 f85e 	bl	8003190 <_sbrk_r>
 80030d4:	1c43      	adds	r3, r0, #1
 80030d6:	d124      	bne.n	8003122 <_malloc_r+0x92>
 80030d8:	230c      	movs	r3, #12
 80030da:	4630      	mov	r0, r6
 80030dc:	6033      	str	r3, [r6, #0]
 80030de:	f000 f868 	bl	80031b2 <__malloc_unlock>
 80030e2:	e7e4      	b.n	80030ae <_malloc_r+0x1e>
 80030e4:	680b      	ldr	r3, [r1, #0]
 80030e6:	1b5b      	subs	r3, r3, r5
 80030e8:	d418      	bmi.n	800311c <_malloc_r+0x8c>
 80030ea:	2b0b      	cmp	r3, #11
 80030ec:	d90f      	bls.n	800310e <_malloc_r+0x7e>
 80030ee:	600b      	str	r3, [r1, #0]
 80030f0:	18cc      	adds	r4, r1, r3
 80030f2:	50cd      	str	r5, [r1, r3]
 80030f4:	4630      	mov	r0, r6
 80030f6:	f000 f85c 	bl	80031b2 <__malloc_unlock>
 80030fa:	f104 000b 	add.w	r0, r4, #11
 80030fe:	1d23      	adds	r3, r4, #4
 8003100:	f020 0007 	bic.w	r0, r0, #7
 8003104:	1ac3      	subs	r3, r0, r3
 8003106:	d0d3      	beq.n	80030b0 <_malloc_r+0x20>
 8003108:	425a      	negs	r2, r3
 800310a:	50e2      	str	r2, [r4, r3]
 800310c:	e7d0      	b.n	80030b0 <_malloc_r+0x20>
 800310e:	684b      	ldr	r3, [r1, #4]
 8003110:	428c      	cmp	r4, r1
 8003112:	bf16      	itet	ne
 8003114:	6063      	strne	r3, [r4, #4]
 8003116:	6013      	streq	r3, [r2, #0]
 8003118:	460c      	movne	r4, r1
 800311a:	e7eb      	b.n	80030f4 <_malloc_r+0x64>
 800311c:	460c      	mov	r4, r1
 800311e:	6849      	ldr	r1, [r1, #4]
 8003120:	e7cc      	b.n	80030bc <_malloc_r+0x2c>
 8003122:	1cc4      	adds	r4, r0, #3
 8003124:	f024 0403 	bic.w	r4, r4, #3
 8003128:	42a0      	cmp	r0, r4
 800312a:	d005      	beq.n	8003138 <_malloc_r+0xa8>
 800312c:	1a21      	subs	r1, r4, r0
 800312e:	4630      	mov	r0, r6
 8003130:	f000 f82e 	bl	8003190 <_sbrk_r>
 8003134:	3001      	adds	r0, #1
 8003136:	d0cf      	beq.n	80030d8 <_malloc_r+0x48>
 8003138:	6025      	str	r5, [r4, #0]
 800313a:	e7db      	b.n	80030f4 <_malloc_r+0x64>
 800313c:	2000051c 	.word	0x2000051c
 8003140:	20000520 	.word	0x20000520

08003144 <_realloc_r>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	4607      	mov	r7, r0
 8003148:	4614      	mov	r4, r2
 800314a:	460e      	mov	r6, r1
 800314c:	b921      	cbnz	r1, 8003158 <_realloc_r+0x14>
 800314e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003152:	4611      	mov	r1, r2
 8003154:	f7ff bf9c 	b.w	8003090 <_malloc_r>
 8003158:	b922      	cbnz	r2, 8003164 <_realloc_r+0x20>
 800315a:	f7ff ff4d 	bl	8002ff8 <_free_r>
 800315e:	4625      	mov	r5, r4
 8003160:	4628      	mov	r0, r5
 8003162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003164:	f000 f826 	bl	80031b4 <_malloc_usable_size_r>
 8003168:	42a0      	cmp	r0, r4
 800316a:	d20f      	bcs.n	800318c <_realloc_r+0x48>
 800316c:	4621      	mov	r1, r4
 800316e:	4638      	mov	r0, r7
 8003170:	f7ff ff8e 	bl	8003090 <_malloc_r>
 8003174:	4605      	mov	r5, r0
 8003176:	2800      	cmp	r0, #0
 8003178:	d0f2      	beq.n	8003160 <_realloc_r+0x1c>
 800317a:	4631      	mov	r1, r6
 800317c:	4622      	mov	r2, r4
 800317e:	f7ff ff17 	bl	8002fb0 <memcpy>
 8003182:	4631      	mov	r1, r6
 8003184:	4638      	mov	r0, r7
 8003186:	f7ff ff37 	bl	8002ff8 <_free_r>
 800318a:	e7e9      	b.n	8003160 <_realloc_r+0x1c>
 800318c:	4635      	mov	r5, r6
 800318e:	e7e7      	b.n	8003160 <_realloc_r+0x1c>

08003190 <_sbrk_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	2300      	movs	r3, #0
 8003194:	4c05      	ldr	r4, [pc, #20]	; (80031ac <_sbrk_r+0x1c>)
 8003196:	4605      	mov	r5, r0
 8003198:	4608      	mov	r0, r1
 800319a:	6023      	str	r3, [r4, #0]
 800319c:	f7fe fca8 	bl	8001af0 <_sbrk>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d102      	bne.n	80031aa <_sbrk_r+0x1a>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	b103      	cbz	r3, 80031aa <_sbrk_r+0x1a>
 80031a8:	602b      	str	r3, [r5, #0]
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
 80031ac:	20000538 	.word	0x20000538

080031b0 <__malloc_lock>:
 80031b0:	4770      	bx	lr

080031b2 <__malloc_unlock>:
 80031b2:	4770      	bx	lr

080031b4 <_malloc_usable_size_r>:
 80031b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b8:	1f18      	subs	r0, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bfbc      	itt	lt
 80031be:	580b      	ldrlt	r3, [r1, r0]
 80031c0:	18c0      	addlt	r0, r0, r3
 80031c2:	4770      	bx	lr

080031c4 <_init>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr

080031d0 <_fini>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr
